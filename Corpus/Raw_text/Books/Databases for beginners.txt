16
 
Building relations
 
Rela
tion
 
one
-
to
-
many
 
 
 
Tab
le
 
S
 
 
 
 
Tab
le
 
T
 
A
1
 
A
2
 
A
3
 
A
4
 
A
5
 
A
1
 
B
1
 
B
2
 
B
3
 
B
4
 
Primary
 
 
key
 
Foreign
 
 
key
 
Values of the f
o
reign key can not be different from the values of the primary key.
 

17
 
Building relations
 
Relation
 
many
-
to
-
many
 
 
 
Tab
l
e
 
S
 
 
 
 
              
 
Tab
l
e
 
S/T
 
 
  
Tab
l
e
 
T
 
A
1
 
A
2
 
A
3
 
A
4
 
A
5
 
A
1
 
B
1
 
B
1
 
B
2
 
B
3
 
B
4
 

18
 
Enforcing referential integrity
 

Cascade Update Related Fields 

 
the 
values of foreign keys change following 
changes of the values of the primary key
 

Cascade Delete Related Records 

 
deleting a record from the primary field in 
a relationship causes a deletion of all 
related records in the second table
 

19
 
Indexing field values
 

Purpose: speed up access to specific data
 

Used in large tables
 

Updating of all indexes every time a table record is updated 
or added
 

Example
 
 
 
 
 
 
Index of towns
 
 
 
Table of shops
 

 

 
1
 
Plus
 

 

 

 
2
 
Piotr
 

 

 

 
3
 
Tesco
 

 

 

 
4
 
Tesco
 

 

 

 
5
 
Plus
 

 

20
 
Principles for building a database
 

Types of attributes:
 

Identification
 

Information
 

Identification+information
 

Example 1: {PubID,PubName,PubTel,FoundYear}
 
 
 
 
   
Ident
 
 
Ident+inform
 
    
Inform
 

Example 2:
 
ISBN
 
Title
 
PubID
 
PubName
 
1
-
1111
-
1111
-
1
 
Macbeth
 
1
 
Big House
 
2
-
2222
-
2222
-
2
 
Hamlet
 
1
 
5
-
5555
-
5555
-
5
 
2
 
ABC Press
 

21
 
Queries
 

Database 

 
data located in tables + relations
 

Query 

 
primary mechanism for retrieving information 
from a database
,
 
consist
s
 
of questions presented to the 
database in a predefined format 

 
an expression stored 
in a database having a unique name
 

Answer to the query 

 
a computed table = Dynaset
 

SQL 

 
Structured Query Language
 

Types of queries:
 

Select query
 

Action queries (Make
-
Table, Append, Update, Delete)
 

Crosstab query
 

22
 
Creating a query in MS Access
 

23
 
Design View of a query
 
Drug and drop principle
 

24
 
Selection criteria
 

Specifying criteria:
 

A value of an expression
 

Use of criteria operators: <, >, <=, >=, <> 
 

BETWEEN, e.g. BETWEEN 2 AND 5, 
 


-
d]k[0
-

 

Logical operators: OR,   AND
 


 

Mathematical operators:
 
+, 
-
 
,*, /, 
\
, MOD, ^
 

Text operator:
 
&
 

Date/Time fields
 

Format
 
#2009
-
06
-
19#
 
 
#16:00#
 
#4:00PM#
 

Date/time functions: Date()
 
Day(date), Month(date), Year(date), Weekday(date)
 

25
 
Calculation on groups of records
 

26
 
Parameter query
 
When you run the query, you will be prompted to supply 
the
 
maximum
 
price
 

27
 
Crosstab query
 

28
 
Database Normalization Basics
 

Purpose:
 
-
 
eliminating redundant data
 
-
 
ensuring logical relations of dependent data
 

The normal forms
 
 
 
 
-
 
1NF, 2NF, 3NF, BCNF
 
 
 
 
-
 
guidelines only
 
 
 
 
-
 
hierarchical structure of NF
 

First Normal Form (1NF)
 
 
-
 
eliminate duplicative columns
 
 
-
 
create separate tables for each group of related data 
and define primary keys
 
e.g. Authors = Jones, H.; Smith K. (incorrect)
 

29
 
Database Normalization Basics
 

Second Normal Form (2NF)
 
 
-
 
meet all requirements of the 1NF
 
 
-
 
remove subsets of data that apply to multiple rows and 
place them in separate tables
 
 
-
 
create relationships between new tables using foreign 
keys
 

Example 
-
 
table of addresses:
 
 
{Town, Street, House
Number
, HouseColor, SizeOfTown}
 
 
 
 
 
 
 
 
 
attribute of Town
 

30
 

Third Normal Form (3NF)
 
 
-
 
meet all requirements of the 2NF
 
 
-
 
remove columns that are not dependent upon primary key
 

Example 
 
 
{ISBN, Title, NumberOfBooks, UnitPrice, TotalValue}
 
 
 
where: TotalValue = NumberOfBooks*UnitPrice
 
 
Correct form:
 
 
{ISBN, Title, NumberOfBooks, UnitPrice}
 
Database Normalization Basics
 

31
 

Fourth Normal Form (Boyce
-
Codd NF = BCNF)
 
 
-
 
meet all requirements of the 3NF
 
 
-
 
remove all multi
-
valued dependencies
 

Example 
 
 
{Town, Street, HouseNumber, ZIPcode}
 
 
 
where: combination of {Town, Street} 
 
determines 
{Zipcode}
 
 
Correct form:
 
 
{Street, HouseNumber, ZIPcode}
 
 
and {ZIPcode, Town}
 
Database Normalization Basics
 

32
 
Decomposition of tables
 

Relations between data must be conserved
 
 
 
 

Decomposition
 
 
 
 

Display all John Smiths
 
 
 
AuID
 
AuName
 
PubID
 
A1
 
Smith, John
 
P1
 
A2
 
Smith, John
 
P2
 
AuID
 
AuName
 
AuName
 
PubID
 
A1
 
Smith, John
 
Smith, John
 
P1
 
A2
 
Smith, John
 
Smith, John
 
P2
 
AuID
 
AuName
 
PubID
 
A1
 
Smith, John
 
P1
 
A1
 
Smith, John
 
P2
 
A2
 
Smith, John
 
P1
 
A2
 
Smith, John
 
P2
 

33
 
No_order
 
IDsupplier
 
Name_ 
Supplier
 
Address_
 
Supplier
 
IDpart
 
Name_ 
 
part
 
Qty
 
Warehouse
 
Address_
 
Warehouse
 
001
 
300
 
VW
 
Wolfsburg, 
 
Rotestrasse 10
 
53
 
Carburetor
 
100
 
5
 
Warszawa, 
 
Chopina 3
 
57
 
Crankshaft
 
50
 
5
 
Warszawa, 
 
Chopina 3
 
59
 
Mudguard
 
500
 
6
 
Warszawa, 
 
Mozarta 25
 
002
 
400
 
WSK
 

 
Kraszewskiego 5
 
54
 
Carburetor
 
500
 
5
 
Warszawa, 
 
Chopina 3
 
32
 
Wheel
 
100
 
6
 
Warszawa, 
 
Mozarta 25
 
003
 
500
 
VW 
Polska
 
Antoninek,
 

 
88
 
Engine
 
15
 
7
 
Warszawa, 
 
Bacha 3
 
004
 
600
 
FIAT
 
Bielsko
-

 
Mickiewicza 25
 
58
 
Mudguard
 
400
 
6
 
Warszawa, 
 
Mozarta 25
 
21
 
Alternator
 
50
 
7
 
Warszawa, 
 
Bacha 3
 
005
 
300
 
VW
 
Wolfsburg, 
 
Rotestrasse 10
 
53
 
Carburetor
 
200
 
5
 
Warszawa, 
 
Chopina 3
 
57
 
Crankshaft
 
30
 
5
 
Warszawa, 
 
Chopina 3
 
006
 
300
 
VW
 
Wolfsburg, 
 
Rotestrasse 10
 
59
 
Mudguard
 
20
 
6
 
Warszawa, 
 
Mozarta 25
 
Example: Relation ORDERS not normalized
 

34
 
Relation ORDERS in the first normal form (1NF)
 
eliminates duplicative columns
 
No_order
 
IDsupplier
 
Name_ 
Supplier
 
Address_
 
Supplier
 
IDpart
 
Name_ 
 
part
 
Qty
 
Warehouse
 
Address_
 
Warehouse
 
001
 
300
 
VW
 
Wolfsburg, 
 
Rotestrasse 10
 
53
 
Carburetor
 
100
 
5
 
Warszawa, 
 
Chopina 3
 
001
 
300
 
VW
 
Wolfsburg, 
 
Rotestrasse 10
 
57
 
Crankshaft
 
50
 
5
 
Warszawa, 
 
Chopina 3
 
001
 
300
 
VW
 
Wolfsburg, 
 
Rotestrasse 10
 
59
 
Mudguard
 
500
 
6
 
Warszawa, 
 
Mozarta 25
 
002
 
400
 
WSK
 

 
Kraszewskiego 5
 
54
 
Carburetor
 
500
 
5
 
Warszawa, 
 
Chopina 3
 
002
 
400
 
WSK
 

 
Kraszewskiego 5
 
32
 
Wheel
 
100
 
6
 
Warszawa, 
 
Mozarta 25
 
003
 
500
 
VW
 
Antoninek,
 

 
88
 
Engine
 
15
 
7
 
Warszawa, 
 
Bacha 3
 
004
 
600
 
FIAT
 
Bielsko
-

 
Mickiewicza 25
 
58
 
Mudguard
 
400
 
6
 
Warszawa, 
 
Mozarta 25
 
004
 
600
 
FIAT
 
Bielsko
-

 
Mickiewicza 25
 
21
 
Alternator
 
50
 
7
 
Warszawa, 
 
Bacha 3
 
005
 
300
 
VW
 
Wolfsburg, 
 
Rotestrasse 10
 
53
 
Carburetor
 
200
 
5
 
Warszawa, 
 
Chopina 3
 
005
 
300
 
VW
 
Wolfsburg, 
 
Rotestrasse 10
 
57
 
Crankshaft
 
30
 
5
 
Warszawa, 
 
Chopina 3
 
006
 
300
 
VW
 
Wolfsburg, 
 
Rotestrasse 10
 
59
 
Mudguard
 
20
 
6
 
Warszawa, 
 
Mozarta 25
 

35
 
Relation ORDERS in the second normal form (2NF)
 
all attributes fully dependent on primary keys
 
No_order
 
Address_warehouse
 
IDsupplier
 
Warehouse
 
Qty
 
Name_supplier
 
Address_supplier
 
IDpart
 
Name_part
 
Diagram of functional 
dependencies in the 
relation ORDERS
 

36
 
IDpart
 
Name_part
 
Warehouse
 
Address_Warehouse
 
53
 
Carburetor
 
5
 
Warszawa, Chopina 3
 
57
 
Crankshaft
 
5
 
Warszawa, Chopina 3
 
58
 
Mudguard
 
6
 
Warszawa, Mozarta 25
 
59
 
Mudguard
 
6
 
Warszawa, Mozarta 25
 
54
 
Carburetor
 
5
 
Warszawa, Chopina 3
 
32
 
Wheel
 
6
 
Warszawa, Mozarta 25
 
88
 
Engine
 
7
 
Warszawa, Bacha 3
 
21
 
Alternator
 
7
 
Warszawa, Bacha 3
 
No_order
 
IDsupplier
 
Name_ 
supplier
 
Address_Supplier
 
001
 
300
 
VW
 
Wolfsburg, 
 
Rotestrasse 10
 
002
 
400
 
WSK
 

 
Kraszewskiego 5
 
003
 
500
 
VW
 
Antoninek,
 

 
004
 
600
 
FIAT
 
Bielsko
-

 
Mickiewicza 25
 
005
 
300
 
VW
 
Wolfsburg, 
 
Rotestrasse 10
 
006
 
300
 
VW
 
Wolfsburg, 
 
Rotestrasse 10
 
No_order
 
IDpart
 
Qty
 
001
 
53
 
100
 
001
 
57
 
50
 
001
 
59
 
500
 
002
 
54
 
500
 
002
 
32
 
100
 
003
 
88
 
15
 
004
 
58
 
400
 
004
 
21
 
50
 
005
 
53
 
200
 
005
 
57
 
30
 
006
 
59
 
20
 
SUPPLIER_ON_ORDER
 
PARTS_IN_WAREHOUSE
 
PARTS_ON_ORDER
 
 
2NF
 

37
 
Relation ORDERS in the third normal form (3NF)
 
remove column not dependent upon primary key
 
No_order
 
IDsupplier
 
Name_supplier
 
Address_supplier
 
Diagram of functional 
dependencies in the relation 
SUPPLIER_ON_ORDER
 
Address_warehouse
 
Warehouse
 
IDpart
 
Name_part
 
Diagram of functional 
dependencies in the relation 
PARTS_IN_WAREHOUSE
 
No_order
 
IDpart
 
Qty
 
Diagram of functional 
dependencies in the relation 
PARTS_ON_ORDER
 

38
 
No_order
 
IDsupplier
 
No_order
 
IDsupplier
 
001
 
300
 
002
 
400
 
003
 
500
 
004
 
600
 
005
 
300
 
006
 
300
 
ORDER_TO_SUPPLIER
 
IDsupplier
 
Name_ Supplier
 
Address_Supplier
 
300
 
VW
 
Wolfsburg, Rotestrasse 10
 
400
 
WSK
 

 
Kraszewskiego 5
 
500
 
VW
 
Antoninek,
 

 
600
 
FIAT
 
Bielsko
-

 
Mickiewicza 25
 
IDupplier
 
Name_supplier
 
Address_Supplier
 
Warehouse
 
Address_Warehouse
 
Warehouse
 
Address_Warehouse
 
5
 
Warszawa, Chopina 3
 
6
 
Warszawa, Mozarta 25
 
7
 
Warszawa, Bacha 3
 
SUPPLIERS
 
WAREHOUSES
 
3NF
 

39
 
IDpart
 
Name_ part
 
21
 
Alternator
 
32
 
Wheel
 
53
 
Carburetor
 
54
 
Carburetor
 
57
 
Crankshaft
 
58
 
Mudguard
 
59
 
Mudguard
 
88
 
Engine
 
IDpart
 
Name_part
 
PARTS
 
IDpart
 
Warehouse
 
53
 
5
 
57
 
5
 
58
 
6
 
59
 
6
 
54
 
5
 
32
 
6
 
88
 
7
 
21
 
7
 
IDpart
 
Warehouse
 
PARTS_IN_WAREHOUSE
 
PARTS_ON_ORDER 
 
as above
 
3NF
 

40
 
Example: ORDERS
 

41
 
Structured Query Language 
-
 
SQL
 
Why to use SQL in addition to the Design View?
 
 
-
 
not all SQL functions can be used from the Design View level
 
 
-
 
SQL can be used in other applications (Excel, Word, Visual Basic)
 
 
-
 
SQL is a standard query language which can be used outside the 
 
Access program
 
One can easily switch between Design View and SQL View
 
SQL is a procedure language which tells 
what
 
to do
,
 
and not 
how
 
to do.
 
SQL components:
 
 
-
 
Data Definition Language 

 
DDL
 
 
-
 
Data Manipulation Language 

 
DML
 
 
-
 
Data 
Control Language 
-
 
DCL
 

42
 
DML component of SQL
 
Basic instructions:
 
 
-
 
SELECT
 
 
-
 
UPDATE
 
 
-
 
DELETE
 
 
Basic s
tructure of the SQL command:
 
 

 
 

 
 
WHERE criteria;
 
 
List of columns can be replaced with *.
 

43
 
Sorting
 
SELECT 
PUBLISHERS
.
Pub
Na
me
, 
PUBLISHERS
.
PubTel
 
FROM 
PUBLISHERS
 
ORDER BY 
PUBLISHERS
.
Pub
Na
me
;
 
 
Pub
Na
me
 
Pub
Tel
 
Alpha Press
 
999
-
999
-
9999
 
Big House
 
123
-
456
-
7890
 
Small House
 
714
-
000
-
0000
 
or
 
ORDER 
BY attribute DESC
 

44
 
Changing field names
 
SELECT 
PUBLISHERS
.
Pub
Na

, 
PUBLISHERS
.

 
FROM 
PUBLISHERS
 
ORDER BY 
PUBLISHERS
.
Pub
Na
me
;
 
 

 

 
Alpha Press
 
999
-
999
-
9999
 
Big House
 
123
-
456
-
7890
 
Small House
 
714
-
000
-
0000
 

45
 
Filtering
 
SELECT COUNT (ISBN) AS [How many books from Alpha Press?]
 
FROM BOOKS
 
WHERE (PubID=1);
 
How many books from Alpha Press?
 
6
 
SELECT COUNT(ISBN) AS 
[
N
umber 
of books],
 
MIN(Price) AS 
Min_Price
,
 
MAX(Price) AS 
Max_Price
,
 
AVG(Price) AS 
Avg_Price
 
FROM BOOKS;
 
Number of books
 
Min_Price
 
Max_Price
 
Avg_Price
 
15
 

 

 

 

46
 
Grouping
 
SELECT PubID, COUNT(*) AS [Number of books]
 
FROM BOOKS
 
GROUP BY PubID;
 
PubID
 
Number of books
 
1
 
6
 
2
 
4
 
3
 
4
 
4
 
1
 

47
 
Group filtering
 
SELECT PubID, COUNT(*) AS [Number of books]
 
FROM BOOKS
 
GROUP BY PubID
 
HAVING COUNT(*)>=2 
;
 
PubID
 
Number of books
 
1
 
6
 
2
 
4
 
3
 
4
 

48
 
Aggregation, filtering,
 
grouping, group filtering
 
SELECT PubID, COUNT(*) AS [Number of books]
 
FROM BOOKS
 
WHERE Price >= 25
 
GROUP BY PubID
 
HAVING COUNT(*)>=2 ;
 
PubID
 
Number of books
 
1
 
4
 
2
 
2
 
3
 
3
 

49
 
Elements of the SELECT command
 
Element
 
Description
 
 
Compulsory?
 
SELECT
 
Returns columns or expressions
 
Yes
 
FROM
 
Taking data from tables
 
Yes if data from tables
 
WHERE
 
Filtering rows
 
No
 
GROUP BY
 
Creating groups
 
Yes for aggregation 
functions
 
HAVING
 
Filtering groups
 
No
 
ORDER BY
 
Sorting of the output
 
No
 

50
 
DELETE and UPDATE
 
DELETE BOOKS1.Price
 
FROM BOOKS1
 
WHERE ((BOOKS1.Price)>40);
 
UPDATE BOOKS1
 
SET BOOKS1.Price= [BOOKS1]![Price]+1;
 
UPDATE BOOKS1
 
SET BOOKS1.Price= [BOOKS1]![Price]+1
 
WHERE ((BOOKS.Price)<20);
 

51
 
Queries based on multiple tables
 
SELECT Title, PubName, 
P
rice
 
FROM PUBLISHERS, BOOKS 
 
WHERE PUBLISHERS.PubID = BOOKS.PubID
 
ORDER BY BOOKS.Title;
 
Design View
 
 
 
 
Dynaset 

 
a computed table
 

52
 
Inner join
 
1
 
SELECT 
BOOKS.
Title, 
PUBLISHERS.
PubName, 
BOOKS.P
rice
 
FROM PUBLISHERS
 
INNER JOIN
 
BOOKS 
 
ON
 
PUBLISHERS.PubID = BOOKS.PubID
 
ORDER BY BOOKS.Title;
 
SELECT 
BOOKS.
Title, 
PUBLISHERS.
PubName, 
BOOKS.P
rice
 
FROM PUBLISHERS, BOOKS 
 
WHERE PUBLISHERS.PubID = BOOKS.PubID
 
ORDER BY BOOKS.Title;
 
Structure of the inner join one
-
to
-
many:
 
TABLE1 INNER JOIN TABLE2
 
ON TABLE1.primarykey = TABLE2.foreignkey
 

53
 
Inner join 2
 
one
-
to
-
many
 
SELECT Count(BOOKS.Title) AS [Number of books], 
PUBLISHERS.PubName, 
 
AVG(BOOKS.Price) AS [Average price]
 
FROM PUBLISHERS 
INNER JOIN
 
BOOKS 
 
ON PUBLISHERS.PubID = BOOKS
.
PubID
 
GROUP BY PUBLISHERS.Name
 
ORDER BY PUBLISHERS.Name;
 

54
 
What happens if WHERE is missing?
 
SELECT 
BOOKS.
Title, 
PUBLISHERS.
PubName, 
BOOKS.P
rice
 
FROM PUBLISHERS, BOOKS;
 
Title
 
PubName
 
Price
 
Iliad
 
Big House
 

 
Iliad
 
Alpha Press
 

 
Iliad
 
Small House
 

 
Iliad
 
Edition 2000
 

 
Moby Dick
 
Big House
 

 
Moby Dick
 
Alpha Press
 

 
Moby Dick
 
Small House
 

 
Moby Dick
 
Edition 2000
 

 
On Liberty
 
Big House
 

 
On Liberty
 
Alpha Press
 

 
On Liberty
 
Small House
 

 
On Liberty
 
Edition 2000
 

 
Ulysses
 
Big House
 

 
Ulysses
 
Alpha Press
 

 
Ulysses
 
Small House
 

 
Ulysses
 
Edition 2000
 

 

 
Result:
 
A direct product 
of two tables
 

55
 
Inner join 3
 
many
-
to
-
many
 
SELECT 
BOOKS
.T
itle
, 
BOOKS
.ISBN, 
BOOKS
.
Price
, 
BOOKS
.
Year
, 
 
PUBLISHERS.PubName, AUTHORS.AuName
 
FROM 
PUBLISHERS 
 
 
INNER JOIN (
BOOKS
 
 
 
 
INNER JOIN (AUT
H
OR
S 
 
 
 
 
INNER JOIN [
BOOKS
/AUT
H
OR
S
] 
 
 
 
 
ON AUTHORS.AuID = [BOOKS/AUTHORS].AuID) 
 
 
 
ON BOOKS.ISBN = [BOOKS/AUTHORS].ISBN) 
 
 
ON PUBLISHERS.PubID = BOOKS.PubID
;
 
Title
 
ISBN
 
Price
 
Year
 
PubName
 
AuName
 
Iliad
 
0
-
103
-
45678
-
9
 

 
1989
 
Big House
 
Homer
 
Moby Dick
 
0
-
11
-
345678
-
9
 

 
1998
 
Small House
 
Melville
 
On Liberty
 
0
-
12
-
333433
-
3
 

 
1987
 
Big House
 
Mill
 
Ulysses
 
0
-
123
-
45678
-
0
 

 
1999
 
Alpha Press
 
Joyce
 
Jane Eyre
 
0
-
12
-
345678
-
9
 

 
1990
 
Small House
 
Austen
 
Balloon
 
0
-
321
-
32132
-
1
 

 
1995
 
Small House
 
Snoopy
 
Balloon
 
0
-
321
-
32132
-
1
 

 
1995
 
Small House
 
Grumpy
 
Balloon
 
0
-
321
-
32132
-
1
 

 
1995
 
Small House
 
Sleepy
 
Main Street
 
0
-
55
-
123456
-
9
 

 
1996
 
Small House
 
Smith
 
Main Street
 
0
-
55
-
123456
-
9
 

 
1996
 
Small House
 
Jones
 
Macbeth
 
0
-
555
-
55555
-
9
 

 
1991
 
Alpha Press
 
Shakespeare
 
Hamlet
 
0
-
91
-
045678
-
5
 

 
2000
 
Alpha Press
 
Shakespeare
 

56
 
Query Customers1
 
SELECT [First_name] & " " & [Surname] AS 
Person
, 
 
BOOKS.Title, [CUST/BOOKS].DateOut, [CUST/BOOKS].DateBack
 
FROM CUSTOMER 
 
 
INNER JOIN (BOOKS 
 
 
 
INNER JOIN [CUST/BOOKS] 
 
 
 
ON BOOKS.ISBN = [CUST/BOOKS].ISBN) 
 
 
ON CUSTOMER.CustID = [CUST/BOOKS].CustID;
 

57
 
Query Customers2
 

 
OUTER JOIN
 
SELECT CUSTOMER!First_name & " " & CUSTOMER!Surname AS 
Person
, 
WhoBorrowsID.Title, WhoBorrowsID.DateOut, WhoBorrowsID.DateBack
 
FROM CUSTOMER LEFT  {outer}   JOIN WhoBorrowsID 
 
ON CUSTOMER.CustID = WhoBorrowsID.CustID;
 
WhoBorrows
 
is a query
 

58
 
Query WhoBorrows
 
SELECT [CUST/BOOKS].CustID, BOOKS.Title, [CUST/BOOKS].DateOut, 
[CUST/BOOKS].DateBack
 
FROM BOOKS INNER JOIN [CUST/BOOKS] 
 
ON BOOKS.ISBN = [CUST/BOOKS].ISBN;
 

59
 
NULL in a query
 
SELECT BOOKS.ISBN, BOOKS.Title, [CUST/BOOKS].DateOut, 
[CUST/BOOKS].DateBack
 
FROM BOOKS 
 
LEFT JOIN
 
[CUST/BOOKS] ON BOOKS.ISBN = [CUST/BOOKS].ISBN
 
WHERE 
 
((([CUST/BOOKS].DateOut) Is 
Null
) AND (([CUST/BOOKS].DateBack) Is 
Null
)) OR
 
((([CUST/BOOKS].DateOut) Is 
Not Null
) AND (([CUST/BOOKS].DateBack) Is 
Not Null
))
 
ORDER BY BOOKS.Title;
 
Available books
 

60
 
Functional queries
 
SELECT CUSTOMER!Surname & " " & CUSTOMER!First_name AS Person, 
 
Count([CUST/BOOKS].ISBN) AS [Number of books], 
 
Year([CUST/BOOKS]!DateOut) AS YearOut
 
INTO Table_NotReturned
 
FROM CUSTOMER INNER JOIN [CUST/BOOKS] 
 
 
ON CUSTOMER.CustID=[CUST/BOOKS].CustID
 
GROUP BY CUSTOMER!Surname & " " & CUSTOMER!First_name, 
 
Year([CUST/BOOKS]!DateOut), [CUST/BOOKS].DateBack
 
HAVING ((([CUST/BOOKS].DateBack) Is Null) AND 
 
((Year([CUST/BOOKS]!DateOut))=[Give the year]))
 
ORDER BY CUSTOMER!Surname & " " & CUSTOMER!First_name;
 
Only SELECT
 
 
 
 
Creating a new table
 

61
 
Functional queries
 
Creating o copy of a table
 
 
SELECT * 
 
INTO NotReturned2008
 
FROM Table_NotReturned;
 
 
 
 
 
 
Merging two tables
 
 
INSERT INTO Table_NotReturned
 
SELECT *
 
FROM NotReturned2008;
 

62
 
Creating reports
 
Characteristic features of a report:
 

attractive form
 

basic information in headers and foot
er
s
 

information grouped and sorted
 

graphical elements improving the form 
 
 
Methods of creating reports:
 

design view
 

Wizard
 

Auto
R
eport: Columnar or Tabelar
 
 
Source of data: tables or queries
 

63
 
AutoReport
 

64
 
Report 

 
design view
 

65
 
Toolbox
 
Label
 
Text
 
box
 
Button
 
Combo 
box
 
 
List 
box
 
 
Subreport
 
Image
 
 

66
 
Database form
 
A form is an Access object. It generally serves three purposes:
 
1)
 
To allow users to perform data entry. Data can be inserted, updated, 
or deleted from a table using a Form object. 
 
2)
 
To allow users to enter custom information, and based on that 
information perform a task. For example, you may want to ask a user 
for parameters before running a report. 
 
3)
 
To allow users a method of navigating through the system. For 
example, you may create a form where a user can select a form to 
load, a report to run, etc. 
 
 
Forms:
 
bound or unbound
 
A 
bound form
 
has a RecordSource, a table or query to which the form is 
"tied" or "based". An 
unbound form
 
does not have a RecordSource, 
that doesn't mean it can't contain data, but the programmer will have 
to bring that data in manually
.
 

67
 
Creating Forms in Microsoft
 
Access
 
 
Remember: there 
is
 
a large 
number of pre
-
defined forms.
 
 
 
 
 
 
The 
Form 
options quickly 
create a form based upon a 
table or query.
 

Form
 
Design
 
68
 

69
 
Creating forms 

 
Form Wizzard
 
Form facilitating introduction of a new customer to the database:
 
1)
Select the data 
source
 
2)
Select the form 
fields
 

70
 
Creating forms 

 
the layout and style
 

71
 
Creating forms 

 
the form title
 
The form can be 
modified in Design 
View mode.
 

72
 
Creating forms 
-
 
adjustments
 

73
 
Using a form
 
Access to the existing records in 
the table CUSTOMER
 
 
 
 
 
Input of a new record
 

74
 
Editing properties of a form
 
Properties icon:
 
Our original goal is to create a form for data purposes. We 



records created during that session.
 

75
 
The form after the edition of properties
 
Opening the form: no earlier 
records can be seen
 
 
 
The CustID is automatically 
assigned, First_name and 
Surname are typed in.
 
A new record is introduced 
into the table CUSTOMER
:
 

Security differences between Access 
2007 and earlier versions of Access
 
76
 
Earlier versions: 
 
-
security levels (Low, Medium, or High), 
 
-
to run potentially unsafe code or not.
 
Access 2007 disables all potentially unsafe code or other 
components, regardless of the version of Access that you used 
to create the database.
 
Message Bar:
 
You can choose to trust or not trust the disabled 
content in the database.
 

77
 
You trust the disabled content
:
 
 

Trust the database only for the current session (while the 
database is open)
 
Click 
Options
 
on the Message Bar. 
 

Trust the database permanently
 
Place the database in a trusted 
location 

 
a folder on a drive or network that you mark as trusted. 
 
Y
ou
 
don't trust the database
:
 
 
Ignore the Message Bar. When you ignore the Message Bar, you 
can still view the data in the database and use any components 
in the database that Access has not disabled.
 

Trust a database for the current session
 
78
 
1.
Start Office Access 2007, and on the 
Getting Started with 
Microsoft Office Access
 
page, under 
Featured Online 
Templates
, click 
Assets
 
to open the Assets template.
 

79
 
2.
In the 
File Name
 
box, type a name for the new database, and 
then click 
Download
.
  
Access downloads the database template 
and creates a new database, and the Message Bar appears.
 
 
3.
On the Message Bar, click 
Options
.
 
The 
Microsoft Office 
Security Options
 
dialog box appears.
 
 
4.
Click 
Enable this content
, and then click 
OK
.
 

Create a trusted location
 
80
 
Start Office Access 2007 (you do not need to open a database to 
complete these steps).
 
Click the 
Microsoft Office Button
     
 
, and then click 
Access 
Options
.
 
C
lick 
Trust Center
, and then click 
Trust Center Settings
.
 

81
 
Click 
Add new location
.
 
The 
Microsoft Office Trusted Location
 
dialog box appears.
 
C
lick 
Trusted Locations
.
 

82
 
The 
Microsoft Office Trusted Location
 
dialog box appears.
 
In the 
Path
 
box, type the file path and folder name of the location that 
you want to set as a trusted source, or click 
Browse
 
to locate a folder. 
By default, the folder must reside on a local drive.
 
 
Note 
If you want to allow trusted network locations, in the 
Trust 
Center
 
dialog box, click 
Allow Trusted Locations on my network 
(not recommended)
.
 

Move a database to a trusted location
 
83
 
If you have a database open
 
 
Click the 
Microsoft Office Button
 
.
 
Point to 
Save As
, and under 
Save the database in another 
format
, click one of the available options.
 
In the 
Save As
 
dialog box, navigate to the trusted location, 
and then click 
Save
.
 
 
 
If you do not have a database open
 
 
 
Locate and copy your database
 

Use a database password to encrypt an 
Office Access 2007 database
 
84
 
The encryption tool in Office Access 2007 combines and improves 
on two older tools 

 
database passwords and encoding. 
 
Open in exclusive 
mode
 

Encrypt by using a database password
 
85
 
Open the database (in Exclusive mode) that you want to encrypt
.
 
 
On the 
Database Tools
 
tab, in the 
Database Tools
 
group, click 
Encrypt with Password
.
 
The 
Set Database Password
 
dialog 
box appears.
 

Decrypt and open a database
 
86
 
1.
Open the encrypted database as you open any other 
database.
 
 
2.
The 
Password Required
 
dialog box appears.
 
 
3.
Type your password in the 
Enter database password
 
box, 
and then click 
OK
.
 

Remove a password
 
87
 
Open the database in Exclusive mode.
 
 
On the 
Database Tools
 
tab, in the 
Database Tools
 
group, click 
Decrypt Database
.
 

Package, sign, and distribute 
 
an Access 200
7
 
database
 
88
 
Access 2007 makes it easier and faster to sign and distribute a 
database. When you create an .
accdb
 
file or .
accde
 
file, you can 
package the file, apply a digital signature to the package, and then 
distribute the signed package to other users. 
 

ways to convey trust
 

add only one database to a package
 

signs all of the objects in your databases
 

the process also compresses the package file 
 

a security certificate 
 
 

Create a self
-
signed certificate
 
89
 
In Microsoft Windows, click the 
Start
 
button, point to 
All 
Programs
, point to 
Microsoft Office
, point to 
Microsoft Office 
Tools
, and then click 
Digital Certificate for VBA Projects
 

90
 
Create a self
-
signed certificate
 

91
 
Create a self
-
signed certificate
 

Create a signed package
 
92
 
Open the database
 
 
Microsoft Office Button
 
, 
point to 
Publish
, and then 
click 
Package and Sign
 
 
Select a digital certificate and 
then click 
OK
 
 
The 
Create Microsoft Office 
Access Signed Package
 
dialog box appears 
 

93
 
Create a signed package
 
Select a location for your signed 
database package.
 
 
Enter a name for the signed 
package in the 
File name
 
box, 
and then click 
Create
.
 
 
Access creates the .
accdc
 
file 
and places it in the location that 
you choose
 

Extract and use a signed package
 
94
 
 
1.
Click the 
Microsoft Office Button
  
, and then click 
Open
.
 
2.
Select 
Microsoft Office Access Signed Packages (*.accdc)
 
as 
the file type.
 
3.
Locate the folder that contains your .
accdc
 
file, select the file, and 
then click 
Open
.
 
4.
Do one of the following:
 

If you have earlier chosen to trust the digital certificate that 
was applied to the deployment package, the 
Extract 
Database To
 
dialog box appears. Go to the next step.
 

If you have not yet chosen to trust the digital certificate, an 
advisory message appears.
 
 

95
 
Extract and use a signed package
 
If you trust the database, click 
Open
. If you trust any certificate 
from that provider, click 
Trust all 
from publisher
 
and then click 
OK
.
 
Optionally, select a location for the extracted database, and 
then in the 
File name
 
box, enter a different name for the 
extracted database
 

Splitting a database
 
96
 

Hide VBA code from users
 
97
 
If your database contains 
Visual Basic for Applications (VBA) (Visual Basic 
for Applications (VBA): A macro
-
language version of Microsoft Visual Basic 
that is used to program Windows applications and is included with several 
Microsoft applications.) code, you can hide that code by saving your 
Microsoft Office Access 
database (database: A collection of data related to 
a particular subject or purpose. Within a database, information about a 
particular entity, such as an employee or order, is categorized into tables, 
records, and fields.) in the .
accde
 
file format. Saving a database as an 
.
accde
 
file compiles all VBA code modules, removes all editable source 
code, and compacts the destination database. Your VBA code retains its 
functionality, but the code cannot be viewed or edited. In general, the 
database will continue to function as usual 

 
you can still update data and 
run reports.
 

98
 
Microsoft Access Security 
 
The Security Wizard in MS Access is a very useful tool. 
But there is more to security than just running the wizard. 
The 12 steps will describe how to secure a database 
from start to finish. 
 

99
 
1.
You may secure any database that has been created while joined to the 
System.Mdw. 
 
2.
Create a new workgroup file(*. MDW) 
 
3.
Open the unsecured database and create a password for the Admin user. 
 
4.
Create a new user account that will be the new workgroup administrator, like 
"PowerAdmin" 
 
5.
Modify the Admins group by adding the new administrator and removing the 
original Admin account. 
 
6.
Re
-
log into Access as the new workgroup administrator that you created 
previously. 
 
7.
Set up a password for the new workgroup administrator. 
 
8.
Run the Security wizard under Tools | Security | User 
-
 
Level Security. 
 
9.
Create any additional group accounts. 
 
10.
Create any additional user accounts. 
 
11.
Set up the database object's permissions. 
 
12.
Any new databases that you create will already be secure. 
 
How to secure a database?
 

100
 
System.MDW file
 
A Workgroup Information File (*.MDW) stores 
information to authenticate a user. It stores the user 
names, group names, and passwords. It does not 
store any permission or rights to any database. Its 
main purpose is to verify that a user is really who 
they say they are. The permissions of the database 
objects, tables, queries, forms, etc., are stored in 
each MDB file. The System.mdw is the default 
workgroup filename created when you install MS 
Access. 
 

101
 
 
The Admin user
 
Every time a user opens the MS Access program, MS 
Access attempts to login the Admin user with a blank 
password. If the log in is successful, MS Access continues 
loading and the user never realizes that they were logged 
in as Admin. However, if the login is unsuccessful, say for 
example the Admin user does not have a blank password, 
then a login dialog box pops up asking the user to specify 
a username and password 
 
When you create a new User, you will be prompted for a 
User Name, Password, and a PID or Personal 
Identification number. A PID can be any text or numbers 
up to 20 characters long. All three values uniquely identify 
each user.
 
 

102
 
The 
database
.MDB file
 
MS Access verifies that the user name and password exist 
in the Workgroup Information File. After the user has been 

MDB itself stores security rights and privileges for each 
user and for each database object
.
 
 
 

each user may have. One user may have the rights to open 
the table, but not delete any records, or change the design 
of the table. Another user may not have any restrictions at 

distinction between the workgroup information file and the 
MDB file is one that confuses a lot of developers. 
 

103
 
1. 
Workgroup file
 
All the databases that you have been creating up to this time 
have been created by the Admin user of the default 
System.Mdw. The System.Mdw is a generic workgroup file. 

same Admin account with no password and with a PID of 
Null, making the Admin user account not very secure to 
continue to use. 
 
The database does not have to be completely developed to 
continue setting up security. You may continue to work on it 
after it is secured. 
 
You can secure a database that has already been create 
with a different workgroup file, if you can log into the 
database with the account that created the database and if 
that account still has full rights to all the database objects.
 

104
 
2,3. 
Create a new workgroup file(*. MDW)
 
 
Use the MS Access Workgroup Administrator program. Do 
not leave the Workgroup ID blank or anyone will be able to 
create a workgroup file similar to yours. You can name the 
workgroup file anything you'd like. It does not have to be 
named System.MDW. In fact it should have a different name 
to avoid confusion. 
 

file you create file offsite and in a secure location should 
anything happen to the original.
 
 
By establishing a password for the Admin user, Access will 
ask for a user name and password every time it Access is 
opened.
 

105
 
New workgroup administrator
 
Instead of continuing to use the Admin user, we will 
disable the Admin user's abilities. The reason for this is 
that every workgroup file has an Admin user, so using it 
will make our database less secure. I like to name my 
new workgroup administrator something like 
PowerAdmin. Write down the new name and PID. Store 
this information offsite in a secure location. 
 

106
 
5. Modifying the Admins group
 
 
Any user in the Admins group will have full control of all 
the database's objects. They can also control other 
user's access to the database's objects. 
 
 
 
By removing the Admin account from the Admins groups, 
the Admin becomes virtually useless. After our database 
is secure, if any one successfully logs in as the Admin 
user, they find that they don't have very many rights. If 
anyone needs to log in as a user with full rights, they 
should use the new workgroup administrator that we 
created in the previous steps. 
 

107
 
6
,7
. New workgroup administrator 
 
Re
-
Log into Access the new workgroup administrator that 
you created previously. 
 
Up to this point, the new workgroup administrator doesn't 
have a password. You can set up a password for this 
account under 
Tools | Security | User and Group Accounts | 
Change Log On Password
. 
 

108
 
8. Run the Security wizard
 
Security wizard under 
Tools | Security | User 
-
 
Level Security
.
 
1)
This step creates a new database and copies all the 
current database's objects into it
.
 
2)
The Wizard sets the owner of the database from Admin to 
the new workgroup administrator. This is done by creating 
a new database while logged in as the new workgroup 
administrator.
 
3)
The Security Wizard changes the owner of each object in 
the database from Admin to the new workgroup 
administrator.
 
4)
The Security Wizard removes all permissions from the 
Admin user. 
 

109
 
9. Create any group accounts
 
 
For example, you may want to create a group named 
PowerUsers for users that may need lots of database 
permissions. You may also create a Personnel group 
account for those user that only need limited rights. 
 

110
 
10. Create user accounts
 
Assign users to the appropriate groups. 
 
If a user belongs to more than one group, the user receives 
the sum or combination of the permission given to each 
group.
 

111
 
11. T
he object's permissions
 
Change the database object's permissions for each group 
account. 
 
To make permissions easier for you to manage, try and 
avoid setting permissions for individual user.
 
Remember that there are several database object types for 
which you may need to set permissions. 
 
Database object
 
Table objects
 
Query objects
 
Form objects
 
Report objects
 
Macro objects
 
Module objects
 

112
 
12. Any new databases that you create will already 
be secure as long as you are still joined to the 
workgroup file that you created in step #2. Just 
repeat step #11 to grant permissions to the object in 
your new database. 
 

113
 
Security gone awry
 
 
MS Access help file states: '.if you lose or forget your password, it can't 
be recovered, and you won't be able to open your database.' If you still 
need to open your database,
 
try
  
 
 
http://www.LostPassword.com
.
 
 
The site has password recovery tools for the most popular office 
software, ranging from MS Access to FileMaker and from MS Word to 
WordPerfect.
 
 
Access Key is a Password Recovery Kit module that recovers both 
database and user
-
level security accounts passwords. There's also an 
Access Security Recovery service (available for 
legal
 
 
owners/copyright holders only) that comes handy if a Workgroup 
Information File is lost or corrupted. You can find more info at
 
 
http://ref.lostpassword.com/access.htm?900407
 

