




















































Basic Concepts of Graph
Algorithms

Combinatorics for Computer Science (Units 6 and 7)

S. Gill Williamson



c©S. Gill Williamson 2012



Preface

From 1970 to 1990 I ran a graduate seminar on algebraic and algorithmic
combinatorics in the Department of Mathematics, UCSD. From 1972 to
1990 algorithmic combinatorics became the principal topic. The seminar
notes from 1970 to 1985 were combined and published as a book, Com-
binatorics for Computer Science (CCS), published by Computer Science
Press. Each of the ”units of study” from the seminar became a chapter
in this book.

Here, we isolate a combined Unit 6 and Unit 7, corresponding to Chap-
ter 6 and Chapter 7 of CCS, and reconstruct the original very helpful unit
specific index associated with these two units. Theorems, figures, etc.,
are numbered sequentially: DEFINITION 6.10 and EXERCISE 6.29 re-
fer to numbered items 10 and 29 of Unit 6 (or Chapter 6 in CCS). Unit 6
contains basic material at an introductory level. Unit 7 applies Unit 6
to a more advanced topic (planarity testing).

These notes focus on the visualization of algorithms through the use of
graphical and pictorial methods. This approach is both fun and pow-
erful, preparing you to invent your own algorithms for a wide range of
problems. For further references and ongoing research, search the Web,
particularly Wikipedia and the mathematics arXiv (arXiv.org).

Also available in this series are Basic Concepts of Linear Order (Unit 1),
Sorting and Listing (Unit 2 and Unit 3)), and Pólya Counting Theory
(Unit 4). Units 6 and 7 are essentially independent of earlier units.

The exercises in this material were designed for student presentation in
the seminar. In many cases, these presentations were done after we had
gone through the entire unit. A good strategy is to read and understand
these exercises and return to the ones that interest you after you have
read the unit.

S. Gill Williamson, 2012
http://cseweb.ucsd.edu/~gill

iii

http://cseweb.ucsd.edu/~gill


iv



Table of Contents

Unit 6: Basic Concepts of Graph algorithms ...............1

Unit 7: Depth First Search and Planarity ................... 66

Subject Index ............................................................ 97

v



vi



Unit 6

Basic Concepts of Graph Algorithms

1



2



3



4



5



6



7



8



9



10



11



12



13



14



15



16



17



18



19



20



21



22



23



24



25



26



27



28



29



30



31



32



33



34



35



36



37



38



3.

39



40



41



42



43



44



45



46



47



48



49



50



51



52



53



54



55



56



57



58



59



60



61



62



63



64



65



Unit 7

Depth First Search and Planarity

66



67



68



69



70



71



72



73



74



75



76



77



78



79



80



81



82



83



84



85



86



87



88



89



90



91



92



93



94



95



96



Index

procedure
BREAK(H), 48–50
CONSTRUCT T AND B, 70
ESEQ(T), 6
INVPRU(T), 8
JOIN(H), 48–50
MAXSON, 35
MOVE(t, δ, α, β), 18
NEXT(Ti), 23
NEXTPERM(A,m), 20
PATH(e), 78
PRU(T), 7
SLOPPY PLANARITY TEST,

60–62
construct lineal span. tree,

28

acyclic
no cycles, 5

adjacency table, 4, 30, 77
adjacent to a

VERT(b), 30
articulation points graph, 50, 51
automorphism group

graph, 40

backedges vs. chords, 68
bicomponent tree, 54–60
bicomponents

complexity issues, 73
computing, 72, 73

biconnected
articulation points, 51

biconnected graph, 47
BIJ(A,B)

bijections A to B, 39–42
bijections

BIJ(A,B), 39–42
binary Gray code, 21
breadth first, edges BRE(T), 13
breadth first, vertices BRV(T),

13
bridge SEG(e), 80
bridge carrier, 80
bridge graph, 58–62
bridges

cycle, 52, 53
subgraph, 53

canonical diagrams
trees, 43

carrier of bridge, 80
in cycle, 53, 54

components
connected, 5

connected graph, 5
has lineal spanning tree, 25
lineal spanning tree, 24

connected graphs on V
CON(V), 36

connected graphs, four vertices,
37

consistent embedding, 80
contents, v
cycle

bridges of, 52, 53
carrier of bridge, 53, 54
length n, 5

cycle bicomponent, 53
cycle equivalent edges, 50

97



cycle tree, 56, 57

data structure
terminal, 33

depth first
edges, DFE(T), 11, 66, 67
vertices, DFV(T), 11, 66, 67

depth first sequences
definition, 11

direct access model
data structure, 28, 29

directed graph, 2
doubly linked list

pointers, 30

edge
directed, 6
incident on vertex, 6
loop, 4
natural directed, 9
sequence, ESEQ(T), 6
stack in tree, STACK(e), 12

edge action EPER(V)
on PER(P2(V)), 39–42

edge set, 2
edges

backedges, 68
breadth first BRE(T), 13
chords, 68
cycle equivalent, 50
postorder POSE(T), 12, 69–

71
preorder PREE(T), 12, 69–

71, 74
embedding, 2

consistent, 80
preorder vertices, 75, 76
properly ordered, 76

EPER(V)
action on GRAPHS(V), 39–

42

graph

2-connected or biconnected,
47

articulation points, 50, 51
automorphism

stabilizer, 40
bridge graph, 58–62
chain of edges, 10
connected, 5
defined as triple, 2
directed, 2, 4
directed path, 10
embedding of, 58–60
intuitive idea, 1
ordered, 4, 66
planar, 58–60
planar embedding, 58–60
rank, nullity, 47, 48
rooted lineal spanning tree,

25
rooted lineal subtree, 25
tree definition, 5
undirected UND(G), 10

graphs
isomorphism of, 38–42

greedy algorithm, 50

Hopcroft , 96
hypergraph, 3

incidence function, 2
inversion enumerator

polynomial, 36
inversions

definition, 35
isomorphic graphs, 39–42
isomorphism of graphs, 38

Kuratowski subgraphs, 63

lineal spanning tree, 24, 68, 69
algorithm for, 27
chord, backedge, 34
complexity, 28–34
connected graph, 25

98



first proof of, 26
inversions in, 35
second proof of, 27

lineal subtree, 25
connected graph, 24, 68
ordered, 24, 68

loop, 2, 4
LOW1, LOW2 values, 72, 73

multigraph, 3
multiset, 3

notation
n = {1, . . . , n}, 6

ordered rooted tree, 42, 66
orderly algorithm, 38, 43

basic mapping B, 44
computing B−1, 44
example, 45–47
exercises, 46, 47

partition
set unordered Π(n, k), 17

path
length n, 4

path directed, 10
path tree, 78

example, 79
PER(A)

permutations of A, 39–42
PER(V)

permutations of vertices, 39–
42

planar
bipartite BRGR(C), 59–62

planar bipartite if e ≤ 2v − 4,
62, 63

planar embedding
Euler e−v+r = 2, 63

planar embedding graph, 58–60
planar graph, 58–60
planar if e ≤ 3v−6, 62, 63
planar not consistent, 81

planarity test
outline, 59–62

planarity testing
MAX−MIN CHAIN, 94
directly linked test, 91
example, 82–91
non-bichromatic SEGGR, 95
relevant SEGGR(e,H), 92,

93
pointers, 30–33
polynomial

inversion enumerator, 36
postorder edges, POSE(T), 12
postorder vertices, POSV(T), 12
Prüffer sequence of T, 7
preface, iii
preorder edges, PREE(T), 12
preorder vertices, PREV(T), 12
principal subtree, 66

definition, 11

rank of G
edges in spanning forest, 47

segment graph
bichromatic, 82
planarity condition, 82

spanning
forest, 24, 68
subgraph, 24, 68
tree, 24, 68
tree - lineal, 24, 68
tree - rooted, 24, 68

spanning forest
chords, 24, 68
rank of G, 47

spanning subgraph, 47
stability subgroup

graph, 40
stack

STACK(e′), 24
stack in tree, edge, STACK(e),

13

99



stack in tree, vertex, STACK(x),
13

subgraph

bridges of, 53

spanning, 47

subset action

of PER(A), 39–42

subsets of A: P(A)
size 2: P2(A), 39–42

subtree

lineal, 25

Tarjan, 96

Towers of Hanoi, 13–16

tree

breadth first order, 12

definition, 5

distance between vertices, 9

lineal spanning, 24, 68

natural directed, 9, 66

of cycles, 56, 57

of paths, 77–79

ordered rooted, 42, 66

ordered rooted ORTR, 9, 66

rooted RTR, 9, 66

subtree, 24, 68

unique path to root, 9

trees

all TR(V), 7

ancestor of y, 22, 68

canonical diagrams, 43

descendant of x, 22, 68

edge

initial vertex IN(e), 22

terminal vertex TM(e), 22

father of vertex, 22

lexicographic order, 9

lineal descendants, 22, 68

notation, 21

son of vertex, 22

trees rooted at v

TR(V, v), 36

vector notation
← L, L →, x → L, etc.,

22
vertex

adjacent, 4, 5, 66
degree of, 6
pendant, leaf, terminal, 6
sequence, 4
stack in tree, STACK(x), 12

vertex set, 2
vertices

breadth first BRV(T), 13
internal of tree INT(T), 8
path equivalence, 5
pendant of tree, PEND(T),

6
postorder POSV(T), 12, 69–

71
preorder PREV(T), 12, 69–

71, 74–76

100



