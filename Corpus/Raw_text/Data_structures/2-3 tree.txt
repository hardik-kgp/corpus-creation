***2-3 tree***
In computer science, a  2–3 tree  is a tree data structure, where every node with children (internal node) has either two children (2-node) and one data element or three children (3-nodes) and two data elements.  According to Knuth, "a B-tree of order 3 is a 2-3 tree." Nodes on the outside of the tree (leaf nodes) have no children and one or two data elements. 2−3 trees were invented by John Hopcroft in 1970. 
 
		 
 2–3 trees are balanced, meaning that each right, center, and left subtree contains the same or close to the same amount of data.
 

 **Definitions**

 We say that an internal node is a  2-node  if it has  one  data element and  two  children.
 We say that an internal node is a  3-node  if it has  two  data elements and  three  children.
 We say that  T  is a  2–3 tree  if and only if one of the following statements hold:
 
 T  is empty. In other words,  T  does not have any nodes. 
 T  is a 2-node with data element  a . If  T  has left child  L  and right child  R , then
 L  and  R  are non-empty 2–3 trees of the same height; 
 a  is greater than each element in  L ; and 
 a  is less than or equal to each data element in  R . 
 T  is a 3-node with data elements  a  and  b , where  a    <   b . If  T  has left child  L , middle child  M , and right child  R , then
 L ,  M , and  R  are non-empty 2–3 trees of equal height; 
 a  is greater than each data element in  L  and less than or equal to each data element in  M ; and 
 b  is greater than each data element in  M  and less than or equal to each data element in  R . 

 **Properties**

 Every internal node is a 2-node or a 3-node. 
 All leaves are at the same level. 
 All data is kept in sorted order. 

 **Operations**

 **Searching**

 Searching for an item in a 2–3 tree is similar to searching for an item in a binary search tree. Since the data elements in each node are ordered, a search function will be directed to the correct subtree and eventually to the correct node which contains the item.
 **Insertion**

 Insertion works by searching for the proper location of the key and adding it there. If the node becomes a 4-node then the node is split into two 2-nodes and the middle key is moved up to the parent. The parent may then become a 4-node, in which case it is split too, propagating a key to its own parent. This process repeats until we reach a parent which is a 2-node and does not need to be split, or when we reach the root, in which case we use the propagated element to create a new root which is a 2-node. With this algorithm, the number of operations to perform is proportional to the height of the tree, hence logarithmic because the tree is balanced. The process ensures that its result is a 2-3 tree: in particular, all leaves remain at the same depth.
 The diagram below illustrates possible cases of this process.
 

 