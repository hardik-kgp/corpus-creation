***AVL tree***
In computer science, anAVL tree(named after inventorsA delson- V elsky andL andis) is a self-balancing binary search tree. It was the first such data structure to be invented. In an AVL tree, the heights of the two child subtrees of any node differ by at most one; if at any time they differ by more than one, rebalancing is done to restore this property. Lookup, insertion, and deletion all takeO(logn )time in both the average and worst cases, where

 
ndd is the number of nodes in the tree prior to the operation. Insertions and deletions may require the tree to be rebalanced by one or more tree rotations.
 The AVL tree is named after its two Soviet inventors, Georgy Adelson-Velsky and Evgenii Landis, who published it in their 1962 paper "An algorithm for the organization of information". AVL trees are often compared with red–black trees because both support the same set of operations and take

 
O(log⁡n)dd time for the basic operations. For lookup-intensive applications, AVL trees are faster than red–black trees because they are more strictly balanced. Similar to red–black trees, AVL trees are height-balanced. Both are, in general, neither weight-balanced nor

 
μdd -balanced for any

 
μ≤12
 
 ; that is, sibling nodes can have hugely differing numbers of descendants.
 

 **Definition**

 **Balance factor**

 In a binary tree thebalance factorof a node

 
Ndd is defined to be the height difference
dd
 
BalanceFactor(N):=Height(RightSubtree(N))−Height(LeftSubtree(N))dd of its two child sub-trees. A binary tree is defined to be anAVL treeif the invariant
dd
 
BalanceFactor(N)∈{−1,0,1}
 
 holds for every node

 
Ndd in the tree.
 A node

 
Ndd with

 
BalanceFactor(N)<0dd is called "left-heavy", one with

 
BalanceFactor(N)>0dd is called "right-heavy", and one with

 
BalanceFactor(N)=0dd is sometimes simply called "balanced".
 
 Remark In what follows, because there is a one-to-one correspondence between nodes and the sub-trees rooted by them, the name of an object is sometimes used to refer to the node and sometimes used to refer to the sub-tree.
 

 **Properties**

 Balance factors can be kept up-to-date by knowing the previous balance factors and the change in height – it is not necessary to know the absolute height. For holding the AVL balance information in the traditional way, two bits per node are sufficient. However, later research showed if the AVL tree is implemented as a rank balanced tree with delta ranks allowed of 1 or 2 – with meaning "when going upward there is an additional increment in height of one or two", this can be done with one bit.
 The heighth(counted as number of edges on the longest path) of an AVL tree withnnodes lies in the interval:dd
 
log 2 ⁡(n+1)−1≤h<clog 2 ⁡(n+2)+bdd with the golden ratioφ := (1+ √ 5 ) ⁄ 2≈ 1.6180 ,c  :=1 ⁄ log 2φ ≈ 1.4405 ,  and b  :=c ⁄ 2log 25 – 3 ≈ –1.3277 .
This is because an AVL tree of heighthcontains at leastF h +2– 1nodes where{ F h }is the Fibonacci sequence with the seed valuesF 1= 1 ,F 2= 1 .
 

 **Operations**

 Read-only operations of an AVL tree involve carrying out the same actions as would be carried out on an unbalanced binary search tree, but modifications have to observe and restore the height balance of the sub-trees.
 

 **Searching**

 Searching for a specific key in an AVL tree can be done the same way as that of any balanced or unbalanced binary search tree. In order for search to work effectively it has to employ a comparison function which establishes a total order (or at least a total preorder) on the set of keys. The number of comparisons required for successful search is limited by the heighthand for unsuccessful search is very close toh , so both are inO(logn ) . 

 **Traversal**

 Once a node has been found in an AVL tree, thenextorpreviousnode can be accessed in amortized constant time. Some instances of exploring these "nearby" nodes require traversing up toh∝ log( n )links (particularly when navigating from the rightmost leaf of the root's left subtree to the root or from the root to the leftmost leaf of the root's right subtree; in the AVL tree of figure 1, moving from node P to thenext but onenode Q takes 3 steps). However, exploring allnnodes of the tree in this manner would visit each link exactly twice: one downward visit to enter the subtree rooted by that node, another visit upward to leave that node's subtree after having explored it. And since there aren −1links in any tree, the amortized cost is2×( n −1)/ n , or approximately 2.
 

 **Insert**

 When inserting an element into an AVL tree, you initially follow the same process as inserting into a Binary Search Tree.More explicitly: In case a preceding search has not been successful the search routine returns the tree itself with indication EMPTY and the new node is inserted as root. Or, if the tree has not been empty the search routine returns a node and a direction (left or right) where the returned node does not have a child. Then the node to be inserted is made child of the returned node at the returned direction.
 After this insertion it is necessary to check each of the node's ancestors for consistency with the invariants of AVL trees: this is called "retracing". This is achieved by considering the balance factor of each node. Since with a single insertion the height of an AVL subtree cannot increase by more than one, the temporary balance factor of a node after an insertion will be in the range[–2,+2].For each node checked, if the temporary balance factor remains in the range from –1 to +1 then only an update of the balance factor and no rotation is necessary. However, if the temporary balance factor becomes less than –1 or greater than +1, the subtree rooted at this node is AVL unbalanced, and a rotation is needed.With insertion as the code below shows, the adequate rotation immediately perfectly rebalances the tree.
 In figure 1, by inserting the new node Z as a child of node X the height of that subtree Z increases from 0 to 1.
 
 Invariant of the retracing loop for an insertion The height of the subtree rooted by Z has increased by 1. It is already in AVL shape.
 

 In order to update the balance factors of all nodes, first observe that all nodes requiring correction lie from child to parent along the path of the inserted leaf. If the above procedure is applied to nodes along this path, starting from the leaf, then every node in the tree will again have a balance factor of −1, 0, or 1.
 The retracing can stop if the balance factor becomes 0 implying that the height of that subtree remains unchanged.
 If the balance factor becomes ±1 then the height of the subtree increases by one and the retracing needs to continue.
 If the balance factor temporarily becomes ±2, this has to be repaired by an appropriate rotation after which the subtree has the same height as before (and its root the balance factor 0).
 The time required isO(logn )for lookup, plus a maximum ofO(logn )retracing levels ( O(1)on average) on the way back to the root, so the operation can be completed inO(logn )time. 

 **Delete**

 The preliminary steps for deleting a node are described in section Binary search tree#Deletion.
There, the effective deletion of the subject node or the replacement node decreases the height of the corresponding child tree either from 1 to 0 or from 2 to 1, if that node had a child.
 Starting at this subtree, it is necessary to check each of the ancestors for consistency with the invariants of AVL trees. This is called "retracing".
 Since with a single deletion the height of an AVL subtree cannot decrease by more than one, the temporary balance factor of a node will be in the range from −2 to +2.
If the balance factor remains in the range from −1 to +1 it can be adjusted in accord with the AVL rules. If it becomes ±2 then the subtree is unbalanced and needs to be rotated. (Unlike insertion where a rotation always balances the tree, after delete, there may be BF(Z) ≠ 0 (see fig.s 4 and 5), so that after the appropriate single or double rotation the height of the rebalanced subtree decreases by one meaning that the tree has to be rebalanced again on the next higher level.) The various cases of rotations are described in section Rebalancing.
 
 Invariant of the retracing loop for a deletion The height of the subtree rooted by N has decreased by 1. It is already in AVL shape.
 

 The retracing can stop if the balance factor becomes ±1 (it must have been 0) meaning that the height of that subtree remains unchanged.
 If the balance factor becomes 0 (it must have been ±1) then the height of the subtree decreases by one and the retracing needs to continue.
 If the balance factor temporarily becomes ±2, this has to be repaired by an appropriate rotation. It depends on the balance factor of the sibling Z (the higher child tree in fig. 4) whether the height of the subtree decreases by one –and the retracing needs to continue– or does not change (if Z has the balance factor 0) and the whole tree is in AVL-shape.
 The time required isO(logn )for lookup, plus a maximum ofO(logn )retracing levels ( O(1)on average) on the way back to the root, so the operation can be completed inO(logn )time.
 

 **Set operations and bulk operations**

 In addition to the single-element insert, delete and lookup operations, several set operations have been defined on AVL trees: union, intersection and set difference. Then fastbulkoperations on insertions or deletions can be implemented based on these set functions. These set operations rely on two helper operations,SplitandJoin . With the new operations, the implementation of AVL trees can be more efficient and highly-parallelizable. 
 Join : The functionJoinis on two AVL treest 1andt 2and a keykwill return a tree containing all elements int 1 ,t 2as well ask . It requireskto be greater than all keys int 1and smaller than all keys int 2 . If the two trees differ by height at most one,Joinsimply create a new node with left subtreet 1 , rootkand right subtreet 2 . Otherwise, suppose thatt 1is higher thant 2for more than one (the other case is symmetric).Joinfollows the right spine oft 1until a nodecwhich is balanced witht 2 . At this point a new node with left childc , rootkand right childt 2is created to replace c. The new node satisfies the AVL invariant, and its height is one greater thanc . The increase in height can increase the height of its ancestors, possibly invalidating the AVL invariant of those nodes. This can be fixed either with a double rotation if invalid at the parent or a single left rotation if invalid higher in the tree, in both cases restoring the height for any further ancestor nodes.Joinwill therefore require at most two rotations. The cost of this function is the difference of the heights between the two input trees. 
 Split : To split an AVL tree into two smaller trees, those smaller than keyx , and those larger than keyx , first draw a path from the root by insertingxinto the AVL. After this insertion, all values less thanxwill be found on the left of the path, and all values greater thanxwill be found on the right. By applyingJoin , all the subtrees on the left side are merged bottom-up using keys on the path as intermediate nodes from bottom to top to form the left tree, and the right part is asymmetric. The cost ofSplitis

 
O(log⁡n)dd , order of the height of the tree. 
 The union of two AVLst 1andt 2representing setsAandB , is an AVLtthat representsA∪B .
 

 The algorithm for intersection or difference is similar, but requires theJoin2helper routine that is the same asJoinbut without the middle key. Based on the new functions for union, intersection or difference, either one key or multiple keys can be inserted to or deleted from the AVL tree. SinceSplitcallsJoinbut does not deal with the balancing criteria of AVL trees directly, such an implementation is usually called the "join-based" implementation.
 The complexity of each of union, intersection and difference is

 
O( mlog⁡(nm+1 ))
 
 for AVLs of sizes

 
mdd and

 
n(≥m)dd . More importantly, since the recursive calls to union, intersection or difference are independent of each other, they can be executed in parallel with a parallel depth

 
O(log⁡mlog⁡n)dd . When

 
m=1dd , the join-based implementation has the same computational DAG as single-element insertion and deletion.
 

 **Rebalancing**

 If during a modifying operation (e.g. insert, delete) a (temporary) height difference of more than one arises between two child subtrees, the parent subtree has to be "rebalanced". The given repair tools are the so-called tree rotations, because they move the keys only "vertically", so that the ("horizontal") in-order sequence of the keys is fully preserved (which is essential for a binary-search tree). Let X be the node that has a (temporary) balance factor of −2 or +2. Its left or right subtree was modified. Let Z be the higher child. Note that Z is in AVL shape by induction hypothesis.
 In case of insertion this insertion has happened to one of Z's children in a way that Z's height has increased.
In case of deletion this deletion has happened to the sibling t 1of Z in a way so that t 1 's height being already lower has decreased. (In that case Z's balance factor may be 0.)
 There are four situations that might arise. We will describe them asDir1 Dir2 , whereDir1comes from the set {left ,right} andDir2as a balance factor comes from the set {left-heavy= −1,balanced= 0,right-heavy= +1 }. Situation Dir1 Dir2 denotes:
 
 Z is a Dir1 child of its parent and 
 Z is Dir2-heavy if Dir2 != Dir1
 Z is not (−Dir2)-heavy if Dir2 == Dir1i.e.
 
 The balance violation of case Dir1 == Dir2 is repaired by a simple rotation rotate_(−Dir1) ( rotate_Leftin figure 4 resp. its mirrorrotate_Right ).
 The case Dir1 != Dir2 is repaired by a double rotation rotate_(−Dir2)(−Dir1) == rotate_Dir1Dir2 ( rotate_RightLeftin figure 5 resp. its mirrorrotate_LeftRight ).
 The cost of a rotation, both simple and double, is constant.
 

 **Simple rotation**

 Figure 4 shows a Right Right situation. In its upper half, node X has two child trees with a balance factor of+2 . Moreover, the inner child t 23of Z (i.e., left child when Z is right child resp. right child when Z is left child) is not higher than its sibling t 4 . This can happen by a height increase of subtree t 4or by a height decrease of subtree t 1 . In the latter case, also the pale situation where t 23has the same height as t 4may occur.
 The result of the left rotation is shown in the lower half of the figure. Three links (thick edges in figure 4) and two balance factors are to be updated.
 As the figure shows, before an insertion, the leaf layer was at level h+1, temporarily at level h+2 and after the rotation again at level h+1. In case of a deletion, the leaf layer was at level h+2, where it is again, when t 23and t 4were of same height. Otherwise the leaf layer reaches level h+1, so that the height of the rotated tree decreases.
 

 Code snippet of a simple left rotation 

 **Double rotation**

 Figure 5 shows a Right Left situation. In its upper third, node X has two child trees with a balance factor of+2 . But unlike figure 4, the inner child Y of Z is higher than its sibling t 4 . This can happen by the insertion of Y itself or a height increase of one of its subtrees t 2or t 3(with the consequence that they are of different height) or by a height decrease of subtree t 1 . In the latter case, it may also occur that t 2and t 3are of same height.
 The result of the first, the right, rotation is shown in the middle third of the figure. (With respect to the balance factors, this rotation is not of the same kind as the other AVL single rotations, because the height difference between Y and t 4is only 1.) The result of the final left rotation is shown in the lower third of the figure. Five links (thick edges in figure 5) and three balance factors are to be updated.
 As the figure shows, before an insertion, the leaf layer was at level h+1, temporarily at level h+2 and after the double rotation again at level h+1. In case of a deletion, the leaf layer was at level h+2 and after the double rotation it is at level h+1, so that the height of the rotated tree decreases.
 

 Code snippet of a right-left double rotation 

 **Comparison to other structures**

 Both AVL trees and red–black (RB) trees are self-balancing binary search trees and they are related mathematically. Indeed, every AVL tree can be colored red–black, but there are RB trees which are not AVL balanced. For maintaining the AVL resp. RB tree's invariants, rotations play an important role. In the worst case, even without rotations, AVL or RB insertions or deletions requireO(logn )inspections and/or updates to AVL balance factors resp. RB colors. RB insertions and deletions and AVL insertions require from zero to three tail-recursive rotations and run in amortizedO(1)time, thus equally constant on average. AVL deletions requiringO(logn )rotations in the worst case are alsoO(1)on average. RB trees require storing one bit of information (the color) in each node, while AVL trees mostly use two bits for the balance factor, although, when stored at the children, one bit with meaning «lower than sibling» suffices. The bigger difference between the two data structures is their height limit.
 For a tree of sizen≥ 1dd an AVL tree's height is at most
 

 
 h≦clog2⁡(n+d)+b <clog2⁡(n+2)+b
 
 where

 
φ:= 1+52≈1.618dd   the golden ratio,

 
c:=1 log2⁡φ≈1.440,dd  

 
b:=c2log 2 ⁡5−2≈−0.328,dd and 

 
d:=1+1 φ4 5≈1.065dd . an RB tree's height is at most
 

 
 h≦2log2⁡(n+1)
 
  . AVL trees are more rigidly balanced than RB trees with an asymptotic relation ​ AVL ⁄ RB ≈0.720 of the maximal heights. For insertions and deletions, Ben Pfaff shows in 79 measurements a relation of ​ AVL ⁄ RBbetween 0.677 and 1.077 with median ≈0.947 and geometric mean ≈0.910. 

 