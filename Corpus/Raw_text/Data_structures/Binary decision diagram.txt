***Binary decision diagram***

In computer science, a  binary decision diagram  ( BDD ) or  branching program  is a data structure that is used to represent a Boolean function. On a more abstract level, BDDs can be considered as a compressed representation of sets or relations. Unlike other compressed representations, operations are performed directly on the compressed representation, i.e. without decompression. Other data structures used to represent Boolean functions include negation normal form (NNF), Zhegalkin polynomials, and propositional directed acyclic graphs (PDAG).
 

 **Definition**

 A Boolean function can be represented as a rooted, directed, acyclic graph, which consists of several decision nodes and terminal nodes. There are two types of terminal nodes called 0-terminal and 1-terminal. Each decision node  
   
     
       
         N 
       
     
     {\displaystyle N} 
    is labeled by  Boolean variable  
   
     
       
         
           V 
           
             N 
           
         
       
     
     {\displaystyle V_{N}} 
    and has two child nodes called low child and high child. The edge from node  
   
     
       
         
           V 
           
             N 
           
         
       
     
     {\displaystyle V_{N}} 
    to a low (or high) child represents an assignment of  
   
     
       
         
           V 
           
             N 
           
         
       
     
     {\displaystyle V_{N}} 
    to 0 (respectively 1).
Such a  BDD  is called 'ordered' if different variables appear in the same order on all paths from the root. A BDD is said to be 'reduced' if the following two rules have been applied to its graph:
 
 Merge any isomorphic subgraphs. 
 Eliminate any node whose two children are isomorphic. In popular usage, the term  BDD  almost always refers to  Reduced Ordered Binary Decision Diagram  ( ROBDD  in the literature, used when the ordering and reduction aspects need to be emphasized). The advantage of an ROBDD is that it is canonical (unique) for a particular function and variable order. This property makes it useful in functional equivalence checking and other operations like functional technology mapping.
 A path from the root node to the 1-terminal represents a (possibly partial) variable assignment for which the represented Boolean function is true. As the path descends to a low (or high) child from a node, then that node's variable is assigned to 0 (respectively 1).
 

 **Example**

 The left figure below shows a binary decision  tree  (the reduction rules are not applied), and a truth table, each representing the function f (x1, x2, x3). In the tree on the left, the value of the function can be determined for a given variable assignment by following a path down the graph to a terminal. In the figures below, dotted lines represent edges to a low child, while solid lines represent edges to a high child. Therefore, to find (x1=0, x2=1, x3=1), begin at x1, traverse down the dotted line to x2 (since x1 has an assignment to 0), then down two solid lines (since x2 and x3 each have an assignment to one). This leads to the terminal 1, which is the value of f (x1=0, x2=1, x3=1).
 The binary decision  tree  of the left figure can be transformed into a binary decision  diagram  by maximally reducing it according to the two reduction rules. The resulting  BDD  is shown in the right figure.
 

 **Applications**

 BDDs are extensively used in CAD software to synthesize circuits (logic synthesis) and in formal verification. There are several lesser known applications of BDD, including fault tree analysis, Bayesian reasoning, product configuration, and private information retrieval. Every arbitrary BDD (even if it is not reduced or ordered) can be directly implemented in hardware by replacing each node with a 2 to 1 multiplexer; each multiplexer can be directly implemented by a 4-LUT in a FPGA. It is not so simple to convert from an arbitrary network of logic gates to a BDD (unlike the and-inverter graph).
 

 **Variable ordering**

 The size of the BDD is determined both by the function being represented and the chosen ordering of the variables. There exist Boolean functions  
   
     
       
         f 
         ( 
         
           x 
           
             1 
           
         
         , 
         … 
         , 
         
           x 
           
             n 
           
         
         ) 
       
     
     {\displaystyle f(x_{1},\ldots ,x_{n})} 
    for which depending upon the ordering of the variables we would end up getting a graph whose number of nodes would be linear (in  n ) at the best and exponential at the worst case (e.g., a ripple carry adder). Consider the Boolean function  
   
     
       
         f 
         ( 
         
           x 
           
             1 
           
         
         , 
         … 
         , 
         
           x 
           
             2 
             n 
           
         
         ) 
         = 
         
           x 
           
             1 
           
         
         
           x 
           
             2 
           
         
         + 
         
           x 
           
             3 
           
         
         
           x 
           
             4 
           
         
         + 
         ⋯ 
         + 
         
           x 
           
             2 
             n 
             − 
             1 
           
         
         
           x 
           
             2 
             n 
           
         
         . 
       
     
     {\displaystyle f(x_{1},\ldots ,x_{2n})=x_{1}x_{2}+x_{3}x_{4}+\cdots +x_{2n-1}x_{2n}.} 
   
Using the variable ordering  
   
     
       
         
           x 
           
             1 
           
         
         < 
         
           x 
           
             3 
           
         
         < 
         ⋯ 
         < 
         
           x 
           
             2 
             n 
             − 
             1 
           
         
         < 
         
           x 
           
             2 
           
         
         < 
         
           x 
           
             4 
           
         
         < 
         ⋯ 
         < 
         
           x 
           
             2 
             n 
           
         
       
     
     {\displaystyle x_{1}<x_{3}<\cdots <x_{2n-1}<x_{2}<x_{4}<\cdots <x_{2n}} 
   , the BDD needs 2 n +1  nodes to represent the function.  Using the ordering  
   
     
       
         
           x 
           
             1 
           
         
         < 
         
           x 
           
             2 
           
         
         < 
         
           x 
           
             3 
           
         
         < 
         
           x 
           
             4 
           
         
         < 
         ⋯ 
         < 
         
           x 
           
             2 
             n 
             − 
             1 
           
         
         < 
         
           x 
           
             2 
             n 
           
         
       
     
     {\displaystyle x_{1}<x_{2}<x_{3}<x_{4}<\cdots <x_{2n-1}<x_{2n}} 
   , the BDD consists of 2 n  + 2 nodes.
 
 It is of crucial importance to care about variable ordering when applying this data structure in practice.
The problem of finding the best variable ordering is NP-hard. For any constant  c  > 1 it is even NP-hard to compute a variable ordering resulting in an OBDD with a size that is at most c times larger than an optimal one. However, there exist efficient heuristics to tackle the problem. There are functions for which the graph size is always exponential — independent of variable ordering. This holds e.g. for the multiplication function. In fact, the function computing the middle bit of the product of two  
   
     
       
         n 
       
     
     {\displaystyle n} 
   -bit numbers does not have an OBDD smaller than  
   
     
       
         
           2 
           
             ⌊ 
             n 
             
               / 
             
             2 
             ⌋ 
           
         
         
           / 
         
         61 
         − 
         4 
       
     
     {\displaystyle 2^{\lfloor n/2\rfloor }/61-4} 
    vertices. (If the multiplication function had polynomial-size OBDDs, it would show that integer factorization is in P/poly, which is not known to be true.)
 For cellular automata with simple behavior, the minimal BDD typically grows linearly on successive steps. For rule 254, for example, it is 8t+2, while for rule 90 it is 4t+2. For cellular automata with more complex behavior, it typically grows roughly exponentially. Thus for rule 30 it is {7, 14, 29, 60, 129} and for rule 110 {7, 15, 27, 52, 88}. The size of the minimal BDD can depend on the order in which variables are specified; thus for example, just reflecting rule 30 to give rule 86 yields {6, 11, 20, 36, 63}.
 Researchers have suggested refinements on the BDD data structure giving way to a number of related graphs, such as BMD (binary moment diagrams), ZDD (zero-suppressed decision diagram), FDD (free binary decision diagrams), PDD (parity decision diagrams), and MTBDDs (multiple terminal BDDs).
 

 **Logical operations on BDDs**

 Many logical operations on BDDs can be implemented by polynomial-time graph manipulation algorithms: 
 conjunction 
 disjunction 
 negation However, repeating these operations several times, for example forming the conjunction or disjunction of a set of BDDs, may in the worst case result in an exponentially big BDD. This is because any of the preceding operations for two BDDs may result in a BDD with a size proportional to the product of the BDDs' sizes, and consequently for several BDDs the size may be exponential. Also, since constructing the BDD of a Boolean function solves the NP-complete Boolean satisfiability problem and the co-NP-complete tautology problem, constructing the BDD can take exponential time in the size of the Boolean formula even when the resulting BDD is small.
 Computing existential abstraction over multiple variables of reduced BDDs is NP-complete. Model-counting, counting the number of satisfying assignments of a Boolean formula, can be done in polynomial time for BDDs. For general propositional formulas the problem is ♯P-complete and the known best algorithms require an exponential time in the worst case.
 

 