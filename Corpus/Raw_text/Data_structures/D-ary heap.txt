***D-ary heap***
The  d -ary heap  or  d -heap  is a priority queue data structure, a generalization of the binary heap in which the nodes have  d  children instead of 2. Thus, a binary heap is a 2-heap, and a  ternary heap  is a 3-heap. According to Tarjan and Jensen et al.,  d -ary heaps were invented by Donald B. Johnson in 1975. This data structure allows decrease priority operations to be performed more quickly than binary heaps, at the expense of slower delete minimum operations. This tradeoff leads to better running times for algorithms such as Dijkstra's algorithm in which decrease priority operations are more common than delete min operations. Additionally,  d -ary heaps have better memory cache behavior than binary heaps, allowing them to run more quickly in practice despite having a theoretically larger worst-case running time. Like binary heaps,  d -ary heaps are an in-place data structure that uses no additional storage beyond that needed to store the array of items in the heap. 

 **Data structure**

 The  d -ary heap consists of an array of  n  items, each of which has a priority associated with it. These items may be viewed as the nodes in a complete  d -ary tree, listed in breadth first traversal order: the item at position 0 of the array (using zero-based numbering) forms the root of the tree, the items at positions 1 through  d  are its children, the next  d 2  items are its grandchildren, etc. Thus, the parent of the item at position  i  (for any  i  > 0 ) is the item at position  ⌊( i  − 1)/ d ⌋  and its children are the items at positions  di  + 1  through  di  +  d . According to the heap property, in a min-heap, each item has a priority that is at least as large as its parent; in a max-heap, each item has a priority that is no larger than its parent. The minimum priority item in a min-heap (or the maximum priority item in a max-heap) may always be found at position 0 of the array. To remove this item from the priority queue, the last item  x  in the array is moved into its place, and the length of the array is decreased by one. Then, while item  x  and its children do not satisfy the heap property, item  x  is swapped with one of its children (the one with the smallest priority in a min-heap, or the one with the largest priority in a max-heap), moving it downward in the tree and later in the array, until eventually the heap property is satisfied. The same downward swapping procedure may be used to increase the priority of an item in a min-heap, or to decrease the priority of an item in a max-heap. To insert a new item into the heap, the item is appended to the end of the array, and then while the heap property is violated it is swapped with its parent, moving it upward in the tree and earlier in the array, until eventually the heap property is satisfied. The same upward-swapping procedure may be used to decrease the priority of an item in a min-heap, or to increase the priority of an item in a max-heap. To create a new heap from an array of  n  items, one may loop over the items in reverse order, starting from the item at position  n  − 1  and ending at the item at position 0, applying the downward-swapping procedure for each item. 

 **Analysis**

 In a  d -ary heap with  n  items in it, both the upward-swapping procedure and the downward-swapping procedure may perform as many as  log d   n  = log  n  / log  d  swaps. In the upward-swapping procedure, each swap involves a single comparison of an item with its parent, and takes constant time. Therefore, the time to insert a new item into the heap, to decrease the priority of an item in a min-heap, or to increase the priority of an item in a max-heap, is  O(log  n  / log  d ) . In the downward-swapping procedure, each swap involves  d  comparisons and takes  O( d )  time: it takes  d  − 1  comparisons to determine the minimum or maximum of the children and then one more comparison against the parent to determine whether a swap is needed. Therefore, the time to delete the root item, to increase the priority of an item in a min-heap, or to decrease the priority of an item in a max-heap, is  O( d  log  n  / log  d ) . When creating a  d -ary heap from a set of  n  items, most of the items are in positions that will eventually hold leaves of the  d -ary tree, and no downward swapping is performed for those items. At most  n / d  + 1  items are non-leaves, and may be swapped downwards at least once, at a cost of  O( d )  time to find the child to swap them with. At most  n / d 2  + 1  nodes may be swapped downward two times, incurring an additional  O( d )  cost for the second swap beyond the cost already counted in the first term, etc. Therefore, the total amount of time to create a heap in this way is
 
 
   
     
       
         
           ∑ 
           
             i 
             = 
             1 
           
           
             
               log 
               
                 d 
               
             
             ⁡ 
             n 
           
         
         
           ( 
           
             
               
                 n 
                 
                   d 
                   
                     i 
                   
                 
               
             
             + 
             1 
           
           ) 
         
         O 
         ( 
         d 
         ) 
         = 
         O 
         ( 
         n 
         ) 
         . 
       
     
     {\displaystyle \sum _{i=1}^{\log _{d}n}\left({\frac {n}{d^{i}}}+1\right)O(d)=O(n).} 
   The exact value of the above (the worst-case number of comparisons during the construction of d-ary heap) is known to be equal to:
 
 
   
     
       
         
           
             d 
             
               d 
               − 
               1 
             
           
         
         ( 
         n 
         − 
         
           s 
           
             d 
           
         
         ( 
         n 
         ) 
         ) 
         − 
         ( 
         d 
         − 
         1 
         − 
         ( 
         n 
         
           mod 
           
             d 
           
         
         ) 
         ) 
         
           ( 
           
             
               e 
               
                 d 
               
             
             
               ( 
               
                 ⌊ 
                 
                   
                     n 
                     d 
                   
                 
                 ⌋ 
               
               ) 
             
             + 
             1 
           
           ) 
         
       
     
     {\displaystyle {\frac {d}{d-1}}(n-s_{d}(n))-(d-1-(n{\bmod {d}}))\left(e_{d}\left(\left\lfloor {\frac {n}{d}}\right\rfloor \right)+1\right)} 
   , where s d (n) is the sum of all digits of the standard base-d representation of n and e d (n) is the exponent of d in the factorization of n.
This reduces to
 
 
   
     
       
         2 
         n 
         − 
         2 
         
           s 
           
             2 
           
         
         ( 
         n 
         ) 
         − 
         
           e 
           
             2 
           
         
         ( 
         n 
         ) 
       
     
     {\displaystyle 2n-2s_{2}(n)-e_{2}(n)} 
   , for d = 2, and to
 
 
   
     
       
         
           
             3 
             2 
           
         
         ( 
         n 
         − 
         
           s 
           
             3 
           
         
         ( 
         n 
         ) 
         ) 
         − 
         2 
         
           e 
           
             3 
           
         
         ( 
         n 
         ) 
         − 
         
           e 
           
             3 
           
         
         ( 
         n 
         − 
         1 
         ) 
       
     
     {\displaystyle {\frac {3}{2}}(n-s_{3}(n))-2e_{3}(n)-e_{3}(n-1)} 
   , for d = 3.
 The space usage of the  d -ary  heap, with insert and delete-min operations, is linear, as it uses no extra storage other than an array containing a list of the items in the heap. If changes to the priorities of existing items need to be supported, then one must also maintain pointers from the items to their positions in the heap, which again uses only linear storage. 

 **Applications**

 When operating on a graph with  m  edges and  n  vertices, both Dijkstra's algorithm for shortest paths and Prim's algorithm for minimum spanning trees use a min-heap in which there are  n  delete-min operations and as many as  m  decrease-priority operations. By using a  d -ary heap with  d  =  m / n , the total times for these two types of operations may be balanced against each other, leading to a total time of  O( m  log m / n   n )  for the algorithm, an improvement over the  O( m  log  n )  running time of binary heap versions of these algorithms whenever the number of edges is significantly larger than the number of vertices. An alternative priority queue data structure, the Fibonacci heap, gives an even better theoretical running time of  O( m  +  n  log  n ) , but in practice  d -ary heaps are generally at least as fast, and often faster, than Fibonacci heaps for this application. 4-heaps may perform better than binary heaps in practice, even for delete-min operations. Additionally,
a  d -ary heap typically runs much faster than a binary heap for heap sizes that exceed the size of the computer's cache memory:
A binary heap typically requires more cache misses and virtual memory page faults than a  d -ary heap, each one taking far more time than the extra work incurred by the additional comparisons a  d -ary heap makes compared to a binary heap. 

 