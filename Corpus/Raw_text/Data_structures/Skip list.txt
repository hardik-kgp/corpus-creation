***Skip list***
In computer science, a  skip list  is a data structure that allows  
   
     
       
         
           
             O 
           
         
         ( 
         log 
         ⁡ 
         n 
         ) 
       
     
     {\displaystyle {\mathcal {O}}(\log n)} 
    search complexity as well as  
   
     
       
         
           
             O 
           
         
         ( 
         log 
         ⁡ 
         n 
         ) 
       
     
     {\displaystyle {\mathcal {O}}(\log n)} 
    insertion complexity within an ordered sequence of  
   
     
       
         n 
       
     
     {\displaystyle n} 
    elements. Thus it can get the best features of an array (for searching) while maintaining a linked list-like structure that allows insertion- which is not possible in an array. Fast search is made possible by maintaining a linked hierarchy of subsequences, with each successive subsequence skipping over fewer elements than the previous one (see the picture below on the right). Searching starts in the sparsest subsequence until two consecutive elements have been found, one smaller and one larger than or equal to the element searched for. Via the linked hierarchy, these two elements link to elements of the next sparsest subsequence, where searching is continued until finally we are searching in the full sequence. The elements that are skipped over may be chosen probabilistically  or deterministically, with the former being more common.
 

 **Description**

 A skip list is built in layers.  The bottom layer is an ordinary ordered linked list.  Each higher layer acts as an "express lane" for the lists below, where an element in layer  
   
     
       
         i 
       
     
     {\displaystyle i} 
    appears in layer  
   
     
       
         i 
         + 
         1 
       
     
     {\displaystyle i+1} 
    with some fixed probability  
   
     
       
         p 
       
     
     {\displaystyle p} 
    (two commonly used values for  
   
     
       
         p 
       
     
     {\displaystyle p} 
    are  
   
     
       
         1 
         
           / 
         
         2 
       
     
     {\displaystyle 1/2} 
    or  
   
     
       
         1 
         
           / 
         
         4 
       
     
     {\displaystyle 1/4} 
   ).  On average, each element appears in  
   
     
       
         1 
         
           / 
         
         ( 
         1 
         − 
         p 
         ) 
       
     
     {\displaystyle 1/(1-p)} 
    lists, and the tallest element (usually a special head element at the front of the skip list) in all the lists.  The skip list contains  
   
     
       
         
           log 
           
             1 
             
               / 
             
             p 
           
         
         ⁡ 
         n 
         
       
     
     {\displaystyle \log _{1/p}n\,} 
    (i.e. logarithm base  
   
     
       
         1 
         
           / 
         
         p 
       
     
     {\displaystyle 1/p} 
    of  
   
     
       
         n 
       
     
     {\displaystyle n} 
   ) lists.
 A search for a target element begins at the head element in the top list, and proceeds horizontally until the current element is greater than or equal to the target. If the current element is equal to the target, it has been found. If the current element is greater than the target, or the search reaches the end of the linked list, the procedure is repeated after returning to the previous element and dropping down vertically to the next lower list. The expected number of steps in each linked list is at most  
   
     
       
         1 
         
           / 
         
         p 
       
     
     {\displaystyle 1/p} 
   , which can be seen by tracing the search path backwards from the target until reaching an element that appears in the next higher list or reaching the beginning of the current list.  Therefore, the total  expected  cost of a search is  
   
     
       
         
           
             
               1 
               p 
             
           
         
         
           log 
           
             1 
             
               / 
             
             p 
           
         
         ⁡ 
         n 
       
     
     {\displaystyle {\tfrac {1}{p}}\log _{1/p}n} 
    which is  
   
     
       
         
           
             O 
           
         
         ( 
         log 
         ⁡ 
         n 
         ) 
         
       
     
     {\displaystyle {\mathcal {O}}(\log n)\,} 
   , when  
   
     
       
         p 
       
     
     {\displaystyle p} 
    is a constant. By choosing different values of  
   
     
       
         p 
       
     
     {\displaystyle p} 
   , it is possible to trade search costs against storage costs.
 

 **Implementation details**

 The elements used for a skip list can contain more than one pointer since they can participate in more than one list.
 Insertions and deletions are implemented much like the corresponding linked-list operations, except that "tall" elements must be inserted into or deleted from more than one linked list.
 
   
     
       
         
           
             O 
           
         
         ( 
         n 
         ) 
       
     
     {\displaystyle {\mathcal {O}}(n)} 
    operations, which force us to visit every node in ascending order (such as printing the entire list), provide the opportunity to perform a behind-the-scenes derandomization of the level structure of the skip-list in an optimal way, bringing the skip list to  
   
     
       
         
           
             O 
           
         
         ( 
         log 
         ⁡ 
         n 
         ) 
       
     
     {\displaystyle {\mathcal {O}}(\log n)} 
    search time. (Choose the level of the i'th finite node to be 1 plus the number of times we can repeatedly divide i by 2 before it becomes odd.  Also, i=0 for the negative infinity header as we have the usual special case of choosing the highest possible level for negative and/or positive infinite nodes.) However this also allows someone to know where all of the higher-than-level 1 nodes are and delete them.
 Alternatively, we could make the level structure quasi-random in the following way:
 
 make all nodes level 1
j ← 1
 while  the number of nodes at level j > 1  do 
   for  each i'th node at level j  do 
     if  i is odd 
       if  i is not the last node at level j
        randomly choose whether to promote it to level j+1
       else 
        do not promote
       end if 
     else if  i is even and node i-1 was not promoted
      promote it to level j+1
     end if 
   repeat 
  j ← j + 1
 repeat 
 
 Like the derandomized version, quasi-randomization is only done when there is some other reason to be running an  
   
     
       
         
           
             O 
           
         
         ( 
         n 
         ) 
       
     
     {\displaystyle {\mathcal {O}}(n)} 
    operation (which visits every node).
 The advantage of this quasi-randomness is that it doesn't give away nearly as much level-structure related information to an adversarial user as the de-randomized one.  This is desirable because an adversarial user who is able to tell which nodes are not at the lowest level can pessimize performance by simply deleting higher-level nodes. (Bethea and Reiter however argue that nonetheless an adversary can use probabilistic and timing methods to force performance degradation.) The search performance is still guaranteed to be logarithmic.
 It would be tempting to make the following "optimization":  In the part which says "Next, for each  i th...", forget about doing a coin-flip for each even-odd pair.  Just flip a coin once to decide whether to promote only the even ones or only the odd ones.  Instead of  
   
     
       
         
           
             O 
           
         
         ( 
         n 
         log 
         ⁡ 
         n 
         ) 
       
     
     {\displaystyle {\mathcal {O}}(n\log n)} 
    coin flips, there would only be  
   
     
       
         
           
             O 
           
         
         ( 
         log 
         ⁡ 
         n 
         ) 
       
     
     {\displaystyle {\mathcal {O}}(\log n)} 
    of them.  Unfortunately, this gives the adversarial user a 50/50 chance of being correct upon guessing that all of the even numbered nodes (among the ones at level 1 or higher) are higher than level one.  This is despite the property that he has a very low probability of guessing that a particular node is at level  N  for some integer  N .
 A skip list does not provide the same absolute worst-case performance guarantees as more traditional balanced tree data structures, because it is always possible (though with very low probability) that the coin-flips used to build the skip list will produce a badly balanced structure.  However, they work well in practice, and the randomized balancing scheme has been argued to be easier to implement than the deterministic balancing schemes used in balanced binary search trees.  Skip lists are also useful in parallel computing, where insertions can be done in different parts of the skip list in parallel without any global rebalancing of the data structure. Such parallelism can be especially advantageous for resource discovery in an ad-hoc wireless network because a randomized skip list can be made robust to the loss of any single node. 

 **Indexable skiplist**

 As described above, a skip list is capable of fast  
   
     
       
         
           
             O 
           
         
         ( 
         log 
         ⁡ 
         n 
         ) 
       
     
     {\displaystyle {\mathcal {O}}(\log n)} 
    insertion and removal of values from a sorted sequence, but it has only slow  
   
     
       
         
           
             O 
           
         
         ( 
         n 
         ) 
       
     
     {\displaystyle {\mathcal {O}}(n)} 
    lookups of values at a given position in the sequence (i.e. return the 500th value); however, with a minor modification the speed of random access indexed lookups can be improved to   
   
     
       
         
           
             O 
           
         
         ( 
         log 
         ⁡ 
         n 
         ) 
       
     
     {\displaystyle {\mathcal {O}}(\log n)} 
   .
 For every link, also store the width of the link.  The width is defined as the number of bottom layer links being traversed by each of the higher layer "express lane" links.
 For example, here are the widths of the links in the example at the top of the page:
 
    1                               10
 o---> o---------------------------------------------------------> o    Top level
   1           3              2                    5
 o---> o---------------> o---------> o---------------------------> o    Level 3
   1        2        1        2              3              2
 o---> o---------> o---> o---------> o---------------> o---------> o    Level 2
   1     1     1     1     1     1     1     1     1     1     1 
 o---> o---> o---> o---> o---> o---> o---> o---> o---> o---> o---> o    Bottom level
                                           
Head  1st   2nd   3rd   4th   5th   6th   7th   8th   9th   10th  NIL
      Node  Node  Node  Node  Node  Node  Node  Node  Node  Node
 
 Notice that the width of a higher level link is the sum of the component links below it (i.e. the width 10 link spans the links of widths 3, 2 and 5 immediately below it).  Consequently, the sum of all widths is the same on every level (10 + 1 = 1 + 3 + 2 + 5 = 1 + 2 + 1 + 2 + 3 + 2).
 To index the skip list and find the i'th value, traverse the skip list while counting down the widths of each traversed link.  Descend a level whenever the upcoming width would be too large.
 For example, to find the node in the fifth position (Node 5), traverse a link of width 1 at the top level.  Now four more steps are needed but the next width on this level is ten which is too large, so drop one level.  Traverse one link of width 3.  Since another step of width 2 would be too far, drop down to the bottom level.  Now traverse the final link of width 1 to reach the target running total of 5 (1+3+1). 
 
   function  lookupByPositionIndex(i)
     node ← head
     i ← i + 1                            # don't count the head as a step 
      for  level  from  top  to  bottom  do 
           while  i ≥ node.width[level]  do   # if next step is not too far 
              i ← i - node.width[level]   # subtract the current width 
              node ← node.next[level]     # traverse forward at the current level 
           repeat 
      repeat 
      return  node.value
  end function 
 
 This method of implementing indexing is detailed in Section 3.4 Linear List Operations in "A skip list cookbook" by William Pugh.
 

 **Usages**

 List of applications and frameworks that use skip lists:
 
 Apache Portable Runtime implements skip lists. See APR 1.6 documentation 
 MemSQL uses lock-free skip lists as its prime indexing structure for its database technology. 
 Cyrus IMAP server offers a "skiplist" backend DB implementation (source file) 
 Lucene uses skip lists to search delta-encoded posting lists in logarithmic time. 
 QMap (up to Qt 4) template class of Qt that provides a dictionary. 
 Redis, an ANSI-C open-source persistent key/value store for Posix systems, uses skip lists in its implementation of ordered sets. 
 nessDB, a very fast key-value embedded Database Storage Engine (Using log-structured-merge (LSM) trees), uses skip lists for its memtable. 
 skipdb is an open-source database format using ordered key/value pairs. 
 ConcurrentSkipListSet and ConcurrentSkipListMap in the Java 1.6 API. Used by Apache HBase. 
 Speed Tables are a fast key-value datastore for Tcl that use skiplists for indexes and lockless shared memory. 
 leveldb, a fast key-value storage library written at Google that provides an ordered mapping from string keys to string values 
 Con Kolivas' MuQSS Scheduler for the Linux kernel uses skip lists 
 SkiMap uses skip lists as base data structure to build a more complex 3D Sparse Grid for Robot Mapping systems. 
 IOWOW, a persistent C11 key/value storage library uses skip lists as its main data structure. Skip lists are used for efficient statistical computations of running medians (also known as moving medians).
Skip lists are also used in distributed applications (where the nodes represent physical computers, and pointers represent network connections) and for implementing highly scalable concurrent priority queues with less lock contention, or even without locking, as well as lockless concurrent dictionaries. There are also several US patents for using skip lists to implement (lockless) priority queues and concurrent dictionaries. 

 