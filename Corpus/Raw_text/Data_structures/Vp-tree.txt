***Vp-tree***
A  vantage-point tree  (or  VP tree ) is a metric tree that segregates data in a metric space by choosing a position in the space (the "vantage point") and partitioning the data points into two parts: those points that are nearer to the vantage point than a threshold, and those points that are not. By recursively applying this procedure to partition the data into smaller and smaller sets, a tree data structure is created where neighbors in the tree are likely to be neighbors in the space. One generalization is called a  multi-vantage-point tree , or  MVP tree : a data structure for indexing objects from large metric spaces for similarity search queries. It uses more than one point to partition each level.
 

 **Understanding a vantage-point tree**

 The way a vantage-point tree stores data can be represented by a circle. First, understand that each node of this tree contains an input point and a radius. All the left children of a given node are the points inside the circle and all the right children of a given node are outside of the circle. The tree itself does not need to know any other information about what is being stored. All it needs is the distance function that satisfies the properties of the metric space. 

 **Searching through a vantage-point tree**

 A vantage-point tree can be used to find the nearest neighbor of a point  x .  The search algorithm is recursive.  At any given step we are working with a node of the tree that has a vantage point  v  and a threshold distance   t .  The point of interest  x  will be some distance from the vantage point  v .  If that distance  d  is less than  t  then use the algorithm recursively to search the subtree of the node that contains the points closer to the vantage point than the threshold  t ; otherwise recurse to the subtree of the node that contains the points that are farther than the vantage point than the threshold  t .  If the recursive use of the algorithm finds a neighboring point  n  with distance to  x  that is less than  | t  −  d |  then it cannot help to search the other subtree of this node; the discovered node  n  is returned.  Otherwise, the other subtree also needs to be searched recursively.
 A similar approach works for finding the  k  nearest neighbors of a point  x .  In the recursion, the other subtree is searched for  k  −  k′  nearest neighbors of the point  x  whenever only  k′  (<  k )  of the nearest neighbors found so far have distance that is less than  | t  −  d | .
 

 **Advantages of a vantage-point tree**

 Instead of inferring multidimensional points for domain before the index being built, we build the index directly based on the distance. Doing this, avoids pre-processing steps. 
 Updating a vantage-point tree is relatively easy compared to the fast-map approach. For fast maps, after inserting or deleting data, there will come a time when fast-map will have to rescan itself. That takes up too much time and it is unclear to know when the rescanning will start. 
 Distance based methods are flexible.  It is “able to index objects that are represented as feature vectors of a fixed number of dimensions." 

 **Complexity**

 The time cost to build a Vantage-Point tree is approximately  O ( n  log  n ) . For each element, the tree is descended by  log  n  levels to find its placement. However there is a constant factor  k   where  k  is the number of vantage points per tree node. The time cost to search a Vantage-Point tree to find a single nearest neighbor is  O (log  n ) . There are  log  n  levels, each involving  k  distance calculations, where  k  is the number of vantage points (elements) at that position in the tree.
 The time cost to search a Vantage-Point tree for a range, which may be the most important attribute, can vary greatly depending on the specifics of the algorithm used and parameters. Brin's paper  gives the result of experiments with several vantage point algorithms with various parameters to investigate the cost, measured in number of distance calculations.
 The space cost for a Vantage-Point tree is approximately  n . Each element is stored, and each tree element in each non-leaf node requires a pointer to its descendant nodes. (See Brin for details on one implementation choice. The parameter for number of elements at each node plays a factor.)
 Note that some metric space tools require a matrix of pair-wise distance values, costing  O ( n 2 ) , but that is not required with Vantage-Point trees.
 

 