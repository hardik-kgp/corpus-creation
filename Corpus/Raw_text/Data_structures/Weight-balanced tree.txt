***Weight-balanced tree***
In computer science,  weight-balanced binary trees  ( WBTs ) are a type of self-balancing binary search trees that can be used to implement dynamic sets, dictionaries (maps) and sequences. These trees were introduced by Nievergelt and Reingold in the 1970s as  trees of bounded balance , or  BB[α] trees . Their more common name is due to Knuth. Like other self-balancing trees, WBTs store bookkeeping information pertaining to balance in their nodes and perform rotations to restore balance when it is disturbed by insertion or deletion operations. Specifically, each node stores the size of the subtree rooted at the node, and the sizes of left and right subtrees are kept within some factor of each other. Unlike the balance information in AVL trees (which store the height of subtrees) and red-black trees (which store a fictional "color" bit), the bookkeeping information in a WBT is an actually useful property for applications: the number of elements in a tree is equal to the size of its root, and the size information is exactly the information needed to implement the operations of an order statistic tree, viz., getting the  n 'th largest element in a set or determining an element's index in sorted order. Weight-balanced trees are popular in the functional programming community and are used to implement sets and maps in MIT Scheme, SLIB and implementations of Haskell. 

 **Description**

 A weight-balanced tree is a binary search tree that stores the sizes of subtrees in the nodes. That is, a node has fields
 
 key , of any ordered type 
 value  (optional, only for mappings) 
 left ,  right , pointer to node 
 size , of type integer. By definition, the size of a leaf (typically represented by a  nil  pointer) is zero. The size of an internal node is the sum of sizes of its two children, plus one ( size[n] = size[n.left] + size[n.right] + 1 ). Based on the size, one defines the weight as  weight[n] = size[n] + 1 . 

 Operations that modify the tree must make sure that the weight of the left and right subtrees of every node remain within some factor  α  of each other, using the same rebalancing operations used in AVL trees: rotations and double rotations. Formally, node balance is defined as follows:
 
 A node is  α -weight-balanced if  weight[n.left] ≥ α·weight[n]  and  weight[n.right] ≥ α·weight[n] . Here,  α  is a numerical parameter to be determined when implementing weight balanced trees. Larger values of  α  produce "more balanced" trees, but not all values of  α  are appropriate; Nievergelt and Reingold proved that
 
 
   
     
       
         α 
         < 
         1 
         − 
         
           
             
               2 
             
             2 
           
         
         ≈ 
         0.29289 
       
     
     {\displaystyle \alpha <1-{\frac {\sqrt {2}}{2}}\approx 0.29289} 
   is a necessary condition for the balancing algorithm to work. Later work showed a lower bound of ​ 2 ⁄ 11  for  α , although it can be made arbitrarily small if a custom (and more complicated) rebalancing algorithm is used. Applying balancing correctly guarantees a tree of  n  elements will have height 
 
   
     
       
         h 
         ≤ 
         
           log 
           
             
               1 
               
                 1 
                 − 
                 α 
               
             
           
         
         ⁡ 
         n 
         = 
         
           
             
               
                 log 
                 
                   2 
                 
               
               ⁡ 
               n 
             
             
               
                 log 
                 
                   2 
                 
               
               ⁡ 
               
                 ( 
                 
                   
                     1 
                     
                       1 
                       − 
                       α 
                     
                   
                 
                 ) 
               
             
           
         
         = 
         O 
         ( 
         log 
         ⁡ 
         n 
         ) 
       
     
     {\displaystyle h\leq \log _{\frac {1}{1-\alpha }}n={\frac {\log _{2}n}{\log _{2}\left({\frac {1}{1-\alpha }}\right)}}=O(\log n)} 
   The number of balancing operations required in a sequence of  n  insertions and deletions is linear in  n , i.e., balancing takes a constant amount of overhead in an amortized sense. While maintaining tree with the minimum search cost requires four kinds of double rotations (LL, LR, RL, RR as in AVL tree) in insert/delete operations, if we desire only logarithmic performance, LR and RL are the only rotations required in a single top-down pass. 

 **Set operations and bulk operations**

 Several set operations have been defined on weight-balanced trees: union, intersection and set difference. Then fast  bulk  operations on insertions or deletions can be implemented based on these set functions. These set operations rely on two helper operations,  Split  and  Join . With the new operations, the implementation of weight-balanced trees can be more efficient and highly-parallelizable. 
 Join : The function  Join  is on two weight-balanced trees  t 1  and  t 2  and a key  k  and will return a tree containing all elements in  t 1 ,  t 2  as well as  k . It requires  k  to be greater than all keys in  t 1  and smaller than all keys in  t 2 . If the two trees have the balanced weight,  Join  simply create a new node with left subtree  t 1 , root  k  and right subtree  t 2 . Suppose that  t 1  has heavier weight than  t 2  (the other case is symmetric).  Join  follows the right spine of  t 1  until a node  c  which is balanced with  t 2 . At this point a new node with left child  c , root   k  and right child  t 2  is created to replace c. The new node may invalidate the weight-balanced invariant. This can be fixed with a single or a double rotation assuming  
   
     
       
         α 
         < 
         1 
         − 
         
           
             1 
             
               2 
             
           
         
       
     
     {\displaystyle \alpha <1-{\frac {1}{\sqrt {2}}}} 
   
 Split : To split a weight-balanced tree into two smaller trees, those smaller than key  x , and those larger than key  x , first draw a path from the root by inserting  x  into the tree. After this insertion, all values less than  x  will be found on the left of the path, and all values greater than  x  will be found on the right. By applying  Join , all the subtrees on the left side are merged bottom-up using keys on the path as intermediate nodes from bottom to top to form the left tree, and the right part is asymmetric. For some applications,  Split  also returns a boolean value denoting if  x  appears in the tree. The cost of  Split  is  
   
     
       
         O 
         ( 
         log 
         ⁡ 
         n 
         ) 
       
     
     {\displaystyle O(\log n)} 
   , order of the height of the tree. This algorithm actually has nothing to do with any special properties of a weight-balanced tree, and thus is generic to other balancing schemes such as AVL trees. The join algorithm is as follows:
 
 function  joinRightWB(T L , k, T R )
   (l,k',c)=expose(T L )
     if  balance(|T L |, |T L |)  return  Node(T L ,k,T R 
     else  
        T'=joinRightWB(c,k,T R )
        (l 1 ,k 1 ,r 1 )=expose(T')
         if  (balance(l,T'))  return  Node(l,k'T')
         else if  (balance(|l|,|l 1 |) and balance(|l|+|l 1 |,|r 1 |))
              return  rotateLeft(Node(l,k',T'))
         else  return rotateLeft(Node(l,k',rotateRight(T'))
 function  joinLeftWB(T L , k, T R )
  /* symmetric to joinRightWB */
 function  join(T L , k, T R )
     if  (heavy(T L ,T R )) return joinRightWB(T L , k, T R )
     if  (heavy(T R ,T L )) return joinLeftWB(T L , k, T R )
    Node(T L ,k,T R )
 
 Here balance 
   
     
       
         ( 
         x 
         , 
         y 
         ) 
       
     
     {\displaystyle (x,y)} 
    means two weights  
   
     
       
         x 
       
     
     {\displaystyle x} 
    and  
   
     
       
         y 
       
     
     {\displaystyle y} 
    are balanced. expose(v)=(l,k,r) means to extract a tree node  
   
     
       
         v 
       
     
     {\displaystyle v} 
   's left child  
   
     
       
         l 
       
     
     {\displaystyle l} 
   , the key of the node  
   
     
       
         k 
       
     
     {\displaystyle k} 
    and the right child  
   
     
       
         r 
       
     
     {\displaystyle r} 
   . Node(l,k,r) means to create a node of left child  
   
     
       
         l 
       
     
     {\displaystyle l} 
   , key  
   
     
       
         k 
       
     
     {\displaystyle k} 
    and right child  
   
     
       
         r 
       
     
     {\displaystyle r} 
   .
 The split algorithm is as follows:
 
 function  split(T,k)
     if  (T=nil) return (nil,false,nil)
    (L,(m,c),R)=expose(T)
     if  (k=m) return (L,true,R)
     if  (k<m) 
       (L',b,R')=split(L,k)
        return  (L',b,join(R',m,R))
     if  (k>m) 
       (L',b,R')=split(R,k)
        return  (join(L,m,L'),b,R))
 
 The union of two weight-balanced trees  t 1  and  t 2  representing sets  A  and  B , is a weight-balanced tree  t  that represents  A  ∪  B . The following recursive function computes this union:
 
 function  union(t 1 , t 2 ):
     if  t 1  = nil:
         return  t 2 
     if  t 2  = nil:
         return  t 1 
    t < , t >  ← split t 2  on t 1 .root
     return  join(t 1 .root, union(left(t 1 ), t < ), union(right(t 1 ), t > ))
 
 Here,  Split  is presumed to return two trees: one holding the keys less its input key, one holding the greater keys. (The algorithm is non-destructive, but an in-place destructive version exists as well.)
 The algorithm for intersection or difference is similar, but requires the  Join2  helper routine that is the same as  Join  but without the middle key. Based on the new functions for union, intersection or difference, either one key or multiple keys can be inserted to or deleted from the weight-balanced tree. Since  Split  and  Union  call  Join  but do not deal with the balancing criteria of weight-balanced trees directly, such an implementation is usually called the join-based algorithms.
 The complexity of each of union, intersection and difference is  
   
     
       
         O 
         
           ( 
           
             m 
             log 
             ⁡ 
             
               ( 
               
                 
                   
                     n 
                     m 
                   
                 
                 + 
                 1 
               
               ) 
             
           
           ) 
         
       
     
     {\displaystyle O\left(m\log \left({n \over m}+1\right)\right)} 
    for two weight-balanced trees of sizes  
   
     
       
         m 
       
     
     {\displaystyle m} 
    and  
   
     
       
         n 
         ( 
         ≥ 
         m 
         ) 
       
     
     {\displaystyle n(\geq m)} 
   . This complexity is optimal in terms of the number of comparisons. More importantly, since the recursive calls to union, intersection or difference are independent of each other, they can be executed in parallel with a parallel depth  
   
     
       
         O 
         ( 
         log 
         ⁡ 
         m 
         log 
         ⁡ 
         n 
         ) 
       
     
     {\displaystyle O(\log m\log n)} 
   . When  
   
     
       
         m 
         = 
         1 
       
     
     {\displaystyle m=1} 
   , the join-based implementation has the same computational directed acyclic graph (DAG) as single-element insertion and deletion if the root of the larger tree is used to split the smaller tree.
 

 