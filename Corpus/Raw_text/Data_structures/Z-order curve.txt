***Z-order curve***
In mathematical analysis and computer science, functions which are  Z-order ,  Lebesgue curve ,  Morton space filling curve ,  Morton order  or  Morton code  map multidimensional data to one dimension while preserving locality of the data points. It is named after Guy Macdonald Morton, who first applied the order to file sequencing in 1966. The z-value of a point in multidimensions is simply calculated by interleaving the binary representations of its coordinate values. Once the data are sorted into this ordering, any one-dimensional data structure can be used such as binary search trees, B-trees, skip lists or (with low significant bits truncated) hash tables. The resulting ordering can equivalently be described as the order one would get from a depth-first traversal of a quadtree.
 

 **Coordinate values**

 The figure below shows the Z-values for the two dimensional case with integer coordinates 0 ≤  x  ≤ 7, 0 ≤  y  ≤ 7 (shown both in decimal and binary). Interleaving the binary coordinate values yields binary  z -values as shown. Connecting the  z -values in their numerical order produces the recursively Z-shaped curve. Two-dimensional Z-values are also called as quadkey ones.
 

 The Z-values of x's are described as binary numbers from the Moser–de Bruijn sequence, having nonzero bits only in their even positions:
 
 x[] = {0b000000, 0b000001, 0b000100, 0b000101, 0b010000, 0b010001, 0b010100, 0b010101}
 
 The sum and difference of two x's are calculated by using bitwise operations:
 
 x[i+j] = ((x[i] | 0b10101010) + x[j]) & 0b01010101
x[i-j] = ((x[i] & 0b01010101) - x[j]) & 0b01010101  if i >= j
 
 This property can be used to offset a Z-value, for example in two dimensions the coordinates to the top (decreasing y), bottom (increasing y), left (decreasing x) and right (increasing x) from the current Z-value  z  are:
 
 top    = ((z & 0b10101010) - 1 & 0b10101010) | (z & 0b01010101)
bottom = ((z | 0b01010101) + 1 & 0b10101010) | (z & 0b01010101)
left   = ((z & 0b01010101) - 1 & 0b01010101) | (z & 0b10101010)
right  = ((z | 0b10101010) + 1 & 0b01010101) | (z & 0b10101010)
 
 And in general to add two two-dimensional Z-values:
 
 sum = ((z | 0b10101010) + (w & 0b01010101) & 0b01010101) | ((z | 0b01010101) + (w & 0b10101010) & 0b10101010)
 

 **Efficiently building quadtrees**

 The Z-ordering can be used to efficiently build a quadtree for a set of points.  The basic idea is to sort the input set according to Z-order.  Once sorted, the points can either be stored in a binary search tree and used directly, which is called a linear quadtree, or they can be used to build a pointer based quadtree.
 The input points are usually scaled in each dimension to be positive integers, either as a fixed point representation over the unit range [0, 1] or corresponding to the machine word size.  Both representations are equivalent and allow for the highest order non-zero bit to be found in constant time.  Each square in the quadtree has a side length which is a power of two, and corner coordinates which are multiples of the side length.  Given any two points, the  derived square  for the two points is the smallest square covering both points.  The interleaving of bits from the x and y components of each point is called the  shuffle  of x and y, and can be extended to higher dimensions. Points can be sorted according to their shuffle without explicitly interleaving the bits.  To do this, for each dimension, the most significant bit of the exclusive or of the coordinates of the two points for that dimension is examined.  The dimension for which the most significant bit is largest is then used to compare the two points to determine their shuffle order.
 The exclusive or operation masks off the higher order bits for which the two coordinates are identical.  Since the shuffle interleaves bits from higher order to lower order, identifying the coordinate with the largest most significant bit, identifies the first bit in the shuffle order which differs, and that coordinate can be used to compare the two points.  This is shown in the following Python code:
 

 One way to determine whether the most significant bit is smaller is to compare the floor of the base-2 logarithm of each point.  It turns out the following operation is equivalent, and only requires exclusive or operations: 

 It is also possible to compare floating point numbers using the same technique.  The  less_msb  function is modified to first compare the exponents.  Only when they are equal is the standard  less_msb  function used on the mantissas. Once the points are in sorted order, two properties make it easy to build a quadtree: The first is that the points contained in a square of the quadtree form a contiguous interval in the sorted order.  The second is that if more than one child of a square contains an input point, the square is the  derived square  for two adjacent points in the sorted order.
 For each adjacent pair of points, the derived square is computed and its side length determined.  For each derived square, the interval containing it is bounded by the first larger square to the right and to the left in sorted order.  Each such interval corresponds to a square in the quadtree.  The result of this is a compressed quadtree, where only nodes containing input points or two or more children are present.  A non-compressed quadtree can be built by restoring the missing nodes, if desired.
 Rather than building a pointer based quadtree, the points can be maintained in sorted order in a data structure such as a binary search tree.  This allows points to be added and deleted in O(log n) time.  Two quadtrees can be merged by merging the two sorted sets of points, and removing duplicates.  Point location can be done by searching for the points preceding and following the query point in the sorted order.  If the quadtree is compressed, the predecessor node found may be an arbitrary leaf inside the compressed node of interest.  In this case, it is necessary to find the predecessor of the least common ancestor of the query point and the leaf found. 

 **Use with one-dimensional data structures for range searching**

 Although preserving locality well, for efficient range searches an algorithm is necessary for calculating, from a point encountered in the data structure, the next Z-value which is in the multidimensional search range:
 

 In this example, the range being queried ( x  = 2, ..., 3,  y  = 2, ..., 6) is indicated by the dotted rectangle. Its  highest Z-value (MAX) is 45. In this example, the value  F  = 19 is encountered when searching a data structure in increasing Z-value direction, so we would have to search in the interval between F and MAX (hatched area). To speed up the search, one would calculate the next Z-value which is in the search range, called BIGMIN (36 in the example) and only search in the interval between BIGMIN and MAX (bold values), thus skipping most of the hatched area. Searching in decreasing direction is analogous with LITMAX which is the highest Z-value in the query range lower than F. The BIGMIN problem has first been stated and its solution shown in Tropf and Herzog. This solution is also used in UB-trees ("GetNextZ-address"). As the approach does not depend on the one dimensional data structure chosen, there is still free choice of structuring the data, so well known methods such as balanced trees can be used to cope with dynamic data (in contrast for example to R-trees where special considerations are necessary). Similarly, this independence makes it easier to incorporate the method into existing databases.
 Applying the method hierarchically (according to the data structure at hand), optionally in both increasing and decreasing direction, yields highly efficient multidimensional range search which is important in both commercial and technical applications, e.g. as a procedure underlying nearest neighbour searches. Z-order is one of the few multidimensional access methods that has found its way into commercial database systems (Oracle database 1995, Transbase 2000 ).
 As long ago as 1966, G.M.Morton proposed Z-order for file sequencing of a static two dimensional geographical database. Areal data units are contained in one or a few quadratic frames represented by their sizes and lower right corner Z-values, the sizes complying with the Z-order hierarchy at the corner position. With high probability, changing to an adjacent frame is done with one or a few relatively small scanning steps.
 

 **Related structures**

 As an alternative, the Hilbert curve has been suggested as it has a better order-preserving behaviour, and, in fact, was used in a optimized index, the S2-geometry.  Before S2, it was avoided because the calculations are somewhat more complicated, leading to significant processor overhead. BIGMIN source code for both Z-curve and Hilbert-curve were described in a patent by H. Tropf. For a recent overview on multidimensional data processing, including e.g. nearest neighbour searches, see Hanan Samet's textbook. 

 **Applications**

 **Linear algebra**

 The Strassen algorithm for matrix multiplication is based on splitting the matrices in four blocks, and then recursively splitting each of these blocks in four smaller blocks, until the blocks are single elements (or more practically: until reaching matrices so small that the Moser–de Bruijn sequencetrivial algorithm is faster). Arranging the matrix elements in Z-order then improves locality, and has the additional advantage (compared to row- or column-major ordering) that the subroutine for multiplying two blocks does not need to know the total size of the matrix, but only the size of the blocks and their location in memory.  Effective use of Strassen multiplication
with Z-order has been demonstrated, see Valsalam and Skjellum's 2002 paper. Buluç  et al.  present a sparse matrix data structure that Z-orders its non-zero elements to enable parallel matrix-vector multiplication. 

 **Texture mapping**

 Some GPUs store texture maps in Z-order to increase spatial locality of reference during texture mapped rasterization. This allows cache lines to represent square tiles, increasing the probability that nearby accesses are in the cache. This is important because 3d rendering involves arbitrary transformations (rotations, scaling, perspective, and distortion by animated surfaces). These are referred to as  swizzled textures  or  twidled textures . Other tiled formats may also be used.
 

 **Image/Video Encoding**

 An image or a video frame is a matrix, transform the matrix into a vector of pixels in the z-order, then compress and encode the pixel vector.
 

 