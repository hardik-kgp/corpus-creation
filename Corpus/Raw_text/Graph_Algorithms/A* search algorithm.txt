***A* search algorithm***
A*  (pronounced "A-star") is a graph traversal and path search algorithm, which is often used in computer science due to its completeness, optimality, and optimal efficiency. One major practical drawback is its  
   
     
       
         O 
         ( 
         
           b 
           
             d 
           
         
         ) 
       
     
     {\displaystyle O(b^{d})} 
    space complexity, as it stores all generated nodes in memory. Thus, in practical travel-routing systems, it is generally outperformed by algorithms which can pre-process the graph to attain better performance, as well as memory-bounded approaches; however, A* is still the best solution in many cases. Peter Hart, Nils Nilsson and Bertram Raphael of Stanford Research Institute (now SRI International) first published the algorithm in 1968. It can be seen as an extension of Edsger Dijkstra's 1959 algorithm. A* achieves better performance by using heuristics to guide its search.
 

 **Description**

 A* is an informed search algorithm, or a best-first search, meaning that it is formulated in terms of weighted graphs: starting from a specific starting node of a graph, it aims to find a path to the given goal node having the smallest cost (least distance travelled, shortest time, etc.).  It does this by maintaining a tree of paths originating at the start node and extending those paths one edge at a time until its termination criterion is satisfied.
 At each iteration of its main loop, A* needs to determine which of its paths to extend. It does so based on the cost of the path and an estimate of the cost required to extend the path all the way to the goal. Specifically, A* selects the path that minimizes
 
 
   
     
       
         f 
         ( 
         n 
         ) 
         = 
         g 
         ( 
         n 
         ) 
         + 
         h 
         ( 
         n 
         ) 
       
     
     {\displaystyle f(n)=g(n)+h(n)} 
   where  n  is the next node on the path,  g ( n )  is the cost of the path from the start node to  n , and  h ( n )  is a heuristic function that estimates the cost of the cheapest path from  n  to the goal. A* terminates when the path it chooses to extend is a path from start to goal or if there are no paths eligible to be extended. The heuristic function is problem-specific. If the heuristic function is admissible, meaning that it never overestimates the actual cost to get to the goal, A* is guaranteed to return a least-cost path from start to goal.
 Typical implementations of A* use a priority queue to perform the repeated selection of minimum (estimated) cost nodes to expand. This priority queue is known as the  open set  or  fringe . At each step of the algorithm, the node with the lowest  f ( x )  value is removed from the queue, the  f  and  g  values of its neighbors are updated accordingly, and these neighbors are added to the queue. The algorithm continues until a goal node has a lower  f  value than any node in the queue (or until the queue is empty). The  f  value of the goal is then the cost of the shortest path, since  h  at the goal is zero in an admissible heuristic.
 The algorithm described so far gives us only the length of the shortest path. To find the actual sequence of steps, the algorithm can be easily revised so that each node on the path keeps track of its predecessor. After this algorithm is run, the ending node will point to its predecessor, and so on, until some node's predecessor is the start node.
 As an example, when searching for the shortest route on a map,  h ( x )  might represent the straight-line distance to the goal, since that is physically the smallest possible distance between any two points.
 If the heuristic  h  satisfies the additional condition  h ( x ) ≤  d ( x ,  y ) +  h ( y )  for every edge  ( x ,  y )  of the graph (where  d  denotes the length of that edge), then  h  is called monotone, or consistent. With a consistent heuristic, A* is guaranteed to find an optimal path without processing any node more than once and A* is equivalent to running Dijkstra's algorithm with the reduced cost  d' ( x ,  y ) =  d ( x ,  y ) +  h ( y ) −  h ( x ) .
 

 **Pseudocode**

 The following pseudocode describes the algorithm:
 

 Remark:  In this pseudocode, if a node is reached by one path, removed from openSet, and subsequently reached by a cheaper path, it will be added to openSet again. This is essential to guarantee that the path returned is optimal if the heuristic function is admissible but not  consistent.   If the heuristic is consistent, when a node is removed from openSet the path to it is guaranteed to be optimal so the test ‘tentative_gScore < gScore[neighbor]’ will always fail if the node is reached again.
 

 **Example**

 An example of an A* algorithm in action where nodes are cities connected with roads and h(x) is the     straight-line distance to target point:
 
 Key:  green: start; blue: goal; orange: visited
 The A* algorithm also has real-world applications. In this example, edges are railroads and h(x) is the great-circle distance (the shortest possible distance on a sphere) to the target. The algorithm is searching for a path between Washington, D.C. and Los Angeles.
 
 

 **Implementation details**

 There are a number of simple optimizations or implementation details that can significantly affect the performance of an A* implementation.  The first detail to note is that the way the priority queue handles ties can have a significant effect on performance in some situations.  If ties are broken so the queue behaves in a LIFO manner, A* will behave like depth-first search among equal cost paths (avoiding exploring more than one equally optimal solution).
 When a path is required at the end of the search, it is common to keep with each node a reference to that node's parent.  At the end of the search these references can be used to recover the optimal path.  If these references are being kept then it can be important that the same node doesn't appear in the priority queue more than once (each entry corresponding to a different path to the node, and each with a different cost).  A standard approach here is to check if a node about to be added already appears in the priority queue.  If it does, then the priority and parent pointers are changed to correspond to the lower cost path. A standard binary heap based priority queue does not directly support the operation of searching for one of its elements, but it can be augmented with a hash table that maps elements to their position in the heap, allowing this decrease-priority operation to be performed in logarithmic time. Alternatively, a Fibonacci heap can perform the same decrease-priority operations in constant amortized time.
 

 **Special cases**

 Dijkstra's algorithm, as another example of a uniform-cost search algorithm, can be viewed as a special case of A* where  
   
     
       
         h 
         ( 
         x 
         ) 
         = 
         0 
       
     
     {\displaystyle h(x)=0} 
    for all  x . General depth-first search can be implemented using A* by considering that there is a global counter  C  initialized with a very large value. Every time we process a node we assign  C  to all of its newly discovered neighbors. After each single assignment, we decrease the counter  C  by one. Thus the earlier a node is discovered, the higher its  
   
     
       
         h 
         ( 
         x 
         ) 
       
     
     {\displaystyle h(x)} 
    value. Both Dijkstra's algorithm and depth-first search can be implemented more efficiently without including an  
   
     
       
         h 
         ( 
         x 
         ) 
       
     
     {\displaystyle h(x)} 
    value at each node.
 

 **Properties**

 **Termination and Completeness**

 On finite graphs with non-negative edge weights A* is guaranteed to terminate and is  complete , i.e. it will always find a solution (a path from start to goal) if one exists. On infinite graphs with a finite branching factor and edge costs that are bounded away from zero ( 
   
     
       
         d 
         ( 
         x 
         , 
         y 
         ) 
         > 
         ε 
         > 
         0 
       
     
     {\textstyle d(x,y)>\varepsilon >0} 
    for some fixed  
   
     
       
         ε 
       
     
     {\displaystyle \varepsilon } 
   ), A* is guaranteed to terminate only if there exists a solution.
 

 **Admissibility**

 A search algorithm is said to be  admissible  if it is guaranteed to return an optimal solution. If the heuristic function used by A* is admissible, then A* is admissible. An intuitive ″proof″ of this  is as follows:
 When A* terminates its search, it has found a path from start to goal whose actual cost is lower than the estimated cost of any path from start to goal through any open node (the node's  
   
     
       
         f 
       
     
     {\displaystyle f} 
    value). When the heuristic is admissible, those estimates are optimistic (not quite—see the next paragraph), so A* can safely ignore those nodes because they cannot possibly lead to a cheaper solution than the one it already has. In other words, A* will never overlook the possibility of a lower-cost path from start to goal and so it will continue to search until no such possibilities exist.
 The actual proof is a bit more involved because the  
   
     
       
         f 
       
     
     {\displaystyle f} 
    values of open nodes are not guaranteed to be optimistic even if the heuristic is admissible. This is because the  
   
     
       
         g 
       
     
     {\displaystyle g} 
    values of open nodes are not guaranteed to be optimal, so the sum  
   
     
       
         g 
         + 
         h 
       
     
     {\displaystyle g+h} 
    is not guaranteed to be optimistic.
 

 **Optimal Efficiency**

 Algorithm A is optimally efficient with respect to a set of alternative algorithms  Alts  on a set of problems  P  if for every problem P in  P  and every algorithm A′ in  Alts , the set of nodes expanded by A in solving P is a subset (possibly equal) of the set of nodes expanded by A′ in solving P. The definitive study of the optimal efficiency of A* is due to Rina Dechter and Judea Pearl.
They considered a variety of  definitions of  Alts  and  P   in combination with A*'s heuristic being merely admissible or being both consistent and admissible.  The most interesting positive result they proved is that A*, with a consistent heuristic, is optimally efficient with respect to all admissible A*-like search algorithms on all ″non-pathological″ search problems.  Roughly speaking, their notion of non-pathological problem is what we now mean by ″up to tie-breaking″.  This result does not hold if A*'s heuristic is admissible but not consistent. In that case, Dechter and Pearl showed there exist admissible A*-like algorithms that can expand arbitrarily fewer nodes than A* on some non-pathological problems.
 Optimal efficiency is about the  set  of nodes expanded, not the  number  of node expansions (the number of iterations of A*'s main loop).  When the heuristic being used is admissible but not consistent, it is possible for a node to be expanded by A* many times, an exponential number of times in the worst case.
In such circumstances Dijkstra's algorithm could outperform A* by a large margin.
 

 **Bounded relaxation**

 While the admissibility criterion guarantees an optimal solution path, it also means that A* must examine all equally meritorious paths to find the optimal path. To compute approximate shortest paths, it is possible to speed up the search at the expense of optimality by relaxing the admissibility criterion. Oftentimes we want to bound this relaxation, so that we can guarantee that the solution path is no worse than (1 +  ε ) times the optimal solution path. This new guarantee is referred to as  ε -admissible.
 There are a number of  ε -admissible algorithms:
 
 Weighted A*/Static Weighting. If  h a ( n ) is an admissible heuristic function, in the weighted version of the A* search one uses  h w ( n ) =  ε h a ( n ) ,  ε  > 1  as the heuristic function, and perform the A* search as usual (which eventually happens faster than using  h a  since fewer nodes are expanded). The path hence found by the search algorithm can have a cost of at most  ε  times that of the least cost path in the graph. Dynamic Weighting uses the cost function  
   
     
       
         f 
         ( 
         n 
         ) 
         = 
         g 
         ( 
         n 
         ) 
         + 
         ( 
         1 
         + 
         ε 
         w 
         ( 
         n 
         ) 
         ) 
         h 
         ( 
         n 
         ) 
       
     
     {\displaystyle f(n)=g(n)+(1+\varepsilon w(n))h(n)} 
   , where  
   
     
       
         w 
         ( 
         n 
         ) 
         = 
         
           
             { 
             
               
                 
                   1 
                   − 
                   
                     
                       
                         d 
                         ( 
                         n 
                         ) 
                       
                       N 
                     
                   
                 
                 
                   d 
                   ( 
                   n 
                   ) 
                   ≤ 
                   N 
                 
               
               
                 
                   0 
                 
                 
                   
                     otherwise 
                   
                 
               
             
             
           
         
       
     
     {\displaystyle w(n)={\begin{cases}1-{\frac {d(n)}{N}}&d(n)\leq N\\0&{\text{otherwise}}\end{cases}}} 
   , and where  
   
     
       
         d 
         ( 
         n 
         ) 
       
     
     {\displaystyle d(n)} 
    is the depth of the search and  N  is the anticipated length of the solution path. Sampled Dynamic Weighting uses sampling of nodes to better estimate and debias the heuristic error. 
   
     
       
         
           A 
           
             ε 
           
           
             ∗ 
           
         
       
     
     {\displaystyle A_{\varepsilon }^{*}} 
   . uses two heuristic functions. The first is the FOCAL list, which is used to select candidate nodes, and the second  h F  is used to select the most promising node from the FOCAL list. A ε  selects nodes with the function  
   
     
       
         A 
         f 
         ( 
         n 
         ) 
         + 
         B 
         
           h 
           
             F 
           
         
         ( 
         n 
         ) 
       
     
     {\displaystyle Af(n)+Bh_{F}(n)} 
   , where  A  and  B  are constants. If no nodes can be selected, the algorithm will backtrack with the function  
   
     
       
         C 
         f 
         ( 
         n 
         ) 
         + 
         D 
         
           h 
           
             F 
           
         
         ( 
         n 
         ) 
       
     
     {\displaystyle Cf(n)+Dh_{F}(n)} 
   , where  C  and  D  are constants. AlphA* attempts to promote depth-first exploitation by preferring recently expanded nodes. AlphA* uses the cost function  
   
     
       
         
           f 
           
             α 
           
         
         ( 
         n 
         ) 
         = 
         ( 
         1 
         + 
         
           w 
           
             α 
           
         
         ( 
         n 
         ) 
         ) 
         f 
         ( 
         n 
         ) 
       
     
     {\displaystyle f_{\alpha }(n)=(1+w_{\alpha }(n))f(n)} 
   , where  
   
     
       
         
           w 
           
             α 
           
         
         ( 
         n 
         ) 
         = 
         
           
             { 
             
               
                 
                   λ 
                 
                 
                   g 
                   ( 
                   π 
                   ( 
                   n 
                   ) 
                   ) 
                   ≤ 
                   g 
                   ( 
                   
                     
                       
                         n 
                         ~ 
                       
                     
                   
                   ) 
                 
               
               
                 
                   Λ 
                 
                 
                   
                     otherwise 
                   
                 
               
             
             
           
         
       
     
     {\displaystyle w_{\alpha }(n)={\begin{cases}\lambda &g(\pi (n))\leq g({\tilde {n}})\\\Lambda &{\text{otherwise}}\end{cases}}} 
   , where  λ  and  Λ  are constants with  
   
     
       
         λ 
         ≤ 
         Λ 
       
     
     {\displaystyle \lambda \leq \Lambda } 
   ,  π ( n ) is the parent of  n , and  ñ  is the most recently expanded node. 

 **Complexity**

 The time complexity of A* depends on the heuristic. In the worst case of an unbounded search space, the number of nodes expanded is exponential in the depth of the solution (the shortest path)  d :  O ( b d ) , where  b  is the branching factor (the average number of successors per state). This assumes that a goal state exists at all, and is reachable from the start state; if it is not, and the state space is infinite, the algorithm will not terminate.
 The heuristic function has a major effect on the practical performance of A* search, since a good heuristic allows A* to prune away many of the  b d  nodes that an uninformed search would expand. Its quality can be expressed in terms of the  effective  branching factor  b * , which can be determined empirically for a problem instance by measuring the number of nodes expanded,  N , and the depth of the solution, then solving 
 
   
     
       
         N 
         + 
         1 
         = 
         1 
         + 
         
           b 
           
             ∗ 
           
         
         + 
         ( 
         
           b 
           
             ∗ 
           
         
         
           ) 
           
             2 
           
         
         + 
         ⋯ 
         + 
         ( 
         
           b 
           
             ∗ 
           
         
         
           ) 
           
             d 
           
         
         . 
       
     
     {\displaystyle N+1=1+b^{*}+(b^{*})^{2}+\dots +(b^{*})^{d}.} 
   Good heuristics are those with low effective branching factor (the optimal being  b * = 1 ).
 The time complexity is polynomial when the search space is a tree, there is a single goal state, and the heuristic function  h  meets the following condition:
 
 
   
     
       
         
           | 
         
         h 
         ( 
         x 
         ) 
         − 
         
           h 
           
             ∗ 
           
         
         ( 
         x 
         ) 
         
           | 
         
         = 
         O 
         ( 
         log 
         ⁡ 
         
           h 
           
             ∗ 
           
         
         ( 
         x 
         ) 
         ) 
       
     
     {\displaystyle |h(x)-h^{*}(x)|=O(\log h^{*}(x))} 
   where  h *  is the optimal heuristic, the exact cost to get from  x  to the goal. In other words, the error of  h  will not grow faster than the logarithm of the "perfect heuristic"  h *  that returns the true distance from  x  to the goal. The space complexity of A* is roughly the same as that of all other graph search algorithms, as it keeps all generated nodes in memory. In practice, this turns out to be the biggest drawback of A* search, leading to the development of memory-bounded heuristic searches, such as Iterative deepening A*, memory bounded A*, and SMA*.
 

 **Applications**

 A* is commonly used for the common pathfinding problem in applications such as video games, but was originally designed as a general graph traversal algorithm.
It finds applications to diverse problems, including the problem of parsing using stochastic grammars in NLP.
Other cases include an Informational search with online learning. 

 **Relations to other algorithms**

 What sets A* apart from a greedy best-first search algorithm is that it takes the cost/distance already traveled,  g ( n ) , into account.
 Some common variants of Dijkstra's algorithm can be viewed as a special case of A* where the heuristic  
   
     
       
         h 
         ( 
         n 
         ) 
         = 
         0 
       
     
     {\displaystyle h(n)=0} 
    for all nodes; in turn, both Dijkstra and A* are special cases of dynamic programming.
A* itself is a special case of a generalization of branch and bound. 

 **Variants**

 Anytime A* or Anytime Repairing A* (ARA*) 
 Anytime Dynamic A* 
 Block A* 
 D* 
 Field D* 
 Fringe 
 Fringe Saving A* (FSA*) 
 Generalized Adaptive A* (GAA*) 
 Incremental heuristic search 
 Informational search 
 Iterative deepening A* (IDA*) 
 Jump point search 
 Lifelong Planning A* (LPA*) 
 New Bidirectional A* (NBA*) 
 Simplified Memory bounded A* (SMA*) 
 Realtime A* 
 Theta* 
 Time-Bounded A* (TBA*) A* can also be adapted to a bidirectional search algorithm. Special care needs to be taken for the stopping criterion. 

 