***Borůvka's algorithm***
Borůvka's algorithm  is a greedy algorithm for finding a minimum spanning tree in a graph for which all edge weights are distinct,
or a minimum spanning forest in the case of a graph that is not connected.
 It was first published in 1926 by Otakar Borůvka as a method of constructing an efficient electricity network for Moravia.
The algorithm was rediscovered by Choquet in 1938; again by Florek,  Łukasiewicz, Perkal, Steinhaus, and Zubrzycki in 1951; and again by Georges Sollin in 1965. This algorithm is frequently called  Sollin's algorithm , especially in the parallel computing literature.
 The algorithm begins by finding the minimum-weight edge incident to each vertex of the graph, and adding all of those edges to the forest.
Then, it repeats a similar process of finding the minimum-weight edge from each tree constructed so far to a different tree, and adding all of those edges to the forest.
Each repetition of this process reduces the number of trees, within each connected component of the graph, to at most half of this former value,
so after logarithmically many repetitions the process finishes. When it does, the set of edges it has added forms the minimum spanning forest.
 

 **Pseudocode**

 Designating each vertex or set of connected vertices a "component", pseudocode for Borůvka's algorithm is:
 
  Input: A graph  G  whose edges have distinct weights
 Initialize a forest  F  to be a set of one-vertex trees, one for each vertex of the graph.
 While  F  has more than one component:
   Find the connected components of  F  and label each vertex of  G  by its component
   Initialize the cheapest edge for each component to "None"
   For each edge  uv  of  G :
     If  u  and  v  have different component labels:
       If  uv  is cheaper than the cheapest edge for the component of  u :
         Set  uv  as the cheapest edge for the component of  u 
       If  uv  is cheaper than the cheapest edge for the component of  v :
         Set  uv  as the cheapest edge for the component of  v 
   For each component whose cheapest edge is not "None":
     Add its cheapest edge to  F 
 Output:  F  is the minimum spanning forest of  G .
 
 If edges do not have distinct weights, then a consistent tie-breaking rule (e.g. breaking ties by the object identifiers of the edges) can be used.
An optimization (not necessary for the analysis) is to remove from  G  each edge that is found to connect two vertices in the same component as each other.
 

 **Complexity**

 Borůvka's algorithm can be shown to take O(log  V ) iterations of the outer loop until it terminates, and therefore to run in time O( E  log  V ), where  E  is the number of edges, and  V  is the number of vertices in  G . In planar graphs, and more generally in families of graphs closed under graph minor operations, it can be made to run in linear time, by removing all but the cheapest edge between each pair of components after each stage of the algorithm. 

 **Example**

 **Other algorithms**

 Other algorithms for this problem include Prim's algorithm and Kruskal's algorithm. Fast parallel algorithms can be obtained by combining Prim's algorithm with Borůvka's. A faster randomized minimum spanning tree algorithm based in part on Borůvka's algorithm due to Karger, Klein, and Tarjan runs in expected  O( E )  time.  The best known (deterministic) minimum spanning tree algorithm by Bernard Chazelle is also based in part on Borůvka's and runs in  O( E  α( E , V ))  time, where α is the inverse of the Ackermann function. These randomized and deterministic algorithms combine steps of Borůvka's algorithm, reducing the number of components that remain to be connected, with steps of a different type that reduce the number of edges between pairs of components.
 

 