***Breadth-first search***
Breadth-first search  ( BFS ) is an algorithm for traversing or searching tree or graph data structures. It starts at the tree root (or some arbitrary node of a graph, sometimes referred to as a 'search key'), and explores all of the neighbor nodes at the present depth prior to moving on to the nodes at the next depth level.
 It uses the opposite strategy as depth-first search, which instead explores the node branch as far as possible before being forced to backtrack and expand other nodes. BFS and its application in finding connected components of graphs were invented in 1945 by Konrad Zuse, in his (rejected) Ph.D. thesis on the Plankalkül programming language, but this was not published until 1972.
It was reinvented in 1959 by Edward F. Moore, who used it to find the shortest path out of a maze, and later developed by C. Y. Lee into a wire routing algorithm (published 1961). 

 **Pseudocode**

 Input : A graph  Graph  and a  starting vertex   root  of  Graph 
 Output : Goal state. The  parent  links trace the shortest path back to  root 
 
 1   procedure  BFS( G , start_v ):
2      let  Q  be a queue
3      label  start_v  as discovered
4       Q .enqueue( start_v )
5       while   Q  is not empty
6           v  =  Q .dequeue()
7           if   v  is the goal:
8               return   v 
9           for all  edges from  v  to  w   in   G .adjacentEdges( v )  do 
10              if   w  is not labeled as discovered:
11                 label  w  as discovered
12                  w .parent =  v 
13                  Q .enqueue( w ) 
 

 **More details**

 This non-recursive implementation is similar to the non-recursive implementation of depth-first search, but differs from it in two ways:
 
 it uses a queue (First In First Out) instead of a stack and 
 it checks whether a vertex has been discovered before enqueueing the vertex rather than delaying this check until the vertex is dequeued from the queue. The  Q  queue contains the frontier along which the algorithm is currently searching.
 Nodes can be labelled as discovered by storing them in a set, or by an attribute on each node, depending on the implementation.
 Note that the word  node  is usually interchangeable with the word  vertex .
 The  parent  attribute of each node is useful for accessing the nodes in a shortest path, for example by backtracking from the destination node up to the starting node, once the BFS has been run, and the predecessors nodes have been set.
 Breadth-first search produces a so-called  breadth first tree . You can see how a  breadth first tree  looks in the following example.
 

 **Example**

 The following is an example of the breadth-first tree obtained by running a BFS on German cities starting from  Frankfurt :
 

 **Analysis**

 **Time and space complexity**

 The time complexity can be expressed as  
   
     
       
         O 
         ( 
         
           | 
         
         V 
         
           | 
         
         + 
         
           | 
         
         E 
         
           | 
         
         ) 
       
     
     {\displaystyle O(|V|+|E|)} 
   , since every vertex and every edge will be explored in the worst case.  
   
     
       
         
           | 
         
         V 
         
           | 
         
       
     
     {\displaystyle |V|} 
    is the number of vertices and  
   
     
       
         
           | 
         
         E 
         
           | 
         
       
     
     {\displaystyle |E|} 
    is the number of edges in the graph.
Note that  
   
     
       
         O 
         ( 
         
           | 
         
         E 
         
           | 
         
         ) 
       
     
     {\displaystyle O(|E|)} 
    may vary between  
   
     
       
         O 
         ( 
         1 
         ) 
       
     
     {\displaystyle O(1)} 
    and  
   
     
       
         O 
         ( 
         
           | 
         
         V 
         
           
             | 
           
           
             2 
           
         
         ) 
       
     
     {\displaystyle O(|V|^{2})} 
   , depending on how sparse the input graph is. When the number of vertices in the graph is known ahead of time, and additional data structures are used to determine which vertices have already been added to the queue, the space complexity can be expressed as  
   
     
       
         O 
         ( 
         
           | 
         
         V 
         
           | 
         
         ) 
       
     
     {\displaystyle O(|V|)} 
   , where  
   
     
       
         
           | 
         
         V 
         
           | 
         
       
     
     {\displaystyle |V|} 
    is the cardinality of the set of vertices. This is in addition to the space
required for the graph itself, which may vary depending on the graph representation used by an implementation of the algorithm.
 When working with graphs that are too large to store explicitly (or infinite), it is more practical to describe the complexity of breadth-first search in different terms: to find the nodes that are at distance  d  from the start node (measured in number of edge traversals), BFS takes  O ( b d  + 1 )  time and memory, where  b  is the "branching factor" of the graph (the average out-degree). 

 **Completeness**

 In the analysis of algorithms, the input to breadth-first search is assumed to be a finite graph, represented explicitly as an adjacency list or similar representation. However, in the application of graph traversal methods in artificial intelligence the input may be an implicit representation of an infinite graph. In this context, a search method is described as being complete if it is guaranteed to find a goal state if one exists. Breadth-first search is complete, but depth-first search is not. When applied to infinite graphs represented implicitly, breadth-first search will eventually find the goal state, but depth-first search may get lost in parts of the graph that have no goal state and never return. 

 **BFS ordering**

 An enumeration of the vertices of a graph is said to be a BFS ordering if it is the possible output of the application of BFS to this graph.
 Let  
   
     
       
         G 
         = 
         ( 
         V 
         , 
         E 
         ) 
       
     
     {\displaystyle G=(V,E)} 
    be a graph  with  
   
     
       
         n 
       
     
     {\displaystyle n} 
    vertices.  Recall that  
   
     
       
         N 
         ( 
         v 
         ) 
       
     
     {\displaystyle N(v)} 
    is the set of neighbors of  
   
     
       
         v 
       
     
     {\displaystyle v} 
   .
For  
   
     
       
         σ 
         = 
         ( 
         
           v 
           
             1 
           
         
         , 
         … 
         , 
         
           v 
           
             m 
           
         
         ) 
       
     
     {\displaystyle \sigma =(v_{1},\dots ,v_{m})} 
    be a list of distinct elements of  
   
     
       
         V 
       
     
     {\displaystyle V} 
   , for  
   
     
       
         v 
         ∈ 
         V 
         ∖ 
         { 
         
           v 
           
             1 
           
         
         , 
         … 
         , 
         
           v 
           
             m 
           
         
         } 
       
     
     {\displaystyle v\in V\setminus \{v_{1},\dots ,v_{m}\}} 
   , let  
   
     
       
         
           ν 
           
             σ 
           
         
         ( 
         v 
         ) 
       
     
     {\displaystyle \nu _{\sigma }(v)} 
    be the least  
   
     
       
         i 
       
     
     {\displaystyle i} 
    such that  
   
     
       
         
           v 
           
             i 
           
         
       
     
     {\displaystyle v_{i}} 
    is a neighbor of  
   
     
       
         v 
       
     
     {\displaystyle v} 
   , if such a  
   
     
       
         i 
       
     
     {\displaystyle i} 
    exists, and be  
   
     
       
         ∞ 
       
     
     {\displaystyle \infty } 
    otherwise.
 Let  
   
     
       
         σ 
         = 
         ( 
         
           v 
           
             1 
           
         
         , 
         … 
         , 
         
           v 
           
             n 
           
         
         ) 
       
     
     {\displaystyle \sigma =(v_{1},\dots ,v_{n})} 
    be an enumeration of the vertices of  
   
     
       
         V 
       
     
     {\displaystyle V} 
   .
The enumeration  
   
     
       
         σ 
       
     
     {\displaystyle \sigma } 
    is said to be a BFS ordering (with source  
   
     
       
         
           v 
           
             1 
           
         
       
     
     {\displaystyle v_{1}} 
   ) if, for all  
   
     
       
         1 
         < 
         i 
         ≤ 
         n 
       
     
     {\displaystyle 1<i\leq n} 
   ,  
   
     
       
         
           v 
           
             i 
           
         
       
     
     {\displaystyle v_{i}} 
    is the vertex  
   
     
       
         w 
         ∈ 
         V 
         ∖ 
         { 
         
           v 
           
             1 
           
         
         , 
         … 
         , 
         
           v 
           
             i 
           
         
         − 
         1 
         } 
       
     
     {\displaystyle w\in V\setminus \{v_{1},\dots ,v_{i}-1\}} 
    such that  
   
     
       
         
           ν 
           
             ( 
             
               v 
               
                 1 
               
             
             , 
             … 
             , 
             
               v 
               
                 i 
                 − 
                 1 
               
             
             ) 
           
         
         ( 
         w 
         ) 
       
     
     {\displaystyle \nu _{(v_{1},\dots ,v_{i-1})}(w)} 
    is minimal. Equivalently,  
   
     
       
         σ 
       
     
     {\displaystyle \sigma } 
    is a BFS ordering if, for all  
   
     
       
         1 
         ≤ 
         i 
         < 
         j 
         < 
         k 
         ≤ 
         n 
       
     
     {\displaystyle 1\leq i<j<k\leq n} 
    with  
   
     
       
         
           v 
           
             i 
           
         
         ∈ 
         N 
         ( 
         
           v 
           
             k 
           
         
         ) 
         ∖ 
         N 
         ( 
         
           v 
           
             j 
           
         
         ) 
       
     
     {\displaystyle v_{i}\in N(v_{k})\setminus N(v_{j})} 
   , there exists a neighbor   
   
     
       
         
           v 
           
             m 
           
         
       
     
     {\displaystyle v_{m}} 
    of  
   
     
       
         
           v 
           
             j 
           
         
       
     
     {\displaystyle v_{j}} 
    such that  
   
     
       
         m 
         < 
         i 
       
     
     {\displaystyle m<i} 
   . 
 

 **Applications**

 Breadth-first search can be used to solve many problems in graph theory, for example:
 
 Copying garbage collection, Cheney's algorithm 
 Finding the shortest path between two nodes  u  and  v , with path length measured by number of edges (an advantage over depth-first search) 
 (Reverse) Cuthill–McKee mesh numbering 
 Ford–Fulkerson method for computing the maximum flow in a flow network 
 Serialization/Deserialization of a binary tree vs serialization in sorted order, allows the tree to be re-constructed in an efficient manner. 
 Construction of the  failure function  of the Aho-Corasick pattern matcher. 
 Testing bipartiteness of a graph. 

 