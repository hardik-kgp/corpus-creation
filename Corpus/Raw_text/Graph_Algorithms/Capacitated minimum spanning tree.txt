***Capacitated minimum spanning tree***
Capacitated minimum spanning tree  is a minimal cost spanning tree of a graph that has a designated root node  
   
     
       
         r 
       
     
     {\displaystyle r} 
    and satisfies the capacity constraint  
   
     
       
         c 
       
     
     {\displaystyle c} 
   . The capacity constraint ensures that all subtrees (maximal subgraphs connected to the root by a single edge) incident on the root node  
   
     
       
         r 
       
     
     {\displaystyle r} 
    have no more than  
   
     
       
         c 
       
     
     {\displaystyle c} 
    nodes. If the tree nodes have weights, then the capacity constraint may be interpreted as follows: the sum of weights in any subtree should be no greater than  
   
     
       
         c 
       
     
     {\displaystyle c} 
   . The edges connecting the subgraphs to the root node are called  gates . Finding the optimal solution is NP-hard. 

 **Algorithms**

 Suppose we have a graph  
   
     
       
         G 
         = 
         ( 
         V 
         , 
         E 
         ) 
       
     
     {\displaystyle G=(V,E)} 
   ,  
   
     
       
         n 
         = 
         
           | 
         
         G 
         
           | 
         
       
     
     {\displaystyle n=|G|} 
    with a root  
   
     
       
         r 
         ∈ 
         G 
       
     
     {\displaystyle r\in G} 
   . Let  
   
     
       
         
           a 
           
             i 
           
         
       
     
     {\displaystyle a_{i}} 
    be all other nodes in  
   
     
       
         G 
       
     
     {\displaystyle G} 
   . Let  
   
     
       
         
           c 
           
             i 
             j 
           
         
       
     
     {\displaystyle c_{ij}} 
    be the edge cost between ver  
   
     
       
         
           a 
           
             i 
           
         
       
     
     {\displaystyle a_{i}} 
    and  
   
     
       
         
           a 
           
             j 
           
         
       
     
     {\displaystyle a_{j}} 
    which form a cost matrix  
   
     
       
         C 
         = 
         
           
             c 
             
               i 
               j 
             
           
         
       
     
     {\displaystyle C={c_{ij}}} 
   .
 

 **Esau-Williams heuristic**

 Esau-Williams heuristic finds suboptimal CMST that are very close to the exact solutions, but on average EW produces better results than many other heuristics.
 Initially, all nodes are connected to the root  
   
     
       
         r 
       
     
     {\displaystyle r} 
    (star graph) and the network's cost is  
   
     
       
         
           
             ∑ 
             
               i 
               = 
               0 
             
             
               n 
             
           
           
             c 
             
               r 
               i 
             
           
         
       
     
     {\displaystyle \displaystyle \sum _{i=0}^{n}c_{ri}} 
   ; each of these edges is a gate. At each iteration, we seek the closest neighbor  
   
     
       
         
           a 
           
             j 
           
         
       
     
     {\displaystyle a_{j}} 
    for every node in  
   
     
       
         G 
         − 
         
           r 
         
       
     
     {\displaystyle G-{r}} 
    and evaluate the tradeoff function:  
   
     
       
         t 
         ( 
         
           a 
           
             i 
           
         
         ) 
         = 
         
           g 
           
             i 
           
         
         − 
         
           c 
           
             i 
             j 
           
         
       
     
     {\displaystyle t(a_{i})=g_{i}-c_{ij}} 
   . We look for the greatest  
   
     
       
         t 
         ( 
         
           a 
           
             i 
           
         
         ) 
       
     
     {\displaystyle t(a_{i})} 
    among the positive tradeoffs and, if the resulting subtree does not violate the capacity constraints, remove the gate  
   
     
       
         
           g 
           
             i 
           
         
       
     
     {\displaystyle g_{i}} 
     connecting the  
   
     
       
         i 
       
     
     {\displaystyle i} 
   -th subtree to  
   
     
       
         
           a 
           
             j 
           
         
       
     
     {\displaystyle a_{j}} 
    by an edge  
   
     
       
         
           c 
           
             i 
             j 
           
         
       
     
     {\displaystyle c_{ij}} 
   . We repeat the iterations until we can not make any further improvements to the tree.
 Esau-Williams heuristics for computing a suboptimal CMST:
 
 function  CMST( c , C , r ):
     T  = { 
   
     
       
         
           c 
           
             1 
             r 
           
         
       
     
     {\displaystyle c_{1r}} 
   ,  
   
     
       
         
           c 
           
             2 
             r 
           
         
       
     
     {\displaystyle c_{2r}} 
   , ...,  
   
     
       
         
           c 
           
             n 
             r 
           
         
       
     
     {\displaystyle c_{nr}} 
   }
     while  have changes:
         for each  node  
   
     
       
         
           a 
           
             i 
           
         
       
     
     {\displaystyle a_{i}} 
   
             
   
     
       
         
           a 
           
             j 
           
         
       
     
     {\displaystyle a_{j}} 
    = closest node in a different subtree
             
   
     
       
         t 
         ( 
         
           a 
           
             i 
           
         
         ) 
       
     
     {\displaystyle t(a_{i})} 
    =  
   
     
       
         
           g 
           
             i 
           
         
       
     
     {\displaystyle g_{i}} 
    -  
   
     
       
         
           c 
           
             i 
             j 
           
         
       
     
     {\displaystyle c_{ij}} 
   
         t_max  =  max ( 
   
     
       
         t 
         ( 
         
           a 
           
             i 
           
         
         ) 
       
     
     {\displaystyle t(a_{i})} 
   )
         k  =  i  such that  
   
     
       
         t 
         ( 
         
           a 
           
             i 
           
         
         ) 
       
     
     {\displaystyle t(a_{i})} 
    = t_max
         if  (  cost (i) +  cost (j) <=  c )
             T  =  T  -  
   
     
       
         
           g 
           
             k 
           
         
       
     
     {\displaystyle g_{k}} 
   
             T  =  T  union  
   
     
       
         
           c 
           
             k 
             j 
           
         
       
     
     {\displaystyle c_{kj}} 
   
     return   T 
 
 It is easy to see that EW finds a solution in polynomial time.
 

 **Sharma's heuristic**

 Sharma's heuristic. 

 **Applications**

 CMST problem is important in network design: when many terminal computers have to be connected to the central hub, the star configuration is usually not the minimum cost design. Finding a CMST that organizes the terminals into subnetworks can lower the cost of implementing a network.
 

 