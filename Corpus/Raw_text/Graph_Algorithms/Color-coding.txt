***Color-coding***
In computer science and graph theory, the term  color-coding  refers to an algorithmic technique which is useful in the discovery of network motifs. For example, it can be used to detect a simple path of length  k  in a given graph. The traditional color-coding algorithm is probabilistic, but it can be derandomized without much overhead in the running time. 
 Color-coding also applies to the detection of cycles of a given length, and more generally it applies to the subgraph isomorphism problem (an NP-complete problem), where it yields polynomial time algorithms when the subgraph pattern that it is trying to detect has bounded  treewidth.
 The color-coding method was proposed and analyzed in 1994 by Noga Alon, Raphael Yuster, and Uri Zwick. 

 **Results**

 The following results can be obtained through the method of color-coding:
 
 For every fixed constant  k , if a graph  G  = ( V ,  E )  contains a simple cycle of size  k , then such a cycle can be found in:
 
   
     
       
         O 
         ( 
         
           V 
           
             ω 
           
         
         ) 
       
     
     {\displaystyle O(V^{\omega })} 
    expected time, or 
 
   
     
       
         O 
         ( 
         
           V 
           
             ω 
           
         
         log 
         ⁡ 
         V 
         ) 
       
     
     {\displaystyle O(V^{\omega }\log V)} 
    worst-case time, where  ω  is the exponent of matrix multiplication. 
 For every fixed constant  k , and every graph  G  = ( V ,  E )  that is in any nontrivial minor-closed graph family (e.g., a planar graph), if  G  contains a simple cycle of size  k , then such cycle can be found in:
 O ( V )  expected time, or 
 O ( V  log  V )  worst-case time. 
 If a graph  G  = ( V ,  E )  contains a subgraph isomorphic to a bounded treewidth graph which has  O (log  V )  vertices, then such a subgraph can be found in polynomial time. 

 **The method**

 To solve the problem of finding a subgraph  
   
     
       
         H 
         = 
         ( 
         
           V 
           
             H 
           
         
         , 
         
           E 
           
             H 
           
         
         ) 
       
     
     {\displaystyle H=(V_{H},E_{H})} 
    in a given graph  G  = ( V ,  E ) , where  H  can be a path, a cycle, or any bounded treewidth graph where  
   
     
       
         
           | 
         
         
           V 
           
             H 
           
         
         
           | 
         
         = 
         O 
         ( 
         log 
         ⁡ 
         V 
         ) 
       
     
     {\displaystyle |V_{H}|=O(\log V)} 
   , the method of color-coding begins by randomly coloring each vertex of  G  with  
   
     
       
         k 
         = 
         
           | 
         
         
           V 
           
             H 
           
         
         
           | 
         
       
     
     {\displaystyle k=|V_{H}|} 
    colors, and then tries to find a colorful copy of  H  in colored  G . Here, a graph is colorful if every vertex in it is colored with a distinct color. This method works by repeating (1) random coloring a graph and (2) finding colorful copy of the target subgraph, and eventually the target subgraph can be found if the process is repeated a sufficient number of times.
 Suppose a copy of  H  in  G  becomes colorful with some non-zero probability  p . It immediately follows that if the random coloring is repeated  1 / p  times, then this copy is expected to become colorful once. Note that though  p  is small, it is shown that if  
   
     
       
         
           | 
         
         
           V 
           
             H 
           
         
         
           | 
         
         = 
         O 
         ( 
         log 
         ⁡ 
         V 
         ) 
       
     
     {\displaystyle |V_{H}|=O(\log V)} 
   ,  p  is only polynomially small. Suppose again there exists an algorithm such that, given a graph  G  and a coloring which maps each vertex of  G  to one of the  k  colors, it finds a copy of colorful  H , if one exists, within some runtime  O ( r ) . Then the expected time to find a copy of  H  in  G , if one exists, is  
   
     
       
         O 
         ( 
         
           
             
               r 
               p 
             
           
         
         ) 
       
     
     {\displaystyle O({\tfrac {r}{p}})} 
   .
 Sometimes it is also desirable to use a more restricted version of colorfulness. For example, in the context of finding cycles in planar graphs, it is possible to develop an algorithm that finds well-colored cycles. Here, a cycle is well-colored if its vertices are colored by consecutive colors.
 

 **Example**

 An example would be finding a simple cycle of length  k  in graph  G  = ( V ,  E ) .
 By applying random coloring method, each simple cycle has a probability of  
   
     
       
         k 
         ! 
         
           / 
         
         
           k 
           
             k 
           
         
         > 
         
           e 
           
             − 
             k 
           
         
       
     
     {\displaystyle k!/k^{k}>e^{-k}} 
    to become colorful, since there are  
   
     
       
         
           k 
           
             k 
           
         
       
     
     {\displaystyle k^{k}} 
    ways of coloring the  k  vertices on the cycle, among which there are  
   
     
       
         k 
         ! 
       
     
     {\displaystyle k!} 
    colorful occurrences. Then an algorithm (described next) can be used to find colorful cycles in the randomly colored graph  G  in time  
   
     
       
         O 
         ( 
         
           V 
           
             ω 
           
         
         ) 
       
     
     {\displaystyle O(V^{\omega })} 
   , where  
   
     
       
         ω 
       
     
     {\displaystyle \omega } 
    is the matrix multiplication constant. Therefore, it takes  
   
     
       
         
           e 
           
             k 
           
         
         ⋅ 
         O 
         ( 
         
           V 
           
             ω 
           
         
         ) 
       
     
     {\displaystyle e^{k}\cdot O(V^{\omega })} 
    overall time to find a simple cycle of length  k  in  G .
 The colorful cycle-finding algorithm works by first finding all pairs of vertices in  V  that are connected by a simple path of length  k  − 1 , and then checking whether the two vertices in each pair are connected. Given a coloring function  c  :  V  → {1, ...,  k }   to color graph  G , enumerate all partitions of the color set  {1, ...,  k }   into two subsets  C 1 ,  C 2  of size  
   
     
       
         k 
         
           / 
         
         2 
       
     
     {\displaystyle k/2} 
    each. Note that  V  can be divided into  V 1  and  V 2  accordingly, and let  G 1  and  G 2  denote the subgraphs induced by  V 1  and  V 2  respectively. Then, recursively find colorful paths of length  
   
     
       
         k 
         
           / 
         
         2 
         − 
         1 
       
     
     {\displaystyle k/2-1} 
    in each of  G 1  and  G 2 . Suppose the boolean matrix  A 1  and  A 2  represent the connectivity of each pair of vertices in  G 1  and  G 2  by a colorful path, respectively, and let  B  be the matrix describing the adjacency relations between vertices of  V 1  and those of  V 2 , the boolean product  
   
     
       
         
           A 
           
             1 
           
         
         B 
         
           A 
           
             2 
           
         
       
     
     {\displaystyle A_{1}BA_{2}} 
    gives all pairs of vertices in  V  that are connected by a colorful path of length  k  − 1 . Thus, the recursive relation of matrix multiplications is  
   
     
       
         t 
         ( 
         k 
         ) 
         ≤ 
         
           2 
           
             k 
           
         
         ⋅ 
         t 
         ( 
         k 
         
           / 
         
         2 
         ) 
       
     
     {\displaystyle t(k)\leq 2^{k}\cdot t(k/2)} 
   , which yields a runtime of  
   
     
       
         
           2 
           
             O 
             ( 
             k 
             ) 
           
         
         ⋅ 
         
           V 
           
             ω 
           
         
         = 
         O 
         ( 
         
           V 
           
             ω 
           
         
         ) 
       
     
     {\displaystyle 2^{O(k)}\cdot V^{\omega }=O(V^{\omega })} 
   . Although this algorithm finds only the end points of the colorful path, another algorithm by Alon and Naor that finds colorful paths themselves can be incorporated into it.
 

 **Derandomization**

 The derandomization of color-coding involves enumerating possible colorings of a graph  G , such that the randomness of coloring  G  is no longer required. For the target subgraph  H  in  G  to be discoverable, the enumeration has to include at least one instance where the  H  is colorful. To achieve this, enumerating a  k -perfect family  F  of hash functions from  {1, ..., | V |}   to  {1, ...,  k }   is sufficient. By definition,  F  is  k -perfect if for every subset  S  of  {1, ..., | V |}   where  
   
     
       
         
           | 
         
         S 
         
           | 
         
         = 
         k 
       
     
     {\displaystyle |S|=k} 
   , there exists a hash function  h  in  F  such that  h  :  S  → {1, ...,  k }   is perfect. In other words, there must exist a hash function in  F  that colors any given  k  vertices with  k  distinct colors.
 There are several approaches to construct such a  k -perfect hash family:
 
 The best explicit construction is by Moni Naor, Leonard J. Schulman, and Aravind Srinivasan, where a family of size  
   
     
       
         
           e 
           
             k 
           
         
         
           k 
           
             O 
             ( 
             log 
             ⁡ 
             k 
             ) 
           
         
         log 
         ⁡ 
         
           | 
         
         V 
         
           | 
         
       
     
     {\displaystyle e^{k}k^{O(\log k)}\log |V|} 
    can be obtained. This construction does not require the target subgraph to exist in the original subgraph finding problem. 
 Another explicit construction by Jeanette P. Schmidt and Alan Siegel yields a family of size  
   
     
       
         
           2 
           
             O 
             ( 
             k 
             ) 
           
         
         
           log 
           
             2 
           
         
         ⁡ 
         
           | 
         
         V 
         
           | 
         
       
     
     {\displaystyle 2^{O(k)}\log ^{2}|V|} 
   . 
 Another construction that appears in the original paper of Noga Alon et al. can be obtained by first building a  k -perfect family that maps  {1, ..., | V |}   to  {1, ...,  k 2 },  followed by building another  k -perfect family that maps  {1, ...,  k 2 }   to  {1, ...,  k }.  In the first step, it is possible to construct such a family with  2 n log  k  random bits that are almost  2log  k -wise independent, and the sample space needed for generating those random bits can be as small as  
   
     
       
         
           k 
           
             O 
             ( 
             1 
             ) 
           
         
         log 
         ⁡ 
         
           | 
         
         V 
         
           | 
         
       
     
     {\displaystyle k^{O(1)}\log |V|} 
   . In the second step, it has been shown by Jeanette P. Schmidt and Alan Siegel that the size of such  k -perfect family can be  
   
     
       
         
           2 
           
             O 
             ( 
             k 
             ) 
           
         
       
     
     {\displaystyle 2^{O(k)}} 
   . Consequently, by composing the  k -perfect families from both steps, a  k -perfect family of size  
   
     
       
         
           2 
           
             O 
             ( 
             k 
             ) 
           
         
         log 
         ⁡ 
         
           | 
         
         V 
         
           | 
         
       
     
     {\displaystyle 2^{O(k)}\log |V|} 
    that maps from  {1, ..., | V |}   to  {1, ...,  k }   can be obtained. In the case of derandomizing well-coloring, where each vertex on the subgraph is colored consecutively, a  k -perfect family of hash functions from  {1, ..., | V |}   to  {1, ...,  k !}   is needed. A sufficient  k -perfect family which maps from  {1, ..., | V |}   to  {1, ...,  k k }   can be constructed in a way similar to the approach 3 above (the first step). In particular, it is done by using  nk log  k  random bits that are almost  k log  k  independent, and the size of the resulting  k -perfect family will be  
   
     
       
         
           k 
           
             O 
             ( 
             k 
             ) 
           
         
         log 
         ⁡ 
         
           | 
         
         V 
         
           | 
         
       
     
     {\displaystyle k^{O(k)}\log |V|} 
   .
 The derandomization of color-coding method can be easily parallelized, yielding efficient NC algorithms.
 

 **Applications**

 Recently, color-coding has attracted much attention in the field of bioinformatics. One example is the detection of signaling pathways in protein-protein interaction (PPI) networks. Another example is to discover and to count the number of motifs in PPI networks. Studying both signaling pathways and motifs allows a deeper understanding of the similarities and differences of many biological functions, processes, and structures among organisms.
 Due to the huge amount of gene data that can be collected, searching for pathways or motifs can be highly time consuming. However, by exploiting the color-coding method, the motifs or signaling pathways with  
   
     
       
         k 
         = 
         O 
         ( 
         log 
         ⁡ 
         n 
         ) 
       
     
     {\displaystyle k=O(\log n)} 
    vertices in a network  G  with  n  vertices can be found very efficiently in polynomial time. Thus, this enables us to explore more complex or larger structures in PPI networks.
 

 