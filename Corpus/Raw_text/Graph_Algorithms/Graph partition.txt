***Graph partition***
In mathematics, a  graph partition  is the reduction of a graph to a smaller graph by partitioning its nodes into mutually exclusive groups. Edges of the original graph that cross between the groups will produce edges in the partitioned graph. If the number of resulting edges is small compared to the original graph, then the partitioned graph may be better suited for analysis and problem-solving than the original. Finding a partition that simplifies graph analysis is a hard problem, but one that has applications to scientific computing, VLSI circuit design, and task scheduling in multiprocessor computers, among others. Recently, the graph partition problem has gained importance due to its application for clustering and detection of cliques in social, pathological and biological networks. For a survey on recent trends in computational methods and applications see Buluc et al. (2013). 

 **Problem complexity**

 Typically, graph partition problems fall under the category of NP-hard problems. Solutions to these problems are generally derived using heuristics and approximation algorithms. However, uniform graph partitioning or a balanced graph partition problem can be shown to be NP-complete to approximate within any finite factor. Even for special graph classes such as trees and grids, no reasonable approximation algorithms exist, unless P=NP. Grids are a particularly interesting case since they model the graphs resulting from Finite Element Model (FEM) simulations. When not only the number of edges between the components is approximated, but also the sizes of the components, it can be shown that no reasonable fully polynomial algorithms exist for these graphs. 

 **Problem**

 Consider a graph  G  = ( V ,  E ), where  V  denotes the set of  n  vertices and  E  the set of edges. For a ( k , v ) balanced partition problem, the objective is to partition  G  into  k  components of at most size  v  · ( n / k ), while minimizing the capacity of the edges between separate components. Also, given  G  and an integer  k  > 1, partition  V  into  k  parts (subsets)  V 1 ,  V 2 , ...,  V k  such that the parts are disjoint and have equal size, and the number of edges with endpoints in different parts is minimized. Such partition problems have been discussed in literature as bicriteria-approximation or resource augmentation approaches. A common extension is to hypergraphs, where an edge can connect more than two vertices. A hyperedge is not cut if all vertices are in one partition, and cut exactly once otherwise, no matter how many vertices are on each side. This usage is common in electronic design automation.
 

 **Analysis**

 For a specific ( k , 1 +  ε ) balanced partition problem, we seek to find a minimum cost partition of  G  into  k  components with each component containing a maximum of (1 +  ε )·( n / k ) nodes. We compare the cost of this approximation algorithm to the cost of a ( k ,1) cut, wherein each of the  k  components must have the same size of ( n / k ) nodes each, thus being a more restricted problem. Thus,
 
 
   
     
       
         
           max 
           
             i 
           
         
         
           | 
         
         
           V 
           
             i 
           
         
         
           | 
         
         ≤ 
         ( 
         1 
         + 
         ε 
         ) 
         
           ⌈ 
           
             
               
                 
                   | 
                 
                 V 
                 
                   | 
                 
               
               k 
             
           
           ⌉ 
         
         . 
       
     
     {\displaystyle \max _{i}|V_{i}|\leq (1+\varepsilon )\left\lceil {\frac {|V|}{k}}\right\rceil .} 
   We already know that (2,1) cut is the minimum bisection problem and it is NP-complete. Next, we assess a 3-partition problem wherein  n  = 3 k , which is also bounded in polynomial time. Now, if we assume that we have a finite approximation algorithm for ( k , 1)-balanced partition, then, either the 3-partition instance can be solved using the balanced ( k ,1) partition in  G  or it cannot be solved. If the 3-partition instance can be solved, then ( k , 1)-balanced partitioning problem in  G  can be solved without cutting any edge. Otherwise, if the 3-partition instance cannot be solved, the optimum ( k , 1)-balanced partitioning in  G  will cut at least one edge. An approximation algorithm with a finite approximation factor has to differentiate between these two cases. Hence, it can solve the 3-partition problem which is a contradiction under the assumption that  P  =  NP . Thus, it is evident that ( k ,1)-balanced partitioning problem has no polynomial-time approximation algorithm with a finite approximation factor unless  P  =  NP . The planar separator theorem states that any  n -vertex planar graph can be partitioned into roughly equal parts by the removal of O( √ n ) vertices. This is not a partition in the sense described above, because the partition set consists of vertices rather than edges. However, the same result also implies that every planar graph of bounded degree has a balanced cut with O( √ n ) edges.
 

 **Graph partition methods**

 Since graph partitioning is a hard problem, practical solutions are based on heuristics.  There are two broad categories of methods, local and global. Well known local methods are the Kernighan–Lin algorithm, and Fiduccia-Mattheyses algorithms, which were the first effective 2-way cuts by local search strategies. Their major drawback is the arbitrary initial partitioning of the vertex set, which can affect the final solution quality.  Global approaches rely on properties of the entire graph and do not rely on an arbitrary initial partition.  The most common example is spectral partitioning, where a partition is derived from approximate eigenvectors of the adjacency matrix, or spectral clustering that groups graph vertices using the eigendecomposition of the graph Laplacian matrix.
 

 **Multi-level methods**

 A multi-level graph partitioning algorithm works by applying one or more stages.   Each stage reduces the size of
the graph by collapsing vertices and edges, partitions the smaller graph, then maps back and refines this partition of the original graph. A wide variety of partitioning and refinement methods can be applied within the overall multi-level scheme.  In many cases, this approach can give both fast execution times and very high quality results.  
One widely used example of such an approach is METIS, a graph partitioner, and hMETIS, the corresponding partitioner for hypergraphs.
An alternative approach originated from 
and implemented, e.g., in scikit-learn is spectral clustering with the partitioning determined from eigenvectors of the graph Laplacian matrix for the original graph computed by LOBPCG solver with multigrid preconditioning.
 

 **Spectral partitioning and spectral bisection**

 Given a graph  
   
     
       
         G 
         = 
         ( 
         V 
         , 
         E 
         ) 
       
     
     {\displaystyle G=(V,E)} 
    with adjacency matrix  
   
     
       
         A 
       
     
     {\displaystyle A} 
   , where an entry  
   
     
       
         
           A 
           
             i 
             j 
           
         
       
     
     {\displaystyle A_{ij}} 
    implies an edge between node  
   
     
       
         i 
       
     
     {\displaystyle i} 
    and  
   
     
       
         j 
       
     
     {\displaystyle j} 
   , and degree matrix  
   
     
       
         D 
       
     
     {\displaystyle D} 
   , which is a diagonal matrix, where each diagonal entry of a row  
   
     
       
         i 
       
     
     {\displaystyle i} 
   ,  
   
     
       
         
           d 
           
             i 
             i 
           
         
       
     
     {\displaystyle d_{ii}} 
   , represents the node degree of node  
   
     
       
         i 
       
     
     {\displaystyle i} 
   . The Laplacian matrix  
   
     
       
         L 
       
     
     {\displaystyle L} 
    is defined as  
   
     
       
         L 
         = 
         D 
         − 
         A 
       
     
     {\displaystyle L=D-A} 
   . Now, a ratio-cut partition for graph  
   
     
       
         G 
         = 
         ( 
         V 
         , 
         E 
         ) 
       
     
     {\displaystyle G=(V,E)} 
    is defined as a partition of  
   
     
       
         V 
       
     
     {\displaystyle V} 
    into disjoint  
   
     
       
         U 
       
     
     {\displaystyle U} 
   , and  
   
     
       
         W 
       
     
     {\displaystyle W} 
   , minimizing the ratio
 
 
   
     
       
         
           
             
               
                 | 
               
               E 
               ( 
               G 
               ) 
               ∩ 
               ( 
               U 
               × 
               W 
               ) 
               
                 | 
               
             
             
               
                 | 
               
               U 
               
                 | 
               
               ⋅ 
               
                 | 
               
               W 
               
                 | 
               
             
           
         
       
     
     {\displaystyle {\frac {|E(G)\cap (U\times W)|}{|U|\cdot |W|}}} 
   of the number of edges that actually cross this cut to the number of pairs of vertices that could support such edges. Spectral graph partitioning can be motivated by analogy with partitioning of a vibrating string or a mass-spring system.
 

 **Fiedler eigenvalue and eigenvector**

 In such a scenario, the second smallest eigenvalue ( 
   
     
       
         
           λ 
           
             2 
           
         
       
     
     {\displaystyle \lambda _{2}} 
   ) of  
   
     
       
         L 
       
     
     {\displaystyle L} 
   , yields a  lower bound  on the optimal cost ( 
   
     
       
         c 
       
     
     {\displaystyle c} 
   ) of ratio-cut partition with  
   
     
       
         c 
         ≥ 
         
           
             
               λ 
               
                 2 
               
             
             n 
           
         
       
     
     {\displaystyle c\geq {\frac {\lambda _{2}}{n}}} 
   . The eigenvector ( 
   
     
       
         
           V 
           
             2 
           
         
       
     
     {\displaystyle V_{2}} 
   ) corresponding to  
   
     
       
         
           λ 
           
             2 
           
         
       
     
     {\displaystyle \lambda _{2}} 
   , called the  Fiedler vector , bisects the graph into only two communities based on the  sign  of the corresponding vector entry . Division into a larger number of communities can be achieved by repeated  bisection  or by using  multiple eigenvectors  corresponding to the smallest eigenvalues. The examples in Figures 1,2 illustrate the spectral bisection approach.
 

 **Modularity and ratio-cut**

 Minimum cut partitioning however fails when the number of communities to be partitioned, or the partition sizes are unknown. For instance, optimizing the cut size for free group sizes puts all vertices in the same community. Additionally, cut size may be the wrong thing to minimize since a good division is not just one with small number of edges between communities.  This motivated the use of Modularity (Q) as a metric to optimize a balanced graph partition. The example in Figure 3 illustrates 2 instances of the same graph such that in  (a)  modularity (Q) is the partitioning metric and in  (b) , ratio-cut is the partitioning metric.
 

 **Conductance**

 Another objective function used for graph partitioning is Conductance which is the ratio between the number of cut edges and the volume of the smallest part. Conductance is related to electrical flows and random walks. The Cheeger bound guarantees that spectral bisection provides partitions with nearly optimal conductance. The quality of this approximation depends on the second smallest eigenvalue of the Laplacian λ 2 .
 

 **Other graph partition methods**

 Spin models have been used for clustering of multivariate data wherein similarities are translated into coupling strengths. The properties of ground state spin configuration can be directly interpreted as communities. Thus, a graph is partitioned to minimize the Hamiltonian of the partitioned graph. The Hamiltonian (H) is derived by assigning the following partition rewards and penalties.
 
 Reward internal edges between nodes of same group (same spin) 
 Penalize missing edges in same group 
 Penalize existing edges between different groups 
 Reward non-links between different groups. Additionally, Kernel-PCA-based Spectral clustering takes a form of least squares Support Vector Machine framework, and hence it becomes possible to project the data entries to a kernel induced feature space that has maximal variance, thus implying a high separation between the projected communities. Some methods express graph partitioning as a multi-criteria optimization problem which can be solved using local methods expressed in a game theoretic framework where each node makes a decision on the partition it chooses. For very large-scale distributed graphs classical partition methods might not apply (e.g., spectral partitioning, Metis) since they require full access to graph data in order to perform global operations. For such large-scale scenarios distributed graph partitioning is used to perform partitioning through asynchronous local operations only (e.g., Ja-be-ja, Stad algorithms based on Gossip protocol).
 

 **Software tools**

 Scikit-learn implements spectral clustering with the partitioning determined from eigenvectors of the graph Laplacian matrix for the original graph computed by ARPACK, or by LOBPCG solver with multigrid preconditioning. Chaco, due to Hendrickson and Leland, implements the multilevel approach outlined above and basic local search algorithms. 
Moreover, they implement spectral partitioning techniques.
 METIS is a graph partitioning family by Karypis and Kumar. Among this family, kMetis aims at greater partitioning speed, hMetis, applies to hypergraphs and aims at partition quality, and ParMetis is a parallel implementation of the Metis graph partitioning algorithm.
 PaToH is another hypergraph partitioner.
 KaHyPar is a multilevel hypergraph partitioning framework providing direct k-way and recursive bisection based partitioning algorithms. It instantiates the multilevel approach in its most extreme version, removing only a single vertex in every level of the hierarchy. By using this very fine grained  n -level approach combined with strong local search heuristics, it computes solutions of very high quality.
 Scotch is graph partitioning framework by Pellegrini. It uses recursive multilevel bisection and includes sequential as well as parallel partitioning techniques.
 Jostle is a sequential and parallel graph partitioning solver developed by Chris Walshaw. 
The commercialized version of this partitioner is known as NetWorks.
 Party implements the Bubble/shape-optimized framework and the Helpful Sets algorithm.
 The software packages DibaP and its MPI-parallel variant PDibaP by Meyerhenke implement the Bubble framework using diffusion; DibaP also uses AMG-based techniques for coarsening and solving linear systems arising in the diffusive approach.
 Sanders and Schulz released a graph partitioning package KaHIP (Karlsruhe High Quality Partitioning) that implements for example flow-based methods, more-localized local searches and several parallel and sequential meta-heuristics.
 The tools Parkway by Trifunovic and
Knottenbelt as well as Zoltan by Devine et al. focus on hypergraph
partitioning.
 List of free open-source frameworks: 
 

 **Bibliography**

 Bichot, Charles-Edmond; Siarry, Patrick (2011).  Graph Partitioning: Optimisation and Applications . ISTE – Wiley. p. 384. ISBN  978-1848212336 . 
 Feldmann, Andreas Emil (2012).  Balanced Partitioning of Grids and Related Graphs: A Theoretical Study of Data Distribution in Parallel Finite Element Model Simulations . Goettingen, Germany: Cuvillier Verlag. p. 218. ISBN  978-3954041251 .  An exhaustive analysis of the problem from a theoretical point of view. 
 Kernighan, B. W.; Lin, S. (1970). "An Efficient Heuristic Procedure for Partitioning Graphs"  (PDF) .  Bell System Technical Journal .  49  (2): 291–307. doi:10.1002/j.1538-7305.1970.tb01770.x.   One of the early fundamental works in the field.  However, performance is O(n 2 ), so it is no longer commonly used. 
 Fiduccia, C. M.; Mattheyses, R. M. (1982).  A Linear-Time Heuristic for Improving Network Partitions . Design Automation Conference.   A later variant that is linear time, very commonly used, both by itself and as part of multilevel partitioning, see below. 
 Karypis, G.; Kumar, V. (1999). "A Fast and High Quality Multilevel Scheme for Partitioning Irregular Graphs".  SIAM Journal on Scientific Computing .   Multi-level partitioning is the current state of the art. This paper also has good explanations of many other methods, and comparisons of the various methods on a wide variety of problems. 
 Karypis, G.; Aggarwal, R.; Kumar, V.; Shekhar, S. (March 1999). "Multilevel hypergraph partitioning: applications in VLSI domain".  IEEE Transactions on Very Large Scale Integration (VLSI) Systems .  7  (1): 69–79. CiteSeerX  10.1.1.553.2367 . doi:10.1109/92.748202.   Graph partitioning (and in particular, hypergraph partitioning) has many applications to IC design. 
 Kirkpatrick, S.; Gelatt, C. D., Jr.; Vecchi, M. P. (13 May 1983). "Optimization by Simulated Annealing".  Science .  220  (4598): 671–680. Bibcode:1983Sci...220..671K. CiteSeerX  10.1.1.123.7607 . doi:10.1126/science.220.4598.671. PMID 17813860.   Simulated annealing can be used as well. 
 Hagen, L.; Kahng, A. B. (September 1992). "New spectral methods for ratio cut partitioning and clustering".  IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems .  11  (9): 1074–1085. doi:10.1109/43.159993. .  There is a whole class of  spectral partitioning  methods, which use the Eigenvectors of the Laplacian of the connectivity graph.  You can see a demo of this, using Matlab. 