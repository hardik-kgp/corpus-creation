***Max-flow min-cut theorem***
In computer science and optimization theory, the  max-flow min-cut theorem  states that in a flow network, the maximum amount of flow passing from the  source  to the  sink  is equal to the total weight of the edges in the minimum cut, i.e. the smallest total weight of the edges which if removed would disconnect the source from the sink.
 The  max-flow min-cut theorem  is a special case of the duality theorem for linear programs and can be used to derive Menger's theorem and the Kőnig–Egerváry theorem. 

 **Definitions and statement**

 The theorem relates two quantities: the maximum flow through a network, and the minimum weight of a cut of the network. To state the theorem, each of these quantities must first be defined. 
Let  N  = ( V ,  E )  be a directed graph, where  V  denotes the set of vertices and  E  is the set of edges. Let  s  ∈  V  and  t  ∈  V  be the source and the sink of  N , respectively.  The  capacity  of an edge is a mapping  c  :  E  →  R + , denoted by  c uv  or  c ( u ,  v )  where  u , v  ∈  V . It represents the maximum amount of flow that can pass through an edge.
 

 **Flows**

 A  flow  is a mapping  f  :  E  →  R + , denoted by  f uv  or    f  ( u ,  v ) , subject to the following two constraints:
 
 Capacity Constraint:
 For every edge  (u,v ) in  E ,  
   
     
       
         
           f 
           
             u 
             v 
           
         
         ≤ 
         
           c 
           
             u 
             v 
           
         
       
     
     {\displaystyle f_{uv}\leq c_{uv}} 
   
 Conservation of Flows:
 For each vertex  v  apart from  s  and  t  (i.e. the source and sink, respectively), the equality  
   
     
       
         
           ∑ 
           
             { 
             u 
             : 
             ( 
             u 
             , 
             v 
             ) 
             ∈ 
             E 
             } 
           
         
         
           f 
           
             u 
             v 
           
         
         = 
         
           ∑ 
           
             { 
             w 
             : 
             ( 
             v 
             , 
             w 
             ) 
             ∈ 
             E 
             } 
           
         
         
           f 
           
             v 
             w 
           
         
       
     
     {\displaystyle \sum \nolimits _{\{u:(u,v)\in E\}}f_{uv}=\sum \nolimits _{\{w:(v,w)\in E\}}f_{vw}} 
    holds. A flow can be visualized as a physical flow of a fluid through the network, following the direction of each edge.   The capacity constraint then says that the volume flowing through each edge per unit time is less than or equal to the maximum capacity of the edge, and the conservation constraint says that the amount that flows into each vertex equals the amount flowing out of each vertex, apart from the source and sink vertices. 
 The  value  of a flow is defined by 
 
 
   
     
       
         
           | 
         
         f 
         
           | 
         
         = 
         
           ∑ 
           
             { 
             v 
             : 
             ( 
             s 
             , 
             v 
             ) 
             ∈ 
             E 
             } 
           
         
         
           f 
           
             s 
             v 
           
         
         = 
         
           ∑ 
           
             { 
             v 
             : 
             ( 
             v 
             , 
             t 
             ) 
             ∈ 
             E 
             } 
           
         
         
           f 
           
             v 
             t 
           
         
         , 
       
     
     {\displaystyle |f|=\sum \nolimits _{\{v:(s,v)\in E\}}f_{sv}=\sum \nolimits _{\{v:(v,t)\in E\}}f_{vt},} 
   where as above  s  is the source node and  t  is the sink node. In the fluid analogy, it represents the amount of fluid entering the network at the source node. Because of the conservation axiom for flows, this is the same as the amount of flow leaving the network at the sink node.  
 The maximum flow problem asks for the largest flow on a given network.  
 
 Maximum Flow Problem.  Maximize  |  f  | , that is, to route as much flow as possible from  s  to  t . 

 **Cuts**

 The other half of the max-flow min-cut theorem refers to a different aspect of a network: the collection of cuts.  An  s-t cut   C  = ( S ,  T )  is a partition of  V  such that  s  ∈  S  and  t  ∈  T .  That is,  s - t  cut is a division of the vertices of the network into two parts, with the source in one part and the sink in the other. The  cut-set   
   
     
       
         
           X 
           
             C 
           
         
       
     
     {\displaystyle X_{C}} 
    of a cut  C  is the set of edges that connect the source part of the cut to the sink part: 
 
 
   
     
       
         
           X 
           
             C 
           
         
         := 
         { 
         ( 
         u 
         , 
         v 
         ) 
         ∈ 
         E 
           
         : 
           
         u 
         ∈ 
         S 
         , 
         v 
         ∈ 
         T 
         } 
         = 
         ( 
         S 
         × 
         T 
         ) 
         ∩ 
         E 
         . 
       
     
     {\displaystyle X_{C}:=\{(u,v)\in E\ :\ u\in S,v\in T\}=(S\times T)\cap E.} 
   Thus, if all the edges in the cut-set of  C  are removed, then no positive flow is possible, because there is no path in the resulting graph from the source to the sink. 
 The  capacity  of an  s-t cut  is the total weight of its edges,  
 
 
   
     
       
         c 
         ( 
         S 
         , 
         T 
         ) 
         = 
         
           ∑ 
           
             ( 
             u 
             , 
             v 
             ) 
             ∈ 
             
               X 
               
                 C 
               
             
           
         
         
           c 
           
             u 
             v 
           
         
         = 
         
           ∑ 
           
             ( 
             i 
             , 
             j 
             ) 
             ∈ 
             E 
           
         
         
           c 
           
             i 
             j 
           
         
         
           d 
           
             i 
             j 
           
         
         , 
       
     
     {\displaystyle c(S,T)=\sum \nolimits _{(u,v)\in X_{C}}c_{uv}=\sum \nolimits _{(i,j)\in E}c_{ij}d_{ij},} 
   where  
   
     
       
         
           d 
           
             i 
             j 
           
         
         = 
         1 
       
     
     {\displaystyle d_{ij}=1} 
    if  
   
     
       
         i 
         ∈ 
         S 
       
     
     {\displaystyle i\in S} 
    and  
   
     
       
         j 
         ∈ 
         T 
       
     
     {\displaystyle j\in T} 
   ,  
   
     
       
         0 
       
     
     {\displaystyle 0} 
    otherwise.
 There are typically many cuts in a graph, but cuts with smaller weights are often more difficult to find. 
 
 Minimum s-t Cut Problem.  Minimize  c ( S ,  T ) , that is, determine  S  and  T  such that the capacity of the  S-T cut  is minimal. 

 **Main theorem**

 The main theorem links the maximum flow through a network with the minimum cut of the network.
 
 Max-flow min-cut theorem.  The maximum value of an s-t flow is equal to the minimum capacity over all s-t cuts. 

 **Linear program formulation**

 The max-flow problem and min-cut problem can be formulated as two primal-dual linear programs. 
 The max-flow LP is straightforward. The dual LP is obtained using the algorithm described in dual linear program. The resulting LP requires some explanation. The interpretation of the variables in the min-cut LP is:
 
   
     
       
         
           d 
           
             u 
             v 
           
         
         = 
         
           
             { 
             
               
                 
                   1 
                   , 
                 
                 
                   
                     if  
                   
                   u 
                   ∈ 
                   S 
                   
                      and  
                   
                   v 
                   ∈ 
                   T 
                   
                      (the edge  
                   
                   u 
                   v 
                   
                      is in the cut)  
                   
                 
               
               
                 
                   0 
                   , 
                 
                 
                   
                     otherwise 
                   
                 
               
             
             
           
         
       
     
     {\displaystyle d_{uv}={\begin{cases}1,&{\text{if }}u\in S{\text{ and }}v\in T{\text{ (the edge }}uv{\text{ is in the cut) }}\\0,&{\text{otherwise}}\end{cases}}} 
    
 
   
     
       
         
           z 
           
             u 
           
         
         = 
         
           
             { 
             
               
                 
                   1 
                   , 
                 
                 
                   
                     if  
                   
                   u 
                   ∈ 
                   S 
                 
               
               
                 
                   0 
                   , 
                 
                 
                   
                     otherwise 
                   
                 
               
             
             
           
         
       
     
     {\displaystyle z_{u}={\begin{cases}1,&{\text{if }}u\in S\\0,&{\text{otherwise}}\end{cases}}} 
   
 The minimization objective sums the capacity over all the edges that are contained in the cut.
 The constraints guarantee that the variables indeed represent a legal cut: 
 The constraints  
   
     
       
         
           d 
           
             u 
             v 
           
         
         − 
         
           z 
           
             u 
           
         
         + 
         
           z 
           
             v 
           
         
         ≥ 
         0 
       
     
     {\displaystyle d_{uv}-z_{u}+z_{v}\geq 0} 
   (equivalent to  
   
     
       
         
           d 
           
             u 
             v 
           
         
         ≥ 
         
           z 
           
             u 
           
         
         − 
         
           z 
           
             v 
           
         
       
     
     {\displaystyle d_{uv}\geq z_{u}-z_{v}} 
   ) guarantee that, For non-terminal nodes  u,v , if  u  is in  S  and  v  is in  T , then the edge ( u , v ) is counted in the cut ( 
   
     
       
         
           d 
           
             u 
             v 
           
         
         ≥ 
         1 
       
     
     {\displaystyle d_{uv}\geq 1} 
   ). 
 The constraints  
   
     
       
         
           d 
           
             s 
             v 
           
         
         + 
         
           z 
           
             v 
           
         
         ≥ 
         1 
       
     
     {\displaystyle d_{sv}+z_{v}\geq 1} 
   (equivalent to  
   
     
       
         
           d 
           
             s 
             v 
           
         
         ≥ 
         1 
         − 
         
           z 
           
             v 
           
         
       
     
     {\displaystyle d_{sv}\geq 1-z_{v}} 
   ) guarantee that, if  v  is in  T , then the edge  (s,v)  is counted in the cut (since  s  is by definition in  S ). 
 The constraints  
   
     
       
         
           d 
           
             u 
             t 
           
         
         − 
         
           z 
           
             u 
           
         
         ≥ 
         0 
       
     
     {\displaystyle d_{ut}-z_{u}\geq 0} 
   (equivalent to  
   
     
       
         
           d 
           
             u 
             t 
           
         
         ≥ 
         
           z 
           
             u 
           
         
       
     
     {\displaystyle d_{ut}\geq z_{u}} 
   ) guarantee that, if  u  is in  S , then the edge  (u,t)  is counted in the cut (since  t  is by definition in  T ). Note that, since this is a minimization problem, we do not have to guarantee that an edge is  not  in the cut - we only have to guarantee that each edge that should be in the cut, is summed in the objective function.
 The equality in the  max-flow min-cut theorem  follows from the strong duality theorem in linear programming, which states that if the primal program has an optimal solution,  x *, then the dual program also has an optimal solution,  y *, such that the optimal values formed by the two solutions are equal.
 

 **Example**

 The figure on the right is a network having a value of flow of 7.  The numerical annotation on each arrow, in the form  x / y , indicate the actual flow ( x ) and the maximum flow capacity ( y ).  The flows emanating from the source total seven (4+3=7), as do the flows into the sink (3+4=7).  
 The vertex in white and the vertices in grey form the subsets  S  and  T  of an s-t cut, whose cut-set contains the dashed edges. Since the capacity of the s-t cut is 7, which equals to the value of flow, the max-flow min-cut theorem tells us that the value of flow and the capacity of the s-t cut are both optimal in this network.
 Note that the flow through each of the dashed edges is at full capacity:  this is the 'bottleneck' of the system.  By contrast there is spare capacity in the right-hand part of the network.  In particular, the flow from node one to node two need not be equal to 1.  If there were no flow between nodes one and two, then the inputs to the sink would change to 4/4 and 3/5;  the total flow would still be seven (4+3=7).  On the other hand, if the flow from node one to node two were doubled to 2, then the inputs to the sink would change to 2/4 and 5/5;  the total flow would again remain at seven (2+5=7).
 

 **Application**

 **Cederbaum's maximum flow theorem**

 The maximum flow problem can be formulated as the maximization of the electrical current through a network composed of nonlinear resistive elements.   In this formulation, the limit of the current    I in    between the input terminals of the electrical network    as the input voltage  V in  approaches  
   
     
       
         ∞ 
       
     
     {\displaystyle \infty } 
   , is equal to the weight of the minimum-weight cut set.  
 
   
     
       
         
           lim 
           
             
               V 
               
                 i 
                 n 
               
             
             → 
             ∞ 
           
         
         ( 
         
           I 
           
             i 
             n 
           
         
         ) 
         = 
         
           min 
           
             
               X 
               
                 C 
               
             
           
         
         
           ∑ 
           
             ( 
             u 
             , 
             v 
             ) 
             ∈ 
             
               X 
               
                 C 
               
             
           
         
         
           c 
           
             u 
             v 
           
         
       
     
     {\displaystyle \lim _{V_{in}\rightarrow \infty }(I_{in})=\min _{X_{C}}\sum _{(u,v)\in X_{C}}c_{uv}} 
   
 

 **Generalized max-flow min-cut theorem**

 In addition to edge capacity, consider there is capacity at each vertex, that is, a mapping  c  :  V  →  R + , denoted by  c ( v ) , such that the flow    f    has to satisfy not only the capacity constraint and the conservation of flows, but also the vertex capacity constraint
 
 
   
     
       
         ∀ 
         v 
         ∈ 
         V 
         ∖ 
         { 
         s 
         , 
         t 
         } 
         : 
         
         
           ∑ 
           
             { 
             u 
             ∈ 
             V 
             ∣ 
             ( 
             u 
             , 
             v 
             ) 
             ∈ 
             E 
             } 
           
         
         
           f 
           
             u 
             v 
           
         
         ≤ 
         c 
         ( 
         v 
         ) 
         . 
       
     
     {\displaystyle \forall v\in V\setminus \{s,t\}:\qquad \sum \nolimits _{\{u\in V\mid (u,v)\in E\}}f_{uv}\leq c(v).} 
   In other words, the amount of  flow  passing through a vertex cannot exceed its capacity. Define an  s-t cut  to be the set of vertices and edges such that for any path from  s  to  t , the path contains a member of the cut. In this case, the  capacity of the cut  is the sum the capacity of each edge and vertex in it.
 In this new definition, the  generalized max-flow min-cut theorem  states that the maximum value of an s-t flow is equal to the minimum capacity of an s-t cut in the new sense.
 

 **Menger's theorem**

 In the undirected edge-disjoint paths problem, we are given an undirected graph  G  = ( V ,  E )  and two vertices  s  and  t , and we have to find the maximum number of edge-disjoint s-t paths in  G .
 The  Menger's theorem  states that the maximum number of edge-disjoint s-t paths in an undirected graph is equal to the minimum number of edges in an s-t cut-set.
 

 **Project selection problem**

 In the project selection problem, there are  n  projects and  m  machines. Each project  p i  yields revenue  r ( p i )  and each machine  q j  costs  c ( q j )  to purchase. Each project requires a number of machines and each machine can be shared by several projects. The problem is to determine which projects and machines should be selected and purchased respectively, so that the profit is maximized.
 Let  P  be the set of projects  not  selected and  Q  be the set of machines purchased, then the problem can be formulated as,
 
 
   
     
       
         max 
         { 
         g 
         } 
         = 
         
           ∑ 
           
             i 
           
         
         r 
         ( 
         
           p 
           
             i 
           
         
         ) 
         − 
         
           ∑ 
           
             
               p 
               
                 i 
               
             
             ∈ 
             P 
           
         
         r 
         ( 
         
           p 
           
             i 
           
         
         ) 
         − 
         
           ∑ 
           
             
               q 
               
                 j 
               
             
             ∈ 
             Q 
           
         
         c 
         ( 
         
           q 
           
             j 
           
         
         ) 
         . 
       
     
     {\displaystyle \max\{g\}=\sum _{i}r(p_{i})-\sum _{p_{i}\in P}r(p_{i})-\sum _{q_{j}\in Q}c(q_{j}).} 
   Since the first term does not depend on the choice of  P  and  Q , this maximization problem can be formulated as a minimization problem instead, that is,
 
 
   
     
       
         min 
         { 
         
           g 
           ′ 
         
         } 
         = 
         
           ∑ 
           
             
               p 
               
                 i 
               
             
             ∈ 
             P 
           
         
         r 
         ( 
         
           p 
           
             i 
           
         
         ) 
         + 
         
           ∑ 
           
             
               q 
               
                 j 
               
             
             ∈ 
             Q 
           
         
         c 
         ( 
         
           q 
           
             j 
           
         
         ) 
         . 
       
     
     {\displaystyle \min\{g'\}=\sum _{p_{i}\in P}r(p_{i})+\sum _{q_{j}\in Q}c(q_{j}).} 
   The above minimization problem can then be formulated as a minimum-cut problem by constructing a network, where the source is connected to the projects with capacity  r ( p i ) , and the sink is connected by the machines with capacity  c ( q j ) . An edge  ( p i ,  q j )  with  infinite  capacity is added if project  p i  requires machine  q j . The s-t cut-set represents the projects and machines in  P  and  Q  respectively. By the max-flow min-cut theorem, one can solve the problem as a maximum flow problem.
 The figure on the right gives a network formulation of the following project selection problem:
 
 The minimum capacity of an s-t cut is 250 and the sum of the revenue of each project is 450; therefore the maximum profit  g  is 450 − 250 = 200, by selecting projects  p 2  and  p 3 .
 The idea here is to 'flow' the project profits through the 'pipes' of the machine. If we cannot fill the pipe, the machine's return is less than its cost, and the min cut algorithm will find it cheaper to cut the project's profit edge instead of the machine's cost edge.
 

 **Image segmentation problem**

 In the image segmentation problem, there are  n  pixels. Each pixel  i  can be assigned a foreground value   f i  or a background value  b i . There is a penalty of  p ij  if pixels  i, j  are adjacent and have different assignments. The problem is to assign pixels to foreground or background such that the sum of their values minus the penalties is maximum.
 Let  P  be the set of pixels assigned to foreground and  Q  be the set of points assigned to background, then the problem can be formulated as,
 
 
   
     
       
         max 
         { 
         g 
         } 
         = 
         
           ∑ 
           
             i 
             ∈ 
             P 
           
         
         
           f 
           
             i 
           
         
         + 
         
           ∑ 
           
             i 
             ∈ 
             Q 
           
         
         
           b 
           
             i 
           
         
         − 
         
           ∑ 
           
             i 
             ∈ 
             P 
             , 
             j 
             ∈ 
             Q 
             ∨ 
             j 
             ∈ 
             P 
             , 
             i 
             ∈ 
             Q 
           
         
         
           p 
           
             i 
             j 
           
         
         . 
       
     
     {\displaystyle \max\{g\}=\sum _{i\in P}f_{i}+\sum _{i\in Q}b_{i}-\sum _{i\in P,j\in Q\lor j\in P,i\in Q}p_{ij}.} 
   This maximization problem can be formulated as a minimization problem instead, that is,
 
 
   
     
       
         min 
         { 
         
           g 
           ′ 
         
         } 
         = 
         
           ∑ 
           
             i 
             ∈ 
             P 
             , 
             j 
             ∈ 
             Q 
             ∨ 
             j 
             ∈ 
             P 
             , 
             i 
             ∈ 
             Q 
           
         
         
           p 
           
             i 
             j 
           
         
         . 
       
     
     {\displaystyle \min\{g'\}=\sum _{i\in P,j\in Q\lor j\in P,i\in Q}p_{ij}.} 
   The above minimization problem can be formulated as a minimum-cut problem by constructing a network where the source (orange node) is connected to all the pixels with capacity   f i , and the sink (purple node) is connected by all the pixels with capacity  b i . Two edges ( i, j ) and ( j, i ) with  p ij  capacity are added between two adjacent pixels. The s-t cut-set then represents the pixels assigned to the foreground in  P  and pixels assigned to background in  Q .
 

 **Proof**

 Let  G  = ( V ,  E )  be a network (directed graph) with  s  and  t  being the source and the sink of  G  respectively.
 Consider the flow    f    computed for  G  by Ford–Fulkerson algorithm. In the residual graph  ( G f  )  obtained for  G  (after the final flow assignment by Ford–Fulkerson algorithm), define two subsets of vertices as follows:
 
 A : the set of vertices reachable from  s  in  G f 
 A c : the set of remaining vertices i.e.  V − A Claim.   value(  f  ) =  c ( A ,  A c ) , where the  capacity  of an  s-t cut  is defined by 
 
 
   
     
       
         c 
         ( 
         S 
         , 
         T 
         ) 
         = 
         
           ∑ 
           
             ( 
             u 
             , 
             v 
             ) 
             ∈ 
             S 
             × 
             T 
           
         
         
           c 
           
             u 
             v 
           
         
       
     
     {\displaystyle c(S,T)=\sum \nolimits _{(u,v)\in S\times T}c_{uv}} 
   . Now, we know,  
   
     
       
         v 
         a 
         l 
         u 
         e 
         ( 
         f 
         ) 
         = 
         
           f 
           
             o 
             u 
             t 
           
         
         ( 
         A 
         ) 
         − 
         
           f 
           
             i 
             n 
           
         
         ( 
         A 
         ) 
       
     
     {\displaystyle value(f)=f_{out}(A)-f_{in}(A)} 
    for any subset of vertices,  A . Therefore, for  value(  f  ) =  c ( A ,  A c )  we need:
 
 All  outgoing edges  from the cut must be  fully saturated . 
 All  incoming edges  to the cut must have  zero flow . To prove the above claim we consider two cases:
 
 In  G , there exists an  outgoing edge   
   
     
       
         ( 
         x 
         , 
         y 
         ) 
         , 
         x 
         ∈ 
         A 
         , 
         y 
         ∈ 
         
           A 
           
             c 
           
         
       
     
     {\displaystyle (x,y),x\in A,y\in A^{c}} 
    such that it is not saturated, i.e.,    f  ( x ,  y ) <  c xy . This implies, that there exists a  forward edge  from  x  to  y  in  G f , therefore there exists a path from  s  to  y  in  G f , which is a contradiction. Hence, any outgoing edge  ( x ,  y )  is fully saturated. 
 In  G , there exists an  incoming edge   
   
     
       
         ( 
         y 
         , 
         x 
         ) 
         , 
         x 
         ∈ 
         A 
         , 
         y 
         ∈ 
         
           A 
           
             c 
           
         
       
     
     {\displaystyle (y,x),x\in A,y\in A^{c}} 
    such that it carries some non-zero flow, i.e.,    f  ( y ,  x ) > 0 . This implies, that there exists a  backward edge  from  x  to  y  in  G f , therefore there exists a path from  s  to  y  in  G f , which is again a contradiction. Hence, any incoming edge  ( y ,  x )  must have zero flow. Both of the above statements prove that the capacity of cut obtained in the above described manner is equal to the flow obtained in the network. Also, the flow was obtained by Ford-Fulkerson algorithm, so it is the max-flow of the network as well.
 
 Also, since  any flow in the network is always less than or equal to capacity of every cut possible in a network , the above described cut is also the min-cut which obtains the max-flow. 

 