***Maximum flow problem***
In optimization theory,  maximum flow problems  involve finding a feasible flow through a flow network that is maximum.
 The maximum flow problem can be seen as a special case of more complex network flow problems, such as the circulation problem. The maximum value of an s-t flow (i.e., flow from source s to sink t) is equal to the minimum capacity of an s-t cut (i.e., cut severing s from t) in the network, as stated in the max-flow min-cut theorem.
 

 **Definition**

 Let  
   
     
       
         N 
         = 
         ( 
         V 
         , 
         E 
         ) 
       
     
     {\displaystyle N=(V,E)} 
    be a network with  
   
     
       
         s 
         , 
         t 
         ∈ 
         V 
       
     
     {\displaystyle s,t\in V} 
    being the source and the sink of  
   
     
       
         N 
       
     
     {\displaystyle N} 
    respectively.
 
 The  capacity  of an edge is a mapping  
   
     
       
         c 
         : 
         E 
         → 
         
           
             R 
           
           
             + 
           
         
       
     
     {\displaystyle c:E\to \mathbb {R} ^{+}} 
   , denoted by  
   
     
       
         
           c 
           
             u 
             v 
           
         
       
     
     {\displaystyle c_{uv}} 
    or  
   
     
       
         c 
         ( 
         u 
         , 
         v 
         ) 
       
     
     {\displaystyle c(u,v)} 
   . It represents the maximum amount of flow that can pass through an edge. A  flow  is a mapping  
   
     
       
         f 
         : 
         E 
         → 
         
           
             R 
           
           
             + 
           
         
       
     
     {\displaystyle f:E\to \mathbb {R} ^{+}} 
   , denoted by  
   
     
       
         
           f 
           
             u 
             v 
           
         
       
     
     {\displaystyle f_{uv}} 
    or  
   
     
       
         f 
         ( 
         u 
         , 
         v 
         ) 
       
     
     {\displaystyle f(u,v)} 
   , subject to the following two constraints:
 
   
     
       
         
           f 
           
             u 
             v 
           
         
         ≤ 
         
           c 
           
             u 
             v 
           
         
       
     
     {\displaystyle f_{uv}\leq c_{uv}} 
   , for each  
   
     
       
         ( 
         u 
         , 
         v 
         ) 
         ∈ 
         E 
       
     
     {\displaystyle (u,v)\in E} 
    (capacity constraint: the flow of an edge cannot exceed its capacity); 
 
   
     
       
         
           ∑ 
           
             u 
             : 
             ( 
             u 
             , 
             v 
             ) 
             ∈ 
             E 
           
         
         
           f 
           
             u 
             v 
           
         
         = 
         
           ∑ 
           
             u 
             : 
             ( 
             v 
             , 
             u 
             ) 
             ∈ 
             E 
           
         
         
           f 
           
             v 
             u 
           
         
       
     
     {\displaystyle \sum _{u:(u,v)\in E}f_{uv}=\sum _{u:(v,u)\in E}f_{vu}} 
   , for each  
   
     
       
         v 
         ∈ 
         V 
         ∖ 
         { 
         s 
         , 
         t 
         } 
       
     
     {\displaystyle v\in V\setminus \{s,t\}} 
    (conservation of flows: the sum of the flows entering a node must equal the sum of the flows exiting a node, except for the source and the sink nodes). The  value of flow  is defined by  
   
     
       
         
           | 
         
         f 
         
           | 
         
         = 
         
           ∑ 
           
             v 
             : 
             ( 
             s 
             , 
             v 
             ) 
             ∈ 
             E 
           
         
         
           f 
           
             s 
             v 
           
         
       
     
     {\displaystyle |f|=\sum _{v:(s,v)\in E}f_{sv}} 
   , where  
   
     
       
         s 
       
     
     {\displaystyle s} 
    is the source of  
   
     
       
         N 
       
     
     {\displaystyle N} 
   . It represents the amount of flow passing from the source to the sink. The  maximum flow problem  is to maximize  
   
     
       
         
           | 
         
         f 
         
           | 
         
       
     
     {\displaystyle |f|} 
   , that is, to route as much flow as possible from  
   
     
       
         s 
       
     
     {\displaystyle s} 
    to  
   
     
       
         t 
       
     
     {\displaystyle t} 
   .
 

 **Solutions**

 The following table lists algorithms for solving the maximum flow problem.
 
 For a more extensive list, see. 

 **Integral flow theorem**

 The integral flow theorem states that
 
 If each edge in a flow network has integral capacity, then there exists an integral maximal flow. 

 **Application**

 **Multi-source multi-sink maximum flow problem**

 Given a network  
   
     
       
         N 
         = 
         ( 
         V 
         , 
         E 
         ) 
       
     
     {\displaystyle N=(V,E)} 
    with a set of sources  
   
     
       
         S 
         = 
         { 
         
           s 
           
             1 
           
         
         , 
         … 
         , 
         
           s 
           
             n 
           
         
         } 
       
     
     {\displaystyle S=\{s_{1},\ldots ,s_{n}\}} 
    and a set of sinks  
   
     
       
         T 
         = 
         { 
         
           t 
           
             1 
           
         
         , 
         … 
         , 
         
           t 
           
             m 
           
         
         } 
       
     
     {\displaystyle T=\{t_{1},\ldots ,t_{m}\}} 
    instead of only one source and one sink, we are to find the maximum flow across  
   
     
       
         N 
       
     
     {\displaystyle N} 
   . We can transform the multi-source multi-sink problem into a maximum flow problem by adding a  consolidated source  connecting to each vertex in  
   
     
       
         S 
       
     
     {\displaystyle S} 
    and a  consolidated sink  connected by each vertex in  
   
     
       
         T 
       
     
     {\displaystyle T} 
    (also known as  supersource  and  supersink ) with infinite capacity on each edge (See Fig. 4.1.1.).
 

 **Minimum path cover in directed acyclic graph**

 Given a directed acyclic graph  
   
     
       
         G 
         = 
         ( 
         V 
         , 
         E 
         ) 
       
     
     {\displaystyle G=(V,E)} 
   , we are to find the minimum number of vertex-disjoint paths to cover each vertex in  
   
     
       
         V 
       
     
     {\displaystyle V} 
   . We can construct a bipartite graph  
   
     
       
         
           G 
           ′ 
         
         = 
         ( 
         
           V 
           
             o 
             u 
             t 
           
         
         ∪ 
         
           V 
           
             i 
             n 
           
         
         , 
         
           E 
           ′ 
         
         ) 
       
     
     {\displaystyle G'=(V_{out}\cup V_{in},E')} 
    from  
   
     
       
         G 
       
     
     {\displaystyle G} 
   , where
 
 
   
     
       
         
           V 
           
             o 
             u 
             t 
           
         
         = 
         { 
         v 
         ∈ 
         V 
         : 
         v 
         
            has positive out-degree 
         
         } 
       
     
     {\displaystyle V_{out}=\{v\in V:v{\text{ has positive out-degree}}\}} 
   . 
 
   
     
       
         
           V 
           
             i 
             n 
           
         
         = 
         { 
         v 
         ∈ 
         V 
         : 
         v 
         
            has positive in-degree 
         
         } 
       
     
     {\displaystyle V_{in}=\{v\in V:v{\text{ has positive in-degree}}\}} 
   . 
 
   
     
       
         
           E 
           ′ 
         
         = 
         { 
         ( 
         u 
         , 
         v 
         ) 
         ∈ 
         
           V 
           
             o 
             u 
             t 
           
         
         × 
         
           V 
           
             i 
             n 
           
         
         : 
         ( 
         u 
         , 
         v 
         ) 
         ∈ 
         E 
         } 
       
     
     {\displaystyle E'=\{(u,v)\in V_{out}\times V_{in}:(u,v)\in E\}} 
   . Then it can be shown, via Kőnig's theorem, that  
   
     
       
         
           G 
           ′ 
         
       
     
     {\displaystyle G'} 
    has a matching of size  
   
     
       
         m 
       
     
     {\displaystyle m} 
    if and only if there exists  
   
     
       
         n 
         − 
         m 
       
     
     {\displaystyle n-m} 
    vertex-disjoint paths that cover each vertex in  
   
     
       
         G 
       
     
     {\displaystyle G} 
   , where  
   
     
       
         n 
       
     
     {\displaystyle n} 
    is the number of vertices in  
   
     
       
         G 
       
     
     {\displaystyle G} 
   . Therefore, the problem can be solved by finding the maximum cardinality matching in  
   
     
       
         
           G 
           ′ 
         
       
     
     {\displaystyle G'} 
    instead.
 

 **Maximum cardinality bipartite matching**

 Given a bipartite graph  
   
     
       
         G 
         = 
         ( 
         X 
         ∪ 
         Y 
         , 
         E 
         ) 
       
     
     {\displaystyle G=(X\cup Y,E)} 
   , we are to find a maximum cardinality matching in  
   
     
       
         G 
       
     
     {\displaystyle G} 
   , that is a matching that contains the largest possible number of edges. This problem can be transformed into a maximum flow problem by constructing a network  
   
     
       
         N 
         = 
         ( 
         X 
         ∪ 
         Y 
         ∪ 
         { 
         s 
         , 
         t 
         } 
         , 
         
           E 
           ′ 
         
         ) 
       
     
     {\displaystyle N=(X\cup Y\cup \{s,t\},E')} 
   , where
 
 
   
     
       
         
           E 
           ′ 
         
       
     
     {\displaystyle E'} 
    contains the edges in  
   
     
       
         G 
       
     
     {\displaystyle G} 
    directed from  
   
     
       
         X 
       
     
     {\displaystyle X} 
    to  
   
     
       
         Y 
       
     
     {\displaystyle Y} 
   . 
 
   
     
       
         ( 
         s 
         , 
         x 
         ) 
         ∈ 
         
           E 
           ′ 
         
       
     
     {\displaystyle (s,x)\in E'} 
    for each  
   
     
       
         x 
         ∈ 
         X 
       
     
     {\displaystyle x\in X} 
    and  
   
     
       
         ( 
         y 
         , 
         t 
         ) 
         ∈ 
         
           E 
           ′ 
         
       
     
     {\displaystyle (y,t)\in E'} 
    for each  
   
     
       
         y 
         ∈ 
         Y 
       
     
     {\displaystyle y\in Y} 
   . 
 
   
     
       
         c 
         ( 
         e 
         ) 
         = 
         1 
       
     
     {\displaystyle c(e)=1} 
    for each  
   
     
       
         e 
         ∈ 
         
           E 
           ′ 
         
       
     
     {\displaystyle e\in E'} 
    (See Fig. 4.3.1). Then the value of the maximum flow in  
   
     
       
         N 
       
     
     {\displaystyle N} 
    is equal to the size of the maximum matching in  
   
     
       
         G 
       
     
     {\displaystyle G} 
   .
 

 **Maximum flow with vertex capacities**

 Given a network  
   
     
       
         N 
         = 
         ( 
         V 
         , 
         E 
         ) 
       
     
     {\displaystyle N=(V,E)} 
   , in which there is capacity at each node in addition to edge capacity, that is, a mapping  
   
     
       
         c 
         : 
         V 
         ↦ 
         
           
             R 
           
           
             + 
           
         
       
     
     {\displaystyle c:V\mapsto \mathbb {R} ^{+}} 
   , denoted by  
   
     
       
         c 
         ( 
         v 
         ) 
       
     
     {\displaystyle c(v)} 
   , such that the flow  
   
     
       
         f 
       
     
     {\displaystyle f} 
    has to satisfy not only the capacity constraint and the conservation of flows, but also the vertex capacity constraint
 
 
   
     
       
         
           ∑ 
           
             i 
             ∈ 
             V 
           
         
         
           f 
           
             i 
             v 
           
         
         ≤ 
         c 
         ( 
         v 
         ) 
         
         ∀ 
         v 
         ∈ 
         V 
         ∖ 
         { 
         s 
         , 
         t 
         } 
       
     
     {\displaystyle \sum _{i\in V}f_{iv}\leq c(v)\qquad \forall v\in V\backslash \{s,t\}} 
   . 
 In other words, the amount of flow passing through a vertex cannot exceed its capacity. To find the maximum flow across  
   
     
       
         N 
       
     
     {\displaystyle N} 
   , we can transform the problem into the maximum flow problem in the original sense by expanding  
   
     
       
         N 
       
     
     {\displaystyle N} 
   . First, each  
   
     
       
         v 
         ∈ 
         V 
       
     
     {\displaystyle v\in V} 
    is replaced by  
   
     
       
         
           v 
           
             in 
           
         
       
     
     {\displaystyle v_{\text{in}}} 
    and  
   
     
       
         
           v 
           
             out 
           
         
       
     
     {\displaystyle v_{\text{out}}} 
   , where  
   
     
       
         
           v 
           
             in 
           
         
       
     
     {\displaystyle v_{\text{in}}} 
    is connected by edges going into  
   
     
       
         v 
       
     
     {\displaystyle v} 
    and  
   
     
       
         
           v 
           
             out 
           
         
       
     
     {\displaystyle v_{\text{out}}} 
    is connected to edges coming out from  
   
     
       
         v 
       
     
     {\displaystyle v} 
   , then assign capacity  
   
     
       
         c 
         ( 
         v 
         ) 
       
     
     {\displaystyle c(v)} 
    to the edge connecting  
   
     
       
         
           v 
           
             in 
           
         
       
     
     {\displaystyle v_{\text{in}}} 
    and  
   
     
       
         
           v 
           
             out 
           
         
       
     
     {\displaystyle v_{\text{out}}} 
    (see Fig. 4.4.1). In this expanded network, the vertex capacity constraint is removed and therefore the problem can be treated as the original maximum flow problem.
 

 **Maximum number of paths from s to t**

 Given a directed graph  
   
     
       
         G 
         = 
         ( 
         V 
         , 
         E 
         ) 
       
     
     {\displaystyle G=(V,E)} 
    and two vertices  
   
     
       
         s 
       
     
     {\displaystyle s} 
    and  
   
     
       
         t 
       
     
     {\displaystyle t} 
   , we are to find the maximum number of paths from  
   
     
       
         s 
       
     
     {\displaystyle s} 
    to  
   
     
       
         t 
       
     
     {\displaystyle t} 
   . This problem has several variants:
 1. The paths must be edge-disjoint. This problem can be transformed to a maximum flow problem by constructing a network  
   
     
       
         N 
         = 
         ( 
         V 
         , 
         E 
         ) 
       
     
     {\displaystyle N=(V,E)} 
    from  
   
     
       
         G 
       
     
     {\displaystyle G} 
   , with  
   
     
       
         s 
       
     
     {\displaystyle s} 
    and  
   
     
       
         t 
       
     
     {\displaystyle t} 
    being the source and the sink of  
   
     
       
         N 
       
     
     {\displaystyle N} 
    respectively, and assigning each edge a capacity of  
   
     
       
         1 
       
     
     {\displaystyle 1} 
   . In this network, the maximum flow is  
   
     
       
         k 
       
     
     {\displaystyle k} 
    iff there are  
   
     
       
         k 
       
     
     {\displaystyle k} 
    edge-disjoint paths.
 2. The paths must be independent, i.e., vertex-disjoint (except for  
   
     
       
         s 
       
     
     {\displaystyle s} 
    and  
   
     
       
         t 
       
     
     {\displaystyle t} 
   ). We can construct a network  
   
     
       
         N 
         = 
         ( 
         V 
         , 
         E 
         ) 
       
     
     {\displaystyle N=(V,E)} 
    from  
   
     
       
         G 
       
     
     {\displaystyle G} 
    with vertex capacities, where the capacities of all vertices and all edges are  
   
     
       
         1 
       
     
     {\displaystyle 1} 
   . Then the value of the maximum flow is equal to the maximum number of independent paths from  
   
     
       
         s 
       
     
     {\displaystyle s} 
    to  
   
     
       
         t 
       
     
     {\displaystyle t} 
   .
 3. In addition to the paths being edge-disjoint and/or vertex disjoint, the paths also have a length constraint: we count only paths whose length is exactly  
   
     
       
         k 
       
     
     {\displaystyle k} 
   , or at most  
   
     
       
         k 
       
     
     {\displaystyle k} 
   . Most variants of this problem are NP-complete, except for small values of  
   
     
       
         k 
       
     
     {\displaystyle k} 
   . 

 **Closure problem**

 A  closure  of a directed graph is a set of vertices with no outgoing edges. That is, the graph should have no edges that start within the closure and end outside the closure. The  closure problem  is the task of finding the maximum-weight or minimum-weight closure in a vertex-weighted directed graph. It may be solved in polynomial time using a reduction to the maximum flow problem.
 

 **Real world applications**

 **Baseball elimination**

 In the baseball elimination problem there are  n  teams competing in a league. At a specific stage of the league season,  w i  is the number of wins and  r i  is the number of games left to play for team  i  and  r ij  is the number of games left against team  j . A team is eliminated if it has no chance to finish the season in the first place. The task of the baseball elimination problem is to determine which teams are eliminated at each point during the season. Schwartz proposed a method which reduces this problem to maximum network flow. In this method a network is created to determine whether team  k  is eliminated.
 Let  G  = ( V ,  E ) be a network with  s , t  ∈  V  being the source and the sink respectively. One adds a game node { i , j } with  i  <  j  to  V , and connects each of them from  s  by an edge with capacity  r ij  – which represents the number of plays between these two teams. We also add a team node for each team and connect each game node { i , j } with two team nodes  i  and  j  to ensure one of them wins. One does not need to restrict the flow value on these edges. Finally, edges are made from team node  i  to the sink node  t  and the capacity of  w k + r k – w i  is set to prevent team  i  from winning more than  w k + r k .
Let  S  be the set of all teams participating in the league and let  
   
     
       
         
           r 
           ( 
           S 
           − 
           { 
           k 
           } 
           ) 
           = 
           
             ∑ 
             
               i 
               , 
               j 
               ∈ 
               { 
               S 
               − 
               { 
               k 
               } 
               } 
               , 
               i 
               < 
               j 
             
           
           
             r 
             
               i 
               j 
             
           
         
       
     
     {\displaystyle \scriptstyle r(S-\{k\})=\sum _{i,j\in \{S-\{k\}\},i<j}r_{ij}} 
   . In this method it is claimed team  k  is not eliminated if and only if a flow value of size  r ( S  − { k }) exists in network  G . In the mentioned article it is proved that this flow value is the maximum flow value from  s  to  t .
 

 **Airline scheduling**

 In the airline industry a major problem is the scheduling of the flight crews. The airline scheduling problem can be considered as an application of extended maximum network flow. The input of this problem is a set of flights  F  which contains the information about where and when each flight departs and arrives. In one version of airline scheduling the goal is to produce a feasible schedule with at most  k  crews.
 In order to solve this problem one uses a variation of the circulation problem called bounded circulation which is the generalization of network flow problems, with the added constraint of a lower bound on edge flows.
 Let  G  = ( V ,  E ) be a network with  s , t  ∈  V  as the source and the sink nodes. For the source and destination of every flight  i , one adds two nodes to  V , node  s i  as the source and node  d i  as the destination node of flight  i . One also adds the following edges to  E :
 
 An edge with capacity [0, 1] between  s  and each  s i . 
 An edge with capacity [0, 1] between each  d i  and  t . 
 An edge with capacity [1, 1] between each pair of  s i  and  d i . 
 An edge with capacity [0, 1] between each  d i  and  s j , if source  s j  is reachable with a reasonable amount of time and cost from the destination of flight  i . 
 An edge with capacity [0, ∞] between  s  and  t . In the mentioned method, it is claimed and proved that finding a flow value of  k  in  G  between  s  and  t  is equal to finding a feasible schedule for flight set  F  with at most  k  crews. Another version of airline scheduling is finding the minimum needed crews to perform all the flights. In order to find an answer to this problem, a bipartite graph  G'  = ( A  ∪  B ,  E )  is created where each flight has a copy in set  A  and set  B . If the same plane can perform flight  j  after flight  i ,  i ∈ A  is connected to  j ∈ B . A matching in  G'  induces a schedule for  F  and obviously maximum bipartite matching in this graph produces an airline schedule with minimum number of crews. As it is mentioned in the Application part of this article, the maximum cardinality bipartite matching is an application of maximum flow problem.
 

 **Circulation–demand problem**

 There are some factories that produce goods and some villages where the goods have to be delivered. They are connected by a networks of roads with each road having a capacity  c  for maximum goods that can flow through it. The problem is to find if there is a circulation that satisfies the demand.
This problem can be transformed into a maximum-flow problem.
 
 Add a source node  s  and add edges from it to every factory node  f i  with capacity  p i  where  p i  is the production rate of factory  f i . 
 Add a sink node  t  and add edges from all villages  v i  to  t  with capacity  d i  where  d i  is the demand rate of village  v i . Let  G  = ( V ,  E ) be this new network. There exists a circulation that satisfies the demand if and only if :
 
 Maximum flow value( G )   
   
     
       
         = 
         
           ∑ 
           
             i 
             ∈ 
             v 
           
         
         
           d 
           
             i 
           
         
       
     
     {\displaystyle =\sum _{i\in v}d_{i}} 
   . If there exists a circulation, looking at the max-flow solution would give the answer as to how much goods have to be sent on a particular road for satisfying the demands.
 The problem can be extended by adding a lower bound on the flow on some edges. 

 **Extensions**

 1. In the  minimum-cost flow problem , each edge ( u ,v) also has a  cost-coefficient   a uv  in addition to its capacity. If the flow through the edge is  f uv , then the total cost is  a uv f uv .   It is required to find a flow of a given size  d , with the smallest cost. In most variants, the cost-coefficients may be either positive or negative. There are various polynomial-time algorithms for this problem.
 2. The maximum-flow problem can be augmented by  disjunctive constraints : a  negative disjunctive constraint  says that a certain pair of edges cannot simultaneously have a nonzero flow; a  positive disjunctive constraints  says that, in a certain pair of edges, at least one must have a nonzero flow. With negative constraints, the problem becomes strongly NP-hard even for simple networks. With positive constraints, the problem is polynomial if fractional flows are allowed, but may be strongly NP-hard when the flows must be integral. 

 