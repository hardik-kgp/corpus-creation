***Minimum-cost flow problem***
The  minimum-cost flow problem  ( MCFP ) is an optimization and decision problem to find the cheapest possible way of sending a certain amount of flow through a flow network. A typical application of this problem involves finding the best delivery route from a factory to a warehouse where the road network has some capacity and cost associated. The minimum cost flow problem is one of the most fundamental among all flow and circulation problems because most other such problems can be cast as a minimum cost flow problem and also that it can be solved efficiently using the network simplex algorithm.
 

 **Definition**

 A flow network is a directed graph  
   
     
       
         G 
         = 
         ( 
         V 
         , 
         E 
         ) 
       
     
     {\displaystyle G=(V,E)} 
    with a source vertex  
   
     
       
         s 
         ∈ 
         V 
       
     
     {\displaystyle s\in V} 
    and a sink vertex  
   
     
       
         t 
         ∈ 
         V 
       
     
     {\displaystyle t\in V} 
   , where each edge  
   
     
       
         ( 
         u 
         , 
         v 
         ) 
         ∈ 
         E 
       
     
     {\displaystyle (u,v)\in E} 
    has capacity  
   
     
       
         c 
         ( 
         u 
         , 
         v 
         ) 
         > 
         0 
       
     
     {\displaystyle c(u,v)>0} 
   , flow  
   
     
       
         f 
         ( 
         u 
         , 
         v 
         ) 
         ≥ 
         0 
       
     
     {\displaystyle f(u,v)\geq 0} 
    and cost  
   
     
       
         a 
         ( 
         u 
         , 
         v 
         ) 
       
     
     {\displaystyle a(u,v)} 
   , with most minimum-cost flow algorithms supporting edges with negative costs. The cost of sending this flow along an edge  
   
     
       
         ( 
         u 
         , 
         v 
         ) 
       
     
     {\displaystyle (u,v)} 
    is  
   
     
       
         f 
         ( 
         u 
         , 
         v 
         ) 
         ⋅ 
         a 
         ( 
         u 
         , 
         v 
         ) 
       
     
     {\displaystyle f(u,v)\cdot a(u,v)} 
   . The problem requires an amount of flow  
   
     
       
         d 
       
     
     {\displaystyle d} 
    to be sent from source  
   
     
       
         s 
       
     
     {\displaystyle s} 
    to sink  
   
     
       
         t 
       
     
     {\displaystyle t} 
   .
 The definition of the problem is to minimize the  total cost  of the flow over all edges:
 
 
   
     
       
         
           ∑ 
           
             ( 
             u 
             , 
             v 
             ) 
             ∈ 
             E 
           
         
         a 
         ( 
         u 
         , 
         v 
         ) 
         ⋅ 
         f 
         ( 
         u 
         , 
         v 
         ) 
       
     
     {\displaystyle \sum _{(u,v)\in E}a(u,v)\cdot f(u,v)} 
   with the constraints
 
 

 **Relation to other problems**

 A variation of this problem is to find a flow which is maximum, but has the lowest cost among the maximum flow solutions. This could be called a minimum-cost maximum-flow problem and is useful for finding minimum cost maximum matchings.
 With some solutions, finding the minimum cost maximum flow instead is straightforward. If not, one can find the maximum flow by performing a binary search on  
   
     
       
         d 
       
     
     {\displaystyle d} 
   .
 A related problem is the minimum cost circulation problem, which can be used for solving minimum cost flow. This is achieved by setting the lower bound on all edges to zero, and then making an extra edge from the sink  
   
     
       
         t 
       
     
     {\displaystyle t} 
    to the source  
   
     
       
         s 
       
     
     {\displaystyle s} 
   , with capacity  
   
     
       
         c 
         ( 
         t 
         , 
         s 
         ) 
         = 
         d 
       
     
     {\displaystyle c(t,s)=d} 
    and lower bound  
   
     
       
         l 
         ( 
         t 
         , 
         s 
         ) 
         = 
         d 
       
     
     {\displaystyle l(t,s)=d} 
   , forcing the total flow from  
   
     
       
         s 
       
     
     {\displaystyle s} 
    to  
   
     
       
         t 
       
     
     {\displaystyle t} 
    to also be  
   
     
       
         d 
       
     
     {\displaystyle d} 
   .
 The problem can be specialized into two other problems：
 
 if the capacity constraint is removed, the problem is reduced to the shortest path problem, 
 if the costs are all set equal to zero, the problem is reduced to the maximum flow problem. 

 **Solutions**

 The minimum cost flow problem can be solved by linear programming, since we optimize a linear function, and all constraints are linear.
 Apart from that, many combinatorial algorithms exist, for a comprehensive survey, see  [1] . Some of them are generalizations of maximum flow algorithms, others use entirely different approaches.
 Well-known fundamental algorithms (they have many variations):
 
 Cycle canceling : a general primal method. [2] 
 Minimum mean cycle canceling : a simple strongly polynomial algorithm. [3] 
 Successive shortest path  and  capacity scaling : dual methods, which can be viewed as the generalizations of the Ford–Fulkerson algorithm. [4] 
 Cost scaling : a primal-dual approach, which can be viewed as the generalization of the push-relabel algorithm. [5] 
 Network simplex algorithm : a specialized version of the linear programming simplex method. [6] 
 Out-of-kilter algorithm  by D. R. Fulkerson 

 **Application**

 **Minimum weight bipartite matching**

 Given a bipartite graph  G  = ( A  ∪  B ,  E ), the goal is to find the maximum cardinality matching in  G  that has minimum cost. Let  w :  E  →  R  be a weight function on the edges of  E . The minimum weight bipartite matching problem or assignment problem is to find a 
perfect matching  M  ⊆  E  whose total weight is minimized. The idea is to reduce this problem to a network flow problem.
 Let  G′  = ( V′  =  A  ∪  B ,  E′  =  E ). Assign the capacity of all the edges in  E′  to 1. Add a source vertex  s  and connect it to all the vertices in  A′  and add a sink 
vertex  t  and connect all vertices inside group  B′  to this vertex. The capacity of all the new edges is 1 and their costs is 0. It is proved that there is minimum weight perfect bipartite matching in  G  if and only if there a minimum cost flow in  G′ .  [7] 

 