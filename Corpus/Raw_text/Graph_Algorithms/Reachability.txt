***Reachability***
In graph theory,  reachability  refers to the ability to get from one vertex to another within a graph. A vertex  
   
     
       
         s 
       
     
     {\displaystyle s} 
    can reach a vertex  
   
     
       
         t 
       
     
     {\displaystyle t} 
    (and  
   
     
       
         t 
       
     
     {\displaystyle t} 
    is reachable from  
   
     
       
         s 
       
     
     {\displaystyle s} 
   ) if there exists a sequence of adjacent vertices (i.e. a path) which starts with  
   
     
       
         s 
       
     
     {\displaystyle s} 
    and ends with  
   
     
       
         t 
       
     
     {\displaystyle t} 
   .
 In an undirected graph, reachability between all pairs of vertices can be determined by identifying the connected components of the graph. Any pair of vertices in such a graph can reach each other if and only if they belong to the same connected component; therefore, in such a graph, reachability is symmetric ( 
   
     
       
         s 
       
     
     {\displaystyle s} 
    reaches  
   
     
       
         t 
       
     
     {\displaystyle t} 
    iff  
   
     
       
         t 
       
     
     {\displaystyle t} 
    reaches  
   
     
       
         s 
       
     
     {\displaystyle s} 
   ). The connected components of an undirected graph can be identified in linear time. The remainder of this article focuses on the more difficult problem of determining pairwise reachability in a directed graph (which, incidentally, need not be symmetric).
 

 **Definition**

 For a directed graph  
   
     
       
         G 
         = 
         ( 
         V 
         , 
         E 
         ) 
       
     
     {\displaystyle G=(V,E)} 
   , with vertex set  
   
     
       
         V 
       
     
     {\displaystyle V} 
    and edge set  
   
     
       
         E 
       
     
     {\displaystyle E} 
   , the reachability relation of  
   
     
       
         G 
       
     
     {\displaystyle G} 
    is the transitive closure of  
   
     
       
         E 
       
     
     {\displaystyle E} 
   , which is to say the set of all ordered pairs  
   
     
       
         ( 
         s 
         , 
         t 
         ) 
       
     
     {\displaystyle (s,t)} 
    of vertices in  
   
     
       
         V 
       
     
     {\displaystyle V} 
    for which there exists a sequence of vertices  
   
     
       
         
           v 
           
             0 
           
         
         = 
         s 
         , 
         
           v 
           
             1 
           
         
         , 
         
           v 
           
             2 
           
         
         , 
         . 
         . 
         . 
         , 
         
           v 
           
             k 
           
         
         = 
         t 
       
     
     {\displaystyle v_{0}=s,v_{1},v_{2},...,v_{k}=t} 
    such that the edge  
   
     
       
         ( 
         
           v 
           
             i 
             − 
             1 
           
         
         , 
         
           v 
           
             i 
           
         
         ) 
       
     
     {\displaystyle (v_{i-1},v_{i})} 
    is in  
   
     
       
         E 
       
     
     {\displaystyle E} 
    for all  
   
     
       
         1 
         ≤ 
         i 
         ≤ 
         k 
       
     
     {\displaystyle 1\leq i\leq k} 
   . If  
   
     
       
         G 
       
     
     {\displaystyle G} 
    is acyclic, then its reachability relation is a partial order; any partial order may be defined in this way, for instance as the reachability relation of its transitive reduction. A noteworthy consequence of this is that since partial orders are anti-symmetric, if  
   
     
       
         s 
       
     
     {\displaystyle s} 
    can reach  
   
     
       
         t 
       
     
     {\displaystyle t} 
   , then we know that  
   
     
       
         t 
       
     
     {\displaystyle t} 
     cannot  reach  
   
     
       
         s 
       
     
     {\displaystyle s} 
   . Intuitively, if we could travel from  
   
     
       
         s 
       
     
     {\displaystyle s} 
    to  
   
     
       
         t 
       
     
     {\displaystyle t} 
    and back to  
   
     
       
         s 
       
     
     {\displaystyle s} 
   , then  
   
     
       
         G 
       
     
     {\displaystyle G} 
    would contain a cycle, contradicting that it is acyclic.
If  
   
     
       
         G 
       
     
     {\displaystyle G} 
    is directed but  not  acyclic (i.e. it contains at least one cycle), then its reachability relation will correspond to a preorder instead of a partial order. 

 **Algorithms**

 Algorithms for determining reachability fall into two classes: those that require preprocessing and those that do not.
 If you have only one (or a few) queries to make, it may be more efficient to forgo the use of more complex data structures and compute the reachability of the desired pair directly.  This can be accomplished in linear time using algorithms such as breadth first search or iterative deepening depth-first search. If you will be making many queries, then a more sophisticated method may be used; the exact choice of method depends on the nature of the graph being analysed. In exchange for preprocessing time and some extra storage space, we can create a data structure which can then answer reachability queries on any pair of vertices in as low as  
   
     
       
         O 
         ( 
         1 
         ) 
       
     
     {\displaystyle O(1)} 
    time.  Three different algorithms and data structures for three different, increasingly specialized situations are outlined below.
 

 **Floyd-Warshall Algorithm**

 The Floyd–Warshall algorithm can be used to compute the transitive closure of any directed graph, which gives rise to the reachability relation as in the definition, above.
 The algorithm requires  
   
     
       
         O 
         ( 
         
           | 
         
         V 
         
           
             | 
           
           
             3 
           
         
         ) 
       
     
     {\displaystyle O(|V|^{3})} 
    time and  
   
     
       
         O 
         ( 
         
           | 
         
         V 
         
           
             | 
           
           
             2 
           
         
         ) 
       
     
     {\displaystyle O(|V|^{2})} 
    space in the worst case. This algorithm is not solely interested in reachability as it also computes the shortest path distance between all pairs of vertices. For graphs containing negative cycles, shortest paths may be undefined, but reachability between pairs can still be noted.
 

 **Thorup's Algorithm**

 For planar digraphs, a much faster method is available, as described by Mikkel Thorup in 2004. This method can answer reachability queries on a planar graph in  
   
     
       
         O 
         ( 
         1 
         ) 
       
     
     {\displaystyle O(1)} 
    time after spending  
   
     
       
         O 
         ( 
         n 
         log 
         ⁡ 
         
           n 
         
         ) 
       
     
     {\displaystyle O(n\log {n})} 
    preprocessing time to create a data structure of  
   
     
       
         O 
         ( 
         n 
         log 
         ⁡ 
         
           n 
         
         ) 
       
     
     {\displaystyle O(n\log {n})} 
    size. This algorithm can also supply approximate shortest path distances, as well as route information.
 The overall approach is to associate with each vertex a relatively small set of so-called separator paths such that any path from a vertex  
   
     
       
         v 
       
     
     {\displaystyle v} 
    to any other vertex  
   
     
       
         w 
       
     
     {\displaystyle w} 
    must go through at least one of the separators associated with  
   
     
       
         v 
       
     
     {\displaystyle v} 
    or  
   
     
       
         w 
       
     
     {\displaystyle w} 
   .  An outline of the reachability related sections follows.
 Given a graph  
   
     
       
         G 
       
     
     {\displaystyle G} 
   , the algorithm begins by organizing the vertices into layers starting from an arbitrary vertex  
   
     
       
         
           v 
           
             0 
           
         
       
     
     {\displaystyle v_{0}} 
   . The layers are built in alternating steps by first considering all vertices reachable  from  the previous step (starting with just  
   
     
       
         
           v 
           
             0 
           
         
       
     
     {\displaystyle v_{0}} 
   ) and then all vertices which reach  to  the previous step until all vertices have been assigned to a layer. By construction of the layers, every vertex appears at most two layers, and every directed path, or dipath, in  
   
     
       
         G 
       
     
     {\displaystyle G} 
    is contained within two adjacent layers  
   
     
       
         
           L 
           
             i 
           
         
       
     
     {\displaystyle L_{i}} 
    and  
   
     
       
         
           L 
           
             i 
             + 
             1 
           
         
       
     
     {\displaystyle L_{i+1}} 
   . Let  
   
     
       
         k 
       
     
     {\displaystyle k} 
    be the last layer created, that is, the lowest value for  
   
     
       
         k 
       
     
     {\displaystyle k} 
    such that  
   
     
       
         
           ⋃ 
           
             i 
             = 
             0 
           
           
             k 
           
         
         
           L 
           
             i 
           
         
         = 
         V 
       
     
     {\displaystyle \bigcup _{i=0}^{k}L_{i}=V} 
   .
 The graph is then re-expressed as a series of digraphs  
   
     
       
         
           G 
           
             0 
           
         
         , 
         
           G 
           
             1 
           
         
         , 
         … 
         , 
         
           G 
           
             k 
             − 
             1 
           
         
       
     
     {\displaystyle G_{0},G_{1},\ldots ,G_{k-1}} 
    where each  
   
     
       
         
           G 
           
             i 
           
         
         = 
         
           r 
           
             i 
           
         
         ∪ 
         
           L 
           
             i 
           
         
         ∪ 
         
           L 
           
             i 
             + 
             1 
           
         
       
     
     {\displaystyle G_{i}=r_{i}\cup L_{i}\cup L_{i+1}} 
    and where  
   
     
       
         
           r 
           
             i 
           
         
       
     
     {\displaystyle r_{i}} 
    is the contraction of all previous levels  
   
     
       
         
           L 
           
             0 
           
         
         … 
         
           L 
           
             i 
             − 
             1 
           
         
       
     
     {\displaystyle L_{0}\ldots L_{i-1}} 
    into a single vertex. Because every dipath appears in at most two consecutive layers, and because
each  
   
     
       
         
           G 
           
             i 
           
         
       
     
     {\displaystyle G_{i}} 
    is formed by two consecutive layers, every dipath in  
   
     
       
         G 
       
     
     {\displaystyle G} 
    appears in its entirety in at least one  
   
     
       
         
           G 
           
             i 
           
         
       
     
     {\displaystyle G_{i}} 
    (and no more than 2 consecutive such graphs)
 For each  
   
     
       
         
           G 
           
             i 
           
         
       
     
     {\displaystyle G_{i}} 
   , three separators are identified which, when removed, break the graph into three components which each contain at most  
   
     
       
         1 
         
           / 
         
         2 
       
     
     {\displaystyle 1/2} 
    the vertices of the original. As  
   
     
       
         
           G 
           
             i 
           
         
       
     
     {\displaystyle G_{i}} 
    is built from two layers of opposed dipaths, each separator may consist of up to 2 dipaths, for a total of up to 6 dipaths over all of the separators. Let  
   
     
       
         S 
       
     
     {\displaystyle S} 
    be this set of dipaths. The proof that such separators can always be found is related to the Planar Separator Theorem of Lipton and Tarjan, and these separators can be located in linear time.
 For each  
   
     
       
         Q 
         ∈ 
         S 
       
     
     {\displaystyle Q\in S} 
   , the directed nature of  
   
     
       
         Q 
       
     
     {\displaystyle Q} 
    provides for a natural indexing of its vertices from the start to the end of the path. For each vertex  
   
     
       
         v 
       
     
     {\displaystyle v} 
    in  
   
     
       
         
           G 
           
             i 
           
         
       
     
     {\displaystyle G_{i}} 
   , we locate the first vertex in  
   
     
       
         Q 
       
     
     {\displaystyle Q} 
    reachable by  
   
     
       
         v 
       
     
     {\displaystyle v} 
   , and the last vertex in  
   
     
       
         Q 
       
     
     {\displaystyle Q} 
    that reaches to  
   
     
       
         v 
       
     
     {\displaystyle v} 
   . That is, we are looking at how early into  
   
     
       
         Q 
       
     
     {\displaystyle Q} 
    we can get from  
   
     
       
         v 
       
     
     {\displaystyle v} 
   , and how far
we can stay in  
   
     
       
         Q 
       
     
     {\displaystyle Q} 
    and still get back to  
   
     
       
         v 
       
     
     {\displaystyle v} 
   . This information is stored with
each  
   
     
       
         v 
       
     
     {\displaystyle v} 
   . Then for any pair of vertices  
   
     
       
         u 
       
     
     {\displaystyle u} 
    and  
   
     
       
         w 
       
     
     {\displaystyle w} 
   ,  
   
     
       
         u 
       
     
     {\displaystyle u} 
    can reach  
   
     
       
         w 
       
     
     {\displaystyle w} 
     via   
   
     
       
         Q 
       
     
     {\displaystyle Q} 
    if  
   
     
       
         u 
       
     
     {\displaystyle u} 
    connects to  
   
     
       
         Q 
       
     
     {\displaystyle Q} 
    earlier than  
   
     
       
         w 
       
     
     {\displaystyle w} 
    connects from  
   
     
       
         Q 
       
     
     {\displaystyle Q} 
   .
 Every vertex is labelled as above for each step of the recursion which builds
 
   
     
       
         
           G 
           
             0 
           
         
         … 
         , 
         
           G 
           
             k 
           
         
       
     
     {\displaystyle G_{0}\ldots ,G_{k}} 
   . As this recursion has logarithmic depth, a total of
 
   
     
       
         O 
         ( 
         log 
         ⁡ 
         
           n 
         
         ) 
       
     
     {\displaystyle O(\log {n})} 
    extra information is stored per vertex. From this point, a
logarithmic time query for reachability is as simple as looking over each pair
of labels for a common, suitable  
   
     
       
         Q 
       
     
     {\displaystyle Q} 
   . The original paper then works to tune the
query time down to  
   
     
       
         O 
         ( 
         1 
         ) 
       
     
     {\displaystyle O(1)} 
   .
 In summarizing the analysis of this method, first consider that the layering
approach partitions the vertices so that each vertex is considered only  
   
     
       
         O 
         ( 
         1 
         ) 
       
     
     {\displaystyle O(1)} 
   
times. The separator phase of the algorithm breaks the graph into components
which are at most  
   
     
       
         1 
         
           / 
         
         2 
       
     
     {\displaystyle 1/2} 
    the size of the original graph, resulting in a
logarithmic recursion depth.  At each level of the recursion, only linear work
is needed to identify the separators as well as the connections possible between
vertices. The overall result is  
   
     
       
         O 
         ( 
         n 
         log 
         ⁡ 
         n 
         ) 
       
     
     {\displaystyle O(n\log n)} 
    preprocessing time with only
 
   
     
       
         O 
         ( 
         log 
         ⁡ 
         
           n 
         
         ) 
       
     
     {\displaystyle O(\log {n})} 
    additional information stored for each vertex.
 

 **Kameda's Algorithm**

 An even faster method for pre-processing, due to T. Kameda in 1975,
can be used if the graph is planar, acyclic, and also exhibits the following additional properties: all 0-indegree and all 0-outdegree vertices appear on the same face (often assumed to be the outer face), and it is possible to partition the boundary of that face into two parts such that all 0-indegree vertices appear on one part, and all
0-outdegree vertices appear on the other (i.e. the two types of vertices do not alternate).
 If  
   
     
       
         G 
       
     
     {\displaystyle G} 
    exhibits these properties, then we can preprocess the graph in only
 
   
     
       
         O 
         ( 
         n 
         ) 
       
     
     {\displaystyle O(n)} 
    time, and store only  
   
     
       
         O 
         ( 
         log 
         ⁡ 
         
           n 
         
         ) 
       
     
     {\displaystyle O(\log {n})} 
    extra bits per vertex, answering
reachability queries for any pair of vertices in  
   
     
       
         O 
         ( 
         1 
         ) 
       
     
     {\displaystyle O(1)} 
    time with a simple
comparison.
 Preprocessing performs the following steps. We add a new vertex  
   
     
       
         s 
       
     
     {\displaystyle s} 
    which has an edge to each 0-indegree vertex, and another new vertex  
   
     
       
         t 
       
     
     {\displaystyle t} 
    with edges from each 0-outdegree vertex. Note that the properties of  
   
     
       
         G 
       
     
     {\displaystyle G} 
    allow us to do so while maintaining planarity, that is, there will still be no edge crossings after these additions. For each vertex we store the list of adjacencies (out-edges) in order of the planarity of the graph (for example, clockwise with respect to the graph's embedding). We then initialize a counter  
   
     
       
         i 
         = 
         n 
         + 
         1 
       
     
     {\displaystyle i=n+1} 
    and begin a Depth-First Traversal from  
   
     
       
         s 
       
     
     {\displaystyle s} 
   . During this traversal, the adjacency list of each vertex is visited from left-to-right as needed.  As vertices are popped from the traversal's stack, they are labelled with the value  
   
     
       
         i 
       
     
     {\displaystyle i} 
   , and  
   
     
       
         i 
       
     
     {\displaystyle i} 
    is then decremented. Note that  
   
     
       
         t 
       
     
     {\displaystyle t} 
    is always labelled with the value  
   
     
       
         n 
         + 
         1 
       
     
     {\displaystyle n+1} 
    and  
   
     
       
         s 
       
     
     {\displaystyle s} 
    is always labelled with  
   
     
       
         0 
       
     
     {\displaystyle 0} 
   .  The depth-first traversal is then repeated, but this time the adjacency list of each vertex is visited from right-to-left.
 When completed,  
   
     
       
         s 
       
     
     {\displaystyle s} 
    and  
   
     
       
         t 
       
     
     {\displaystyle t} 
   , and their incident edges, are removed. Each
remaining vertex stores a 2-dimensional label with values from  
   
     
       
         1 
       
     
     {\displaystyle 1} 
    to  
   
     
       
         n 
       
     
     {\displaystyle n} 
   .
Given two vertices  
   
     
       
         u 
       
     
     {\displaystyle u} 
    and  
   
     
       
         v 
       
     
     {\displaystyle v} 
   , and their labels  
   
     
       
         L 
         ( 
         u 
         ) 
         = 
         ( 
         
           a 
           
             1 
           
         
         , 
         
           a 
           
             2 
           
         
         ) 
       
     
     {\displaystyle L(u)=(a_{1},a_{2})} 
    and  
   
     
       
         L 
         ( 
         v 
         ) 
         = 
         ( 
         
           b 
           
             1 
           
         
         , 
         
           b 
           
             2 
           
         
         ) 
       
     
     {\displaystyle L(v)=(b_{1},b_{2})} 
   , we say that  
   
     
       
         L 
         ( 
         u 
         ) 
         < 
         L 
         ( 
         v 
         ) 
       
     
     {\displaystyle L(u)<L(v)} 
    if and only if  
   
     
       
         
           a 
           
             1 
           
         
         ≤ 
         
           b 
           
             1 
           
         
       
     
     {\displaystyle a_{1}\leq b_{1}} 
   ,  
   
     
       
         
           a 
           
             2 
           
         
         ≤ 
         
           b 
           
             2 
           
         
       
     
     {\displaystyle a_{2}\leq b_{2}} 
   , and there exists at least one component  
   
     
       
         
           a 
           
             1 
           
         
       
     
     {\displaystyle a_{1}} 
    or  
   
     
       
         
           a 
           
             2 
           
         
       
     
     {\displaystyle a_{2}} 
    which is strictly
less than  
   
     
       
         
           b 
           
             1 
           
         
       
     
     {\displaystyle b_{1}} 
    or  
   
     
       
         
           b 
           
             2 
           
         
       
     
     {\displaystyle b_{2}} 
   , respectively.
 The main result of this method then states that  
   
     
       
         v 
       
     
     {\displaystyle v} 
    is reachable from  
   
     
       
         u 
       
     
     {\displaystyle u} 
    if and
only if  
   
     
       
         L 
         ( 
         u 
         ) 
         < 
         L 
         ( 
         v 
         ) 
       
     
     {\displaystyle L(u)<L(v)} 
   , which is easily calculated in  
   
     
       
         O 
         ( 
         1 
         ) 
       
     
     {\displaystyle O(1)} 
    time.
 

 **Related problems**

 A related problem is to solve reachability queries with some number  
   
     
       
         k 
       
     
     {\displaystyle k} 
    of vertex failures. For example: "Can vertex  
   
     
       
         u 
       
     
     {\displaystyle u} 
    still reach vertex  
   
     
       
         v 
       
     
     {\displaystyle v} 
    even though vertices  
   
     
       
         
           s 
           
             1 
           
         
         , 
         
           s 
           
             2 
           
         
         , 
         . 
         . 
         . 
         , 
         
           s 
           
             k 
           
         
       
     
     {\displaystyle s_{1},s_{2},...,s_{k}} 
    have failed and can no longer be used?" A similar problem may consider edge failures rather than vertex failures, or a mix of the two. The breadth-first search technique works just as well on such queries, but constructing an efficient oracle is more challenging. Another problem related to reachability queries is in quickly recalculating changes to reachability relationships when some portion of the graph is changed. For example, this is a relevant concern to garbage collection which needs to balance the reclamation of memory (so that it may be reallocated) with the performance concerns of the running application.
 

 