***Shell sort***
Shellsort , also known as  Shell sort  or  Shell's method , is an in-place comparison sort. It can be seen as either a generalization of sorting by exchange (bubble sort) or sorting by insertion (insertion sort). The method starts by sorting pairs of elements far apart from each other, then progressively reducing the gap between elements to be compared. Starting with far apart elements, it can move some out-of-place elements into position faster than a simple nearest neighbor exchange. Donald Shell published the first version of this sort in 1959. The running time of Shellsort is heavily dependent on the gap sequence it uses. For many practical variants, determining their time complexity remains an open problem.
 

 **Description**

 Shellsort is a generalization of insertion sort that allows the exchange of items that are far apart. The idea is to arrange the list of elements so that, starting anywhere, considering every  h th element gives a sorted list. Such a list is said to be  h -sorted. Equivalently, it can be thought of as  h  interleaved lists, each individually sorted. Beginning with large values of  h , this rearrangement allows elements to move long distances in the original list, reducing large amounts of disorder quickly, and leaving less work for smaller  h -sort steps to do. If the list is then  k-sorted  for some smaller integer  k , then the list remains  h -sorted. Following this idea for a decreasing sequence of  h  values ending in 1 is guaranteed to leave a sorted list in the end. An example run of Shellsort with gaps 5, 3 and 1 is shown below.
 
 The first pass, 5-sorting, performs insertion sort on five  separate subarrays ( a 1 ,  a 6 ,  a 11 ), ( a 2 ,  a 7 ,  a 12 ), ( a 3 ,  a 8 ), ( a 4 ,  a 9 ), ( a 5 ,  a 10 ). For instance, it changes the subarray ( a 1 ,  a 6 ,  a 11 ) from (62, 17, 25) to (17, 25, 62). The next pass, 3-sorting, performs insertion sort on the three subarrays ( a 1 ,  a 4 ,  a 7 ,  a 10 ), ( a 2 ,  a 5 ,  a 8 ,  a 11 ), ( a 3 ,  a 6 ,  a 9 ,  a 12 ). The last pass, 1-sorting, is an ordinary insertion sort of the entire array ( a 1 ,...,  a 12 ).
 As the example illustrates, the subarrays that Shellsort operates on are initially short; later they are longer but almost ordered. In both cases insertion sort works efficiently.
 Shellsort is not stable: it may change the relative order of elements with equal values. It is an adaptive sorting algorithm in that it executes faster when the input is partially sorted.
 
 

 **Gap sequences**

 The question of deciding which gap sequence to use is difficult. Every gap sequence that contains 1 yields a correct sort (as this makes the final pass an ordinary insertion sort); however, the properties of thus obtained versions of Shellsort may be very different. Too few gaps slows down the passes, and too many gaps produces an overhead.
 The table below compares most proposed gap sequences published so far. Some of them have decreasing elements that depend on the size of the sorted array ( N ). Others are increasing infinite sequences, whose elements less than  N  should be used in reverse order.
 
 When the binary representation of  N  contains many consecutive zeroes, Shellsort using Shell's original gap sequence makes Θ( N 2 ) comparisons in the worst case. For instance, this case occurs for  N  equal to a power of two when elements greater and smaller than the median occupy odd and even positions respectively, since they are compared only in the last pass.
 Although it has higher complexity than the  O ( N  log  N ) that is optimal for comparison sorts, Pratt's version lends itself to sorting networks and has the same asymptotic gate complexity as Batcher's bitonic sorter.
 Gonnet and Baeza-Yates observed that Shellsort makes the fewest comparisons on average when the ratios of successive gaps are roughly equal to 2.2. This is why their sequence with ratio 2.2 and Tokuda's sequence with ratio 2.25 prove efficient. However, it is not known why this is so. Sedgewick recommends to use gaps that have low greatest common divisors or are pairwise coprime. With respect to the average number of comparisons, Ciura's sequence has the best known performance; gaps from 701 were not determined but the sequence can be further extended according to the recursive formula  
 
 **Applications**

 Shellsort performs more operations and has higher cache miss ratio than quicksort. However, since it can be implemented using little code and does not use the call stack, some implementations of the qsort function in the C standard library targeted at embedded systems use it instead of quicksort. Shellsort is, for example, used in the uClibc library. For similar reasons, in the past, Shellsort was used in the Linux kernel. Shellsort can also serve as a sub-algorithm of introspective sort, to sort short subarrays and to prevent a slowdown when the recursion depth exceeds a given limit. This principle is employed, for instance, in the bzip2 compressor. 

 