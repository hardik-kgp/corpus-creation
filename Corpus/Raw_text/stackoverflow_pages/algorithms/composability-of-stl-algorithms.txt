*** composability-of-stl-algorithms ***
https://stackoverflow.com/questions/6743093/composability-of-stl-algorithms

 The STL algorithms are a pretty useful thing in C++. But one thing that kind of irks me is that they seem to lack composability. 
 For example, let's say I have a   and want to transform that to a   containing only the   member of the pair. That's simple enough: 
 
 Or maybe I want to filter the   for only those pairs whose   member is even. Also pretty simple: 
 
 But what if I want to do both? There is no   algorithm, and using both   and   seems to require allocating a temporary   to hold the intermediate result: 
 
 This seems rather wasteful to me. The only way I can think of to avoid the temporary vector is to abandon   and   and simply use   (or a regular for loop, whichever suits your fancy): 
 
 Am I missing something here? Is there a good way to compose two existing STL algorithms into a new one without needing temporary storage? 
 
 You're right. You can use  Boost.Range adaptors  to achieve composition. 
 
 I think the problem is unfortunately structural 
 
 C++ uses two iterators to represent a sequence 
 C++ functions are single-valued 
 
 so you cannot chain them because a function cannot return "a sequence". 
 An option would have been to use single-object sequences instead ( like the range approach from boost ). This way you could have combined the result of one processing as the input of another... (one object -> one object). 
 In the standard C++ library instead the processing is (two objects -> one object) and it's clear that this cannot be chained without naming the temporary object. 
 
 Back in 2000, the problem was already noted. Gary Powell and Martin Weiser came up with a "view" concept, and coined the name "View Template Library". It didn't take off then but the idea makes sense. A "view" adaptor essentially applies an on-the-fly transform. For instance, it can adapt the  . 
 The concept probably should be readdressed now we have C++0x. We've made quite some progress in generic programming since 2000. 
 For example, let's use the    to   example. That could be quite simple: 
 
 Or, using the   techniques, even simpler: 
 
 
 Not sure if this is still active, but...
A new light wait header only lib that does what you describe.  Doc talks about lazy evaluation and com compossible generators. 
 Doc snippet: 
 
 Read in up to 10 integers from a file "test.txt".   
 filter for the even numbers, square them and sum their values. 
 
 
 you can split that line up into multiple expressions. 
 
 
 Even though this expression is split over multiple variable assignments, it is not any less efficient. 
 Each intermediate variable simply 
describes a unit of code to be executed.  All held in stack.   
 
 https://github.com/SaadAttieh/lazyCode 
 