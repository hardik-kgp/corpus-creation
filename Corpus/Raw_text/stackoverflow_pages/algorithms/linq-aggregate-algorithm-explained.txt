*** linq-aggregate-algorithm-explained ***
https://stackoverflow.com/questions/7105505/linq-aggregate-algorithm-explained

 This might sound lame, but  I have not been able to find a really good explanation of  . 
 Good means short, descriptive, comprehensive with a small and clear example. 
 
 The easiest-to-understand definition of   is that it performs an operation on each element of the list taking into account the operations that have gone before. That is to say it performs the action on the first and second element and carries the result forward. Then it operates on the previous result and the third element and carries forward. etc. 
 **Example 1. Summing numbers**

 
 This adds   and   to make  . Then adds   (result of previous) and   (next element in sequence) to make  . Then adds   and   to make  . 
 **Example 2. create a csv from an array of strings**

 
 This works in much the same way. Concatenate   a comma and   to make  . Then concatenates    with a comma and   to make  . and so on. 
 **Example 3. Multiplying numbers using a seed**

 For completeness, there is an  overload  of   which takes a seed value.  
 
 Much like the above examples, this starts with a value of   and multiplies it by the first element of the sequence   giving a result of  . This result is carried forward and multiplied by the next number in the sequence   to give a result of  . This continues through the remaining 2 element of the sequence. 
 Live examples:  http://rextester.com/ZXZ64749 
Docs:  http://msdn.microsoft.com/en-us/library/bb548651.aspx 
 
 **Addendum**

 Example 2, above, uses string concatenation to create a list of values separated by a comma. This is a simplistic way to explain the use of   which was the intention of this answer. However, if using this technique to actually create a large amount of comma separated data, it would be more appropriate to use a  , and this is entirely compatible with   using the seeded overload to initiate the  . 
 
 Updated example:  http://rextester.com/YZCVXV6464 
 
 It partly depends on which overload you're talking about, but the basic idea is: 
 
 Start with a seed as the "current value" 
 Iterate over the sequence. For each value in the sequence:

 
 Apply a user-specified function to transform   into  
 Set  
 
 Return the final  
 
 You may find the   post in my Edulinq series  useful - it includes a more detailed description (including the various overloads) and implementations. 
 One simple example is using   as an alternative to  : 
 
 Or perhaps summing all the lengths of strings in a sequence of strings: 
 
 Personally I  rarely  find   useful - the "tailored" aggregation methods are usually good enough for me. 
 
 **Super short**
 
Aggregate works like fold in Haskell/ML/F#. 
 **Slightly longer**

.Max(), .Min(), .Sum(), .Average() all iterates over the elements in a sequence and aggregates them using the respective aggregate function. .Aggregate () is generalized aggregator in that it allows the developer to specify the start state (aka seed) and the aggregate function. 
 I know you asked for a short explaination but I figured as others gave a couple of short answers I figured you would perhaps be interested in a slightly longer one 
 **Long version with code**

One way to illustrate what does it could be show how you implement  Sample Standard Deviation  once using foreach and once using .Aggregate.  Note: I haven't prioritized performance here so I iterate several times over the colleciton unnecessarily 
 First a helper function used to create a sum of quadratic distances: 
 
 Then Sample Standard Deviation using ForEach: 
 
 Then once using .Aggregate: 
 
 Note that these functions are identical except for how sumOfQuadraticDistance is calculated: 
 
 Versus: 
 
 So what .Aggregate does is that it encapsulates this aggregator pattern and I expect that the implementation of .Aggregate would look something like this: 
 
 Using the Standard deviation functions would look something like this: 
 
 **IMHO**

 So does .Aggregate help readability? In general I love LINQ because I think .Where, .Select, .OrderBy and so on greatly helps readability (if you avoid inlined hierarhical .Selects). Aggregate has to be in Linq for completeness reasons but personally I am not so convinced that .Aggregate adds readability compared to a well written foreach. 
 
 **A picture is worth a thousand words**

 
 Reminder: 
  is a function with two inputs of type   and  , that returns a result of type  . 
 
 Enumerable.Aggregate has three overloads: 
 
 **Overload 1:**

 
 
 Example: 
 
 
 This overload is simple, but it has the following limitations:   
 
 the sequence must contain at least one element, 
otherwise the function will throw an  . 
 elements and result must be of the same type. 
 
 
 
 **Overload 2:**

 
 
 Example: 
 
 
 This overload is more general:   
 
 a seed value must be provided ( ). 
 the collection can be empty, 
in this case, the function will yield the seed value as result. 
 elements and result can have different types. 
 
 
 
 **Overload 3:**

 
 
 The third overload is not very useful IMO. 
The same can be written more succinctly by using overload 2 followed by a function that transforms its result. 
 
 
 The illustrations are adapted from  this excellent blogpost . 
 
 
 Aggregate is basically  used to Group or Sum up data. 
 According to MSDN
           "Aggregate Function Applies an accumulator function over a sequence." 
 Example 1: Add all the numbers in a array. 
 
 *important: The initial aggregate value by default is the 1 element in the sequence of collection.
i.e: the total variable initial value will be 1 by default. 
 variable explanation 
 total: it will hold the sum up value(aggregated value) returned by the func. 
 nextValue: it is the next value in the array sequence. This value is than added to the aggregated value i.e total. 
 Example 2: Add all items in an array. Also set the initial accumulator value to start adding with from 10. 
 
 arguments explanation: 
 the first argument is the initial(starting value i.e seed value) which will be used to start addition with the next value in the array. 
 the second argument is a func which is a func that takes 2 int. 
 1.total: this will hold same as before the sum up value(aggregated value) returned by the func after the calculation. 
 2.nextValue: : it is the next value in the array sequence. This value is than added to the aggregated value i.e total.  
 Also debugging this code will give you a better understanding of how aggregate work. 
 
 Learned a lot from  Jamiec's  answer.  
 If the only need is to generate CSV string, you may try this. 
 
 Here is a test with 1 million strings 
 
 Source code is  here 
 
 In addition to all the great answers here already, I've also used it to walk an item through a series of transformation steps. 
 If a transformation is implemented as a  , you can add several  transformations to a   and use   to walk an instance of   through each step. 
 **A more concrete example**

 You want to take a   value, and walk it through a series of text transformations that could be built programatically. 
 
 This will create a chain of transformations: Remove leading and trailing spaces -> remove first character -> remove last character -> convert to upper-case. Steps in this chain can be added, removed, or reordered as needed, to create whatever kind of transformation pipeline is required. 
 The end result of this specific pipeline, is that   becomes  . 
 
 This can become very powerful once you realize that   can be  anything .  This could be used for image transformations, like filters, using   as an example; 
 
 Everyone has given his explanation. My explanation is like that. 
 Aggregate method applies a function to each item of a collection. For example, let's have collection { 6, 2, 8, 3 } and the function Add (operator +) it does (((6+2)+8)+3) and returns 19 
 
 In this example there is passed named method Add instead of lambda expression. 
 
 
 
 Definition 
 
 Aggregate method is an extension method for generic collections. Aggregate method applies a function to each item of a collection. Not just only applies a function, but takes its result as initial value for the next iteration. So, as a result, we will get a computed value (min, max, avg, or other statistical value) from a collection. 
 Therefore,  **Aggregate method is a form of safe implementation of a recursive function.**

 **Safe**
, because the recursion will iterate over each item of a collection and we can’t get any infinite loop suspension by wrong exit condition.  **Recursive**
, because the current function’s result is used as a parameter for the next function call. 
 
 Syntax: 
 
 
 
 seed  - initial value by default; 
 func  - our recursive function. It can be a lambda-expression, a Func delegate or a function type T F(T result, T nextValue); 
 resultSelector  - it can be a function like func or an expression to compute, transform, change, convert the final result. 
 
 How it works: 
 
 
 Practical usage: 
 
 
 Find Factorial from a number n: 
 
 
 which is doing the same thing as this function: 
 
 
 Aggregate() is one of the most powerful LINQ extension method, like Select() and Where(). We can use it to replace the Sum(), Min(). Max(), Avg() functionality, or to change it by implementing addition context: 
 
 
 
 More complex usage of extension methods: 
 
 
 
 A short and essential definition might be this: Linq Aggregate extension method allows to declare a sort of recursive function applied on the elements of a list, the operands of whom are two: the elements in the order in which they are present into the list, one element at a time, and the result of the previous recursive iteration or nothing if not yet recursion. 
 In this way you can compute the factorial of numbers, or concatenate strings. 
 
 This is an explanation about using   on a Fluent API such as Linq Sorting. 
 
 and lets see we want to implement a sort function that take a set of fields, this is very easy using   instead of a for-loop, like this: 
 
 And we can use it like this: 
 
 
 Aggregate used to sum columns in a multi dimensional integer array 
 
 Select with index is used within the Aggregate func to sum the matching columns and return a new Array; { 3 + 2 = 5, 1 + 4 = 5, 7 + 16 = 23, 8 + 5 = 13 }. 
 
 But counting the number of trues in a Boolean array is more difficult since the accumulated type (int) differs from the source type (bool); here a seed is necessary in order to use the second overload. 
 
 