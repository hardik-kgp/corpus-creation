*** what-are-good-examples-of-genetic-algorithms-genetic-programming-solutions ***
https://stackoverflow.com/questions/1538235/what-are-good-examples-of-genetic-algorithms-genetic-programming-solutions

 
 
 
 
 
 
 
 
                            As it currently stands, this question is not a good fit for our Q&A format. We expect answers to be supported by facts, references,   or expertise, but this question will likely solicit debate, arguments, polling, or extended discussion. If you feel that this question   can be improved and possibly reopened,  visit the help center  for guidance.
                            
                         
 
 
 Closed  7 years ago . 
 
 
 Genetic algorithms  (GA) and  genetic programming  (GP) are interesting areas of research.  
 I'd like to know about specific problems you have solved using GA/GP and what libraries/frameworks you used if you didn't roll your own. 
 Questions: 
 
 What problems have you used GA/GP to solve? 
 What libraries/frameworks did you use? 
 
 I'm looking for first-hand experiences, so please do not answer unless you have that. 
 
 Not  homework. 
 My first job as a professional programmer (1995) was writing a genetic-algorithm based automated trading system for S&P500 futures.  The application was written in Visual Basic 3 [!] and I have no idea how I did anything back then, since VB3 didn't even have classes. 
 The application started with a population of randomly-generated fixed-length strings (the "gene" part), each of which corresponded to a specific shape in the minute-by-minute price data of the S&P500 futures, as well as a specific order (buy or sell) and stop-loss and stop-profit amounts.  Each string (or "gene") had its profit performance evaluated by a run through 3 years of historical data; whenever the specified "shape" matched the historical data, I assumed the corresponding buy or sell order and evaluated the trade's result.  I added the caveat that each gene started with a fixed amount of money and could thus potentially go broke and be removed from the gene pool entirely. 
 After each evaluation of a population, the survivors were cross-bred randomly (by just mixing bits from two parents), with the likelihood of a gene being selected as a parent being proportional to the profit it produced.  I also added the possibility of point mutations to spice things up a bit.  After a few hundred generations of this, I ended up with a population of genes that could turn $5000 into an average of about $10000 with no chance of death/brokeness (on the historical data, of course). 
 Unfortunately, I never got the chance to use this system live, since my boss lost close to $100,000 in less than 3 months trading the traditional way, and he lost his willingness to continue with the project.  In retrospect, I think the system would have made huge profits - not because I was necessarily doing anything right, but because the population of genes that I produced happened to be biased towards buy orders (as opposed to sell orders) by about a 5:1 ratio.  And as we know with our 20/20 hindsight, the market went up a bit after 1995. 
 
 I made a little critters that lived in this little world. They had a neural network brain which received some inputs from the world and the output was a vector for movement among other actions. Their brains were the "genes".  
 The program started with a random population of critters with random brains. The inputs and output neurons were static but what was in between was not.  
 The environment contained food and dangers. Food increased energy and when you have enough energy, you can mate. The dangers would reduce energy and if energy was 0, they died.  
 Eventually the creatures evolved to move around the world and find food and avoid the dangers.  
 I then decided to do a little experiment. I gave the creature brains an output neuron called "mouth" and an input neuron called "ear". Started over and was surprised to find that they evolved to maximize the space and each respective creature would stay in its respective part (food was placed randomly). They learned to cooperate with each other and not get in each others way. There were always the exceptions. 
 Then i tried something interesting. I dead creatures would become food. Try to guess what happened! Two types of creatures evolved, ones that attacked like in swarms, and ones that were high avoidance.  
 So what is the lesson here? Communication means cooperation. As soon as you introduce an element where hurting another means you gain something, then cooperation is destroyed.  
 I wonder how this reflects on the system of free markets and capitalism. I mean, if businesses can hurt their competition and  **get away with it**
, then its clear they will do everything in their power to hurt the competition.  
 Edit:  
 I wrote it in C++ using no frameworks. Wrote my own neural net and GA code. Eric, thank you for saying it is plausible. People usually don't believe in the powers of GA (although the limitations are obvious) until they played with it. GA is simple but not simplistic. 
 For the doubters, neural nets have been proven to be able to simulate any function if they have more than one layer. GA is a pretty simple way to navigate a solution space finding local and potentially global minimum. Combine GA with neural nets and you have a pretty good way to find functions that find approximate solutions for generic problems. Because we are using neural nets, then we are optimizing the function for some inputs, not some inputs to a function as others are using GA 
 Here is the demo code for the survival example:  http://www.mempko.com/darcs/neural/demos/eaters/ 
Build instructions: 
 
 Install darcs, libboost, liballegro, gcc, cmake, make 
 
 
 
 
 
 
 
 
 
 In January 2004, I was contacted by Philips New Display Technologies who were creating the electronics for the first ever commercial e-ink, the Sony Librie, who had only been released in Japan, years before Amazon Kindle and the others hit the market in US an Europe. 
 The Philips engineers had a major problem. A few months before the product was supposed to hit the market, they were still getting ghosting on the screen when changing pages. The problem was the 200 drivers that were creating the electrostatic field. Each of these drivers had a certain voltage that had to be set right between zero and 1000 mV or something like this. But if you changed one of them, it would change everything.  
 So optimizing each driver's voltage individually was out of the question. The number of possible combination of values was in billions,and it took about 1 minute for a special camera to evaluate a single combination. The engineers had tried many standard optimization techniques, but nothing would come close.  
 The head engineer contacted me because I had previously released a Genetic Programming library to the open-source community. He asked if GP/GA's would help and if I could get involved. I did, and for about a month we worked together, me writing and tuning the GA library, on synthetic data, and him integrating it into their system. Then, one weekend they let it run live with the real thing. 
 The following Monday I got these glowing emails from him and their hardware designer, about how nobody could believe the amazing results the GA found. This was it. Later that year the product hit the market. 
 I didn't get paid one cent for it, but I got 'bragging' rights. They said from the beginning they were already over budget, so I knew what the deal was before I started working on it. And it's a great story for applications of GAs. :) 
 
 I used a GA to optimize seating assignments at my wedding reception.  80 guests over 10 tables.  Evaluation function was based on keeping people with their dates, putting people with something in common together, and keeping people with extreme opposite views at separate tables. 
 I ran it several times.  Each time, I got nine good tables, and one with all the odd balls.  In the end, my wife did the seating assignments. 
 My traveling salesman optimizer used a novel mapping of chromosome to itinerary, which made it trivial to breed and mutate the chromosomes without any risk of generating invalid tours. 
 **Update**
:  Because a couple people have asked how ... 
 Start with an array of guests (or cities) in some arbitrary but consistent ordering, e.g., alphabetized.  Call this the reference solution.  Think of a guest's index as his/her seat number. 
 Instead of trying to encode this ordering directly in the chromosome, we encode instructions for transforming the reference solution into a new solution.  Specifically, we treat the chromosomes as lists of indexes in the array to swap.  To get decode a chromosome, we start with the reference solution and apply all the swaps indicated by the chromosome.  Swapping two entries in the array always results in a valid solution:  every guest (or city) still appears exactly once. 
 Thus chromosomes can be randomly generated, mutated, and crossed with others and will always produce a valid solution. 
 
 I used genetic algorithms (as well as some related techniques) to determine the best settings for a risk management system that tried to keep gold farmers from using stolen credit cards to pay for MMOs.  The system would take in several thousand transactions with "known" values (fraud or not) and figure out what the best combination of settings was to properly identify the fraudulent transactions without having too many false positives. 
 We had data on several dozen (boolean) characteristics of a transaction, each of which was given a value and totalled up.  If the total was higher than a threshold, the transaction was fraud.  The GA would create a large number of random sets of values, evaluate them against a corpus of known data, select the ones that scored the best (on both fraud detection and limiting the number of false positives), then cross breed the best few from each generation to produce a new generation of candidates.  After a certain number of generations the best scoring set of values was deemed the winner. 
 Creating the corpus of known data to test against was the Achilles' heel of the system.  If you waited for chargebacks, you were several months behind when trying to respond to the fraudsters, so someone would have to manually review large numbers of transactions to build up that corpus of data without having to wait too long. 
 This ended up identifying the vast majority of the fraud that came in, but couldn't quite get it below 1% on the most fraud-prone items (given that 90% of incoming transactions could be fraud, that was doing pretty well). 
 I did all this using perl.  One run of the software on a fairly old linux box would take 1-2 hours to run (20 minutes to load data over a WAN link, the rest of the time spent crunching).  The size of any given generation was limited by available RAM.  I'd run it over and over with slight changes to the parameters, looking for an especially good result set. 
 All in all it avoided some of the gaffes that came with manually trying to tweak the relative values of dozens of fraud indicators, and consistently came up with better solutions than I could create by hand.  AFAIK, it's still in use (about 3 years after I wrote it). 
 
 Football Tipping.  I built a GA system to predict the week to week outcome of games in the AFL (Aussie Rules Football). 
 A few years ago I got bored of the standard work football pool, everybody was just going online and taking the picks from some pundit in the press.  So, I figured it couldn't be too hard to beat a bunch of broadcast journalism majors, right?  My first thought was to take the results from  Massey Ratings  and then reveal at the end of the season my strategy after winning fame and glory.  However, for reasons I've never discovered Massey does not track AFL.  The cynic in me believes it is because the outcome of each AFL game has basically become random chance, but my complaints of recent rule changes belong in a different forum. 
 The system basically considered offensive strength, defensive strength, home field advantage, week to week improvement (or lack thereof) and velocity of changes to each of these.  This created a set of polynomial equations for each team over the season.  The winner and score for each match for a given date could be computed.  The goal was to find the set of coefficients that most closely matched the outcome of all past games and use that set to predict the upcoming weeks game. 
 In practice, the system would find solutions that accurately predicted over 90% of past game outcomes.  It would then successfully pick about 60-80% of games for the upcoming week (that is the week not in the training set). 
 The result: just above middle of the pack.  No major cash prize nor a system that I could use to beat Vegas.  It was fun though. 
 I built everything from scratch, no framework used. 
 
 As well as some of the common problems, like the Travelling Salesman and a variation on  Roger Alsing's Mona Lisa program , I've also written  an evolutionary Sudoku solver  (which required a bit more original thought on my part, rather than just re-implementing somebody else's idea).  There are more reliable algorithms for solving Sudokus but the evolutionary approach works fairly well. 
 In the last few days I've been playing around with an evolutionary program to find "cold decks" for poker after seeing  this article  on Reddit.  It's not quite satisfactory at the moment but I think I can improve it. 
 I have  my own framework  that I use for evolutionary algorithms. 
 
 I developed a home brew GA for a 3D laser surface profile system my company developed for the freight industry back in 1992.
The system relied upon 3 dimensional triangulation and used a custom laser line scanner, a 512x512 camera (with custom capture hw). The distance between the camera and laser was never going to be precise and the focal point of the cameras were not to be found in the 256,256 position that you expected it to be! 
 It was a nightmare to try and work out the calibration parameters using standard geometry and simulated annealing style equation solving. 
 The Genetic algorithm was whipped up in an evening and I created a calibration cube to test it on. I knew the cube dimensions to high accuracy and thus the idea was that my GA could evolve a set of custom triangulation parameters for each scanning unit that would overcome production variations. 
 The trick worked a treat. I was flabbergasted to say the least! Within around 10 generations my 'virtual' cube (generated from the raw scan and recreated from the calibration parameters) actually looked like a cube! After around 50 generations I had the calibration I needed. 
 
 Its often difficult to get an exact color combination when you are planning to paint your house. Often, you have some color in mind, but it is not one of the colors, the vendor shows you.  
 Yesterday, my Prof. who is a GA researcher mentioned about a true story in Germany (sorry, I have no further references, yes, I can find it out if any one requests to). This guy (let's call him the  color guy ) used to go from door-door to help people to find the exact color code (in  RGB ) that would be the closet to what the customer had in mind. Here is how he would do it: 
 The  color guy  used to carry with him a software program which used GA. He used to start with 4 different colors- each coded as a coded Chromosome (whose decoded value would be a RGB value). The consumer picks 1 of the 4 colors (Which is the closest to which he/she has in mind). The program would then assign the maximum  fitness  to that  individual  and move onto the next  generation  using  mutation/crossover . The above steps would be repeated till the consumer had found the exact color and then  color guy  used to tell him the RGB combination!  
 By assigning maximum fitness to the color closes to what the consumer have in mind, the  color guy 's program is increasing the chances to converge to the color, the consumer has in mind exactly. I found it pretty fun! 
 Now that I have got a -1, if you are planning for more -1's, pls. elucidate the reason for doing so! 
 
 As part of my undergraduate CompSci degree, we were assigned the problem of finding optimal jvm flags for the Jikes research virtual machine. This was evaluated using the Dicappo benchmark suite which returns a time to the console. I wrote a distributed gentic alogirthm that switched these flags to improve the runtime of the benchmark suite, although it took days to run to compensate for hardware jitter affecting the results. The only problem was I didn't properly learn about the compiler theory (which was the intent of the assignment). 
 I could have seeded the initial population with the exisiting default flags, but what was interesting was that the algorithm found a very similar configuration to the O3 optimisation level (but was actually faster in many tests). 
 Edit: Also I wrote my own genetic algorithm framework in Python for the assignment, and just used the popen commands to run the various benchmarks, although if it wasn't an assessed assignment I would have looked at pyEvolve. 
 
 First off, "Genetic Programming" by Jonathan Koza ( on amazon ) is pretty much THE book on genetic and evolutionary algorithm/programming techniques, with many examples.  I highly suggest checking it out. 
 As for my own use of a genetic algorithm, I used a (home grown) genetic algorithm to evolve a swarm algorithm for an object collection/destruction scenario (practical purpose could have been clearing a minefield).  Here is a link to  the paper .  The most interesting part of what I did was the multi-staged fitness function, which was a necessity since the simple fitness functions did not provide enough information for the genetic algorithm to sufficiently differentiate between members of the population. 
 
 A couple of weeks ago, I suggested a  solution on SO  using genetic algorithms to solve a problem of graph layout. It is an example of a constrained optimization problem. 
 Also in the area of machine learning, I implemented a GA-based classification rules framework in c/c++ from scratch. 
I've also used GA in a sample project for training  artificial neural networks  (ANN) as opposed to using the famous  backpropagation algorithm . 
 In addition, and as part of my graduate research, I've used GA in training  Hidden Markov Models  as an additional approach to the EM-based  Baum-Welch  algorithm (in c/c++ again). 
 
 I am part of a team investigating the use of Evolutionary Computation (EC) to automatically fix bugs in existing programs.  We have successfully repaired a number of real bugs in real world software projects (see  this project's homepage ). 
 We have two applications of this EC repair technique. 
 
 The first ( code and reproduction information available through the project page ) evolves the abstract syntax trees parsed from existing C programs and is implemented in Ocaml using our own custom EC engine. 
 The second ( code and reproduction information available through the project page ), my personal contribution to the project, evolves the x86 assembly or Java byte code compiled from programs written in a number of programming languages.  This application is implemented in Clojure and also uses its own custom built EC engine. 
 
 One nice aspect of Evolutionary Computation is the simplicity of the technique makes it possible to write your own custom implementations without too much difficulty.  For a good freely available introductory text on Genetic Programming see the  **Field Guide to Genetic Programming**
. 
 
 A coworker and I are working on a solution for loading freight onto trucks using the various criteria our company requires.  I've been working on a Genetic Algorithm solution while he is using a Branch And Bound with aggressive pruning.  We are still in the process of implementing this solution but so far, we have been getting good results. 
 
 Several years ago I used ga's to optimize asr (automatic speech recognition) grammars for better recognition rates. I started with fairly simple lists of choices (where the ga was testing combinations of possible terms for each slot) and worked my way up to more open and complex grammars. Fitness was determined by measuring separation between terms/sequences under a kind of phonetic distance function. I also experimented with making weakly equivalent variations on a grammar to find one that compiled to a more compact representation (in the end I went with a direct algorithm, and it drastically increased the size of the "language" that we could use in applications). 
 More recently I have used them as a default hypothesis against which to test the quality of solutions generated from various algorithms. This has largely involved categorization and different kinds of fitting problems (i.e. create a "rule" that explains a set of choices made by reviewers over a dataset(s)). 
 
 I made a complete GA framework named "GALAB", to solve many problems: 
 
 locating GSM ANTs (BTS) to decrease overlap & blank locations. 
 Resource constraint project scheduling. 
 Evolutionary picture creation. ( Evopic ) 
 Travelling salesman problem. 
 N-Queen & N-Color problems. 
 Knight's tour & Knapsack problems. 
 Magic square & Sudoku puzzles. 
 string compression, based on Superstring problem. 
 2D Packaging problem. 
 Tiny artificial life APP. 
 Rubik puzzle. 
 
 
 I once used a GA to optimize a hash function for memory addresses.  The addresses were 4K or 8K page sizes, so they showed some predictability in the bit pattern of the address (least significant bits all zero; middle bits incrementing regularly, etc.)  The original hash function was "chunky" - it tended to cluster hits on every third hash bucket.  The improved algorithm had a nearly perfect distribution. 
 
 I don't know if homework counts... 
 During my studies we rolled our own program to solve the Traveling Salesman problem. 
 The idea was to make a comparison on several criteria (difficulty to map the problem, performance, etc) and we also used other techniques such as  Simulated annealing . 
 It worked pretty well, but it took us a while to understand how to do the 'reproduction' phase correctly: modeling the problem at hand into something suitable for Genetic programming really struck me as the hardest part... 
 It was an interesting course since we also dabbled with neural networks and the like. 
 I'd like to know if anyone used this kind of programming in 'production' code. 
 
 I built a simple GA for extracting useful patterns out of the frequency spectrum of music as it was being played. The output was used to drive graphical effects in a winamp plugin. 
 
 Input: a few FFT frames (imagine a 2D array of floats) 
 Output: single float value (weighted sum of inputs), thresholded to 0.0 or 1.0 
 Genes: input weights 
 Fitness function: combination of duty cycle, pulse width and BPM within sensible range. 
 
 I had a few GAs tuned to different parts of the spectrum as well as different BPM limits, so they didn't tend to converge towards the same pattern. The outputs from the top 4 from each population were sent to the rendering engine. 
 An interesting side effect was that the average fitness across the population was a good indicator for changes in the music, although it generally took 4-5 seconds to figure it out. 
 
 As part of my thesis I wrote a generic java framework for the multi-objective optimisation algorithm mPOEMS (Multiobjective prototype optimization with evolved improvement steps), which is a GA using evolutionary concepts. It is generic in a way that all problem-independent parts have been separated from the problem-dependent parts, and an interface is povided to use the framework with only adding the problem-dependent parts. Thus one who wants to use the algorithm does not have to begin from zero, and it facilitates work a lot. 
 You can find the code  here . 
 The solutions which you can find with this algorithm have been compared in a scientific work with state-of-the-art algorithms SPEA-2 and NSGA, and it has been proven that 
the algorithm performes comparable or even better, depending on the metrics you take to measure the performance, and especially depending on the optimization-problem you are looking on. 
 You can find it  here . 
 Also as part of my thesis and proof of work I applied this framework to the project selection problem found in portfolio management. It is about selecting the projects which add the most value to the company, support most the strategy of the company or support any other arbitrary goal. E.g. selection of a certain number of projects from a specific category, or maximization of project synergies, ... 
 My thesis which applies this framework to the project selection problem:
 http://www.ub.tuwien.ac.at/dipl/2008/AC05038968.pdf 
 After that I worked in a portfolio management department in one of the fortune 500, where they used a commercial software which also applied a GA to the project selection problem / portfolio optimization.  
 Further resources: 
 The documentation of the framework:
 http://thomaskremmel.com/mpoems/mpoems_in_java_documentation.pdf 
 mPOEMS presentation paper:
 http://portal.acm.org/citation.cfm?id=1792634.1792653 
 Actually with a bit of enthusiasm everybody could easily adapt the code of the generic framework to an arbitrary multi-objective optimisation problem.  
 
 At work I had the following problem:  given M tasks and N DSPs, what was the best way to assign tasks to DSPs?  "Best" was defined as "minimizing the load of the most loaded DSP".  There were different types of tasks, and various task types had various performance ramifications depending on where they were assigned, so I encoded the set of job-to-DSP assignments as a "DNA string" and then used a genetic algorithm to "breed" the best assignment string I could. 
 It worked fairly well (much better than my previous method, which was to evaluate every possible combination... on non-trivial problem sizes, it would have taken years to complete!), the only problem was that there was no way to tell if the optimal solution had been reached or not.  You could only decide if the current "best effort" was good enough, or let it run longer to see if it could do better. 
 
 There was an competition on codechef.com (great site by the way, monthly programming competitions) where one was supposed to solve an unsolveable sudoku (one should come as close as possible with as few wrong collumns/rows/etc as possible). What I would do, was to first generate a perfect sudoku and then override the fields, that have been given. From this pretty good basis on I used genetic programming to improve my solution. I couldn't think of a deterministic approach in this case, because the sudoku was 300x300 and search would've taken too long. 
 
 I used a simple genetic algorithm to optimize the signal to noise ratio of a wave that was represented as a binary string. By flipping the the bits certain ways over several million generations I was able to produce a transform that resulted in a higher signal to noise ratio of that wave. The algorithm could have also been "Simulated Annealing" but was not used in this case. At their core, genetic algorithms are simple, and this was about as simple of a use case that I have seen, so I didn't use a framework for generation creation and selection - only a random seed and the Signal-to-Noise Ratio function at hand. 
 
 In a seminar in the school, we develop an application to generate music based in the musical mode. The program was build in Java and the output was a midi file with the song. We using distincts aproachs of GA to generate the music. I think this program can be useful to explore new compositions. 
 
 in undergrad, we used NERO (a combination of neural network and genetic algorithm) to teach in-game robots to make intelligent decisions. It was pretty cool. 
 
 I developed a multithreaded swing based simulation of robot navigation through a set of randomized grid terrain of food sources and mines and developed a genetic algorithm based strategy of exploring the optimization of robotic behavior and survival of fittest genes for a robotic chromosome. This was done using charting and mapping of each iteration cycle.  
 Since, then I have developed even more game behavior. An example application I built recently for myself was a genetic algorithm for solving the traveling sales man problem in route finding in UK taking into account start and goal states as well as one/multiple connection points, delays, cancellations, construction works, rush hour, public strikes, consideration between fastest vs cheapest routes. Then providing a balanced recommendation for the route to take on a given day. 
 Generally, my strategy is to use POJO based representaton of genes then I apply specific interface implementations for selection, mutation, crossover strategies, and the criteria point. My fitness function then basically becomes a quite complex based on the strategy and criteria I need to apply as a heuristic measure.  
 I have also looked into applying genetic algorithm into automated testing within code using systematic mutation cycles where the algorithm understands the logic and tries to ascertain a bug report with recommendations for code fixes. Basically, a way to optimize my code and provide recommendations for improvement as well as a way of automating the discovery of new programmatic code. I have also tried to apply genetic algorithms to music production amongst other applications.  
 Generally, I find evolutionary strategies like most metaheuristic/global optimization strategies, they are slow to learn at first but start to pick up as the solutions become closer and closer to goal state and as long as your fitness function and heuristics are well aligned to produce that convergence within your search space.  
 
 I once tried to make a computer player for the game of Go, exclusively based on genetic programming.  Each program would be treated as an evaluation function for a sequence of moves.  The programs produced weren't very good though, even on a rather diminuitive 3x4 board. 
 I used Perl, and coded everything myself.  I would do things differently today. 
 
 After reading  The Blind Watchmaker , I was interested in the pascal program Dawkins said he had developed to create models of organisms that could evolve over time.  I was interested enough to write my own using  Swarm .  I didn't make all the fancy critter graphics he did, but my 'chromosomes' controlled traits which affected organisms ability to survive.  They lived in a simple world and could slug it out against each other and their environment.   
 Organisms lived or died partly due to chance, but also based on how effectively they adapted to their local environments, how well they consumed nutrients & how successfully they reproduced.  It was fun, but also more proof to my wife that I am a geek. 
 
 It was a while ago, but I rolled a GA to evolve what were in effect image processing kernels to remove cosmic ray traces from Hubble Space Telescope (HST) images. The standard approach is to take multiple exposures with the Hubble and keep only the stuff that is the same in all the images. Since HST time is so valuable, I'm an astronomy buff, and had recently attended the Congress on Evolutionary Computation, I thought about using a GA to clean up single exposures.  
 The individuals were in the form of trees that took a 3x3 pixel area as input, performed some calculations, and produced a decision about whether and how to modify the center pixel. Fitness was judged by comparing the output with an image cleaned up in the traditional way (i.e. stacking exposures). 
 It actually sort of worked, but not well enough to warrant foregoing the original approach. If I hadn't been time-constrained by my thesis, I might have expanded the genetic parts bin available to the algorithm. I'm pretty sure I could have improved it significantly. 
 Libraries used: If I recall correctly, IRAF and cfitsio for astronomical image data processing and I/O. 
 
 I experimented with GA in my youth.  I wrote a simulator in Python that worked as follows. 
 The genes encoded the weights of a neural network. 
 The neural network's inputs were "antennae" that detected touches.  Higher values meant very close and 0 meant not touching. 
 The outputs were to two "wheels".  If both wheels went forward, the guy went forward.  If the wheels were in opposite directions, the guy turned.  The strength of the output determined the speed of the wheel turning. 
 A simple maze was generated.  It was really simple--stupid even.  There was the start at the bottom of the screen and a goal at the top, with four walls in between.  Each wall had a space taken out randomly, so there was always a path. 
 I started random guys (I thought of them as bugs) at the start.  As soon as one guy reached the goal, or a time limit was reached, the fitness was calculated.  It was inversely proportional to the distance to the goal at that time. 
 I then paired them off and "bred" them to create the next generation.  The probability of being chosen to be bred was proportional to its fitness.  Sometimes this meant that one was bred with itself repeatedly if it had a very high relative fitness. 
 I thought they would develop a "left wall hugging" behavior, but they always seemed to follow something less optimal.  In every experiment, the bugs converged to a spiral pattern.  They would spiral outward until they touched a wall to the right.  They'd follow that, then when they got to the gap, they'd spiral down (away from the gap) and around.  They would make a 270 degree turn to the left, then usually enter the gap.  This would get them through a majority of the walls, and often to the goal. 
 One feature I added was to put in a color vector into the genes to track relatedness between individuals.  After a few generations, they'd all be the same color, which tell me I should have a better breeding strategy. 
 I tried to get them to develop a better strategy.  I complicated the neural net--adding a memory and everything.  It didn't help.  I always saw the same strategy. 
 I tried various things like having separate gene pools that only recombined after 100 generations.  But nothing would push them to a better strategy.  Maybe it was impossible. 
 Another interesting thing is graphing the fitness over time.  There were definite patterns, like the maximum fitness going down before it would go up.  I have never seen an evolution book talk about that possibility. 
 