*** what-is-stability-in-sorting-algorithms-and-why-is-it-important ***
https://stackoverflow.com/questions/1517793/what-is-stability-in-sorting-algorithms-and-why-is-it-important

 I'm very curious, why stability is or is not important in sorting algorithms? 
 
 A sorting algorithm is said to be  **stable**
 if two objects with equal keys appear in the same order in sorted output as they appear in the input array to be sorted. Some sorting algorithms are stable by nature like Insertion sort, Merge Sort, Bubble Sort, etc. And some sorting algorithms are not, like Heap Sort, Quick Sort, etc. 
 Background :  a "stable" sorting algorithm keeps the items with the same sorting key in order.  Suppose we have a list of 5-letter words: 
 
 If we sort the list by just the first letter of each word then a stable-sort would produce: 
 
 In an  **unstable**
 sort algorithm,   or   may be interchanged, but in a stable one, they stay in the same relative positions (that is, since   appears before   in the input, it also appears before   in the output). 
 We could sort the list of words using this algorithm: stable sorting by column 5, then 4, then 3, then 2, then 1. 
In the end, it will be correctly sorted.  Convince yourself of that. (by the way, that algorithm is called radix sort) 
 Now to answer your question, suppose we have a list of first and last names.  We are asked to sort "by last name, then by first".  We could first sort (stable or unstable) by the first name, then stable sort by the last name.  After these sorts, the list is primarily sorted by the last name.  However, where last names are the same, the first names are sorted. 
 You can't stack unstable sorts in the same fashion. 
 
 A stable sorting algorithm  is the one that sorts the identical elements in their same order as they appears in the input, whilst unstable sorting  may not  satisfy the case. 
 Stable Sorting Algorithms:  
 
 Insertion Sort  
 Merge Sort  
 Bubble Sort 
 Tim Sort 
 Counting Sort 
 
 Unstable Sorting Algorithms: 
 
 Heap Sort 
 Selection sort 
 Shell sort 
 Quick Sort 
 
 
 
 Sorting stability means that records with the same key retain their relative order before and after the sort. 
 So stability matters if, and only if, the problem you're solving requires retention of that relative order. 
 If you don't need stability, you can use a fast, memory-sipping algorithm from a library, like heapsort or quicksort, and forget about it. 
 If you need stability, it's more complicated. Stable algorithms have higher big-O CPU and/or memory usage than unstable algorithms. So when you have a large data set, you have to pick between beating up the CPU or the memory. If you're constrained on both CPU and memory, you have a problem. A good compromise stable algorithm is a binary tree sort; the  Wikipedia article  has a pathetically easy C++ implementation based on the STL. 
 You can make an unstable algorithm into a stable one by adding the original record number as the last-place key for each record. 
 
 There's a few reasons why stability can be important.  One is that, if two records don't need to be swapped by swapping them you can cause a memory update, a page is marked dirty, and needs to be re-written to disk (or another slow medium).   
 
 It depends on what you do. 
 Imagine you've got some people records with a first and a last name field. First you sort the list by first name. If you then sort the list with a stable algorithm by last name, you'll have a list sorted by first name AND last name. 
 
 A sorting algorithm is said to be stable if two objects with equal keys appear in the same order in sorted output as they appear in the input unsorted array. Some sorting algorithms are stable by nature like Insertion sort, Merge Sort, Bubble Sort, etc. And some sorting algorithms are not, like Heap Sort, Quick Sort, etc. 
 However, any given sorting algo which is not stable can be modified to be stable. There can be sorting algo specific ways to make it stable, but in general, any comparison based sorting algorithm which is not stable by nature can be modified to be stable by changing the key comparison operation so that the comparison of two keys considers position as a factor for objects with equal keys. 
 References:
 http://www.math.uic.edu/~leon/cs-mcs401-s08/handouts/stability.pdf 
 http://en.wikipedia.org/wiki/Sorting_algorithm#Stability 
 
 I know there are many answers for this, but to me,  this answer , by  Robert Harvey , summarized it much more clearly: 
 
 A stable sort is one which preserves the original order of the input set, where the [unstable] algorithm does not distinguish between two or more items. 
 
 Source 
 
 If you assume what you are sorting are just numbers and only their values identify/distinguish them (e.g. elements with same value are identicle), then the stability-issue of sorting is meaningless.  
 However, objects with same priority in sorting may be distinct, and sometime their relative order is meaningful information. In this case, unstable sort generates problems. 
 For example, you have a list of data which contains the time cost [T] of all players to clean a maze with Level [L] in a game.
Suppose we need to rank the players by how fast they clean the maze. However, an additional rule applies: players who clean the maze with higher-level always have a higher rank, no matter how long the time cost is. 
 Of course you might try to map the paired value [T,L] to a real number [R]  with some algorithm which follows the rules and then rank all players with [R] value. 
 However, if stable sorting is feasible, then you may simply sort the entire list by [T] (Faster players first) and then by [L]. In this case, the relative order of players (by time cost) will not be changed after you grouped them by level of maze they cleaned. 
 PS: of course the approach to sort twice is not the best solution to the particular problem but to explain the question of poster it should be enough. 
 
 Stable sort will always return same solution (permutation) on same input. 
 For instance [2,1,2] will be sorted using stable sort as permutation [2,1,3] (first is index 2, then index 1 then index 3 in sorted output) That mean that output is always shuffled same way. Other non stable, but still correct permutation is [2,3,1]. 
 Quick sort is not stable sort and permutation differences among same elements depends on algorithm for picking pivot. Some implementations pick up at random and that can make quick sort yielding different permutations on same input using same algorithm. 
 Stable sort algorithm is necessary deterministic. 
 