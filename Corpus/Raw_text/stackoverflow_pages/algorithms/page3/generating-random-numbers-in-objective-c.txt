*** generating-random-numbers-in-objective-c ***
https://stackoverflow.com/questions/160890/generating-random-numbers-in-objective-c/163178

 I'm a Java head mainly, and I want a way to generate a pseudo-random number between 0 and 74. In Java I would use the method: 
 
 I'm not interested in a discussion about seeds or true randomness, just how you accomplish the same task in Objective-C. I've scoured Google, and there just seems to be lots of different and conflicting bits of information. 
 
 You should use the   function. It uses a superior algorithm to  . You don't even need to set a seed. 
 
 The   man page: 
 
 
 
 
 Use the   function to generate a random number within a range.   The following will generate a number between 0 and 73 inclusive. 
 
  avoids  modulo bias  as described in the man page: 
 
 arc4random_uniform() will return a uniformly distributed random number less than upper_bound.  arc4random_uniform() is recommended over constructions like ``arc4random() % upper_bound'' as it avoids " modulo bias " when the upper bound is not a power of two. 
 
 
 Same as C, you would do 
 
 (assuming you meant including 0 but excluding 74, which is what your Java example does) 
 **Edit:**
 Feel free to substitute   or   for   (which is, as others have pointed out, quite sucky). 
 
 I thought I could add a method I use in many projects. 
 
 If I end up using it in many files I usually declare a macro as 
 
 E.g. 
 
 **Note: Only for iOS 4.3/OS X v10.7 (Lion) and later**

 
 This will give you a  **floating point**
 number between 0 and 47 
 
 Or just simply 
 
 Both lower and upper bound can be  **negative**
 as well. The example code below gives you a random number between -35.76 and +12.09 
 
 Convert result to a rounder  **Integer**
 value: 
 
 
 According to the manual page for rand(3), the rand family of functions have been obsoleted by random(3). This is due to the fact that the lower 12 bits of rand() go through a cyclic pattern. To get a random number, just seed the generator by calling srandom() with an unsigned seed, and then call random(). So, the equivalent of the code above would be 
 
 You'll only need to call srandom() once in your program unless you want to change your seed. Although you said you didn't want a discussion of truly random values, rand() is a pretty bad random number generator, and random() still suffers from modulo bias, as it will generate a number between 0 and RAND_MAX. So, e.g. if RAND_MAX is 3, and you want a random number between 0 and 2, you're twice as likely to get a 0 than a 1 or a 2. 
 
 Better to use  . However, this isn't available below iOS 4.3. Luckily iOS will bind this symbol at runtime, not at compile time (so don't use the #if preprocessor directive to check if it's available). 
 The best way to determine if   is available is to do something like this: 
 
 
 I wrote my own random number utility class just so that I would have something that functioned a bit more like Math.random() in Java. It has just two functions, and it's all made in C. 
 Header file: 
 
 Implementation file: 
 
 It's a pretty classic way of generating pseudo-randoms. In my app delegate I call: 
 
 Then later I just say: 
 
 Note that this method returns a random number between 0.0f (inclusive) and 1.0f (exclusive). 
 
 There are some great, articulate answers already, but the question asks for a random number between 0 and 74. Use: 
 
 
 Generate random number between 0 to 99: 
 
 Generate random number between 500 and 1000: 
 
 
 As of iOS 9 and OS X 10.11, you can use the new GameplayKit classes to generate random numbers in a variety of ways. 
 You have four source types to choose from: a general random source (unnamed, down to the system to choose what it does), linear congruential, ARC4 and Mersenne Twister. These can generate random ints, floats and bools. 
 At the simplest level, you can generate a random number from the system's built-in random source like this: 
 
 That generates a number between -2,147,483,648 and 2,147,483,647. If you want a number between 0 and an upper bound (exclusive) you'd use this: 
 
 GameplayKit has some convenience constructors built in to work with dice. For example, you can roll a six-sided die like this: 
 
 Plus you can shape the random distribution by using things like  . 
 
 //The following example is going to generate a number between 0 and 73. 
 
 **Output:**

 
 random number:  **72**
  
 random number step 2:  **52**
  
 
 
 For game dev use random() to generate randoms. Probably at least 5x faster than using arc4random(). Modulo bias is not an issue, especially for games, when generating randoms using the full range of random(). Be sure to seed first. Call srandomdev() in AppDelegate. Here's some helper functions: 
 
 