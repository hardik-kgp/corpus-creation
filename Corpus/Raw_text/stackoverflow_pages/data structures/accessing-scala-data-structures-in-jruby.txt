*** accessing-scala-data-structures-in-jruby ***

 It looks like there's some magic translation between Java data structures when accessing them from JRuby; they appear to work like plain ruby maps and arrays. However, Scala data structures don't. I found surprisingly little when googling around for JRuby / Scala interop. How would you, for instance, iterate over Scala's   and   types? 
 
 Sure you can. But it's a bit of hoop-jumping. For lists: 
 
 Now you have a scala list in jruby. You could write some nice Ruby API filling in the implicits for you. 
 
 If by "iterate over" you mean use the HOFs (higher-order functions) such as  ,  ,   ,   and so on then you're going to have trouble. It's possible, but the syntactic elegance you get in Scala comes because it's so easy to write function literals. What the compiler is doing for you when you write something like this: 
 
 ... is create and instantiate a subclass of   whose   method takes the single   argument an evaluates the body of the function literal ( ). 
 For you to use any Scala method that accepts a function you'll have to do the same. Something like: 
 
 Overall, it's vastly easier to use Java libraries from Scala than it is to use Scala code from any other JVM language. That's why systems like Akka that want to support both Scala and Java clients have special Java APIs that avoid these parts of the Scala language. 
 