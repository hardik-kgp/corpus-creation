*** complex-data-structures-in-haskell ***

 After reading  http://learnyouahaskell.com/  I still don't understand, how complex data structures are built in Haskell. 
 One example: 
 I have many locations, each location is able to hold exactly one item. Each item is able to be positioned at exactly one location. Locations und items have both a name and some additional informations (I leave them out here). Each location and each item is unique by its name. 
 This problem is in the context of an optimization problem, where a list of short transports should be built. This means, that the objects are just read once and then they get never manipulated. There exist more types, which are all linked together by instance fields in an object-oriented design. 
 My first thought (from my knowledge of object-oriented design) would be: 
 
 Since there are no references, only values in Haskell, I expect that to be an endless recursion. 
 
 With this approach I can't get the location, when I only have the item. 
 My second thought is: 
 
 Well, this way I have to give methods, which need the item of a location, two parameters: The location und the map. When it's getting more complex, i would end up with many maps.
Second reason against this approach: The type system does not restrict the locations and items to be linked to only one of the other. The map (or better associative list) can map one location to many items. 
 I don't understand how such complex structures are built in Haskell. 
 So how is it possible to build such a data structure in Haskell? 
 
 
 Since there are no references, only values in Haskell, I expect that to be an endless recursion. 
 
 Still, it's possible: 
 
 However, this doesn't enforce your rules, as there are now  two  locations that claim to own the toothbrush. If you don't export the constructors, you can still enforce this: 
 
 
 Still, nothing is preventing you from using  . But at this point, you haven't said how you would identify single items or locations (probably via name). 
 Note that you probably want to use  . That being said, it's not really clear how you want to manipulate a location or an item, and how those manipulations should reflect on the rest of your locations. Depending on what you  actually  want to do, you might end up using   together with two  . 
 
 Ok, that above just shows you how you could deal with recursive data types. How would one actually approach your problem? Lets try to build an interface: 
 
 Now, this can be generalized. Instead of   and  , we can support   and  . We gain: 
 
 Note that you shouldn't export  's constructor.   and   will ensure that if you take out a left value, the right value will also be deleted. Note that in our case using one of them is sufficient, as   stores both values symmetrically. 
 This requires you to have valid   instances for both   and  , which should be based on their unique attribute (in this case their name). If you already happen to have a   or   instance, which doesn't use only the name, use a   wrapper with the appropriate instance. 
 
 
 have many locations, each location is able to hold exactly one item. Each item is able to be positioned at exactly one location. Locations und items have both a name and some additional informations (I leave them out here). 
 
 So, items can only belong in one location, and a location holds exactly one item. so basically, you have a one to one relationship. 
 So, if a location has five attributes, and an items has three, your combined location-item has eight items. 
 But I suspect that the data structure you really want is not as trivial as what you described... with more input from you I might be able to provide a better answer. 
 
 I'd say your   approach is along the right lines. If I understand you right, you want: 
 
 to be able to get the Item at a given Location (if there is one) 
 to get the Location of an Item. 
 Only one Item at a Location and one Location for an Item. 
 
 Well your requirement 1 maps to the following type signature: 
 
 So that's a function or a Map. Or a function made out of a Map, like this: 
 
 Having the extra parameter isn't really a problem and there are several ways to make it go away. For example, if you have the item locations in a map called  , then partially applying   gives you the function you want. 
 
 For your second requirement, getting the Location from an Item, I'd probably use another Map. The Maps enforce your third requirement. 
 There's one thing missing though: identity. In OOP, objects have identity (their memory address), but Haskell values don't. You will want to key the map from Item to Location by an Item identifier, not the Item itself. So your second map has the following type: 
 
 
 In Haskell, all objects are immutable, so you cannot distinguish a reference to an object from a copy of the object (and there is no need to). 
 In (imperative) OO, you want references because you want to share something that is mutable. 
 You need to unlearn this sharing "optimisation". 
 There are ways to simulate in Haskell, but mostly it's not needed, and there's a perfectly clear immutable solution. 
 E.g., "a location holds one item" - that's modelled by  .
But if your location later holds another item, then you need a another map. 
 
 What is the main? Maybe a pair of Location and Item. 
 
 And use it: 
 
 