*** converting-java-collections-to-clojure-data-structures ***

 I am creating a Clojure interface to a Java API with a method that returns a java.util.LinkedHashSet.  
 Firstly, is the idiomatic Clojure way of handling this to convert the LinkedHashSet to a clojure data structure? 
 Secondly, what is the best method for converting Java collections into Clojure data structures? 
 
 There are lots of options, since Clojure plays very nicely with Java collections. It depends on exactly what data structure you want to use in Clojure.  
 Here's some examples: 
 
 Regarding when to use each of these, I'd suggest the following advice: 
 
 If you are trying to wrap a Java library and present a clean Clojure API, then I'd suggest converting to the equivalent Clojure data structures. This is what Clojure users will expect, and you can hide the potentially messy Java interop details. As a bonus, this will make things immutable so that you don't run the risk of Java collections mutating while you use them. 
 If you just want to use the Java API quickly and efficiently, just use Java interop directly on the Java collections. 
 
 
 The idiomatic way to convert java collections to clojure is to use the (seq) function, which is already called by most functions operating on sequences. 
 
 
 I honestly don't know if there's a universally accepted practice, but here's Chris Houser  arguing  against Java to Clojure adapters as you break compatibility with the original Java API. 
 To perform the translation you asked for, simply use  into : 
 
 