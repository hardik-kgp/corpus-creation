*** creating-a-copy-of-a-database-in-postgresql ***

 What's the correct way to copy entire database (its structure and data) to a new one in pgAdmin? 
 
 Postgres allows the use of any existing database on the server as a template when creating a new database. I'm not sure whether pgAdmin gives you the option on the create database dialog but you should be able to execute the following in a query window if it doesn't: 
 
 Still, you may get: 
 
 To disconnect all other users from the database, you can use this query: 
 
 
 A command-line version of  Bell's answer : 
 
 This should be run under the privileges of the database master, usually postgres. 
 
 To clone an existing database with postgres you can do that  
 
 IT will kill all the connection to the source db avoiding the error 
 
 
 In production environment, where the original database is under traffic, I'm simply using: 
 
 
 Don't know about pgAdmin, but   gives you a dump of the database in SQL. You only need to create a database by the same name and do  
 
 to restore all of the tables and their data and all access privileges. 
 
 First,   as the database user: 
 
 Go to PostgreSQL command line: 
 
 Create the new database, give the rights and exit: 
 
 Copy structure and data from the old database to the new one: 
 
 
 I pieced this approach together with the examples from above.  I'm working on an "under load" server and got the error when I attempted the approach from @zbyszek.  I also was after a "command line only" solution.  
 .   
 Here's what worked for me ( Commands prepended with   to move output into a file and protect from a server disconnect ): 
 
 
 
 
 my user is "postgres" 
 
 
 
 In pgAdmin you can make a backup from your original database, and then just create a new database and restore from the backup just created: 
 
 Right click the source database, Backup... and dump to a file. 
 Right click, New Object, New Database... and name the destination. 
 Right click the new database, Restore... and select your file. 
 
 
 What's the correct way to copy entire database (its structure and data) to a new one in pgAdmin? 
 Answer: 
 
 Tried and tested. 
 
 PostgreSQL 9.1.2: 
 
 
 For those still interested, I have come up with a bash script that does (more or less) what the author wanted. I had to make a daily business database copy on a production system, this script seems to do the trick. Remember to change the database name/user/pw values. 
 
 
 From the  documentation , using   or   with templates is not encouraged: 
 
 Although it is possible to copy a database other than template1 by
  specifying its name as the template, this is not (yet) intended as a
  general-purpose “COPY DATABASE” facility. The principal limitation is
  that no other sessions can be connected to the template database while
  it is being copied. CREATE DATABASE will fail if any other connection
  exists when it starts; otherwise, new connections to the template
  database are locked out until CREATE DATABASE completes. 
 
  or   is a good way to go for copying database AND ALL THE DATA. If you are using a GUI like pgAdmin, these commands are called behind the scenes when you execute a backup command. Copying to a new database is done in two phases: Backup and Restore 
  saves all of the databases on the PostgreSQL cluster. The disadvantage to this approach is that you end up with a potentially very large text file full of SQL required to create the database and populate the data. The advantage of this approach is that you get all of the roles (permissions) for the cluster for free. To dump all databases do this from the superuser account 
 
 and to restore 
 
  has some compression options that give you much smaller files. I have a production database I backup twice a day with a cron job using 
 
 where   is the compression level (0 to 9) and   tells pg_dump to add commands to create the database. Restore (or move to new cluster) by using 
 
 where newdb is the name of the database you want to use. 
 Other things to think about 
 PostgreSQL uses ROLES for managing permissions. These are not copied by  . Also, we have not dealt with the settings in  **postgresql.conf**
 and  **pg_hba.conf**
 (if you're moving the database to another server). You'll have to figure out the conf settings on your own. But there is a trick I just discovered for backing up roles. Roles are managed at the cluster level and you can ask   to backup just the roles with the   command line switch.  
 
 To create database dump 
 
 To resote database dump  
 
 
 If the database has open connections, this script may help. I use this to create a test database from a backup of the live-production database every night. This assumes that you have an .SQL backup file from the production db (I do this within webmin). 
 
 
 Using pgAdmin, disconnect the database that you want to use as a template. Then you select it as the template to create the new database, this avoids  getting the already in use error.  
 
 Here's the whole process of creating a copying over a database using only pgadmin4 GUI (via backup and restore) 
 Postgres comes with Pgadmin4. If you use macOS you can press  +  and type   to run it. This will open up a browser tab in chrome.  
 
 Steps for copying 
 **1. Create the backup**

 Do this by rightclicking the database -> "backup" 
 
 **2. Give the file a name.**

 Like  . Click backup. This creates a binary file dump, it's not in a   format 
 
 **3. See where it downloaded**

 There should be a popup at the bottomright of your screen. Click the "more details" page to see where your backup downloaded to 
 
 **4. Find the location of downloaded file**

 In this case, it's  
 
 **5. Restore the backup from pgadmin**

 Assuming you did steps 1 to 4 correctly, you'll have a restore binary file. There might come a time your coworker wants to use your restore file on their local machine. Have said person go to pgadmin and restore 
 Do this by rightclicking the database -> "restore" 
 
 **6. Select file finder**

 Make sure to select the file location manually, DO NOT drag and drop a file onto the uploader fields in pgadmin. Because you will run into error permissions. Instead, find the file you just created: 
 
 **7. Find said file**

 You might have to change the filter at bottomright to "All files". Find the file thereafter, from step 4. Now hit the bottomright "Select" button to confirm 
 
 **8. Restore said file**

 You'll see this page again, with the location of the file selected. Go ahead and restore it 
 
 **9. Success**

 If all is good, the bottom right should popup an indicator showing a successful restore. You can navigate over to your tables to see if the data has been restored propery on each table. 
 **10. If it wasn't successful:**

 Should step 9 fail, try deleting your old public schema on your database. Go to "Query Tool" 
 
 Execute this code block: 
 
 
 Now try steps 5 to 9 again, it should work out 
 
 If you want to copy whole schema you can make a pg_dump with following command: 
 
 And when you want to import that dump, you can use: 
 
 More info about connection strings:  https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-CONNSTRING 
 Or then just combining it in one liner: 
 
 
 
 Open the Main Window in pgAdmin and then open another Query Tools Window  
 In the main windows in pgAdmin, 
 
 Disconnect the "templated" database that you want to use as a template.  
 
 Goto the Query Tools Window 
 
 Run 2 queries as below 
 
 (The above SQL statement will terminate all active sessions with TemplateDB and then you can now select it as the template to create the new TargetDB database, this avoids getting the already in use error.) 
 
 
 Try this: 
 
 gl XD 
 