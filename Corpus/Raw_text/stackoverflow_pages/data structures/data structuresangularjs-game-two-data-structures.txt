*** angularjs-game-two-data-structures ***

 so, I've recently started in AngularJS and I'm building a HTML game with it. For someone who has just worked with Jquery and less complex libraries/frameworks until now, I must admit it has been a huge headache. 
 My main problem (which makes me stop and have to find a hack around in every feature I want to develop) is that I have two main data structures that get served to the client: the playerData and the gameData. 
 The playerData contains all data belonging to the current user and gets pulled from the database in JSON format. It is constantly being updated and synced between server and client: 
 
 
 
 
 
 The gameData contains all information about the game itself. It gets loaded from a static JSON file when the server loads up and served to the client: 
 
 
 
 
 
 Of course, this is an over-simplification, but anyway... In the client-side, I load up angular, call for both data structures via ajax and begin rendering. I have to run the playerData to render items and for each item I have to look for its ID in gameData to retrieve its information. It seems simple enough, but inside my directives and filters, I have to constantly call the parent scope or pass the gameData as a parameter (since in filters, for instance, I don't have access to the controller's scope) and things started to become a bit messed and hacked up. This is making me lose A LOT of time on workarounds instead of focusing in the development. 
 It seems to me that angular was not made to be used that way, like I should use just one data structure. But I can see other problems ahead with this approach, like making manipulation of inventory a lot harder, having a lot of duplicated data and wasted processing, and it seems wrong enough architectural-wise for me not to try it. 
 So, finally, my question is: is there a better approach for this? Or should I just dump angular and start again in a more suitable framework? 
 