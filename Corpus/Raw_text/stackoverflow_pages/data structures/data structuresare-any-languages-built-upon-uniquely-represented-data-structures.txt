*** are-any-languages-built-upon-uniquely-represented-data-structures ***

 Copying immutable data is benign but wasteful of space. The reverse operation, sharing equal immutable data structures, can be used to reduce memory requirements and offer constant time equality, perfect hashing and dictionary lookup (e.g. for memoization). Maximal sharing can be achieved using techniques like  hash consing  and results in uniquely represented data structures. A related concept is  history-independent data structures  but their focus is security. 
 I recently noticed whilst studying  this benchmark  that it is easy to adopt a unique representation and that it dramatically improves memory consumption and performance. Specifically, by referring to a symbolic expression as an integer index into a table that gives its constituent subexpressions and assigning the next consecutive integer when a never-before-seen expression is encountered. Furthermore, this representation is arguably more natural than the traditional (unshared) functional one when solving such problems in lower-level languages like C and C++. Symbolic, logic and dynamic programs (e.g.  OCaml's Boyer benchmark ) are well known to perform much better when hash consing is used to give their data structures unique representations so this result is not surprising or new. 
 However, using hash consing from traditional languages is cumbersome which begs the question: do any programming languages automatically use unique representations for their primitive data structures? 
 For example, consider a mini-ML-like type system with integers, variables, tuples and unions. The construction of values of any type is easily hash consed using the technique I described above so all structurally-identical data will be maximally shared. Are there any programming languages that do this? If not, is there a show-stopping reason not to do this? 
 Some background reading: 
 
 Uniquely Represented Data Structures for Computational Geometry 
 Confluently persistents Sets and Maps 
 B-Treaps: A Uniquely Represented Alternative to B-Trees 
 Purely functional uniquely-represented deques 
 
 