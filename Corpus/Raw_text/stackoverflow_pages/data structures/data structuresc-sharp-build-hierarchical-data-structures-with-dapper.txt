*** c-sharp-build-hierarchical-data-structures-with-dapper ***

 I have a table of employees that looks like the following tables. Every column is apart of a composite primary key and thus also a foreign key in the child tables:  
 
 
 
 I have created the following c# models to house this data: 
 
 I then have a repository in which I want to use dapper to populate the data in its entirety. Traditionally, in a non hierarchical implementation I would just do something such as the following:  
 
 what makes me unsure is the most performant way to use dapper to build my desired data structure (at the company class level) such that the single company class contains a list of departments, departments have a list of employees.  
 I've tinkered with multiple queries and using several loops build the structure but it just seems so clunky and i cant quite get it right.  
 So here is the formal question:  
 **How do we build nested enumerable objects to represent hierarchical data structures using dapper?**

 
 As your employee records contain all the hierarchy information, there is no need to go back to the database in further queries. Just get the leaf employee records and then group them to form the hierarchy in memory: 
 
 This would work on employee records from source, not just Dapper. 
 