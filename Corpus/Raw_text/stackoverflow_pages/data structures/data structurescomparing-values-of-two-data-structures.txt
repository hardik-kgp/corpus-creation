*** comparing-values-of-two-data-structures ***

 I have two data structures:  
 
 These have been filled. typeone has been filled till typeone[5] and typetwo till typetwo[8]. 
 I just want to compare the first six of typeone and typetwo and see if there are equal in all their members. 
 Is there a way to do   
Basically comparing all the values inside the datastructure at [1]. 
Is there a short way to do this or would I have to loop through each member and compare separately? 
 Thanks 
 
 
 Note  . It ensures that there are no padding bytes in the structures. This way memcmp will not try to compare padding bytes and the comparison is way faster than a field-by-field method, but while in this case the performance is unlikely to be adversely affected, take: 
 
 Retrieving   will take much more machine code than in case of padded structures, because it will miss word-aligned position where it can be retrieved with a single 32-bit instruction, it will have to be picked out with four byte-reads, and then assembled into the target register from these four pieces. So, take the performance impact into account. 
 Also, check if your compiler supports  . Most modern compilers do, but exceptions may still happen. 
 
 This is a  comp.lang.c FAQ . In a nutshell, no, C does not support struct comparison with the   operator (the answer in the FAQ states a few reasons as to why this is hard in the general case). You have to write your own function and compare member by member. As was pointed out,   is  **not**
 a guaranteed way due to  unspecified behavior  when accessing padding bytes. 
 
 And then your example   becomes 
 
 
 To avoid the problem of padding, you have to compare the fields individually. This doesn't have to be all that horrible: 
 
 then just loop: 
 
 it's not that much code really, and of course you could trivially encapsulate the looping in a function that cross-compares the  n   first slots of two   arrays. 
 