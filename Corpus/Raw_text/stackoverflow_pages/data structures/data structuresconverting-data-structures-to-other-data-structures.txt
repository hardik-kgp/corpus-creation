*** converting-data-structures-to-other-data-structures ***

 I often need to convert some kind of data into other data (usually strings, arrays and hashes). For example: 
 
 input:  
 :  
 
 This can be done by: 
 
 but I want to use conversion at different places. So I need to provide encapsulated logic to achieve and reuse this. Three ways pop into mind: 
 
 Use a helper method (put a single method into a module): 
 
 Use a dedicated class with parameters: 
 
 Use refinements, using monkey patching to create a method on the data object but letting a caller decide if it should be included. 
 
 
 I'm not satisfied with any of them, but the third option seems the cleanest because that is usually what you would do if you deal with custom objects. But it also feels wrong because it's  monkey patching light. What are your thoughts? 
 
 It's great that you are approaching this from an OO perspective. 
 I like a variation on your second suggestion, with a small difference-- use an object, but don't instantiate it. 
 
 As long as this class is only going to do one thing, once, I can't think of a good reason to persist it in memory. 
 The benefits of this approach are that you're encapsulating the logic in the   class, without writing another module (the first option in your question), or changing the expected behavior of the   class (the third option). It's a dedicated class for this transformation that you can use anywhere you need it. 
 