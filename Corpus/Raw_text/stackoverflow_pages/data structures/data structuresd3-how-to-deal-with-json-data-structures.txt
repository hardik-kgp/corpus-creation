*** d3-how-to-deal-with-json-data-structures ***

 I'm new to D3, and spent already a few hours to find out anything about dealing with structured data, but without positive result.
I want to create a bar chart using data structure below.
Bars are drawn (horizontally), but only for user "jim". 
 
 Could anyone point what I did wrong? 
 
 When you  join data  to a selection via  selection.data , the number of elements in your data array should match the number of elements in the selection. Your data array has two elements (for Jim and Ray), but the selection you are binding it to only has one SVG element. Are you trying to create multiple SVG elements, or put the score rects for both Jim and Ray in the same SVG element? 
 If you want to bind both data elements to the singular SVG element, you can wrap the data in another array: 
 
 Alternatively, use  selection.datum , which binds data directly without computing a join: 
 
 If you want to create multiple SVG elements for each person, then you'll need a data-join: 
 
 A second problem is that you shouldn't use  d3.values  with an array; that function is for extracting the values of an object. Assuming you wanted one SVG element per person (so, two in this example), then the data for the rect is simply that person's associated scores: 
 
 If you haven't already, I recommend reading these tutorials: 
 
 Thinking with Joins 
 Nested Selections 
 
 
 This may clarify the nested aspect, in addition to mbostock's fine answer. 
 Your data has 2 degrees of nesting.  You have an array of 2 objects, each has an array of ints.  If you want your final image to reflect these differences, you need to do a join for each. 
 Here's one solution:  Each user is represented by a group   element, with each score represented by a  .  You can do this a couple of ways:  Either use   on the svg, then an identity function on each  , or you can directly join the data on the  .  Using   on the   is more typical, but here are both ways: 
 **Using datum on the svg:**

 
 **Using data on the group (**
**) element:**

 
 Again, you don't have to create these g elements, but by doing so I can now represent the user scores differently (they have different y from the transform) and I can also give them different styles, like this: 
 
 