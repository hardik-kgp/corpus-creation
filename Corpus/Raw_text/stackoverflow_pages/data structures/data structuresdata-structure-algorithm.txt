*** data-structure-algorithm ***

 how to Arrange the below data structures in ascending order of the time complexity required for inserts in average case scenario.
1. Sorted Array
2. Hash Table
3. Binary Search Tree
4. B+ Tree 
 
 In this answer, I will give you a starters on each data structure, and let you complete the rest on your own. 
 
 Sorted Array: In a sorted array of size  , the problem with each
insertion is you are first need to find the index   where the
element should be inserted (easy), and then shift all elements
i,i+1,...,k to the right in order to "make place" for the new
element. This takes   time, and it's actually   moves on average.
 So, the average complexity to insert elements to a sorted array is  .
 Use  sum of arithmetic progression  to see what is its complexity. 
 A hash table offers   Average amortized case performance for inserting elements.  What happens when you do   operations, each  ? What will be the total coplexity? 
 In a Binary Search Tree (BST), each operation is  , where   is the current height of the tree. Luckily, when adding elements at random to a binary search tree (even non self balancing)  its average height is still  .
 So, to get the complexity of adding all elements, you need to sum  
 See hint at the end 
 Similarly to a BST, a B+ tree also takes   time per insertion. Difference is,   is bounded to be logarithimic as well even in worst case. So, the calculation of time complexity is going to remain   when calculating average case. 
 
 Hints: 
 
 
  is in  
 
 