*** data-structure-for-text-editor ***

 This is an interview question. What data structure would you use to store the text in a text editor? 
 
 On good old ZX-Spectrum one (or more, I do not know) text exditor used very simple structure. 
 There was one big buffer, which occupied all free RAM. Text was split in two parts at the cursor. Part before the cursor, was placed at the beginning of the buffer, and the rest at the end of the buffer. As text typed, data simply added to the end of first part, and when cursor is moved, text is copied forth and back. 
 Buffer layout: 
 
 That's, how some edit operations was made: 
 
 Buffer in action: 
 
 
 Rope 
 
 A rope is essentially a binary tree whose leaves are arrays of characters. A node in the tree has a left child and a right child - the left child is the first part of the string, while the right child is the final part of the string. Concatenation of two ropes simply involves the creation of a new tree node with both ropes as children. To ensure logarithmic time indexing and sub-string operations the resulting rope may need to be balanced. Various balancing strategies are possible. 
 The main advantages of ropes as compared to storing strings as character arrays is that they enable much faster concatenation than ordinary strings, and don't require a large contiguous memory space to store a large string. The main disadvantages are greater overall space usage and slower indexing, both of which become more severe as the tree structure becomes larger and deeper. However, many practical applications of indexing involve only iteration over the string, which remains fast as long as the leaf nodes are large enough to benefit from cache effects. 
 
 
 I know it's too late for an answer, but I found  The Craft of Text Editing  book really useful. It contains description of several buffer models with their pros and cons. Unfortunately, it doesn't mention Ropes data structure. 
 
 You might find this interesting, even if it does not exactly answer your question: 
 Most efficient data structure to add styles to text 
 I am hoping that the discussion will go to fascinating places :-) 
 
 As @Vovanium already mentioned the basic theory of how gap buffer can be used, I have implemented a version of C/C++. 
 **Code:**

 
 