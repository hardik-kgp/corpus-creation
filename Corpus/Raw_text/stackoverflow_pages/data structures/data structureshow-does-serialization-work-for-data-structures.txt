*** how-does-serialization-work-for-data-structures ***

 How does serialization work for data structures containing pointers, such as trees and linked list? 
 The reason why I get this doubt is, the pointer stores the memory address of the node. And upon serialization followed by deserialization, there is no guarantee that they will be loaded in the same memory location. Also, if the serialized data is sent across a network to another system, the same problem arises. 
 So how does is work ( if at all it works )? 
 
 Java doesn't have pointers. A variable in Java is a  reference  to a piece of data. Essentially, what this means is that you treat the variable just as you would treat the  actual data , and Java takes care of the "pointer logic" for you (unlike, say, C, in which you must handle your own pointer logic). 
 When a class is serialized, all of the information contained in its  references --that is, all of its member variables--must be serialized with it. You can think of this as recursively expanding each reference into a copy of the actual data referenced. 
 In a language that  does  include pointers (for instance, C), implementing serialization/deserialization methods that store and unpack pointers rather than the data each pointer references will indeed lead to you having arbitrary pointers in your deserialized data. (I.e., the serialization/deserialization will be incorrect.) 
 
 Pointers are references. When the serialized encounters a reference it will serialize it recursively, that's why all members have to be serializable, too. It will not store a physical address but instead build its own table, so that it can skip an object if it has been visited already. On deserialization it will build the new model from that table. 
 
 A pointer is a reference to a specific location on the memory of the machine executing the program that has the pointer and it said pointer you may have some data. 
 When you serialize something you're supposed to serialize the data itself, not a reference, which would be pointless since if you had the data on the other end then why transmit it at all? 
 