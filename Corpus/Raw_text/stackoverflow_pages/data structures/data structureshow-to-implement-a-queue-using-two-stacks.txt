*** how-to-implement-a-queue-using-two-stacks ***

 Suppose we have two stacks and no other temporary variable. 
 Is to possible to "construct" a queue data structure using only the two stacks? 
 
 Keep 2 stacks, let's call them   and  . 
 **Enqueue**
: 
 
 Push the new element onto  
 
 **Dequeue**
: 
 
 If   is empty, refill it by popping each element from   and pushing it onto  
 Pop and return the top element from  
 
 Using this method, each element will be in each stack exactly once - meaning each element will be pushed twice and popped twice, giving amortized constant time operations. 
 Here's an implementation in Java: 
 
 
 A - How To Reverse A Stack 
 To understand how to construct a queue using two stacks, you should understand how to reverse a stack crystal clear. Remember how stack works, it is very similar to the dish stack on your kitchen. The last washed dish will be on the top of the clean stack, which is called as  **L**
ast  **I**
n  **F**
irst  **O**
ut (LIFO) in computer science. 
 Lets imagine our stack like a bottle as below; 
 
 If we push integers 1,2,3 respectively, then 3 will be on the top of the stack. Because 1 will be pushed first, then 2 will be put on the top of 1. Lastly, 3 will be put on the top of the stack and latest state of our stack represented as a bottle will be as below; 
 
 Now we have our stack represented as a bottle is populated with values 3,2,1. And we want to reverse the stack so that the top element of the stack will be 1 and bottom element of the stack will be 3. What we can do ? We can take the bottle and hold it upside down so that all the values should reverse in order ? 
 
 Yes we can do that, but that's a bottle. To do the same process, we need to have a second stack that which is going to store the first stack elements in reverse order. Let's put our populated stack to the left and our new empty stack to the right. To reverse the order of the elements, we are going to pop each element from left stack, and push them to the right stack. You can see what happens as we do so on the image below; 
 
 So we know how to reverse a stack. 
 B - Using Two Stacks As A Queue 
 On previous part, I've explained how can we reverse the order of stack elements. This was important, because if we push and pop elements to the stack, the output will be exactly in reverse order of a queue. Thinking on an example, let's push the array of integers   to a stack. If we pop the elements and print them until the stack is empty, we will get the array in the reverse order of pushing order, which will be   Remember that for the same input, if we dequeue the queue until the queue is empty, the output will be  . So it is obvious that for the same input order of elements, output of the queue is exactly reverse of the output of a stack. As we know how to reverse a stack using an extra stack, we can construct a queue using two stacks. 
 Our queue model will consist of two stacks. One stack will be used for   operation (stack #1 on the left, will be called as Input Stack), another stack will be used for the   operation (stack #2 on the right, will be called as Output Stack). Check out the image below; 
 
 Our pseudo-code is as below; 
 
 **Enqueue Operation**

 
 **Dequeue Operation**

 
 
 Let's enqueue the integers   respectively. Integers will be pushed on the  **Input Stack**
 ( **Stack #1**
) which is located on the left; 
 
 Then what will happen if we execute a dequeue operation? Whenever a dequeue operation is executed, queue is going to check if the Output Stack is empty or not(see the pseudo-code above) If the Output Stack is empty, then the Input Stack is going to be extracted on the output so the elements of Input Stack will be reversed. Before returning a value, the state of the queue will be as below; 
 
 Check out the order of elements in the Output Stack (Stack #2). It's obvious that we can pop the elements from the Output Stack so that the output will be same as if we dequeued from a queue. Thus, if we execute two dequeue operations, first we will get   respectively. Then element 3 will be the only element of the Output Stack, and the Input Stack will be empty. If we enqueue the elements 4 and 5, then the state of the queue will be as follows; 
 
 Now the Output Stack is not empty, and if we execute a dequeue operation, only 3 will be popped out from the Output Stack. Then the state will be seen as below; 
 
 Again, if we execute two more dequeue operations, on the first dequeue operation, queue will check if the Output Stack is empty, which is true. Then pop out the elements of the Input Stack and push them to the Output Stack unti the Input Stack is empty, then the state of the Queue will be as below; 
 
 Easy to see, the output of the two dequeue operations will be  
 C - Implementation Of Queue Constructed with Two Stacks 
 Here is an implementation in Java. I'm not going to use the existing implementation of Stack so the example here is going to reinvent the wheel; 
 C - 1) MyStack class : A Simple Stack Implementation 
 
 C - 2) MyQueue class : Queue Implementation Using Two Stacks 
 
 C - 3) Demo Code 
 
 C - 4) Sample Output 
 
 
 You can even simulate a queue using only one stack. The second (temporary) stack can be simulated by the call stack of recursive calls to the insert method.  
 The principle stays the same when inserting a new element into the queue:  
 
 You need to transfer elements from one stack to another temporary stack, to reverse their order.  
 Then push the new element to be inserted, onto the temporary stack 
 Then transfer the elements back to the original stack 
 The new element will be on the bottom of the stack, and the oldest element is on top (first to be popped) 
 
 A Queue class using only one Stack, would be as follows: 
 
 
 The time complexities would be worse, though.  A good queue implementation does everything in constant time. 
 **Edit**

 Not sure why my answer has been downvoted here.  If we program, we care about time complexity, and using two standard stacks to make a queue is inefficient.  It's a very valid and relevant point.  If someone else feels the need to downvote this more, I would be interested to know why. 
 A little more detail : on why using two stacks is worse than just a queue: if you use two stacks, and someone calls dequeue while the outbox is empty, you need linear time to get to the bottom of the inbox (as you can see in Dave's code). 
 You can implement a queue as a singly-linked list (each element points to the next-inserted element), keeping an extra pointer to the last-inserted element for pushes (or making it a cyclic list).  Implementing queue and dequeue on this data structure is very easy to do in constant time.  That's worst-case constant time, not amortized.  And, as the comments seem to ask for this clarification, worst-case constant time is strictly better than amortized constant time. 
 
 Let queue to be implemented be q and stacks used to implement q be stack1 and stack2.  
 q can be implemented in  **two**
 ways: 
 **Method 1 (By making enQueue operation costly)**

 This method makes sure that newly entered element is always at the top of stack 1, so that deQueue operation just pops from stack1. To put the element at top of stack1, stack2 is used. 
 
 **Method 2 (By making deQueue operation costly)**

 In this method, in en-queue operation, the new element is entered at the top of stack1. In de-queue operation, if stack2 is empty then all the elements are moved to stack2 and finally top of stack2 is returned. 
 
 Method 2 is definitely better than method 1. Method 1 moves all the elements twice in enQueue operation, while method 2 (in deQueue operation) moves the elements once and moves elements only if stack2 empty. 
 
 A solution in c# 
 
 
 Two stacks in the queue are defined as  stack1  and  stack2 . 
 **Enqueue:**

The euqueued elements are always pushed into  stack1 
 **Dequeue:**

The top of  stack2  can be popped out since it is the first element inserted into queue when  stack2  is not empty. When  stack2  is empty, we pop all elements from  stack1  and push them into  stack2  one by one. The first element in a queue is pushed into the bottom of  stack1 . It can be popped out directly after popping and pushing operations since it is on the top of  stack2 . 
 The following is same C++ sample code: 
 
 This solution is borrowed from  my blog . More detailed analysis with step-by-step operation simulations is available in my blog webpage. 
 
 You'll have to pop everything off the first stack to get the bottom element. Then put them all back onto the second stack for every "dequeue" operation. 
 
 **for c# developer here is the complete program :**

 
 
 
 
 An implementation of a queue using two stacks in Swift: 
 
 
 While you will get a lot of posts related to implementing a queue with two stacks :
1. Either by making the enQueue process a lot more costly
2. Or by making the deQueue process a lot more costly 
 https://www.geeksforgeeks.org/queue-using-stacks/ 
 One important way I found out from the above post was constructing queue with only stack data structure and the recursion call stack. 
 While one can argue that literally this is still using two stacks, but then ideally this is using only one stack data structure. 
 Below is the explanation of the problem: 
 
 Declare a single stack for enQueuing and deQueing the data and push the data into the stack. 
 while deQueueing have a base condition where the element of the stack is poped when the size of the stack is 1. This will ensure that there is no stack overflow during the deQueue recursion. 
 While deQueueing first pop the data from the top of the stack. Ideally this element will be the element which is present at the top of the stack. Now once this is done, recursively call the deQueue function and then push the element popped above back into the stack. 
 
 The code will look like below: 
 
 This way you can create a queue using a single stack data structure and the recursion call stack. 
 
 Below is the solution in javascript language using ES6 syntax. 
 **Stack.js**

 
 **QueueUsingTwoStacks.js**

 
 Below is the usage: 
 **index.js**

 
 
 Implement the following operations of a queue using stacks. 
 push(x) -- Push element x to the back of queue. 
 pop() -- Removes the element from in front of queue. 
 peek() -- Get the front element. 
 empty() -- Return whether the queue is empty.   
 
 
 
 I'll answer this question in Go because Go does not have a rich a lot of collections in its standard library. 
 Since a stack is really easy to implement I thought I'd try and use two stacks to accomplish a double ended queue. To better understand how I arrived at my answer I've split the implementation in two parts, the first part is hopefully easier to understand but it's incomplete. 
 
 It's basically two stacks where we allow the bottom of the stacks to be manipulated by each other. I've also used the STL naming conventions, where the traditional push, pop, peek operations of a stack have a front/back prefix whether they refer to the front or back of the queue. 
 The issue with the above code is that it doesn't use memory very efficiently. Actually, it grows endlessly until you run out of space. That's really bad. The fix for this is to simply reuse the bottom of the stack space whenever possible. We have to introduce an offset to track this since a slice in Go cannot grow in the front once shrunk. 
 
 It's a lot of small functions but of the 6 functions 3 of them are just mirrors of the other. 
 
 here is my solution in java using linkedlist. 
 
 } 
 **Note :**
 In this case, pop operation is very time consuming. So i won't suggest to create a queue using two stack.  
 
 With    , which is same as pythonquick's  answer : 
 
 With     (this is not mentioned in this post so this answer), which also uses backtracking to bubble up and return the bottommost item. 
 
 Obviously, it's a good coding exercise as it inefficient but elegant nevertheless. 
 
 
 For every enqueue operation, we add to the top of the stack1. For every dequeue, we empty the content's of stack1 into stack2, and remove the element at top of the stack.Time complexity is O(n) for dequeue, as we have to copy the stack1 to stack2. time complexity of enqueue is the same as a regular stack 
 
 Queue implementation using two java.util.Stack objects: 
 
 