*** implementing-complex-data-structures-in-c ***

 
 
 
 
 
 
 
 
                            As it currently stands, this question is not a good fit for our Q&A format. We expect answers to be supported by facts, references,   or expertise, but this question will likely solicit debate, arguments, polling, or extended discussion. If you feel that this question   can be improved and possibly reopened,  visit the help center  for guidance.
                            
                         
 
 
 Closed  6 years ago . 
 
 
 What's the solution you adopt when you have to implement complex data structures in C++? I mean different kind of objects that should be referenced by other ones and, at the same time, reference other ones. It is really different from the available standard library containers. 
 Do you try to make your code very C++ and use generic programming (container style template)? IMHO, it seems hard to implement and inconvenient, and it could make the code harder to understand or to work with. Moreover, do you implement any kind of iterator? 
 Or maybe, on the other hand, you end up with "C style code"? I mean, in each class you implement a few pointers as member variables that reference other objects in order to build the suitable data structure. 
 According to your experience, what are the advantages and disadvantages of these two approaches? Any other solution? 
 
 There are a couple of guidelines that I follow when writing complex data structures in C++: 
 
 Avoid raw pointers; use smart pointers. 
 Try to figure out early on if your data structure is cyclic or acyclic.  If there are cycles in your data structure you won't be able to used share_ptr everywhere without creating a leak.  At some point in your cyclic structure you want to break the cycle with a weak_ptr, so that objects can be released. 
 If my object holds onto other objects, and I want it to be a container, I implement the appropriate iterators  when I need them, and not one second before .  I usually need iterator support when I want to use one of the STL algorithms on my container.  I could, of course, implement iterators that don't match the STL (in terms of naming or semantics) for my own use, but then I've added yet another way to do things in my code.  I try to avoid that. 
 If my class is intended to hold different types, then I use templates to express that.   There are ways to do this in C (using memcpy, etc), but while the code you'll end up with will be more understandable to C coders, you will lose most of the benefits of C++ (type safety, assignment operators, etc). 
 
 