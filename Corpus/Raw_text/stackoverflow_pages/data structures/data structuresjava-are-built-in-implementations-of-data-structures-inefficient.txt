*** java-are-built-in-implementations-of-data-structures-inefficient ***

 
 
 
 
 
 
 
 
                            As it currently stands, this question is not a good fit for our Q&A format. We expect answers to be supported by facts, references,   or expertise, but this question will likely solicit debate, arguments, polling, or extended discussion. If you feel that this question   can be improved and possibly reopened,  visit the help center  for guidance.
                            
                         
 
 
 Closed  6 years ago . 
 
 
 One big reason I like to use Java (as compared to say, C) is that there are lots of built in data structures available (like the Collections API). However, are the implementations of these data structures sub-optimal? For better performance, will I be better off writing my own implementations? 
 
 I would not waste any time re-implementing any of the classes in Java's Collections library until I had a concrete performance problem to solve.  The built-in classes have been tested by thousands of people.  They're proven to work, and they're performant for most general use cases.  I've found that most of the time when I find a performance issue with a Collection class, it's because someone chose the wrong data structure for the problem, not the wrong implementation of that data structure. 
 
 The built-in implementations are very fast (they've been built with performance in mind) and are fast enough for the vast majority of applications. 
 Whether it's fast enough for your case will depend on your application and your hardware, for example if you have a fast CPU, but memory is constrained or vice versa can make a huge difference. 
 If you're developing something that  needs  to be extremely performant, I'd suggest starting by creating a little test project with the kind of data load and processing level you need to support to give yourself extra confidence that it will be fast enough running on your target hardware. If it's not, you may be able to tweak the algorithms, buy better hardware, use caching etc. or switch to a language that is "closer to the metal". 
 Be careful not to fall into the trap of optimizing everything - usually it's only a very small part of the application that needs to be optimized. 
 
 The greatest strength of the JCF is the flexibility not necessarily the performance; it has a great design that permits you to easily change from one collection to another. It has utility classes for making them thread safe, immutable etc. or you can implement your own custom collections (by implementing the interface and compose it with the nearest existing implementation): 
 
 If you are really pressed by performance issues then you probably should use good old arrays, but in the majority of the cases this is not necessarily.  
 However you should know a little about the internals of JCF in order to obtain the best performance out of them; from a point of view they can be criticized because they tend to consume large amounts of memory. 
 Some basic things: it's good to know that the sorting used is merge sort which sorts in-place sorting but is a little slower than quick sort. You should predict the size of the collection you are going to use and pass it as a value to the constructor and not always rely on the default value. Another important thing is to choose the proper collection; don't use a Map when a List would do because it takes way more memory. You should also make sure that you don't keep useless empty collections around, because they too take memory. You can find a great article about collections and memory usage  here . 
 