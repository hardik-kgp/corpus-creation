*** java-data-structures-simple-question ***

 Say I want to work with a linked list in java. I thought that the best way to create one is by: 
 List list =  new LinkedList(); 
 But I noticed that this way I can only use methods on the list that are generic. I assume that the implementation is different among the different data structures. 
 So if I want to use the specific methods for linked list, I have to create the list by: 
 LinkedList list =  new LinkedList(); 
 What's the main reason for that? 
 Tnanks. 
 
  is an interface that abstracts the underlying list implementation.  It is also implemented by e.g.  . 
 However, if you specifically want a  , there is nothing wrong with writing  .  In fact, if you just pass it around as a list, people may (not knowing the implementation) unknowingly write algorithms like: 
 
 which are linear on a random access list (e.g.  ) but quadratic on a   (it would be preferable to use a iterator or list iterator).  Java provides the  RandomAccess  marker interface so you can distinguish. 
 Of course, you can call these methods on a reference of type   too, but people should be more likely to consider the cost. 
 As a note, in .NET   does not implement   for this reason. 
 
 The first idiom allows you to change the runtime type that list points to without modifying any client code that uses it. 
 What methods in LinkedList do you think you need that aren't in List?  You can always cast for those. 
 But the whole idea behind interfaces is to shield clients from how the interface is implemented.   
 If you really need a LinkedList, so be it.  But I prefer the first idiom, because most of the time I really just need List methods. 
 
 Every LinkedList is a List, too. That also means that you can do everything with a LinkedList that you can do with a List and that you can store a LinkedList as List. However, when you store it as List, you can only call methods of the LinkedList that a List also has. 
 By the way: This is not Generics. Generics are like this: 
 
 
 
 Here you're saying that it's a list. You have no idea whether or not it's a   or an   or whatever. It is an abstract thing (I assume you mean "abstract" by the word "generic", since  generics  are a different thing entirely). Thus you can't treat it like it's an   -- you have to treat it like it's a   (which it is). 
 The fact that "you know" that it's a   is all well and good, and you can safely cast if you need to do it. But it might help to tell the compiler that it's a  , by declaring it as so, if it's always going to act as a  . 
 