*** merge-sort-with-other-data-structures ***

 It seems that in a lot of text books top down Merge Sort is done with arrays given its advantage of random access. 
 I am wondering if there is a way of doing Merge Sort with other data structures? Say the data is stored in a queue or a stack, is it possible to do Merge Sort on the queue/stack with at most another auxiliary queue/stack? 
 My main concern is that since there is no random access, would merge sort in this case still be able to reach O(n logn) efficiency? 
 
 An additional advantage of using an array with merge sort is that if you write clever (but incomprehensible) algorithm you can switch the "scratch" array and the "real" array between levels of recursive calls. In any implementation of merge sort worth its salt will allocate the "scratch" array only once, but with the switching technique, you only have to move your results at most once. 
 With stacks and queues you will likely use an array anyway as an underlying data structure. You can use linked lists, but then the constant factors in   and   or   and   grow larger, as you'll also have to allocate the memory for your items. Clearly, as  **@LearnedfromMistake**
 shows, using stacks and queues is possible, but given that arrays are likely to be used as an underlying data structure anyway, it is not clear what the advantage of such an approach would be. 
 