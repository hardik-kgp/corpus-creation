*** non-tree-data-structures-in-haskell ***

 Making tree like data structures is relatively easy in Haskell. However, what if I want a structure like the following: 
 
 So if I traverse down the structure through B to update E, the returned new updated structure also has E updated if I traverse through C. 
 Could someone give me some hints about how to achieve this? You can assume there are no loops. 
 
 I would flatten the data structure to an array, and operate on this instead: 
 
 Given some traverse directions (left, right, stop), it's easy to see that if we go left, we simply add the current level to our position, and if we go right, we also add the current position plus one: 
 
 In your case, you want to traverse either ABE or ACE: 
 
 Since we already now how to get the position of your element, and   provides some functions to set/get specific elements, we can use the following functions to get/set tree values: 
 
 To complete the code, lets use your example: 
 
 And put everything to  action : 
 
 Note that this is most-likely not the best way to do this, but the first thing that I had in mind. 
 
 Once you've established identity, it can be done. 
 But first you must establish identity. 
 In many languages, values can be distinct from each other, but equal. In Python, for example: 
 
 You want to update E in one branch of the tree, and also update all other elements for which that element  is  E. But Haskell is referentially transparent: it has no notion of things being the same object; only equality, and even that is not applicable for every object. 
 One way you could do this is equality.  Say this was your tree: 
 
 Then we could go through the tree and update all the 2s to, say, four. But this isn't exactly what you want in some cases. 
 In Haskell, if you want to update one thing in multiple places, you'll have to be explicit about what  is  and  isn't  the same thing. Another way you could deal with this is to tag each different value with a unique integer, and use that integer to determine identity: 
 
 Then we could update all values with an identity of 2. Accidental collisions cannot be a problem, as there can be no collisions except those that are intentional. 
 This is essentially what   and   do, except they hoist the actual value into the monad's state and hide the identities from you. The only downside of using these is you'll need to make much of your code monadic, but you're probably not going to get away from that easily whatever you do. ( Modifying  values rather than replacing them is an inherently effectful thing to do.) 
 The structure you gave was not specified in much detail so it's impossible to tailor an example to your use case, but here's a simple example using  the   monad  and a  : 
 
 Observe that although we only explicitly modified the value of the left E value, it changed on the right side, too, as desired. 
 
 I should note that these are not the only ways. There are probably many other solutions to this same problem, but they all require you to define identity sensibly. Only once that has been done can one begin the next step. 
 