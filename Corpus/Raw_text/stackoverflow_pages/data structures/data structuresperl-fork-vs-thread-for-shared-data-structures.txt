*** perl-fork-vs-thread-for-shared-data-structures ***

 I am writing a script where I need to share data structures among multiple processes. Currently I am forking, which worked great when I only needed to share simple variables (i.e. $var, @arr, %hash). However more recently I've been trying to share more complex variables, such as a hash of hashes, and I've been running into a lot of trouble. I've tried using  IPC::Shareable ,  DBM::Deep , and  forks::shared , but they all seem to have issues sharing more complex data structures, like a hash of hashes. What I'm wondering is for a situation like mine, would it be better to use forks or threads? I like the fork syntax because it seems easy to use, but if I'm jumping through a lot of unnecessary hoops when thread would be a lot simpler, I'd definitely like to switch.  
 UPDATE 
 Share means the separate processes need to both read and write to the data structures. 
 I am running Perl 5.8 on Centos5.5 
 
 You provided absolutely no information about your sharing patterns, so I'll assumes you're using a worker model (which is what you really should be using), which means the data is shared via a message queue. 
 If so, the answer is "it doesn't matter". Use you choice of   or  , and use  Thread::Queue::Any  as your inter-task communicate channel. 
 