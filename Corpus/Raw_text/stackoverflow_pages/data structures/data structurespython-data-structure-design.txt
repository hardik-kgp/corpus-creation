*** python-data-structure-design ***

 The data structure should meet the following purpose: 
 
 each object is unique with certain key-value pairs 
 the keys and values are not predetermined and can contain any string value 
 querying for objects should be fast 
 
 Example: 
 
 
  should return  
 
 Optimally this structure is implemented with the standard python data structures available through the standard library. 
 How would you implement this? 
 
 The simplest solution I can think of is to use sorted tuple keys: 
 
 Another option would be to come up with your own hashing scheme for your keys (either by wrapping them in a class or just using numeric keys in the dictionary), but depending on your access pattern this may be slower. 
 
 I think  SQLite  or is what you need. It may not be implemented with standard python structures but it's available through the standard library. 
 
 Say   is a dict, which it pretty much looks like. Your   seems to be a standard dict with keys like  ; in other words,   so that they're always listed in a defined order. 
 The reason for the defined ordering is because   isn't guaranteed to return a list in a given ordering. If your dictionary key is  , you don't want a false negative just because you're searching for  . Sorting the values is probably the quickest way to protect against that. 
 