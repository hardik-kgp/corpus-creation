*** strategies-to-learn-data-structures-especially-the-code-part ***

 
 
 
 
 
 Closed.  This question is  off-topic . It is not currently accepting answers.
                            
                         
 
 
 
 
 
 
 
 
 
 
 Want to improve this question?   Update the question  so it's  on-topic  for Stack Overflow.
                         
 Closed  last year . 
 
 
 
 I'm self-taught data structures and algorithms. I just wonder what is the best way to learn data structures and algorithms, especially for the "reading fundamentals" phase.  
 I'm not sure if it is efficient if I try to memorize the code in books before turning to problems. 
 
 Don't just memorise code; that won't get you very far. Instead, understand it. (If you are finding that hard, find a better resource.)  Why  does it do that? 
 Data structures are always something I've always found make intuitive sense, and that's because I saw through the code. A 1D list? One thing after another. 2D list? A list of numbers, and several lists at the positions indicated by the numbers (like the Table of Contents in a book). A linked list? A sort of conga line, where each item is holding onto the next (but they're probably not in an orderly row). Look at each data structure you come across, and work out what it looks like and what it's for. 
 Algorithms are a bit trickier. Let's take merge sort as an example. It splits a list roughly in half, sorts each sub-list, then merges them back together by taking the smallest number from the top of each pile. Because they're sorted, the top of each pile is guaranteed to be smaller than the rest of the pile, so the smallest number out of the tops of the two piles is guaranteed to be the smallest overall and so the next item in the correctly sorted list. 
 Since merge sort sorts lists, you can use it as its own "sort each sub-list" function. In order to stop that carrying on forever, though, it needs to check for a 1-long list at the beginning and return that list, since that's already sorted and it would carry on forever if it split that, sorted it by splitting it and sorting it by splitting ... 
 There. Merge sort described in the way that I store it in my head. You'll see no code there, and that's because in different situations I'd implement it differently. In C code for a low-RAM system I might make it sort a list pretty much in-place by alternating between two copies of the list, with only an O(n) heap and O(log n) stack requirement. I might even use a clever algorithm to remove the requirement for a stack to store indexes. In Python I might implement it with generators, so that it yields successive items of the sorted list. And so on. 
 If you understand the algorithms and data structures, it'll be a lot easier to learn them. So try to work out what they mean and what they do. 
 
 