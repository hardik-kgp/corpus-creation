*** worst-cases-for-various-data-structures ***

 I'm working on compiling a list for the efficiency of operations on different data structures. 
So far, I've got this: 
 
 I'm not so sure of what i've got here for the queue as linked list and for the stack as linked list. can anyone lend any insight into this issue? 
 
 The only error is that   for   should be  . 
 For completeness, it may be worth it to list complexity for operations such as search for any element, remove any element, get by index, remove by index, etc. 
 **Queue as linked-list (pointer to front):**

 Push:  You need to insert an element at the end, but you only have a pointer to the beginning, so you need to iterate through all elements to get to the end. 
 
 Pop:  You need to remove the element in the beginning, so you'd do this by simply reassigning the pointer to the beginning to the second element. 
 
 **Queue as linked-list (pointer to front and back):**

 Push:  You need to insert an element at the end, and you have a pointer to the end, so you can just add it in constant time. 
 
 Pop:  Same as pop for single linked-list. 
 
 **Stack as linked-list:**

 Push:  Insert an item in the beginning, easy to do in constant time. 
 
 Pop:  Remove the first item, easy to do in constant time. 
 
 **Stack as array:**

 Push:  Insert item at last index, easy to do in constant time. 
 
 Pop:  Remove item at last index, easy to do in constant time. 
 
 