*** data-structures-for-organization-hierarchy ***

 I want to represent organization hierarchy in a data structure.
There are several kind of employees like: CEO, president, director, manager, engineer etc. The data structure is to be chosen in such a manner that queries can be performed efficiently over the data, say: 
 
 Find top 5 managers based on total employees working under them. 
 Find total employees whose salary is greater than $5000 USD. 
 Find and fire all the employees whose experience is less than 2 year etc. 
 
 Say there are many different attributes in all kind of employees. 
 Which data structure is most suitable in this case?  
 Requirements: Space and time optimized queries are to be served. 
 Edit: I am not looking for SQL table. I want to design appropriate data structures for this scenario. 
 
 Most data structures, like B-trees, Hash tables, Tries, Radix trees, etc, map a single key to a payload.  Some (like Radix Tree / Radix Trie) are optimized for string keys. 
 You're asking for something that can answer queries on multiple different fields.  Your requirements look essentially the same as what a relational database needs to quickly answer such queries on a table. 
 As I understand it, that's done by having a separate index (e.g. B-tree) for each field.  So a range-query on one field just uses the index for that field.  Modifying the table means updating all the other indices, though. 
 If you need to answer range queries, a hash table is a poor choice for an index.  Some kind of tree, like a B-tree or balanced binary tree (e.g. red-black tree) could be good.  Or maybe a  Radix Trie  for string-like fields. 
 IDK how to efficiently update the other indices after a delete request on one index.  Maybe just have to find/remove each key individually. 
 If you want to know how to do this, just as a learning exercise, look at how SQL DBs do it.  You might find they need some features that you don't want to implement, so you can simplify things.  (e.g. maybe you don't need it to be transactional, so queries that fail part-way-through can still delete some entries.) 
 