*** data-structures-implementation ***

 
 
 
 
 
 Closed . This question needs to be more  focused . It is not currently accepting answers.
                            
                         
 
 
 
 
 
 
 
 
 
 
 Want to improve this question?  Update the question so it focuses on one problem only by  editing this post .
                         
 Closed  last year . 
 
 
 
 Data Structures like arrays, linked list, queue, stack, binary tree etc exist. A language like Java or C++ has already implemented them for the most part and API's exist which can be used in any program or application. Based on need, a specific data structure can be selected.  
 My question is what is the need to know the implementation details. Is it not enough to just know for example, arrays can be used instead of linked list if search is a recurring task of the program.  
 I am new and might be naive in even asking such a question. Even interviews focus so much on how they are implemented. Please help me understand.  
 Thank you! 
 
 Since most of the programs, in order to be useful, need to store and process some sort of data, having good data structures for representing that data is vital and, in some cases, even critical for the performance of the program. 
 This being said, arrays, linked lists, binary trees, and so on are the basic data structures available and their usefulness is being proven by the fact that they are available in a lot of libraries. A deep understanding of them allows you to choose the best data structure for the task. 
 Understanding the implementation of such data structures is a good way of understanding how they work, their disadvantages and advantages. Of course, you can read them theoretically, and you can get enough understanding of them in order to be able to efficiently use the implementations provided in libraries. The problem is that this is not the end of the story. 
 As a programmer, you are very often in the position of manipulating different kinds of data which might not fit very well one of the standard data structures. You very often write your own data structures, customized for a specific task. And seeing how some basic data structures are implemented serves not only as a good exercise, but also as a source of inspiration in some cases. 
 As for the interviews, their scope is to asses your abilities as a programmer. Implementing a basic data structure shows: 
 
 The familiarity of the candidate with the basic data structures 
 The way the candidate writes code/provides some starting point for debates around code (e.g. code quality, performance tricks) 
 Is not linked to a specific problem, i.e. you don't waste valuable time in the interview explaining the problem 
 They are usually simple enough  such that they can be completed in the time required for the interview 
 
 Moreover, as a beginner programmer, they are a good practice exercise to introduce some common patterns and techniques that can be applied to other situations. 
 
 The goal of these questions in the context of interviewing, is to have the person being interviewed demonstrate that they have a command of the language and that they are cable of thinking abstractly in the manner that a computer scientist would. 
 As is especially the case in object-oriented languages like Java and C++; programming often attempts to model the real world. If you are talking about a sorting algorithm, you could just as easily apply the algorithm to a bunch of numbered post-it notes and end up with a sorted collection of post-it notes. Or looking at data structures, you could apply similar models to restaurant order tickets (priority queue, linked list,  hopefully not a stack? ).  
 Because most software engineering positions are going to likewise require an applicant to write software that models a real world thing (such as perhaps, having a conversation over the internet instead of via carrier pigeon), the algorithm/data structure-type questions show the interviewer that the applicant is capable of coding software in a deliberate manner to perform or model a real-world task. 
 From a more practical standpoint, the pre-built data structures in Java and C++ have to be designed to work with a wide multitude of inputs. Building a map, that can handle any combination of Object:Object storage requires a lot more overhead than implementing a map that will only ever deal with Integer:String parings.  
 If you end up in a role where milliseconds/bytes matter, it is plausible that you will need to manually construct/tune a data structure designed for a specific purpose. A prime example of this, is Java's lack of a built-in radix sort. The logic behind this, is that radix sort's optimization only comes into play in very niche situations (when you need to sort only primitives, based on their binary values  **Fast!**
; because of this, it makes better sense to leave the implementation up to developers if their specific situation actually calls for needing to use radix sort. 
 All in all, these problems are  **difficult!**
 Despite what seasoned programmers might say, the first time someone asks you to code a graph traversal algorithm on a whiteboard, or build an optimized search algorithm from scratch at your job, it's going to be tough, whether you've studied or not.  
 