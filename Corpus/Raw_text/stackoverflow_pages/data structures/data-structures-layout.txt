*** data-structures-layout ***

 
 
 
 
 
 Closed . This question is  opinion-based . It is not currently accepting answers.
                            
                         
 
 
 
 
 
 
 
 
 
 
 Want to improve this question?  Update the question so it can be answered with facts and citations by  editing this post .
                         
 Closed  4 months ago . 
 
 
 
 I have a disagreement with my colleague about sending/receiving a data structure between two machines (Also with different compilers) by UART.
Our data structure has several simple variable types as its fields (like int32, uint8 and etc).
In his opinion, to have a data structure with the same sequence and alignment in their fields, we have to use serializer and deserializer. Otherwise, Our code has the potential of different struct layout between two sides. 
 But I did it without using serializer/deserializer many times and never saw any problem.
I think using from the  , guarantee our purpose. Because of most differences in each compiler (In data structures compiling) occurs in fields alignment due to padding for speedup or size optimization. (Ignore the different of endianness). 
 For more details, We want to send/receive a struct between a Cortex-M4 (IAR) and PC (Qt in windows) by UART currently. 
 Am I in a wrong way? Or my friend?! 
 
 This is, I'm afraid, fundamentally a question of opinion, that can never be fully resolved. 
 For what it's worth, I am adamantly, vociferously with your colleague.  I believe in writing explicit serializers and deserializers.  I don't believe in blatting out an in-memory data structure and hoping that the other side can slurp it down without error.  I don't believe in ignoring endianness differences.  I believe that "blatting it out" will inevitably fail, in the end, somewhere, and I don't want to run that risk.  I believe that although the explicit de/serializers may seem to be more trouble to write up front, they save time in the long run because of all the fussing and debugging you  don't  have to do later. 
 But there are also huge swaths of programmers (I suspect a significant majority) who agree entirely with you: that given enough hacking, and suitable pragmas and packing directives, you can get the "blat it out" technique to work at least most of the time, and it may be more efficient, to boot.  So you're in good company, and with as many people as there are out there who obviously agree with you, I can't tell you that you're wrong. 
 