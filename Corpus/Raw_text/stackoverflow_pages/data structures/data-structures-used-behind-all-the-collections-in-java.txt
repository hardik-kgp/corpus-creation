*** data-structures-used-behind-all-the-collections-in-java ***

 Recently I was quizzed by interviewer when he asked me to give the data structures behind all the collections in java e.g. ArrayList,Map etc.
Aren't these data structures themselves?
If not, then which data structures back them? 
 
 Underlying data structure for ArrayList is Array, for LinkedList is Link object and for HashMap is Array of LinkedList or Tree. Hope this helps. 
 
 As the  java  sources provide all the implementation details, I'll just expose a bunch of the most used  : 
 
 
 
 
 The implementation of   falls back internally to an   of  . 
 
 Since   have fixed size,   at each   call, recreates, if necessary   via native calls to  . 
 
 
 
 
 s work over object references rather than  s. All items   are stored into instances of the internal    : 
 
 where each   keeps a pointer to its next and previous siblings. 
 A   will only keep a reference to its first and last elements, ergo random access is not supported: 
 
 
 
 
 
 They store keys and values into an internal bundle class  . 
 Nodes are stored via the function call   into a Node  : 
 
 Additionally,  s use a   collection that constantly reflects the elements in  . 
 
  is then exposed as an iterable  : 
 
 
 
 
 
 Funny thing is   uses an   which, as we have seen is backed by a   again. 
 
 You'll see the body of   is kind of limited compared to those of other   data structures as most of its operations are just a fallback to its internal   structure. 
 E.g:  
 
 
 
 
 