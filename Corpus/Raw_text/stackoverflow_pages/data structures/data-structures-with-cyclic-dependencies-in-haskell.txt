*** data-structures-with-cyclic-dependencies-in-haskell ***

 I'm trying to implement simple parser in haskell using   library (for learning purposes). So I wrote bunch of data structutes and related functions like this: 
 
 It works fine. Now I want to split this stuff into two modules to separate   and   data structures (because of readability issues). But I can't! The reason is cyclic dependency between   and  . 
 So, is there any way to solve this problem ? 
 
 The typical way I break dependency cycles is by parameterizing something out.  In this case, your   module might do function parsers for your language, but expressed in such a way that it can do so no matter what the rest of the language is like.  Thus: 
 
 And 
 
 Thus the mutual recursion is abstracted into a simple recursion + parameterization.  I think parameterization is at least as important as separating different things into different files, so it's kind of nice (and kind of annoying) that one forces the other. 
 
 Haskell actually allows recursive modules, and GHC supports them (with a minor inconvenience of writing   files). See  How to compile mutually recursive modules . 
 I don't see anything wrong with using this feature here. 
 