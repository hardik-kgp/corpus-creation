*** delete-an-element-from-a-dictionary ***

 Is there a way to delete an item from a dictionary in Python? 
 Additionally, how can I delete an item from a dictionary to return a copy (i.e., not modifying the original)? 
 
 The   statement  removes an element: 
 
 However, this mutates the existing dictionary so the contents of the dictionary changes for anybody else who has a reference to the same instance. To return a  new  dictionary, make a copy of the dictionary: 
 
 The   constructor makes a  shallow copy . To make a deep copy, see the   module . 
 
 Note that making a copy for every dict  /assignment/etc. means you're going from constant time to linear time, and also using linear space. For small dicts, this is not a problem. But if you're planning to make lots of copies of large dicts, you probably want a different data structure, like a HAMT (as described in  this answer ). 
 
  mutates the dictionary. 
 
 If you want to keep the original you could just copy it. 
 
 I think your solution is best way to do it. But if you want another solution, you can create a new dictionary with using the keys from old dictionary without including your specified key, like this: 
 
 
 The  del statement  is what you're looking for. If you have a dictionary named foo with a key called 'bar', you can delete 'bar' from foo like this: 
 
 Note that this permanently modifies the dictionary being operated on. If you want to keep the original dictionary, you'll have to create a copy beforehand: 
 
 The   call makes a shallow copy. If you want a deep copy, use  . 
 Here's a method you can copy & paste, for your convenience: 
 
 
 There're a lot of nice answers, but I want to emphasize one thing. 
 You can use both   method and a more generic   statement  to remove items from a dictionary. They both mutate the original dictionary, so you need to make a copy (see details below). 
 **And both of them will raise a **
** if the key you're providing to them is not present in the dictionary:**

 
 and 
 
 You have to take care of this: 
 **by capturing the exception:**

 
 and 
 
 **by performing a check:**

 
 and 
 
 **but with **
** there's also a much more concise way - provide the default return value:**

 
 Unless you use   to get the value of a key being removed you may provide anything, not necessary  .
Though it might be that using   with   check is  **slightly**
 faster due to   being a function with its own complications causing overhead. Usually it's not the case, so   with default value is good enough. 
 
 As for the main question, you'll have to make a copy of your dictionary, to save the original dictionary and have a new one without the key being removed. 
 Some other people here suggest making a full (deep) copy with  , which might be an overkill, a "normal" (shallow) copy, using   or  , might be enough. The dictionary keeps a reference to the object as a value for a key. So when you remove a key from a dictionary this reference is removed, not the object being referenced. The object itself may be removed later automatically by the garbage collector, if there're no other references for it in the memory. Making a deep copy requires more calculations compared to shallow copy, so it decreases code performance by making the copy, wasting memory and providing more work to the GC, sometimes shallow copy is enough. 
 However, if you have mutable objects as dictionary values and plan to modify them later in the returned dictionary without the key, you have to make a deep copy. 
 **With shallow copy:**

 
 **With deep copy:**

 
 
 
 Result:  
 
 
 … how can I delete an item from a dictionary to return a copy (i.e., not modifying the original)? 
 
 A   is the wrong data structure to use for this. 
 Sure, copying the dict and popping from the copy works, and so does building a new dict with a comprehension, but all that copying takes time—you've replaced a constant-time operation with a linear-time one. And all those copies alive at once take space—linear space per copy. 
 Other data structures, like  hash array mapped tries , are designed for exactly this kind of use case: adding or removing an element returns a copy  in logarithmic time, sharing most of its storage with the original . 1 
 Of course there are some downsides. Performance is logarithmic rather than constant (although with a large base, usually 32-128). And, while you can make the non-mutating API identical to  , the "mutating" API is obviously different. And, most of all, there's no HAMT batteries included with Python. 2 
 The   library is a pretty solid implementation of HAMT-based dict-replacements (and various other types) for Python. It even has a nifty  evolver API  for porting existing mutating code to persistent code as smoothly as possible. But if you want to be explicit about returning copies rather than mutating, you just use it like this: 
 
 That   is exactly what the question is asking for. 
 If you've got mutable data structures like   and   embedded in the  , you'll still have aliasing issues—you can only fix that by going immutable all the way down, embedding  s and  s. 
 
 1. HAMTs have also become popular in languages like Scala, Clojure, Haskell because they play very nicely with lock-free programming and software transactional memory, but neither of those is very relevant in Python. 
 2. In fact, there  is  an HAMT in the stdlib, used in the implementation of  .  The earlier withdrawn PEP explains why.  But this is a hidden implementation detail of the library, not a public collection type. 
 
 Simply call del d['key']. 
 However, in production, it is always a good practice to check if 'key' exists in d. 
 
 
 No, there is no other way than 
 
 However, often creating copies of only slightly altered dictionaries is probably not a good idea because it will result in comparatively large memory demands. It is usually better to log the old dictionary(if even necessary) and then modify it. 
 
 
 
 
 this doesn't do any error handling, it assumes the key is in the dict, you might want to check that first and   if its not 
 
 Here a top level design approach: 
 
 I'm passing the dictionary and the key I want into my function, validates if it's a dictionary and if the key is okay, and if both exist, removes the value from the dictionary and prints out the left-overs. 
 Output:  
 Hope that helps! 
 
 Below code snippet will help you definitely, I have added comments in each line which will help you in understanding the code. 
 
 or you can also use dict.pop() 
 
 or the better approach is 
 
 
 Here's another variation using list comprehension: 
 
 The approach is based on an answer from this post:
 Efficient way to remove keys with empty strings from a dict 
 
 
 The following code will make a copy of dict   and delete items which are not in  
 
 