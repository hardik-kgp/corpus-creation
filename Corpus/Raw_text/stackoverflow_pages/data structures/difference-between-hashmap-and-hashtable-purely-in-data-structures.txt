*** difference-between-hashmap-and-hashtable-purely-in-data-structures ***

 What is the difference between   and    purely in context of data structures (and not in Java or any other language) ? 
 I have seen people using these terms interchangeably for the same concept. Does it have no difference at all  purely in context of data structures ? 
 
 In Computing Science terminology, a  map  is an associative container mapping from a key to a value.  In other words, you can do operations like "for key K remember value V" and later "for key K get the value".  A map can be implemented in many ways - for example, with a (optionally balanced) binary tree, or a hash table, or even a contiguous array of structs storing the key/value. 
 A  hash table  is a structure for storing arbitrary data, and that data does not necessarily consist of a separate key and value.  For example, I could have a hash table containing the values { 1, 10, 33, 97 }, which would be their own keys.  When there is no value distinct from the key, this is sometimes known as a "set", and with a hash table implementation a "hash set". 
 So, a hash table stores elements, each of which need not consist of distinct key and value components, but if it does then it's  also  a hash map. 
 
 The explaination between hashmap and hashtable is quite correct as it also fits to the header of a string hash map implementated in strmap.c where the stringmap is a hashtable for strings satisfying the properties of a key,value-structure. Here it says : 
 
 
 Here's the way I understand it: 
Hash Table:  what we call the concept in Computer Science 
Hash Map: what it is called in Java 
Hash Set (HashSet): the case where we only care about the unique keys (or you can see it as a Hash Table where we ignore the values, we just want to know what is the set of unique keys) 
 Or simply, 
Hash Table (CS) = HashMap (Java) = Dictionary (Python) 
Hash Set (CS) = HashSet (Java) = Set (Python) 
 
 C doesn't have any built-in containers (apart from arrays), so it's up to the individual implementor as to what they want to call it.  As far as C is concerned, HashMap vs. HashTable have no real meaning.     
 One  possible  distinction may be in how the backing store is set up.  A hash  table  may be a simple linear array of keys and values, indexed by hash.  A hash  map  may be a balanced tree ordered by key, along with a table that maps the hash to the tree node, allowing for both fast (O(1)) lookup  and  the ability to traverse the data in key order.   
 Or it could be something completely different.  Again, C doesn't have any sort of built-in container for this sort of thing, so the names don't really mean anything in a C context. 
 