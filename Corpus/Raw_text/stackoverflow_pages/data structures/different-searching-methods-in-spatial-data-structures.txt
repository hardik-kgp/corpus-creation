*** different-searching-methods-in-spatial-data-structures ***

 I am trying to write a spatial data structure (such as a   or a  ) which, given a point, will find the   closest points to it. 
 The issue with the data structures I mentioned above is that they support mostly a radial/region search. So they will obtain the points that are within a radius of   of a given point/node. 
 Altering those structures search for what I want would be inefficient. I am assuming I will need to repeat the radial search several times, starting from a short radial distance, and keep increasing it until I have the wanted   amount of points close to the given point. Of course, this defeats the whole purpose behind the data structure. 
 Almost all spatial data structures operate on radial search. What are other  efficient  search methods I could apply to a  , or any other spatial data structures I need to consider to achieve what I mean? Any suggestions? 
 
 I'm not sure that you are right in your assumptions.  The  Wikipedia article on kd-trees  indicates how the structure can be used to support finding the   nearest neighbours to a search point.  Yes, it is essentially a repetition of finding the nearest neighbour   times, but I'm not sure that you have a right to expect a more efficient performance from an algorithm over a  . 
 If that is not good enough for you perhaps you need to store your points in a different data structure. If   is small and bounded you could store your points in a weighted graph where the edge weights are, of course, the distances between points. 
 If   is neither small nor bounded you might employ a simple subdivision of space into   uniform cells (2D here, inflate to 3+D if necessary).  For each search point go straight to the cell which contains it, find the other points in the same cell.  If   of them are closer to the search point than the boundary of the cell, those are what you are looking for.  If not, search in the cells on the other side of the near boundaries too. 
 If you find yourself needing to support both radial/region searches and  x -nearest neighbour searches it's not the end of the world if you have to maintain 2 data structures, one to support each type of query. For many search problems the first step to an efficient solution is to put the data into the right structure for efficient searching. Making this decision depends on numbers you simply haven't provided us. 
 
 If you do call the search method several times over on a quadtree (which is what I've done a few times), then if you double the search radius on each call until you have correct number of points, the search is not that inefficient. 
 Assuming a 2d space, if the correct minimum radius to contain the X points is R1, and you keep on doubling until you find a radius R2 which contains them, then (a) R2 must be less than 2xR1 and (b) the area searched becomes 4 times bigger on each search, which (I think) gives you a worst case scenario of only half the area you've searched through actually being unnecessary (or thereabouts). 
 