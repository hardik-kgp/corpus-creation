*** does-standard-c-library-provides-linked-list-etc-data-structures ***

 Do standard C library implementations, especially  **glibc**
 (the GNU C Library) provide linked lists, stack et al. data structures, or do we have to roll our own? 
 Thanks. 
 
 The C  Standard does not provide data structures like linked list and stack.Some compiler implementations might provide their own versions but their usage will be non portable across different compilers.       
 So Yes, You have to write your own. 
 
 The C standard doesn't, glibc however provides lists, tail queues, and circular queues in   according to the  queue  man page those come from BSD and not POSIX. 
 
 There are hash tables, binary trees and binary search stuff in glibc.
Those are part of C89, C99 and/or POSIX.1 standards.
Some reason linked list is not there. 
 More info from man pages:  hsearch ,  tsearch  and  bsearch 
 **Note:**
 Some of those have bad design. For example:   allows only one hash table per process.  The GNU compiler, gcc/glibc, provides reentrant versions  ,  , and   that allow multiple hash tables.  See also Stack Overflow's  How to use  . 
 
 As such C does not provide data structures but you can use the  glib  provided by Gnome 
 Queue.h  ad  Tree.h  also provides you some Data structures 
 
 There's a hash table implementation in POSIX (and GLibc); see the manpages for hcreate/hdestroy/hsearch. 
 But, as mentioned, using glib is probably the easiest way to save yourself from reimplementing the basic data structure. 
 
 As other answers already stated, there isn't a linked list library in the standard library. 
 I've written one for my own use a while ago. You can freely use it or use the code as reference. 
 You can find it here:  libllist 
 