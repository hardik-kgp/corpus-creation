*** efficient-data-structures-for-data-matching ***

 What are the most efficient data structures for matching data?  For example, suppose I am presented with the follow scenario: 
 
 So that a file may contain: 
 
 Is it possible to match this last buy with the previous 100 sells in O(n) time, where n = 100 if the buy is to be matched with the lowest selling price corresponding to the company it wants to buy from (or the one that comes first in the case of a tie)? 
 I know a naive solution would be to sort the list and go in order, but this takes longer than O(n) time.  What are the most efficient data structures for handling this problem and similar ones to it? 
 
 Try using a hash map from company name to a heap of sell orders, ranked by price. Insertion of a sell order is now   and a buy order becomes constant if a buy doesn't use up a sell order, or   if it does (your problem statement doesn't specify) 
 
 As buying and selling will deal with same org , It is better to save all the buy (or) sell records in a map , like all yahoo records are be kept in a list which is hashed to a map with "yahoo" as key , this minimizes your search space . Sort with respect timestamp , price, quantity and then you can implement your desired function with a optimal cost with implementing this structure , At the time of insertion . Then for any query after this should take less time as search space was minimal . 
 