*** endswith-in-javascript ***

 How can I check if a string ends with a particular character in JavaScript? 
 Example: I have a string  
 
 I want to know if that string is ending with  . How can I check it? 
 
 Is there a   method in JavaScript? 
 One solution I have is take the length of the string and get the last character and check it. 
 
 Is this the best way or there is any other way? 
 
 **UPDATE (Nov 24th, 2015):**

 This answer is originally posted in the year 2010 (SIX years back.) so please take note of these insightful comments: 
 
 Shauna  - Update for Googlers - Looks like ECMA6 adds this function. The MDN article also shows a polyfill.  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith 
 T.J. Crowder  - Creating substrings isn't expensive on modern browsers; it may well have been in 2010 when this answer was posted. These days, the simple   approach is fastest on Chrome, the same on IE11 as indexOf, and only 4% slower (fergetaboutit territory) on Firefox:  jsperf.com/endswith-stackoverflow/14  And faster across the board when the result is false:  jsperf.com/endswith-stackoverflow-when-false   **Of course, with ES6 adding endsWith, the point is moot. :-)**

 
 
 **ORIGINAL ANSWER:**

 I know this is a year old question... but I need this too and I need it to work cross-browser so...  **combining everyone's answer and comments**
 and simplifying it a bit: 
 
 
 Doesn't create a substring 
 Uses native   function for fastest results 
 Skip unnecessary comparisons using the second parameter of   to skip ahead 
 Works in Internet Explorer 
 NO Regex complications 
 
 
 Also, if you don't like stuffing things in native data structure's prototypes, here's a standalone version: 
 
 
 **EDIT:**
 As noted by @hamish in the comments, if you want to err on the safe side and check if an implementation has already been provided, you can just adds a   check like so: 
 
 
 
 will work on all browsers, doesn't require monkey patching  , and doesn't require scanning the entire string as   does when there is no match. 
 If you want to match a constant string that might contain regular expression special characters, such as  , then you can use the following: 
 
 and then you can use it like this 
 
 
 
 Unfortunately not. 
 
 
 
 Come on, this is the correct   implementation: 
 
 using   just creates unnecessary CPU loops if there is no match. 
 
 This version avoids creating a substring, and doesn't use regular expressions (some regex answers here will work; others are broken): 
 
 If performance is important to you, it would be worth testing whether   is actually faster than creating a substring or not. (It may well depend on the JS engine you're using...) It may well be faster in the matching case, and when the string is small - but when the string is huge it needs to look back through the whole thing even though we don't really care :( 
 For checking a single character, finding the length and then using   is probably the best way. 
 
 Didn't see apporach with   method. So i'm just leave it here: 
 
 
 
 does not work in the case where original string length is one less than search string length and the search string is not found: 
 lastIndexOf returns -1, then you add search string length and you are left with the original string's length. 
 A possible fix is 
 
 
 From developer.mozilla.org  String.prototype.endsWith() 
 **Summary**

 The   method determines whether a string ends with the characters of another string, returning true or false as appropriate. 
 **Syntax**

 
 **Parameters**

 
 **searchString**
 :
The characters to be searched for at the end of this string. 
 **position**
 :
Search within this string as if this string were only this long; defaults to this string's actual length, clamped within the range established by this string's length. 
 
 **Description**

 This method lets you determine whether or not a string ends with another string. 
 **Examples**

 
 **Specifications**

 ECMAScript Language Specification 6th Edition (ECMA-262) 
 **Browser compatibility**

 
 
 
 -- Or -- 
 
 
 
 I hope this helps 
 
 the traditional way  
 
 
 I don't know about you, but: 
 
 Why regular expressions? Why messing with the prototype? substr? c'mon... 
 
 If you're using  lodash : 
 
 If not using lodash, you can borrow from its  source . 
 
 Just another quick alternative that worked like a charm for me, using regex: 
 
 
 I just learned about this string library: 
 http://stringjs.com/ 
 Include the js file and then use the   variable like this: 
 
 It can also be used in NodeJS by installing it: 
 
 Then requiring it as the   variable: 
 
 The web page also has links to alternate string libraries, if this one doesn't take your fancy. 
 
 
 
 So many things for such a small problem, just use this Regular Expression 
 
 
 
 
 
 
 Its been many years for this question. Let me add an important update for the users who wants to use the most voted chakrit's answer. 
 'endsWith' functions is already added to JavaScript as part of ECMAScript 6 (experimental technology) 
 Refer it here:  https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith 
 Hence it is highly recommended to add check for the existence of native implementation as mentioned in the answer. 
 
 
 
 A way to future proof and/or prevent overwriting of existing prototype would be test check to see if it has already been added to the String prototype. Here's my take on the non-regex highly rated version.  
 
 
 @chakrit's accepted answer is a solid way to do it yourself. If, however, you're looking for a packaged solution, I recommend taking a look at  underscore.string , as @mlunoe pointed out. Using underscore.string, the code would be: 
 
 
 if you dont want to use lasIndexOf or substr then why not just look at the string in its natural state (ie. an array) 
 
 or as a standalone function 
 
 
 
 
 After all those long tally of answers, i found this piece of code simple and easy to understand! 
 
 
 This is the implementation of endsWith : 
 String.prototype.endsWith = function (str) {
  return this.length >= str.length && this.substr(this.length - str.length) == str;
} 
 
 This is the implementation of endsWith :
 
 
 This builds on @charkit's accepted answer allowing either an Array of strings, or string to passed in as an argument. 
 
 This requires underscorejs - but can probably be adjusted to remove the underscore dependency. 
 
 
 **Benefits:**

 
 This version is not just re-using indexOf. 
 Greatest performance on long strings. Here is a speed test  http://jsperf.com/starts-ends-with/4 
 Fully compatible with ecmascript specification. It passes the  tests 
 
 
 Do not use regular expressions. They are slow even in fast languages. Just write a function that checks the end of a string. This library has nice examples:  groundjs/util.js .
Be careful adding a function to String.prototype. This code has nice examples of how to do it:  groundjs/prototype.js 
In general, this is a nice language-level library:  groundjs 
You can also take a look at lodash 
 
 all of them are very useful examples. Adding   will help us to simply call the method to check if our string ends with it or not, well regexp will also do it. 
 I found a better solution than mine. Thanks every one. 
 
 For coffeescript 
 
 