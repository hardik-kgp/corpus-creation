*** finding-median-without-data-structures ***

 (my code is written in Java but the question is agnostic; I'm just looking for an algorithm idea) 
 **So here's the problem:**
 I made a method that simply finds the median of a data set (given in the form of an array). Here's the implementation: 
 
 A teacher in the school that I go to then challenged me to write a method to find the median again, but without using any data structures. This includes anything that can hold more than one value, so that includes Strings, any forms of arrays, etc. I spent a long while trying to even conceive of an idea, and I was stumped. Any ideas? 
 
 The usual algorithm for the task is Hoare's Select algorithm. This is pretty much like a quicksort, except that in quicksort you recursively sort  both  halves after partitioning, but for select you only do a recursive call in the partition that contains the item of interest. 
 For example, let's consider an input like this in which we're going to find the fourth element: 
 [ 7, 1, 17, 21, 3, 12, 0, 5 ] 
 We'll arbitrarily use the first element ( ) as our pivot. We initially split it like (with the pivot marked with a *: 
 [ 1, 3, 0, 5, ] *7, [ 17, 21, 12] 
 We're looking for the fourth element, and 7 is the fifth element, so we then partition (only) the left side. We'll again use the first element as our pivot, giving (using   and   to mark the part of the input we're now just ignoring). 
 [ 0 ] 1 [ 3, 5 ]  { 7, 17, 21, 12 } 
  has ended up as the second element, so we need to partition the items to its right (3 and 5): 
 {0, 1} 3 [5] {7, 17, 21, 12} 
 Using   as the pivot element, we end up with nothing to the left, and   to the right.   is the third element, so we need to look to its right. That's only one element, so that ( ) is our median. 
 By ignoring the unused side, this reduces the complexity from O(n log n) for sorting to only O(N) [though I'm abusing the notation a bit--in this case we're dealing with expected behavior, not worst case, as big-O normally does]. 
 There's also a median of medians algorithm if you want to assure good behavior (at the expense of being somewhat slower on average). 
 This gives guaranteed O(N) complexity. 
 
 Sort  the array in place. Take the element in the middle of the array as you're already doing. No additional storage needed. 
 That'll take   time or so in Java. Best possible time is linear (you've got to inspect every element at least once to ensure you get the right answer). For pedagogical purposes, the additional complexity reduction isn't worthwhile. 
 If you can't modify the array in place, you have to trade significant additional time complexity to avoid avoid using additional storage proportional to half the input's size. (If you're willing to accept approximations, that's not the case.) 
 
 Some not very efficient ideas: 
 For each value in the array, make a pass through the array counting the number of values lower than the current value.  If that count is "half" the length of the array, you have the median.  O(n^2)  (Requires some thought to figure out how to handle duplicates of the median value.) 
 You can improve the performance somewhat by keeping track of the min and max values so far.  For example, if you've already determined that 50 is too high to be the median, then you can skip the counting pass through the array for every value that's greater than or equal to 50.  Similarly, if you've already determined that 25 is too low, you can skip the counting pass for every value that's less than or equal to 25. 
 In C++: 
 
 Terrible performance, but it uses no data structures and does not modify the input array. 
 