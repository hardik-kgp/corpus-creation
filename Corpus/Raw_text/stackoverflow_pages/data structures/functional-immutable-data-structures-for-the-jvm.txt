*** functional-immutable-data-structures-for-the-jvm ***

 
 
 
 
 
 Closed.  This question is  off-topic . It is not currently accepting answers.
                            
                         
 
 
 
 
 
 
 
 
 
 
 Want to improve this question?   Update the question  so it's  on-topic  for Stack Overflow.
                         
 Closed  5 months ago . 
 
 
 
 Does anyone know of a Java/JVM data structure library providing functional (a.k.a. immutable, or "persistent" in the functional sense) equivalents of the familiar Java data structures? 
 By "functional" I mean that the objects themselves are immutable, while modifications to those objects return new objects sharing the same internals as the parent object where appropriate (for efficiency in both time and space; a naïve implementation could just copy the whole thing on every write). 
 Much like Java's concurrency libraries, this doesn't seem like something I can or should implement myself, so it would be nice to have a functional data structure library I can use in the JVM. 
 
 Clojure's immutable and persistent data structures have been extracted as a Java library. You can find them at  http://github.com/krukow/clj-ds . These data structures are not dependent on the Clojure runtime and hence can be used without the   in your application's classpath. They have been generified to work smoothly with Java code. 
 Please make a note that working with these immutable data structures may not be idiomatic in Java. 
 The github page does not have a jar for download. You will have to checkout the source and build the jar yourself. 
 
 Functional and immutable are core properties of most of the Scala collection libraries. Scala compiles to the JVM and interoperates well with Java. The Scala syntax is also much closer to Java than something like Clojure (Lisp syntax). 
 Here's the intro page to the Scala collection API.
 http://www.scala-lang.org/docu/files/collections-api/collections.html 
 
 Try  Functional Java .  It contains immutable maps, sets, lists, and trees.  However, this library is much more than just a collection of immutable data structures! 
 
 Try using  Guava , it has immutable map, list, set. It also has some utilities to support immutable collection that instead modifying the underlying object, returns a new object. 
 
 I can understand why the concurrency classes are difficult to write: it's very easy to get difficult-to-see bugs there. 
 Java has a nice way to avoid such bugs when writing immutable   classes: each kind of   has  a method similar to  , which will give you a wrapper that lets you see the underlying   but blocks all mutation methods. It's only a wrapper, though: you can still change the underlying   if you keep a reference to it lying around, so don't do that. Also, immediately clone and wrap any  s that come from outside your control, since the programmers who handed them to you might modify them later, mutating your nice immutable data.
 
If you want to make a library to handle all these pedantic precautions for you, it's time-consuming but not that hard. To save you time, I've included an example of a minimally-optimized   with all necessary mutation prevention.

 I made an abstract superclass by going down the API listing for   (not forgetting  ). For nonmutating methods, I simply pass them on to the underlying  . For mutating methods, I throw   and provide alternative functional-style methods. 
 Here's that abstract class,   : 
 
 In the implementation, there's very little left to do. I supply a few constructors and utility methods and simply use the default implementations of all the mutating methods. 
 Here's an implementation,  . : 
 
 A few notes : 
 
 In every single functional mutation method, I check whether there will actually be any changes. If not, I just return the exact same  .
 In  , I just return the exact same  
 Running   through   and declaring it   prevents two sources of mutation: users can't mutate through the   and implementors can't accidentally mutate in their implementations. 
 
 You can take this and modify it a bit to support other  s. 
 
 Java collections are perhaps not as immutable as you would like, even when you apply    
 pure4j  provides modified versions of Clojure persistent collections (including generics, for example) and also compile-time immutability checking of your objects, giving you some guarantees that collections cannot change.   
 Cornelius Mund's project,  https://github.com/cornim/ClojureCollections  also provides the clojure collections, without the element immutability guarantees, if that is what you need. 
 