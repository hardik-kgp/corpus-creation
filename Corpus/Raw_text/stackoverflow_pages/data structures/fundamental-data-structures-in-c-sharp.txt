*** fundamental-data-structures-in-c-sharp ***

 I would like to know how people implement the following data structures in C# without using the base class library implementations:- 
 
 Linked List 
 Hash Table 
 Binary Search Tree 
 Red-Black Tree 
 B-Tree 
 Binomial Heap 
 Fibonacci Heap 
 
 and any other fundamental data structures people can think of! 
 I am curious as I want to improve my understanding of these data structures and it'd be nice to see C# versions rather than the typical C examples out there on the internet! 
 
 There's a series of  MSDN articles  on this subject. However, I haven't really read the text myself. I believe that the collections framework by .NET has a broken interface and cannot be extended very well. 
 There's also  C5 , a libray that I am investigating right now. 
 For the reason mentioned above, I've had the project to implement my own collections library for .NET but I've stopped this project after the first benchmark revealed that even a straightforward, non-thread-safe generic   implementation is slower than the native  . Since I've taken care not to produce any inefficient IL code, this means that .NET is simply not suited (yet) for writing on-par replacements for intrinsic data structures, and that the .NET framework has to use some behind-the-scenes knowledge to optimize the builtin collection classes. 
 
 Here is a generic Binary Search Tree. The only thing I didn't do was implement IEnumerable<T> so you could traverse the tree using a enumerator. However that should be fairly straight forward. 
 Special thanks to Scott Mitchel for his BSTTree article, I used it as a reference on the delete method. 
 The Node Class: 
 
 And the actual Tree class: 
 
 
 I would recommend two resources for the data structures you mention:
First, there is the .NET Framework Source Code (information can be found on ScottGu's blog  here ). 
 Another useful resource is the Wintellect's Power Collections found on Codeplex  here . 
 Hope this helps! 
 
 NGenerics 
 "A class library providing generic data structures and algorithms not implemented in the standard .NET framework." 
 
 Check out Rotor 2 ( http://research.microsoft.com/sscli/ ) or use reflector ( http://www.red-gate.com/products/reflector/ ) too see how Microsoft did it!!! 
 