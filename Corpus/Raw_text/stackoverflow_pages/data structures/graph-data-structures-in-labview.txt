*** graph-data-structures-in-labview ***

 What's the best way to represent graph data structures in LabVIEW? 
 I'm doing some basic algorithm review over the holiday, and I'd prefer to not implement all of the storage and traversals myself, if possible. 
 (I'm aware that there was a  thread a few years ago on LAVA , is that my best bet?) 
 
 I've never had a need to do this myself, so I never really looked into it, but there are some people who did do some work as far I know.  
 Brian K. has posted something over here, although it's been a long time since I looked at it: 
 https://decibel.ni.com/content/docs/DOC-12668 
 If that doesn't help, I would suggest you read this and then try sending a PM to Daklu there, as he's the most likely candidate to have something. 
 https://decibel.ni.com/content/thread/8179?tstart=0 
 If not, I would suggest posting a question on LAVA, as you're more likely to find the relevant people there. 
 
 Well you don't have that many options for graphs , from a simple point of view. It really depends on the types of algorithms you are doing, in order to choose the most convenient representation. 
 Adjacency matrix is simple, but can be slow for some tasks, and can be wasteful if the graph is not dense. 
 You can keep a couple of lists and hash maps of your edges and vertices. With each edge or vertex created assigned a unique index into the list,it's pretty simple to keep things under control. Each vertex could then be associated with a list of its neighbors. Depending on your needs you could divide that neighbors list into in and out edges. Also depending on your look up needs, you could choose to index edges by their in or out edge or both, or simple by a unique index number.  
 I had a glance at the LabView quick reference, and while it was not obvious from there how you would do that, as long as they have arrays of some sort, you can implement a graph. I'm sure you'll be fine. 
 