*** how-can-i-access-and-process-nested-objects-arrays-or-json ***

 I have a nested data structure containing objects and arrays. How can I extract the information, i.e. access a specific or multiple values (or keys)? 
 For example: 
 
 How could I access the   of the second item in  ? 
 
 **Preliminaries**

 JavaScript has only one data type which can contain multiple values:  **Object**
. An  **Array**
 is a special form of object. 
 (Plain) Objects have the form 
 
 Arrays have the form 
 
 Both arrays and objects expose a   structure. Keys in an array must be numeric, whereas any string can be used as key in objects. The key-value pairs are also called the  **"properties"**
. 
 Properties can be accessed either using  **dot notation**

 
 or  **bracket notation**
, if the property name would not be a valid JavaScript  identifier name  [spec] , or the name is the value of a variable: 
 
 For that reason, array elements can only be accessed using bracket notation: 
 
 **Wait... what about JSON?**

 JSON is a textual representation of data, just like XML, YAML, CSV, and others. To work with such data, it first has to be converted to JavaScript data types, i.e. arrays and objects (and how to work with those was just explained). How to parse JSON is explained in the question  Parse JSON in JavaScript?  . 
 **Further reading material**

 How to access arrays and objects is fundamental JavaScript knowledge and therefore it is advisable to read the  MDN JavaScript Guide , especially the sections 
 
 Working with Objects 
 Arrays 
 Eloquent JavaScript - Data Structures 
 
 
 
 **Accessing nested data structures**

 A nested data structure is an array or object which refers to other arrays or objects, i.e. its values are arrays or objects. Such structures can be accessed by consecutively applying dot or bracket notation.  
 Here is an example: 
 
 Let's assume we want to access the   of the second item.  
 Here is how we can do it step-by-step: 
 As we can see   is an object, hence we can access its properties using dot notation. The   property is accessed as follows: 
 
 The value is an array, to access its second element, we have to use bracket notation: 
 
 This value is an object and we use dot notation again to access the   property. So we eventually get: 
 
 Alternatively, we could have used bracket notation for any of the properties, especially if the name contained characters that would have made it invalid for dot notation usage: 
 
 
 **I'm trying to access a property but I get only **
** back?**

 Most of the time when you are getting  , the object/array simply doesn't have a property with that name. 
 
 Use   or   and inspect the structure of object / array. The property you are trying to access might be actually defined on a nested object / array. 
 
 
 **What if the property names are dynamic and I don't know them beforehand?**

 If the property names are unknown or we want to access all properties of an object / elements of an array, we can use the    [MDN]  loop for objects and the    [MDN]  loop for arrays to iterate over all properties / elements. 
 **Objects**

 To iterate over all properties of  , we can iterate over the  **object**
 like so: 
 
 Depending on where the object comes from (and what you want to do), you might have to test in each iteration whether the property is really a property of the object, or it is an inherited property. You can do this with    [MDN] . 
 As alternative to   with  , you can use    [MDN]  to get an  array of property names : 
 
 **Arrays**

 To iterate over all elements of the    **array**
, we use a   loop: 
 
 One could also use   to iterate over arrays, but there are reasons why this should be avoided:  Why is 'for(var item in list)' with arrays considered bad practice in JavaScript? . 
 With the increasing browser support of ECMAScript 5, the array method    [MDN]  becomes an interesting alternative as well: 
 
 In environments supporting ES2015 (ES6), you can also use the    [MDN]  loop, which not only works for arrays, but for any  iterable : 
 
 In each iteration,   directly gives us the next element of the iterable, there is no "index" to access or use. 
 
 **What if the "depth" of the data structure is unknown to me?**

 In addition to unknown keys, the "depth" of the data structure (i.e. how many nested objects) it has, might be unknown as well. How to access deeply nested properties usually depends on the exact data structure. 
 But if the data structure contains repeating patterns, e.g. the representation of a binary tree, the solution typically includes to  **recursively**
  [Wikipedia]  access each level of the data structure. 
 Here is an example to get the first leaf node of a binary tree: 
 
 
 
 
 
 
 A more generic way to access a nested data structure with unknown keys and depth is to test the type of the value and act accordingly. 
 Here is an example which adds all primitive values inside a nested data structure into an array (assuming it does not contain any functions). If we encounter an object (or array) we simply call   again on that value (recursive call). 
 
 
 
 
 
 
 
 
 **Helpers**

 Since the structure of a complex object or array is not necessarily obvious, we can inspect the value at each step to decide how to move further.    [MDN]  and    [MDN]  help us doing this. For example (output of the Chrome console): 
 
 Here we see that that   is an array with two elements which are both objects. In Chrome console the objects can even be expanded and inspected immediately. 
 
 This tells us that   is an object, and after expanding it we see that it has three properties,  ,   and  . The latter is an internal property used for the prototype chain of the object. The prototype chain and inheritance is out of scope for this answer, though. 
 
 You can access it this way 
 
 or 
 
 Both ways are equal. 
 
 In case you're trying to access an   from the example structure by   or  , without knowing it's position in the array, the easiest way to do it would be to use  underscore.js  library: 
 
 From my experience, using higher order functions instead of   or   loops results in code that is easier to reason about, and hence more maintainable. 
 Just my 2 cents. 
 
 Objects and arrays has a lot of built-in methods that can help you with processing data. 
 Note: in many of the examples I'm using  arrow functions . They are similar to  function expressions , but they bind the   value lexically. 
 **, **
** (ES 2017) and **
** (ES 2017)**

  returns an array of object's keys,   returns an array of object's values, and   returns an array of object's keys and corresponding values in a format  . 
 
 
 
 
 
 ** with a for-of loop and destructuring assignment**

 
 
 
 
 
 It's very convenient to iterate the result of   with a  for-of loop  and  destructuring assignment . 
 For-of loop lets you iterate array elements. The syntax is   (we can replace   with   or  , but it's better to use   if we don't intend to modify  ). 
 Destructuring assignment lets you extract values from an array or an object and assign them to variables. In this case   means that instead of assigning the   array to  , we assign the first element of that array to   and the second element to  . It is equivalent to this: 
 
 As you can see, destructuring makes this a lot simpler. 
 ** and **

 The   method returns   if the specified callback function returns   for  every  element of the array. The   method returns   if the specified callback function returns   for  some  (at least one) element. 
 
 
 
 
 
 ** and **

 The   methods returns  the first  element which satisfies the provided callback function. The   method returns an array of  all  elements which satisfies the provided callback function. 
 
 
 
 
 
 
 The   method returns an array with the results of calling a provided callback function on the array elements. 
 
 
 
 
 
 
 The   method reduces an array to a single value by calling the provided callback function with two elements. 
 
 
 
 
 
 The   method takes an optional second parameter, which is the initial value. This is useful when the array on which you call   can has zero or one elements. For example, if we wanted to create a function   which takes an array as an argument and returns the sum of all elements, we could write it like that: 
 
 
 
 
 
 
 At times, accessing a nested object using a string can be desirable. The simple approach is the first level, for example 
 
 But this is often not the case with complex json. As json becomes more complex, the approaches for finding values inside of the json also become complex. A recursive approach for navigating the json is best, and how that recursion is leveraged will depend on the type of data being searched for. If there are conditional statements involved, a  json search  can be a good tool to use. 
 If the property being accessed is already known, but the path is complex, for example in this object 
 
 And you know you want to get the first result of the array in the object, perhaps you would like to use 
 
 However, that will cause an exception as there is no property of object with that name. The solution to be able to use this would be to flatten the tree aspect of the object. This can be done recursively. 
 
 Now, the complex object can be flattened 
 
 Here is a   of this approach being used. 
 
 This question is quite old, so as a contemporary update. With the onset of ES2015 there are alternatives to get a hold of the data you require. There is now a feature called  **object destructuring**
 for accessing nested objects. 
 
 
 
 
 
 The above example creates a variable called   from the   key from an array called  , the lonely   says skip the first object in the array.  
 Notably it's probably overkill for this example, as simple array acccess is easier to read, but it comes in useful when breaking apart objects in general.  
 This is very brief intro to your specific use case, destructuring can be an unusual syntax to get used to at first. I'd recommend reading  Mozilla's Destructuring Assignment documentation  to learn more. 
 
 To access a nested attribute, you need to specify its name and then search through the object. 
 If you already know the exact path, then you can hardcode it in your script like so: 
 
 these also work - 
 
 When you don't know the exact name before hand, or a user is the one who provides the name for you. Then dynamically searching through the data structure is required. Some suggested here that the search can be done using a   loop, but there is a very simple way to traverse a path using  . 
 
 The path is a way to say: First take the object with key  , which happens to be an array. Then take the  -st element (0 index arrays). Last take the object with key   in that array element, which happens to be the string  . 
 If you have a very long path, you might even use   to make all of this easier - 
 
 This is just plain JavaScript, without using any third party libraries like jQuery or lodash. 
 
 You could use   function: 
 
 
 
 or 
 
 Basically, use a dot between each descendant that unfolds underneath it and when you have object names made out of two strings, you must use the ["obj Name"] notation. Otherwise, just a dot would suffice; 
 Source:   https://learn.freecodecamp.org/javascript-algorithms-and-data-structures/basic-javascript/accessing-nested-objects 
 to add to this, accessing nested Arrays would happen like so: 
 
 Source:  https://learn.freecodecamp.org/javascript-algorithms-and-data-structures/basic-javascript/accessing-nested-arrays/ 
 Another more useful document depicting the situation above: 
 https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Basics#Bracket_notation 
 Property access via dot walking:  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_Accessors#Dot_notation 
 
 Using  **JSONPath**
 would be one of the most flexible solutions if you are willing to include a library:
 https://github.com/s3u/JSONPath  (node and browser) 
 For your use case the json path would be: 
 
 so: 
 
 
 I prefer JQuery. It's cleaner and easy to read. 
 
 
 
 
 
 
 Just in case, anyone's visiting this question in 2017 or later and looking for an  **easy-to-remember**
 way, here's an elaborate blog post on  Accessing Nested Objects in JavaScript  without being bamboozled by  
 Cannot read property 'foo' of undefined  error 
 **1. Oliver Steele's nested object access pattern**

 The easiest and the cleanest way is to use Oliver Steele's nested object access pattern 
 
 With this notation, you'll never run into 
 Cannot read property 'name' of undefined .  
 You basically check if user exists, if not, you create an empty object on the fly. This way, the next level key will  **always be accessed from an object that exists or an empty object**
, but never from undefined. 
 **2. Access Nested Objects Using Array Reduce**

 To be able to access nested arrays, you can write your own array reduce util. 
 
 There is also an excellent type handling minimal library  typy  that does all this for you. 
 
 Accessing dynamically multi levels object. 
 
 Working fiddle:  https://jsfiddle.net/andreitodorut/3mws3kjL/ 
 
 If you are looking for one or more objects that meets certain criteria you have a few options using  query-js 
 
 There's also a   and a   they work much like  and  respectively. The only difference is that they will throw if  more  than one match is found. 
 for further explanation of query-js you can start with this  post 
 
 **The Underscore js Way**

 Which is a JavaScript library that provides a whole mess of useful   helpers without extending any built-in objects. 
 **Solution:**

 
 
 Old question but as nobody mentioned lodash (just underscore). 
 In case you are already using lodash in your project, I think an elegant way to do this in a complex example: 
 **Opt 1**

 
 same as: 
 **Opt 2**

 
 The difference between the first and second option is that in the  **Opt 1**
 if you have one of the properties missing (undefined) in the path you don't get an error, it returns you the third parameter. 
 For array filter lodash has   but I'd rather use the regular  . But I still think the above method   is super useful when working with really complex data. I faced in the past really complex APIs and it was handy! 
 I hope it can be useful for who's looking for options to manipulate really complex data which the title implies. 
 
 I don't think questioner just only concern one level nested object, so I present the following demo to demonstrate how to access the node of deeply nested json object. All right, let's find the node with id '5'. 
 
 
 
 
 
 
 
 A pythonic, recursive and functional approach to unravel arbitrary JSON trees: 
 
 where  data  is a python list (parsed from a JSON text string): 
 
 
 jQuery's grep  function lets you filter through an array: 
 
 
 
 
 
 
 
 **Dynamic approach**

 In below   function, you can use arbitrary 'key' string - in your case   (you can use array notation   at any level) - if key is invalid then undefined is return. 
 
 
 
 
 
 
 
 
 My   is coming from PHP file but still, I indicate here in  . When i directly take my json into   it will nothing show thats why i put my json file as 
  
so after that i get   obj and show in alert box then I get   which is json array and store in one varible   then i read first object of that array with key value like this    
 
 
 **Using lodash would be good solution**
  
 Ex:                                                                                                
 
 