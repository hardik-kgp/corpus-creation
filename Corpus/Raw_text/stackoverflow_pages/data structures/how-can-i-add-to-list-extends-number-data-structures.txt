*** how-can-i-add-to-list-extends-number-data-structures ***

 I have a List which is declared like this : 
 
 I tried to add 3 to foo3. However I get an  error message like this: 
 
 
 Sorry, but you can't. 
 The wildcard declaration of   means that the variable   can hold any value from a family of types (rather than any value of a specific type). It means that any of these are legal assignments: 
 
 So, given this, what type of object could you add to   that would be legal after any of the above possible   assignments: 
 
 You can't add an   because   could be pointing at a  . 
 You can't add a   because   could be pointing at a  . 
 You can't add a   because   could be pointing at a  . 
 
 **You can't add any object to **
** because you can't guarantee what kind of **
** it is really pointing to, so you can't guarantee that the object is allowed in that **
**. The only "guarantee" is that you can only read from it and you'll get a **
** or subclass of **
**.**

 The reverse logic applies to  , e.g.  . These are legal: 
 
 **You can't read the specific type T (e.g. **
**) from **
** because you can't guarantee what kind of **
** it is really pointing to. The only "guarantee" you have is you are able to add a value of type **
** (or any subclass of **
**) without violating the integrity of the list being pointed to.**

 
 The perfect example of this is the signature for  : 
 
 Notice how the   list declaration uses   to allow me to pass any List from a family of related List types and still guarantee it will produce values of type T or subclasses of T. But you cannot add to the   list. 
 The   list declaration uses   to allow me to pass any List from a family of related List types and still guarantee I can write a value of a specific type T to that list. But it cannot be guaranteed to read the values of  **specific**
 type T if I read from the list. 
 So now, thanks to generics wildcards, I can do any of these calls with that single method: 
 
 
 Consider this confusing and very wide code to exercise your brain. The commented out lines are illegal and the reason why is stated to the extreme right of the line (need to scroll to see some of them): 
 
 
 You can't (without unsafe casts). You can only read from them. 
 The problem is that you don't know what exactly the list is a list of. It could be a list of any subclass of Number, so when you try to put an element into it, you don't know that the element actually fits into the list. 
 For example the List might be a list of  s, so it would be an error to put a   into it. 
 
 "List '<' ? extends Number> is actually an  **upper bound wildcard !**
  
 The upper-bounded wildcard says that any class that extends Number or Number itself can be used as the formal parameter type: 
The problem stems from the fact that  **Java doesnâ€™t know what type List**
 really is. 
It has to be an EXACT and UNIQUE Type. I hope it helps :)  
 
 You could do this instead: 
 
 
 It has been confusing to me even though I read answers here, until I found the comment by Pavel Minaev: 
 
 Note that List < ? extends Number > does not mean "list of objects of
  different types, all of which extend Number". It means "list of
  objects of a single type which extends Number" 
 
 After this I was able to understand BertF awesome explanation. List < ? extends Number > means ? could be of any type extending Number(Integer, Double, etc) and its  **not clearified**
 in declaration ( List < ? extends Number > list ) that which of them it is, so when u wanna use add method its not known if the input is of the same  **type**
 or not; what is the type at all? 
 So the elements of List < ? extends Number > could only be set when constructing. 
 Also note this: When we're using templates we are telling the compiler what type we're messing with.  **T**
 for example holds that type for us, but not  **?**
 does the same 
 I gotta say.. This is one of the dirty ones to explain/learn 
 
 where extend list from 'Object' , you can use list.add and when want use list.get only need to cast Object to your Object; 
 