*** how-can-i-read-perl-data-structures-from-python ***

 I've often seen people use Perl data structures in lieu of configuration files; i.e. a lone file containing only: 
 
 What's the best way to convert the contents of these files into Python-equivalent data structures, using pure Python? For the time being we can assume that there are no real expressions to evaluate, only structured data. 
 
 Not sure what the use case is.  Here's my assumption: you're going to do a one-time conversion from Perl to Python. 
 Perl has this 
 
 In Python, it would be 
 
 So, I'm guessing it's a bunch of RE's to replace  
 
  with  
  with  
  with  
  with  
 
 However, Python's built-in   doesn't do anything unusual with a regex as a hash key.  For that, you'd have to write your own subclass of  , and override   to check REGEX keys separately. 
 
 Here's the example of using a Perl-like dict. 
 
 
 Is using pure Python a requirement? If not, you can load it in Perl and convert it to YAML or JSON. Then use PyYAML or something similar to load them in Python. 
 
 I'd just turn the Perl data structure into something else. Not seeing the actual file, there might be some extra work that my solution doesn't do.  
 If the only thing that's in the file is the one variable declaration (so, no   at the end, and so on), it can be really simple to turn your   it into YAML: 
 
 The   returns the last thing it evaluated, so in this little code it returns the list of hash key-value pairs. Things such as YAML::Dump like to work with references so they get a hint about the top-level structure, so I make that into a hash reference by surrounding the   with the curly braces. For your example, I'd get this YAML output: 
 
---
(?-xism:^spam): eggs
color: red
numbers:
  - 5
  - 8
 
 I don't know how Python will like that stringified regex, though. Do you really have a key that is a regex? I'd be curious to know how that's being used as part of the configuration. 
 
 If there's extra stuff in the file, life is a bit more tough. There's probably a really clever way to get around that, but I used the same idea, but just hard-coded the variable name that I wanted. 
 I tried this on the Perl data structure that the CPAN.pm module uses, and it looks like it came out fine. The only ugliness is the fore-knowledge of the variable name that it supplies. Now that you've seen the error of configuration in Perl code, avoid making the same mistake with Python code. :) 
 YAML: 
 
 JSON: 
 
 or 
 
 XML::Simple doesn't work out so well because it treated everything like an attribute, but maybe someone can improve on this: 
 
 
 I've also found  PyPerl , but it doesn't seem to be maintained. I guess something like this is what I was looking for -- a module that did some basic interpretation of Perl and passed the result as a Python object. A Perl interpreter that died on anything too complex would be fine. :-) 
 