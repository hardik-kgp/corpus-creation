*** how-do-i-bind-to-list-of-checkbox-values-with-angularjs ***

 I have a few checkboxes: 
 
 That I would like to bind to a list in my controller such that whenever a checkbox is changed the controller maintains a list of all the checked values, for example,  . 
 ng-model seems to only be able to bind the value of one single checkbox to a variable in the controller. 
 Is there another way to do it so that I can bind the four checkboxes to a list in the controller? 
 
 There are two ways to approach this problem. Either use a simple array or an array of objects. Each solution has it pros and cons. Below you'll find one for each case. 
 
 **With a simple array as input data**

 The HTML could look like: 
 
 And the appropriate controller code would be: 
 
 **Pros**
: Simple data structure and toggling by name is easy to handle 
 **Cons**
: Add/remove is cumbersome as two lists (the input and selection) have to be managed 
 
 **With an object array as input data**

 The HTML could look like: 
 
 And the appropriate controller code would be: 
 
 **Pros**
: Add/remove is very easy 
 **Cons**
: Somewhat more complex data structure and toggling by name is cumbersome or requires a helper method 
 
 **Demo**
:  http://jsbin.com/ImAqUC/1/ 
 
 A simple solution: 
 
 http://plnkr.co/edit/U4VD61?p=preview 
 
 
 . 
 
 
 Here's a quick little reusable directive that seems to do what you're looking to do. I've simply called it  . It updates the array when the checkboxes change, and updates the checkboxes when the array changes. 
 
 Here's a controller and a view that shows how you might go about using it. 
 
 
 (The buttons demonstrate that changing the array will also update the checkboxes.) 
 Finally, here is an example of the directive in action on Plunker:  http://plnkr.co/edit/3YNLsyoG4PIBW6Kj7dRK?p=preview 
 
 Based on answers in this thread I've created  checklist-model  directive that covers all cases: 
 
 simple array of primitives  
 array of objects (pick id or whole object) 
 object properties iteration 
 
 For topic-starter case it would be: 
 
 
 Using a string of   can help to use a hashmap of selected values: 
 
 This way the ng-model object gets updated with the key representing the index. 
 
 After a while   should look something like: 
 
 This method won't work for all situations, but it is easy to implement. 
 
 Since you accepted an answer in which a list was not used, I'll assume the answer to my comment question is "No, it doesn't have to be a list".  I also had the impression that maybe you were rending the HTML server side, since "checked" is present in your sample HTML (this would not be needed if ng-model were used to model your checkboxes). 
 Anyway, here's what I had in mind when I asked the question, also assuming you were generating the HTML server-side: 
 
 ng-init allows server-side generated HTML to initially set certain checkboxes. 
 Fiddle . 
 
 I think the easiest workaround would be to use 'select' with 'multiple' specified: 
 
 Otherwise, I think you'll have to process the list to construct the list
(by  ing the model array bind with checkboxes). 
 
 I have adapted Yoshi's accepted answer to deal with complex objects (instead of strings). 
 HTML 
 
 JavaScript 
 
 Working example:  http://jsfiddle.net/tCU8v/ 
 
 Another simple directive could be like: 
 
 The controller: 
 
 And the HTML: 
 
 
 I'm also including a Plunker:  http://plnkr.co/edit/XnFtyij4ed6RyFwnFN6V?p=preview 
 
 The following solution seems like a good option, 
 
 And in controller model value   will be like this  
 
 
 You don't have to write all that code.  AngularJS will keep the model and the checkboxes in sync simply by using ngTrueValue and ngFalseValue 
 Codepen here:   http://codepen.io/paulbhartzog/pen/kBhzn 
 Code snippet: 
 
 
 Check out this directive that manages effectively lists of checkboxes. I hope it works for you.
 CheckList Model 
 
 There is a way to work on the array directly and use ng-model at the same time through  . 
 The trick is to use a getter/setter function in your ng-model. This way you can use an array as your real model and "fake" the booleans in the input's model: 
 
 
 
 
 **CAVEAT**
 You shouldn't use this method if your arrays are big as   will be called a lot of times. 
 For more on that, see  https://docs.angularjs.org/api/ng/directive/ngModelOptions . 
 
 I like Yoshi's answer. I enhanced it so You can use the same function for multiple lists. 
 
 http://plnkr.co/edit/KcbtzEyNMA8s1X7Hja8p?p=preview 
 
 If you have multiple checkboxes on the same form  
 The controller code  
 
 View code  
 
 
 Inspired from Yoshi's post above.
Here is the  plnkr . 
 
 
 
 
 
 
 
 
 Based on my other post  here , I have made a reusable directive. 
 Check out the  GitHub repository 
 
 
 
 
 
 
 
 
 In the HTML (supposing that the checkboxes are in the first column of every row in a table). 
 
 In the   file: 
 
 
 Here is yet another solution. The upside of my solution: 
 
 It does not need any additional watches (which may have an impact on performance) 
 It does not require any code in the controller keeping it clean 
 The code is still somewhat short 
 It is requires very little code to reuse in multiple places because it is just a directive 
 
 Here is the directive: 
 
 At the end then just use it like this: 
 
 And that is all there is. The only addition is the   attribute. 
 
 You can combine AngularJS and jQuery. For example, you need to define an array,  , in the controller. 
 
 You can get an array owning the selected items. Using method  , you can check the selected items. 
 
 
 
 Take a look this:  checklist-model . 
 It works with JavaScript arrays, and objects and it can use static HTML checkboxes, without ng-repeat 
 
 And the JavaScript side: 
 
 
 A simple HTML only way of doing it: 
 
 
 
 
 
 
 Using  this example  of the @Umur KontacÄ±, I think in using to catch selected data throughout another object/array, like a edit page. 
 **Catch options at the database**

 
 **Toggle a some option**

 
 As example, all colors json in below: 
 
 And 2 types of data object,   with one object and   containing two/more object data: 
 
 Two items selected catched at the database: 
 
 One item selected catched at the database: 
 
 
 And here, my javascript code: 
 
 My Html code: 
 
 [Edit] Refactored code below: 
 
 And call new method as below: 
 
 That's it! 
 
 I've put an array in the controller. 
 
 On the markup I've put something like following 
 
 The output was the following, in the controller I just needed to check whether its true or false; true for checked, absent/false for unchecked.  
 
 Hope this helps. 
 
 I think the following way is more clear and useful for nested ng-repeats. Check it out on  Plunker . 
 Quote from this thread : 
 
 
 Here is the jsFillde link for the same,  http://jsfiddle.net/techno2mahi/Lfw96ja6/ . 
 This uses the directive which is available for download at  http://vitalets.github.io/checklist-model/ . 
 This is the good to have directive as your application will need this functionality much often. 
 The code is below: 
 **HTML:**

 
 **JavaScript**

 
 
 Try my baby: 
 ** 
 
 ** 
 Then for any ng-model with checkboxes, it will return a string of all the input you selected: 
 
 