*** how-to-store-complex-data-structure-as-a-persistent-data-structures-using-ethe ***

 My work is concerning  Smart Contract  dev. using  (py)ethereum  and  serpent ,   
 When reading " A Programmerâ€™s Guide to Ethereum and Serpent ", I saw on point 5.9 that : 
 
 [...] Persistent data structures can be declared using the data declaration. This allows for the
  declaration of arrays and tuples. [...] 
 
 and: 
 
 [...] For simple storage, self.storage[]
  is useful, but for larger contracts, we recommend the use of data (unless you need a key-
  value storage, of course) [...] 
 
 Code example: 
 
 My question is : what is the best way and how to store complex data ( see my_complex_data  variable in code) like a dictionary which contain others dict. (or arrays as key value) as a persistant data structures ?  
 and does someone know if it is possible and how to store any class structure as a persistant data structures ?  
 
 **IMPORTANT**
 : Please note that according to  this Vitalik Tweet ,  **Serpent**
 is now  **an "outdated tech"**
. 
 The Serpent   has been updated to : 
 
 Being a low-level language, Serpent is NOT RECOMMENDED for building applications unless you really really know what you're doing. The creator recommends Solidity as a default choice, LLL if you want close-to-the-metal optimizations, or Vyper if you like its features though it is still experimental. 
 
 If you want to code Ethereum contracts from Python in order to release a production product, start to think about to migrate to  Solidity  or  Vyper  (which is still a "New experimental programming language") 
 
 Concerning my question, I finaly found a (tricky/dirty) solution, which consist of encoding the complex data before pushing it to the persistant data storage, then decoding after retrieving data from the storage. 
 Please see updated code bellow: 
 
 Which return: 
 
 