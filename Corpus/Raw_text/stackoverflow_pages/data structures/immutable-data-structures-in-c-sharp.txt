*** immutable-data-structures-in-c-sharp ***

 I was reading some entries in Eric Lippert's blog about  immutable data structures  and I got to thinking, why doesn't C# have this built into the standard libraries? It seems strange for something with obvious reuse to not be already implemented out of the box. 
 **EDIT:**
 I feel I might be misunderstood on my question. I'm not asking how to implement one in C#, I'm asking why some of the basic data structures (Stack, Queue, etc.) aren't already available as immutable variants. 
 
 I'll quote from that Eric Lippert  blog  that you've been reading: 
 
 because no one ever designed, specified, implemented, tested, documented and shipped that feature. 
 
 In other words, there is no reason other than it hasn't been high enough value or priority to get done ahead of all the other things they're working on. 
 
 It does now. 
 .NET just shipped their first  immutable collections , which I suggest you try out. 
 
 Any framework, language, or combination thereof that is not a purely experimental exercise has a market. Some purely experimental ones go on to develop a market. 
 In this sense, "market" does not necessarily refer to market economics, it's as true whether the producers of the framework/language/both are commercially or non-commercially oriented and distributing the framework/language/both (I'm just going to say "framework" for now on) at a cost or for free. Indeed, free-as-in-both-beer-and-speech projects can be even more heavily dependent on their markets than commercial projects in this way, because their producers are a subset of their market. The market is anyone and everyone who uses it. 
 The nature of this market will affect the framework in several ways both by organic processes (some parts prove more popular than others and get a bigger share of the mindspace within the community that educates its own members about them) and by fiat (someone decides a feature will serve the market and therefore adds it). 
 When .NET was developed, it was developed to serve its future market. Ideas about what would serve them therefore influenced decisions as to what should and should not be included in the FCL, the runtime, and the languages that work with it. 
 Someone decided that we'd quite likely need  . Someone decided we'd quite likely need   to have a   method. Nobody decided we'd be likely to need a  . 
 Maybe nobody thought of it at all. Maybe someone did and even implemented it and then it was decided not to be of enough general use. Maybe it was debated at length within Microsoft. I've never worked for MS, so I don't have a clue. 
 What I can consider though, is the question as to what the people who were using the .NET framework in 2002 using in 2001. 
 Well, COM, ActiveX, ("Classic") ASP, and VB6 & VBScript is now much less used than it was, so it can be said to have been replaced by .NET. Indeed, that could be said to have been an intention. 
 As well as VB6 & VBScript, a considerable number who were writing in C++ and Java with Windows as a sole or primary target platform are now at least partly using .NET instead. Again, I think that could be said to be an intention, or at the very least I don't think MS were surprised that it went that way. 
 In COM we had an enumerator-object based foreach approach to iteration that had direct support in some languages (the VB family*), and .NET we have an enumerator-object based foreach approach to iteration that has direct support in some languages (C#, VB.NET, and others)†. 
 In C++ we had a rich set of collection types from the STL, and in .NET we have a rich set of collection types from the FCL (and typesafe generic types from .NET2.0 on). 
 In Java we had a strong everything-is-an-object style of OOP with a small set of methods provided by a common base-type and a boxing mechanism to allow for simple efficient primitives while keeping to this style. In .NET we have a strong everything-is-an-object style of OOP with a small set of methods provided by a common base-type and a (different) boxing mechanism to allow for simple efficient primitives while keeping to this style. 
 These cases show choices that are unsurprising considering who was likely to end up being the market for .NET (though such broad statements above shouldn't be read in a way that underestimates the amount of work and subtlety of issues within each of them). Another thing that relates to this is when .NET differs from COM or classic VB or C++ or Java, there may well be a bit of an explanation given in the documentation. When .NET differs from Haskell or Lisp, nobody feels the need to point it out! 
 Now, of course there are things done differently in .NET than to any of the above (or there'd have been no point and we could have stayed with COM etc.) 
 However, my point is that out of the near-infinite range of possible things that could end up in a framework like .NET, there are some complete no-brainers ("they might need some sort of string type..."), some close-to-obvious ("this is really easy to do in COM, so it must be easy to do in .NET"), some harder calls ("this will be more complicated than in VB6, but the benefits are worth it"), some improvements ("locale support could really be made a lot easier for developers, so lets build a new approach to the old issue") and some that were less related to the above. 
 At the other extreme, we can probably all imagine something that would be so out there as to be bizarre ("hey, all coders like Conway's Life - let's put a Conway's Life right into the framework") and hence there's no surprise at not finding it supported. 
 So far I've quickly brushed over a lot of hard work and difficult design balances in a way that makes the design they came up with seem simpler than it no doubt was. Most likely, the more "obvious" it seems to an outsider after the fact, the more difficult it was for the designers. 
 Immutable collection types falls into the large range of possible components to the FCL that while not as bizarre as a built-in-conway-support idea, was not as strongly called for by examining the market as a mutable list or a way to encapsulate locale information nicely. It would have been novel to much of the initial market, and therefore at risk of ending up not being used. In an alternate universe there's a .NET1.0 with immutable collections, but it's not very surprising that there wasn't one here. 
 *At least for consuming. Producing   implementations in VB6 wasn't simple, and could involve writing pointer values straight into v-tables in a rather nasty way that it suddenly occurs to me, is possibly not even allowed by today's DEP. 
 †With a sometimes impossible to implement   method. Is there any reason for this other than it was in  ? Was it even ever much used in  ? 
 
 Why can't you make an immutable struct?  Consider the following: 
 
 It's an immutable value type. 
 
 It's hard to work with immutable data structures unless you have some functional programming constructs.  Suppose you wanted to create an immutable vector containing every other capital letter.  How would you do it unless you 
 A) had functions that did things like  ,   and   to create the sequence in one shot and then turn it into an array 
 B) created the vector as mutable, added the characters in a loop, then then "froze" it, making it immutable? 
 By the way, C#  does  have the B option to some extent --   can wrap a mutable collection and prevent people from mutating it.  However, it's a pain in the ass to do that all the time (and obviously it's hard to support sharing structure between copies when you don't know if something is going to become immutable or not.)  A is a better option. 
 Remember, when C# 1.0 existed, it didn't have anonymous functions, it didn't have language support for generators or other laziness, it didn't have any functional APIs like LINQ -- not even map or filter -- it didn't have concise array initialization syntax (you couldn't write  ) and it didn't have generic types; just putting stuff into and getting stuff out of collections normally was a pain.  So I don't think it would have been a great choice to spend time on making robust immutable collections with such poor language support for using them. 
 
 It would be nice if .net had some really solid support for immutable data holders (classes and structures).  One difficulty with adding really good support for such things, though, is that taking maximum advantage of mutable and immutable data structures would require some fundamental changes to the way inheritance works.  While I would like to see such support in the next major object-oriented framework, I don't know that it can be efficiently worked into existing frameworks like .net or Java. 
 To see the problem, imagine that there are two basic data types: basicItem and deluxeItem (which is a basicItem with a few extra fields added).  Each can exist in two concrete forms: mutable and immutable.  Each can also be described in an abstract form: readable.  Thus, there should be six data types; all but ReadableBasicItem should be substitutable for at least one other: 
 
 ReadableBasicItem: Not substitutable for anything
 MutableBasicItem: ReadableBasicItem
 ImmutableBasicItem: ReadableBasicItem
 ReadableDeluxeItem: ReadableBasicItem
 MutableDeluxeItem: ReadableDeluxeItem, MutableBasicItem (also ReadableBasicItem)
 ImmutableDeluxeItem: ReadableDeluxeItem, ImmutableBasicItem (also ReadableBasicItem)
 
 Even thought the underlying data type has just one base and one derived type, there inheritance graph has two "diamonds" since both "MutableDeluxeItem" and "ImmutableDeluxeItem" have two parents (MutableBasicItem and ReadableDeluxeItem), both of which inherit from ReadableBasicItem.  Existing class architectures cannot effectively deal with that.  Note that it wouldn't be necessary to support generalized multiple inheritance; merely to allow some specific variants such as those above (which, despite having "diamonds" in the inheritance graph, have an internal structure such that both ReadableDeluxeItem and MutableBasicItem would inherit from "the same" ReadableBasicItem). 
 Also, while support for that style of inheritance of mutable and immutable types might be nice, the biggest payoff wouldn't happen unless the system had a means of distinguishing heap-stored objects that should expose value semantics from those which should expose reference semantics, could distinguish mutable objects from immutable ones, and could allow objects to start out in an "uncommitted" state (neither mutable nor guaranteed immutable).  Copying a reference to a heap object with mutable value semantics should perform a memberwise clone on that object and any nested objects with mutable value semantics, except in cases where the original reference would be guaranteed destroyed; the clones should start life as uncommitted, but be CompareExchange'd to mutable or immutable as needed. 
 Adding framework support for such features would allow copy-on-write value semantics to be implemented much more efficiently than would be possible without framework support, but such support would really have to be built into the framework from the ground up.  I don't think it could very well be overlaid onto an existing framework. 
 