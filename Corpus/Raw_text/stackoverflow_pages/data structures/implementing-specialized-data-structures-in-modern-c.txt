*** implementing-specialized-data-structures-in-modern-c ***

 
 
 
 
 
 Closed . This question needs to be more  focused . It is not currently accepting answers.
                            
                         
 
 
 
 
 
 
 
 
 
 
 Want to improve this question?  Update the question so it focuses on one problem only by  editing this post .
                         
 Closed  5 years ago . 
 
 
 
 (Okay, so my previous question is on hold as being too broad, so I'm narrowing it down here.) 
 I'm looking to take part in algorithmic programming contests, and a lot of problems hinge on the use of specialized data structures which are extremely good at a certain operation - for example, Fenwick trees allow calculation of prefix sums of a list of values in logarithmic time. 
 What is the preferred way of implementing such data structures in  **modern**
 C++ (i.e. using C++11 features)? Is it possible to use STL algorithms and containers instead of writing  s and coding every operation by hand? 
 I'm looking for Fenwick trees, segment trees, treaps and some other data structures often useful in IOI-style contests, but general strategies are more than enough. 
 
 there's an implementation of a fenwick tree here:  http://www.algorithmist.com/index.php/Fenwick_tree 
 It uses std::vector as the underlying container.
arguably the method   could be written in terms of   or  . 
 