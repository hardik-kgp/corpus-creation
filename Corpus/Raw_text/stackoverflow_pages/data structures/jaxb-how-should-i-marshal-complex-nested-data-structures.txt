*** jaxb-how-should-i-marshal-complex-nested-data-structures ***

 I have several complex data structures like 
 
 Note: In my case it doesn't really matter if I use Set or List. 
 Now I know that JAXB let me define  **XmlAdapter**
's, that's fine,
but I don't want to define an XmlAdapter for every of the given data structures
(it would be just too much copy-and-paste code). 
 I tried to achieve my goal by declaring two generalizing XmlAdapters: 
 
 one for Map:  
 one for Set:  
 
 **The problem**
: 
JAXB complains as following: 
 
 **Here is my adapter class:**

 
 **Here is my JUnit test case:**

 
 
 I've solved the problem  **without XmlAdapter's**
. 
 I've written JAXB-annotated objects for  **Map**
,  **Map.Entry**
 and  **Collection**
. 
The main idea is inside the method  **xmlizeNestedStructure(...)**
: 
 Take a look at the code: 
 
 **It works!**

 Let's look at a  **demo output**
: 
 
 Sorry, the demo output uses also a data structure called  **"count"**

which is not mentioned in the Adapter's source code. 
 **BTW:**
 does anyone know how to remove all these annoying
and (in my case) unnecessary  **xsi:type**
 attributes? 
 
 I had the same requirement to use a Map< String,Map< String,Integer>>. I used the XMLAdapter and it worked fine. Using XMLAdaptor is the cleanest solution I think. Below is the code of the adaptor.
This is the jaXb class code snippet. 
 
 MapType Class : 
 
 MapEntry Type Class: 
 
 LinkCountMapType Class: 
 
 Finally the MapAdaptor Class: 
 
 } 
 Marshalling a Jaxb Object will give the below XML 
 
 
 Following is the code with "dexmlize" ability based on above Ivan's code. Usage: 
 
 In order to restore the collection and map class, a new field will be xmlized to record the class information. Detailed code: 
 
 
 It looks like you're on the right track with XMLAdapter... the error message may be a clue: 
 
 class
  java.util.Collections$UnmodifiableMap
  nor any of its super class is known to
  this context. 
 
 are you wrapping a map using Collections.unmodifiableMap() anywhere? Where exactly does the error occur? 
 
 (previous answer left as a stale record for the curious) 
 
You can create custom marshaller/unmarshaller logic that works a little more straighforward than the Adapters idea (I think; I haven't used that one before).  
 Basically the idea is that you specify a static function to do the work, and you can also create a custom class. (I usually put the static function in the class in question, but you don't have to.) Then you put a line in your .XJB file to tell JAXB to use your static function. 
 Now that I took a look at my existing code, I see that all I was doing was converting an attribute string to a custom Java object. Here's the code, for reference, but it's just for attributes. 
 JAXB file: 
 
 (parseMethod and printMethod convert to/from attribute strings) 
 
 Here is my marshaller/unmarshaller for the list of @XmlType class. 
 E.g 
 
 
 When working with complex schema structures - the JAXB binding can be crucial in resolving conflicted objects. The CAM Editor tool on Sourceforge allows you to automatically create JAXB bindings - see the quick guide here for more details -  http://www.cameditor.org/#JAXB_Bindings 
 
 To fix this for JSON do:
 jackson with jaxb 
 
 