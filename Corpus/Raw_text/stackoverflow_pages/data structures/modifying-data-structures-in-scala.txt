*** modifying-data-structures-in-scala ***

 I gather from  this question  that there is no standard Scala approach to dynamically changing data structures. In my case, I will be building a tree in which values are stored at the nodes. As processing progresses, two changes will occur. The tree will grow (new leaves sprout), and the values at the nodes will change. Is there a preferred Scala approach to this sort of structure? 
 
 There have been no answers do far. So I'm going to post what I am doing and ask for comments. As background, the application is a game tree for General Game Playing (GGP). The assumption in GGP is that there are any number of players. Each player moves on each turn. In a traditional 2-player game in this framework, the player who is not moving, plays noop.  
 As a result, in the game tree the node levels alternate: states then moves (from those states), then states again. So a move from a state is itself a node in the tree. Its subnodes are the various states that might result depending on the moves of the other players.  
 First of all, I'll keep the tree in a mutable Map. 
 
 (From here on I'll write Map for collection.mutable.Map.) 
 A   is a node identifier. It is immutable.  s also contain a reference to the game tree.   objects store the information kept about each node. They too are immutable, but one   object replaces another in the gameTree when the tree information is updated. 
 
 There are two classes of subnodes, one for states and one for moves from states. 
 
 The following information is stored at each node. 
 
 I'm using   for the children because this is embedded in a Java application, and transformation from Java produces  . 
 s have a number of convenience methods. (The the following repeats the    declaration.) 
 
 Since   is invariant, when building the children list, I was forced to do the following. For example the children of a (State, Move) node is a   of   objects cast to  : 
 
 Comments/suggestions on any of this are appreciated. 
 Thanks. 
 