*** mutable-data-structures-in-erlang ***

 I'm new in functional approach.
For my learning I choose two functional languages, Erlang and Clojure.
I'm trying to write simple socket server which is able to store information about current connections.  
 And if, for example, socket1 wants to send message to the socket2 it should send to the server: 
 **"message" to socket2**
.  
 Or it can be JSON. Message format is doesn't matter right now. 
 Using Clojure I found some mutable data structures such as Agent. In Clojure's case I'm using Agent as mutable array where I'm storing all current connections. 
But I can't find anything similar in Erlang. Could you please help me with it.  
 I googled my question but I found that there are no mutable data structures in Erlang. Where, in this case, and how I can store all current connections? 
 Thank you. 
 
 You might consider using an  Erlang Term Storage (ets) table . It's an in-memory key-value store that allows for replacing existing entries with new entries. 
 
 Before you dive into ets tables, it's worth taking your time to implement something like an ets table by yourself. The idea is that you start a process, and the state of this process is your stored data. 
 Below is a simple example of a storage-cell-type of process, which can hold on to a value indefinitely, and also allow users to overwrite this value. This can be easily extended to hold a dictionary in the state, allowing for Key+Value operations.  
 
 This gives you the following behaviour: 
 
 Please be aware that this kind of programming essentially re-introduces global state into a (nominally) stateless system. If you have two processes  ting and  tting values into one cell, you've just introduced resource contention and lost many of the benefits functional programming is supposed to give you. 
 If I may add a personal note: it would be wiser to pick a language with strict typing discipline as your   functional language. Rather than learning Clojure+Erlang, I'd suggest combinations like:
(Clojure, Scala), (Erlang, Haskell), (Scheme, *ML)
which are more likely to enrich your intellectual toolbox. 
 