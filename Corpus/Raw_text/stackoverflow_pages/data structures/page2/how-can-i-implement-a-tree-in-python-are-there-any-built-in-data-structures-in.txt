*** how-can-i-implement-a-tree-in-python-are-there-any-built-in-data-structures-in ***

 I am trying to construct a general tree.  Are there any built in data structures in Python to implement a tree? 
 
 **anytree**

 I recommend  https://pypi.python.org/pypi/anytree  (I am the author) 
 **Example**

 
 **Features**

 anytree  has also a powerful API with: 
 
 simple tree creation 
 simple tree modification 
 pre-order tree iteration 
 post-order tree iteration 
 resolve relative and absolute node paths  
 walking from one node to an other. 
 tree rendering (see example above) 
 node attach/detach hookups 
 
 
 Python doesn't have the quite the extensive range of "built-in" data structures as Java does. However, because Python is dynamic, a general tree is easy to create. For example, a binary tree might be: 
 
 You can use it like this: 
 
 
 A generic tree is a node with zero or more children, each one a proper (tree) node. It isn't the same as a binary tree, they're different data structures, although both shares some terminology. 
 There isn't any builtin data structure for generic trees in Python, but it's easily implemented with classes. 
 
 
 You can try: 
 
 As suggested here:  https://gist.github.com/2012250 
 
 
 
 There aren't trees built in, but you can easily construct one by subclassing a Node type from List and writing the traversal methods. If you do this, I've found  bisect  useful.  
 There are also many implementations on  PyPi  that you can browse.  
 If I remember correctly, the Python standard lib doesn't include tree data structures for the same reason that the .NET base class library doesn't: locality of memory is reduced, resulting in more cache misses. On modern processors it's usually faster to just bring a large chunk of memory into the cache, and "pointer rich" data structures negate the benefit.  
 
 I implemented a rooted tree as a dictionary  .  So for instance with the root node  , a tree might look like that: 
 
 This structure made it quite easy to go upward along a path from any node to the root, which was relevant for the problem I was working on. 
 
 Greg Hewgill's answer is great but if you need more nodes per level you can use a list|dictionary to create them: And then use method to access them either by name or order (like id) 
 
 Now just create a root and build it up:
ex: 
 
 That should be enough for you to start figuring out how to make this work 
 
 
 works as a dictionary, but provides as many nested dicts you want.
Try the following: 
 
 will deliver a nested dict ... which works as a tree indeed. 
 
 ... If you have already a dict, it will cast each level to a tree: 
 
 In this way, you can keep edit/add/remove each dict level as you wish.
All the dict methods for traversal etc, still apply. 
 
 I've implemented trees using nested dicts.  It is quite easy to do, and it has worked for me with pretty large data sets.  I've posted a sample below, and you can see more at  Google code 
 
 
 I've published a Python [3] tree implementation on my site:  http://www.quesucede.com/page/show/id/python_3_tree_implementation . 
 Hope it is of use, 
 Ok, here's the code: 
 
 
 If someone needs a simpler way to do it, a tree is only a recursively nested list (since set is not hashable) : 
 
 Where each branch is a pair: [ object, [children] ] 
and each leaf is a pair: [ object, [] ] 
 But if you need a class with methods, you can use anytree. 
 
 What operations do you need? There is often a good solution in Python using a dict or a list with the bisect module. 
 There are many, many tree implementations on  PyPI , and many tree types are nearly trivial to implement yourself in pure Python. However, this is rarely necessary. 
 
 Another tree implementation loosely based off of  Bruno's answer : 
 
 And an example of how to use it: 
 
 Which should output: 
 
                        Root node                        
     /             /                      \              
Child node 0  Child node 1           Child node 2        
                   |              /              \       
             Grandchild 1.0 Grandchild 2.0 Grandchild 2.1
 
 
 If you want to create a tree data structure then first you have to create the treeElement object. If you create the treeElement object, then you can decide how your tree behaves.  
 To do this following is the TreeElement class: 
 
 Now, we have to use this element to create the tree, I am using A* tree in this example. 
 
 You can add/remove any elements from the object, but make the structure intect.  
 
 
 