*** what-are-the-differences-between-arraylist-and-vector ***

 What are the differences between the two data structures  **ArrayList**
 and  **Vector**
, and where should you use each of them? 
 
 **Differences**

 
 Vectors are synchronized, ArrayLists
are not. 
 Data Growth Methods 
 
 Use ArrayLists if there is no specific requirement to use Vectors. 
 **Synchronization**

 If multiple threads access an ArrayList concurrently then we must externally synchronize the block of code which modifies the list either structurally or simply modifies an element. Structural modification means addition or deletion of element(s) from the list. Setting the value of an existing element is not a structural modification. 
  is normally used at the time of creation of the list to avoid any accidental unsynchronized access to the list. 
 Reference 
 **Data growth**

 Internally, both the ArrayList and Vector hold onto their contents using an Array. When an element is inserted into an ArrayList or a Vector, the object will need to expand its internal array if it runs out of room.  **A Vector defaults to doubling the size of its array, while the ArrayList increases its array size by 50 percent.**

 Reference 
 
 As the documentation says, a   and an   are almost equivalent.  The difference is that access to a   is synchronized, whereas access to an   is not.  What this means is that only one thread can call methods on a   at a time, and there's a slight overhead in acquiring the lock; if you use an  , this isn't the case.  Generally, you'll want to use an  ; in the single-threaded case it's a better choice, and in the multi-threaded case, you get better control over locking.  Want to allow concurrent reads?  Fine.  Want to perform one synchronization for a batch of ten writes?  Also fine.  It does require a little more care on  your end, but it's likely what you want.  Also note that if you have an ArrayList, you can use the   function to create a synchronized list, thus getting you the equivalent of a  . 
 
  is a  broken  class that is  not  threadsafe, despite it being "synchronized" and is  only  used by students and other inexperienced programmers. 
  is the go-to List implementation used by professionals and experienced programmers. 
 Professionals wanting a threadsafe List implementation use a  . 
 
  is newer and 20-30% faster.  
 If you don't need something explitly apparent in  , use  
 
 **There are 2 major differentiation's between Vector and ArrayList.**
  
 
 Vector is synchronized by default, and ArrayList is not. 
Note : you can make ArrayList also synchronized by passing arraylist object to Collections.synchronizedList() method.
Synchronized means : it can be used with multiple threads with out any side effect. 
 ArrayLists grow by 50% of the previous size when space is not sufficient for new element, where as Vector will grow by 100% of the previous size when there is no space for new incoming element. 
 
 **Other than this, there are some practical differences between them, in terms of programming effort:**

 
 To get the element at a particular location from Vector we use  **elementAt**
(int index) function. This function name is very lengthy.
In place of this in ArrayList we have  **get**
(int index) which is very
easy to remember and to use. 
 Similarly to replace an existing element with a new element in Vector we use  **setElementAt**
() method, which is again very lengthy and may irritate the programmer to use repeatedly. In place of this ArrayList has  **add**
(int index, object) method which is easy to use and remember.
Like this they have more programmer friendly and easy to use function names in ArrayList. 
 
 **When to use which one?**

 
 Try to avoid using Vectors completely. ArrayLists can do everything what a Vector can do. More over ArrayLists are by default not synchronized. If you want, you can synchronize it when ever you need by using Collections util class. 
 ArrayList has easy to remember and use function names. 
 
 **Note**
 : even though arraylist grows by 100%, you can avoid this by ensurecapacity() method to make sure that you are allocating sufficient memory at the initial stages itself. 
 Hope it helps. 
 
  and   both implements List interface and maintains insertion order.But there are many differences between   and   classes... 
 **ArrayList**
** -**

 
  is not synchronized. 
  increments 50% of current array size if number of element exceeds from its capacity. 
  is not a legacy class, it is introduced in JDK 1.2. 
  is fast because it is non-synchronized. 
  uses Iterator interface to traverse the elements. 
 
 **Vector**
** -**

 
  is synchronized. 
  increments 100% means doubles the array size if total number of element exceeds than its capacity. 
  is a legacy class. 
  is slow because it is synchronized i.e. in multithreading environment, it will hold the other threads in runnable or non-runnable state until current thread releases the lock of object. 
  uses Enumeration interface to traverse the elements. But it can use Iterator also. 
 
 See Also :  https://www.javatpoint.com/difference-between-arraylist-and-vector 
 
 Basically both ArrayList and Vector both uses internal Object Array.  
 **ArrayList:**
 The ArrayList class extends AbstractList and implements the List interface and RandomAccess (marker interface). ArrayList supports dynamic arrays that can grow as needed. It gives us first iteration over elements.
ArrayList uses internal Object Array; they are created with an default initial size of 10. When this size is exceeded, the collection is automatically increases to half of the default size that is 15. 
 **Vector:**
 Vector is similar to ArrayList but the differences are, it is synchronized and its default initial size is 10 and when the size exceeds its size increases to double of the original size that means the new size will be 20. Vector is the only class other than ArrayList to implement RandomAccess. Vector is having four constructors out of that one takes two parameters  **Vector(int initialCapacity, int capacityIncrement)**
 capacityIncrement is the amount by which the capacity is increased when the vector overflows, so it have more control over the load factor. 
 Some other differences are:
 
 
  came along with the first version of java development kit (JDK).   was introduced in java version 1.2, as part of java collections framework.   and   both use   as a data structure internally. Both classes keep the insertion order. They both allow duplicate and null values. However there are few differences in the way they store and process data. 
 **Synchronization**

 
  is non-synchronized which means multiple threads can work on   at the same time.  
  is synchronized, which means only one thread at a time can access the code. 
 
 **Performance**

 
  gives better performance as it is non-synchronized .  
  operations gives poor performance as they are thread-safe. 
 
 **Traversal**

 
 ArrayList uses the Iterator interface to traverse the elements.  
 Vector can use both Iterator interface and Enumeration interface to traverse the elements. 
 
 **Data Growth**

  and   both grow and shrink dynamically to maintain optimal use of storage – but the way they resize is different.  
 
  increments 50% of the current array size if the number of elements exceeds its capacity.  
  increments 100% – essentially doubling the current array size.  
 
 **Legacy**

 Earlier versions of Java did not include the Collections Framework. The original classes were re-engineered to support the collection interface. These classes are known as Legacy classes. 
 
  is not a legacy class. It is introduced in JDK 1.2. 
  is a legacy class. 
 
 **Set Increment Size**

 
  does not define the increment size .  
  defines the increment size . 
 
 If there is a need to perform “thread-safe” operation the   is your best bet as it ensures that only one thread access the collection at a time. But if there is no need for thread safe operation,   is a better choice as performance will be improved because of the concurrent processes. 
 