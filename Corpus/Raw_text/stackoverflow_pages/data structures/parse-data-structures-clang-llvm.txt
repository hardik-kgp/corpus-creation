*** parse-data-structures-clang-llvm ***

 I was wondering what is the best solution in order to parse and obtain data structures from C sources files. Suppose that I have: 
 
 What is the best way to unfold the data structures in order to get the primitives of both variables   and   of struct  ? 
 Parsing the AST, for very simple examples, could be the best way, but when the code becomes more complex, maybe it's better to work in a more low-level way with IR code? 
 
 You can use llvm debug info to grab the information you need. If you compile the C code with   option, it generates debug info which contains all the information. Understanding llvm debuginfo is tricky mostly because there is not much documentation about their structure and how to access them. Here are some links: 
 1)  http://llvm.org/docs/SourceLevelDebugging.html 
 2) Here is a link to a project that I am working on which uses debug info. This might not be too useful as there is not much documentation but it might be useful to see the usage of the debuginfo classes. We are trying to get field names for all pointer parameters (including field names in case of structure parameter) of a C function. All of the code related to debuginfo access is in this file:  https://github.com/jiten-thakkar/DataStructureAnalysis/blob/dsa_llvm3.8/lib/dsaGenerator/DSAGenerator.cpp 
 
 To find the underlying types, the AST is a good level to work at. Clang can  automate and scale this process with AST Matchers and Callbacks, used in conjunction with libtooling. For example, the AST matcher combination 
 
 will match fields in C structs that are declared with a typedef instead of a built-in type. The   calls make AST nodes accessible to a Callback. Here's a Callback whose   method gets the underlying type of the field declaration: 
 
 Once this is put into a Clang Tool and built, running 
 
 produces 
 
 I put up a full working example app in a  Code Analysis and Refactoring Examples with Clang Tools project  (see  apps/TypedefFinder.cc). 
 