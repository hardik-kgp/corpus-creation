*** python-compare-nested-data-structures-in-unittest ***

 Is there a way to compare nested data structures in   but ignoring concrete types of objects, like   but recursive, for example: 
 
 (something like   in Perl) 
 
 Would something like this work? 
 
  raises   if one or more of the items is not an iterator, indicating you're at the bottom of the recursion. 
 If one of the iterators is shorter than the other, I have it returning a custom   object, which is detected by the   calls at the end of the function. The only reason for this would be if   or   has a class that for whatever reason compares equal to even ad-hoc classes like  , but where   is still meaningful between two different objects of that class. That seems like a pretty weird edge case and you can probably safely ignore it. 
 Using   instead of   prevents   incorrectly matching  . 
 
 I had a similar problem to yours, but in my case I was testing the data structures delivered to an API endpoint.  What I ended up doing was comparing a standardised JSON serialisation of each of the values.  It's not a general solution since it will throw an exception on any value that can't be serialised to JSON, but in my case that's a feature rather than a bug and it does work in your example case, so I thought I'd share. 
 I created a   file containing this code: 
 
 In your example, you'd use it like this: 
 
 Which should pass.  Here's an example of a failing test: 
 
 With output like this: 
 
 As you can see, in the event of a failure, you get plenty of context to work out what went wrong. 
 One downside of this approach is that the output from the test is JSON rather than Python, so if you copy/paste from the output to fix a test, you'll need to translate:   =>  ,   =>  ,   =>  . 
 
 Maybe  deepdiff  module helps, but I did't test it. 
 