*** representing-graphs-data-structure-in-python ***

 How can one neatly represent a  graph  in  Python ? (Starting from scratch i.e. no libraries!) What data structure (e.g. dicts/tuples/dict(tuples)) will be fast but also memory efficient? One must be able to do various graph  operations  on it. 
As pointed out, the various  graph representations  might help. How does one go about implementing them in Python? As for the libraries,  this question  has quite good answers. 
 
 Even though this is a somewhat old question, I thought I'd give a practical answer for anyone stumbling across this. 
 Let's say you get your input data for your connections as a list of tuples like so: 
 
 The data structure I've found to be most useful and efficient for graphs in Python is a  **dict of sets**
. This will be the underlying structure for our   class. You also have to know if these connections are arcs (directed, connect one way) or edges (undirected, connect both ways). We'll handle that by adding a   parameter to the   method. We'll also add some other helpful methods. 
 
 I'll leave it as an "exercise for the reader" to create a   and other methods. 
 Let's see this in action though... 
 
 
 NetworkX  is an awesome Python graph library. You'll be hard pressed to find something you need that it doesn't already do. 
 And it's open source so you can see how they implemented their algorithms. You can also add additional algorithms. 
 https://github.com/networkx/networkx/tree/master/networkx/algorithms 
 
 First, the choice of classical  list  vs.  matrix  representations depends on the purpose (on what do you want to do with the representation). The well-known problems and algorithms are related to the choice. The choice of the abstract representation kind of dictates how it should be implemented.  
 Second, the question is whether the vertices and edges should be expressed only in terms of existence, or whether they carry some extra information. 
 From Python built-in data types point-of-view, any value contained elsewhere is expressed as a (hidden) reference to the target object. If it is a variable (i.e. named reference), then the name and the reference is always stored in (an internal) dictionary. If you do not need names, then the reference can be stored in your own container -- here probably  Python list  will always be used for the  list  as abstraction. 
 Python list is implemented as a dynamic array of references, Python tuple is implemented as static array of references with constant content (the value of references cannot be changed). Because of that they can be easily indexed. This way, the list can be used also for implementation of matrices. 
 Another way to represent matrices are the arrays implemented by the standard module   -- more constrained with respect to the stored type, homogeneous value. The elements store the value directly. (The list stores the references to the value objects instead). This way, it is more memory efficient and also the access to the value is faster. 
 Sometimes, you may find useful even more restricted representation like  . 
 
 There are two excellent graph libraries
 NetworkX  and  igraph . You can find both library source codes on GitHub. You can always see how the functions are written. But I prefer NetworkX because its easy to understand. 
See their codes to know how they make the functions. You will get multiple ideas and then can choose how you want to make a graph using data structures. 
 