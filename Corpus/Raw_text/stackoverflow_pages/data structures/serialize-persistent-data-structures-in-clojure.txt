*** serialize-persistent-data-structures-in-clojure ***

 We all know that Rich uses a ideal hash tree-based method to implement the persistent data structures in Clojure. This structure enables us to manipulate the persistent data structures without copying a lot. 
 But it seems I cannot find the  correct  way to serialize this specific structure. For example given: 
 
 **My question is:**

 How can I serialize the   such that the contents of  , i.e.   mapping to   and   mapping to  , appear only once in the serialized content? It's like dumping a memory image of the structures. It's also like serializing the "internal nodes" as well as the "leaf nodes" referenced  here . 
 **P.S.**
 In case this is relevant, I am building a big DAG (directed acyclic graph) where we   quite a bit to link these nodes to those nodes, and want to serialize the DAG for later de-serialization. The expanded representation of the graph (i.e., the content one'll get when printing the DAG in repl) is unacceptably long. 
 
 Davyzhu, 
 Few things first: 
 
 The DAG, without tokenization strategy, will be as long as the DAG is. If   is referenced 1 or more times each will be fully  **realized**
 (i.e. displayed) in turn during printing. 
 For the interchanges of the information (serialize and deserialize) it will be largely dependent on your goals. For example, if you are serializing to send it off over the wire you will either want to do it fully (like the printed representation) or you will need to encode individual data points with some identification/tokenization strategy. The latter, of course, assumes the receiving end can deserialize with understanding of the tokenization protocol. 
 The tokenization strategy example, could use Clojure  meta  facilities perhaps, would require encoding unique keys for each content block reference and your DAG contains nodes where the edges are represented by the keys. 
 
 **Edit:**
: Modified since original post to clarify as per comments but the example 
does not reflect the hierarchical nature of the DAG. 
 A contrived example: 
 
 **Note:**
 Use of vectors, maps, lists, etc. to express your DAG is up to you. 
 
 This is one option (that will not work in Clojurescript, in case that matters) and in general may be perceived as a bad idea, but it is worth mentioning anyway. 
 If I understand your question, you want the   in   to not be "pasted" as a full copy, but rather retain a "reference" to the   such that the original   map is only serialized once. 
 
 One technique I would  consider  though not necessarily  encourage  (and only after exhausting other options such as a reorginization of your data structure as hinted by Frank C.), is to serialize the  code  for   rather than the structure itself. Then you read the code string back in and   it. This would only work if the structure for bunny does not change, or if it does, that you can easily build a string of the bunny map with the relevant symbols included as part of the string, rather than the contents of those symbols. 
 But a much better idea would be to serialize your "raw" data structures  only , like the maps   and  , then build your   after these are read back in -- by also serializing the  structure  but not the  contents  of bunny. I believe this is what Frank's answer is getting at. 
 
 Worth noting that if the structure of bunny does change dynamically, and you are able to create a string of  symbols  as suggested in 1. above, then that means you also have the tools to instead build a representation of bunny as in 2. above, which would be preferable. 
 Since code is data, option 1. is an example of the type of flexibility available to us as lisp programmers -- but that doesn't mean there are not better options. 
 