*** significance-of-classes-over-data-structures ***

 Whats the significance of classes over data-structures or data-structures over classes? 
 Ok so The most basic ones can be that we can use "Access Specifiers In Classes" meaning we can prevent some and allow some to access our data.
next can be that data-hiding. 
 But whats the main thing that separates classes and data-structures? I mean why need data-structures when we have classes or vice-versa? 
 
 In terms of syntax, in C++ the only difference between a   and a   is that members of a   are public by default, while the members of a   are private by default. 
 From a perspective of  implied design intent , however, there is a larger difference.    was/is a feature of C, and was/is used (in both C and C++) to help the programmer organize Plain Old Data in useful ways.  (for example, if you know every   in your persons-database needs to store the person's first name, last name, and age, then you can put two   arrays and and   together in a   and thereby make it more convenient to track all of that data as a unit, than if you had to store each of those fields separately). 
 C++ continues to provide that C-style struct functionality, but then goes further by adding additional features to better support object-oriented-programming.  In particular, C++ adds explicit support for  encapsulation  (via the   and   keywords), functionality-extension via  inheritance , the explicit tying-together of code and data via  methods , and run-time polymorphism via  virtual methods .  Note that all of these features can be approximated in C by manually following certain coding conventions, but by explicitly supporting them as part of the language, C++ makes them easier to use correctly and consistently. 
 Having done that, C++ then goes on to muddy the waters a bit, by making all of that new functionality available to   as well as  .  (This is why the technical difference is so minor, as described in the first paragraph)  However, I believe it is the case that when most programmers see a   defined, they tend to have an implicit expectation that the struct is intended be used as a simple C-style data-storage/data-organization receptacle, whereas when they see a  , they expect it to include not just "some raw data" but also some associated business-logic, as implemented in the class's methods, and that the class will enforce its particular rules/invariants by requiring the calling code to call those methods, rather than allowing the calling code to read/write the class's member-variables directly.  (That's why public member-variables are discouraged in a  , but less so in a   -- because a public member-variable in a class-object contradicts this expectation, and violates the  principle of least surprise ). 
 
 C++ has fundamantal types, and classes. 
 Struct and Class are both keywords that introduce a new class.  There are slightly different defaults. 
 Data structures are an arrangement of data with some kind of invarient.  They can be a class, they can contain classes, or they could be completely class free. 
 They are different categories of thing.  It is like asking what the difference is between steel and an automobile. 
 In a course assignment, what the teacher is asking for is for you to know the definition  **the teacher**
 or  **the text**
 taught those terms meant.  Terms mean what the context they are in tells them to mean.  It is a matter of "are you paying attention" not "do you know this fact"; having asked it of the internet, you have already failed. 
 