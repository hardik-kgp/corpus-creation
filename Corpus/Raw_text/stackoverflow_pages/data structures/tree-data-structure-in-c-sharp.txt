*** tree-data-structure-in-c-sharp ***
https://stackoverflow.com/questions/66893/tree-data-structure-in-c-sharp

 I was looking for a tree or graph data structure in C# but I guess there isn't one provided.  An Extensive Examination of Data Structures Using C# 2.0  explains a bit about why.  Is there a convenient library which is commonly used to provide this functionality?  Perhaps through a strategy pattern to solve the issues presented in the article. 
 I feel a bit silly implementing my own tree, just as I would implementing my own ArrayList.    
 I just want a generic tree which can be unbalanced.  Think of a directory tree.  C5 looks nifty, but their tree structures seem to be implemented as balanced red-black trees better suited to search than representing a hierarchy of nodes.   
 
 My best advice would be that there is no standard tree data structure because there are so many ways you could implement it that it would be impossible to cover all bases with one solution.  The more specific a solution, the less likely it is applicable to any given problem.  I even get annoyed with LinkedList - what if I want a circular linked list? 
 The basic structure you'll need to implement will be a collection of nodes, and here are some options to get you started.  Let's assume that the class Node is the base class of the entire solution. 
 If you need to only navigate down the tree, then a Node class needs a List of children. 
 If you need to navigate up the tree, then the Node class needs a link to its parent node. 
 Build an AddChild method that takes care of all the minutia of these two points and any other business logic that must be implemented (child limits, sorting the children, etc.) 
 
 
 Simple recursive implementation...
< 40 lines of code...
You just need to keep a reference to the root of the tree outside of the class,
or wrap it in another class, maybe rename to TreeNode?? 
 
 Here's mine, which is very similar to  Aaron Gage's , just a little more conventional, in my opinion. For my purposes, I haven't ran into any performance issues with  . It would be easy enough to switch to a LinkedList if needed. 
 
 
 
 Yet another tree structure: 
 
 Sample usage: 
 
 **BONUS**

See fully-fledged tree with: 
 
 iterator 
 searching 
 Java/C# 
 
 https://github.com/gt4dev/yet-another-tree-structure 
 
 The generally excellent  C5 Generic Collection Library  has several different tree-based data structures, including sets, bags and dictionaries. Source code is available if you want to study their implementation details. (I have used C5 collections in production code with good results, although I haven't used any of the tree structures specifically.) 
 
 See  http://quickgraph.codeplex.com/ 
 QuickGraph provides generic directed/undirected graph datastructures and algorithms for .Net 2.0 and up. QuickGraph comes with algorithms such as depth first seach, breath first search, A* search, shortest path, k-shortest path, maximum flow, minimum spanning tree, least common ancestors, etc... QuickGraph supports MSAGL, GLEE, and Graphviz to render the graphs, serialization to GraphML, etc... 
 
 If you would like to write your own, you can start with this six-part document detailing effective usage of C# 2.0 data structures and how to go about analyzing your implementation of data structures in C#. Each article has examples and an installer with samples you can follow along with. 
 “An Extensive Examination of Data Structures Using C# 2.0”  by Scott Mitchell 
 
 I have a little extension to the solutions. 
 Using a recursive generic declaration and a deriving subclass you can better concentrate on your actual target. 
 Notice, it's different from a non generic implementation, you don`t need to cast 'node' in 'NodeWorker'.  
 Here's my example: 
 
 
 Try this simple sample. 
 
 
 I create a  Node class  that could be helpfull for other people. The class has properties like: 
 
 Children 
 Ancestors 
 Descendants 
 Siblings 
 Level of the node 
 Parent 
 Root 
 Etc. 
 
 There is also the possibility to convert a flat list of items with an Id and a ParentId to a tree. The nodes holds a reference to both the children and the parent, so that makes iterating nodes quite fast. 
 
 Because it isn't mentioned I would like you draw attention the now released .net code-base: specifically the code for a   that implements a Red-Black-Tree:  
 https://github.com/Microsoft/referencesource/blob/master/System/compmod/system/collections/generic/sortedset.cs   
 This is, however, a balanced tree structure. So my answer is more a reference to what I believe is the only native tree-structure in the .net core library.   
 
 I've completed the code that @Berezh has shared. 
 
 
 Here's a Tree 
 
 You can even use initializers: 
 
 
 Here's my own: 
 
 Output: 
 
 
 Most trees are formed by the data you are processing.   
 
 Say you have a   class that includes details of someone’s
   , would you rather have the tree structure as part of your
  “domain class”, or use a separate tree class that contained links to
  your person objects?   Think about a simple operation like getting all
  the   of a  , should this code be in the  
  class, or should the user of the   class have to know about a
  separate tree class? 
 
 Another example is a parse tree in a compiler… 
 What both of these examples show is that the concept of a tree is part of the  **domain**
 of the data and using a separate general purpose tree at least doubles the number of objects that are created as well as making the API harder to program again. 
 What we want is a way to reuse the standard tree operations, without having to re-implement them for all trees, while at the same time, not having to use a standard tree class.   Boost has tried to solve this type of problem for C++, but I yet to see any effect for .NET get adapted. 
 
 I have added complete solution and example using NTree class above, also added "AddChild" method... 
 
 using 
 
 
 If you are going to display this tree on the GUI, you can use  TreeView  and  TreeNode .  (I suppose technically you can create a TreeNode without putting it on a GUI, but it does have more overhead than a simple homegrown TreeNode implementation.) 
 
 Here is my implementation of BST 
 
 
 In case you need a rooted tree data structure implementation that uses less memory, you can write your Node class as follows (C++ implementation): 
 
 