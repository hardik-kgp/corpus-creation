*** what-are-the-go-to-data-structures-in-java ***

 
 
 
 
 
 
 
 
                            As it currently stands, this question is not a good fit for our Q&A format. We expect answers to be supported by facts, references,   or expertise, but this question will likely solicit debate, arguments, polling, or extended discussion. If you feel that this question   can be improved and possibly reopened,  visit the help center  for guidance.
                            
                         
 
 
 Closed  6 years ago . 
 
 
 In Python, you can get pretty far if you know about the standard 'list', 'tuple', 'set' and 'dictionary'. These are the basic data structures any decent Python programmer should know about. 
 What are the Java equivalents to these data structures, and are there other data structures worth noting? 
 
 Sadly there is no native Tuple in Java, most of the time you go with: 
 
 List: ArrayList (is a List and a List is a Collection) 
 Set: HashSet (is a Set and a Set is a Collection) 
 Dictionary: HashMap (is a Map, but a Map is not a Collection) 
 
 Have a look at Java Collections in general:  http://docs.oracle.com/javase/tutorial/collections/index.html 
For concurrency:  http://docs.oracle.com/javase/tutorial/essential/concurrency/collections.html 
 There are a lot of external libraries (Guava, Apache, ...) 
 
 You can do a lot with LinkedList, HashMap, HashSet, and we have a dictionary  http://docs.oracle.com/javase/1.4.2/docs/api/java/util/Dictionary.html  too. 
 The best way to learn any new language is to read code. GitHub hosts a ton of open source Java applications. You can check on the latest here:  https://github.com/languages/Java 
 
 Does  this  help? 
 Java has all its data structures, including set, list,  HashMap , defined in the  Java Collections Framework . A HashMap is essentially equivalent to a dictionary. 
 As for a tuple equivalent, look into  unmodifiableList . 
 
 In Java he have a one-size-fits-all tool: a  class . For most problems you solve in Python with a tuple or a dictionary, in Java you write a custom class, with instance variables, constructors, getters, and setters. So when in Java, be prepared to write some boilerplate. 
 As far as data structures, the default ones are  ,  , and  . There are sorted versions:   and  â€”when you need them, they are very useful. 
 When you need close-to-the-metal performance, you'll resort to arrays. 
 In Java you also enjoy the built-in concurrency, and then it gets complicated: there are performant options like   and also synchronized wrappers around plain collections:   (these are methods that return a wrapping object). 
 