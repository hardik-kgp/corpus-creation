*** whats-the-difference-between-objects-and-data-structures ***

 I've been reading the book  Clean Code: A Handbook of Agile Software Craftsmanship  and in chapter six pages 95-98 it clarifies about the differences between objects and data structures: 
 
 Objects hide their data behind abstractions and expose functions that operate on that data. Data structures expose their data and have no meaningful functions. 
 Object expose behavior and hide data. This makes it easy to add new kinds of objects without changing existing behaviors. It also makes it hard to add new behaviors to existing objects. 
 Data structures expose data and have no significant behavior. This makes it easy to add new behaviors to existing data structures but makes it hard to add new data structures to existing functions. 
 
 I'm a tad bit confused whether some classes are objects or data structures. Say for example HashMaps in java.util, are they objects? (because of its methods like put(), get(), we dont know their inner workings) or are they data structures? (I've always thought of it as data structures because its a Map).  
 Strings as well, are they data structures or objects? 
 So far majority of the code I've been writing have been the so called "hybrid classes" which try to act as an object and a data structure as well. Any tips on how to avoid them as well? 
 
 The distinction between data structures and classes/objects is a harder to explain in Java than in C++.  In C, there are no classes, only data structures, that are nothing more than "containers" of typed and named fields. C++ inherited these "structs", so you can have both "classic" data structures and "real objects". 
 In Java, you can "emulate" C-style data structures using classes that have no methods and only public fields: 
 
 A user of   knows about the parts a vehicle is made of, and can directly interact with these parts.  Behavior, i.e. functions, have to be defined outside of the class.  That's why it is easy to change behavior: Adding new functions won't require existing code to change.  Changing data, on the other hand, requires changes in virtually every function interacting with  .  It violates encapsulation! 
 The idea behind OOP is to hide the data and expose behavior instead.  It focuses on what you can  do  with a vehicle without having to know if it has engine or how many wheels are installed: 
 
 Notice how the   could be a motorcycle, a car, a truck, or a tank -- you don't need to know the details.  Changing data is easy -- nobody outside the class knows about data so no user of the class needs to be changed.  Changing behavior is difficult: All subclasses must be adjusted when a new (abstract) function is added to the class. 
 Now, following the "rules of encapsulation", you could understand hiding the data as simply making the fields private and adding accessor methods to  : 
 
 In his book, Uncle Bob argues that by doing this, you still have a data structure and not an object.  You are still just modeling the vehicle as the sum of its parts, and expose these parts using methods.  It is essentially the same as the version with public fields and a plain old C   -- hence a data structure.  Hiding data and exposing methods is not enough to create an object, you have to consider if the methods actually expose  behavior  or just the data! 
 When you mix the two approaches, e.g. exposing   along with  , you end up with a "hybrid".  I don't have Martin's Book at hand, but I remember that he did not recommend hybrids at all, as you end up with the worst of both worlds: Objects where both data and behavior is hard to change. 
 Your questions concerning HashMaps and Strings are a bit tricky, as these are pretty low level and don't fit quite well in the kinds of classes you will be writing for your applications.  Nevertheless, using the definitions given above, you should be able to answer them. 
 A   is an object.  It exposes its behavior to you and hides all the nasty hashing details.  You tell it to   and   data, and don't care which hash function is used, how many "buckets" there are, and how collisions are handled.  Actually, you are using   solely through its   interface, which is quite a good indication of abstraction and "real" objects.  
 Don't get confused that you can use  instances  of a Map as a replacement for a data structure! 
 
 A  , on the other hand, is pretty much an array of characters, and does not try to hide this very much.  I guess one could call it a data structure, but to be honest I am not sure if much is to be gained one way or the other. 
 
 An object is an instance of a class. 
A class can model various things from the real world. It's an abstraction of something (car, socket, map, connection, student, teacher, you name it). 
 A data structure is a structure which organizes certain data in a certain way.
You can implement structures in ways different that by using classes (that's what you do in languages which don't support OOP e.g.; you can still implement a data structure in C let's say). 
 HashMap in java is a class which models a map data structure using hash-based implementation, that's why it's called HashMap. 
 Socket in java is a class which doesn't model a data structure but something else (a socket).  
 
 As I see it , what Robert Martin tries to convey, is that objects should not expose their data via getters and setters unless their sole purpose is to act as simple data containers. Good examples of such containers might be java beans, entity objects (from object mapping of DB entities), etc. 
 The Java Collection Framework classes, however, are not a good example of what he's referring to, since they don't really expose their internal data (which is in a lot of cases basic arrays). It provides abstraction that lets you retrieve objects that they contain. Thus (in my POV) they fit in the "Objects" category. 
 The reasons are stated by the quotes you added from the book, but there are more good reasons for refraining from exposing the internals. Classes that provide getters and setters invite breaches of the Law of Demeter, for instance. On top of that, knowing the structure of the state of some class (knowing which getters/setters it has) reduces the ability to abstract the implementation of that class. There are many more reasons of that sort. 
 
 This is what, I believe, Robert. C. Martin was trying to convey: 
 
 Data Structures are classes that simply act as containers of structured data. For example: 
 
 Objects, on the other hand, are used to create abstractions. An  **abstraction**
 is understood as: 
 
 a simplification of something much more complicated that is going on under the covers  The Law of Leaky Abstractions, Joel on Software 
 
 So, objects hide all their underpinnings and only let you manipulate the  essence  of their data in a simplified way. For instance: 
 
 Where we don't know how the Point is  implemented , but we do know how to  consume  it. 
 
 
 A data structure is only an abstraction, a special way of representing data. They are just human-made constructs, which help in reducing complexity at the high-level, i.e. to not work in the low-level. An object may seem to mean the same thing, but the major difference between objects and data structures is that an object might abstract anything. It also offers behaviour. A data structure does not have any behaviour because it is just data-holding memory.  
 The libraries classes such as Map, List,etc. are classes, which  represent  data structures. They implement and setup a data structure so that you can easily work with them in your programs by creating instances of them (i.e. objects).  
 
 A  data structure  is literally a structured representation of some data. It doesn't have any built-in "knowledge" other than the structure and naming of the data. An  object  is much more general and really could be almost any entity in your system that presents an interface for interaction and can be used in different contexts. Specifically, a traditional  class  object, for example, might contain data and suitable methods for accessing the data, and that data could be object instance-specific (per instance) or class level. 
 I'm unsure of the term "hybrid class" based upon the description of acting as an object or a data structure since a class often does include data. So that terminology seems redundant. 
 
 Data structures(DS) are an abstract way of saying that a structure holds some data'. HashMap with some key value pairs is a data structure in Java. Associated arrays are similarly in PHP etc. Objects is a little lower than the DS level. Your hashmap is a data structure. now to use a hashmap you create an 'object' of it and add data to that object using put method. I can have my own class Employee which has data and is thus a DS for me. But to use this DS to do some operations like o see if the employee is a male or a female colleague i need an instance of an Employee and test its gender property. 
 Don't confuse objects with data structures. 
 
 Your question is tagged as Java, so I will reference only Java here.
Objects are the Eve class in Java; that is to say everything in Java extends Object and object is a class.  
 Therefor, all data structures are Objects, but not all Objects are data structures.  
 The key to the difference is the term Encapsulation.  
 When you make an object in Java, it is considered best practice to make all of your data members private. You do this to protect them from anyone using the class.  
 However, you want people to be able to access the data, sometimes change it. So, you provide public methods called accessors and mutators to allow them to do so, also called getters and setters. Additionally, you may want them to view the object as a whole in a format of your choosing, so you can define a toString method; this returns a string representing the object's data.  
 A structure is slightly different.  
 It is a class.  
 It is an Object.  
 But it is usually private within another class; As a Node is private within a tree and should not be directly accessible to the user of the tree. However, inside the tree object the nodes data members are publicly visible. The node itself does not need accessors and mutators, because these functions are trusted to and protected by the tree object.  
 
Keywords to research: Encapsulation, Visibility Modifiers  
 
 An object is an instance of a class. A class can define a set of properties/fields that every instance/object of that class inherits. A data structure is a way to organize and store data. Technically a data structure is an object, but it's an object with the specific use for holding other objects (everything in Java is an object, even primitive types). 
 To answer your question a String is an object  and  a data structure. Every String object you create is an instance of the String class. A String, as Java represents it internally, is essentially a character array, and an array is a data structure. 
 Not all classes are blueprints for data structures, however all data structures are technically objects AKA instances of a class (that is specifically designed to store data), if that makes any sense. 
 