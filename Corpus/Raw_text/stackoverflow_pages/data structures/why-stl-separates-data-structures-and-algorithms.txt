*** why-stl-separates-data-structures-and-algorithms ***

 
 
 
 
 
 This question already has an answer here :
                            
                         
 
 
 
 Why is there a separation of algorithms, iterators and containers in C++ STL 
 
                                    (1 answer)
                                 
 
 Closed  3 years ago . 
 
 
 (i'm sorry.im not good in english.im iranian)
we know that the purpose of oop is merging data structures and algorithms to provide a single entity.so the STL separates them.why STL didn't write their  **own**
 methods as member functions?? 
 
 Consider implementing what you're suggesting - every data structure would have to re-implement every algorithm: 
 
 As you can see, there is  **severe code duplication**
. Also, this approach is  **unmaintainable**
, as adding a new algorithm will require the implementation of every container to be changed. 
 
 If  UFCS  is going to be accepted into the standard alongside  ranges , then you will be able to call algorithms on standard containers  **as if**
 they were member functions: 
 
 