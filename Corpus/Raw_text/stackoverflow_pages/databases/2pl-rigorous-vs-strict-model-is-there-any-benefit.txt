*** 2pl-rigorous-vs-strict-model-is-there-any-benefit ***

 In 2PL (two phase locking), what advantage(s) does the rigorous model have over  the strict model? 
 I) There is no advantage over the strict model. 
 II) In contrast to the strict model, it guarantees that starvation cannot occur. 
 III) In contrast to the strict model, it guarantees that deadlock cannot occur.   
 IV) In contrast to the strict model, there is no need to predict data needed in the future. 
 My note says all of the above are false. I am a bit confused. Can someone clarify for me why all of this is false? 
 
 **What is Two-Phase Locking (2PL) Protocol ?**

 
 **Now, what is Strict phase locking ?**

 Here a transaction must hold all its exclusive locks till it commits/aborts. 
 **But ,whats rigorous 2PL ?**

 Rigorous two-phase locking is even stricter: here all locks are held till commit/abort. In this protocol transactions can be serialized in the order in which they commit. 
 Much deeper : 
 **Strict 2PL :**

 
 Same as 2PL but Hold all exclusive locks until the transaction has already successfully committed or aborted. –It guarantees cascadeless recoverability 
 **Rigorous 2PL :**

 
 Same as Strict 2PL but Hold all locks until the transaction has already successfully committed or aborted. –It is used in dynamic environments
where data access patterns are not known before hand. 
 There is no deadlock. Also, a younger transaction requesting an item held by an
older transaction is aborted and restart with the same timestamp, starvation is avoided. 
 
 I hope that above
  clear explanations with diagram must have made you clear about the
  concept and advantages of rigorous over the other. 
 
 Thanks  
 
 **I - there is an advantage**

 Look at  this lecture note from UCLA : 
 
 Rigorous two-phase locking has the advantages of strict 2PL. In addition
  it has the property that for two conflicting transactions, their commit order
  is their serializability order. In some systems users might expect this behavior. 
 
 These lecture notes  have an example (the model in the example is strict - not rigorous): 
 
 Consider two transactions conducted at the same site in which a long running transaction T1 which reads x is ordered before a short transaction T2 that writes x. T2 returns first, showing an update version of x long before T1 completes based on the old version. 
 
 **II and III - does not affect deadlocks/starvation**

 Rigorous 2PL means that all locks are  **released**
 after the transaction ends as opposed to strict where read-only locks may be released earlier. This doesn't affect deadlocks or starvation as those occur in the  **expanding**
 phase (a transaction cannot acquire the needed lock). In a deadlock both processes are always in the expanding phase. 
 **IV - both need to know the needed data for locking in the expanding phase - shrinking phase varies**

 Strict:  I don't know the usual implementation details of strict 2PL but if a read lock is released before a transaction ends there has to be a knowledge (100% sure prediction if you like) that the lock is not needed later in the transaction. 
 Rigorous:  All the read locks are released at the end of a transaction and the transaction never has to evaluate if it should release a read lock or keep it for later reads in the transaction. 
 
 **Is rigorous or strict more used/preferred?**

 Which of those two models to use would depend on the situation. Modern DBMS use more complex concurrency handling than simple rigorous or strict 2PL. Having said that judging by the  Wikipedia article on two-phase locking  the  **rigorous (SS2PL) model is more widely used:**

 
 SS2PL [rigorous] has been the concurrency control protocol of choice for most database systems and utilized since their early days in the 1970s. [...] 
 2PL in its general form, as well as when combined with Strictness, i.e., Strict 2PL (S2PL), are not known to be utilized in practice. The popular SS2PL does not require marking "end of phase-1" as 2PL and S2PL do, and thus is simpler to implement. Also, unlike the general 2PL, SS2PL provides, as mentioned above, the useful Strictness and Commitment ordering properties. [...] 
 SS2PL Vs. S2PL: Both provide Serializability and Strictness. Since S2PL is a super class of SS2PL it may, in principle, provide more concurrency. However, no concurrency advantage is typically practically noticed (exactly same locking exists for both, with practically not much earlier lock release for S2PL), and the overhead of dealing with an end-of-phase-1 mechanism in S2PL, separate from transaction-end, is not justified. Also, while SS2PL provides Commitment ordering, S2PL does not. This explains the preference of SS2PL over S2PL. [...] 
 
 
 Transaction T2 in the above example does not follow 2PL and S2PL as a lock request (lock B)  is done after the lock release unlock(A) - hence violating the protocol. 
 
 Rigorous two phase locking is similar to strict two phase locking with two major differences:  
 
 In strict two phase locking the shared locks are released in
shrinking phase, but in rigorous two phase locking all the shared
and exclusive locks are kept until the end of the transaction. 
 In rigorous two phase locking we do not need to know the access
pattern of locks on data items beforehand so it is more appropriate
for dynamic environments while in strict two phase locking the
access pattern of locks should be specified at the start of
transaction. 
 
 So the fourth option is the correct one. 
 