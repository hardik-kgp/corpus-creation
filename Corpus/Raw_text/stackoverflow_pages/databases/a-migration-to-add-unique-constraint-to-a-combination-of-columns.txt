*** a-migration-to-add-unique-constraint-to-a-combination-of-columns ***

 What I need is a migration to apply unique constraint to a combination of columns. i.e. for a   table, a combination of  ,   and   should be unique. 
 
 
 
 According to howmanyofme.com, "There are 46,427 people named John Smith" in the United States alone. That's about 127 years of days. As this is well over the average lifespan of a human being, this means that a DOB clash is mathematically certain.  
 All I'm saying is that that particular combination of unique fields could lead to extreme user/customer frustration in future. 
 Consider something that's actually unique, like a national identification number, if appropriate. 
 (I realise I'm very late to the party with this one, but it could help future readers.) 
 
 You may want to add a constraint without an index.  This will depend on what database you're using.  Below is sample migration code for Postgres.    is a list of the columns you want to use for the constraint. 
 
 There are different constraints you can add.   Read the docs 
 
 Hi You may add unique index in your migration to the columns for example  
 
 or separate unique indexes for each column 
 
 In the typical example of a join table between users and posts: 
 
 Trying to create two similar records will throw a database error (Postgres in my case): 
 
 e.g. doing that: 
 
 Fully runnable example:  https://gist.github.com/Dorian/9d641ca78dad8eb64736173614d97ced 
  generated:  https://gist.github.com/Dorian/a8449287fa62b88463f48da986c1744a 
 
 For completeness sake, and to avoid confusion here are 3 ways of doing the same thing: 
 **Adding a named unique constraint to a combination of columns in Rails 5.2+**

 Let's say we have Locations table that belongs to an advertiser and has column reference_code and you only want 1 reference code per advertiser. so you want to add a unique constraint to a combination of columns and name it.   
 Do:  
   
 And make your migration look either something like this one liner: 
 
 OR this block version. 
 
 OR this raw SQL version 
 
 Any of these will have the same result, check your  
 