*** activerecord-talk-to-two-databases ***

 We've recently revamped a project, and are looking to bring all our old data into the new system.  The problem is that the schema is marginally different, so a straight SQL import isn't possible.  Due to some denormalization and database changes, we'll need to do some massaging of the data before it's ready for import.  I was hoping for something like this: 
 
 In the example above, OldUser is reading from the old database, and NewUser is working on the new database.  I need both sets of models (new and old) to retain their associations to properly denormalize some of that data. 
 Is there any project/library that can help me do this? 
 
 You should simply specify your connection options either in the model or in database.yml. Let's go the 1st route initially: 
 
 From regular code, you use the models like you're used to: 
 
 ActiveRecord will handle all the details for you. 
 Now, if you're like me, you don't like putting such level of details in your models - username, passwords, etc. Simple - move that config to database.yml and connect using the correct establish_connection syntax: 
 
 Note the naming convention - legacy_users_#{Rails.env} is what I'm aiming for here, and here's how to do it: 
 
 Bingo, everything else will work just fine. 
 
 UPDATED
with an expanded example showing foreign keys on the tables and a couple examples showing how to identify none standard column names to route in rails properly. 
 inside your app 
 
 class code 
 
 and scope it where you need it 
 
 
 Your options are: 
 
 Magic Models  Last updated in 2009 (as of 11/1/2012) 
 Connection Ninja  Last updated in 2010 (as of 11/1/2012) 
 DB Charmer  Last updated roughly 6 months ago (as of 11/1/2012) 
 Overriding   in your model to connect to the desired db 
 Activewarehouse-etl - a fairly active gem to do db Extract Transform Load work. 
 
 