*** add-rows-on-migrations ***

 I'd like to know which is the preferred way to add records to a database table in a Rails Migration. I've read on Ola Bini's book (Jruby on Rails) that he does something like this: 
 
 This is nice and clean but for some reason, doesn't work on the lasts versions of rails... 
 The question is, how do you populate the database with default data (like users or something)? 
 Thanks! 
 
 You could use fixtures for that.  It means having a yaml file somewhere with the data you want to insert. 
 Here is a changeset I committed for this in one of my app: 
 
 
 
 
 
 The Rails API documentation for migrations shows a simpler way to achieve this. 
 http://api.rubyonrails.org/classes/ActiveRecord/Migration.html 
 
 Tested on Rails 2.3.0, but this should work for many earlier versions too. 
 
 You could also define in your seeds.rb file, for instance: 
 
 and after run: 
 
 
 your migrations have access to all your models, so you shouldn't be creating a class inside the migration. 
 I am using the latest rails, and I can confirm that the example you posted definitely OUGHT to work. 
 However, migrations are a special beast.  As long as you are clear, I don't see anything wrong with an  . 
 The advantage to this is, you can easily generate it by using some kind of GUI or web front-end to populate your starting data, and then doing a  . 
 Whatever makes things easiest for the kind of person who's going to be executing your migrations and maintaining the product. 
 
 You should really not use 
 
 in your migrations. 
 I have done similar but in the long run they are not guaranteed to work. 
 When you run the migration the model class you are using is the one at the time you run the migration, not the one at the time you created the migration.  You will have to be sure you never change your model in such a way to stop you migration from running. 
 You are much better off running SQL for example: 
 
 