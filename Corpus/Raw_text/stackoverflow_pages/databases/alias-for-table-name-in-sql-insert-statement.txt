*** alias-for-table-name-in-sql-insert-statement ***

 Is it possible to specify an alias name for the table I am inserting values into? 
 I want to specify a condition inside a nested query and the table is too verbose... 
 Something like turning this: 
 
 into this: 
 
 (obviously my case is longer and involves a few references more) 
 
 You don't alias a table, you alias an instance of a table reference. 
 This allows self joins, etc as you have mutliple instances of references to the same physical table.  It's not a case where each   gives that table a new name elsewhere, it's just an alias to refer to That particular reference. 
 
 In your case, there are two show stoppers... 
 The table being inserted into isn't itself part of the select query, it's not a referenced set in the same way as  ,   or   for example.  So, you can't alias it at all (because there's no need, it can never be referenced). 
 Also, even if it was, you can't reference the whole table through an alias.  You reference a field, as part the query itterating through the set.  For example, this doesn't work either... 
 
 You can get around the latter example using... 
 
 But that still brings us back to the first point, the table being inserted into never gets referenced in the query part of your statement. 
 The only way I can think of getting close is to create a view... 
 
 I think the answer is  **NO**
. There is no   after the  
 
 Reference 
 **Update**

 The   clause became part of PostgreSQL as of  version 9.5 , though as @MatBailie notes above, the nesting means you'll need to alias the   query and the   sub-query separately or things will break. e.g.: 
 
 
 As others have said, you cannot alias the name as part of the   statement.  You would need to put it in the subquery in the   statement.   
 
 