*** am-i-using-java-pooledconnections-correctly ***

 I want to use pooled connections with Java (because it is costly to create one connection per thread) so I'm using the   object.  I'm persisting my data source across threads.  So, I'm only using one datasource throughout the application like this: 
 
 Now that I have my datasource created, I'm doing the following in each separate thread: 
 
 I guess what I'm confused on is the call to  
 **Is this really fetching a pooled connection?**
  And is this thread safe?
I noticed that PooledConnection has methods like notify() and wait()... meaning that I don't think it is doing what I think it is doing... 
 Also, when and how should I release the connection? 
 I'm wondering if it would be more beneficial to roll my own because then I'd be more familiar with everything, but I don't really want to reinvent the wheel in this case :). 
 Thanks SO 
 
 This is not the right way. The datasource needs to be managed by whatever container you're running the application in. The   is  **not**
 a connection pool. It is just a concrete implementation of the   interface. You normally define it in the JNDI context and obtain it from there. Also MySQL itself states it all explicitly in  their documentation .  
 Now, how to use it depends on the purpose of the application. If it is a web application, then you need to refer the JNDI resources documentation of the servletcontainer/appserver in question. If it is for example Tomcat, then you can find it  here . If you're running a client application --for which I would highly question the value of a connection pool--, then you need to look for a connection pooling framework which can make use of the MySQL-provided connection pooled datasource, such as  C3P0 . 
 The other problem with the code which you posted is that the   will return the  underlying  connection which is thus  **not**
 a pooled connection. Calling close on it won't return the connection to the pool, but just really close it. The pool has to create a new connection everytime.  
 Then the threadsafety story, that depends on the  real  connection pooling framework in question. C3P0 has proven its robustness in years, you don't worry about it as long as you write JDBC code according the standard idiom, i.e. use  **only**
 the JDBC interfaces and acquire  **and**
 close all resources ( ,   and  ) in shortest possible scope. 
 