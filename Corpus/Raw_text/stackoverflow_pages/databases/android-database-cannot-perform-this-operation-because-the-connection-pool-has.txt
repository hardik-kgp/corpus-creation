*** android-database-cannot-perform-this-operation-because-the-connection-pool-has ***

 I have strange problem with android database and cursors. Time to time (very rarely) happens, that I got crash report from customers. It's hard to find out why it crashes, as I have ~ 150 000 active users and maybe 1 report per week or so, so it's really some minor bug. Here is exception: 
 
 Before every cursor "iterating and exploring" I use this code to make sure everything is ok: 
 
 And it falls at line: 
 
 Anyone know why? I think, I am checking all possible exceptions and conditions...Why is my app crashing here? 
 PS: All database methods are synchronized and I am correctly opening and closing database/cursors in all cases, I checked it many times. 
 
 **Problem**

If you try another operation after closing the database, it will give you that exception.Because   releases a reference to the object, closing the object if the last reference was released.
 **Solution**

Keep a single   instance( ) in a static context.  Do lazy initialization, and   that method. Such as 
 
 And  **you don't have to close it?  When the app shuts down, itâ€™ll let go of the file reference, if its even holding on to it**
.
 
i.e. You should not close the DB since it will be used again in the next call.
So Just remove  
 
 For more info See at  Single SQLite connection 
 
 The problem is clear that   
 
 SQLiteCursor cannot perform 'getCount' operation because the connection pool has been closed 
 
 To avoid IllegalStateException, we may keep the database open all the time if that is appropriate. In other situations we need to  **check the status**
 before trying getCount.  
 My experience is as follows: 
 **Defective Code:**

 
 **Perfect Code:**

 
 
 You just remove
Remove db.close() 
 
 I had this problem too. my SQLiteOpenHelper class was Singleton as well as closing the db after each CRUD operation.
After I make my methods(CRUD) synchronized in my SQLiteOpenHelper class, I didn't get error any more :) 
 
 Same problem occured to me, so after reading  explanation  I removed 
 
 from 
 
 and 
 method of ContentProvider  No need of db.close() as ContentProvider itself take care of closing of database. 
 