*** android-pre-populated-database ***

 
 
 
 
 
 This question already has answers here :
                            
                         
 
 
 
 Ship an application with a database 
 
                                    (14 answers)
                                 
 
 Closed  5 years ago . 
 
 
 I am working on an Android application that will need several entries (a single table, with 1000-10000 rows) populated in that app's database before the user can use that app.  I've looked around some tutorials and I am unsure of the best way to do this.  Should I just check if the database exists each time the app is started and, if it isn't there, create it and insert the thousands of records I need?  Or is there a better way to handle this problem?  Ideally, it could be included as part of the app's install process, but I'm not sure if this is possible.  Any feedback would be greatly appreciated. 
 
 Here is an example of how to create and populate a database, you can just do this on the app install, this only creates one entry though so may be inefficient for what you want to do. 
 
 
 the way I'm going here is to ship a prepopulated database in the assets folder. You can drop in files there and use them as-they-are. Beware, however, that there is a size limit of 1MB, so maybe you'll have to split files, or compress them.  
 Compression is quite handy and well supported by the os itself.  
 hope this was of any help :-) 
 
 JavaDoc from SQLiteOpenHelper: 
 
 A helper class to manage database
  creation and version management. You
  create a subclass implementing
  onCreate(SQLiteDatabase),
  onUpgrade(SQLiteDatabase, int, int)
  and optionally onOpen(SQLiteDatabase),
  and this class takes care of opening
  the database if it exists, creating it
  if it does not, and upgrading it as
  necessary. Transactions are used to
  make sure the database is always in a
  sensible state. 
 For an example, see the
  NotePadProvider class in the NotePad
  sample application, in the samples/
  directory of the SDK. 
 
 So if you extend this class, you have 3 methods which will be called in some cases and you can choose, what do to.
Thats the best practice :) 
 