*** android-sqlite-database-slow-insertion ***

 I need to parse a fairly large XML file (varying between about a hundred kilobytes and several hundred kilobytes), which I'm doing using  . I'm currently testing this with a 152KB file. 
 During parsing, I also insert the data in an SQLite database using calls similar to the following:  . All of this together takes about 80 seconds for the 152KB test file (which comes down to inserting roughly 200 rows). 
 When I comment out all insert statements (but leave in everything else, such as creating   etc.) the same file takes only 23 seconds. 
 Is it normal for the database operations to have such a big overhead? Can I do anything about that? 
 
 You should do batch inserts. 
 Pseudocode: 
 
 That increased the speed of inserts in my apps extremely. 
 Update: 
@Yuku provided a very interesting blog post:  Android using inserthelper for faster insertions into sqlite database 
 
 Since the InsertHelper mentioned by Yuku and Brett is  deprecated  now (API level 17), it seems the right alternative recommended by Google is using  **SQLiteStatement**
. 
 I used the database insert method like this: 
 
 After I also experienced some serious performance issues, the following code speeded my 500 inserts up from  **14.5 sec**
 to only  **270 ms**
, amazing! 
 Here is how I used SQLiteStatement: 
 
 
 Compiling the sql insert statement helps speed things up.  It can also require more effort to shore everything up and prevent possible injection since it's now all on your shoulders. 
 Another approach which can also speed things up is the under-documented android.database.DatabaseUtils.InsertHelper class.  My understanding is that it actually wraps compiled insert statements.  Going from non-compiled transacted inserts to compiled transacted inserts was about a 3x gain in speed (2ms per insert to .6ms per insert) for my large (200K+ entries) but simple SQLite inserts. 
 Sample code: 
 
 
 If the table has an index on it, consider dropping it prior to inserting the records and then adding it back after you've commited your records. 
 
 If using a ContentProvider: 
 
 Then the private function to perform the insert (still inside your content provider): 
 
 