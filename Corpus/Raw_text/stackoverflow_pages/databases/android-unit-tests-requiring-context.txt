*** android-unit-tests-requiring-context ***

 I am writing my first Android database backend and I'm struggling to unit test the creation of my database. 
 Currently the problem I am encountering is obtaining a valid Context object to pass to my implementation of SQLiteOpenHelper.  Is there a way to get a Context object in a class extending TestCase?  The solution I have thought of is to instantiate an Activity in the setup method of my TestCase and then assigning the Context of that Activity to a field variable which my test methods can access...but it seems like there should be an easier way. 
 Thanks for your input! 
 Macy 
 
 You might try switching to  AndroidTestCase .  From looking at the docs, it seems like it should be able to provide you with a valid Context to pass to SQLiteOpenHelper. 
 Edit:
Keep in mind that you probably have to have your tests setup in an "Android Test Project" in Eclipse, since the tests will try to execute on the emulator (or real device). 
 
 You can use   methods to get a Context: 
  - provides the application   of the target application. 
  - provides the   of this Instrumentationâ€™s package. 
 
 For AndroidX use   or  . 
 
 Using the   method only gives a stub Context in my experience. For my tests, I'm using an empty activity in my main app and getting the   via that. Am also extending the test suite class with the   class. Seems to work for me. 
 
 What does everyone else do? 
 
 You should use ApplicationTestCase or ServiceTestCase. 
 
 You can derive from  **MockContext**
 and return for example a  MockResources  on  , a valid  ContentResolver  on  , etc. That allows, with some pain, some  unit tests . 
 The alternative is to run for example  **Robolectric**
 which simulates a whole Android OS. Those would be for  system tests : It's a lot slower to run. 
 
 Your test is not a Unit test!!! 
 When you need  
 
 Context 
 Read or Write on storage 
 Access Network 
 Or change any config to test your function 
 
 You are not writing a unit test. 
 You need to write your test in   package 
 
 Extending AndroidTestCase and calling AndroidTestCase:getContext() has worked fine for me to get Context for and use it with an SQLiteDatabase. 
 The only niggle is that the database it creates and/or uses   will be the same as the one used by the production application so you will probably want to use a different filename for both 
 eg.  
 
 
 First Create Test Class under (androidTest). 
 Now use following code: 
 
 