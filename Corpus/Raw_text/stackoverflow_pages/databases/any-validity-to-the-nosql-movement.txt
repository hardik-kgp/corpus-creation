*** any-validity-to-the-nosql-movement ***

 First of all im relatively new to the Database world, Im graduating with my B.S. in Comp Science this semester and Database Technologies have really caught my eye so ive been studying alot of T-SQL because I want to in the end get a SQL Development job (MS SQL server seemed like the best choice right now because it's on the rise) 
 ANYWAYS, i've heard alot of hoopla about this NOsql movement of Non-relational database management systems. Trying to keep this question and non-subjective as possible i mainly want to know the advantages/disadvantages of NRDBMS's (like Nosql) and if there is really a future in them. Perhaps as a side question, is it a bad time to be studying SQL in general (specifically the normal RDBMS's we are so used to). I forsee people sticking with this for a long time, but then again.....I dont know. I'd hate to see my interest suddenly be taking a dive in the market. 
 
 There is definitely validity to the NoSQL movement, but I wouldn't worry about your SQL skills going to waste.  NoSQL storage architectures were born out of the need for highly available and scalable data stores that went beyond what a typical relational database could provide.  This comes at a cost though, and typically that cost is guaranteed consistency.  This isn't always a large concern.  In the case of something like Facebook doesn't have complete consistency for a period of time for things like your pictures, status updates, etc.  As long as they get consistent at some point, it's okay. On the other end, take your bank account.  That type of data store needs to provide the strong ACID characteristics that a relational database provides. 
 NoSQL isn't something that I see taking over the world, it's an alternative to the common approach of RDBMS's and as with everything else it has it's strengths and weaknesses.     
 Here is an excellent  article  on the subject written about NetFlix. 
 
 Others can address the NoSQL specifics better than I can, but as for the second part of your question (worrying about getting into SQL if NoSQL starts becoming more popular): I have customers who still use very old flat-file based mainframes.   
 SQL hasn't even reached full penetration yet, and it is VERY entrenched in a large number of business processes.  The market for SQL development and maintenance won't be going away any time soon, and if it starts to it won't be overnight -  you'll have time to learn the Next Big Thing before you're obsolete. 
 
 NoSql databases are great for storing unstructured data.  Think of it as the next generation of Lotus Notes. 
 I wouldn't leverage a NoSql database for storing a list of people and addresses, as those are completely structured and well known. 
 However, if I had a set of dynamic attributes of some type (name/value pairs) or something a similar which required a lot of pivoting to get to, then I'd seriously look into it.  I might even go that route even if there is structure, but it isn't known ahead of time.  Such as with dynamic tables. 
 That said, when we did some evaluations earlier this year (March 2010) and we didn't think the state of the available open source NoSql databases were ready for serious production.  There's a lot more to databases than just putting data in and getting it out.  Automated backups, load balancing, solid query tools, consistency checkers, etc are an absolute must.  We will reevaluate early next year. 
 
 SQL ain't going away, and the relational model is a basic information-systems building block that's definitely worth studying and understanding in its own right. I'd stick with it. 
 Databases based on an object instead of relational model have existed forever. The difference is that in the past they tended to be closed (and expensive!) packages from single vendors. No-one really wants to have their mission-critical apps locked into a proprietary database, dependent on licensing from a single, sometimes unresponsive, supplier. 
 In contrast today's NoSQL databases are typically free, open, and well-aligned to existing web-oriented technologies, allowing for quick, responsive scaling without worrying about licenses, and potential participation in future development (or local forking/patching if necessary). 
 What they also are is diverse, such that you can't really classify them all together as being good for a particular kind of task. There are trivial key-value buckets that make no attempt at being ACID-safe, there are object databases with their own safety paradigms (like CouchDB's revision conflicts), there are more traditional relational-like databases that just don't use SQL as a query mechanism (because let's face it, nice though it is that you can use the same query language across databases, hacking together SQL queries into a string just so that the database at the other end can pick the string apart to get the logic of the query you wanted to do, is a bit silly). 
 There are lots of them, most are very immature compared to the ancient edifice of SQL, and it'll take a while for winners to emerge. Is NoSQL “valid”? Sure. But I would say to use a particular NoSQL database as a basis for  study  today (as opposed to using one that fits your needs for a particular task that SQL is bad at) would be premature. 
 
 The future of big systems will require skills with both SQL and NoSQL. 
 NoSQL is an important paradigm and it's not going anywhere. Joins don't scale horizontally and SQL database are effectively just big "join machines". NoSQL is still in relative infancy, there are tons of players and just like SQL, each one has its own little variations. 
 But that's all going to shake out in the next few years 
 As a recent grad, you have to start somewhere. SQL is simply the easiest place to start. You will see lots of it going forward. However, once you've got your head around SQL (say you've passed your MS T-SQL course), I strongly suggest taking a look at something like MongoDB/Riak/CouchDB as your next adventure. 
 You probably won't jump into a company using NoSQL, but you will run in to problems where NoSQL is actually a much simpler solution. But you won't know this until you actually play with NoSQL. 
 
 It sounds like you're already pointing in the right direction by looking at job postings and seeing what current needs are in the way of data storage and management, if this is your passion. I wouldn't be surprised if interviews will start asking about the advantages/disadvantages of nosql just to see if you're familiar with the latest developments (and if you're applying for a dba position, they might also ask about ACID compliance and the CAP theorem). 
 Lots of companies are starting to use NoSQL technologies, so it's valid in that people are using it. And not just small startups either, but companies like facebook (cassandra), yahoo (hadoop), google (bigtable), and etsy (mongodb) believe that nosql solutions fit certain needs. 
 
 I think NoSQL is more of a niche. It's really good for some applications, but will probably never totally displace RDBMSs (although combinations of NoSQL on top of an RDBMS backend seem to be coming out more I hear). Advice would be to get good with an old-school RDBMS (it's still much more common, at least from what I've seen), and then get into NoSQL on the side if you want. 
 
 Brent Ozar did an excellent writeup on the topic here:  NoSQL Basics for Database Administrators 
 