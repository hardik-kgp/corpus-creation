*** are-databases-and-functional-programming-at-odds ***

 I've been a web developer for some time now, and have recently started learning some functional programming.  Like others, I've had some significant trouble apply many of these concepts to my professional work.  For me, the primary reason for this is I see a conflict between between FP's goal of remaining stateless seems quite at odds with that fact that most web development work I've done has been heavily tied to databases, which are very data-centric. 
 One thing that made me a much more productive developer on the OOP side of things was the discovery of object-relational mappers like MyGeneration d00dads for .Net, Class::DBI for perl, ActiveRecord for ruby, etc.  This allowed me to stay away from writing insert and select statements all day, and to focus on working with the data easily as objects. Of course, I could still write SQL queries when their power was needed, but otherwise it was abstracted nicely behind the scenes. 
 Now, turning to functional-programming, it seems like with many of the FP web frameworks like Links require writing a lot of boilerplate sql code, as in  this example .  Weblocks seems a little better, but it seems to use kind of an OOP model for working with data, and still requires code to be manually written for each table in your database as in  this example .  I suppose you use some code generation to write these mapping functions, but that seems decidedly un-lisp-like. 
 (Note I have not looked at Weblocks or Links extremely closely, I may just be misunderstanding how they are used). 
 So the question is, for the database access portions (which I believe are pretty large) of web application, or other development requiring interface with a sql database we seem to be forced down one of the following paths: 
 
 Don't Use Functional Programming 
 Access Data in an annoying, un-abstracted way that involves manually writing a lot of SQL or SQL-like code ala Links 
 Force our functional Language into a pseudo-OOP paradigm, thus removing some of the elegance and stability of true functional programming. 
 
 Clearly, none of these options seem ideal.  Has found a way circumvent these issues?  Is there really an even an issue here? 
 Note: I personally am most familiar with LISP on the FP front, so if you want to give any examples and know multiple FP languages, lisp would probably be the preferred language of choice 
 PS: For Issues specific to other aspects of web development see  this question . 
 
 First of all, I would not say that CLOS (Common Lisp Object System) is "pseudo-OO".  It is first class OO. 
 Second, I believe that you should use the paradigm that fits your needs. 
 You cannot statelessly store data, while a function is flow of data and does not really need state. 
 If you have several needs intermixed, mix your paradigms.  Do not restrict yourself to only using the lower right corner of your toolbox. 
 
 Coming at this from the perspective of a database person, I find that front end developers try too hard to find ways to make databases fit their model rather than consider the most effective ways to use database which are not object oriented or functional but relational and using set-theory. I have seen this generally result in poorly performing code. And further it creates code that is difficult to performance tune.  
 When considering database access there are three main considerations - data integrity (why all business rules should be enforced at the database level not through the user interface), performance, and security. SQL is written to manage the first two considerations more effectively than any front end language. Because it is specifically designed to do that. The task of a database is far different than the task of a user interface. Is it any wonder that the type of code that is most effective in managing the task is conceptually different?  
 And databases hold information critical to the survival of a company. Is is any wonder that businesses aren't willing to experiment with new methods when their survival is at stake. Heck many businesses are unwilling to even upgrade to new versions of their existing database. So there is in inherent conservatism in database design. And it is deliberately that way. 
 I wouldn't try to write T-SQL or use database design concepts to create your user-interface, why would you try to use your interface language and design concepts to access my database? Because you think SQL isn't fancy (or new) enough? Or you don't feel comfortable with it? Just because something doesn't fit the model you feel most comfortable with, doesn't mean it is bad or wrong. It means that it is different and probably different for a legitimate reason. You use a different tool for a different task.  
 
 You should look at the paper "Out of the Tar Pit" by Ben Moseley and Peter Marks, available here:  "Out of the Tar Pit" (Feb. 6, 2006) 
 It is a modern classic which details a programming paradigm/system called Functional-Relational Programming. While not directly relating to databases, it discusses how to isolate interactions with the outside world (databases, for example) from the functional core of a system. 
 The paper also discusses how to implement a system where the internal state of the application is defined and modified using a relational algebra, which obviously is related to relational databases. 
 This paper will not give an an exact answer to how to integrate databases and functional programming, but it will help you design a system to minimize the problem. 
 
 
 Functional languages do not have the goal to remain stateless, they have the goal to make management of state explicit. For instance, in Haskell, you can consider the State monad as the heart of "normal" state and the IO monad a representation of state which must exist outside of the program. Both of these monads allow you to (a) explicitly represent stateful actions and (b) build stateful actions by composing them using referentially transparent tools. 
 You reference a number of ORMs, which, per their name, abstract databases as sets of objects. Truely, this is not what the information in a relational database represents! Per its name, it represents relational data. SQL is an algebra (language) for handling relationships on a relational data set and is actually quite "functional" itself. I bring this up so as to consider that (a) ORMs are not the only way to map database information, (b) that SQL is actually a pretty nice language for some database designs, and (c) that functional languages often have relational algebra mappings which expose the power of SQL in an idiomatic (and in the case of Haskell, typechecked) fashion. 
 
 I would say most lisps are a poor man's functional language. It's fully capable of being used according to modern functional practices, but since it doesn't require them the community is less likely to use them. This leads to a mixture of methods which can be highly useful but certainly obscures how pure functional interfaces can still use databases meaningfully. 
 
 I don't think the stateless nature of fp languages is a problem with connecting to databases. Lisp is a non-pure functional programming language so it shouldn't have any problem dealing with state. And pure functional programming languages like Haskell have ways of dealing with input and output that can be applied to using databases. 
 From your question it seems like your main problem lies in finding a good way to abstract away the record-based data you get back from your database into something that is lisp-y (lisp-ish?) without having to write a lot of SQL code. This seems more like a problem with the tooling/libraries than a problem with the language paradigm. If you want to do pure FP maybe lisp isn't the right language for you. Common lisp seems more about integrating good ideas from oo, fp and other paradigms than about pure fp. Maybe you should be using Erlang or Haskell if you want to go the pure FP route. 
 I do think the 'pseudo-oo' ideas in lisp have their merit too. You might want to try them out. If they don't fit the way you want to work with your data you could try creating a layer on top of Weblocks that allows you to work with your data the way you want. This might be easier than writing everything yourself. 
 Disclaimer: I'm not a Lisp expert. I'm mostly interested in programming languages and have been playing with Lisp/CLOS, Scheme, Erlang, Python and a bit of Ruby. In daily programming life I'm still forced to use C#. 
 
 If your database doesn't destroy information, then you can work with it in a functional manner consistent with "pure functional" programming values by working in functions of the entire database as a value. 
 If at time T the database states that "Bob likes Suzie", and you had a function likes which accepted a database and a liker, then so long as you can recover the database at time T you have a pure functional program that involves a database. e.g. 
 
 To do this you can't ever throw away information you might use (which in all practicality means you cannot throw away information), so your storage needs will increase monotonically. But you can start to work with your database as a linear series of discrete values, where subsequent values are related to the prior ones through transactions. 
 This is the major idea behind  Datomic , for example.  
 
 Not at all.  There are a genre of databases known as 'Functional Databases', of which  Mnesia  is perhaps the most accessible example.  The basic principle is that functional programming is declarative, so it can be optimised.  You can implement a join using  List Comprehensions  on persistent collections and the query optimiser can automagically work out how to implement the disk access. 
 Mnesia is written in  Erlang  and there is at least one web framework ( Erlyweb ) available for that platform.  Erlang is inherently parallel with a shared-nothing threading model, so in certain ways it lends itself to scalable architectures. 
 
 I'm most comfortable with Haskell. The most prominent Haskell web framework (comparable to Rails and Django) is called Yesod. It seems to have a pretty cool, type-safe, multi-backend ORM. Have a look at the  Persistance chapter  in their book. 
 
 A database is the perfect way to keep track of state in a stateless API. If you subscribe to REST, then your goal is to write stateless code that interacts with a datastore (or some other backend) that keeps track of state information in a transparent way so that your client doesn't have to. 
 The idea of an Object-Relational Mapper, where you import a database record as an object and then modify it, is just as applicable and useful to functional programming as it is to object oriented programming. The one caveat is that functional programming does not modify the  object  in place, but the database API can allow you to modify the  record  in place. The control flow of your client would look something like this: 
 
 Import the record as an object (the database API can lock the record at this point), 
 Read the object and branch based on its contents as you like, 
 Package a new object with your desired modifications, 
 Pass the new object to the appropriate API call which updates the record on the database. 
 
 The database will update the record with your changes. Pure functional programming might disallow reassigning variables  within the scope of your program , but your database API can still allow in-place updates. 
 
 Databases and Functional Programming can be fused. 
 for example: 
 Clojure is a functional programming language based on relational database theory. 
 
 Note: In the latest spec2, spec is more like RMDB. 
see:  spec-alpha2 wiki: Schema-and-select 
 I advocate: Building a relational data model on top of hash-map to achieve a combination of NoSQL and RMDB advantages. This is actually a reverse implementation of posgtresql. 
 Duck Typing: If it looks like a duck and quacks like a duck, it must be a duck. 
 **If clojure's data model like a RMDB, clojure's facilities like a RMDB and clojure's data manipulation like a RMDB, clojure must be a RMDB.**

 Clojure is a functional programming language based on relational database theory 
 Everything is RMDB 
 Implement relational data model and programming based on hash-map (NoSQL) 
 