*** are-document-oriented-databases-meant-to-replace-relational-databases ***

 Recently I've been working a little with  MongoDB  and I have to say I really like it.  However it is a completely different type of database then I am used.  I've noticed that it is most definitely better for certain types of data, however for heavily normalized databases it might not be the best choice. 
 It appears to me however that it can completely take the place of just about any relational database you may have and in most cases perform better, which is mind boggling.  This leads me to ask a few questions: 
 
 Are document-oriented databases being developed to be the next generation of databases and basically replace relational databases completely? 
 Is it possible that projects would be better off using both a document-oriented database and a relational database side by side for various data which is better suited for one or the other? 
 If document-oriented databases are not meant to replace relational databases, then does anyone have an example of a database structure which would absolutely be better off in a relational database (or vice-versa)? 
 
 
 
 Are document-oriented databases have been developed to be the next generation of databases and basically replace relational databases completely? 
 
 No. Document-oriented databases (like MongoDB) are very good at the type of tasks that we typically see in modern web sites (fast look-ups of individual items or small sets of items). 
 But they make some big trade-offs with relational systems. Without things like ACID compliance they're not going to be able to replace certain RDBMS. And if you look at systems like MongoDB, the lack of ACID compliance is a big reason it's so fast. 
 
 Is it possible that projects would be better off using both a document-oriented database and a relational database side by side for various data which is better suited for one or the other? 
 
 Yes. In fact, I'm running a very large production web-site that uses both. The system was started in MySQL, but we've migrated part of it over to MongoDB, b/c we need a Key-Value store and MySQL just isn't very good at finding one item in a 150M records. 
 
 If document-oriented databases are not meant to replace relational databases, then does anyone have an example of a database structure which would absolutely be better off in a relational database (or vice-versa)? 
 
 **Document-oriented databases**
 are great storing data that is easily contained in "key-value" and simple, linear "parent-child" relationships. Simple examples here are things like Blogs and Wikis. 
 However,  **relational databases**
 still have a strong leg up on things like reporting, which tends to be "set-based". 
 Honestly, I can see a world where most data is "handled" by Document-oriented database, but where the reporting is done in a relational database that is updated by Map-reduce jobs. 
 
 This is really a question of fitness for purpose. 
 If you want to be able to join some tables together and return a filtered set of results, you can only do that with a relational database. If you want mind-bending performance and have incredible volumes of data, that's when column-family or document-oriented databases come into their own. 
 This is a classic trade-off. Relational databases offer you a whole suite of features, which comes with a performance cost. If you couldn't join, index, scan or perform a whole other list of features, you remove the need to have any view over ALL data, which gives you the performance and distribution you need to crunch serious data. 
 Also, I recommend you follow the blogs of Ayende Rahien on this topic. 
 http://ayende.com/blog/ 
 
 @Sohnee is spot on. I might add that relational databases  
 
 are excellent for retrieving information in unexpected combinations -- even if that occasionally leads to the Bad Idea of extensive reports being run on time-sensitive production systems rather than on a separate data warehouse. 
 are a mature technology where you can easily find staff and well tested solutions to any number of problems (including the limitations of the relational model, as well as the imperfect implementation that is SQL). 
 
 Ask yourself what you want to do, and what  **qualities**
 are important to you. You can do everything programming related in shell scripts. Do you want to?  
 
 I keep asking the same question, which is what landed me here. I use both MySQL and MongoDB (not in tandem currently, though its an idea). I have to honestly say I'm very happy to never touch MySQL again. Sure there's the "ACID" compliance, but have you ever run into the need to repair your tables with MySQL? Have you ever had a corrupted database? It happens. Have you ever had any other issues with MySQL? Any lock contentions or dead locks? Any problems with clustering? How easy was it to setup and configure?  
 MongoDB...You turn it on and it's done....Then it's autosharding. It's incredibly simple and it's also incredibly fast. So think about that. Your time. 
 No, they don't have JOINs but it's a completely incorrect statement to say that it discounts more than 99% of data management needs. I often get opposition when trying to explain MongoDB, people even snickering. Let's just face it. People don't want to learn new things and they think that what they know is all they need. Sure, you can get away using MySQL the rest of your life and build your web sites. It works, we know it works. We also know it fails. If it didn't, you'd never ask the question and we probably wouldn't see so many document oriented databases. We know that yes it does scale but it's a pain in the rear to scale it. 
 Also let's eliminate traffic and scaling from the picture. Take out setup. Now let's focus on use. What is your experience when using MySQL? How good are you with MySQL architecture and making efficient queries? How much time do you spend looking over queries with EXPLAIN? How much time do you spend making schema diagrams? ... I say take that time back. It's better spent elsewhere. 
 That's my two cents. I really do love MongoDB and hope to never use MySQL again and for the type of web sites I build, it's very possible that I won't need to. Though I'm still trying to find out WHEN I would want to use MySQL over MongoDB, not when I CAN (let's face it, it stores data, congratulations, I could write a ton of XML files too but it's not a good idea), but when it would BENEFIT to use one or the other. In the meantime, I'm going to go do my job with MongoDB and have less headaches. 
 
 As long as you don't need multi-object transactions, MongoDB can be a favorable replacement for an RDMBS, especially in a web application context. Speed, schemalessness, and document modeling are all helpful this domain. 
 
 In my opinion document-oriented databases are only good for 
 
 Databases which data is better represented using a hierarchical (tree) model. This is not common for website databases. 
 Databases with huge amount of data like the Facebook and Amazon databases. In this case it is required to sacrifice the benefits of the relational model. 
 
 
 AFAIK, document databases don't have JOIN. That's pretty much a show-stopper for > 99% of data management needs. 
 As Matthew Flaschen points out in the comments, even on the desktop, databases such as SQLite are introducing SQL semantics to areas that have traditionally used propriety file formats or XML. 
 