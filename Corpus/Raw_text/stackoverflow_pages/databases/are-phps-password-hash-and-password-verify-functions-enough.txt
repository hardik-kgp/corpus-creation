*** are-phps-password-hash-and-password-verify-functions-enough ***

 I'm building a site that  **has users on them,**
 and as with most sites housing some user-type system, they sign in with  **their e-mails and passwords**
. I'm  **using PHP**
 for the back-end portion of my site. 
 After reading up some articles and posts on the Internet, I learned of the PHP functions  **password_hash()**
 and  **password_verify()**
 and wanted to know if an example procedure such as this one was  **secure enough?**

 
 Register the user,  **password_hash()**
 their password and  **store the hash in the database**
. 
 When logging in, use  **password_verify()**
 to verify the password and  **log them in**
. 
 If they want to change their password, get their input and  **password_hash() the input again.**

 
 So the questions I have with this are  **as follows:**

 
 Are password_hash() and password_verify() the  **only functions**
 I need? 
 Can I take  **raw user input**
 and  **safely**
 hash a password using  **password_hash()**
 for storage in a  **database**
? 
 
 Any answers would be greatly be appreciated. Thank you. 
 
 Yes to both questions, with a couple of caveats: 
 
 Bcrypt truncates after 72 characters. While this doesn't degrade security in any practical way, it still leaves a bad taste in some peoples' mouths. People typically work around this by passing it through a hash function like so (please read the second caveat!): 
 
 Bcrypt breaks on   bytes, which means that if the SHA512 hash of your password begins with  , an attacker cracking the hashes will see it as the bcrypt hash of an empty string. 
 
 If you want to accept passwords longer than 72 characters without silent truncation, do what we did in  password_lock : base-64 encode the raw hash output during hashing AND verification.  
 (The authenticated encryption of the password hash that password_lock performs is optional, and only increases security if your database is on separate hardware from the webserver.) 
 But if you're just accepting user's passwords, bcrypt is fine. Most people's 72 character passwords are unbreakable anyway. 
 
  and   is enough when you use these functions with BCrypt algo. BCrypt is the most secure algo now a days to hash passwords. BCrypt is the default algo as of php 5.5.0 so you can use   to use BCrypt. BCrypt requires 5.3.7 or greater version of php.   generates salt automatically for every password, so i will recommend not to use own salt, let   do it for you and set CPU cost minimum  . 
 