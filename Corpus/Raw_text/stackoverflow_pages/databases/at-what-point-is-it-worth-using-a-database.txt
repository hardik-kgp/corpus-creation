*** at-what-point-is-it-worth-using-a-database ***

 I have a question relating to databases and at what point is worth diving into one.  I am primarily an embedded engineer, but I am writing an application using Qt to interface with our controller.  
 We are at an odd point where we have enough data that it would be feasible to implement a database (around 700+ items and growing) to manage everything, but I am not sure it is worth the time right now to deal with.  I have no problems implementing the GUI with files generated from excel and parsed in, but it gets tedious and hard to track even with VBA scripts.  I have been playing around with converting our data into something more manageable for the application side with Microsoft Access and that seems to be working well.  If that works out I am only a step (or several) away from using an SQL database and using the Qt library to access and modify it. 
 I don't have much experience managing data at this level and am curious what may be the best way to approach this.  So what are some of the real benefits of using a database if any in this case?  I realize much of this can be very application specific, but some general ideas and suggestions on how to straddle the embedded/application programming line would be helpful. 
 This is not about putting a database in an embedded project.  It is also not a business type application where larger databases are commonly used.  I am designing a GUI for a single user on a desktop to interface with a micro-controller for monitoring and configuration purposes. 
 
 I decided to go with SQLite.  You can do some very interesting things with data that I didn't really consider an option when first starting this project. 
 
 A database is worthwhile when:   
 
 Your application evolves to some
form of data driven execution. 
 You're spending time designing and
developing external data storage
structures. 
 Sharing data between applications or
organizations (including individual
people) 
 The data is no longer short and
simple. 
 Data Duplication 
 
 **Evolution to Data Driven Execution**

When the data is changing but the execution is not, this is a sign of a data driven program or parts of the program are data driven.  A set of configuration options is a sign of a data driven function, but the whole application may not be data driven.  In any case, a database can help manage the data.  (The database library or application does not have to be huge like Oracle, but can be lean and mean like SQLite).   
 **Design & Development of External Data Structures**

Posting questions to  **Stack Overflow**
 about serialization or converting trees and lists to use files is a good indication your program has graduated to using a database.  Also, if you are spending any amount of time designing algorithms to store data in a file or designing the data in a file is a good time to research the usage of a database.   
 **Sharing Data**

Whether your application is sharing data with another application, another organization or another person, a database can assist.  By using a database, data consistency is easier to achieve.  One of the big issues in problem investigation is that teams are not using the same data.  The customer may use one set of data; the validation team another and development using a different set of data.  A database makes versioning the data easier and allows entities to use the same data. 
 **Complex Data**

Programs start out using small tables of hard coded data.  This evolves into using dynamic data with maps, trees and lists.  Sometimes the data expands from simple two columns to 8 or more.  Database theory and databases can ease the complexity of organizing data.  Let the database worry about managing the data and free up your application and your development time.  After all, how the data is managed is not as important as to the quality of the data and it's accessibility.   
 **Data Duplication**

Often times, when data grows, there is an ever growing attraction for duplicate data.  Databases and database theory can minimize the duplication of data.  Databases can be configured to warn against duplications. 
 Moving to using a database has many factors to be considered.  Some include but are not limited to:  data complexity, data duplication (including parts of the data), project deadlines, development costs and licensing issues.  If your program can run more efficiently with a database, then do so.  A database may also save development time (and money).  There are other tasks that you and your application can be performing than managing data.  Leave data management up to the experts. 
 
 What you are describing doesn't sound like a typical business application, and many of the answers already posted here assume that this is the kind of application you are talking about, so let me offer a different perspective. 
 Whether or not you use a database for 700 items is going to depend greatly on the nature of the data. 
 I would say that, about 90% of the time at this scale, you will benefit from a light-weight database like SQLite, provided that: 
 
 The data may potentially grow substantially larger than what you are describing,  
 The data may be shared by more than one user,  
 You may need to run queries against the data (which I don't think you're doing right now), and  
 The data  can easily be described in table form. 
 
 The other 10% of the time, your data will be highly structured, hierarchical, object-based, and doesn't neatly fit into the table model of a database or Excel table.  If this is the case, consider using XML files. 
 I know developers instinctively like to throw databases at problems like this, but if you are currently using Excel data to design user interfaces (or display configuration settings), rather than display a customer record, XML may be a better fit.  XML is more expressive than either Excel or database tables, and can be easily manipulated with a simple text editor.   
 XML parsers and data binders for C++ are  easy to find . 
 
 I recommend you to introduce a Database in your app, your application will gain flexibility and will be easier to maintain and to improve with new features in the future. 
I would start with a lightweight file based db like  Sqlite . 
With a well designed db you'll have: 
 
 Reduced data redundancy 
 Greater data integrity  
 Improved data security 
 
 Last but not least, using a database will save you from the  **Excel import/update/export Hell**
! 
 
 Reasons for using a database: 
 
 Concurrent writes. It's easy to achieve concurrency in databases 
 Easy querying. SQL queries tend to be much concise than procedural code to search data. UPDATEs, INSERT INTOs can also do lots of stuff with very little code 
 Integrity. Constraints are very easy to define and are enforced without writing code. If you have a non-null constraint, you can rest assured that the value won't be null, no need to write checks anywhere. If you have a foreign key constraint in place, you won't have "dangling references". 
 Performance over large datasets. Indexing is very simple to add to an SQL database 
 
 Reasons for not using a database: 
 
 It tends to be an extra dependency (although there exist very lightweight databases- I like H2 for Java, for instance) 
 Data not well suited to a relational schema. Things that are basically key/value maps. XML (although databases often support XPath, etc.).  
 Sometimes files are more convenient. They can be diff'ed, merged, edited with a plain text editor, etc. Sometimes spreadsheets can be more practical (you don't have to build an editor- you can use a spreadsheet program) 
 Your data is already somewhere else 
 
 
 When you have a lot of data that you're not sure how they will be exploited in the future. 
 For example you might want to add an SQLite database in an embedded application that need to register statistics that you're not sure how will be used. Later you send the full database for injection in a bigger one running on a central server and those data can easily be exploited, using requests. 
 In fact, if your application's purpose is to "gather data" then having a database is a must have. 
 
 I see quite a few requirements that well met by databases: 
 1). Ad hoc queries. Find me all the {X} that meet criteria Y 
 2). Data with structure that can benefit from normalisation - factoring out common values into separate "tables". You can save space and reduce the possibility of inconsistency this way. Once you've done this then those ad-hoc queries start to be really useful. 
 3). Large data volumes. Professional database are very good at making good use of resoruces, clever query optmisations and paging strategies. Trying to write this stuff yourself is a real challenge. 
 You're clearly not needing that last one, but the other two, maybe do apply to you. 
 
 Don't forget that the appropriate database can be quite different depending on your requirements (and don't forget that a text file could be used as a database if you're requirements are simple enough - for example, config files are just a specific kind of database).  Such parameters might be: 
 
 number of records 
 size of data items 
 does the database need to be shared with other devices?  Concurrently? 
 how complex are the relationships between the various pieces of data 
 is the database read only (created at build time and not changed, for example)? 
 does the database need to be updated by multiple entities concurrently? 
 do you need to support complex queries? 
 
 For a database with 700 entries, an in-memory sorted array loaded from a text file might well be appropriate.  But I could also see the need for an embedded SQL database or maybe having the controller request data from the database over a network connection depending on what the various requirements (and resource limitations) are. 
 
 There isn't a specific point at which a database is worthwhile.  Instead I usually ask the following questions: 
 
 Is the amount of data the application uses/creates growing? 
 Is the upper limit of this data growth unknown (or unclear)? 
 Will the application need to aggregate or filter this data? 
 Could there be future uses of the data that may not be obvious right now? 
 Is performance of data retrieval and/or storage important? 
 Are there (or could there be) multiple users of the application who share data?  
 
 If I answer 'Yes' to most of these questions I almost always choose a database (as opposed to other options such as XML/ini/CSV/Excel/text files or the filesystem).   
 Also, if the application will have many users who could be accessing the data concurrently, I'll lean towards a full database server (MySQL, SQl Server, Oracle etc).   
 But often in a single user (or small concurrency) situation, a local database such as SQLite cannot be beaten for portability and ease of deployment.  
 
 To add a negative:  not suitable for real-time processing, due to non-deterministic latency.  However, It would be quite ample for looking up and setting operating parameters, for instance during startup.  I would not put database accesses on critical time paths. 
 
 You don't need a database if you have a few thousand rows in one or two tables to handle in a single user app (for the embedded point). 
 If it is for multiple users (concurrent access, locking) or the need of transactions you definitly should consider a database.
Handling complex datastructures in normalized tables and maintain integrety, or a huge amount of data would be another indication you should use a database. 
 
 It sounds like your application is running on a desktop computer and simply communicating to the embedded device. 
 As such using a database is much more feasible.  Using one on an embedded platform is a much more complex issue. 
 On the desktop front I use a database when there is the need to store new information continuously and the need to extract that information in a relational way.  What i don't use databases for is storing static information, information i read once at load and thats it.  The exception is when the application has many users and there is the need to storage this information on a per user basis. 
 It sounds be to me like your collecting information from your embedded device, storing it somehow, then using it later to display via a GUI.   
 This is a good case for using a database, especially if you can architect the system such that there is a data collection daemon that manages the continuous communication with the embedded device.  This app can then just write the data into the database.  When the GUI is launched it can extract the data for display.   
 Using the database will also ease your GUI develop if you need to display different views, such as "show me all the entries between 2 dates".  With a database you just ask it for the correct values to display with a proper SQL query and the GUI displays whatever comes back allowing you to decouple much of the "business logic" code from the GUI. 
 
 We are also facing a similar situation. We have set of data coming from different test setups and it is currently being dumped into excel sheets, processed using Perl or VBA. 
 We found out this method had lot of problems: 
 i. Managing data using excel sheets is quite cumbersome. After some time you have a whole lot of excel sheets and there is no easy way to retrieve required data from it. 
 ii. People start sending the excel sheets to and fro for comments and review through e-mails. E-Mail becomes the primary mode of managing the comments related to the data. These comments are lost at a later point of time and there is no way of retrieving it back. 
 iii. Multiple copies of the files get created and changes in one copy are not reflected in the other - there is no versioning. 
 This is for the same reasons we have decided to move to a database based solution and are currently working on it. Let me summaries what we are trying to do: 
 i. The database is in a central server accessible by PC in all the test setups. 
 ii. All the data goes into a temporary location (local hard disk in files) as soon as it is generated. From the files, it is pushed into database by a process running in the background (so even if there is a network problem, data will be present in the local files system). 
 iii. We have a web based application which allows users to log in and access data in the format they want. The portal will allow them to add comment, generate different kind of reports, share it with other users after review etc. It will also have the ability to export data into excel sheet, just in case you need to take it with you. 
 Let know if this can be better implemented. 
 
 "At what point is it worth using a database?" 
 If and when you've got data to manage ? 
 