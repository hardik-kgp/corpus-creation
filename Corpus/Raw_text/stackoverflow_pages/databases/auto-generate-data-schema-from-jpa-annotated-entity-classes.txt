*** auto-generate-data-schema-from-jpa-annotated-entity-classes ***

 I'm using JPA (Hibernate's implementation) to annotate entity classes to persist to a relational database (MySQL or SQL Server). Is there an easy way to auto generate the database schema (table creation scripts) from the annotated classes? 
 I'm still in the prototyping phase and anticipate frequent schema changes. I would like to be able to specify and change the data model from the annotated code. Grails is similar in that it generates the database from the domain classes. 
 
 You can use  hbm2ddl  from Hibernate. The docs are  here . 
 
 **Generate create and drop script for given JPA entities**

 We use this code to generate the drop and create statements:
Just construct this class with all entity classes and call create/dropTableScript. 
 If needed you can use a persitence.xml and persitance unit name instead. Just say something
and I post the code too. 
 
 
 As a related note: Documentation for generating database schemas using EclipseLink JPA can be found  here . 
 
 As Hibernate 4.3+ now implements JPA 2.1 the appropriate way to generate DDL scripts is to use following set of JPA 2.1 properties : 
 
 As it will be run at runtime, you may want to execute this DDL generation at build.
 **There is no supported official maven plugin anymore for Hibernate4 probably because Hibernate team is moving to Gradle.**

 Anyway, this is the JPA 2.1 approach to generate this script programmatically : 
 
 As you can see it's very simple ! 
 You can now use this in an AntTask, or MAVEN build like this (for MAVEN) : 
 
 
 Here's an explaination of how to use the hibernate SchemaExport class to do exactly what you want. 
 http://jandrewthompson.blogspot.com/2009/10/how-to-generate-ddl-scripts-from.html 
 
 If you prefer configuring in Spring then this should be helpful: 
 
 
 You can use maven plugin to achieve this. 
 
 
 
 Add the above code in the persistence.xml under properties tag.
"update" will create the table when first time you run your code, after that, only update the table structures if any changes in domain object. 
 
 With EclipseLink, you should add property: 
 
 As it is said here:
 http://www.eclipse.org/eclipselink/documentation/2.4/jpa/extensions/p_ddl_generation.htm 
 My persistence.xml: 
 
 