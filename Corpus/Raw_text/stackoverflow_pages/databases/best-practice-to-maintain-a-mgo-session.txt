*** best-practice-to-maintain-a-mgo-session ***

 I'm currently using a mongodb with mgo lib for a web application, but I'm not sure if the way I'm using it, is good one .. 
 
 I init the db session and create variables who takes the collection and document value,
so when I need to query a collection, I use the variable to make it. 
 Like that : 
 
 So is there a best practice or this one is fine ..?
Thanks 
 
 I suggest not using a global session like that. Instead, you can create a type that is responsible for all the database interaction. For example: 
 
 There are many benefits to that design. An important one is that it allows you to have multiple sessions in flight at the same time, so if you have an http handler, for example, you can create a local session that is backed by an independent session just for that one request: 
 
 The mgo driver behaves nicely in that case, as sessions are internally cached and reused/maintained. Each session will also be backed by an independent socket while in use, and may have independent settings configured, and will also have independent error handling. These are issues you'll eventually have to deal with if you're using a single global session. 
 
 Although not directly answering your question, regarding mgo session checking you must use defer/recover since mgo calls (even mgo.session.Ping) panic.  As far as I can tell there is no other way of checking mgo session state ( mgo godocs ).   You can use  Gustavo Niemeyer 's suggestion and add a method on your   type. 
 
 
 With go 1.7, the most idiomatic way of handling mongo session on a webserver is to use the new standard library package   to write a middleware that can attach  the   to whenever the request context Done() is called. So you do not need to remeber to close 
 
 