*** best-practices-for-working-with-multiple-tables ***

 I use a database with multiple tables in my application. I have an XML parser which needs to write data to two tables while parsing. I created two database adapters for both tables, but now I have a problem. When I'm working with one table, it's easy: 
 
 Since it's a SAX parser, in my opinion (maybe I'm wrong), this will be even better: 
 
 But how do I do it if I need to insert data to the second table? For example, if I have the second adapter, which  I think will be a bad idea: 
 
 Any thoughts on how to achieve this? 
 
 My database adapter. An instance is always stored in MyApplication which inherites from Application. Just think about a second table where I defined the first one... currently this is just a short version, in reality this adapter handles 7 tables in the database. 
 
 
 I've had success with creating an abstract base class with the database name/create statement and other shared info, and then extending it for every table.  This way, I can keep all of my CRUD methods separate (which I much prefer).  The only downside is that the DATABASE_CREATE statement(s) must reside in the parent class, and must include all of the tables, because new tables can't be added afterwards, but in my opinion that's a small price to pay to keep the CRUD methods for each table separate. 
 Doing this was fairly simple, but here are some notes: 
 
 The create statement in the parent class  must  be broken up for each table, because db.execSQL cannot execute more than one statement. 
 I changed all private vars/methods to protected, just in case. 
 If you are adding tables to an existing application (not sure if this is specific to emulator), the application must be uninstalled and then reinstalled. 
 
 Here is the code for my abstract parent class, which was based on the Notepad Tutorial.  The children simply extend this, calling the super's constructor (feel free to use this): 
 
 A slightly more detailed explanation is available here:  http://pheide.com/page/11/tab/24#post13 
 
 phoxicle's solution is a great starting point, but per Kevin Galligan's  notes on Android's SQLite serialization , this implementation isn't thread safe and will fail silently when multiple database connections (e.g. from different threads) try to write the database: 
 
 If you try to write to the database from actual distinct connections at the same time, one will fail. It will not wait till the first is done and then write. It will simply not write your change. Worse, if you don’t call the right version of insert/update on the SQLiteDatabase, you won’t get an exception. You’ll just get a message in your LogCat, and that will be it. 
 So, multiple threads? Use one helper. 
 
 
 Here's a modified implementation of phoxicle's database adapter that uses a static SQLiteOpenHelper instance and is thus limited to a single database connection: 
 
 Extend DBBaseAdapter for each table to implement your CRUD methods: 
 
 
 I'm a bit late maybe but i always open my database, not my table. So this form me as no sense. 
 
 Rather do this. 
 
 then if you want to update juste chose the table: 
 
 And that's all. Hope it can help other people 
 