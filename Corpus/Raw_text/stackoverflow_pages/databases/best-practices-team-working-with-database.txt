*** best-practices-team-working-with-database ***

 
 
 
 
 
 Closed . This question needs to be more  focused . It is not currently accepting answers.
                            
                         
 
 
 
 
 
 
 
 
 
 
 Want to improve this question?  Update the question so it focuses on one problem only by  editing this post .
                         
 Closed  3 years ago . 
 
 
 
 What is better for team working on DB? Is it Local database instance for each developer or shared database? 
 
 In my experience a team should have (at least) one shared database for integraton. 
 During development each team member should have an independed database otherwise changes of database schema could hinder other team members. These instances could also be on a centralized server. 
 
 I can only talk about the way the team I'm in currently works, which fits our needs well enough: 
 We have one central data model script that updates any database automatically to the latest schema version. Developers check in changes to this script together with changes to the source code (single commit on the same repository). The nightly builds update a central database copy, followed by a batch of automated tests on that database, and the human QA team also uses this same database the next day for all their testing.  
 We don't allow schema changes on the central database instance any other way than via the integration builds. For developing the schema change script, changes are developed on a separate database instance, either on the central server, or locally (depending on personal preference). 
 
 I don't think it depends at all.  Each environment should have it's own database instance. Personally, I would never reccommend that everyone on the team works on the same copy of the source, and I view the database code and instance the same way. 
 If you are having problems with missing database changes, this is a symptom of a different development process issue.  It would be analagous to forgetting to add a code file to source control. 
 Jeff Atwood has a pretty good article on source controlling database code. 
 Different developers supposedly work on different issues - how do you avoid stepping on other people's toes while unit testing? 
 I would absolutely advocate an integration/test environment, which is updated via a  Continuous Integration process .  This environment often serves as a litmus test for your deployment procedure as well. 
 
 At Redgate we'd recommend that each developer is given their own instance, as sandboxing ensures that developers don't tread on each other's toes. However, there are pros and cons with both models. 
 In our experience talking to database developers, roughly half of database development is performed on a shared environment, and half on a dedicated per-developer environment. 
 
 From experience, a shared database is better. Our code used to break all the time because someone added a column on their local database, then uploaded their new source code to SVN. Everyone else's implementation would then break until they figured out what had changed in the database. 
 I would have a shared database for development. We had one or two dev databases too for miscellaneous testing. 
 
 Having seperate database instances for a developer help them work in isolation however if we are a large team and working on multiple things at the sametime then it is good to have a shared enviornment too so that all the changes that needs to be delivered at the same time are not breaking each other and their dependecies could also be figured out correctly. This also helps in identifying where any application may break due to a change. So it is better to have a shared enviornment too along with some isolated enviornment replica copy of the development enviornment just in case we might want to test something big and complicated that is very critical and need to work anyhow. 
 But the only problem is to keep multiple enviornment in sync with each other as any missing change can be fatal. 
 
 I know people here are speaking in terms of their past experience but this is not such an easy question to answer universally.  There are pros and cons to each approach and should be addressed based on the type of application and team you're working with. 
 If you don't know which route to go .. I would suggest going with shared development database first to see if you encounter any problems.  If this solution works, it should be the preferred method since it eliminates the "integration" step.  However, depending on the type of team and environment needs, you may need to adapt. 
 