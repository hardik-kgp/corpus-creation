*** best-way-to-check-for-empty-or-null-value ***

 What is best way to check if value is null or empty string in Postgres sql statements? 
 Value can be long expression so it is preferable that it is written only once in check. 
 Currently I'm using: 
 
 But it looks a bit ugly. 
  may be   column or expression containing   columns with trailing spaces. 
 What is best way? 
 
 The expression   yields: 
    .. for   (or for  any  string consisting of only spaces with the data type  ) 
    .. for  
   .. for  anything  else   
 So to check for:  **"**
** is either NULL or empty"**
: 
 
 Or the reverse approach (may be easier to read):  
 
 Works for  any character type  including the obsolescent   which is hardly ever useful. 
 The manual about comparison operators. 
 **Or**
 use the expression you already had, just without the   which would be useless for  (see below), or it would include strings consisting of only spaces in the test for other character types: 
 
 But the expressions at the top are faster. 
 Asserting the opposite:  **"**
** is neither NULL nor empty"**
 is even simpler: 
 
 **About **

 Do not confuse this data type with other character types like  ,  ,   or   (with quotes), which are all useful data types. This is about the outdated data type with very limited usefulness:  , short for:  . Also,   and   are short for   /   (same thing). 
 In   (unlike other string types!) an  empty string  is not different from any other string consisting of only spaces. All of these are folded to  n  spaces in   per definition of the type. It follows logically that this works for   as well: 
 
 Just as much as these (which wouldn't work for other character types): 
 
 **Demo**

 Empty string equals any string of spaces when cast to  : 
 
 
 
 
 Test for "null or empty string" with  : 
 
 
 
 
 Test for "null or empty string" with  
 
 
 
 
 **dbfiddle **
**here**

 Old SQL Fiddle 
 Related: 
 
 Any downsides of using data type "text" for storing strings? 
 
 
 To check for null and empty: 
 
 To check for null, empty and spaces (trim the string) 
 
 
 Checking for the length of the string also works and is compact: 
 
 
 If there may be empty trailing spaces, probably there isn't better solution.   is just for problems like yours. 
 
 Something that I saw people using is  . This may be not the fastest one, but happens to be one of the shortest. 
 Tried it on MS SQL as well as on PostgreSQL. 
 
 My preffered way to compare nullable fields is:
NULLIF(nullablefield, :ParameterValue) IS NULL AND NULLIF(:ParameterValue, nullablefield) IS NULL . This is cumbersome but is of universal use while Coalesce is impossible in some cases. 
 The second and inverse use of NULLIF is because "NULLIF(nullablefield, :ParameterValue) IS NULL" will always return "true" if the first parameter is null. 
 
 If database having large number of records then   can take more time 
you can use null check in different ways like :
1)  
2)  
3)  
 
 another way is 
 
 
 A lot of the answers are the shortest way, not the necessarily the best way if the column has lots of nulls.  Breaking the checks up allows the optimizer to evaluate the check faster as it doesn't have to do work on the other condition. 
 
 The string comparison doesn't need to be evaluated since the first condition is false. 
 