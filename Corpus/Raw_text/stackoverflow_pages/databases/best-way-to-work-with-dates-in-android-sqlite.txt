*** best-way-to-work-with-dates-in-android-sqlite ***

 
 
 
 
 
 Closed . This question is  opinion-based . It is not currently accepting answers.
                            
                         
 
 
 
 
 
 
 
 
 
 
 Want to improve this question?  Update the question so it can be answered with facts and citations by  editing this post .
                         
 Closed  last year . 
 
 
 
 I'm having some trouble working with dates on my Android application that uses SQLite.
I have a couple questions: 
 
 What type should I use to store dates in SQLite (text, integer, ...)? 
 Given the best way to store dates how do I store It properly using ContentValues? 
 What's the best way to retrieve the date from the SQLite database? 
 How to make a sql select on SQLite, ordering the results by date? 
 
 
 You can use a text field to store dates within  . 
 Storing dates in UTC format, the default if you use     will then allow sorting by the date column. 
 Retrieving dates as strings from   you can then format/convert them as required into local regionalised formats using the Calendar or the   method. 
 Here's a regionalised formatter method I use; 
 
 
 The best way is to store the dates as a number, received by using the Calendar command. 
 
 Why do this? First of all, getting values from a date range is easy. Just convert your date into milliseconds, and then query appropriately. Sorting by date is similarly easy. The calls to convert among various formats are also likewise easy, as I included. Bottom line is, with this method, you can do anything you need to do, no problems. It will be slightly difficult to read a raw value, but it more than makes up that slight disadvantage with being easily machine readable and usable. And in fact, it is relatively easy to build a reader (And I know there are some out there) that will automatically convert the time tag to date as such for easy of reading. 
 It's worth mentioning that the values that come out of this should be long, not int.  Integer in sqlite  can mean many things, anything from 1-8 bytes, but for almost all dates 64 bits, or a long, is what works. 
 EDIT: As has been pointed out in the comments, you have to use the   to properly get the timestamp if you do this. 
 
 
 As presumed  in this comment , I'd always use integers to store dates. 
 For storing, you could use a utility method 
 
 like so: 
 
 Another utility method takes care of the loading 
 
 can be used like this: 
 
 Ordering by date is simple SQL  ORDER clause  (because we have a numeric column). The following will order descending (that is newest date goes first): 
 
 
 Always make sure to store the  UTC/GMT time , especially when working with   and   that use the default (i.e. your device's) time zone. 
  is safe to use as it creates a UTC value. 
 
 SQLite can use text, real, or integer data types to store dates.
Even more, whenever you perform a query, the results are shown using format  . 
 Now, if you insert/update date/time values using SQLite date/time functions, you can actually store milliseconds as well.
If that's the case, the results are shown using format  .
For example: 
 
 Now, doing some queries to verify if we are actually able to compare times: 
 
 You can check the same   using   and   and you will get the same results.
As you can see, the second row (126 milliseconds) is not returned.  
 Note that   is inclusive, therefore... 
 
 ... will return the same set. 
 Try playing around with different date/time ranges and everything will behave as expected. 
 What about without   function? 
 
 What about without   function and no milliseconds? 
 
 What about  ? 
 
 Works just fine. 
 Finally, when dealing with actual operations within a program (without using the sqlite executable...) 
 BTW: I'm using JDBC (not sure about other languages)... the sqlite-jdbc driver v3.7.2 from  xerial  - maybe newer revisions change the behavior explained below...
If you are developing in Android, you don't need a jdbc-driver. All SQL operations can be submitted using the  . 
 JDBC has different methods to get actual date/time values from a database:  ,  , and  . 
 The related methods in   are (obviously)  ,  , and   respectively. 
 For example: 
 
 Since SQLite doesn't have an actual DATE/TIME/TIMESTAMP data type all these 3 methods return values as if the objects were initialized with 0: 
 
 **So, the question is: how can we actually select, insert, or update Date/Time/Timestamp objects?**
 There's no easy answer.
You can try different combinations, but they will force you to embed SQLite functions in all the SQL statements. It's far easier to define an utility class to transform text to Date objects inside your Java program. But always remember that SQLite transforms any date value to UTC+0000. 
 In summary, despite the general rule to always use the correct data type, or, even integers denoting Unix time (milliseconds since epoch), I find much easier using the default SQLite format (  or in Java  ) rather to complicate all your SQL statements with SQLite functions. The former approach is much easier to maintain. 
 TODO: I will check the results when using getDate/getTime/getTimestamp inside Android (API15 or better)... maybe the internal driver is different from sqlite-jdbc... 
 
 Usually (same as I do in mysql/postgres) I stores dates in int(mysql/post) or text(sqlite) to store them in the timestamp format. 
 Then I will convert them into Date objects and perform actions based on user TimeZone 
 
 Best way to store  in  **SQlite DB**
 is to store the current  . Below is the code snippet to do so_ 
 
 
 Get the  
 
 
 
 
 
 Insert the data in your DB 
 
 
 
 
 Next step is, when you want to retrieve data from DB you need to convert the respective date time milliseconds in to corresponding date. Below is the sample code snippet to do the same_ 
 
 
 Convert date milliseconds in to date string.  
 
 
 
 
 
 Now, Finally fetch the data and see its working...  
 
 
 
 Hope this will help all! :) 
 
 1 -Exactly like StErMi said. 
 2 - Please read this:  http://www.vogella.de/articles/AndroidSQLite/article.html 
 3 -  
 
 see here:  
 Query() in SQLiteDatabase 
 4 - see answer 3 
 
 I prefer this. This is not the best way, but a fast solution. 
 
 
 
 