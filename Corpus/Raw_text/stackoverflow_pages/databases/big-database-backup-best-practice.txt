*** big-database-backup-best-practice ***

 I maintain big MySQL database. I need to backup it every night, but the DB is active all the time. There are queries from users.
Now I just disable the website and then do a backup, but this is very bad as the service is disabled and users don't like this. 
 What is a good way to backup the data if data is changed during the backup? 
 What is best practice for this? 
 
 I've implemented this scheme using a read-only replication slave of my database server. 
 MySQL Database Replication is pretty easy to set up and monitor. You can set it up to get all changes made to your production database, then take it off-line nightly to make a backup. 
 The Replication Slave server can be brought up as read-only to ensure that no changes can be made to it directly. 
 There are other ways of doing this that don't require the replication slave, but in my experience that was a pretty solid way of solving this problem. 
 Here's a link to the docs on  MySQL Replication . 
 
 If you have a really large (50G+ like me) MySQL MyISAM only databases, you can use locks and  . According to MySQL documentation you can safely copy raw files while read lock is active and you cannot do it with InnoDB.
So if the goal is zero downtime and you have extra HD space, create a script: 
 
 Then do the following: 
 
 Do  
 Run script 
 Do  
 Run script again 
 Do  
 
 On first run rsync will copy a lot without stopping MySQL. The second run will be very short, it will only delay write queries, so it is a  **real zero downtime solution**
. 
 
 Do another   from   to a remote server, compress, keep incremental versions, anything you like. 
 
 
 This partly depends upon whether you use innodb or myiasm. For innodb; mySQL have their own (which costs money) solution for this (innodb hot copy) but there is an open source version from Percona you may want to look at: 
 http://www.percona.com/doc/percona-xtrabackup/ 
 
 What you want to do is called "online backup". Here's a pointer to a matrix of possible options with more information: 
 http://www.zmanda.com/blogs/?p=19 
 It essentially boils down to the storage backend that you are using and how much hardware you have available. 
 