*** cache-oblivious-lookahead-array ***

 I am trying to understand simipiled cache oblivious lookahead array which is described at  here , and from the page 35 of  this presentation 
 
 Analysis of Insertion into Simplified
  Fractal Tree: 
 
 Cost to merge 2 arrays of size X is O(X=B) block I/Os. Merge is very
  I/O efficient. 
 Cost per element to merge is O(1/B) since O(X) elements were
  merged. 
 Max # of times each element is merged is O(logN). 
 Average insert cost is O(logN/B) 
 
 
 I can understhand #1,#2 and #3, but I can't understand #4, From the paper, merge can be considered as binary addition carry, for example, (31)B could be presented:
     11111 
when inserting a new item(plus 1), there should be 5 = log(32) merge(5 carries).  But, in this situation, we have to merge 32 elements! In addition, if each time we plus 1, then how many carryies will be performed from 0 to 2^k ? The anwser should be 2^k - 1.  In other words, one merge per insertion! 
 so How does #4 is computed? 
 
 While you are right on both that the number of merged elements (and so transfers) is N in worst case and that the number of total merges is also of the same order, the  **average**
 insertion cost is still logarithmic. It comes from two facts: merges vary in cost, and the number of low-cost merges is much higher than the number of high-cost ones. 
 It might be easier to see by example. 
Let's set B=1 (i.e. 1 element per block, worst case of each merge having a cost) and N=32 (e.g. we insert 32 elements into an initially empty array). 
Half of the insertions (16) put an element into the empty subarray of size 1, and so do not cause a merge. Of the remaining insertions, one (the last) needs to merge (move) 32 elements, one (16th) moves 16, two (8th and 24th) move 8 elements, four move 4 elements, and eight move 2 elements. Thus, overall number of element moves is 96, giving the average of 3 moves per insertion. 
 Hope that helps. 
 
 The first log B levels fit in (a single page of) memory, and so any stuff that happens in those levels does not incur an I/O. (This also fixes the problem with rrenaud's analysis that there's O(1) merges per insertion, since you only start paying for them after the first log B merges.) 
 Once you are merging at least B elements, then Fact 2 kicks in. 
 Consider the work from an element's point of view.  It gets merged O(log N) times.  It gets charged O(1/B) each time that happens.  It's total cost of insertion is O((log N)/B) (need the extra parens to differentiate from O(log N/B), which would be quite bad insertion performance -- even worse than a B-tree). 
 The "average" cost is really the amortized cost -- it's the amount you charge to that element for its insertion.  A little more formally it's the total work for inserting N elements, then divide by N.  An amortized cost of O((log N)/B) really means that inserting N elements is O((N log N)/B) I/Os -- for the whole sequence.  This compares quite favorable with B-trees, which for N insertions do a total of O((N log N)/log B) I/Os.  Dividing by B is obviously a whole lot better than dividing by log B. 
 You may complain that the work is lumpy, that you sometimes do an insertion that causes a big cascade of merges.  That's ok.  You don't charge all the merges to the last insertion.  Everyone is paying its own small amount for each merge they participate in.  Since (log N)/B will typically be much less than 1, everyone is being charged way less than a single I/O over the course of all of the merges it participates in. 
 What happens if you don't like amortized analysis, and you say that even though the insertion throughput goes up by a couple of orders of magnitude, you don't like it when a single insertion can cause a huge amount of work?  Aha!  There are standard ways to deamortize such a data structure, where you do a bit of preemptive merging during each insertion.  You get the same I/O complexity (you'll have to take my word for it), but it's pretty standard stuff for people who care about amortized analysis and deamortizing the result. 
 Full disclosure: I'm one of the authors of the COLA paper.  Also, rrenaud was in my algorithms class.  Also, I'm a founder of Tokutek. 
 
 In general, the amortized number of changed bits per increment is 2 = O(1). 
 Here is a proof by logic/reasoning.   http://www.cs.princeton.edu/courses/archive/spr11/cos423/Lectures/Binary%20Counting.pdf 
 Here is a "proof" by experimentation.   http://codepad.org/0gWKC3rW 
 