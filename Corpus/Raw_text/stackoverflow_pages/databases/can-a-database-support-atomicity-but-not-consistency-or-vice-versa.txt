*** can-a-database-support-atomicity-but-not-consistency-or-vice-versa ***

 I am reading about ACID properties of a database. Atomicity and Consistency seem to be very closely related. I am wondering if there are any scenarios where we need to just support Atomicity but not Consistency or vice-versa. An example would really help! 
 
 They  are  somewhat related but there's a subtle difference. 
 Atomicity means that your transaction either happens or doesn't happen. 
 Consistency means that things like referential integrity are enforced. 
 Let's say you start a transaction to add two rows (a credit and debit which forms a single bank transaction). The atomicity of this has nothing to do with the consistency of the database. All it means it that either both rows or neither row will be added. 
 On the consistency front, let's say you have a foreign key constraint from   to  . If you try to add an order that refers to a non-existent product,  that's  when consistency kicks in to prevent you from doing it. 
 Both are about maintaining the database in a workable state, hence their similarity. The former example will ensure the bank doesn't lose money (or steal it from you), the latter will ensure your application doesn't get surprised by orders for products you know nothing about. 
 
 Atomicity: 
 
 In an atomic transaction, a series of
  database operations either all occur,
  or nothing occurs. A guarantee of
  atomicity prevents updates to the
  database occurring only partially,
  which can cause greater problems than
  rejecting the whole series outright. 
 
 Consistency: 
 
 In database systems, a consistent
  transaction is one that does not
  violate any integrity constraints
  during its execution. If a transaction
  leaves the database in an illegal
  state, it is aborted and an error is
  reported 
 
 A database that supports atomicity but not consistency would allow transactions that leave the database in an inconsistent state (that is, violate referential or other integrity checks), provided the transaction completes successfully. For instance, you could add a string to an int column provided that the transaction performing this completed successfully. 
 Conversely, a database that supports consistency but not atomicity would allow partial transactions to complete, so long as the effects of that transaction didn't break any integrity checks (e.g. foreign keys must match an existing identity).
For instance, you could try adding a new row that included string and int values, and even if the insertion failed half way through losing half the data, the row would be allowed provided that none of the lost data was for required columns and no data was inserted into an incorrectly typed column. 
 Having said that, consistency relies on atomicity for the reversal of inconsistent transactions. 
 
 I have a different understanding of consistency in the ACID context: 
 Within a transaction, if a given item of data is retrieved and retrieved again later in the same transaction,  no changes are seen.  That is, the transaction is given a consistent state of the database throughout the transaction.  The only updates that can change data visible to the transaction are updates done by the transaction itself.   
 In my mind, this is tantamount to serializability. 
 
 I was also getting confused when reading about atomicity & consistency. Let's say there is scenario to do batch insert of 1000 records in the account table. 
 **Atomicity**
 of the batch is if all the 1000 records are inserted or none of the records are inserted if there is an error. 
 **Consistency**
 of the batch will be violated if at the account record level, we have put the logic to make the insert successful even if data type didn't match, related record was inserted in the foreign key table and later deleted after the successful account record update. 
 Hopefully this example clears the confusion.    
 
 There is indeed a strong relation between Atomicity and Consistency, but they are not the same: 
 
 A DBMS can (theoretically) support Consistency and not Atomicity: for example, consider a transaction that consists SQL operations O1,O2, and O3. Now, assume that after O1 and O2 the DB is already in a consistent state. Then the DBMS can stop the transaction after O1 and O2 without O3 and still preserves consistency. Clearly, such a DBMS does nto supports atomicity (as O3 was not executed by O1 and O2 was).  
 A DBMS can (theoretically) support Atomicity and not Consistency: this can occur in a multi-user scenario, where atomicity only ensures that all actions of a transaction will be performed (or none of them) but it does not guaranteee that  actions of one transaction done concurrently with another transaction may not end up in an inconsistent state.  
 
 However, what I do believe (but have not proven formally) is that if your DMBS guarantees both Atomicity and Isolation, then it must also guarantee Consistency.  
 