*** can-a-foreign-key-act-as-a-primary-key ***

 I'm currently designing a database structure for our team's project. I have this very question in mind currently: Is it possible to have a foreign key act as a primary key on another table? 
 Here are some of the tables of our system's database design: 
 
 What I wanted to happen is that the   table should contain the IDs (supposedly the login credential to the system) and passwords of both the student users and guidance counselor users. In short, the primary keys of both the   and   table are also the foreign key from the   table. But I am not sure if it is allowed. 
 Another question is: a   table also exists, which requires a   (which is the   in the   table) and a   (which is also the   in the  ) for each of its record. If both the IDs of a student and guidance counselor come from the  , how would I design the   table? And for future reference, how do I manually write it as an SQL code? 
 This has been bugging me and I can't find any specific or sure answer to my questions. 
 
 Of course.  This is a common technique known as  supertyping  tables.  As in your example, the idea is that one table contains a superset of entities and has common attributes describing a general entity, and other tables contain subsets of those entities with specific attributes.  It's not unlike a simple class hierarchy in object-oriented design. 
 For your second question, one table can have two columns which are separately foreign keys to the same other table.  When the database builds the query, it joins that other table twice.  To illustrate in a SQL query (not sure about MySQL syntax, I haven't used it in a long time, so this is MS SQL syntax specifically), you would give that table two distinct aliases when selecting data.  Something like this: 
 
 This essentially takes the   table and combines it with the   table twice, once on each column, and assigns two different aliases when combining them so as to tell them apart. 
 
 Yes, there should be no problem. Foreign keys and primary keys are orthogonal to each other, it's fine for a column or a set of columns to be both the primary key for that table (which requires them to be unique) and also to be associated with a primary key / unique constraint in another table. 
 