*** can-i-launch-a-trigger-on-select-statement-in-mysql ***

 I am trying to run an   statement on table X each time I   any record from table Y is there anyway that I can accomplish that using MySQL only? 
 Something like triggers? 
 
 Short answer is No. Triggers are triggered with  ,   or  . 
 Possible solution for this. rather rare scenario: 
 
 First, write some stored procedures
that do the  s you want on
table X. 
 Then, restrict all users to use only
these stored procedures and do not
allow them to directly use   on table
X. 
 Then alter the stored procedures to
also call a stored procedure that
performs the action you want
(  or whatever). 
 
 
 Nope - you can't trigger on SELECT - you'll have to create a stored procedure (or any other type of logging facility - like a log file or what ever) that you implicitly call on any query statement - easier if you create a wrapper that calls your query, calls the logging and returns query results. 
 
 If you're trying to use table X to log the order of   queries on table Y (a fairly common query-logging setup), you can simply reverse the order of operations and run the   query  **first**
,  then  run your   query.  
 That way, you don't need to worry about linking the two statements with a  : if your server crashes between the two statements then you already logged what you care about with your first statement, and whether the   query runs or fails has no impact on the underlying database. 
 If you're not logging queries, perhaps you're trying to use table Y as a task queue -- the situation I was struggling with that lead me to this thread -- and you want whichever session queries Y first to lock all other sessions out of the rows returned so you can perform some operations on the results and insert the output into table X. In that case, simply add some logging capabilities to table Y.  
 For example, you could add an "owner" column to Y, then tack the   part of your   query onto an   statement, run it, and then modify your   query to only show the results that were claimed by your  : 
 
 ...do some work on foo, then... 
 
 Again, the key is to log  **first**
, then query. 
 