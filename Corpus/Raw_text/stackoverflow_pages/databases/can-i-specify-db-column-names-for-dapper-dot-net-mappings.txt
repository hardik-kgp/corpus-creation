*** can-i-specify-db-column-names-for-dapper-dot-net-mappings ***

 Is there a way with dapper-dot-net to use an attribute to specify column names that should be used and not the property name? 
 
 I'd like to be able to name my properties whatever I choose. Our database has no consistent naming convention. 
 If not with dapper, are there any additional similar options? 
 
 You can also check out   Dapper-Extensions . 
 
 Dapper Extensions is a small library that complements Dapper by adding
  basic CRUD operations (Get, Insert, Update, Delete) for your POCOs. 
 
 It has an  auto class mapper , where you can specify your custom field mappings. For example: 
 
 Then you just do: 
 
 Keep in mind that you must keep your custom maps in the same assembly as your POCO classes. The library uses reflection to find custom maps and it only scans one assembly. 
 **Update**
:  
 You can now use SetMappingAssemblies to register a list of assemblies to scan: 
 
 
 If you are using a select statement directly or in a procedure you can just alias the columns. 
 
 
 Another approach is to just manually map it with the dynamic result. 
 
 Clearly this introduces type-safety scenarios because you are querying on dynamic.  Also, you have to manually map columns which is a bummer.   
 However, I tend to like this approach because it's so darned transparent.  You can cast if need be (as is the case with Enums), and basically just do whatever it is you need to do to go from the db recordset to your properties. 
 
 For selects, you can add constructors to your classes to perform the mapping.
The constructor parameter names must match the table columns. 
 Below is an example from the source. The table will be correctly mapped to the class. 
 Table: 
 
 Class: 
 
 