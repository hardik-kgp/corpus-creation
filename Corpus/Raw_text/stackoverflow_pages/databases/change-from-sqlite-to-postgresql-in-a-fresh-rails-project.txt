*** change-from-sqlite-to-postgresql-in-a-fresh-rails-project ***

 I have a rails app that's databases are in SQLite (The dev and production). Since I am moving to heroku, I want to convert my database to PostgreSQL. 
 Anyways, I heard that the local, development, database does not need to be changed from SQLite, so I don't need to change that, however, how do I go about changing the production environment from SQLite to PostgreSQL? 
 Has anyone ever done this before and can help? 
 P.S. I'm not sure what exactly this process is called, but I've heard about migrating the database from SQLite to PostgreSQL, is that what needs to be done? 
 
 You can change your database.yml to this instead of using the out of the box sqlite one: 
 
 
 The steps below worked for me. It uses the  **taps**
 gem, created by Heroku and mentioned in Ryan Bates's Railscast #342. There are a few steps but it worked perfectly (even dates were correctly migrated), and it was far easier than the Oracle -> DB2 or SQL Server -> Oracle migrations I have done in the past.  
 Note that SQLite does not have a user id or password, but the taps gem requires something. I just used the literals "user" and "password". 
 **Create the Postgres database user for the new databases**

 
 **EDIT - Updated command below - use this instead**

 
 **Create the required databases**

 
 **Update the Gemfile**

 
 **Update database.yml**

 
 **Start the taps server on the sqlite database**

 
 **Migrate the data**

 
 **Restart the Rails webserver**

 
 **Cleanup the Gemfile**

 
 
 Since you're moving to heroku, you can use taps to do this: 
 
 This will push your local development sqlite data to production, and heroku will automagically convert to postgres for you. 
 This should also work to push a production sqlite db to heroku, but it's not tested. 
 
 
 you will also need to add the line " **gem 'pg'**
" to your gemfile, 'pg' being the current postgres gem for Rails. 
 
 Simply update the config/database.yml file: 
 
 The above is what's generated when you run: 
 
 Also add this to your Gemfile: 
 
 
 After replacing gem   with gem   in the gemfile, I kept getting the   when pushing to Heroku master because I forgot to commit the updated gemfile.  Simply doing the following solved this: 
 
 
 Just Update you datatbase.yml 
 
 We are using rails and the basic standards should be follow like DRY, Convention over Configuration etc.. so in above code we are not repeating same code again and again. 
 
 It's been mentioned above me, but I don't have enough reputation as a lurker to be able to upvote it.  In the hopes of drawing a little more attention for Rails newbies reading this answer: 
 
 you will also need to add the line "gem 'pg'" to your gemfile, 'pg' being the current postgres gem for Rails. 
 
 ^^^ This is a key piece in addition to the database.yml file described in the selected answer to migrate your Rails app to Postgres. 
 
 Now its become easy with the command 
 
 if you have any doubts you can check here 
 
 
 This is how I have mine setup. If you are only using MRI and not Jruby you can skip the logic in the adapter settings. 
 
 
 You can try following:
 
 or try with sqlitetopgscript:
 http://trac-hacks.org/browser/sqlitetopgscript/0.10/sqlite2pg 
 
 A possible solution (not for heroku) it's to use yaml.db from: 
 http://www.railslodge.com/plugins/830-yaml-db 
 
 Today I had the same issue. I'm working on Rails 4.2.8. The solution was specify the pg gem version, in my case,  . 
 