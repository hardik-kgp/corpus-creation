*** choosing-an-orm-for-android-project-min-api-level-7 ***

 
 
 
 
 
 Closed.  This question is  off-topic . It is not currently accepting answers.
                            
                         
 
 
 
 
 
 
 
 
 
 
 Want to improve this question?   Update the question  so it's  on-topic  for Stack Overflow.
                         
 Closed  4 years ago . 
 
 
 
 I currently have an application, where it's primary performance issue is using file-based database consisted of JSON responses. 
 I'd like to rewrite my application to use SQLite database feature. 
Since I'm lazy, I'd like to use some kind of ORM. 
 So far I have found only two big ORM libraries: 
 
 ORMLite 
 GreenDAO ORM 
 DB4O 
 ActiveAndroid 
 
 My primary goal is to  **raise performance on working with data as much as possible**
  
 But I've found two possible issues with those libraries.   
 
 ORMLite uses  **annotations**
, which is big  **performance issue in pre-honeycomb**
 due to  this bug   
 GreenDAO is using some kind of code generator, and that would slow me down on development as I would have to write generator, and then use generated code. And I don't very like this idea. 
 DB4O is JPA, which I've always considered as slow and heavy on memory usage, therefore unsuitable for low-end devices (remember the Android API v7) 
 
 
 **ad @ChenKinnrot**
: 
The estimated load should be sufficient to think about using an ORM. 
In my case it is  **about 25-30 unique tables, and at least 10 table joins (2 - 4 tables at a time). About 300-500 unique fields (columns)**
  
 
 So my questions are: 
 
 **Should I use ORM/JPA layer in Android application?**

 **If so, what library would you recommend me to use?**
 (and please add some arguments too) 
 
 
 I've used ORMLite and found it straightforward once you got the hang of it (a few hours), quite powerful and didn't cause any performance problems (app tested in Gingerbread on HTC desire and HTC Hero). 
 I will be using it again in any projects I need to use a DB for. 
 
 A ORM layer is appealing.  
 However, in practice I either write simple ORM  **myself**
 or use the  Content Provider  paradigm, which does not cooperate well with ORM. 
 I have looked into some existing ORM libraries (mainly ORMLite , activeAnroid ) but they all scared me away 
as they seems not so easy to get started.  
 
 "We're talking about 25-30 unique tables, and at least 10 table joins.
  About 300-500 unique fields (columns)" 
 
 If you have fixed and limited patterns of how the data will be queried, I would recommend to write the ORM/sql yourself. 
 My 2 cents. 
 
 If you are worried about your app's performance, I'd recommend greenDAO. It will save you from writing lots of boring code, so code generation should not be an issue. In return, it will generate also entities and DB unit tests for you. 
 
 I got some knowledge to share so:
ORM by definition is slower than writing your own sql, it's suppose to simplify the coding of data access, and provide a generic solution, generic = runs slower than you write your queries, if you know sql well. 
 The real question is how good performance you want to get, if it's the best possible, don't consider any data mapping framework, only sql generation framework that will help you write stuff faster, but gives you full control of everything. 
 If you don't want to get the most out of the sql db, use orm, I got no experience with this orm you mentioned, so I can't say what to choose. 
 And your DB is not so big and complex so the time you'll save with orm is not an issue. 
 
 In my experience, I had a lot of benefits from using ORM engines. However, there was the case when I had to deal with performance problems. 
 I had to load about 10 000 rows from the database, and with a standard implementation (I was using ORMLite), it took about 1 minute to complete (depends on the device CPU). 
 When you need to read a lot of data from the database, you can execute plain SQL and parse the results yourself (in my case, I only needed to query for 3 columns from the table). ORMLite also allows you to retrieve raw-results. By this, the performance has increased by 10 times. All 10 000 rows were loaded in 5 seconds or less! 
 