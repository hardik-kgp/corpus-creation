*** core-data-is-not-a-relational-database-why-exactly-is-this-important-to-know ***

 I realize this may be common sense for a lot of people, so apologies if this seems like a stupid question. 
 I am trying to learn core data for iOS programming, and I have repeatedly read and heard it said that Core Data (CD) is not a relational database.  But very little else is said about this, or why exactly it is important to know beyond an academic sense.  I mean functionally at least, it seems you can use CD as though it were a database for most things - storing and fetching data, runnings queries etc.  From my very rudimentary understanding of it, I don't really see how it differs from a database. 
 I am not questioning the fact that the distinction is important.  I believe that a lot of smart people would not be wasting their time on this point if it weren't useful to understand.  But I would like someone please to explain - ideally with examples - how CD not being a relational database affects how we use it?  Or perhaps, if I were not told that CD isn't a relational database, how would this adversely impact my performance as an Objective-C/Swift programmer? 
 Are there things that one might try to do incorrectly if they treated CD as a relational database?  Or, are there things which a relational database cannot do or does less well that CD is designed to do? 
 Thank you all for your collective wisdom.  
 
 People stress the "not a relational database" angle because people with some database experience are prone to specific errors with Core Data that result from trying to apply their experience too directly. Some examples: 
 
 Creating entities that are essentially SQL junction tables. This is almost never necessary and usually makes things more complex and error prone. Core Data supports many-to-many relationships directly. 
 Creating a unique ID field in an entity because they think they need one to ensure uniqueness and to create relationships. Sometimes creating custom unique IDs is useful, usually not. 
 Setting up relationships between objects based on these unique IDs instead of using Core Data relationships-- i.e. saving the unique ID of a related object instead of using ObjC/Swift semantics to relate the objects. 
 
 Core Data can and often does serve as a database, but thinking of it in terms of other relational databases is a good way to screw it up. 
 
 Core Data is a technology with many powerful features and tools such as: 
 
 Change tracking (undo/redo) 
 Faulting (not having to load entire objects which can save memory) 
 **Persistence**

 
 The list goes on.. 
 The persistence part of Core Data is backed by SQLite, which is a relational database.  
 One of the reasons I think people stress that Core Data is not a relational database is because is it so much more than just persistence, and can be taken advantage of without using persistence at all.  
 By treating Core Data as a relational database, I assume you mean that relationships between objects are mapped by ids, i.e. a Customer has a customerId and a product has a productId.
This would certainly be incorrect because Core Data let's you define powerful relationships between object models that make things easy to manage. 
 For example, if you want to have your customer have multiple products and want to delete them all when you delete the customer, Core Data gives you the ability to do that without having to manage customerIds/productIds and figuring out how to format complex SQL queries to match your in-memory model. With Core Data, you simply update your model and save your context, the SQL is done for you under the hood. (In fact you can even turn on debugging to print out the SQL Core Data is performing for you by passing '-com.apple.CoreData.SQLDebug 1' as a launch argument. 
 In terms of performance, Core Data does some serious optimizations under the hood that make accessing data much easier without having to dive deep into SQL, concurrency, or validation.  
 
 I  THINK  the point is that it is different from a relational database and that trying to apply relational techniques will lead the developer astray as others have mentioned.  It actually operates at a higher level by abstracting the functionality of the relational database out of your code. 
 A key difference, from a programming standpoint, is that you don't need unique identifiers because core data just handles that.  If you tried to create your own, you will come to see that they are redundant and a whole lot of extra trouble. 
 From the programmer's perspective, whenever you access an entity "record", you will have a pointer to any relationship -- perhaps a single pointer for a "to-one" relationship, or a set of pointers to the records in a "to-many" relationship.  Core Data handles the retrieval of the actual "records" when you use one of the pointers.   
 Because Core Data efficiently handles faults (where the "record" (object) referenced by a pointer is not in memory) you do not have to concern yourself with their retrieval generally.  When they're needed by your program Core Data will make them available. 
 At the end of the day, it provides similar functionality but under the hood it is different.  It does require some different thinking in that ordinary SQL doesn't make sense in the context of Core Data as the SQL (in the case of a sqlite store) is handled for you. 
 The main adjustments for me in transitioning to Core Data were as noted -- getting rid of the concept of unique identifiers.  They're going on behind the scenes but you never have to worry about them and should not try to define your own.  The second adjustment for me was that whenever you need an object that is related to yours, you just grab it by using the appropriate pointer(s) in the entity object you already have. 
 