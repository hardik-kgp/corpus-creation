*** create-a-new-table-and-adding-a-primary-key-using-select-into ***

 I have a database table that is created using the SELECT INTO SQL syntax. The database is in Access and consists of roughly 500,000 rows. The problem is when I do the join, the unique is the entire row - what I would like is an auto number ID field as the Primary Key. 
 Code I currently have is something like: 
 
 I was hoping there was a way to add a clause into my SELECT INTO query so I could add a primary key and create the table in one pass - is this possible? 
 If not, what is the best way to do this using SQL only?  
 
 Adding a   during a   statement is not possible as far as I'm aware. What you can do however, is add an   column that auto increments by using SQL Server's   function. 
 Something like this: 
 
 
 In Access I don't believe that you can accomplish what you want in a single statement. What I think you'll need to do is... 
 
 Create the new table as you described in the question. 
 Add the AutoNumber column like this: 
 ALTER TABLE [new_table] ADD COLUMN [ID] AUTOINCREMENT NOT NULL 
 Make the column you just added the Primary Key: 
 ALTER TABLE [new_table] ADD CONSTRAINT NewTable_PK PRIMARY KEY (ID) 
 
 
 What is the need for creating a primary key and inserting at the same time? 
 You can create a primary key and table at the same time, but not at insert to my knowledge.
You can do this. 
 
 or add a drop and create too if you want to ensure the table does not already exist and run this script a bunch.  A temp table '#(something)' can follow many of the rules of permanent tables except be used for code level movement and then cleanup when done. 
 
 I created an ever increasing seed with 'identity'.  The default is to start at 1 and increment by 1, which serves 95% of simple database primary key wants.  It increments automatically so you don't need to worry about it.  You can also insert into just specific values if you have more with things like: 
 
 This eliminates the need to insert EVERYTHING and just be the columns you want. 
 
 Starting with SQL 2012 there is a DateFromParts function - I think this is a little more readable: 
 
 