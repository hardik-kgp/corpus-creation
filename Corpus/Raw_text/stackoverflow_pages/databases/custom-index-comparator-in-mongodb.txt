*** custom-index-comparator-in-mongodb ***

 I'm working with a dataset composed by probabilistic encrypted elements indistinguishable from random samples. This way, sequential encryptions of the same number results in different ciphertexts. However, these still comparable through a special function that applies algorithms like SHA256 to compare two ciphertexts.  
 I want to add a list of the described ciphertexts to a MongoDB database and index it using a tree-based structure (i.e.: AVL). I can't simply apply the default indexing of the database because, as described, the records must be comparable using the special function.  
 An example: Suppose I have a database  **db**
 and a collection  **c**
 composed by the following document type: 
 
 Moreover, let F(int,string,string) be the following function: 
 
 where the operator | is a standard concatenation function. 
 I want to execute the following query  **in an efficient way**
, such as in a collection with some suitable indexing:  
 
 for h and l chosen arbitrarily but not constants. I.e.: Suppose I want to find all records that satisfy F(h1,l1,r), for some pair (h1, l1). Later, in another moment, I want to do the same but using (h2, l2) such that h1 != h2 and l1 != l2. h and l may assume any value in the set of integers. 
 How can I do that?  
 
 You can execute this query use the operator  **$where**
, but this way can't use index. So, for query performance it's dependents on the size of your dataset. 
 
 Before execute the code above, you need store your function   on the mongodb server: 
 
 **Links:**

 
 store javascript function on server 
 
 
 I've tried a solution that store the result of the function in your collection, so I changed the schema, like below: 
 
 The field   is value of   with  **constant**
   and  , and the field   is original   field.
So you can create index on field   and your query condition will be: 
 
 