*** dao-and-jdbc-relation ***

 I know that Hibernate implements ORM (Object Relational Mapping), what type of mapping does JDBC implement? Does it implement DAO? I don't totally understand how/if DAO is related to JDBC...? 
 
 DAO isn't a mapping. DAO stands for Data Access Object. It look something like this: 
 
 For DAO, JDBC is just an implementation detail. 
 
 Hibernate could be another one. 
 
 JPA  could  be another one (in case you're migrating an existing legacy app to JPA; for new apps, it would be a bit weird as JPA is by itself actually the DAO, with e.g. Hibernate and EclipseLink as available implementations). 
 
 It allows you for switching of   implementation without changing the business code which is using the DAO (only if you're properly coding against the interface, of course). 
 For JDBC you'll only need to write a lot of lines to find/save/delete the desired information while with Hibernate it's a matter of only a few lines. Hiberenate as being an ORM takes exactly that nasty JDBC work from your hands, regardless of whether you're using a DAO or not. 
 **See also:**

 
 I found JPA, or alike, don't encourage DAO pattern 
 JSF Controller, Service and DAO 
 
 
 DAO is an abstraction for accessing data, the idea is to separate the technical details of data access from the rest of the application. It can apply to any kind of data. 
 JDBC is an API for accessing relational databases using Java.  
 JDBC is more low-level than an ORM, it maps some Java types to SQL types but no more than that, it just takes DDL and DML, executes it, and returns result sets. It's up to your program to make sense of it. 
 