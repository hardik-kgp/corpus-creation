*** dapper-query-with-list-of-parameters ***

 I am trying to run a query with Dapper with a known set of parameters, but with a list of values for those parameters.  A simple example of what I am trying to do would be: 
 
 Dapper throws an exception with 'Parameter '@Status' must be defined'. I know Dapper can process lists of parameters when doing bulk inserts and updates, but can it not do this for selects? 
 
 Ah, I think I see what you mean... 
 Yes, there is a scenario we support for   that isn't supported for Query, specifically: to run the same operation sequentially with a range of different parameter values. This makes sense for  , but for query it probably means you should be looking at a different query using  . Alternatively, just loop and concat. 
 Instead, it is looking at the single parameter object and looking for public values - an enumerable doesn't have any suitable parameter values for dapper. 
 
 Try this: 
 
 
 I know I'm way late to this party but, I think I understand this request to mean that you just want to pass in some properties and generate your query based on those dynamic properties. 
 with the code below I can use any Type and then just populate and pass in an object of that Type with a few values set (I call this my query object), and the query will be generated to go find objects that match the values that you set in your query object. 
 *be careful of bools and things that have default values.  
 **Dynamic Query Example**

 
 **Usage**

 *repo is the class that contains the above function 
 
 **Output**

 
 then it spits out any "Domains" that match the above query. 
 
 
 That's how I would do it, but this assumes one thing: You have a table in your database named "Numbers" that has an arbitrary number of integers in it, one per row, starting with 1, with at least 24 numbers in it. 
 That is, the table looks like this: 
 
 If you don't have such a table, it's very fast and easy to make one just for this command: 
 
 You can't have multiple batches in a stored procedure, but you can in a text command.   runs the preceding batch 16 times. If you needed this in a stored procedure, you can jut repeat the second   command a number of times instead of using batches. 2^16 integers is overkill for this particular query, but it's a command I copy and paste when needed and 2^16 is usually enough, and so fast that I usually don't bother to change it.   would yield 32 integers, which is enough for 24 date ranges. 
 Here's an entire script that illustrates this working: 
 
 