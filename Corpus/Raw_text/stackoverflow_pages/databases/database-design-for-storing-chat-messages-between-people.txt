*** database-design-for-storing-chat-messages-between-people ***

 I am trying to build a messaging/chat system. which can store conversation between two people in a chronological order. Also if User A deletes the conversation User B still should have access the conversation until he wishes to delete them. 
 
 Inbox - All the messages recieved by the user from various users will be displayed with the latest message from that particular thread. 
 Conversation Screen - Chronological order of the conversation between the User A and User B 
 
 This is the basic structure of the database i have come up with. Should i store the messages twice in the database ? 
 
 id 
 to_id 
 from_id 
 message 
 timestamp 
 read 
 
 
 I would use a lookup table for the messages that would store who has the rights to view that message  
 
 That way if a user deletes their message they are actually just deleting their relationship to the message not the message itself. you just remove them from the messageUsers table. or set a active field to 1 or 0. 
 
 At first I thought that when one person deleted it you could just turn either To or From to null but that would make you lose who sent the message or to whom it was addressed.  
 You should just add a field deleted_by which will contain the id of the person who deleted it or will be null. So when selecting records from the inbox you have something like: 
 Select * From Messages where to_id = MyID and deleted_by <> MyID 
 when you delete the message you check if the deleted_by is null, if it is you update the deleted_by field with MyID, if it is not (means that the other party deleted it as well) you delete the record. 
 If you want to have the same functionality for threads instead of messages (i.e. manage the conversation and not one message at a time) you should have another table (MessageThreads) in which you have the from_id, to_id fields, deleted_by along with a thread_id field. in the Messages table you subsitute the from_id to_id and deleted_by with the thread_id. 
 
 There will be two tables.
nodes
node_user 
 In nodes table, 
 
 node_id 
 title 
 message 
 timestamp 
 
 In node_user table, 
 
 node_user_id(PK) 
 node_id 
 parent_node_id(for threaded) 
 from_id 
 to_id 
 timestamp 
 read 
 
 When user A send a message to user B, firstly store the message in nodes table. And then, add two records in node_user table. When user A delete the message, only delete the first record in node_user table.
When user B delete the message, you can delete records from both nodes and node_user table. 
 Threaded Message, 
 
 Use parent_node_id 
 
 