*** database-design-multiple-tables-vs-a-single-table ***

 I am making a website where there are different types of items such as blogs, posts, articles and so on. A user can set any one of them as his/her favorite. Now when I approach this thing, I have two options 
 
 
 Make a table for user favorites for each type of object. 
 Make a common table for all type of objects for all the users. 
 
 
 The problem with the 1st structure is that I will have to query a lot of tables for displaying the favorites of a particular user. But it will allow me to easily group the favorites into different categories.  
 However if I have to show all the favorites on one single page and merge them all, sorted according to time, then that becomes difficult. But if I use the second model, I can easily get the latest favorites, and also grouping them according to object type is not difficult, but I will have one large table site wide. 
 Which of the two strategies will be more scalable. 
 
 The 1st one entails multiple database queries, and the second one
  entails a large single table. 
 
 If it helps, I am using  
 
 It seems that you already know the answer, but remember, keep the systems you design simple to modify as business models always change over time or they eventually fail (it's a generalization but you get the idea). A corollary of that is if you make a rigid model, fast or slow, it's rigid, changes will be harder and the end user won't see the difference, hence no money/happiness change is achieved, unless it's  a very bad change.
Your problem is not technical in a way a query works on the engine but more of a philosophical one, easy changes versus apparent speed.
Ask yourself, what's the advantage of having a normalized database? Think about a clean architecture and design, performance is the least problem in todays world as processing is cheaper and storage also. But design is expensive.
Normalization was made to make systems that don't depend on last moment decisions but on a structured design process.
Big tables are not a big deal for MySql but they are a big deal to maintain, modify and expand. It's not just adding one more column, it's about the rigid structure of the data itself. Eventually in time you will just add columns that contain indexes, and those indexes will be pointing to small tables. MySql will be plowing it's way around all that data anyway.
So i'll go for the first one, a lot of small tables, many-to-many. 
 
 I have this design on my website. My modules are: news, articles, videos, photos, downloads, reviews, quizzes, polls, etc etc. All in separate tables. I have a likes table where users can like or dislike a post (in your case favorites). The query to get these isn't that complicated. 
 First off for the most part MOST of my tables for the modules are structured the same way: 
 
 id 
 title 
 content 
 user_id (author) 
 date 
 etc 
 
 with a few exceptions being that sometimes title is called question or there is no content column. That does not cause any issues. 
 My likes tables is set up like this: 
 
 id 
 page_id 
 module_id (what table did it come from...I have a modules table where each module has a title, associated id, directory, etc) 
 post_id (corresponds to the module table id) 
 user_id (user who did the liking or posting) 
 status (0 = like, 1 = dislike) 
 date (when the liking/disliking took place) 
 
 Modules table example: 
 
 id 
 title 
 directory 
 post_type 
 
 Example 
 
 Essentially yours would have a similar set up, modifying the table structure as necessary for your needs. 
 Query to get all the likes or favorites for a particular user: 
 
 Ok that may be hard for you to understand since I have alot of my own variables, but basically it gets the module id and post id from the likes table and then runs a query to get the title of the post and any other info I want like the original author. 
 I have "module" functions set up that will return the url or the title of the module given you provide an id for it. 
 
 So if I'm not mistaken, you are trying to create a   table to collect the user's favorite items right? If so, you will need at least two tables. 
 **Types**
: The types of the resources. 
 
 **Favorites**
: The most important part of the Favorite system, it's kinda like a relationships map. 
 
 **Posts**
: The example posts table, you might also have   or   and   tables. 
 
 Now, the SQL Query might be like this (untested): 
 
 With the SQL Query above, you can get the favorite posts which is been favorited by the User ID 6. 
 
 