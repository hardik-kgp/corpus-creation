*** database-design-private-chat-group-chat-and-emails ***

 The communication between Facebook users seem to be stored in one long "conversation." So, emails sent and private chat messages exchanged all seem to be part of one long ongoing conversation. 
 I think this implementation works well for users (at least it does for me). I assume the table design for this part could be implemented this way: 
 
 What if I wanted to support group chat? Would I do something like this: 
 
 I think it'll work. However, I'm wondering if it would make sense to the user if I displayed every single things that user has ever messaged anyone in one long conversation. It probably wont. Imagine a conversation with Person A mixed with group conversation with Person A, B, C, D mixed with conversation with Person E and so on .... 
 Any suggestion on what would be a usable concept to implement? 
 
 I believe a message should be an entity, regardless of platform or sender/receiver, with  , ,  fields, and a message relation table - like you suggested - with  , , , .
Then, if you are showing a single user to user conversation, you can show every message between them.
For group chats, you should have a table with  , ,  that holds the group chat main record, and another table that holds the users that are part of that group chat, with  , ,  fields. 
 Just my opinion and how I would implement it. 
 **Edit:**
 Maybe it would make sense to have   on the message entity itself, as a message has to have a singular sender id. 
 
 You could also group messages by topics.
You add a topic table. You add a recipients table, tied to a topic. Messages will also be tied to a topic. 
 You can programmatically limit the topics between two users by looking which topic has those two users in its recipients.
You could also separate your messages by giving them a type attribute. For example, type 0 will be an inbox message, type 1 will be a chat message and so on. 
 If I wanted to have an arbitrary number of recipients in one topic, I would avoid the from_id/to_id combo. 
 