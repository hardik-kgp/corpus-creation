*** database-designing-an-events-table ***

 After reading the tips from  this great  **Nettuts+ article**
 I've come up with a table schema that would separate highly volatile data from other tables subjected to heavy reads and at the same time lower the number of tables needed in the whole database schema, however I'm not sure if this is a good idea since it doesn't follow the rules of normalization and I would like to hear your advice, here is the general idea: 
 
 I've four types of users modeled in a  Class Table Inheritance  structure, in the main "user" table I store data common to all the users ( ,  ,  , several  , ...) along with some   fields ( ,  ,  ,  , ...). 
 To quote the tip #16 from the Nettuts+ article mentioned above: 
 
 **Example 2**
: You have a “last_login”
  field in your table. It updates every
  time a user logs in to the website.
  But every update on a table causes the
  query cache for that table to be
  flushed. You can put that field into
  another table to keep updates to your
  users table to a minimum. 
 
 Now it gets even trickier, I need to keep track of some user statistics like 
 
 how many  **unique**
 times a user profile was seen 
 how many  **unique**
 times a  **ad from a **
**specific type of user**
 was clicked 
 how many  **unique**
 times a  **post from a **
**specific type of user**
 was seen 
 and so on... 
 
 In my fully normalized database this adds up to about 8 to 10 additional tables, it's not a lot but I would like to keep things simple if I could, so I've come up with the following " " table: 
 
 Basically the   refers to the primary key ( ) field in the   table, I believe the rest should be pretty straightforward. One thing that I've come to like in this design is that I can keep track of all the user logins instead of just the last one, and thus generate some interesting metrics with that data. 
 Due to the growing nature of the   table I also thought of making some optimizations, such as: 
 
 **#9**
: Since there is only a finite number of tables and a finite (and predetermined) number of events, the   and   columns could be setup as  s instead of  s to save some space. 
 **#14**
: Store  **s as **
**s**
 with   instead of  s. 
 Store  **s as **
**s**
 instead of  s. 
 Use the   ( or the  ? ) engine instead of   /  .

 
 Only  s and  s are supported, and data is compressed on the fly. 
 
 
 Overall, each event would only consume 14 (uncompressed) bytes which is okay for my traffic I guess. 
 **Pros:**

 
 Ability to store more detailed data (such as logins). 
 No need to design ( and code for ) almost a dozen additional tables (dates and statistics). 
 Reduces a few columns per table and keeps volatile data separated. 
 
 **Cons:**

 
 Non-relational (still not as bad as EAV):

 
 
 
 6 bytes overhead per event ( ,   and  ). 
 
 
 I'm more inclined to go with this approach since the pros seem to far outweigh the cons, but I'm still a little bit reluctant...  **Am I missing something? What are your thoughts on this?**

 **Thanks!**

 
 **@coolgeek:**

 
 One thing that I do slightly
  differently is to maintain an
  entity_type table, and use its ID in
  the object_type column (in your case,
  the 'TABLE' column). You would want to
  do the same thing with an event_type
  table. 
 
 Just to be clear, you mean I should add an additional table that maps which events are allowed in a table and use the PK of that table in the events table instead of having a   /   pair? 
 
 **@ben:**

 
 These are all statistics derived from
  existing data, aren't they? 
 
 The additional tables are mostly related to statistics but I the data doesn't already exists, some examples: 
 
 If I drop these tables I've no way to keep track of who, what or when, not sure how views can help here. 
 
 I agree that it ought to be separate,
  but more because it's fundamentally
  different data. What someone is and
  what someone does are two different
  things. I don't think volatility is so
  important. 
 
 I've heard it both ways and I couldn't find anything in the MySQL manual that states that either one is right. Anyway, I agree with you that they should be separated tables because they represent kinds of data (with the added benefit of being more descriptive than a regular approach). 
 
 I think you're missing the forest for
  the trees, so to speak. 
 The predicate for your table would be
  "User ID from IP IP at time DATE
  EVENTed to TABLE" which seems
  reasonable, but there are issues. 
 
 What I meant for "not as bad as EAV" is that all records follow a linear structure and they are pretty easy to query, there is no hierarchical structure so all queries can be done with a simple  . 
 Regarding your second statement, I think you understood me wrong here; the IP address is not necessarily associated with the user. The table structure should read something like this: 
 
 IP address ( ) did something
  ( ) to the PK ( ) of the
  table ( ) on date ( ). 
 
 For instance, in the last row of my example above it should read that IP 217.0.0.1 (some admin), deleted the user #2 (whose last known IP is 127.0.0.2) at 2010-04-20 03:20:00. 
 
 You can still join, say, user events
  to users, but you can't implement a
  foreign key constraint. 
 
 Indeed, that's my main concern. However I'm not totally sure what can go wrong with this design that couldn't go wrong with a traditional relational design. I can spot some caveats but as long as the app messing with the database knows what it is doing I guess there shouldn't be any problems. 
 One other thing that counts in this argument is that I will be storing much more events, and each event will more than double compared to the original design, it makes perfect sense to use the   storage engine here, the only thing is it doesn't support  s (neither  s or  s). 
 
 I highly recommend this approach.  Since you're presumably using the same database for OLTP and OLAP, you can gain significant performance benefits by adding in some stars and snowflakes. 
 I have a social networking app that is currently at 65 tables.  I maintain a single table to track object (blog/post, forum/thread, gallery/album/image, etc) views, another for object recommends, and a third table to summarize insert/update activity in a dozen other tables. 
 One thing that I do slightly differently is to maintain an entity_type table, and use its ID in the object_type column (in your case, the 'TABLE' column).  You would want to do the same thing with an event_type table. 
 **Clarifying for Alix**
 - Yes, you maintain a reference table for objects, and a reference table for events (these would be your dimension tables).  Your fact table would have the following fields: 
 
 
 It looks like a pretty reasonable design, so I just wanted to challenge a few of your assumptions to make sure you had concrete reasons for what you're doing. 
 
 In my fully normalized database this
  adds up to about 8 to 10 additional
  tables 
 
 These are all statistics derived from existing data, aren't they? ( **Update**
: okay, they're not, so disregard following.) Why wouldn't these simply be views, or even materialized views? 
 It may seem like a slow operation to gather those statistics, however: 
 
 proper indexing can make it quite fast 
 it's not a common operation, so the speed doesn't matter all that much 
 eliminating redundant data might make other common operations fast and reliable 
 
 
 I've come up with a table schema that
  would separate highly volatile data
  from other tables subjected to heavy
  reads 
 
 I guess you're talking about how the user (just to pick one table) events, which would be pretty volatile, are separated from the user data. I agree that it ought to be separate, but more because it's fundamentally different data. What someone is and what someone does are two different things. 
 I don't think volatility is so important. The DBMS should already allow you to put the log file and database file on separate devices, which accomplishes the same thing, and contention shouldn't be an issue with row-level locking. 
 
 Non-relational (still not as bad as
  EAV) 
 
 I think you're missing the forest for the trees, so to speak. 
 The predicate for your table would be "User ID from IP IP at time DATE EVENTed to TABLE" which seems reasonable, but there are issues. (Update: Okay, so it's sort of kinda like that.) 
 You can still join, say, user events to users, but you can't implement a foreign key constraint. That's  why  EAV is generally problematic; whether or not something is exactly EAV doesn't really matter. It's generally one or two lines of code to implement a constraint in your schema, but in your app it could be dozens of lines of code, and if the same data is accessed in multiple places by multiple apps, it can easily multiply to thousands of lines of code. So, generally, if you can prevent bad data with a foreign key constraint, you're guaranteed that no app will do that. 
 You might think that events aren't so important, but, as an example, ad impressions are money. I would definitely want to catch any bugs relating to ad impressions as early in the design process as possible. 
 **Further comment**

 
 I can spot some caveats but as long as
  the app messing with the database
  knows what it is doing I guess there
  shouldn't be any problems. 
 
 And with some caveats you can make a very successful system. With a proper system of constraints, you get to say, "if any app messing with the database doesn't know what it's doing, the DBMS will flag an error." That may require a more time and money than you've got, so something simpler that you can have is probably better than something more perfect that you can't. C'est la vie. 
 
 I can't add a comment to Ben's answer, so two things... 
 First, it would be one thing to use views in a standalone OLAP/DSS database; it's quite another to use them in your transaction database.  The High Performance MySQL people  recommend against using views  where performance matters 
 WRT data integrity, I agree, and that's another advantage to using a star or snowflake with 'events' as the central fact table (as well as using multiple event tables, like I do).  But you cannot design a referential integrity scheme around IP addresses 
 