*** database-structure-for-storing-historical-data ***

 Preface:
I was thinking the other day about a new database structure for a new application and realized that we needed a way to store historical data in an efficient way.  I was wanting someone else to take a look and see if there are any problems with this structure.  I realize that this method of storing data may very well have been invented before (I am almost certain it has) but I have no idea if it has a name and some google searches that I tried didn't yield anything. 
 Problem:
Lets say you have a table for orders, and orders are related to a customer table for the customer that placed the order.  In a normal database structure you might expect something like this: 
 
 Pretty straightforward, orderID has a foreign key of customerID which is the primary key of the customer table.  But if we were to go and run a report over the order table, we are going to join the customers table to the orders table, which will bring back the current record for that customer ID.  What if when the order was placed, the customers address was different and it has been subsequently changed.  Now our order no longer reflects the history of that customers address, at the time the order was placed.  Basically, by changing the customer record, we just changed all history for that customer. 
 Now there are several ways around this, one of which would be to copy the record when an order was created.  What I have come up with though is what I think would be an easier way to do this that is perhaps a little more elegant, and has the added bonus of logging anytime a change is made. 
 What if I did a structure like this instead: 
 
 please forgive the formatting, but I think you can see the idea.  Basically, the idea is that anytime a customer is changed, insert or update, the customerHistoryID is incremented and the customers table is updated with the latest customerHistoryID.  The order table now not only points to the customerID (which allows you to see all revisions of the customer record), but also to the customerHistoryID, which points to a specific revision of the record.  Now the order reflects the state of data at the time the order was created. 
 By adding an updatedby and updatedon column to the customerHistory table, you can also see an "audit log" of the data, so you could see who made the changes and when.   
 One potential downside could be deletes, but I am not really worried about that for this need as nothing should ever be deleted.  But even still, the same effect could be achieved by using an activeFlag or something like it depending on the domain of the data. 
 My thought is that all tables would use this structure.  Anytime historical data is being retrieved, it would be joined against the history table using the customerHistoryID to show the state of data for that particular order.  
 Retrieving a list of customers is easy, it just takes a join to the customer table on the customerHistoryID. 
 Can anyone see any problems with this approach, either from a design standpoint, or performance reasons why this is bad.  Remember, no matter what I do I need to make sure that the historical data is preserved so that subsequent updates to records do not change history. Is there a better way? Is this a known idea that has a name, or any documentation on it? 
 Thanks for any help. 
 **Update:**

This is a very simple example of what I am really going to have.  My real application will have "orders" with several foreign keys to other tables.  Origin/destination location information, customer information, facility information, user information, etc.  It has been suggested a couple of times that I could copy the information into the order record at that point, and I have seen it done this way many times, but this would result in a record with hundreds of columns, which really isn't feasible in this case. 
 
 When I've encountered such problems one alternative is to make the order the history table. Its functions the same but its a little easier to follow 
 
 EDIT: if the number of columns gets to high for your liking you can separate it out however you like. 
 If you do go with the other option and using history tables you should consider using  bitemporal  data since you may have to deal with the possibility that historical data needs to be corrected. For example Customer Changed his current address From A to B but you also have to correct address on an existing order that is currently be fulfilled.  
 Also if you are using MS SQL Server you might want to consider using indexed views. That will allow you to trade a small incremental insert/update perf decrease for a large select perf increase. If you're not using MS SQL server you can replicate this using triggers and tables. 
 
 When you are designing your data structures, be very carful to store the correct relationships, not something that is similar to the correct relationships. If the address for an order needs to be maintained, then that is because the address is part of the order, not the customer. Also, unit prices are part of the order, not the product, etc. 
 Try an arrangement like this: 
 
 If you truly need to store  history  for something, like tracking changes to an order over time, then you should do that with a log or audit table, not with your transaction tables. 
 
 Normally orders simply store the information as it is at the time of the order. This is especially true of things like part numbers, part names and prices as well as customer address and name. Then you don;t have to join to 5 or six tables to get teh information that can be stored in one. This is not denormalization as you actually need to have the innformation as it existed at the time of the order. I think is is less likely that having this information in the order and order detail (stores the individual items ordered) tables is less risky in terms of accidental change to the data as well. 
 Your order table would not have hundreds of columns. You would have an order table and an order detail table due to one to many relationships. Order table would include order no. customer id 9so you can search for everything this customer has ever ordered even if the name changed), customer name, customer address (note you don't need city state zip etc, put the address in one field),  order date and possibly a few other fields that relate directly to the order at a top level. Then you have an order detail table that has order number, detail_id, part number, part description (this can be a consolidation of a bunch of fields like size, color etc. or you can separate out the most common), No of items, unit type, price per unit, taxes, total price, ship date, status.  You put one entry in for each item ordered. 
 
 If you are genuinely interested in such problems, I can only suggest you take a serious look at "Temporal Data and the Relational Model". 
 Warning1 : there is no SQL in there and almost anything you think you know about the relational model will be claimed a falsehood.  With good reason. 
 Warning2 : you are expected to think, and think hard. 
 Warning3 : the book is about what the solution for this particular family of problems ought to look like, but as the introduction says, it is not about any technology available today. 
 That said, the book is genuine enlightenment.  At the very least, it helps to make it clear that the solution for such problems will not be found in SQl as it stands today, or in ORMs as those stand today, for that matter. 
 
 I myself like to keep it simple.  I would use two tables, a customer table and a customer history table.  If you have the key (eg customerId) in the history table there is no reason to make a joining table, a select on that key will give you all records. 
 You also don't have audit information (eg date modified, who modified etc) in the history table as you show it, I expect you want this. 
 So mine would look something like this: 
 
 The DataOfChagne field is the date the customer table was changed (from the values in this record) to the values in a more recent record of the values in the CustomerTable 
 You orders table just needs a CustomerID if you need to find the customer information at the time of the order it is a simple select. 
 
 What you want is called a datawarehouse. Since datawarehouses are OLAP and not OLTP, it is recommended to have as many columns as you need in order to achieve your goals. In your case the   table in the datawarehouse will have 11 fields as having a 'snapshot' of orders as they come, regardless of users accounts updates. 
 
 It's a good start. 
 
 Our payroll system uses  effective dates  in many tables.  The ADDRESSES table is keyed on EMPLID and EFFDT.  This allows us to track every time an employee's address changes.  You could use the same logic to track historical addresses for customers.  Your queries would simply need to include a clause that compares the order date to the customer address date that was in effect at the time of the order.  For example 
 
 The objective is to select the most recent row in customers having an effective date that is on or before the date of the order.  This same strategy could be used to keep historical information on product prices. 
 