*** database-structure-for-voting-system-with-up-and-down-votes ***

 I am going to create a voting system for a web application and wonder what the best way would be to store the votes in the (SQL) database. 
 The voting system is similiar to the one of StackOverflow. I am pondering now if I should store the up and down votes in different tables. That way it is easier to count all up votes resp. down votes. On the other hand I have to query two tables to find all votes for an user or voted item. 
 An alternative would be one table with a boolean field that specifies if this vote is an up or down vote. But I guess counting up or down votes is quite slow (when you have a lot of votes), and an index on a boolean field (as far as I know) does not make a lot of sense. 
 How would you create the database structure? One or two tables? 
 
 Regarding the comments, we found the solution that best fits to  Zardoz 
 He does not want to always count votes and needs as much details as possible. So the solution is a mix of both. 
 
 Adding an integer field in the considered table to store vote counts (make sure there won't be overflows). 
 Create additional tables to log the votes (user, post, date, up/down, etc.) 
 
 I would recommend to use triggers to automatically update the 'vote count field' when inserting/deleting/updating a vote in the log table. 
 
 If your votes are just up/down then you could make a   table linking to the posts and having a  value  of 1 or -1 (up / down). This way you can   in a single go. 
 
 https://meta.stackexchange.com/questions/1863/so-database-schema 
 Worth a look or 
 http://sqlserverpedia.com/wiki/Understanding_the_StackOverflow_Database_Schema 
 
 You will need a link table between users and the entities which are being voted on, I would have thought. This will allow you to see which users have already voted and prevent them from submitting further votes. The table can record in a boolean whether it is an up or down vote.  
 I would advise storing in the voted entity a current vote tally field to ease querying. The saving in size would be negligible if you omitted this. 
 