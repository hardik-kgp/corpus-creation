*** database-structure-for-web-messaging-system ***

 I want to make an web messaging system like facebook have. I already think of many alternative for the database structure, but not sure which is the best practice for it. I have two alternative here, the first is using two table, the second is using three table but make a cycle in ERD. 
 First: Two Table, where the message table refer to itself 
 
 Second: Three Table, but make a cycle in erd 
 
 Personally, I like this structure, because it's only use one message header and many message (content). The author_id itself cannot be removed because I need it to know whether the message is at the left side (as a sender) or right side (as a receiver). This system is just for two person messaging system. 
 Basically this two table is the same, but which is the best practice to implement this messaging system? Thank you before. 
 
 After learning the hard way (times ago, during my final project...), I can advise you to separate and organize the things whenever possible. Self-relationship is a nice thing not to be near, when possible (there are rare exceptions). Design your classes at first instance; build then a database in which things fit well, but keeping things simple as they should be. My preference is... better drawn than said, 
 
 
 You may prefer to see the code. It's  here . 
A possible query to list messages from a certain header would be 
 
 
 You'll see a personal preference of mine to bit fields. For instance, you don't really have to remember a certain from_id more than one time, once your purpose is a two person messaging system. 
 I hope you have doubts. 
 
 Regards, 
 Leonardo 
 