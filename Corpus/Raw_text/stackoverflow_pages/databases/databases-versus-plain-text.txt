*** databases-versus-plain-text ***

 When dealing with small projects, what do you feel is the break even point for storing data in simple text files, hash tables, etc., versus using a real database?  For small projects with simple data management requirements, a real database is unnecessary complexity and violates YAGNI.  However, at some point the complexity of a database is obviously worth it.  What are some signs that your problem is too complex for simple ad-hoc techniques and needs a real database? 
 Note:  To people used to enterprise environments, this will probably sound like a weird question.  However, my problem domain is bioinformatics.  Most of my programming is prototypes, not production code.  I'm primarily a domain expert and secondarily a programmer.  Most of my code is algorithm-centric, not data management-centric.  The purpose of this question is largely for me to figure out how much work I might save in the long run if I learn to use proper databases in my code instead of the more ad-hoc techniques I typically use. 
 
 1) Concurrency.  Do you have multiple people accessing the same dataset?  Then it's going to get pretty involved to broker all of the different readers and writers in a  scalable  fashion if you roll your own system. 
 2) Formatting and relationships:  Is your data something that doesn't fit neatly into a table structure?  Long nucleotide sequences and stuff like that?  That's not really conveniently tabular data.   
 Another example: Nobody would consider implementing software like Photoshop to store PSDs in a relational format, because the data structures don't really lend themselves to that type of storage or query pattern. 
 3) ACID (sort of a corollary to #1): If Atomicity, Consistency, Integrity, and Durability are not challenges with a flat file, then go with a flat file. 
 
 I think at some point you'll miss the querying capabilities of a database, but you can consider some minimalistic database alternatives: 
 
 SQLite  (Great, almost SQL-92 standard compliant) 
 shsql 
 SQL Server Compact 
 
 
 For me, the line is crossed once I have to query my data in ways that involve more than a single relationship. Relating two flat data structures on disk is fairly simple, but once we get beyond that, a set-based language like SQL and formal database relationships actually reduce complexity. 
 
 I would only write my own on-disk format under very special circumstances.  Reusing someone else's code is nearly always faster. 
 For relational data, I would use SQLite.  For key/value pairs, I would use BerkeleyDB (perhaps via KiokuDB).  For simple objects, I would use JSON or YAML, but only if I only had a few. 
 With SQLite and BDB, "a real database" is literally two lines of code away.  It is hard to beat that. 
 
 The problem with small projects is that they become bigger before we know it. And once they do , we start missing the sql capabilities. 
 Always design such that a db can be utilized later on if required without ripping apart half of the application. 
 
 It depends entirely on the domain-specific application needs. A lot of times direct text file/binary files access can be extremely fast, efficient, as well as providing you all the file access capabilities of your OS's file system. 
 Furthermore, your programming language most likely already has a built-in module (or is easy to make one) for specific parsing. 
 If what you need is many appends (INSERTS?) and sequential/few access little/no concurrency, files are the way to go. 
 On the other hand, when your requirements for concurrency, non-sequential reading/writing, atomicity, atomic permissions, your data is relational by the nature etc., you will be better off with a relational or OO database. 
 There is a lot that can be accomplished with  SQLite3 , which is extremely light (under 300kb), ACID compliant, written in C/C++, and highly ubiquitous (if it isn't already included in your programming language -for example Python-, there is surely one available). It can be useful even on db files as big as 1GB, possible more. 
 If your requirements where bigger, there wouldn't even be a discussion, go for a full-blown RDBMS. 
 
 For the kind of applications you are developing in bioinformatics, you are often doing one-shot applications (often scripts that define a workflow of calculations) that answer a specific questions, and you are not likely to be reusing these applications after you answered your question. 
Often, you should therefore avoid creating databases to store the results, as after all you are not going to use their features very much.   
 You will probably be querying some webservices, files, or databases, run some local algorithms on the data gathered from different sources, and produce some tabular or structured output format (xml, json, etc).  
 For that, I would suggest you to use workflow tools like  Knime  (or a commercial solution like  Inforsense KDE , Accelrys's  Pipeline pilot , or  Snaplogic , as they allow you to query data in a variety of formats and locations (rdbms, flat files, webservices), run algorithms, and build powerful web apps that allow you to easily publish your workflows to your users and let them interact at specific points).   
 If your prototype "grows" and you have to build more functionality on top of the data your workflows output, and if the output of your prototype is not likely to change everyday, then it's a wise decision to store a subset of the results in a database. This allows you to plug in powerful reporting tools like BusinessObjects, Crystal reports, jasper reports or whatever reporting solution available out there and show data to your users in a better shape than a spreadsheet or a csv file. 
 Finally, some development frameworks will make your choices more obvious : if you build a web application using an MVC framework, it is likely that your data will reside in an RDBMS (but please, don't put genomic sequences in a table column :-)).   
 All in all, it's a case by case choice, depending on your needs for each particular application. 
 
 In software I can usually get away with storing values in a XML configuration file or in the registry, e.g. software options. Once I need to persist objects I move to a database because the upfront cost is not that bad compared to the long term effects that relations and reporting can offer. 
 
 For bioinformatics you may be interested on that:  Blast on DB . The guy who is working on that is a friend of mine and has a work on fast similarity sequence search, he found out to make his own binary storage better than using databases at this point.  
 I don't know specific details about his solution but you probably can exchange one or two ideias mailing the guy, even sharing code. 
 
 Do you need/want SQL queries? 
 Are multiple people going to want to access the data? 
 Is your data relational? 
 If you answered no to those questions, you (probably) don't need a full on database. 
 
 First, I'd consider: 
 
 How large will the database initially be: # of tables, # of rows 
 How quickly will it grow? 
 Is the data frequently queried? 
 
 If I were to create a personal recipe app, for example, I know I might add 50 favorite recipes to start and add no more than 5 recipes a year.  With that being said, I could easily get by without a database since the size of the data store will have minimal impact on queries. 
 That said, I would probably use a database for any application where data entry and queries occur (even a small personal recipe app).  I don't think it adds a lot of overhead especially when your framework (e.g. Rails) allows you to keep your database dumb (primarily tables, indexes, and constraints).  It alleviates the chance that I'll have to eventually port to a database if I decide to scale up. 
 
 If you know the format of your data, flat files, if faster/easier to develop with, will be fine. If you expect your record formats to change frequently during development then I'd suggest that ALTER TABLE is your friend. Flat files will also tend to be faster (if you care about speed) unless you expect to implement the equivalent of joins across many combinations of files. 
 The real benefit of using a RDBMS during development is the flexibility with which you can modify your data schema and the ease with which you can access your data via queries. 
 Good design will ensure that you keep your data access layer relatively isolated (because of separation of concerns) so it should be a fairly straightforward (if tedious) matter to rework to a database later should it be worthwhile. Or, of course, if you use a database to develop your structures you may subsequently take the app back to flat/indexed files once those structures are crystallized in order to gain performance. 
 
 Use whatever persistence technology you're most comfortable with, and scales sufficiently. 
 YAGNI at least means "Don't add a new technology to your personal stack unless you can't be productive with whatever is already there." 
 For many (most?) of us, our comfort zone for data persistence is SQL. For some, it might be XML. Just don't write your own until (see paragraph 2). 
 
 As someone also doing research in Bioinformatics, I would suggest NOT using a database for these kinds of prototype projects unless you are sure it needs it. If you are on the fence, go with the databaseless solution and stick with flat files. It is also important to note that traditionally Bioinformatics researchers have go the flat file route, which means there are well defined file formats for most types of data in the feild. If you decide to go with a database solution, it may hurt your compatibility with existing research projects. 
 