*** db-design-for-microservice-architecture ***

 
 
 
 
 
 Closed . This question needs to be more  focused . It is not currently accepting answers.
                            
                         
 
 
 
 
 
 
 
 
 
 
 Want to improve this question?  Update the question so it focuses on one problem only by  editing this post .
                         
 Closed  2 years ago . 
 
 
 
 I am planning to use the Microservices architecture for the implementation of our website. I wanted to know if it is right to share databases between services or if it is preferable to have a separate database for each service. In this regard, can I consider having one common database for all services or does it violate the very essence of Microservice architecture ? 
 
 Microservices offers  **decoupling**
. You must  **break down your application**
 into independent domains. Each domain can have a DB. In case other MS needs to access data owned by some other microservices, they have to communicate over the network. 
 In case you feel that there are too many dependent services and the network calls would be too much, then you can define a domain, clustering the dependent services together. 
 For instance -- Suppose I have an online Test evaluation Service where a manager of a company can post tests and he can view results of all the employees in his department. 
 My Microservices for this scenario would be: 
 **Initial Design**
  
 
 User Service: For login and user information. 
 Test Service: Service to evaluate tests. 
 Employee: Handles employee details 
 Company: Handles organization CRUD 
 Department: Handles department CRUD 
 
 After breaking it down, seems like employee, Organization and Department service would be making too much network/API calls as they are tightly dependent on each other. So it's better to cluster them. 
 **Updated design**

 
 User Service : For login and user information. 
 Test Service : Service to evaluate tests 
 Organization : Handles Company, Employee and Department related operations. 
 
 Each service could have it's own DB and it's independently deployable. User and Test Service can use mongoDB or any NoSql DB and Organization service can use RDBMS. 
 Hope this helps. 
 
 If you share the same database then you loose two of the most important advantages of microservices:  strong cohesion and loose coupling (page 25) . 
 You can share the same database if you don't share the tables in it. For example,   uses   and   and   uses   and  . When I say uses I mean read and write. One microservice don't read and don't write on the other's tables. 
 