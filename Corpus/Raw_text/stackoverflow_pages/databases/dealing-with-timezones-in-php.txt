*** dealing-with-timezones-in-php ***

 Some issues with timezones in PHP have been in the back of my mind for a while now, and I was wondering if there are better ways to handle it than what I'm currently doing. 
 All of the issues revolve around reformating database stored dates: 
 When dealing with a site that has to support multiple timezones (for users), to normalize the timezone offest of stored timestamps I always store it with the server timezone using the   attribute or the   function.  
 This way I don't have to consider what timezone was set for PHP when the timestamp was entered (since PHP time functions are timezone aware). For each user, according to his preference I set the timezone somewhere in my bootstrap file using: 
 
 When I'm looking to format dates with the php   function, some form of conversion has to take place since MySQL currently stores timestamp in the format  . With no regard to timezone, you could simply run: 
 
 The problem with this is that   and   are both timezone aware functions, meaning that if the PHP timezone is set differently from the server timezone, the timezone offset will apply twice (instead of once as we would like). 
 To deal with this, I usually retrieve MySQL timestamps using the   function which is not timezone aware, allowing my to apply   directly on it - thereby applying the timezone offset only once. 
 I don't really like this 'hack' as I can no longer retrieve those columns as I normally would, or use   to fetch all columns (sometimes it simplifies queries greatly). Also, sometimes it's simply not an option to use   (especially when using with open-source packages without much abstraction for query composition). 
 Another issue is when storing the timestamp, when usage of   or   is not an option - storing a PHP generated timestamp will store it with the timezone offset which I would like to avoid. 
 I'm probably missing something really basic here, but so far I haven't been able to come up with a generic solution to handle those issues so I'm forced to treat them case-by-case. Your thoughts are very welcome 
 
 Few months ago we spent some time thinking about this. The technique we ended up with is pretty simple: 
 
 Store dates in GMT/UTC (e.g. 0 timezone offset). 
 Apply current user timezone offset after retrieval from the database (e.g. before showing to the user or whenever you want). 
 
 We use Unix timestamps format. But that doesn't matter. 
 
 Since PHP 5.2 you can use DateTime which makes working with timezones easy: 
 
 
 You could try forcing MySQL to use UTC everywhere using  . 
 Unfortunately I haven't got any answer for the strtotime/UNIX_TIMESTAMP thing, in fact I've got the same problem with Postgres. 
 
 I didn't found any elegant solution online so I have created a  Timezone HTML select generator  script and here's the  output  directly. It's something like this: 
 
 Enjoy! 
 