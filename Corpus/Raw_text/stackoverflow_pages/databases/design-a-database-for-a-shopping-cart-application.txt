*** design-a-database-for-a-shopping-cart-application ***

 
 
 
 
 
 Closed . This question needs to be more  focused . It is not currently accepting answers.
                            
                         
 
 
 
 
 
 
 
 
 
 
 Want to improve this question?  Update the question so it focuses on one problem only by  editing this post .
                         
 Closed  last year . 
 
 
 
 I have never designed a database/data-model/schema from scratch, especially for a web-application.
In some recent job interviews, i was asked to 'design' a database for a shopping cart application. Now i am working on a mobile shopping application (retail, uses phonegap) with a backend that needs to store and process product and order info. The scale of this problem is so huge, i don't know where to start. I was hoping for some advise on -    
 
 How should I approach such a problem (shopping cart application DB) ? where should i start ? 
 Are there any common mistakes/pitfalls that i should avoid ? 
 What optimization/efficiency paradigms should i keep in mind when designing such a DB ? 
 How should i go about identifying entities in the problem space (products, orders, etc)? how should i derive the relationships between them ? 
 When a interviewer asks such a question, what exactly is he looking for ? is there something i should/should not say ?  
 
 I should also clarify that -  
 
 Yes, I am a noob, and my motives are to learn database design AND prepare for upcoming job interviews. I have read DBMS books where they describe individual concepts in detail, but i have no clue how to put those things together and start designing a database. 
 I have seen other threads on database design. The authors already tend to posses some knowledge on how to break the problem down. i would like to understand the methodology behind doing that. 
 Links to outside resources, comments, suggestions and anything that will put me on the right track is much appreciated. I hope this thread serves as a learning experience for myself and others. 
 
 
 There can be five tables in database: 
 **CATEGORY**
 this table stores information about products categories of your store and categories hierarchy. parent field of this table stores ID of the parent category. 
 **PRODUCT**
 all products of your store are stored in this table. This table has a foreign key categoryID which identifies ID of the category to which a product belongs. 
 **ORDER**
 this table stores information about all orders made by visitors of your store. 
 **ORDERED_SHOPPING_CART**
 table is tightly connected with PRODUCT and ORDER tables; stores information on customers' orders content. 
 **SPECIAL_OFFER**
 table contains a list of products, which are shown on  home page as special offers 
 
 A brief answer is the way that i would tackle this problem. Firstly, there are loads of open source or free, web based shopping carts. This means that you can get one, set up the database and then have a good look around what they did.  
 Ask yourself questions such as, why have they done that? Why is it good? What downside could there be? How would i do it differently? why? 
 I would try to procure a database design tool that allows you to visualize the database. (like database designer in visual studio or i have one from MicroOlap that does pgsql databases)  
 Then you need to think about what you need in the database. What is the customer going to do? Buy products! Therefore you need a products table. Without going down the whole route you can see the point. Imagine what is needed, then basically make a table for it.  
 If you have more than one option for a field in a table, make another table with a relation in it. So if you have a product table and you have a status field. you could have more than one status. (eg out of stock, limited number, big item, expensive) instead of hard coding these fields, make a table and allow the user to add items to the table. then in the product table add a field status_id and link it to the status table 
 Many - many relationships are useful things to know. (i fell short to this myself.) say you have a component and product tables. The products can be made up of lots of components and the components could be allocated to many products. Create a mediator table. Something like prodcomp( and in this you would have fields like id, prod_id, comp_id, qtyneeded).  
 Learn to  index correctly .  
 Don't create the database until you have a solid idea of how it will work. this saves time in recreating it later.  
 There may be more to this, however, i hope i have given you a good start. 
 