*** designing-social-feed-in-dynamodb ***

 This question might be relevant for any document based NoSQL database.   
 I'm making some interest specific social network and decided to go with DynamoDB because of scalability and no-pain-administration factors. There are only two main entities in database:  **users**
 and  **posts**
. 
 Requirement for common  **queries**
 are very simple: 
 
 Home feed (feed of people I'm following)  
 My/User feed (feed of mine, or specific user feed) 
 List of user I/user followed 
 List of followers 
 
 Here is a database scheme I come up with so far (legend:   and  ): 
 
 As you can see I came-up storing all my post directly in timeline collection. This way I can query for posts using date and username (hash and range keys). Everything seems fine,  but here is the problem : 
 I can not query for User-Timeline in one go. This will be one of the most demanded queries by system and I can not provide efficient way to do this. Please help. Thanks. 
 
 I would check out the Titan graph database ( http://thinkaurelius.github.com/titan/ ) and Neo4j ( http://www.neo4j.org/ ).  
 I know Titan claims to scale pretty well with large data sets. 
 Ultimately I think your model maps well to a graph. Users and posts would be nodes, and then you can connect them arbitrarily via edges. A user (node) is a friend (edge) of another user (node).  
 A user (node) has many posts (nodes) in their timeline. Then you can run interesting traversals via the graph. 
 
 I happen to work with news feeds daily. (Author of Stream-Framework and founded getstream.io) 
 The most common solutions I see are: 
 
 Cassandra (Instagram) 
 Redis (expensive, but easy) 
 MongoDB 
 DynamoDB 
 RocksDB (Linkedin) 
 
 Most people use either fanout on write or fanout on read. This makes it easier to build a working solution, but it can get expensive quickly. Your best bet is to use a combination of those 2 approaches. So do a fanout on write in most cases, but for very popular feeds keep them in memory.  
 Stream-Framework  is open source and supports Cassandra/Redis & Python 
 getstream.io  is a hosted solution build on top of Go & Rocksdb. 
 If you do end up using DynamoDB be sure to setup the right partition key:
 https://shinesolutions.com/2016/06/27/a-deep-dive-into-dynamodb-partitions/ 
 Also note that a Redis or DynamoDB based solution will get expensive pretty quickly. You'll get the lowest cost per user by leveraging Cassandra or RocksDB. 
 
 You can also use Amazon Neptune ( https://aws.amazon.com/neptune/ ) (Graph DB) which is well suited for social network. I don't think DynomoDB would be a good choice for yours use cases. 
 