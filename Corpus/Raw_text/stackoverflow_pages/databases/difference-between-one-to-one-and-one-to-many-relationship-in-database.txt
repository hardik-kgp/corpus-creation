*** difference-between-one-to-one-and-one-to-many-relationship-in-database ***

 This is probably a basic(dumb) question but when having a one-to-one relationship in a database the other table has a foreign key ID(in this example). And in a one-to-many relationship the table contains many foreign keys.  
 But the database does not know whether this is a one-to-one or one-to-many relationship right? The relationships that I make in an ER-Diagram is only to indicate where it should be foreign keys when making the actual tables? 
 I do not completely grasp the idea of the relationships, even though I have read many tutorials about this. 
 Thanks in advance. 
 
 In a sense, all the relationships we talk about are not  known  to the database, they are constructs we have invented to better understand how to design the tables. 
 The big difference in terms of table structure between one-to-one and one-to-many is that in one-to-one it is possible (but not necessary) to have a bidirectional relationship, meaning table A can have a foreign key into table B, and table B can have a foreign key into the associated record in table A.  This is not possible with a one-to-many relationship. 
 One-to-one relationships associate one record in one table with a single record in the other table.  One-to-many relationships associate one record in one table with many records in the other table. 
 
 To enable one-to-one relationship you need to add unique constraint to foreign key. It is not possible to have two foreign keys for each table as it will be impossible to create records. 
 
 Im having trouble understanding what the actual question is.  
 Your analysis is for the most part correct, in that if you have a 2 tables, and table2 has a foreign key to table one, it could be either a one-to-one or a many-to-one.   
 Your sentence "And in a one-to-many relationship the table contains many foreign keys." 
 The table of the 'many' side still contains one column that is a foreign key, its just that more than one row can have the same foreign key value (many rows point to one parent). 
 Also note that you can put the foreign key on the parent table, to the child, instead of the other way around.  In this way, you can prevent one-to-many if you want to do that.  Also note that in this way, more than one parent can share a child, which might or might not be what you want. 
 
 The database-level equivalent of a 1:1 vs. 1:m is having a unique index on the foreign key column. Note that this will only work for 1:1, NOT 1:0..1, as   is considered when evaluating uniqueness. There are workarounds for this restriction, but that's it at the basic level. 
 
 Similarly by example, a product has only one product code, so it's one-to-one relationship ( **product <-> ABC123**
), but a customer can purchase more than one product, so it's one-to-many relationship ( **person <->>>product**
). 
 
 well, you are right, this relation is important for you, but not for db itself. When you have two tables, one with your basic information, and another one with your detailed information.. for both tables you are you, so it is one-to-one relation, you can not map your data to somebody else.  
 Now add third table "cities" and one of your information points to city you live in - this is example of one-to-many (one city can be used, and should be used for many people). 
 one-to-many / one-to-one just show how your tables interact. And all the time, you want to "save" rows/columns in table not duplicating them you will use one-to-many relation with another table. Or many-to-many :) 
 
 Let's assume you have a table with two attributes A and B. If A is a candidate key and B is not then the relationship between A and B is 1 to many. If both A and B are candidate keys then the relationship is 1 to 1. 
 
 Given table A and B if 
 
 A and B have a strict 1 to 1 relationship 
 For every B instance, there will always be an A instance 
 
 The best approach is to make the primary key of B also a foreign key referencing A. This is also called "Table per Type Inheritance" and the "is a" relationship. There are other ways to enforce a unique foreign key, but using the primary key makes the relationship clear in the schema and in ER diagrams. 
 Of course there are always other scenarios, and if your design doesn't meet both of the criteria above, you'll have to use another approach. 
 