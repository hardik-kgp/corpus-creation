*** difference-between-rake-dbmigrate-dbreset-and-dbschemaload ***

 The difference between   and   is pretty clear in my head. The thing which I don't understand is how   different from the former two. 
 Just to be sure that I am on the same page: 
 
  - Runs the migrations which haven't been run yet. 
  - Clears the database (presumably does a   +   +  ) and runs migration on a fresh database. 
 
 Please help to clarify, if my understanding has gone wrong. 
 
 
 **db:migrate**
 runs (single) migrations that have not run yet. 
 **db:create**
 creates the database 
 **db:drop**
 deletes the database 
 **db:schema:load**
 creates tables and columns within the (existing) database following schema.rb 
 **db:setup**
 does db:create, db:schema:load, db:seed 
 **db:reset**
 does db:drop, db:setup 
 
 Typically, you would use db:migrate after having made changes to the schema via new migration files (this makes sense only if there is already data in the database). db:schema:load is used when you setup a new instance of your app. 
 I hope that helps. 
 
 UPDATE for rails 3.2.12: 
 I just checked the source and the dependencies are like this now: 
 
 **db:create**
 creates the database for the current env 
 **db:create:all**
 creates the databases for all envs 
 **db:drop**
 drops the database for the current env 
 **db:drop:all**
 drops the databases for all envs 
 **db:migrate**
 runs migrations for the current env that have not run yet 
 **db:migrate:up**
 runs one specific migration 
 **db:migrate:down**
 rolls back one specific migration 
 **db:migrate:status**
 shows current migration status 
 **db:rollback**
 rolls back the last migration 
 **db:forward**
 advances the current schema version to the next one 
 **db:seed**
 (only) runs the db/seed.rb file 
 **db:schema:load**
 loads the schema into the current env's database 
 **db:schema:dump**
 dumps the current env's schema (and seems to create the db as well) 
 **db:setup**
 runs db:schema:load, db:seed 
 **db:reset**
 runs db:drop db:setup 
 **db:migrate:redo**
 runs (db:migrate:down db:migrate:up) or (db:rollback db:migrate) depending on the specified migration 
 **db:migrate:reset**
 runs db:drop db:create db:migrate 
 
 For further information please have a look at  https://github.com/rails/rails/blob/v3.2.12/activerecord/lib/active_record/railties/databases.rake  (for Rails 3.2.x) and  https://github.com/rails/rails/blob/v4.0.5/activerecord/lib/active_record/railties/databases.rake  (for Rails 4.0.x) 
 
 **TLDR**

 Use   
 
  If you wanna make changes to the schema   
  If you wanna drop the database, reload the schema from  , and reseed the database 
  If you wanna reset database to schema as provided in   (This will delete all data) 
 
 **Explanations**

  will set up the schema as provided in   file. This is useful for a fresh install of app as it doesn't take as much time as  
 
 Important note,   will  **delete**
 data on server.   
 
  makes changes to the existing schema. Its like creating versions of schema.   will look in   for any ruby files and execute the migrations that aren't run yet starting with the oldest. Rails knows which file is the oldest by looking at the timestamp at the beginning of the migration filename.   comes with a benefit that data can also be put in the database. This is actually not a good practice. Its better to use   to add data. 
  provides tasks  up ,  down  etc which enables commands like   and makes it the most useful command.  
  does a   and  
It drops the database, create it again, loads the schema, and initializes with the seed data 
 **Relevant part of the commands from **
**databases.rake**

 
 
 
 
 
 
 
 As far as I understand, it is going to drop your database and re-create it based on your   file. That is why you need to make sure that your   file is always up to date and under version control. 
 
 You could simply look in the Active Record Rake tasks as that is where I believe they live as in this file.
 https://github.com/rails/rails/blob/fe1f4b2ad56f010a4e9b93d547d63a15953d9dc2/activerecord/lib/active_record/tasks/database_tasks.rb 
 What they do is your question right? 
 That depends on where they come from and this is just and example to show that they vary depending upon the task. Here we have a different file full of tasks. 
 https://github.com/rails/rails/blob/fe1f4b2ad56f010a4e9b93d547d63a15953d9dc2/activerecord/Rakefile 
 which has these tasks. 
 
 This may not answer your question but could give you some insight into go ahead and look the source over especially the rake files and tasks. As they do a pretty good job of helping you use rails they don't always document the code that well. We could all help there if we know what it is supposed to do. 
 