*** disadvantages-of-mysql-versus-other-databases ***

 Every single book that teaches programming (or almost anything else) starts off with a whole bunch of spiel on why what it's about (C++, MySQL, waterskiing, skydiving, dentistry, whatever) is the greatest thing in the world. So I open the MySQL O'Reilly book, and read the intro, and get the traditional sermon. The main points that  **the book mentioned**
 were: 
 
 MySQL has been shown to have tied Oracle as the fastest and most scalable database software. 
 It's free and open source. 
 
 Sounds pretty convincing, but I know there's always at least two sides of every story. I knew I needed to be disillusioned when I saw someone suggest to someone to use Oracle instead of MySQL and thought, "Why in the world would you want to do that?!", just because of the few paragraphs I'd read, with no other justification. So lets investigate the other side of the story: 
 What are some reasons NOT to use MySQL? 
 
 Here's just a random list of stuff that popped into my head. It's CW, so feel free to add to it as necessary. 
 
 Oracle provides a top notch ERP built on their database. If your company is subject to Sarbanes-Oxley regulations, this is quite a bit above "crucial." 
 SQL Server licenses come with Analysis Services, Integration Services, and Reporting Services. If you want to do anything with OLAP, ETL, or reporting, these three are great applications that are built on the SQL Server stack. 
 SQL Server has native .NET data types (in 2008). Absolutely brilliant for .NET shops dealing with geospatial datasets. 
 MySQL does not support check constraints. 
 SQL Server includes the   clause, which helps when dealing with the "top n rows in each group" problem. Essentially, you can do aggregate functions partitioned over the dataset any way you'd like. 
 SQL Server uses Kerberos and Windows authentication natively. MySQL does not tie into Active Directory. 
 Superior performance on subqueries (almost any database has subquery performance that is superior to MySQL's) 
 Oracle, SQL Server, PostgreSQL and others have a richer set of join algorithms available to them; this means joins can often be performed faster, especially when large tables are involved. 
 
 
 
 MySQL has been shown to have tied oracle as the fastest and most scalable database software. 
 
 Making that statement about any two database systems is probably enough to throw the book away without reading the rest. Database systems are not commodities that can be compared with a couple lines of information, and will not be for the foreseeable future. 
 One reason that the statement is obviously false is that MySQL has very limited plan choices available. For instance, MySQL can't use merge join or hash join -- two fundamental algorithms that have useful performance characteristics. That's pretty much the end of the story for many query workloads. It is trivial to show a reasonable query that is orders of magnitude faster with a merge join. 
 There are plenty of other criticisms of MySQL versus XYZ and vice-versa. My point is that this is a complex issue, and the book is drastically oversimplifying. If you're getting involved in databases at all, you need to spend time diversifying your knowledge and understanding fundamentals. 
 My personal opinion is that MySQL and SQLite are the worst places to start. Pick something like Oracle (which can be downloaded free of charge for learning/evaluation, which many don't realize), PostgreSQL (BSD license), or MS SQL. FirebirdSQL might be good, too. Once you familiarize yourself with a few systems, you'll be able to make an informed choice about whether the trade-offs MySQL makes are right for you. 
 
 Everyone seems to be missing one of the main reasons to stick with Oracle/MS. You've already got a stable full of DBAs that know those products inside and out. 
 
 The future is of sun (the company behind mysql) is unclear and you don't know whether there will be a company to back the product. 
 
 
 The default collation in mysql is case-insensitive.  This is not a problem per se, but I think this strange default is an indication that it was targeted at hobby-developers, rather than professionals. This is a big assumption, but I'd think any professional would expect a database to compare strings for identity by default (i.e. using a binary collation). 
 Manipulation of tables during transactions causes implicit COMMITs.  While this might not look grieve at the first glance, you will notice that you cannot cannot work under   conditions if altering/creating tables is an inherent part of your application. 
 
 
 MySQL can certainly match or beat Oracle in speed. I've done it numerous times myself. Ok, so I had to use various table types like black hole, merge, innodb, and myisam in just the right laces. And it took me a few days to get everything working just right. The Oracle DBA got things working in an hour or two. 
 MySQL is fine for 98% of the sites out there, maybe more. But it is fairly easy to bring it to a crawl without a lot of data if you don't know what you are doing. Oracle is quite a bit harder to bring to a crawl, but it can still be done. I've worked with both with datasets in the hundreds of millions of records (tiny by some measures). MySQL takes quite a bit more attention. 
 No database can scale indefinitely, which is why nosql "databases" are becoming so popular. I think the real question is if MySQL is "good enough" for what you need to do. The price is certainly right. The same could be said about PHP. 
 Why does Facebook use MySQL? Could you imagine what it would cost them to buy enough Oracle licenses!? It's good enough. 
 
 
 It's free and open source. 
 
 True. But keep in mind that MySQL is, in many cases, not free for commercial use. MySQL and the connectors (the official drivers for various languages), are GPL licensed. 
 If you use, say, the Connector/.NET to connect to MySQL your code have to be GPL compatible. It's dual licensed though, so you can buy an enterprise version under another license - and I believe they have a (either free or just very cheap) program that lets you license the connectors under a different license.  
 Everyone I know using MySQL is unaware of this :-) 
 
 
 I knew I needed to be disillusioned
  when I saw someone suggest to someone
  to use oracle instead of MySQL and
  thought, "Why in the world would you
  want to do that?!" 
 
 Because your company has been using Oracle for the past ten years, or because you equate enterprise usage with 'must be good' and open-source with 'free crap'. That's just about the only reason. Everyone I know who has worked with Oracle loathes it. Everyone I know who has worked with MySQL, assuming they don't love it, at least consider it a better alternative to Oracle in almost every regard. 
 SQL RMDBs are so complex though, that in almost every respect there's something one DB does that another doesn't. It is also, unfortunately, a fact of comparing databases that people quote statistics without using properly configured servers. If you have two default configurations for a server, one might be better than the other, but that's about as far as the comparisons usually go. They don't reflect the fact that these gigantic applications have a million little switches and toggles you can use to speed certain things up, increase reliability and generally screw up bad science. 
 
 MySQL tends to be a very general purpose database system, you can use it for almost anything that you'd use Oracle, SQL Server, PostgreSQL, DB2, etc for. 
 However, these different systems have different strengths, PostgreSQL has a ton more functionality than MySQL and can handle some very specific tasks that MySQL struggles with.  SQL Server usually integrates with Microsoft products very easily whereas MySQL you'd have to do some extra work to make them play together.  Oracle is MASSIVE, they're not just databases and when you're dealing with large, expansive systems Oracle probably has the gear to cover everything under the 1 roof, whereas you'd need to tie a bunch of disparate systems together to have MySQL has your database system. 
 Whether or not to use MySQL should be based upon whether or not it is  reasonable  to use MySQL. 
 
 Disclaimer: I have been using MySQL since 2001 and still love it, but here are a few reasons that make me doubt about my fidelity... 
 There are some false arguments (it was true a few years ago) in some of the answers I read. Before making a choice, check MySQL documentation and its up-to-date list of features. You could be surprised. 
 Each DB server lack functionalities. This is not a real blocking issue if you do not specifically need them. 
 For me, the main issues are elsewhere: 
 
 The time needed to have a bug fixed and published in a stable release. It is a shame. (For some bugs... it takes years (no kidding)!) 
 The frequency of stable releases. 
 
 But since this year, the new issues are: 
 
 The number of increasing branches (Percona, Google, Facebook, etc.). 
 Sun is unclear with his strategy. 
 Many MySQL employees left the company. 
 
 
 MySQL is very tolerant of ambiguities -- something you  don't  want in a database system. Here are a few examples off the top of my head: 
 
 As another poster stated,   and   columns are case-insensitive, already a pretty bad sign. 
 You can   into a table that has a column without a default value that is also  . Yes, really! Instead of throwing an error, MySQL will pick a value for you based on the data type, e.g.   for numbers. 
 You can use a   statement while some columns are neither using an aggregate function, nor included in the   statement. The outcome is pretty much random. No warnings or errors here either, in my experience. 
 
 MySQL is also far from rock-solid. Just this month, I discovered a bug in the (admittedly old, but a "stable release") version of MySQL used by DreamHost that results in data loss. (Certain conditions when creating a table with variable-length rows.) 
 I've been using MySQL for many years and still do, but would never dream of using it for anything serious, where data loss would be a big problem. It's great for non-mission-critical web sites and blogs though. 
 
 Basically, there are several choices for a database. Frankly, in today's world, DB choice is less important than it was a few years ago. Here are a few issues to consider. 
 
 Most of the current database systems in widespread use such as SQL Server (and SQL Server Express), Oracle, MySQL, SQLLite, etc. are relatively standards compliant and can be used somewhat interchangeably. Some serve different niche markets. For example, SQL Server, MySQL, and Oracle are all good choices for large Enterprise applications. SQLLite is very good for applications which deploy on a client and need a local database with a small footprint and minimal configuration. (In my opinion, Oracle is extremely over-priced, is backed by an arrogant unresponsive company. It would never be my first choice on any project. I would only use it if it was mandated by the client or by necessity.) 
 A high percentage of top-end developers are using tools such as Hibernate(Java)/NHibernate(.NET) to build their data access layers. Hibernate variants strongly encourage developers to start with development of the object model rather than the database model. The Hibernate application then generates the data model automatically--and even handles data model updates. Hibernate variants can be used with any of the major database vendors. Changing your database choice can be as simple and painless as selecting a different database type in your configuration. On a side note, I should mention that while Hibernate and NHibernate are cross-database-compatible, they do not work on the lowest common denominator. The data access code in these applications is often designed to take advantages of special features within a given database engine. For example NHibernate supports access to the NVarchar(Max) data type in SQL Server which allows for very long strings. 
 In most applications, issues with database performance do not derive directly from the speed of reads and writes. Most of the issues relate to how the application manages the caching of frequently accessed data. For example, in online blog site, it makes sense to cache blog posts once they have been read so they are not repeatedly fetched from the database. This caching mechanism is almost always primarily handled by the application code rather than database server--though database servers do provide some caching. Hibernate/NHibernate have excellent caching support built in as does Microsoft's ASP.NET and their new MVC framework built on top of ASP.NET. 
 Enterpise databases (SQL Server, Oracle, MySQL) are best for situations where functionality such as replication, clustering, huge datasets, etc. are required. 
 
 
 I don't like MySQL licence :  Firebird and PostgreSQL are better 
 There is no real hotbackup include in the MySQL by Sun 
 you can also look  here  which is interresting link and comment ! 
 
 MySQL is free, but it takes an expert to maintain.  Someone who naturally uses the command prompt and is not afraid to experiment.  In some cases, MySQL problems are too complex, and the right people to troubleshoot them may not be available for any amount of money. 
 SQL Server is priced in the middle range.  It can be maintained by "normal people", the kind who go home every day on 17:00 and have a natural disinclination to fifty page HOW-TO's. SQL Sever performs well in most instances but can break down in specific scenarios. 
 Oracle is the most expensive and requires highly paid operators.  If you have the money, Oracle is a "safe" choice, because there's nothing Oracle won't do for money. 
 Three products, three markets! 
 
 A couple of pages listing gotchas (such as  this  and  this ) make me want to stay as far away from MySQL as possible. Here's a more neutral  comparison  of Postgres and MySQL. 
 As for the open source aspect others mentioned: MySQL is open source and free, only if your application is, too. If it's not, you need a commercial license. 
 
 My personal story: 
 Adding a new index to a table of about 10k rows. 
 **MySQL side**

about 30 seconds. 
 **Postgres side**

about 1 second. 
 
 I've worked with MySQL for years, and SQL Server only over the past year. I don't really see one being any easier or harder to use than the other in most cases. I do wish, however, that MSSQL had some of the features that MySQL possesses (e.g. being able to insert multiple rows on a single INSERT statement). 
 
 Also, if you don't have to use RDBMS, checkout  redis . It is basically memchached with persistence with asynchronous write through. The performance is not on the same scale with MySQL. 
 Well... I guess the comparison isn't really fair to MySQL since it's not RDBMS... 
 