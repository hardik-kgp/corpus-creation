*** django-ignores-router-when-running-tests ***

 I have a django application that uses 2 database connections: 
 
 To connect to the actual data the app is to produce 
 To a reference master data system, that is maintained completely outside my  control 
 
 The issue that I'm having, is that my webapp can absolutely NOT touch the data in the 2nd database. I solved most of the issues by using 2 (sub)apps, one for every database connection. I created a router file that router any migration, and writing to the first app 
 I also made all the models in the 2nd app non managed, using the  
 
 option. 
 To be sure, the user I connect to the 2nd database has read only access 
 This works fine for migrations and running. However, when I try to run tests using django testcase, Django tries to delete and create a test_ database on the 2nd database connection. 
 How can I make sure that Django will NEVER update/delete/insert/drop/truncate over the 2nd connection 
 How can I run tests, that do not try to create  the second database , but do create the first. 
 Thanks! 
 edited: code 
 **model (for the 2nd app, that should not be managed):**
  
 
 **router:**

 
 **settings:**

 
 **one testcase:**

 
 **output from when running this tests:**

 
 (before this point, django creates the test database for my first connection = OK) 
 
 => This next lines should never happen. Fails because I use a read only user (luckily) 
 
 
 I solved this by changing the   definition. I added the   to the   database entry. 
 
 According to the  documentation  this option can be abused to skip database creation: 
 
 However, the replica database has been configured as a test mirror
  (using the MIRROR test setting), indicating that under testing,
  replica should be treated as a mirror of default. 
 When the test environment is configured, a test version of replica
  will not be created. Instead the connection to replica will be
  redirected to point at default. 
 
 Running my tests now skips creation of the second database. 
 Thanks for all the input!! 
 
 Use the   flag with the test command. In the path.to.test.py module, a la  . There is no need to muck around with routes, just make sure that you invoke the tests with the settings flag whenever and where ever you call it.  
 In app.settings.test.py, redefine your DATABASES datastructure: 
 
 This allows you to use a separate database when running tests. Additionally, if you use sqlite3 as your engine, you'll find that tests run very fast as the database is in memory. 
 Using sqlite3 databases for testing means that even hundreds of tests can be run within seconds. As a result, you can run your tests very frequently. I typically map a key to save my work and run my tests with one action: 
 
 Hope that is is helpful! 
 
 You could try to mock out the connection to the second database using python mocks? https://pypi.python.org/pypi/mock  -- now part of the stdlib in python 3. 
 