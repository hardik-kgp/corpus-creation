*** django-increment-blog-entry-view-count-by-one-is-this-efficient ***

 I have the following code in my index view. 
 
 If there are ten (the limit) rows returned from the initial query, will the save issue 10 seperate updated calls to the database, or is Django "smart" enough to issue just one update call? 
 Is there a more efficient method to achieve this result? 
 
 You can use   objects for this.  
 Here is how you import  :  
 **New in Django 1.1**
**.**

Calls to update can also use F() objects to update one field based on the value of another field in the model. This is especially useful for incrementing counters based upon their current value. 
 
 Although you can't do an update on a sliced query set...  **edit: actually you can...**

 This can be done completely in django ORM. You need two SQL queries: 
 
 Do your filter and collect a list of primary keys 
 Do an update on a non-sliced query set of items matching any of those primary keys. 
 
 Getting the non-sliced query set is the hard bit. I wondered about using   but that returns a dictionary, not a query set. One would usually use   to do complex OR type queries and that will work, but   does the job much more simply. 
 
 Due to the way that django executes queries lazily, this results in just 2 database hits, no matter how many items are updated.  
 
 You could handle the updates in a single transaction, which could improve performance significantly.  Use a separate function, decorated with @transaction.commit_manually. 
 
 
 **Revised**

 You're updating 10 separate, individual, distinct objects. 
 The 10 separate, individual, distinct updates can't easily be collapsed into one magical update that somehow touches 10 objects. 
 
 If you really need the efficiency, at the moment you'd have to drop down into SQL and run the update yourself.  That's not worth the added complexity in this case, though. 
 By Django 1.1 you'll be able to do this in a single SQL call via the ORM using  F() objects  to reference fields in the update value. 
 
 A performance improvement to the previous entry. This results in one database hit, with a subquery. 
 
 