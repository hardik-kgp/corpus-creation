*** django-models-without-database ***

 I know the automatic setting is to have any models you define in models.py become database tables. 
 I am trying to define models that won't be tables. They need to store dynamic data (that we get and configure from APIs), every time a user searches for something. This data needs to be assembled, and then when the user is finished, discarded. 
 previously I was using database tables for this. It allowed me to do things like "Trips.objects.all" in any view, and pass that to any template, since it all came from one data source. I've heard you can just not "save" the model instantiation, and then it doesn't save to the database, but I need to access this data (that I've assembled in one view), in multiple other views, to manipulate it and display it . . . if i don't save i can't access it, if i do save, then its in a database (which would have concurrency issues with multiple users) 
 I don't really want to pass around a dictionary/list, and I'm not even sure how i was do that if I had to. 
 ideas? 
 Thanks! 
 
 Another option is to use:  
 
 To prevent django from creating a database table. 
 https://docs.djangoproject.com/en/1.9/ref/models/options/#managed 
 
 Just sounds like a regular   to me.   
 You can put it into   if you like, just don't subclass it on  .   Or you can put it in any python file imported into the scope of whereever you want to use it. 
 Perhaps use  the middleware  to instantiate it when request comes in and discard when request is finished.  One access strategy might be to attach it to the request object itself but ymmv. 
 
 Unlike SQLAlchemy, django's ORM does not support querying on the model without a database backend. 
 Your choices are limited to using a SQLite in-memory database, or to use third party applications like  dqms  which provide a pure in-memory backend for django's ORM. 
 
 Use Django's  cache framework  to store data and share it between views. 
 
 Try to use database or file based  sessions . 
 
 You need Caching, which will store your data in Memory and will be seperate application.  
 With Django, you can use various caching backend such as memcache, database-backend, redis etc.
Since you want some basic query and sorting capability, I would recommend  Redis . Redis has high performance (not higher than memcache), supports datastructures (string/hash/lists/sets/sorted-set).  
 Redis will not replace the database, but will fit good as Key-Value Database Model, where you have to prepare the key to efficiently query the data, since Redis supports querying on keys only. 
 
 Redis Commands are available at  http://redis.io/commands   
 Django Redis Cache Backend :  https://github.com/sebleier/django-redis-cache/ 
 
 I make my bed to MongoDB or any other nosql; persisting and deleting data is incredibly fast, you can use django-norel(mongodb) for that. 
 http://django-mongodb.org/ 
 