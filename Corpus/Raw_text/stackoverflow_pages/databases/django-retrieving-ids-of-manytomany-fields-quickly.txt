*** django-retrieving-ids-of-manytomany-fields-quickly ***

 I have the following model schema in Django (with Postgres).  
 
 Given a QuerySet of A, I would like to return a dictionary mapping each instance of   in the QuerySet to a list of  s of its   instances as quickly as possible. 
 I can surely iterate through each A and query the related field, but is there a more optimal way? 
 
 According you have Three instances. You can use the   method to retrieve just the results and from this result get just the ID's of their   instances.
I use the   field to be my filter because i don't know your scheme, but you can use anything, just must be a  . 
 
 
 You can get pretty close like this: 
 
 This will give a mapping from pks of the current object to the instance itself, so you can iterate through as follows: 
 
 Or given an instance, you can do a fast lookup like so: 
 
 This method maps the instance ids to the related ids (indirectly) since you specifically requested a dictionary. If you aren't doing lookups, you may want the following instead: 
 
 You may take note of the use of   to only pull the pks from the db. There is an  open ticket  to allow the use of   and (I presume)   in Prefetch queries. This would allow you to do the following. 
 
 You could of course optimize further, for example by using   on the primary queryset, but make sure you aren't doing anything with these instances-- they're essentially just expensive containers to hold your related_ids. 
 I believe this is the best that's available for now (without custom queries). To get to exactly what you want, two things are needed: 
 
 The feature above is implemented 
  is made to work with Prefetch   like it does for annotations.   
 
 With these two things in place (and continuing the above example) you could do the following to get exactly what you requested: 
 
 I've left off some details explaining things, but it should be pretty clear from the documentation. If you need any clarification, don't hesitate! 
 