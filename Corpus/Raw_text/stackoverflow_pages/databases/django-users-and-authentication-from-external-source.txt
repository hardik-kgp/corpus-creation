*** django-users-and-authentication-from-external-source ***

 I have a Django app that gets it's data completely from an external source (queried via HTTP). That is, I don't have the option for a local database. Session data is stored in the cache (on my development server I use a SQLite database, so that is no error source). I'm using bleeding edge Django 1.1svn. 
 Enter the problem: I want to use Django's own authentication system for the users. 
 It seems quite simple to write my own Authentication Backend, but always just under the condition that you have a local database where to save the users. Without database my main problem is persistence. 
 I tried it with the following (assume that   is a function that returns some kind of dict): 
 
 But the intentionally missing   method on MyUser seems to break the session storage of a login. 
 How should   look like without a local database? 
 
 OK, it's much more complicated than I thought. First, start with  http://docs.djangoproject.com/en/dev/howto/auth-remote-user/ , but you'll need to extend it with your own backend and user. 
 
 Then the user: 
 
 Phew! Django  **really**
 isn't designed for usage without a database... 
 
 Rather than overwriting the   method, you may also disconnect the signal that invokes it. This is what I do in some apps which have read-only access to the user database. 
 
 
 ping the source showed, that the only place   is actually called (except for user creation and password management code, which you don't need to use at all) is  , to update   value. 
 
 If you don't want user data to rest in DB, try adding dummy   method. If I'm right, it should work. 
 
 Of course, because you have no persistence at all, you should consider caching   results, otherwise in worst case you may end up querying data again and again on every single logged in user's hit. 
 