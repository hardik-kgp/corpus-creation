*** does-column-order-matter-in-your-mysql-tables ***

 While learning mysql, I read that you can perform the following statement when adding a column to a mysql table: 
 
 or 
 
 When would you want to do this? Can column order be utilized for query optimization purposes? Should longblobs be the last column to optimize space consumption? Or do these commands exist for some other reason? 
 
 This will however impact the order of the result in  .  
 This is why you should always name the column in the select statement, e.g.  . But if you know that the app is using  , then you must take care when you add a column.  
 Otherwise, order the column so that it's the most logical to understand. If it affects the perf, then it means you are already on the dark side of database performance tuning and you have probably a problem somewhere else. 
 
 The question has nothing to do with the relational model or SQL.  It is a performance question. 
 In some databases, it is more efficient to order the columns in a specific manner because of the way the disk access is performed.  Whether there is significant advantage is platform specific, as well.  It is a low-level i/o issue related to the way the underlying storage is designed and the way it is accessed by the engine.  Proprietary engine providers generally provide this information via their education and training departments.   
 I think you would have to talk to someone who knows the nitty gritty details of the storage model and i/o methods for MySQL on your specific platform or someone who has bench-marked this on your platform in order to get an answer.   
 It's entirely possible they lay it down on disk in an optimized manner and hide that column ordering from you. 
 
 A "When would you you want to use this" rather than a performance issue. 
 Row based replication will break if the column order differs between master and slave and the column types are incompatible (Error 1677). 
 
 would be one way to correct this problem.  
 
 No it shouldn't matter. A normalized database should not have constraints on the column order, as well. 
 
 column order does not matter. This is purely a convenience feature. just to allow you to restructure your database table the way you like after it has been created. 
 
 The relational model has no concept of ordering of columns within rows and no concept of ordering of rows within tables. 
 
 I thought that it has no matter of performance, but it has in some cases - when you use indexes. 
 Example. 
 I've used join table: 
 
 Both columns were  , and  
Pay attention on order of columns. When I began to select from that table with   - performance was low.  
 After I changed order of columns (made user_id first) it began select times faster. 
 