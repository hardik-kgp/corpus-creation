*** does-every-table-really-need-an-auto-incrementing-artificial-primary-key ***

 
 
 
 
 
 
 
 
                            As it currently stands, this question is not a good fit for our Q&A format. We expect answers to be supported by facts, references,   or expertise, but this question will likely solicit debate, arguments, polling, or extended discussion. If you feel that this question   can be improved and possibly reopened,  visit the help center  for guidance.
                            
                         
 
 
 Closed  9 years ago . 
 
 
 Almost every table in every database I've seen in my 7 years of development experience has an auto-incrementing primary key. Why is this? If I have a table of U.S. states where each state where each state must have a unique name, what's the use of an auto-incrementing primary key? Why not just use the state name as the primary key? Seems to me like an excuse to allow duplicates disguised as unique rows. 
 This seems plainly obvious to me, but then again, no one else seems to be arriving at and acting on the same logical conclusion as me, so I must assume there's a good chance I'm wrong. 
 Is there any real, practical reason we need to use auto-incrementing keys? 
 
 No.  
 In most cases, having a surrogate   key is an easy option: it can be guaranteed to be NOT NULL and 100% unique, something a lot of "natural" keys don't offer - names can change, so can SSN's and other items of information. 
 In the case of state abbreviations and names - if anything, I'd use the two-letter state abbreviation as a key.  
 A primary key  **must be**
: 
 
 unique (100% guaranteed! Not just "almost" unique) 
 NON NULL 
 
 A primary key should be: 
 
 stable if ever possible (not change - or at least not too frequently) 
 
 State two-letter codes definitely would offer this - that might be a candidate for a natural key. A key should also be small - an INT of 4 bytes is perfect, a two-letter CHAR(2) column just the same. I would  **not**
 ever use a VARCHAR(100) field or something like that as a key - it's just too clunky, most likely will change all the time - not a good key candidate. 
 So while you don't have to have an auto-incrementing "artificial" (surrogate) primary key, it's often quite a good choice, since no naturally occuring data is really up to the task of being a primary key, and you want to avoid having huge primary keys with several columns - those are just too clunky and inefficient. 
 
 **This question has been asked numerous times on SO and has been the subject of much debate over the years amongst (and between) developers and DBAs.**

 Let me start by saying that the premise of you question implies that one approach is universally superior to the other ... this is rarely the case in real life.  **Surrogate keys and natural keys both have their uses and challenges**
 - and it's important to understand what they are. Whichever choice you make in your system, keep in mind there is benefit to consistency - it makes the data model easier to understand and easier to develop queries and applications for. I also want to say that I tend to prefer surrogate keys over natural keys for PKs ... but that doesn't mean that natural keys can't sometimes be useful in that role. 
 **It is important to realize that surrogate and natural keys are NOT mutually exclusive - and in many cases they can complement each other**
. Keep in mind that a "key" for a database table is simply something that uniquely identifies a record (row). It's entirely possible for a single row to have multiple keys representing the different categories of constraints that make a record unique. 
 **A primary key, on the other hand**
, is a particular unique key that the database will use to enforce referential integrity and to represent a foreign key in other tables. There can only be a single primary key for any table. The  **essential quality**
 of a primary key is that it be 100% unique and non-NULL. A  **desirable quality**
 of a primary key is that it be stable (unchanging). While mutable primary keys are possible - they cause many problems for database that are better avoided (cascading updates, RI failures, etc). If you do choose to use a surrogate primary key for your table(s) - you should also consider creating unique constraints to reflect the existence of any natural keys. 
 **Surrogate keys are beneficial in cases where:**

 
 Natural keys are not stable (values may change over time) 
 Natural keys are large or unwieldy (multiple columns or long values) 
 Natural keys can change over time (columns added/removed over time) 
 
 **By providing a short, stable, unique value for every row, we can reduce the size of the database, improve its performance, and reduce the volatility of dependent tables which store foreign keys.**
 There's also the benefit of key  polymorphism , which I'll get to later. 
 **In some instances, using natural keys to express relationships between tables can be problematic**
. For instance, imagine you had a PERSON table whose natural key was  . What happens if you have some other table GRANT_PROPOSAL in which you need to store a reference to a Proposer, Reviewer, Approver, and Authorizer. You now need 12 columns to express this information. You also need to come up with a naming convention of some kind to identify which columns belong to which kind of individual. But what if your PERSON table required 6, or 8, or 24 columns to for a natural key? This rapidly becomes unmanageable.  **Surrogate keys resolve such problems by divorcing the semantics (meaning) of a key from its use as an identifier**
. 
 Let's also take a look at the example you described in your question.  
 
 Should the 2-character abbreviation of a state be used as the primary key of that table.  
 
 On the surface, it looks like the abbreviation field meets the requirements of a good primary key. It's relatively short, it is easy to propagate as a foreign key, it looks stable. Unfortunately, you don't control the set of abbreviations ... the postal service does. And here's an interesting fact: in 1973 the USPS changed the abbreviation of Nebraska from NB to NE to minimize confusion with New Brunswick, Canada.  **The moral of the story is that natural keys are often outside of the control of the database ... and they can change over time. Even when you think they cannot**
. This problem is even more pronounced for more complicated data like people, or products, etc. As businesses evolve, the definitions for what makes such entities unique can change. And this can create significant problems for data modelers and application developers. 
 **Earlier I mentioned that primary keys can support key polymorphism.**
 What does that mean? Well, polymorphism is  the ability of one type, A, to appear as and be used like another type, B . In databases, this concept refers to the ability to combine keys from different classes of entities into a single table. Let's look at an example. Imagine for a moment that you want have an audit trail in your system that identifies which entities were modified by which user on what date. It would be nice to create a table with the fields:  . Unfortunately, using natural keys, different entities have different keys. So now we need to create a separate  linking table  for each kind of entity ... and build our application in a manner where it understand the different kinds of entities and how their keys are shaped.  
 **Don't get me wrong. I'm not advocating that surrogate keys should ALWAYS be used. In the real world never, ever, and always are a dangerous position to adopt**
. One of the biggest drawbacks of surrogate keys is that they can result in tables that have foreign keys consisting of lots of "meaningless" numbers. This can make it cumbersome to interpret the meaning of a record since you have to join or lookup records from other tables to get a complete picture. It also can make a distributed database deployment more complicated, as assigning unique incrementing numbers across servers isn't always possible (although most modern database like Oracle and SQLServer mitigate this via sequence replication). 
 
 I think the use of the word "Primary", in the phrase "Primary" Key is in a real sense, misleading.  
 First, use the definition that a "key" is an attribute or set of attributes that must be unique within the table,  
 Then, having any key serves several often mutually inconsistent purposes.  
 **Purpose 1.**
 To use as joins conditions to one or many records in child tables which have a relationship to this parent table. (Explicitly or implicitly defining a Foreign Key in those child tables) 
 **Purpose 2.**
 (related) Ensuring that child records must have a parent record in the parent table (The child table FK must exist as Key in the parent table) 
 **Purpose 3**
.  To increase performance of queries that need to rapidly locate a specific record/row in the table.  
 **Purpose 4**
.  ( **Most Important from data consistency perspective**
!)  To ensure data consistency by preventing duplicate rows which represent the same logical entity from being inserted itno the table. (This is often called a "natural" key, and should consist of table (entity) attributes which are relatively invariant.) 
 Clearly, any non-meaningfull, non-natural key (like a GUID or an auto-generated integer is  **totally**
 incapable of satisfying Purpose 4. 
 But often, with many (most) tables, a totally natural key which can provide #4 will often consist of multiple attributes and be excessively wide, or so wide that using it for purposes #1, #2, or #3 will cause unacceptable performance consequencecs.  
 The answer is simple. Use both. Use a simple auto-Generating integral key for all Joins and FKs in other child tables, but ensure that every table that requires data consistency (very few tables don't) have an alternate natural unique key that will prevent inserts of inconsistent data rows... Plus, if you always have both, then all the objections against using a natural key (what if it changes? I have to change every place it is referenced as a FK) become moot, as you are not using it for that... You are only using it in the one table where it is a PK, to avoid inconsistent duplciate data...  
 The only time you can get away without both is for a completely stand alone table that participates in no relationships with other tables and has an obvious and reliable natural key.   
 
 In general, a numeric primary key will perform better than a string.  You can additionaly create unique keys to prevent duplicates from creeping in.  That way you get the assurance of no duplicates, but you also get the performance of numbers (vs. strings in your scenario). 
 In all likelyhood, the major databases have some performance optimizations for integer-based primary keys that are not present for string-based primary keys.  But, that is only a reasonable guess. 
 
 Yes, in my opinion every table needs an auto incrementing integer key because it makes both JOINs and (especially) front-end programming much, much, much easier.  Others feel differently, but this is over 20 years of experience speaking. 
 The single exception is small "code" or "lookup" tables in which I'm willing to substitute a short (4 or 5 character) TEXT code value.  I do this because the I often use a lot of these in my databases and it allows me to present a meaningful display to the user without having to look up the description in the lookup table or JOIN it into a result set.  Your example of a States table would fit in this category. 
 
 No, absolutely not. 
 Having a primary key which can't change is a good idea (UPDATE is legal for primary key columns, but in general potentially confusing and can create problems for child rows). But if your application has some other candidate which is more suitable than an auto-incrementing value, then you should probably use that instead. 
 Performance-wise, in general fewer columns are better, and particularly fewer indexes. If you have another column which has a unique index on it AND can never be changed by any business process, then it may be a suitable primary key. 
 Speaking from a MySQL (Innodb) perspective, it's also a good idea to use a "real" column as a primary key rather than an "artificial" one, as InnoDB always clusters the primary key and includes it in secondary indexes (that is how it finds the rows in them). This gives it potential to do useful optimisation with a primary key which it can't with any other unique index. MSSQL users often choose to cluster the primary key, but it can also cluster a different unique index. 
 EDIT: 
 But if it's a small database and you don't really care about performance or size too much, adding an unnecessary auto-increment column isn't that bad. 
 A non auto-incrementing value (e.g. UUID, or some other string generated according to your own algorithm) may be useful for distributed, sharded, or diverse systems where maintaining a consistent auto-incrementing ID is difficult (or impossible - think of a distributed system which continues to insert rows on both sides of a network partition). 
 
 I think there are two things that may explain the reason why auto-incrementing keys are sometimes used: 
 
 Space consideration; ok your state name doesn't amount to much, but the space it takes may add up. If you really want to store the state with its name as a primary key, then go ahead, but it will take more place. That may not be a problem in certain cases, and it sounds like a problem of olden days, but the habit is perhaps ingrained. And we programmers and DBA do love habits :D 
 Defensive consideration: i recently had the following problem; we have users in the database where the email is the key to all identification. Why not make the email the promary key? except suddenly border cases creep in where one guy must be there twice to have two different adresses, and nobody talked about it in the specs so the adress is not normalized, and there's this situation where two different emails must point to the same person and... After a while, you stop pulling your hairs out and add the damn integer id column  
 
 I'm not saying it's a bad habit, nor a good one; i'm sure good systems can be designed around reasonable primary keys, but these two points lead me to believe fear and habit are two among the culprits 
 
 It's a key component of relational databases. Having an integer relate to a state instead of having the whole state name saves a bunch of space in your database! Imagine you have a million records referencing your state table. Do you want to use 4 bytes for a number on each of those records or do you want to use a whole crapload of bytes for each state name? 
 
 Here are some practical considerations.   
 Most modern ORMs (rails, django, hibernate, etc.) work best when there is a single integer column as the primary key.   
 Additionally, having a standard naming convention (e.g. id as primary key and table_name_id for foreign keys) makes identifying keys easier. 
 