*** does-mysql-index-foreign-key-columns-automatically ***

 Does MySQL index foreign key columns automatically? 
 
 Yes, but only on  innodb . Innodb is currently the only shipped table format that has foreign keys implemented. 
 
 Apparently an index is created automatically as specified in  the link robert has posted . 
 
 InnoDB requires indexes on foreign keys and referenced keys so that foreign key checks can be fast and not require a table scan. In the referencing table, there must be an index where the foreign key columns are listed as the first columns in the same order.  **Such an index is created on the referencing table automatically if it does not exist.**
 (This is in contrast to some older versions, in which indexes had to be created explicitly or the creation of foreign key constraints would fail.) index_name, if given, is used as described previously. 
 
 InnoDB and FOREIGN KEY Constraints 
 
 Yes, see  InnoDB and FOREIGN KEY Constraints . 
 
 You don't get the index automatically if you do an ALTER TABLE (instead of CREATE TABLE), at least according to  the docs  (the link is for 5.1 but it's the same for 5.5): 
 
 [...] When you add a foreign key constraint to a table using ALTER TABLE, remember to create the required indexes first.  
 
 
 For those who are looking for quote from    docs : 
 
 MySQL requires indexes on foreign keys and referenced keys so that
  foreign key checks can be fast and not require a table scan. In the
  referencing table, there must be an index where the foreign key
  columns are listed as the first columns in the same order. Such an
  index is created on the referencing table automatically if it does not
  exist. This index might be silently dropped later, if you create
  another index that can be used to enforce the foreign key constraint.
  index_name, if given, is used as described previously. 
 
 
 As stated it does for InnoDB. At first I thought it was strange that many other (in particular MS SQL and DB2) doesn't. TableSpace scans are only better than index scans when there are very few table rows - so for the vast majority of cases a foreign key would want to be indexed. Then it kind of hit me - this doesn't necessarily mean it has to be a stand alone (one column) index - where it is in MySQL's automatic FK Index. So, may be that is the reason MS SQL, DB2 (Oracle I'm not sure on) etc leave it up to the DBA; after all multiple indexes on large tables can cause issues with performance and space. 
 
 Yes,   provide this. You can put a foreign key name after   clause or leave it to let MySQL to create a name for you. MySQL automatically creates an index with the   name. 
 
 
 It's not possible to get index key automatically use 
 
 Name of the table which you have created for example photographs and FOREIGN KEY for example  . The code should be like this 
 
 