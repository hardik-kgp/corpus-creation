*** does-sqlalchemy-save-order-when-adding-objects-to-session ***

 Does this assert always pass or not?  In other words, does SQLAlchemy save the order (in generating INSERT queries) when adding new objects to session? 
 
 None, in production I'm using postgresql, sqlite is for testing. 
 
 After looking a bit at the SQLAlchemy source, it looks like   records when it was inserted:  https://github.com/zzzeek/sqlalchemy/blob/master/lib/sqlalchemy/orm/session.py#L1719 
 The relevant snippet: 
 
 And this is called from   =>   =>   =>  . 
 It's then used in   when saving:  https://github.com/zzzeek/sqlalchemy/blob/master/lib/sqlalchemy/orm/persistence.py#L859 
 Unfortunately, this is only implementation-level proof. I couldn't find anything in the documentation that guarantees it... 
 **Update**
:
I've since looked a bit more into this, it turns out there's a concept called  Unit of Work  in SQLAlchemy that somewhat defines the order during a flush:  http://www.aosabook.org/en/sqlalchemy.html  (search for Unit of Work). 
 Within the same class, the order is indeed determined by the order that   was called. However, you may see different orderings in the INSERTs between different classes. If you add object   of type   and later add object   of type  , but   turns out to have  a foreign key to  , you'll see an INSERT for   before the INSERT for  . 
 
 No, it does them when you commit, not when you add. 
 