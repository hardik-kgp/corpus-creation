*** dynamic-or-column-ized-tsvector-index ***

 I'm creating custom forum software for a site I'm building, which includes 2 tables (that are relevant to this question):   and  .  A post belongs to a topic, and the topic contains the subject, while each post contains the body. 
 Here is the basic table structures with the columns relevant to my question: 
 
 Here are my two options on building fulltext indexes. 
 **Option 1:**
 Create dynamic tsvector indexes on title/body columns. 
 
 **Option 2:**
 Create extra columns to hold tsvector-ized title/body data, and add indexes on those. 
 
 I'm debating between the two since option 1 will save me disk space, but provide slower searches, and option 2 will require additional disk space while providing faster searches. 
 Let's pretend there are 20 new topics & 100 new posts per day. Which would you choose?  What if the number of topics/posts per day way twice that?  Five times that?  Ten times?  Does your decision of one vs. the other change? 
 
 Using  **Option 1**
 will not make your searches more slow. 
 The   index will be used regardless of whether you created in on instantiated column or computed expression. 
 You just need to change the query syntax: 
 
 in the first case, or 
 
 in the second case. 
 You probably can save a little time when using   over the instantiated column. 
 
 
 Let's pretend there are 20 new topics
  & 100 new posts per day. Which would
  you choose? What if the number of
  topics/posts per day way twice that?
  Five times that? Ten times? Does your
  decision of one vs. the other change? 
 
 That's about 36,000 posts a year. Doesn't matter. Probably doesn't matter with ten times that, even on a cheap machine. 
 However, you might want a  third  table containing an explicit tsvector combining topic and body-text together. You can then use the built-in weighting system and run one search to provide the sort of search people generally expect on forums etc. That will mean writing custom triggers to update your tsvector when either source table is changed. 
 
 Normally I'd go with storing the tsvector in a field, because that will also give you usable access to things like headline() and rank(). 
 