*** dynamic-table-creation-and-orm-mapping-in-sqlalchemy ***

 I'm fairly new to using relational databases, so I prefer using a good ORM to simplify things.  I spent time evaluating different Python ORMs and I think SQLAlchemy is what I need.  However, I've come to a mental dead end. 
 I need to create a new table to go along with each instance of a player I create in my app's player table. I think I know how to create the table by changing the name of the table through the metadata then calling the create function, but I have no clue on how to map it to a new dynamic class. 
 Can someone give me some tips to help me get past my brain freeze? Is this even possible?  
 Note: I'm open to other ORMs in Python if what I'm asking is easier to implement.Just show me how :-) 
 
 We are absolutely spoiled by SqlAlchemy.   
What follows below is taken directly from the  tutorial ,  
and is really easy to setup and get working. 
 And because it is done so often,  
Mike Bayer has made this even easier  
with the  all-in-one "declarative" method . 
 Setup your environment (I'm using the SQLite in-memory db to test): 
 
 Define your table: 
 
 If you have logging turned on, you'll see the SQL that SqlAlchemy creates for you. 
 Define your class: 
 
 Map the class to your table: 
 
 Create a player: 
 
 That's it, you now have a your player table.   
Also, the SqlAlchemy googlegroup is great.   
Mike Bayer is very quick to answer questions. 
 
 Maybe look at  SQLSoup , which is layer over SQLAlchemy. 
 You can also create the tables using plain SQL, and to dynamically map, use these libraries if they already don't have create table function. 
 Or alternatively create a dynamic class and map it: 
 
 where BaseTable can be any Python class which you want all your table classes to inherit from, e.g. such   class may have some utility or common methods, e.g. basic CRUD methods: 
 
 Otherwise you need not pass any bases to  . 
 
 you can use declarative method  for dynamically creating tables in database 
 
 
 It's a very old question. Anyway if you prefer ORM, it's quite easy to generate table class with type: 
 
 Making a class factory, it's easy to assign names to a class and database table. 
 
 I faced the same problem when I was trying to automate simple CRUD tasks using SQLAlchemy.
Here is simple explanation and some code:   http://www.devx.com/dbzone/Article/42015 
 
 maybe i didn't quite understand what you want, but this recipe create identical column in different __tablename__ 
 
 info in example sqlalchemy  
 