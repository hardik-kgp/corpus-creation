*** dynamodb-range-vs-global-secondary-index ***

 Let's say I have a user table with   and   attributes. I would like to be able to query on both parameters. If I understand the documentation correctly, there are two ways of doing this with DynamoDB: 
 
 Define a hash+range primary key using   as the hash and   as the range. 
 Define a hash-only primary key using   and define a global secondary index using  . 
 
 What are the benefits and drawbacks of each approach? 
 
 
 Define a hash+range primary key using id as the hash and timestamp as
  the range. 
 
 When you make   your hash key and   your range key, effectively, you are allowing both of them to form up a 'composite primary key'.  
 In order words, your DynamoDB schema would allow the following data (notice that 'john' is repeated three times?) 
 
 If this is not what you intended for, then hash + range on   and   respectively is not what you are looking for. 
 
 Define a hash-only primary key using id and define a global secondary
  index using timestamp. 
 
 Using a hash-only primary key on  , you are indicating that the   attribute should be unique. Then by applying   hash-only on  , you would be able to query for a list of   pertaining to a particular  . 
 The  **benefits**
 to this approach is that, it is definitely the correct solution for your use case. #1 is misuse of range key (unless you are intending to ensure at the application level   is not duplicated which is probably a bad idea). 
 The  **drawback**
 to using   are: 
 
 There can only be a maximum of 5   per table, so choose wisely what you need to index as   can only be specified during table creation and cannot be altered. 
  will cost you additional money as you will need to assign Provisioned Throughput to it. 
  is eventually consistent, meaning that DynamoDB does not guarantee that the moment data associated to the table's hash key is written into DB, the data's   hash key immediately becomes available for querying. The document states that this is usually immediate, but can be the case that it could take up to seconds for the   hash key to become available. 
 
 
 This answer  may be of some use, but you're right about the two ways that you could accomplish it. 
 Assuming that you use   as your hash key, then in order to retrieve an item using only a timestamp, you'll need a global secondary index.  You can still make   your the range key, which will be useful in that DynamoDB will use it to sort the results your queries by  .   
 The main drawback of using a global secondary index is that you'll need additional provisioned throughput on the table. 
 
 I have a similar interest and was considering creating a secondary index on a portion of the timestamp (e.g., day or hour) as the HASH and the Id as the RANGE to allow for a query against a particular time slice, but this would force all records within a time slice to be in the same partition for the index.   
 For being able to query recent data vs. historical data, Amazon recommends a multi-table design approach - see  https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/bp-time-series.html . 
 