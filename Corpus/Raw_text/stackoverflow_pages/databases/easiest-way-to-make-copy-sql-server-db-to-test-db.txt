*** easiest-way-to-make-copy-sql-server-db-to-test-db ***

 What is the easiest way to take a SQL Server database and make a test copy of it? 
 I have looked through some existing topics but not sure if there is an easier way. I have database publisher. I want to be able to keep both database on the same server, potentially. 
 Update: I used the Microsoft SQL Server Publishing Wizard to script to file, create a new database, add "use db", and execute the script. This seemed to work okay. The attach/detach is not recommended because it leaves links back to the original location if it is a full text search database or if the log is missing. 
 
 I always just back it up then restore to a different name/file set;  How to: Restore a Database to a New Location and Name (Transact-SQL) 
or you can creater an empty db & use the restore "wizard" enabling OVERWRITE and changing the restore file paths. 
 
 I would just create the database, then use the "Import Data" task in SS Mgmt Studio to copy the data over.  Or you could back up the production database and restore it into the test database. 
 Maybe not the absolute easiest ways, but pretty low-drama.  You can also script the data to a file and play that back into a new database -- that takes awhile, but it's handy for things like version control, and it's human (well, "developer")-readable. 
 
 Detatch the database (means taking it offline), copy the mdf file, and then re-attach both the original and the copy. 
 
 I often have Test and Live databases with the exact same schema. They usually have stored procedures with changes depending on the state of my development changes. So I can't always just backup and restore.  I wrote a query that loops through all tables in a database, deletes the data. Then loops again and inserts from a live database.
In the below, my test database is called WorkflowTest and my live is called Workflow, but you can just replace the database names in the variables. Just make sure to connect to the TEST database. 
 But the table names and columns are completely arbitrary.
I loop multiple times because I don't want to worry about foreign key constraints. Some deletes/inserts will fail because it expects data to exist in another table.  
 I find that all 45 or so of my tables get fully repopulated in about 2-3 loops. 
 During the Insert loop, it first checks if the table has an identity column by attempting to turn IDENTITY_INSERT on. If this doesn't fail, then it will build out an insert statement with a preceding IDENTITY_INSERT On and a following IDENTITY_INSERT off. It has to be done in the same EXEC statement because the commands in the EXEC fall out of scope after they are executed. 
 In hind-sight, I guess I could have scripted out all of my test stored procedures as alter statements, restored the test database from a backup of the live one, then executed my alter statements. But I find that user security settings don't restore properly, so sometimes that can be a hassle too. 
 
 