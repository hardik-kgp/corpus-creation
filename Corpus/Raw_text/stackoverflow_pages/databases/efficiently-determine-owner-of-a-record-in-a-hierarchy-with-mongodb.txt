*** efficiently-determine-owner-of-a-record-in-a-hierarchy-with-mongodb ***

 I am trying to achieve the following: 
 
 Select all the records that I own, where ownership is objects I have created OR objects a user I manage has created, where user management can be in a hierarchy of users managing users 
 
 Ownership is clearly straight forward and could be handled by a simple id corresponding to the owner. The hierarchy of user management has me a little stumped to perform without heavy lifting through large lists of IDs (you can obviously just find every user that is managed and list every object created by any of those users using an IN clause or similar).  
 Ideally this all happens in a single query so normal paging and conditions can occur. 
 I was thinking that there might have been some maths to get it done - having IDs that can somehow be hashed to determine if they are owned by anyone in the chain of command.  
 Any references for this sort of thing? 
 Am I missing something obvious? 
 Using MongoDB if that makes a difference, but happy to think about other databases for inspiration. 
 **UPDATE:**
 
have created a MongoDB collection with 1,000,000 records to get some solid data on exactly what constitutes a manageable number of parameters for an IN clause on a query. Will report back when I have some concrete information.  
 **ANALYSIS:**

 Using ruby-mongo-driver and the ruby benchmark lib. 
 MongoDB Collection with 1039944 records 
 Records are defined as: 
 
 With randomly generated values for all fields. 
 The Owner field has an index.  
 Running queries with the following conditions: 
 
 Results: 
 
 Even with a list of 10k ids in the query, performance is pretty snappy.  
 
 If you are trying to "select" records from MongoDB based on a "column" having a value from a set of possible values that you'd need a join against a user management table to determine, then NoSQL is working against you...  
 If the list of user IDs is still manageable you can do a   type of query (after having first determined the list): 
 
 The NoSQL way is probably to denormalize things, for example by including not just the ownerId in the document, but the complete path up the management hierarchy: 
 
 Of course, that will need to be updated when the user hierarchy gets shifted around. 
 