*** elasticsearch-query-to-return-all-records ***

 I have a small database in Elasticsearch and for testing purposes would like to pull all records back.  I am attempting to use a URL of the form... 
 
 Can someone give me the URL you would use to accomplish this, please? 
 
 I think lucene syntax is supported so: 
 
 size defaults to 10, so you may also need   to get more than 10 items. (where BIGNUMBER equals a number you believe is bigger than your dataset) 
 BUT, elasticsearch documentation  suggests  for large result sets, using the scan search type. 
 EG: 
 
 and then keep requesting as per the documentation link above suggests. 
 EDIT:   Deprecated in 2.1.0. 
  does not provide any benefits over a regular   request sorted by  .  link to elastic docs  (spotted by @christophe-roussy) 
 
 
 **Note the size param**
, which increases the hits displayed from the default (10) to 1000 per shard. 
 http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-request-from-size.html 
 
 elasticsearch(ES) supports both a GET or a POST request for getting the data from the ES cluster index.  
 When we do a GET: 
 
 When we do a POST: 
 
 I would suggest to use a UI plugin with elasticsearch  http://mobz.github.io/elasticsearch-head/ 
This will help you get a better feeling of the indices you create and also test your indices.   
 
 
 **Note:**
 The answer relates to an older version of Elasticsearch  . Versions released since then have an updated syntax. Please refer to other answers that may provide a more accurate answer to the latest answer that you are looking for. 
 
 The query below would return the NO_OF_RESULTS you would like to be returned.. 
 
 Now, the question here is that you want  **all**
 the records to be returned. So naturally, before writing a query, you wont know the value of  **NO_OF_RESULTS**
.  
 How do we know how many records exist in your document? Simply type the query below 
 
 This would give you a result that looks like the one below  
 
 The result  **total**
 tells you how many records are available in your document. So, that's a nice way to know the value of  **NO_OF RESULTS**

 
 Search all types in all indices 
 
 Search all types in the foo index 
 
 Search all types in the foo1 and foo2 indices 
 
 Search all types in any indices beginning with f 
 
 Search types user and tweet in all indices 
 
 This is the best solution I found using python client 
 
 https://gist.github.com/drorata/146ce50807d16fd4a6aa 
 Using java client  
 
 https://www.elastic.co/guide/en/elasticsearch/client/java-api/current/java-search-scrolling.html 
 
 use   also to get statistics about all your aliases.. like size and number of elements per alias, that's very useful and provides helpful information 
 
 If you want to pull many thousands of records then... a few people gave the right answer of using 'scroll' (Note: Some people also suggested using "search_type=scan". This was deprecated, and in v5.0 removed. You don't need it) 
 Start with a 'search' query, but specifying a 'scroll' parameter (here I'm using a 1 minute timeout): 
 
 That includes your first 'batch' of hits. But we are not done here. The output of the above curl command would be something like this: 
 {"_scroll_id":"c2Nhbjs1OzUyNjE6NU4tU3BrWi1UWkNIWVNBZW43bXV3Zzs1Mzc3OkhUQ0g3VGllU2FhemJVNlM5d2t0alE7NTI2Mjo1Ti1TcGtaLVRaQ0hZU0FlbjdtdXdnOzUzNzg6SFRDSDdUaWVTYWF6YlU2Uzl3a3RqUTs1MjYzOjVOLVNwa1otVFpDSFlTQWVuN211d2c7MTt0b3RhbF9oaXRzOjIyNjAxMzU3Ow==","took":109,"timed_out":false,"_shards":{"total":5,"successful":5,"failed":0},"hits":{"total":22601357,"max_score":0.0,"hits":[]}} 
 It's important to have _scroll_id handy as next you should run the following command: 
 
 However, passing the scroll_id around is not something designed to be done manually. Your best bet is to write code to do it. e.g. in java:  
 
 Now LOOP on the last command use SearchResponse to extract the data. 
 
 Elasticsearch will get  **significant**
 slower if you just add some big number as size, one method to use to get all documents is using scan and scroll ids. 
 https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-scroll.html 
 In Elasticsearch v7.2, you do it like this: 
 
 The results from this would contain a _scroll_id which you have to query to get the next 100 chunk. 
 
 
 Simple! You can use   and   parameter! 
 
 then you change the   gradually until you get all of the data. 
 
 The best way to adjust the size is using size= **number**
 in front of the URL  
 
 Note: maximum value which can be defined in this size is 10000. For any value above ten thousand it expects you to use scroll function which would minimise any chances of impacts to performance. 
 
 http://localhost:9200/foo/_search/ ? **size**
=1000&pretty=1 
 you will need to specify size query parameter as the default is 10 
 
 You can use the   API to get the value for the   parameter: 
 
 Returns  . Extract value 'X' and then do the actual query: 
 
 
 **size**
 param increases the hits displayed from from the default(10) to 500. 
 http://localhost:9200/[indexName]/_search?pretty=true&size=500&q=*:* 
 Change the  **from**
 step by step to get all the data. 
 http://localhost:9200/[indexName]/_search?size=500&from=0 
 
 For Elasticsearch 6.x 
 Request:  
 Response: In Hits-> total, give the count of the docs 
 
 
 
 
 By default Elasticsearch return 10 records so size should be provided explicitly. 
 Add size with request to get desire number of records.  
 http://{host}:9200/{index_name}/_search?pretty=true&size=(number of records) 
 Note : 
  Max page size can not be more than index.max_result_window index setting which defaults to 10,000. 
 
 The official documentation provides the answer to this question! you can find it  here .  
 
 You simply replace size (1) with the number of results you want to see! 
 
 From Kibana DevTools its: 
 
 
 A simple solution using the python package  elasticsearch-dsl : 
 
 See also  https://elasticsearch-dsl.readthedocs.io/en/latest/api.html#elasticsearch_dsl.Search.scan  . 
 
 The maximum result which will return by elasticSearch is 10000 by providing the size   
 
 After that, you have to use Scroll API for getting the result and get the _scroll_id value and put this value in scroll_id 
 
 
 To return all records from all indices you can do: 
 
 Output: 
 
 
 
 
 None except @Akira Sendoh has answered how to actually get ALL docs. But even that solution crashes my  **ES 6.3**
 service without logs. The only thing that worked for me using the low-level   library was through  scan helper  that uses   api: 
 
 However, the cleaner way nowadays seems to be through   library, that offers more abstract, cleaner calls, e.g:  http://elasticsearch-dsl.readthedocs.io/en/latest/search_dsl.html#hits 
 
 If still someone is looking for all the data to be retrieved from Elasticsearch like me for some usecases, here is what I did. Moreover, all the data means, all the indexes and all the documents types. I'm using Elasticsearch 6.3 
 
 Elasticsearch reference 
 
 this is the query to accomplish what you want,
(I am suggesting to use Kibana, as it helps to understand queries better) 
 
 to get all records you have to use "match_all" query. 
 size is the no of records you want to fetch (kind of limit).
by default, ES will only return 10 records 
 from is like skip, skip first 3 records. 
 If you want to fetch exactly all the records, just use the value from the "total" field 
from the result once you hit this query from Kibana and the use it with "size". 
 
 You can  use size=0 this will return you all the documents 
example 
 
 