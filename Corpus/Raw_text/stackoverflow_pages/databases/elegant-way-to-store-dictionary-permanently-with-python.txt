*** elegant-way-to-store-dictionary-permanently-with-python ***

 Currently expensively parsing a file, which generates a dictionary of ~400 key, value pairs, which is seldomly updated. Previously had a function which parsed the file, wrote it to a text file in dictionary syntax (ie.  ) etc, and copied and pasted it into another function whose sole purpose was to return that parsed dictionary.  
 Hence, in every file where I would use that dictionary, I would import that function, and assign it to a variable, which is now that dictionary. Wondering if there's a more elegant way to do this, which does not involve explicitly copying and pasting code around? Using a database kind of seems unnecessary, and the text file gave me the benefit of seeing whether the parsing was done correctly before adding it to the function. But I'm open to suggestions. 
 
 Why not dump it to a JSON file, and then load it from there where you need it? 
 
 Loading from JSON is fairly efficient. 
 Another option would be to use  , but unlike JSON, the files it generates aren't human-readable so you lose out on the visual verification you liked from your old method. 
 
 Why mess with all these serialization methods? It's already written to a file as a Python dict (although with the unfortunate name 'dict').  Change your program to write out the data with a better variable name - maybe 'data', or 'catalog', and save the file as a Python file, say data.py.  Then you can just import the data directly at runtime without any clumsy copy/pasting or JSON/shelve/etc. parsing: 
 
 
 JSON is probably the right way to go in many cases; but there might be an alternative. It looks like your keys and your values are always strings, is that right? You might consider using  / . These are "databases" but they act almost exactly like dictionaries. They're great for cheap data persistence. 
 
 
 If the keys are all strings, you can use the  shelve  module 
 
 A  shelf  is a persistent, dictionary-like object. The difference with
  “dbm” databases is that the values (not the keys!) in a shelf can be
  essentially arbitrary Python objects — anything that the pickle module
  can handle. This includes most class instances, recursive data types,
  and objects containing lots of shared sub-objects. The keys are
  ordinary strings. 
 
  would be a good choice if you need to use the data from other languages 
 
 If storage efficiency matters, use Pickle or CPickle(for execution performance gain). As Amber pointed out, you can also dump/load via Json. It will be human-readable, but takes more disk. 
 
 I suggest you consider using the   module since your data-structure is a mapping.
That was my  answer  to a similar question titled  If I want to build a custom database, how could I?  There's also a bit of sample code in another  answer  of mine promoting its use for the question  How to get a object database? 
 ActiveState has a highly rated  PersistentDict  recipe which supports csv, json, and pickle output file formats. It's pretty fast since all three of those formats are implement in C (although the recipe itself is pure Python), so the fact that it reads the whole file into memory when it's opened might be acceptable. 
 
 on the JSON direction there is also something called simpleJSON.  My first time using json in python the json library didnt work for me/ i couldnt figure it out.  simpleJSON was...easier to use 
 
 JSON (or YAML, or whatever) serialisation is probably better, but if you're already writing the dictionary to a text file in python syntax, complete with a variable name binding, you could just write that to a .py file instead. Then that python file would be importable and usable as is. There's no need for the "function which returns a dictionary"  approach, since you can directly use it as a global in that file. e.g. 
 
 rather than: 
 
 The only difference is that   gives you a fresh copy of the dictionary every time, whereas  [1] is a single shared object. This may matter if you're modifying the dictionary in your program after retrieving it, but you can always use   or   to create a new copy if you need to modify one independently of the others. 
 
 [1]  ,  ,  ,  ,  , etc are generally viewed as bad variable names. The reason is that these are already defined as built-ins, and are used very commonly. So if you give something a name like that, at the least it's going to cause cognitive-dissonance for people reading your code (including you after you've been away for a while) as they have to keep in mind that "  doesn't mean what it normally does here". It's also quite likely that at some point you'll get an infuriating-to-solve bug reporting that   objects aren't callable (or something), because some piece of code is trying to use the  type   , but is getting the dictionary object you bound to the name   instead. 
 