*** enable-the-query-cache-in-postgresql-to-improve-performance ***

 My application is very database intensive so I'm trying to reduce the load on the database. I am using PostgreSQL as rdbms and python is the programming language. 
 To reduce the load I am already using a caching mechanism in the application. The caching type I used is a server cache, browser cache. 
 Currently I'm tuning the PostgreSQL query cache to get it in line with the characteristics of queries being run on the server. 
 Questions: 
 
 Is it possible to fine tune query cache on a per database level?      
 Is it possible to fine tune query cache on a per table basis? 
 please provide tutorial to learn query cache in PostgreSQL. 
 
 
 Tuning PostgreSQL is far more than just tuning caches. In fact, the primary high level things are "shared buffers" (think of this as the main data and index cache), and the work_mem. 
 The shared buffers help with reading and writing. You want to give it a decent size, but it's for the entire cluster.. and you can't really tune it on a per table or especially query basis. Importantly, it's not really storing query results.. it's storing tables, indexes and other data. In an ACID compliant database, it's not very efficient or useful to cache query results.  
 The "work_mem" is used to sort query results in memory and not have to resort to writing to disk.. depending on your query, this area could be as important as the buffer cache, and easier to tune. Before running a query that needs to do a larger sort, you can issue the set command like "SET work_mem = '256MB';" 
 As others have suggested you can figure out WHY a query is running slowly using "explain". I'd personally suggest learning the "access path" postgresql is taking to get to your data. That's far more involved and honestly a better use of resources than simply thinking of "caching results". 
 You can honestly improve things a lot with data design as well and using features such as partitioning, functional indexes, and other techniques. 
 One other thing is that you can get better performance by writing better queries.. things like "with" clauses can prevent postgres' optimizer from optimizing queries fully.
The optimizer itself also has parameters that can be adjusted-- so that the DB will spend more (or less) time optimizing a query prior to executing it.. which can make a difference. 
 You can also use certain techniques to write queries to help the optimizer. One such technique is to use bind variables (colon variables)--- this will result in the optimizer getting the same query over and over with different data passed in. This way, the structure doesn't have to be evaluated over and over.. query plans can be cached in this way. 
 Without seeing some of your queries, your table and index designs, and an explain plan, it's hard to make specific recommendation.  
 In general, you need to find queries that aren't as performant as you feel they should be and figure out where the contention is. Likely it's disk access, however,the cause is ultimately the most important part.. is it having to go to disk to hold the sort? Is it internally choosing a bad path to get to the data, such that it's reading data that could easily be eliminated earlier in the query process...  I've been an oracle certified DBA for over 20 years, and PostgreSQL is definitely different, however, many of the same techniques are used when it comes to diagnosing a query's performance issues. Although you can't really provide hints, you can still rewrite queries or tune certain parameters to get better performace.. in general, I've found postgresql to be easier to tune in the long run. If you can provide some specifics, perhaps a query and explain info, I'd be happy to give you specific recommendations. Sadly, though, "cache tuning" is likely to provide you the speed you're wanting all on its own. 
 
 I developed a system for caching results, to speed-up results queried from a web-based solution. I reproduced below in essence what it did: 
 The following are the generic caching handling tables and functions. 
 
 The following is an example of how to use the tables and functions above, for a given view named   with a field   to be selected within a range of integer values. You would replace all the following with your particular needs, and replace   with either a table, a view, or a function. Also replace the filtering parameters as required. 
 
 Example: Retrieve rows from 1 to 2000 from cached my_view results filtered by  . Run a first time and the results of the query will be cached into table  , and the first 2000 records will be returned. Run it again shortly after and the results will be retrieved from the table   directly without executing the query. 
 
 