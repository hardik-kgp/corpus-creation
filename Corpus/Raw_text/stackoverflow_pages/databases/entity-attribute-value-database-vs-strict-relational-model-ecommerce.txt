*** entity-attribute-value-database-vs-strict-relational-model-ecommerce ***

 It is safe to say that the  EAV/CR  database model is bad.  That said,  
 Question:  **What database model, technique, or pattern should be used to deal with "classes" of attributes describing e-commerce products which can be changed at run time?**
  
 In a good E-commerce database, you will store classes of options (like TV resolution then have a resolution for each TV, but the next product may not be a TV and not have "TV resolution").  How do you store them, search efficiently, and allow your users to setup product types with variable fields describing their products?  If the search engine finds that customers typically search for TVs based on console depth, you could add console depth to your fields, then add a single depth for each tv product type at run time. 
 There is a nice common feature among good e-commerce apps where they show a set of products, then have "drill down" side menus where you can see "TV Resolution" as a header, and the top five most common TV Resolutions for the found set.  You click one and it only shows TVs of that resolution, allowing you to further drill down by selecting other categories on the side menu.  These options would be the dynamic product attributes added at run time. 
 **Further discussion:**

 So long story short,  **are there any links out on the Internet or model descriptions that could "academically" fix the following setup?**
  I thank Noel Kennedy for suggesting a category table, but the need may be greater than that.  I describe it a different way below, trying to highlight the significance.  I may need a viewpoint correction to solve the problem, or I may need to go deeper in to the EAV/CR. 
 Love the positive response to the EAV/CR model.  My fellow developers all say what Jeffrey Kemp touched on below: "new entities must be modeled and designed by a professional" (taken out of context, read his response below).  The problem is: 
 
 entities add and remove attributes weekly    (search keywords dictate future attributes) 
 new entities arrive weekly    (products are assembled from parts) 
 old entities go away weekly    (archived, less popular, seasonal) 
 
 The customer wants to add attributes to the products for two reasons: 
 
 department / keyword search / comparison chart between like products 
 consumer product configuration before checkout 
 
 The attributes must have significance, not just a keyword search.  If they want to compare all cakes that have a "whipped cream frosting", they can click cakes, click birthday theme, click whipped cream frosting, then check all cakes that are interesting knowing they all have whipped cream frosting.  This is not specific to cakes, just an example. 
 
 There's a few general pros and cons I can think of, there are situations where one is better than the other: 
 **Option 1, EAV Model:**

 
 Pro: less time to design and develop a simple application 
 Pro: new entities easy to add (might even
be added by users?) 
 Pro: "generic" interface components 
 Con: complex code required to validate simple data types 
 Con: much more complex SQL for simple
reports 
 Con: complex reports can become almost
impossible 
 Con: poor performance for large data sets 
 
 **Option 2, Modelling each entity separately:**

 
 Con: more time required to gather
requirements and design 
 Con: new entities must be modelled and
designed by a professional 
 Con: custom interface components for each
entity 
 Pro: data type constraints and validation simple to implement 
 Pro: SQL is easy to write, easy to
understand and debug 
 Pro: even the most complex reports are relatively simple 
 Pro: best performance for large data sets 
 
 **Option 3, Combination (model entities "properly", but add "extensions" for custom attributes for some/all entities)**

 
 Pro/Con: more time required to gather requirements and design than option 1 but perhaps not as much as option 2 * 
 Con: new entities must be modelled and designed by a professional 
 Pro: new attributes might be easily added later on 
 Con: complex code required to validate simple data types (for the custom attributes) 
 Con: custom interface components still required, but generic interface components may be possible for the custom attributes 
 Con: SQL becomes complex as soon as any custom attribute is included in a report 
 Con: good performance generally, unless you start need to search by or report by the custom attributes 
 
 *  I'm not sure if Option 3 would necessarily save any time in the design phase. 
 Personally I would lean toward option 2, and avoid EAV wherever possible. However, for some scenarios the users need the flexibility that comes with EAV; but this comes with a great cost. 
 
 
 It is safe to say that the EAV/CR database model is bad. 
 
 No, it's not.  It's just that they're an inefficient usage of relational databases.  A purely key/value store works great with this model. 
 Now, to your real question: How to store various attributes and keep them searchable? 
 Just use EAV.  In your case it would be a single extra table.  index it on both attribute name and value, most RDBMs would use prefix-compression to on the attribute name repetitions, making it really fast and compact. 
 EAV/CR gets ugly when you use it to replace 'real' fields.  As with every tool, overusing it is 'bad', and gives it a bad image. 
 
 
// At this point, I'd like to take a moment to speak to you about the Magento/ Adobe PSD format .
// Magento/ PSD  is not a good ecommerce platform/ format . Magento/ PSD  is not even a bad ecommerce platform/ format . Calling it such would be an
// insult to other bad ecommerce platform/ formats , such as Zencart or OsCommerce. No, Magento/ PSD  is an abysmal ecommerce platform/ format . Having
// worked on this code for several weeks now, my hate for Magento/ PSD  has grown to a raging fire
// that burns with the fierce passion of a million suns.
 
 http://code.google.com/p/xee/source/browse/trunk/XeePhotoshopLoader.m?spec=svn28&r=11#107 
 The internal models are wacky at best, like someone put the schema into a boggle game, sealed that and put it in a paint shacker... 
 Real world: I'm working on a midware fulfilment app and here are one the queries to get address information. 
 
 Exacts address information for an order, lazily 
 -- 
 **Summary:**
 Only use Magento if: 
 
 You are being given large sacks of money 
 You must 
 Enjoy pain 
 
 
 I'm surprised nobody mentioned NoSQL databases. 
 I've never practiced NoSQL in a production context (just tested MongoDB and was impressed)  but the whole point of NoSQL is being able to save items with varying attributes in the same "document". 
 
 Where performance is not a major requirement, as in an ETL type of application, EAV has another distinct advantage: differential saves. 
 I've implemented a number of applications where an over-arching requirement was the ability to see the history of a domain object from its first "version" to it's current state.  If that domain object has a large number of attributes, that means each change requires a new row be inserted into it's corresponding table (not an update because the history would be lost, but an insert).  Let's say this domain object is a Person, and I have 500k Persons to track with an average of 100+ changes over the Persons life-cycle to various attributes.  Couple that with the fact that rare is the application that has only 1 major domain object and you'll quickly surmize that the size of the database would quickly grow out of control. 
 An easy solution is to save only the differential changes to the major domain objects rather than repeatedly saving redundant information. 
 All models change over time to reflect new business needs. Period. Using EAV is but one of the tools in our box to use; but it should never be automatically classified as "bad". 
 
 I'm struggling with the same issue. It may be interesting for you to check out the following discussion on two existing ecommerce solutions: Magento (EAV) and Joomla (regular relational structure):
 https://forum.virtuemart.net/index.php?topic=58686.0 
 It seems, that Magento's EAV performance is a real showstopper. 
 That's why I'm leaning towards a normalized structure. To overcome the lack of flexibility I'm thinking about adding some separate data dictionary in the future (XML or separate DB tables) that could be edited, and based on that, application code for displaying and comparing product categories with new attributes set would be generated, together with SQL scripts. 
 Such architecture seems to be the sweetspot in this case - flexible and performant at the same time. 
 The problem could be frequent use of ALTER TABLE in live environment. I'm using Postgres, so its MVCC and transactional DDL will hopefully ease the pain. 
 
 I still vote for modeling at the lowest-meaningful atomic-level for EAV.  Let standards, technologies and applications that gear toward certain user community to decide content models, repetition needs of attributes, grains, etc.   
 
 If it's just about the product catalog attributes and hence validation requirements for those attributes are rather limited, the only real downside to EAV is query performance and even that is only a problem when your query deals with multiple "things" (products) with attributes, the performance for the query "give me all attributes for the product with id 234" while not optimal is still plenty fast.  
 One solution is to use the SQL database / EAV model only for the admin / edit side of the product catalog and have some process that denormalizes the products into something that makes it searchable. Since you already have attributes and hence it's rather likely that you want faceting, this something could be Solr or ElasticSearch. This approach avoids basically all downsides to the EAV model and the added complexity is limited to serializing a complete product to JSON on update. 
 
 EAV has many drawbacks: 
 
 Performance degradation over time
Once the amount of data in the application grows beyond a certain size, the retrieval and manipulation of that data is likely to become less and less efficient. 
 The SQL queries are very complex and difficult to write. 
 Data Integrity problems.
You can't define foreign keys for all the fields needed. 
 You have to define and maintain your own metadata. 
 
 
 I have a slightly different problem: instead of many attributes with sparse values (which is possibly a good reason to use EAV), I want to store something more like a spreadsheet. The columns in the sheet can change, but within a sheet all cells will contain data (not sparse). 
 I made a  small set of tests  to benchmark two designs: one using EAV, and the other using a Postgres ARRAY to store cell data. 
 **EAV**

 
 **Array**

 
 Both schemas have indexes on appropriate columns, and the indexes are used by the planner. 
 It turned out the  array-based schema was an order of magnitude faster  for both inserts and queries. From quick tests, it seemed that both scaled linearly. The tests aren't very thorough, though. Suggestions and forks welcome - they're under an MIT licence. 
 