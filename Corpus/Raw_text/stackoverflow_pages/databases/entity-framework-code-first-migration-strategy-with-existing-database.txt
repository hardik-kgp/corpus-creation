*** entity-framework-code-first-migration-strategy-with-existing-database ***

 I have the following situation and unable to determine correct migration strategy. Help is appreciate. 
 
 Application creates and uses database as data storage  
 Application needs to update database on the start up  **if needed**

 using  **Nuget Manager console**
 is not a option. (For migration purpose , locally no problem) 
 I Have existing database in distribution which are not EF 
 
 Now I want to start using the EF code first approach. What I need to achieve is : 
 
 If no database then create one  
 If database exists use empty migration (just to be ready for the next upgrades) 
 This should happened on application start 
 
 Database don't exists ====> Create EF Initial =====> Upg v1 =====> Upg V2  
 Database Exists =====> Skip Initial but be ready for next upgrades =====> Upg v1 ======> Upg v2  
 Thanks for your help 
 **Additional info:**

This is database that exists (just an example): 
 
 Using reverse engineering EF created initial migration : 
 
 if I use the code provided by @spender against non existing database everything is cool .
If I use it against existing database it works until i change the model (next migration). 
 What I have seen is that upgrade script returned by migration contains entire database creation. And can not be executed against already existing objects. 
 What can actually work is to add migration table to existing database and add initial data, but I am not sure that this is a good solution.   
 
 This took a considerable while for me to figure out, so I'm happy to share it here. 
 So first you'll need to reverse engineer your database.  Entity framework power tools  can do this for you. Once it's installed, in your project, install EF with nuget, right click the project node in solution explorer, then   ->  . This will generate a whole bunch of model classes and mapping classes to your project. 
 Next, in Package Manager Console 
 
 then 
 
 to create a migration that describes the transition from empty DB to the current schema. 
 Now edit the generated   class constructor: 
 
 Next, at app startup, (so perhaps in global.asax   if you're running from a webserver), you need to trigger migrations. This method will do the job: 
 
 Now you can add more migrations as normal. When the app runs, if these migrations haven't been applied, they will be applied when   is called. 
 Now you're right in the EF code-first fold. I think that's what you asked, right? 
 