*** entity-framework-core-contains-is-case-sensitive-or-case-insensitive ***

 "Contains" in Entity Framework core should equivalent to the SQL %like% operator. Therefore "Contains" should be case insensitive however it is case sensitive! (at least in postgres????) 
 The following only outputs a result when the correct casing for keyword is used. 
 
 What am I doing wrong? 
 
 It used to be the case for older versions of EF core. Now   is case sensitive, and for exemple for sqlite it maps to sqlite function `instr()' ( I don't know for postgresql). 
 If you want to compare strings in a case-insensitive way, you have DbFunctions to do the jobs. 
 
 UPDATE to @Gert: 
 A part of the assumption in the question is incorrect.   does NOT convert into a   even though it USED to be the case in ef core versions <= 1.0 (I think). 
 
 In  SQLServer    converts into  , in  oracle  and  sqlite  into   which are case sensitive by default UNLESS db or column collation is defined otherwise ( Again, I don't know for postgresql ). 
 In all cases   converts into a SQL   expression which is case-insensitive by default unless db or column collation is defined otherwise. 
 
 So yes it all goes down to collation but - correct me if I'm wrong - in a way the code can have an influence on the case-sensitive/insensitive search depending on which one of the above method you use. 
 Now, I might not be completely up to date but I don't think EF core migrations deal with DB collation naturally and unless you've already created the table manually you will end up with the default collation (case-sensitive for sqlite and I honestly don't know for the others). 
 Getting back to the original question you have at least 2 options to perform this case-insensitive search if not 3 in a future release : 
 
 Specify the column collation on creation using DbContext.OnModelCreating() using this  trick 
 Replace your   by  
 Or wait for a promising feature still in  discussion  :   function 
 
 
 My answer will concern NpgSQL. 
 
  in PostgreSQL is case-sensitive, but you can use   extension  method  located in    assembly . 
 If you don't have reference to Entity Framework assembly in place where you build query, you can use combination   and   methods, because Npgsql is  able  translate   method to correct SQL 
 
 Example: 
 
 About second method keep in mind: you may have performance problems and may encounter problems associated with encoding. 
 
  is executed in the database, so it is most likely to be case insensitive. 
  uses C#  , so it is case sensitive. 
 Read this answer:  Returning IEnumerable vs. IQueryable 
 
 Just try it : 
 You can   field and search value 
 
 Or you can   filed and search value 
 
 