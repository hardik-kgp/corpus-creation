*** environment-driven-database-settings-in-laravel ***

 I am moving over the the Laravel framework, but I am having trouble with the database settings, 
 Specifically, I have my environments setup, and they are working fine for the application.php config file, however the database.php config file seems to have no effect. 
 Even if I have a database.php config file in my environments folder it is never loaded, I put a bunch of invalid characters (keyboard mash) into the file to get php to throw an error, but it is never hit. 
 Does Laravel not support environment based database settings? or am I doing this wrong? 
 
 You can definitely set database settings (and any other config setting) by environment. 
 **For Laravel 3 (for Laravel 4 and Laravel 5 see below):**

 Firstly - you need to define   in your   and set it to something like this: 
 
 Laravel will  automatically  look for this variable, and if set, will use the associated configuration. 
 Normally you have a   folder, with settings such as   and  
 Now just create a new folder for each   you plan to use (such as Development). You'll end up with a folder structure like this; 
 
 You'll note I've only included   in each subfolder. Laravel will always load the default config settings first, then override them with any custom configs from the environments setting. 
 Finally, in your development/database file, you would have something like this; 
 
 p.s. I just tested this on the current 3.2.12 build of Laravel - and it definitely works. 
 **Bonus Tip:**
 You can also automatically set an environment for Artisan, so you do not have to include the environment manually on each command line! To do this: 
 
 You need to know your 'hostname' that you are running Artisan on. To find out - temporarily edit the   in your root folder, and add   to line 2 (i.e. above everything). 
 Run   from the command line. You will get a string dump with your hostname. In my case its "TSE-Win7"; 
 Remove the changes to the   file 
 Add your hostname (i.e. "TSE-Win7") to the environments. 
 
 You should end up with something like this: 
 
 Artisan will now run using your development environment. If you deploy to a live server - re-run these steps to get the hostname() for the server, and you can configure a specific artisan config just for the server! 
 **For Laravel 4:**

 The default environment is always  . But in your  **start.php**
 file you can define additional environments. 
 
 On Linux and Mac, you may determine your   by type   in your terminal - it will output the name of your computer. On Windows put   at the beginning of your   file - and run the website once - it will show you the current hostname of your computer. 
 **To get the current environment as a variable in your application**
 - read this SO answer here.  Laravel 4: how can I get the environment value? 
 **For Laravel 5:**

 There is single configuration file, called   in your root directory.
 Watch this laracast , config explained fully. 
 
 if you are using the artisan ( command line for laravel ) every command you need to add  
 
 or 
 
 
 Heres how I have it setup for my needs.  
 I personally need 4 different configurations: 
 
 localhost (Mac OSX) -  /Library/WebServer/Documents/www/my-domain.com/development/  
 dev.my-domain.com (VPS) - /var/www/my-domain.com/development/ 
 test.my-domain.com  (VPS) - /var/www/my-domain.com/test/ 
 my-domain.com (VPS) - /var/www/my-domain.com/web/ 
 
 Since all 4 of my environments have distinctive directory structure, I can use php's magic constant  **__DIR__**
 to fetch the app directory and then use the  **strpos()**
 function to do a simple check and return the appropriate environment. It will take care of Artisan environment as well, no need to manually type the environment, or add any machine names. 
 Inside the  
 
 bootstrap/start.php 
 
 Add a callback function 
 
 **Another alternative**

 We can also set and grab all the values at once into an array, and run a foreach loop. 
 **Tip:**
 Since we using the  **strpos()**
 function, which checks position of the first occurrence of the given value against the  **$haystack**
, and returns the position number. We don't really have to supply the entire path, we can simply add a distinctive value from each path to get the job done.  
 
 Whether we work on one machine or multiple, the chances of having the same path to different environments is very slim.  
 Or so I think. :) 
 
 **How to setup environment specific configuration**
 is now in the official Laravel docs. I would recommend using their method instead of the accepted answer: 
 
 It is often helpful to have different configuration values based on
  the environment the application is running in. For example, you may
  wish to use a different cache driver on your local development machine
  than on the production server. It is easy to accomplish this using
  environment based configuration. 
 Simply create a folder within the config directory that matches your
  environment name, such as local. Next, create the configuration files
  you wish to override and specify the options for that environment. For
  example, to override the cache driver for the local environment, you
  would create a cache.php file in app/config/local with the following
  content: 
 
 
 
 Note: Do not use 'testing' as an environment name. This is reserved
  for unit testing. Notice that you do not have to specify every option
  that is in the base configuration file, but only the options you wish
  to override. The environment configuration files will "cascade" over
  the base files. 
 Next, we need to instruct the framework how to determine which
  environment it is running in. The default environment is always
  production. However, you may setup other environments within the
  bootstrap/start.php file at the root of your installation. In this
  file you will find an $app->detectEnvironment call. The array passed
  to this method is used to determine the current environment. You may
  add other environments and machine names to the array as needed. 
 
 
 
 In this example, 'local' is the name of the environment and
  'your-machine-name' is the hostname of your server. On Linux and Mac,
  you may determine your hostname using the hostname terminal command. 
 If you need more flexible environment detection, you may pass a
  Closure to the detectEnvironment method, allowing you to implement
  environment detection however you wish: 
 
 
 
 You may access the current application environment via the environment
  method: 
 Accessing The Current Application Environment 
 
 
 
 You may also pass arguments to the environment method to check if the
  environment matches a given value: 
 
 
 
 **Laravel 5**

 Use the  DotEnv  approach detailed in  the Laravel docs here . 
 **Laravel 4**

 We are using the method Jeffrey Way recommended in this  Laracasts lesson . 
 
 Create   directories  for each environment . 
 
 Set an environment variable on your production server. Google for the best approach on your production platform. For example, here are great suggestions for  Ubuntu ,  Dreamhost , and  Heroku . We added a single line to  : 
 
 Add this closure to  . With this setup, any server missing the   environment variable will default to the   environment config. 
 
 
 
 I've been working away on this today, struggling to work out how best to do environmental settings for a database. In the end, after trying several methods, I fully agree with @troy-harvey that Jeffrey Way's recommendation of doing this is the best (for me at least). One thing I will add to this, and its what held me up so much today is ( and correct me if I'm wrong ) that you need to access the settings you are trying to over-ride in your environmental settings file by their corresponding array keys. I started out returning a simple array: 
 
 within an  . This had no effect and after much head scratching realised that you need to access the array as it is presented in  , like so: 
 
 At least this is how I finally managed to get my settings being picked up.  
 Adding this here in case anyone else is struggling to work this out. Upon realisation I understood how obvious a mistake I was making.  
 Edited 01 July 2014 
 An additional comment to this is that since 4.1 Laravel ships with an append_config() helper function for appending environmental configurations to the main config array.  
 This would look like this for the example given above: 
 
 
 
 In Laravel 3 to detect the environment it was: 
 
 Which would return whatever was identified in the environments array found in the paths.php file. 
 As mentioned before in Laravel 4 it is now: 
 
 
 My way of doing it! 
 
 
 If you're trying to use Laravel in a Windows environment, check out the settings in file .env in the top level folder for your Laravel project - these will override whatever database settings you have in config/database.php 
 
 If you are on Laravel 4  here is a gist  that will take you through the process step by step. Credits to @"The Shift Exchange"'s answer for guiding me to create it. 
 