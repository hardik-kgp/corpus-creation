*** evaluating-hdf5-what-limitations-features-does-hdf5-provide-for-modelling-data ***

 We are in evaluating technologies that we'll use to store data that we gather during the analysis of C/C++ code.  In the case of C++, the amount of data can be relatively large, ~20Mb per TU. 
 After reading the following SO  answer  it made me consider that  HDF5  might be a suitable technology for us to use.  I was wondering if people here could help me answer a few initial questions that I have: 
 
 Performance.  The general usage for the data will be write once and read "several" times, similar to the lifetime of a '.o' file generated by a compiler.  How does HDF5 compare against using something like an SQLite DB?  Is that even a reasonable comparison to make? 
 Over time we will add to the information that we are storing, but will not necessarily want to re-distribute a completely new set of "readers" to support a new format.  After reading the user guide I understand that HDF5 is similar to XML or a DB, in that information is associated with a tag/column and so a tool built to read an older structure will just ignore the fields that it is not concerned with?  Is my understanding on this correct? 
 A significant chunk of the information that we wish to write out will be a tree type of structure: scope hierarchy, type hierarchy etc.  Ideally we would model scopes as having parents, children etc. Is it possible to have one HDF5 object "point" to another?  If not, is there a standard technique to solve this problem using HDF5?  Or, as is required in a DB, do we need a unique key that would "link" one object to another with appropriate lookups when searching for the data? 
 
 Many thanks! 
 
 
 How does HDF5 compare against using something like an SQLite DB? 
  Is that even a reasonable comparison to make? 
 
 Sort of similar but not really. They're both structured files. SQLite has features to support database queries using SQL. HDF5 has features to support large scientific datasets. 
 They're both meant to be high performance. 
 
 Over time we will add to the information that we are storing, but will not necessarily want to re-distribute a completely new set of "readers" to support a new format. 
 
 If you store data in structured form, the data types of those structures are also stored in the HDF5 file. I'm a bit rusty as to how this works (e.g. if it includes innate backwards compatibility), but I do know that if you design your "reader" correctly it should be able to handle types that are changed in the future. 
 
 Is it possible to have one HDF5 object "point" to another?  
 
 Absolutely! You'll want to use  attributes . Each object has one or more strings describing the path to reach that object. HDF5  groups  are analogous to folders/directories, except that folders/directories are hierarchical = a unique path describes each one's location (in filesystems w/o hard links at least), whereas groups form a directed graph which can include cycles. I'm not sure whether you can store a "pointer" to an object directly as an attribute, but you can always store an absolute/relative path as a string attribute. (or anywhere else as a string; you could have lookup tables galore if you wanted.) 
 
 We produce HDF5 data on my project, but I don't directly deal with it usually.  I can take a stab at the first two questions: 
 
 We use a write once, read many times model and the format seems to handle this well.  I know a project that used to write both to an  Oracle  database and HDF5.  Eventually they removed the Oracle output since performance suffered and no one was using it.  Obviously, SQLite is not Oracle, but the HDF5 format was better suited for the task.  Based on that one data point, a RDBMS may be better tuned for multiple inserts and updates. 
 The readers our customers use are robust when we add new data types.  Some of the changes are anticipated, but we don't have to worry about breaking thing when adding more data fields.  Our DBA recently wrote a Python program to read HDF5 data and populate KMZ files for visualization in Google Earth.  Since it was a project he used to learn Python, I'd say it's not hard to build readers. 
 
 On the third question, I'll bow to  Jason S's superior knowledge . 
 I'd say HDF5 is a completely reasonable choice, especially if you are already interested in it or plan to produce something for the scientific community. 
 