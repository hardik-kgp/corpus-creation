*** example-of-a-strong-and-weak-entity-types ***

 I've tried to look on Google about a decent explanation of  **weak**
 and  **strong entity type**
, but I haven't fully understood them. 
 Could someone give me an example of a strong and weak entity type? 
 
 A weak entity is one that can only exist when owned by another one. 
For example: a  ROOM  can only exist in a  BUILDING . On the other hand, a  TIRE  might be considered as a strong entity because it also can exist without being attached to a  CAR . 
 
 Just to play with it, question is strong entity type and answer is weak. Question is always there, but an answer requires a question to exist. 
 Example:  Don't ask 'Why?' if Your Dad's a Chemistry Professor   
 
 A company insurance policy insures an employee and any dependents, the DEPENDENT cannot exist without the EMPLOYEE; that is, a person cannot get insurance coverage as a dependent unless the person is a dependent of an employee.DEPENDENT is the weak entity in the relationship "EMPLOYEE has DEPENDENT" 
 
 A  **weak entity**
 is the entity which can't be fully identified by its own attributes and takes the  foreign key  as an attribute (generally it takes the primary key of the entity it is related to) in conjunction. 
 **Examples**

 The existence of rooms is entirely dependent on the existence of a hotel. So room can be seen as the  weak entity  of the hotel. 
Another example is the 
bank account of a particular bank has no existence if the bank doesn't exist anymore. 
 
 **Strong entity**

 It can exist without any other entity. 
 **Example**

 
 **Weak entity**

 It depends on a dominant entity, and it cannot exist without a strong entity. 
 **Example**

 
 
 **Weak entities**
 are also called  dependent entities , since it's existence depends on other entities. Such entities are represented by a double outline rectangle in the E-R diagram. 
 **Strong entities**
 are also called independent entities. 
 
 **./Database/DataModels/RelationalDataModel/WeakEntity**

 It probably can be written in two factors: 
 
 **DEPENDENCE:**
 Depends on the existence of an identifying entity set (total, one-to-many relationship). 
 **IDENTIFICATION:**
 Does not have a primary key. It has a partial key (or discriminator). It needs to use the primary key of another table for identification. 
 
 If we would think of a database holding questions and answers, then the questions would be the strong entity and the answers would be the weak entity.
So,  **Question (id, text)**
 and  **Answer (number, question_id, text)**
 would be our tables. But why is the Answer's table a weak entity? 
 
 Dependence to the question table.  Every answer is connected to one question (assumption) and so it cannot be on its own. That is why we have people who ask one question and answer it themselves so that they can help other people and get some extra likings. 
 Identification from the primary key of the question . One would not be able to identify an answer (assuming that its id is a number identifier) because a question might be answered by answers whose identifier might exist in other questions too. Primary key of the answer table: (number, question_id). 
 
 
 Weak entity exists to solve the multi-valued attributes problem.   
 There are two types of multi-valued attributes. One is the simply many values for an objects such as a "hobby" as an attribute for a student. The student can have many different hobbies. If we leave the hobbies in the student entity set, "hobby" would not be unique any more. We create a separate entity set as hobby. Then we link the hobby and the student as we need. The hobby entity set is now an associative entity set. As to whether it is weak or not, we need to check whether each entity has enough unique identifiers to identify it. In many opinion, a hobby name can be enough to identify it. 
 The other type of multi-valued attribute problem does need a weak entity to fix it. Let's say an item entity set in a grocery inventory system. Is the item a category item or the actually item? It is an important question, because a customer can buy the same item at one time and at a certain amount, but he can also buy the same item at a different time with a different amount. Can you see it the same item but of different objects. The item now is a multi-valued attribute. We solve it by first separate the category item with the actual item. The two are now different entity sets. Category item has descriptive attributes of the item, just like the item you usually think of. Actual item can not have descriptive attributes any more because we can not have redundant problem. Actual item can only have date time and amount of the item. You can link them as you need. Now, let's talk about whether one is a weak entity of the other. The descriptive attributes are more than enough to identify each entity in the category item entity set. The actual item only has date time and amount. Even if we pull out all the attributes in a record, we still cannot identify the entity. Think about it is just time and amount. The actual item entity set is a weak entity set. We identify each entity in the set with the help of duplicate prime key from the category item entity set. 
 
 After browsing search engines for a few hours I came across a site with a great ERD example here:  http://www.exploredatabase.com/2016/07/description-about-weak-entity-sets-in-DBMS.html 
 I've recreated the ERD. Unfortunately they did not specify the primary key of the weak entity. 
 
 If the building could only have one and only one apartment, then it seems the partial discriminator room number would not be created (i.e. discarded).  
 
 Weak Entity Type:
An entity whose instances cannot exits without being linked with instances of some other entity is called weak entity type. It cannot exist independently.
For example: Our PC is depend on us it will not open or close with its own. 
 Strong Entity Type:
An entity whose linked to the instances of any other entity type is called strong entity type. It can exit independently.
For example: A person can do every thing can go everywhere and use ever thing  
 
 A data object that can exist without depending upon the existence of another data object is known as Strong Data Object. 
 
 First Strong/Weak Reference types are introduced in ARC. In Non ARC assign/retain are being used.
A strong reference means that you want to "own" the object you are referencing with this property/variable. The compiler will take care that any object that you assign to this property will not be destroyed as long as you points to it with a strong reference. Only once you set the property to nil, the object get destroyed. 
 A weak reference means you signify that you don't want to have control over the object's lifetime or don't want to "own" object. The object you are referencing weakly only lives on because at least one other object holds a strong reference to it. Once that is no longer the case, the object gets destroyed and your weak property will automatically get set to nil. 
The most frequent use cases of weak references in iOS are for IBOutlets, Delegates etc. 
 For more info Refer :  http://www.informit.com/articles/article.aspx?p=1856389&seqNum=5 
 