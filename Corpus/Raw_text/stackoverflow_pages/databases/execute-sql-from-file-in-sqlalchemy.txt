*** execute-sql-from-file-in-sqlalchemy ***

 How can I execute whole sql file into database using SQLAlchemy? There can be many different sql queries in the file including begin and commit/rollback. 
 
 Unfortunately I'm not aware of a good general answer for this. Some dbapi's (psycopg2 for instance) support executing many statements at a time. If the files aren't huge you can just load them into a string and execute them on a connection. For others, I would try to use a command-line client for that db and pipe the data into that using the subprocess module. 
 If those approaches aren't acceptable, then you'll have to go ahead and implement a small SQL parser that can split the file apart into separate statements. This is really tricky to get 100% correct, as you'll have to factor in database dialect specific literal escaping rules, the charset used, any database configuration options that affect literal parsing (e.g. PostgreSQL standard_conforming_strings). 
 If you only need to get this 99.9% correct, then some regexp magic should get you most of the way there. 
 
 I was able to run .sql schema files using pure SQLAlchemy and some string manipulations. It surely isn't an elegant approach, but it works.  
 
 It iterates over all lines in a .sql file ignoring commented lines.
Then it concatenates lines that form a full statement and tries to execute the statement. You just need a file handler and a session object. 
 
 If you are using sqlite3 it has a useful extension to dbapi called conn.executescript(str), I've hooked this up via something like this and it seemed to work: (Not all context is shown but it should be enough to get the drift) 
 
 Is this pure evil I wonder? I looked in vain for a 'pure' sqlalchemy equivalent, perhaps that could be added to the library, something like db_session.execute_script(file_name) ? I'm hoping that db_session will work just fine after all that (ie no need to restart engine) but not sure yet... further research needed (ie do we need to get a new engine or just a session after going behind sqlalchemy's back?) 
 FYI sqlite3 includes a related routine: sqlite3.complete_statement(sql) if you roll your own parser... 
 
 You can do it with SQLalchemy and psycopg2. 
 
 
 You can access the raw DBAPI connection through this 
 
 but then it will depend on which dialect/driver you are using which can be referred to through this  list . 
 For pyscog2, you can just do  
 
 but pysqlite you would need to do 
 
 and in line with that you would need to check the documentation of whichever DBAPI driver you are using to see if multiple statements are allowed in one execute or if you would need to use a helper like   which is unique to pysqlite. 
 