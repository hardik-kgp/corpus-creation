*** fabric-js-how-to-save-canvas-on-server-with-custom-attributes ***

 I'd like to be able to save the current canvas' state to a server-side database, probably as a JSON string, and then later restore it with  . Typically, this is easily accomplished using: 
 
 And then  
 
 However, I've also been setting a few custom attributes on the fabric objects I'm adding to the canvas using the builtin   method: 
 
 The problem is that when I check the request on the server-side, I see that my custom attributes were not parsed from the canvas and sent along with everything else. This probably has to do with how   method removes anything that's not a default attribute in the object class. What would be a good way to tackle this issue, such that I'll be able to both save  **and**
 restore the canvas from a JSON string sent by the server, and the restored canvas will also include my custom attributes? thanks. 
 
 Good question. 
 If you're adding custom properties to objects, those objects are likely "special" in some way. It seems like subclassing them would be a reasonable solution. 
 For example, here's how we would subclass a   into a named image. Those image objects could then have names like "Gandalf" or "Samwise". 
 
 First, we give these objects a type. This type is used by   to automatically invoke   method. In this case it would be  . 
 Then we overwrite   (constructor) instance method, to also set "name" property when initializing an object (if that property is given). 
 Then we overwrite   instance method to include "name" in returned object (this is a cornerstone of object serialization in fabric). 
 Finally, we'll also need to implement that   that I mentioned earlier, so that   would know which method to invoke during JSON parsing: 
 
 We're loading an image here (from "object.src"), then creating an instance of   out of it. Note how at that point, constructor will already take care of "name" setting, since we overwrote "initialize" method earlier. 
 And we'll also need to specify that   is an asynchronous "class", meanining that its   does not return an instance, but passes it to a callback: 
 
 And now we can try this all out: 
 
 
 Wow. Am I missing something here? 
 I've done this plenty of times and it doesn't need any fancy subclassing.  
 The docs cover it:  http://fabricjs.com/docs/fabric.Canvas.html#toJSON 
 Just include an array of property names as strings in your call to toJSON(). 
 Eg 
 
 Hopefully.... for bonus points you can add a reviver function which will rehydrate your custom attributes. 
 Again this is covered in the docs and has an example. 
 
 I had the same issue but I didn't want to extend the fabric.js classes. 
 I wrote a function that takes the fabric canvas in parameter and returns a stringified version with my special attributes: 
 
 The special attributes seems properly imported when I use  , I'm using fabric  . 
 
 A more simple approach would be to add the properties post-stringify: 
 
 
 If you don't want to specify the custom attributes you are using every time you call  , and you don't want to use a complicated subclassing approach, here is a very simple way to extend Fabric's   method. 
 
 Then you can set custom properties on Fabric objects. 
 
 And when you call   those properties will persist to the output. If you then use   with your JSON output, the custom attributes will be imported and applied to the Fabric objects.  
 