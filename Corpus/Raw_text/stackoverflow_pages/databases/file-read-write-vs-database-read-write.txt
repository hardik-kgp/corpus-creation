*** file-read-write-vs-database-read-write ***

 Which is more expensive to do in terms of resources and efficiency, File read/write operation or Database Read/Write operation 
 
 I was initially going to say database read/write, hands down, as it would include the requisite file io on top of the DB overhead, but then realized its not that simple.  If you have your entire DB loaded into memory, reads would be nearly instantaneous as there's no file IO involved.  
 Writes would, in general, be faster too, as the DB engine doesn't have to wait for the file IO to complete before returning since they can take a "lazy write" approach.   
 A poorly tuned database, on the other hand, will be orders of magnitude slower than any file based IO.  DB tuning matters.  A lot. 
 
 This is kind of a loaded question.  What size files are we talking about?  Gigabytes? Also, what type and size of DB?  I often use a combination.  Do you want to control any data level integrity?  If so, you might want to leave that to the DB otherwise you have to control all that at the application level. 
There are so many factors to make a good decision on this.  For example, when I am creating temporary data that I don't want persisted I use File, but if I am using data I want persisted or backed up, then I use a DB. 
This coupled with the architecture is important.  If hardware, licensing, or facility is an issue then maybe you don't need the infrastructure of DB servers etc.  But if you have the resources then adding a DB layer might be the right choice. 
 
 There's no simple answer. With any database you have the overhead of having it running all the time. But then when you access it is generally much faster than accessing a file. If you are talking about just a handful of accesses you won't notice much of difference. But when it gets to hundreds, thousands, and millions of accesses per minute the database will be much faster. And as Tim noted above, a poorly tuned database can be much slower than accessing a flat file. 
 