*** flat-file-databases ***

 
 
 
 
 
 Closed . This question is  opinion-based . It is not currently accepting answers.
                            
                         
 
 
 
 
 
 
 
 
 
 
 Want to improve this question?  Update the question so it can be answered with facts and citations by  editing this post .
                         
 Closed  4 years ago . 
 
 
 
 What are the best practices around creating flat file database structures in PHP? 
 A lot of more matured PHP flat file frameworks out there which I attempt to implement SQL-like query syntax which is over the top for my purposes in most cases. (I would just use a database at that point). 
 Are there any elegant tricks out there to get good performance and features with a small code overhead? 
 
 Well, what is the nature of the flat databases.  Are they large or small.  Is it simple arrays with arrays in them?  if its something simple say userprofiles built as such: 
 
 and to save or update the  db record  for that user. 
 
 and to load the  record  for the user 
 
 but again this implementation will vary on the application and nature of the database you need. 
 
 You might consider  SQLite . It's almost as simple as flat files, but you do get a SQL engine for querying. It  works well with PHP  too. 
 
 In my opinion, using a "Flat File Database" in the sense you're meaning (and the answer you've accepted) isn't neccesarily the best way to go about things. First of all, using   and   can cause MAJOR headaches if someone gets in and edits the file (they can, in fact, put arbritrary code in your "database" to be run each time.) 
 Personally, I'd say - why not look to the future? There have been so many times that I've had issues because I've been creating my own "proprietary" files, and the project has exploded to a point where it needs a database, and I'm thinking "you know, I wish I'd written this for a database to start with" - because the refactoring of the code takes way too much time and effort. 
 From this I've learnt that future proofing my application so that when it gets bigger I don't have to go and spend days refactoring is the way to go forward. How do I do this? 
 SQLite. It works as a database, uses SQL, and is pretty easy to change over to mySQL (espescially if you're using abstracted classes for database manipulation like I do!) 
 In fact, espescially with the "accepted answer"'s method, it can drastically cut the memory usage of your app (you don't have to load all the "RECORDS" into PHP) 
 
 One framework I'm considering would be for a blogging platform. Since just about any possible view of data you would want would be sorted by date, I was thinking about this structure: 
 One directory per content node: 
 
 Subdirectories of each node including   
 
 As well as simple text files in the node directory for pre- and post-rendered content and the like. 
 This would allow a simple PHP   call (and probably a reversal of the result array) to query on just about anything within the content structure: 
 
 Would return paths including all articles tagged "funny". 
 
 Here's the code we use for Lilina: 
 
 It stores each entry as a separate file, which we found is efficient enough for use (no unneeded data is loaded and it's faster to save). 
 
 If you're going to use a flat file to persist data, use XML to structure the data. PHP has a  built-in XML parser . 
 
 If you want a human-readable result, you can also use this type of file : 
 
 This way, you have only one file, you can debug it (and manually fix) easily, you can add fields later (at the end of each line) and the PHP code is simple (for each line, split according to |). 
 However, the drawbacks is that you should parse the entire file to search something (if you have millions of entry, it's not fine) and you should handle the separator in data (for example if the nick is WaR|ordz). 
 
 I have written two simple functions designed to store data in a file. You can judge for yourself if it's useful in this case.
The point is to save a php variable (if it's either an array a string or an object) to a file. 
 
 
 This one is inspiring as a practical solution: 
 https://github.com/mhgolkar/FlatFire 
It uses multiple strategies to handling data... 
[Copied from Readme File] 
 **Free or Structured or Mixed**

 
 
 IMHO, you have two options if you want to avoid homebrewing something: 
 
 **SQLite**

 If you're familiar with PDO, you can install a PDO driver that supports SQLite.  Never used it, but I have used PDO a ton with MySQL.  I'm going to give this a shot on a current project. 
 **XML**

 Done this many times for relatively small amounts of data.   XMLReader  is a lightweight, read-forward, cursor-style class.   SimpleXML  makes it simple to read an XML document into an object that you can access just like any other class instance. 
 
 
 Just pointing out a potential problem with a flat file database with this type of system: 
 
 ...etc 
 The problem is that the cell data contains a "|" or a "\n" then the data will be lost. Sometimes it would be easier to split by combinations of letters that most people wouldn't use. 
 For example: 
 Column splitter:  
 Row splitter:  
 Text file:  
 Then use:  
 Or anything along these lines. Also, I might add that flat file databases are good for systems with small amounts of data (ie. less than 20 rows), but become huge memory hogs for larger databases. 
 