*** fluentnhibernate-mapping-unable-to-map-double-or-decimal-with-scale-precision ***

 I'm working first time with  **FluentNHibernate**
, trying to map classes to  **SQL Express**
 database. In general it works, but I'm unable to map  **Double or Decimal**
 property types to specific  **scale/precision**
. Below shows result for a single property that I tested over and over with  **SchemaUpdate.Execute**
. In no case was I able to get it to work.  
 Would be really helpful to hear some explanation to the mappings that does not work as I expect (2-8)?  
 
 **1) Decimal**
:  Map(Function(x) x.Balance)  **>>**
 Decimal(19, 5)     
 
 **2) Double**
:  Map(Function(x) x.Balance).CustomSqlType("decimal")   **>>**
 Decimal(18,0)
- Why 0 precision is the default mapping here? 
 **3) Double**
:  Map(Function(x) x.Balance)  **>>**
 Float , 
But; when running  **SchemaValidator**
 after: 
  **HibernateException**
: Wrong column type in FnhDb.dbo.Account for column Balance. Found: float, Expected DOUBLE PRECISION 
 **4) Decimal**
:  Map(Function(x) x.Balance).Scale(9).Precision(2)   **>>**

 **SqlException**
: The scale (9) for column 'Balance' must be within the range 0 to 2. 
 **5,6) Decimal or Double**
:  Map(Function(x) x.Balance).Scale(9).Precision(2).CustomSqlType("numeric")   **>>**
 numeric(18,0)   
 **7,8) Decimal or Double**
:  Map(Function(x) x.Balance).Scale(9).Precision(2).CustomSqlType("decimal")   **>>**
 Decimal(18,0) 
 
 **EDIT:**
 
I include code and hbm.xml (export) for case (4) here:  
 
 
 **EDIT2:**
  
 Btw, this is not a  **VB**
 issue. I have the exact same problem in a  **C#**
 project. Can it be the  **MsSql2008 configuration**
 that is not compatible with  **Sql Express 2008 R2**
?  
 
 **EDIT3:**
  
 
 Imports System.Collections.Generic
Imports System.Text
Imports System 
 
 
 First of all, your understanding of   and   is wrong.   is always higher than  . See  this MSDN documentation  for a better understanding, which states: 
 
 Precision is the number of digits in a
  number. Scale is the number of digits
  to the right of the decimal point in a
  number. For example, the number 123.45 
  has a precision of 5 and a scale of 2. 
 
 In your second example, i.e.  , 0 is  , not  .   is 18. 
 Secondly, your mapping should be this: 
 
 If you set   after setting   and  , the settings done by you will be reset. 
 **EDIT:**

You are using   in the declaration, where I think you should use  . See  this question  to know why.   is a floating type variable so it is mapped to a   by default until you mention otherwise or until the   is higher than 7. If you change the declaration of   to  , you can map the property like this without any problems: 
 
 