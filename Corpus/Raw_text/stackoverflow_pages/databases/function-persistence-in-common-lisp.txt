*** function-persistence-in-common-lisp ***

 Is there any persistence solution for Common Lisp, such as Elephant, that allows function persistence? Currently my app stores an identifier on the db and later searches in a function table which it is, but this method does not allow dynamically created functions to be stored. 
 
 It's not a database persistence mechanism, but most Common Lisps have a way of  writing FASLs  for all kinds of objects, including functions. For example: 
 
 You can write to a stream (here I used a file for convenience), so you can trivially capture those bytes and stuff them into a database if you wished. 
 
 Pascal Bourguignon gave a  standard solution on comp.lang.lisp .  Basically you have to write the source form to a file and   it then   it. 
 
 Then you’ll have to read the file and store it in your database.  To get it back you’ll need to fetch it from the database and write it in a file before loading it. 
 
 
 Common Cold  might be what you want. It includes serializable closures and serializable continuations. 
 
 Functions are opaque objects, so you won't have much luck storing them in files or something like that.  You can, however, store lists and  compile  them upon retrieval from the database. 
 This won't help you store closures, of course.  That would entail storing the lexical environment along with the code, neither of which you have (portable) access to.  Code that you compile from stored lists will have to rely entirely on global data or data stored in the database. 
 By the way, note that you can  funcall  symbols, so you don't need a function table for global functions. 
 
 You can look into saving Lisp images. This allows saving "enough information to restart a Lisp process at a later time." You can have your functions saved after you have loaded them into your image. 
 This may also be a bit more advanced than what you were looking for, but here is a (very) brief introduction to the process:  Saving a Core Image 
 
 Be careful that storing code may not be that good. The Zope developers learned it the hard way. 
 