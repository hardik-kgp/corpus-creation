*** generating-a-single-entity-from-existing-database-using-symfony2-and-doctrine ***

 Is it possible to generate a single entity from database using the Symfony2 console tool? 
 In the middle of coding I had to add a table and there are modifications made to the existing entity classes. So I don't want all my entities regenerated.  
 Any suggestions will be appreciated! 
 
 I had the same problem, you've to do this way: 
 
 Then 
 
 Where   is the file ending you want to generate (e.g. xml, yml, annotation) 
 And finally 
 
 Like this doctrine will load only the entity you need. Just be carefull on the filter you must use the CamelCase ! 
 Hope this will help you 
 
 For the third command, doctrine kept regenerating all of the Entity files. By adding the entity name after the bundle, it only generated the entity I was interested in. 
 
 
 Simple Working Solution for Symfony 2.7 option annotation and for [/xml/yml] see  http://symfony.com/doc/current/cookbook/doctrine/reverse_engineering.html 
 do 3 commands in 3 steps: 
 
 ( **NOTE:**
 if your database name is   You will need to change it to   in   for doctrine to find your table name. This is because doctrine will always strip underscores and add Camel-case to your table name. If not, you will get this error:  "Database does not have any mapping information" .) 
 
 ( **NOTE:**
 making sure you have   as below in your  **Meeting.php**
 class file like this: 
 
 If not add it in.) 
 where: 
 
 AppBundle is exactly your "AppBundle" in Symfony 2.7 
 Meeting is the target table (Camel-Case sensitive) 
 
 TO BE SURE, check this directory: 
 
 src\AppBundle/Resources/config/doctrine/Meeting.orm.xml 
 
 AND MAKING SURE you only have .xml files for the table you want to create entity class files and no others. Then run this below command to generate get and set methods for your entity class that you created previously 
 
 $ php app/console doctrine:generate:entities AppBundle:Meeting --no-backup 
 
 NOTE2:
As the last step you must delete the xml doctrine orm db file in for example  
 It works very well for me. 
 For explanation please read:  http://symfony.com/doc/current/cookbook/doctrine/reverse_engineering.html 
 
 @fyrye's comment that is currently hidden deserves the credit, wanted to add this so it's not missed by others. This is the approach: 
 
 **source: **
**https://coderwall.com/p/jofhdw/doctrine-tell-which-tables-to-work-with**

 I was having issues when running the following command because of large number of badly defined legacy tables 
 
 It turns out that the --filter flag only filters AFTER it has read meta data from all of your tables which, if they don't have primary keys or have some other issue, will cause the command to fail 
 
 None of the answers were quite right for me using  **Symfony 3**
.  I ended up doing: 
 
 
 I would have left this as a comment to the accepted answer but I'm a newbie.  
 For those like me who had trouble with the --filter switch mapping multiple tables with coincident strings in names, one can use a pattern. 
 Example table names: 
 Vendor
VendorContact 
 
 That command will convert both tables rather than just Vendor. If you want just Vendor and not VendorContact, use a pattern in --filter: 
 
 Hope that helps someone! 
 
 Works great with Symfony 3 too.  
 If you are getting "No Metadata Classes to process." message try convert your tablename to Doctrine camel casing in the filter parameter. 
 "my_table_name" needs to be write as "MyTableName". 
 
 I had exactly the same issue with Symfony 2.4 and MySQL.  
 None of the workarounds posted above worked for me.  
 I ended up creating a new database with the tables I want to extract (this can be easy to do because MySQL provides the creation script).  
 Then changed the connection to that new database and executed the entity extraction command from there.  
 Seems to be a bit radical, but I will not create the entities by hand.  
 Hope that helps 
 
 Didn't work any of these for my symfony 3.3. So I just created a copy of directory and re-generated all of the entities in copy directory. Then I copied required entities in my original directory. 
 --filter does not work due to this issue  https://github.com/symfony/symfony/issues/7717 
 
 for  **Symfony 3**

 To generate the entities for a new "Group" table 
 
 
 as written in the  symfony 3 documentation   
 