*** generic-extension-method-type-argument-cannot-be-inferred-from-the-usage ***

 I'm trying to create a generic extension method, that works on typed data tables : 
 
 The first line works fine, but it's really ugly... 
The second line doesn't compile because the compiler cannot infer the type of  RowType . 
This is a method that will be used as part of a DataLayer by many different programmers, so I would rather not need them to specify the TypeParameter. 
Shouldn't the compiler know that  RowType  is the same type as the one that was used by TypedTableBase ? 
 For different reasons that may not be obvious in this code sample, I really need to return the datatable in its original form. And the reason I need  RowType  is so the 'Expression Func T, bool> ' will be typed and seen by InteliSence. 
 Thanks 
 
 Method type inference does not make inferences from arguments to  constraints . It makes inferences from arguments to  formal parameters  and then checks whether the inferences made from the arguments to the formals satisfy the constraints.  
 In your case there is not enough data from the arguments to deduce what the type parameters are without first looking at the constraints, which we're not going to do  until we check the inferences against the constraints . Sorry about that, but that's how the type inference algorithm is specified. 
 I've been asked questions about this many times and the consensus seems to be that I am morally wrong for maintaining the position that inference should infer from arguments to formal parameters alone. For about a dozen people telling me I'm wrongheaded in this regard, see the comments to my analysis of this closely related issue: 
 http://blogs.msdn.com/b/ericlippert/archive/2009/12/10/constraints-are-not-part-of-the-signature.aspx 
 I maintain my position. 
 
 Eric's answer is great for explaining why the types cannot be inferred.  Here are a couple of suggestions to hopefully cut down on the verbosity of the code that you will have to write. 
 If you can explicitly define the type of your lambda expression, then it can infer the types. 
 One example of how to do that is below.  I've created a   parameter that is explicitly of type  .  In this example, this doesn't save you much typing, but perhaps in practice you can make use of this. 
 
 EDIT: altered my example to use another extension method rather than deriving a custom   class from  . 
 Below is another example that can do a better job of inferring the type parameters.  You define another extension method (mine is called  ) that only has one type parameter to infer.  The first parameter is of type  , so the compiler should have no problem inferring the type from that: 
 
 This allows you to compile the following code: 
 
 Primarily the   parameter simply servers to inform the compiler of the type to use for  .  Is this a good idea?  I'm not so sure, but it does allow the compiler to infer all of the generic types. 
 
 Even if that wasn't ideal, I gave up trying to return anything at all witch allows me to do something like that : 
 
 And then use it like so: 
 
 and the compiler infers the type correctly... 
 Thank you both for your answers. 
 