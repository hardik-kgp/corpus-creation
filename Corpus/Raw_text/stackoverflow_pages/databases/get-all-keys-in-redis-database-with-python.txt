*** get-all-keys-in-redis-database-with-python ***

 There is a post about a Redis command to get all available keys, but I would like to do it with Python. 
 Any way to do this? 
 
  is superior to   for large numbers of keys because it gives you an iterator you can use rather than trying to load all the keys into memory. 
 I had a 1B records in my redis and I could never get enough memory to return all the keys at once. 
 **SCANNING KEYS ONE-BY-ONE**

 Here is a python snippet using   to get all keys from the store matching a pattern and delete them one-by-one: 
 
 **SCANNING IN BATCHES**

 If you have a very large list of keys to scan - for example, larger than >100k keys - it will be more efficient to scan them in batches, like this: 
 
 I benchmarked this script and found that using a batch size of 500 was 5 times faster than scanning keys one-by-one. A batch size of 500 seemed to be optimal running locally on my Macbook Pro, it might differ over a network. I tested batch sizes of 10, 100, 500, 1000 and 10000. Contact me if you would like to see how I benchmarked it. 
 Note that whether you use  the   or   method, the operation is not atomic and could fail part way through.  
 **DEFINITELY AVOID USING XARGS ON THE COMMAND-LINE**

 I do not recommend this example I found repeated elsewhere. It will not work for unicode keys and is incredibly slow for even moderate numbers of keys: 
 
 In this example xargs creates a new redis-cli process for every key! yikes. 
 I benchmarked this approach to be 4 times slower than the first python example where it deleted every key one-by-one and 20 times slower than deleting in batches of 500. 
 
 Yes, use   from the StrictRedis module: 
 
 Giving a null pattern will fetch all of them. As per the page linked: 
 
 keys(pattern='*') 
 Returns a list of keys matching pattern 
 
 
 
 using Pyredis library 
 scan command   
 Available since 2.8.0. 
 Time complexity: O(1) for every call. O(N) for a complete iteration, including enough command calls for the cursor to return back to 0. N is the number of elements inside the collection.. 
 