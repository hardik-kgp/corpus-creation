*** get-sum-in-group-by-with-join-using-mysql ***

 I have two tables in MySQL 5.1.38. 
 
 My goal is to get the total price of all products which have a 5 star rating in each department. Something like this. 
 
 I would like to do this without a subquery if I can. At first I tried a join with a sum(). 
 
 As you can see the price for the Toys department is incorrect because there are two 5 star ratings for the Bike and therefore counting that price twice due to the join. 
 I then tried adding distinct to the sum. 
 
 But then the clothes department is off because two products share the same price. 
 Currently my work-around involves taking something unique about the product (the id) and using that to make the price unique. 
 
 But this feels like such a silly hack. Is there a better way to do this without a subquery? Thanks! 
 
 Use: 
 
 Technically, this does not use a subquery - it uses a derived table/inline view. 
 Marking this as community wiki cuz some monkey keeps downvoting me though it's 100% correct. 
 
 The primary reason you are having trouble finding a solution is that the schema as presented is fundamentally flawed. You shouldn't allow a table to have two rows that are complete duplicates of each other.  **Every**
 table should have a means to uniquely identify each row even if it is the combination of all columns. Now, if we change the   table so that it has an   column called  , the problem is easier: 
 
 
 You can do two queries.  First query: 
 
SELECT DISTINCT product_id FROM ratings WHERE rating = 5;
 
 Then, take each of those ID's and manually put them in the second query: 
 
SELECT   department, Sum(price) AS total_price
FROM     products
WHERE    product_id In (1,2,3,4)
GROUP BY department;
 
 This is the work-around for not being able to use subqueries.  Without them, there is no way to eliminate the duplicate records caused by the join. 
 
 I can't think of any way to do it without a subquery  somewhere  in the query. You could perhaps use a View to mask the use of a subquery. 
 Barring that, your best bet is probably to find the minimum data set needed to make the calculation and do that in the front end. Whether or not that's possible depends on your specific data - how many rows, etc. 
 The other option (actually, maybe this is the best one...) would be to get a new ORM or do without it altogether ;) 
 This view would allow you to bypass the subquery: 
 
 