*** getting-random-row-through-sqlalchemy ***

 How do I select a(or some) random row(s) from a table using SQLAlchemy?  
 
 This is very much a database-specific issue. 
 I know that PostgreSQL, SQLite, MySQL, and Oracle have the ability to order by a random function, so you can use this in SQLAlchemy: 
 
 Next, you need to limit the query by the number of records you need (for example using  ). 
 Bear in mind that at least in PostgreSQL, selecting random record has severe perfomance issues;  here  is good article about it. 
 
 If you are using the orm and the table is not big (or you have its amount of rows cached) and you want it to be database independent the really simple approach is. 
 
 This is cheating slightly but thats why you use an orm. 
 
 There is a simple way to pull a random row that IS database independent.
Just use .offset() . No need to pull all rows: 
 
 Where Table is your table (or you could put any query there).
If you want a few rows, then you can just run this multiple times, and make sure that each row is not identical to the previous. 
 
 Here's four different variations, ordered from slowest to fastest.   results at the bottom: 
 
  results for 10,000 runs on my Macbook against a PostgreSQL table with 300 rows: 
 
 You can easily see that using   is far faster than returning all results to Python's  .  
 Additionally, as the size of the table increases, the performance of   will degrade significantly because an   requires a full table scan versus the   in   can use an index. 
 
 Some SQL DBMS, namely Microsoft SQL Server, DB2, and  PostgreSQL  have implemented the SQL:2003   clause. Support was added to SQLAlchemy  in version 1.1 . It allows returning a sample of a table using different sampling methods â€“ the standard requires   and  , which return a desired approximate percentage of a table. 
 In SQLAlchemy   and   are used to produce a   construct: 
 
 There's a slight gotcha when used with mapped classes: the produced   object must be aliased in order to be used to query model objects: 
 
 
 Since many of the answers contain performance benchmarks, I'll include some simple tests here as well. Using a simple table in PostgreSQL with about a  million rows and a single integer column, select (approx.) 1% sample: 
 
 Before rushing to use   sampling method one should know that it samples  pages , not individual tuples, so it might not be suitable for small tables, for example, and may not produce as random results, if the table is clustered. 
 
 This is the solution I use: 
 
 
 **This is my function to select random row(s) of a table:**
  
 
 
 **this solution will select a single random row**

 This solution requires that the primary key is named id, it should be if its not already:    
 
 
 Theres a couple of ways through SQL, depending on which data base is being used. 
 (I think SQLAlchemy can use all these anyways) 
 mysql: 
 
 PostgreSQL: 
 
 MSSQL: 
 
 IBM DB2: 
 
 Oracle: 
 
 However I don't know of any standard way 
 