*** getting-values-out-of-dynamodb ***

 I've just started looking into Amazon's DynamoDB.  Obviously the scalability appeals, but I'm trying to get my head out of SQL mode and into no-sql mode.  Can this be done (with all the scalability advantages of dynamodb): 
 Have a load of entries (say 5 - 10 million) indexed by some number.  One of the fields in each entry will be a creation date.  Is there an effective way for dynamo db to give my web app all the entries created between two dates?   
 A more simple question - can dynamo db give me all entries in which a field matches a certain number.  That is, there'll be another field that is a number, for argument's sake lets say between 0 and 10.  Can I ask dynamodb to give me all the entries which have value e.g. 6? 
 Do both of these queries need a scan of the entire dataset (which I assume is a problem given the dataset size?) 
 many thanks 
 
 
 Is there an effective way for dynamo db to give my web app all the
  entries created between two dates? 
 
 Yup, please have a look at the of the  Primary Key  concept within  Amazon DynamoDB Data Model , specifically the  Hash and Range Type Primary Key : 
 
 In this case, the primary key is made of two attributes. The first
  attributes is the hash attribute and the second one is the range
  attribute. Amazon DynamoDB builds an unordered hash index on the hash
  primary key attribute and a sorted range index on the range primary
  key attribute. [...] 
 
 The listed samples feature your use case exactly, namely the  Reply ( Id, ReplyDateTime, ... )  table facilitates a primary key of type  Hash and Range  with a hash attribute  Id  and a range attribute  ReplyDateTime . 
 You'll use this via the  Query  API, see  RangeKeyCondition  for details and  Querying Tables in Amazon DynamoDB  for respective examples. 
 
 can dynamo db give me all entries in which a field matches a certain
  number. [...] Can I ask dynamodb to give
  me all the entries which have value e.g. 6? 
 
 This is possible as well, albeit by means of the  Scan  API only (i.e. requires to read every item in the table indeed), see  ScanFilter  for details and  Scanning Tables in Amazon DynamoDB  for respective examples. 
 
 Do both of these queries need a scan of the entire dataset (which I
  assume is a problem given the dataset size?) 
 
 As mentioned the first approach works with a  Query  while the second requires a  Scan , and  Generally, a query operation is more efficient than a scan operation  - this is a good advise to get started, though the details are more complex and depend on your use case, see section  Scan and Query Performance  within the  Query and Scan in Amazon DynamoDB  overview: 
 
 For quicker response times, design your tables in a way that can use
  the Query, Get, or BatchGetItem APIs, instead. Or, design your
  application to use scan operations in a way that minimizes the impact
  on your table's request rate. For more information, see  Provisioned Throughput Guidelines in Amazon DynamoDB . 
 
 So, as usual when applying NoSQL solutions, you might need to adjust your architecture to accommodate these constraints. 
 