*** good-php-orm-library ***

 
 
 
 
 
 
 
 
 This post is a  Community Wiki . Edit existing answers to improve this post. It is not currently accepting new answers.
                            
                         
 
 
 
 
 Is there a good object-relational-mapping library for PHP?  
 I know of  PDO /ADO, but they seem to only provide abstraction of differences between database vendors not an actual mapping between the domain model and the relational model. I'm looking for a PHP library that functions similarly to the way  Hibernate  does for Java and NHibernate does for .NET. 
 
 Look into  Doctrine . 
 Doctrine 1.2  implements Active Record.  Doctrine 2+  is a DataMapper ORM. 
 Also, check out  Xyster . It's based on the Data Mapper pattern. 
 Also, take a look at  DataMapper vs. Active Record . 
 
 Try  RedBean , its requires:  
 
 No configuration 
 No database (it creates everything on the fly) 
 No models  
 etc. 
 
 It even does all the locking and transactions for you and monitors performance in the background. (Heck! it even does garbage collection....) Best of all... you don't have to write a single... line of code... Jesus  **this**
,  ORM layer , saved me ass! 
 
 There are only two good ones:  Doctrine  and  Propel . We favor Doctrine, and it works well with  Symfony . However if you're looking for database support besides the main ones you'll have to write your own code. 
 
 Axon ORM is part of the  Fat-Free Framework  - it features an on-the-fly mapper. No code generators. No stupid XML/ YAML  configuration files. It reads the database schema directly from the backend, so in most  CRUD  operations you don't even have to extend a base model. It works with all major  PDO -supported database engines:  MySQL ,  SQLite ,  SQL Server /Sybase, Oracle,  PostgreSQL , etc. 
 
 Most of all, the plug-in and accompanying SQL data access layer are just as lightweight as the framework: 14 KB (Axon) + 6 KB (SQLdb). Fat-Free is just 55 KB. 
 
 I've been developing Pork.dbObject on my own. (A simple PHP ORM and Active Record implementation)
The main reason is that I find most ORMs too heavy.  
 The main thought of Pork.dbObejct is to be light-weight and simple to set up. No bunch of XML files, just one function call in the constructor to bind it, and an addRelation or addCustomRelation to define a relation to another dbObject. 
 Give it a look:  Pork.dbObject 
 
 Try  Doctrine2 . It's probably the most powerful ORM tool for PHP. I'm mentioning it separately from Doctrine 1, because it's a completely different piece of software. It's been rewritten from scratch, is still in beta phase, but it's usable now and developed. 
 It's a very complex ORM, but well designed. Lot of magic from original Doctrine 1 disappeared. It provides a complete solution, and you can  write your own ORM on top of Doctrine2  or use just one of its  layers . 
 
 I just started with  Kohana , and it seems the closest to Ruby on Rails without invoking all the complexity of multiple configuration files like with  Propel . 
 
 Check out  Outlet ORM . It is simpler than Propel and Doctrine and it works similar to Hibernate, only with more of a PHP feel to it. 
 
 I really like  Propel ,  here  you can get an overview, the  documentation  is pretty good, and you can get it through PEAR or SVN. 
 You only need a working PHP5 install, and  Phing  to start generating classes. 
 
 I found ORM related classes in the PHP library  Flourish . 
 
 Give a shot to  dORM, an object relational mapper for PHP 5 . It supports all kinds of relationships (1-to-1), (1-to-many), (many-to-many) and data types. It is completely unobtrusive: no code generation or class extending required. In my opinion it is superior to any ORM out there, Doctrine and Propel included. However, it is still in beta and might change significantly in the next couple months.  http://www.getdorm.com 
 It also has a very small learning curve. The three main methods you will use are: 
 
 
 You should check out  Idiorm and Paris . 
 
 I am currently working on  phpDataMapper , which is an ORM designed to have simple syntax like Ruby's Datamapper project.  It's still in early development as well, but it works great. 
 
 I have had great experiences with  Idiorm and Paris . Idiorm is a small, simple ORM library. Paris is an equally simple Active Record implementation built on Idiorm. It's for PHP 5.2+ with PDO. It's perfect if you want something simple that you can just drop into an existing application. 
 
 Tried the  ORM of Flourish library . 
 
 Until PHP 5.3 release don't expect to have a good ORM. It's a OO limitation of PHP. 
 
 My friend Kien and I have improved upon an earlier version of an ORM that he had written prior to PHP 5.3. We have essentially ported over Ruby on Rails'  Active Record  to PHP. It is still lacking some key features we want such as transactions, composite primary key support, a few more adapters (only MySQL and SQLite 3 work right now). But, we are very close to finishing this stuff up. You can take a look at  PHP ActiveRecord with PHP 5.3 . 
 
 Try PHP ADOdb. 
 I can't say it's the best, because I haven't used the others. But it's fast, it supports  Memcached  and caching. 
 And it's waaaay faster than  Zend Framework's  DB/Select. 
 
 Have a look at the  LEAP ORM for Kohana . It works with a bunch of databases, including  DB2 ,  Drizzle ,  Firebird ,  MariaDB , SQL Server,  MySQL , Oracle,  PostgreSQL , and  SQLite . With a simple autoload function, it can work with almost any PHP framework. The source code is on  GitHub  at  https://github.com/spadefoot/kohana-orm-leap . You can checkout  LEAP's tutorials  online. 
 The ORM library works with non-integer primary keys and composite keys. Connections are managed via a database connection pool and it works with raw SQL queries. The ORM even has a query builder that makes building SQL statements super simple. 
 
 You can check out  Repose  if you are feeling adventurous. Like  Outlet , it is modeled after  Hibernate . 
 It is still very early in its development, but so far the only restrictions on the domain model are that the classes are not marked final and properties are not marked private. Once I get into the land of PHP >= 5.3, I'll try to implement support for private properties as well. 
 
 If you are looking for an ORM that implements the Data Mapper paradigm rather than Active Record specifically, then I would strongly suggest that you take a look at  GacelaPHP . 
 Gacela features: 
 
 Data mapper 
 Foreign key mapping 
 Association mapping 
 Dependent mapping 
 Concrete table inheritance 
 Query object 
 Metadata mapping 
 Lazy & eager loading 
 Full  Memcached  support 
 
 Other ORM solutions are too bloated or have burdensome limitations when developing anything remotely complicated. Gacela resolves the limitations of the active record approach by implementing the Data Mapper Pattern while keeping bloat to a minimum by using  PDO  for all interactions with the database and Memcached. 
 
 MicroMVC has a 13 KB  ORM  that only relies on a 8 KB  database class . It also returns all results as ORM objects themselves and uses late static binding to avoid embedding information about the current object's table and meta data into each object. This results in the cheapest ORM overhead there is. 
 It works with  MySQL ,  PostgreSQL , and  SQLite . 
 
 Brazilian ORM:  http://www.hufersil.com.br/lumine . It works with PHP 5.2+. In my opinion, it is the best choice for Portuguese and Brazilian people, because it has easy-to-understand documentation and a lot of examples for download. 
 
 Agile Toolkit  has its own unique implementation of ORM/ActiveRecord and  dynamic SQL . 
 Introduction:  http://agiletoolkit.org/intro/1 
 Syntax (Active Record): 
 
 Syntax (Dynamic SQL): 
 
 While Dynamic SQL and Active Record/ORM is usable directly, Agile Toolkit further integrates them with User Interface and  jQuery UI . This is similar to  JSF  but written in pure PHP. 
 
 This will display AJAXified  CRUD  with for Employee model. 
 
 NotORM 
 
 
 PHP ORM Faces For PDO extension. See  PHP Faces Framework . 
 
 
 Look at  http://code.google.com/p/lworm/  . It is a really simple, but powerful, lightweight ORM system for PHP. You can also easily extend it, if you want.   
 
 Another great open source PHP ORM that we use is  PHPSmartDb . It is stable and makes your code more secure and clean. The database functionality within it is hands down the easiest I have ever used with PHP 5.3. 
 
 Doctrine is probably your best bet. Prior to Doctrine,  DB_DataObject  was essentially the only other utility that was open sourced. 
 
 If you are looking for an ORM, like  Hibernate , you should have look at  PMO . 
 It can be easily integrated in an  SOA  architecture (there is only a webservice classe to develop). 
 