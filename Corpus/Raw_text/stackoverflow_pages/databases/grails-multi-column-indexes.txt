*** grails-multi-column-indexes ***

 Can someone explain how to define multi column indexes in Grails? The documentation is at best sparse. 
 This for example does not seem to work at all:
 http://grails.org/GORM+Index+definitions 
 I've had some luck with this, but the results seems random at best. Definitions that works in one domain class does not when applied to another (with different names of course). 
 http://www.grails.org/doc/1.1/guide/single.html#5.5.2.6%20Database%20Indices 
 Some working examples and explanations would be highly appreciated!   
 
 The solution that has worked for me for multi-column indexes is: 
 
 This creates an index called 'name_idx' with the three columns in the index.   
 Downside: the columns are listed in the index in alphabetical order, not the order that they were entered. 
 
 To make your index multi-column, list the columns with comma separator (note, no space after the comma, to avoid  this bug . The second URL you point to hits the bug, as it says: 
 
 with a space; it should work as 
 
 The first URL you point to was a proposed change (I don't believe it's implemented currently and have no idea how likely it is to ever be). 
 
 AFAIK, the   closure shown  here  was never implemented, so those examples should be ignored (this page is for discussing possible implementations, rather than documenting an actual implementation). 
 The correct way to define a single-column index   for a   property is 
 
 Sorry, but I don't know how to define a multi-column index, try the  Grails mailing list  if you don't get an answer here. In the unlikely event that multi-column indices can't be declared directly in the domain classes, you could define them in an SQL file which creates them if they don't already exist (or drops and re-creates them). This SQL file could be executed by the   closure in  
 
 I needed to be able to control the order of the columns in my multi-column index and also make it unique. I worked around the GORM / Hibernate limitations by creating the index in Bootstrap using direct SQL: 
 
 