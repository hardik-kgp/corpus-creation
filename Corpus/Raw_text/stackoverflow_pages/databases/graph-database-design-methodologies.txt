*** graph-database-design-methodologies ***

 I want to use a graph database for a web application (involving a web of Users, Posts, Comments, Votes, Answers, Documents and Document-Merges and some other transitive relationships on Users and Documents). So I start asking myself if there is something like a design methodology for Graph Databases, i.e. a kind of analogon to the design principles recommended for Relational Databases (like those normal forms)? 
 Example questions (of many questions arising): 
 
 Is it a good idea, to create a Top-Node Users, having relationships ("exist") on any User-Node in the Database? 
 Is it a good idea to build in version management (i.e. create relationships (something like "follows")) pointing to updated versions of a Document / Post in a way that going back this relationship means watching the changes the document went through. 
 etc... 
 
 So, do we need a Graph Database Design Cookbook? 
 
 The Gremlin User Group ( http://tinkerpop.com/ ) and Neo4j User Group ( https://groups.google.com/forum/?fromgroups#!forum/neo4j ) are good places to discuss graph-database modeling.  
 You can create supernodes such as "Users," but it may be better and more performant to use indexes and create an index entry for each user with a key=element_type, value="user", id=user_node_id. 
 A "follows" relation is often used for people/friends like on Facebook and Twitter so I wouldn't use that for versioning. You can build a versioning system into to Neo4j that timestamps each entry and use a last-write wins algorithm, and there are other database systems like Datomic that have this built in. 
 See Lightbulb's model ( https://github.com/espeed/lightbulb/blob/master/lightbulb/model.py ) for an example blog model in Bulbs/Python ( http://bulbflow.com ).  
 