*** handling-identity-columns-in-an-insert-into-table-values-statement ***

 In SQL Server 2000 or above is there anyway to handle an auto generated primary key (identity) column when using a statement like the following? 
 
 My goal is to NOT use the column names at all. 
 
 By default, if you have an identity column, you do  not  need to specify it in the VALUES section.  If your table is: 
 
 Then you can do: 
 
 This will auto-generate the ID for you, and you don't have to think about it at all.  If you  , you can assign a value to the ID column. 
 
 Another "trick" for generating the column list is simply to drag the "Columns" node from Object Explorer onto a query window. 
 
 The best practice is to explicitly list the columns: 
 
 Otherwise, your original insert will break if you add another column to your table. 
 
 You have 2 choices: 
 1) Either specify the column name list (without the identity column). 
 2) SET IDENTITY_INSERT tablename ON, followed by insert statements that provide explicit values for the identity column, followed by SET IDENTITY_INSERT tablename OFF. 
 If you are avoiding a column name list, perhaps this 'trick' might help?: 
 
 
 Since it isn't practical to put code in a comment, in response to your comment in Eric's answer that it's not working for you... 
 I just ran the following on a SQL 2005 box (sorry, no 2000 handy) with default settings and it worked without error: 
 
 Are you perhaps sending the ID value over in your values list? I don't think that you can make it ignore the column if you actually pass a value for it. For example, if your table has 6 columns and you want to ignore the IDENTITY column you can only pass 5 values. 
 
 
 where 'customer' is table name 
 