*** handling-status-dilemma ***

 There is a recurring problem regarding status fields and similar predefined set of values. 
 Let's take an example of an ordering system with an order entity which has a status that could be New, In Progress, Paid, etc. 
 **The problem:**

 The Status of an order need to be 
 
 stored (in database) 
 processed (in backend) 
 communicated (to frontend in web service API) 
 
 How to do these three activities while keeping: 
 
 Preserve the meaning of the status. 
 efficient storage. 
 
 Here are some example implementations with their pros and cons: 
 **1- Status Table**

 
 The database will contain a status table with id, name 
 Order table references the id of the status. 
 
 The backend code has an enum that gives these predefined integers a meaning in the code 
 
 The web service API will return the status number 
 
 The frontend code has a similar enum that gives these predefined integers a meaning in the code. (like the backend code) 
 **Pros:**

 
 The database is well defined and normalized 
 
 **Cons:**

 
 The mapping between the status number and meaning is done in three places which gives space for human errors and inconsistency in defining the meaning of a specific status number. 
 The returned data from the API is not descriptive because   does not deliver a concrete meaning because it does not include the meaning of the  
 
 
 **2- Status ENUM**

 
 In database, the order table will contain a status columns with type ENUM containing the predefined statuses. 
 
 The backend code has constant values as code artifacts for the predefined status 
 
 OR 
 
 To Be used as follwoing 
 
 The web service API will return the status constant 
 
 The frontend code will have a similar construct for predefined status constants. (like the backend code) 
 **Pros:**

 
 The database is well defined and normalized 
 The returned data from the API is descriptive and deliver the required meaning. 
 The status constants used already contain their meaning which reduces the chances of errors. 
 
 **Cons:**

 
 Using an ENUM type for a column in database has its limitations. Adding a new status constant to that enum later using an ALTER command is expensive specially for huge tables like   table. 
 
 
 **3- My proposed solution:**

 
 The database will contain a status table with one field called   with type string which is the primary key of this table. 
 
 The order table will contain a field called   with type string which references the   field of the   table. 
 
 The backend code has constant values as code artifacts for the predefined status 
 
 OR 
 
 To Be used as follwoing 
 
 The web service API will return the status constant 
 
 The frontend code will have a similar construct for predefined status constants. (like the backend code) 
 **Pros:**

 
 The database is well defined and normalized 
 The returned data from the API is descriptive and deliver the required meaning. 
 The status constants used already contain their meaning which reduces the chances of errors. 
 Adding a new status constant is simple with INSERT command in the status table. 
 
 **Cons:**

 
 ??? 
 
 
 **I'd like to know if this is a feasible solution or there is a better solution for this recurring problem.**

 **Please include reasons why the proposed solution is bad and why your better solution is better**

 Thank you. 
 
 This my approach for this problem: 
 
 I add a column   with type   in the   table. 
 Define the constant of all your statuses in your class so you can reference them easily. 
 Make a validation rule on creation of order that the status value is in the only allowed ones you defines earlier. 
 
 This makes adding a new status very easily by just editing your code base, and the retrieved value for the status is still a string (descriptive). 
 I hope this answer your question. 
 
 I suggest this: 
 
 Store in DB as status(unsigned tinyint, char(5)). 
 Id must be powers of 2: 1,2,4,8,... 
 At backend code const name must be humanized, but value -- int:  
 At backend you should not use consts directly, but use status class object, which will contain some methods like   and  . 
 This class's test will check that all of it's values are in DB and all DB's values are covered by class. 
 
 
 space for human errors 
 
 Tests invented to avoid human errors. 
 Statuses are usually not so complex and has not so many values to mess with them. 
 Enum is evil.  http://komlenic.com/244/8-reasons-why-mysqls-enum-data-type-is-evil/ 
 Regarding your proposal: 
 
 The database is well defined and normalized 
 
 No. It's denormalized. 
 
 The returned data from the API is descriptive and deliver the required meaning. 
 
 You always can use wrapper, that goes into status table to get human name. 
 
 The status constants used already contain their meaning which reduces the chances of errors. 
 
 Const name are for humans and values are for Benders. 
 
 Adding a new status constant is simple with INSERT command in the status table. 
 
 Same in 1st and my solution. 
 