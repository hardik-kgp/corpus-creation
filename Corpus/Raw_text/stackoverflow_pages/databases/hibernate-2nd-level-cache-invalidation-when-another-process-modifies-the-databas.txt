*** hibernate-2nd-level-cache-invalidation-when-another-process-modifies-the-databas ***

 We have an application that uses Hibernate's 2nd level caching to avoid database hits.  
 I was wondering if there is some easy way to invalidate the Java application's Hibernate 2nd level cache when an outside process such as a MySQL administrator directly connected to modify the database (update/insert/delete).  
 We are using  EHCache  as our 2nd level cache implementation. 
 We use a mix of @Cache(usage = CacheConcurrencyStrategy.READ_WRITE) and @Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE), and we don't have Optimistic concurrency control enabled using timestamps on each entity.  
 The SessionFactory contains methods to manage the 2nd level cache:
 -  Managing the Caches 
 
 But because we annotate individual entity classes with @Cache, there's no central place for us to "reliably" (e.g. no manual steps) add that to the list. 
 
 There's no real way for Hibernate's 2nd level cache to know that an entity changed in the DB unless it queries that entity (which is what the cache is protecting you from). So maybe as a solution we could simply call some method to force the second level cache to evict everything (again because of lack of locking and concurrency control you risk in progress transactions from "reading" or updating stale data). 
 
 Based on  ChssPly76's  comments here's a method that evicts all entities from 2nd level cache (we can expose this method to admins through JMX or other admin tools): 
 
 
 SessionFactory  has plenty of   methods precisely for that purpose: 
 
 
 Both hibernate and JPA now provide direct access to the underlying 2nd level cache: 
 
 
 I was searching how to invalidate all Hibernate caches and I found this useful snippet: 
 
 Hope it helps to someone else. 
 
 You may try doing this: 
 
 I hope It helps. 
 
 One thing to take into account when using distributed cache is that QueryCache is local, and evicting it on one node, does not evicts it from other. Another issue is - evicting Entity region without evicting Query region will cause N+1 selects,when trying to retrieve date from Query cache. Good readings on this topic  here .  
 