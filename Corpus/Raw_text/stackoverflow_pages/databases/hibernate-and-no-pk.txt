*** hibernate-and-no-pk ***

 Is it possible to create a table (from a JPA annotated Hibernate  ) that does not contain a primary key / Id? 
 I know this is not a good idea; a table should have a primary key. 
 
 Roger's self-answer is correct. To elaborate a bit on what is meant (I wasn't clear on it at first and figured this would help): 
 Say you have you have a table Foo as such: 
 
 Normally, you can write a class w/Annotations to work with this table:  
 
 .. But, darn. This table has nothing we can use as an id, and it's a legacy database that we use for [insert vital business function]. I don't think they'll let me start modifying tables in order for me to use hibernate.  
 You can, instead, split the object up into a hibernate-workable structure which allows the entire row to be used as the key. (Naturally, this assumes that the row is unique.) 
 Split the Foo object into two thusly: 
 
 and 
 
 } 
 .. And that should be it. Hibernate will use the Embeddable key for its required identity and you can make a call as normal: 
 
 Hope this helps first-timers with getting this working.  
 
 Use following code; Hibernate doesn't have its own logic to distinguish duplicate records  
 Let me know if there are any issues with this approach 
 
 
 I found that its not possible to do so. So bad luck for those working with legacy systems. 
 If you reverse engineer (create JPA annotated entities from existing JDBC connection) the table will create two Java classes, one Entity and with one field; id, and one embeddable id containing all the columns from your relation. 
 
 i found that this trick works: 
 
 
 You don't need to create a separate class to be your @Id or Primary Key. Just use an Integer (or whatever). Also, don't publish the fake key as developers who use it might think it's real and otherwise try to use it. Lastly, this is best used in a VIEW. I agree with earlier posts that in most, if not all cases, tables should have a primary key. For example: 
 
 
 To Create the Pojo from table - use the reverse Engineering method existing in eclipse. 
For the non- primary key table, eclipse will generate the two Pojo classes. 
 
 
 Adding to Awied's comment.
If then you want to search for a bar, use following HQL. 
 
 
 When it comes to views instead of searching for workarounds in Hibernate it might be easier to add dummy id in your database view. I wrote about it in another question:  https://stackoverflow.com/a/44050230/1673775 
 
 I have found solution for tables without primary key and null as values. It will work on oracle DB. Maybe something similar exists for other DBs. 
 
 You should create new primary key in the POJO class: 
 @Id
@Column(name="id")
private Integer id; 
 
 and use createNativeQuery like this 
 
 The native query will generate primary key and you will get unique results. 
 
 Though ROWID is a pseudo-column,yet as ROWID corresponds to the physical address of a ROW, it is the quickest mean to retrieve any row data. As @Id is used to identify the object uniquely and ROWID is unique inside a table, we can exploit it to overcome the issue we are discussing about. Actually, if we don't need any meaningful unique identifier, ROWID is the best column to annotate with @Id annotation as it corresponds to the physical address of the row. The following code worked for me.
      
 