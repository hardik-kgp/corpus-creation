*** hibernate-just-save-an-entity-with-embeddedid-as-primary-key ***

 I wanted to learn hibernate basics and do not understand why my application does not work, when adding an entry to my table using the   annontations for composited primary keys: 
 Class representing the PK: 
 
 Persistent class: 
 
 I assumed that after creating an OHLC instance I could add it's data to my database table with the following function (in a class called  ): 
 
 But I got the following PropertyAccessException/IllegalArgumentException with stack traces: 
 
 **EDIT1:**
  
 
 **EDIT2:**
 
I have testet hibernate-core version 5.3.7 and 5.4 with java 1.8 
 **EDIT2:**
 
There is just one OHLCV class and one OHLCVKey class in my classpath, I have also tried to rename the classes. 
 
 I think you are hitting a bug with composite keys mapped as EmbededID in hibernate 5.0 and 5.1 It is supposed to be fixed in 5.1.1
 https://hibernate.atlassian.net/browse/HHH-10618 
 Try changing the hibernate version. Also I can see  in one of the comments that @K.Nicholas is saying that the same code works for him. This is why I am even more inclined to think you are hitting this bug. 
 
 Downgrading to version  
 
 4.3.11.Final 
 
 worked... 
 
 It's been a while since I touched hibernate , but from the error it sounds like it is unable to access 
  this field. To narrow it down, I'd suggest two things. First, see if you can remove the casting in this line   and make it  , just to rule out if it is the casting that is causing it or the save itself. Second, although it doesn't make much sense, try if you can change the access modifier here to private.  
 
 If any of these two don't help, try using HQL and see.   
 
 
 That peace of stacktrace means that Hibernate is trying to set a field value to some object, but their classes are incompatible: 
 
 It means that Hibernate has loaded metadata from different class rather than from a class of an object you are trying to save. Please, check if there are only one class OHLCV in the classpath of your application, because example you provided works well. 
 