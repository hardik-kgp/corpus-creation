*** hibernate-mapping-a-second-embeddable-field-in-a-subclass ***

 I'm trying to map an @Embeddable object in a subclass whose parent class already has a field of that @Embeddable type. 
 The hibernate  Embeddable Objects documentation  claims I can use the @AttributeOverrides to override the column names of an @Embeddable object: 
 e.g. 
 
 Here's the case I have: 
 
 The error I get is: 
 
 org.hibernate.MappingException:
  Repeated column in mapping for entity:
  Achievement column: contentID (should
  be mapped with insert="false"
  update="false")   at
  org.hibernate.mapping.PersistentClass.checkColumnDuplication(PersistentClass.java:652)
    at
  org.hibernate.mapping.PersistentClass.checkPropertyColumnDuplication(PersistentClass.java:674)
    at
  org.hibernate.mapping.PersistentClass.checkPropertyColumnDuplication(PersistentClass.java:670)
    at
  org.hibernate.mapping.PersistentClass.checkColumnDuplication(PersistentClass.java:696)
    at
  org.hibernate.mapping.PersistentClass.validate(PersistentClass.java:450)
    at
  org.hibernate.mapping.SingleTableSubclass.validate(SingleTableSubclass.java:43)
    at
  org.hibernate.cfg.Configuration.validate(Configuration.java:1108)
    at
  org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:1293)
    at
  org.hibernate.cfg.AnnotationConfiguration.buildSessionFactory(AnnotationConfiguration.java:867) 
 
 **UPDATE:**

 I looked in for Hibernate issues relating to this and the GRAILS project claimed they fixed this issue but their annotation solution doesn't seem to be valid javax.persistence annotations (maybe it's a new version). 
 JPA @Embeddable/@Embedded throws org.hibernate.MappingException: Repeated column in mapping for entity 
 
 The problem seems to be this: 
 
 You are making the contentPath column name to be "contentId" and that is clashing with your AttributeOverride annotation later on. 
 Try this: 
 
 **UPDATE**

I am also wondering about this: 
 
 You seem to be changing the name of the contentId column here to awardedItem. Is that really necessary? 
 
 Vincent is right. The   Name field is referring to a column name when it should be a attribute/property of a class.  
 
 Notice that the name is for the class property not the database column. 
 See  documentation 
 
 I'm using 
 
 as a workaround. 
 