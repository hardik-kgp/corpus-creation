*** hibernate-postgresql-notify-functionality ***

 I`m writing an app that is using hibernate + JPA as an ORM and postgresql 9.3 as a database backend and I need to react with some java code to some database events. 
To be more precise I want to build an trigger that uses pg_notify() when a new row is inserted into the table. 
I have read about that but all the tutorials were with a direct jdbc connection and not through hibernate. 
I (think that I) cannot use hibernate events as the rows are not inserted through hibernate but by a 3rd party app.   
 Is there any way that I can receive notifications send with pg_notify through hibernate ?     
 -- update 
Right now I have an classCastException :  
 
 I have to mention that I use Glassfish 4.0 as AS. The connection pool is created on glassfish and accessed by app through jndi. Also the EntityManager is injected by  the container with Spring. Here is my code:   
 
 } 
 -- update 
I have fixed the classcast exception :   
 
 But it still seems that i do not receive the notifications. 
 update --- 
After i have implemented solution proposed by Neil i have this error in glassfish logs when i undeploy app:    
 
 I have to mention that the destroy() method is invoked when the app is undeployed.
And if I spy with visualVM the thread is still alive after the application was undeployed.   
 
 
 
 Why do you need Hibernate here? Just use JDBC. You probably want to fire an application-wide event anyways (perhaps to send a websocket msg or bust an ehcache), and if you need to do something w hibernate, subscribe to that event and do something with Hibernate. 
 http://impossibl.github.io/pgjdbc-ng/  is your friend here. No polling required.  
 
 See  http://blog.databasepatterns.com/2014/04/postgresql-nofify-websocket-spring-mvc.html 
 
 Hibernate doesn't have direct support for PostgreSL notifications, because this is a specific database feature that's not supported by all DB vendors and it doesn't fit into the ORM framework responsibility. 
 Nevertheless you could still try hooking it into your current running transaction. You need access to the current database connection do  add the listening hook . 
 This can be done with the  Session.doWork()  support: 
 
 