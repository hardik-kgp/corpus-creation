*** how-can-i-create-a-case-insensitive-database-index-in-django ***

 I am using Django to create some database tables, as so: 
 
 I am then running lookup queries to find the appropriate row with the correct  , matched in a case-insensitive way. E.g.: 
 
 This lookup clause translates to something like so in SQL: 
 
 On Postgres, I can perform an   query on the above, and I get this query plan: 
 
 Because the   field is not indexed, and is not indexed in a case-normalized way, the above query needs to perform a slow Seq[uential] Scan operation across all database rows. 
 Then I insert a simple case-normalized index, e.g.: 
 
 The above query now runs about 6x faster: 
 
 My question is: how can I inject the creation of advanced DB indexes into the Django model management commands? 
 
 Django 1.11 (2.0 should be fine too) + PostgreSQL: 
 
 First, create an empty migration: 
 
 Django uses   for inexact lookups. So create a migration for adding an   index: 
 
 
 
 Prior to Django 1.9 (not yet released), you could use the sqlcustom command, but if you look at the dev documentation for the upcoming 1.9, you'll see that that command is conspicuously missing. 
 **So:**

 
 In <= 1.8.*, @daniel-rucci's answer applies. Put your SQL in an SQL directory and it'll be run in non-deterministic order. 
 In >= 1.9, you need to start using the new  RunSQL function  as part of a migration. You could also do this in 1.7 or 1.8, if you so desired. 
 
 
 To inject custom sql into the django model management commands check out  django-admin.py sqlcustom 
 You would put an sql file containing your create index in  
 From the docs on when they are applied:  
 
 The SQL files are piped directly into the database after all of the
  modelsâ€™ table-creation statements have been executed. Use this SQL
  hook to make any table modifications, or insert any SQL functions into
  the database. 
 
 And you can view the custom sql for each app by running  
 