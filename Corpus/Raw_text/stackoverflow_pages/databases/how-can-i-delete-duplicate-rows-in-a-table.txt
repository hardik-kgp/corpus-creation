*** how-can-i-delete-duplicate-rows-in-a-table ***

 I have a table with say 3 columns. There's no primary key so there can be duplicate rows. I need to just keep one and delete the others. Any idea how to do this is Sql Server? 
 
 I'd SELECT DISTINCT the rows and throw them into a temporary table, then drop the source table and copy back the data from the temp.
 **EDIT:**
 now with code snippet! 
 
 
 Add an identity column to act as a surrogate primary key, and use this to identify two of the three rows to be deleted. 
 I would consider leaving the identity column in place afterwards, or if this is some kind of link table, create a compound primary key on the other columns. 
 
 The following example works as well when your PK is just a subset of all table columns. 
 (Note: I like the approach with inserting another surrogate id column more. But maybe this solution comes handy as well.) 
 First find the duplicate rows:  
 
 If there are only few, you can delete them manually: 
 
 The value of "rowcount" should be n-1 times the number of duplicates. In this example there are 2 dulpicates, therefore rowcount is 1. If you get several duplicate rows, you have to do this for every unique primary key. 
 If you have many duplicates, then copy every key once into anoher table: 
 
 Then copy the keys, but eliminate the duplicates. 
 
 In your keys you have now unique keys. Check if you don't get any result: 
 
 Delete the duplicates from the original table: 
 
 Insert the original rows: 
 
 btw and for completeness: In Oracle there is a hidden field you could use (rowid): 
 
 see:  Microsoft Knowledge Site 
 
 Here's the method I used  when I asked this question  - 
 
 
 This is a way to do it with Common Table Expressions, CTE. It involves no loops, no new columns or anything and won't cause any unwanted triggers to fire (due to deletes+inserts).  
 Inspired by  this article . 
 
 
 This is a tough situation to be in. Without knowing your particular situation (table size etc) I think that your best shot is to add an identity column, populate it and then delete according to it. You may remove the column later but I would suggest that you should keep it as it is really a good thing to have in the table 
 
 After you clean up the current mess you could add a primary key that includes all the fields in the table. that will keep you from getting into the mess again.
Of course this solution could very well break existing code. That will have to be handled as well. 
 
 Can you add a primary key identity field to the table? 
 
 Manrico Corazzi - I specialize in Oracle, not MS SQL, so you'll have to tell me if this is possible as a performance boost:- 
 
 Leave the same as your first step - insert distinct values into TABLE2 from TABLE1. 
 Drop TABLE1. (Drop should be faster than delete I assume, much as truncate is faster than delete). 
 Rename TABLE2 as TABLE1 (saves you time, as you're renaming an object rather than copying data from one table to another). 
 
 
 Here's another way, with test data 
 
 
 What about this solution : 
 First you execute the following query :  
 
 And then you just have to execute the returned result set 
 
 I've handled the case when you've got only one column, but it's pretty easy to adapt the same approach tomore than one column. Let me know if you want me to post the code. 
 
 How about: 
 
 
 I'm not sure if this works with DELETE statements, but this is a way to find duplicate rows: 
 
 I'm not sure if you can just change the "SELECT" to a "DELETE"  (someone wanna let me know?) , but even if you can't, you could just make it into a subquery. 
 