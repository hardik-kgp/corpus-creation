*** how-can-i-get-my-database-under-version-control-with-perl ***

 I've been looking at the options for getting our database schemas under version control.  It seems that Ruby folks have got  Rails Migrations , and .NET folks have got a few options (for instance  this ,  this , and  this ).  What about Perl? 
 I've seen this  thread on PerlMonks  which doesn't have much, although it mentions  DBIX::Migration::Directories .  Is anyone actually using this module, or some other module?  Or do you roll your own DB migration solutions? 
 Gratuitous details:   
 
 We  **don't**
 use DBIx::Class for the most part 
 We use MySQL 
 We use SVN 
 
 
 In  POPFile  we use our own solution. We store a schema version number in the db and if the program detects that there is a newer schema, it will update the db accordingly. This is not exactly the best and most fun part of our code. 
 To be honest, I fail to see the advantage of using DBIx::Migration::Directories if you aren't already using DBIx::Class. You have to provide the SQL and the version numbers and the database handle. You might as well provide a little more code to find the sql file and and feed it to the database.  
 Of course, having the schema in version control is a great bonus. 
 
 At work, we use a modified version of  DBIx::Migration  (it has some limitations, such as no more than 10 migrations).  Then, you have a core schema that you've dumped from your database and when the version number is too low, you upgrade your database using the migrations from the migration schema directory. 
 I also highly recommend the  Database Refactoring  book.  Amongst other things, it will give you excellent techniques for managing migrations  safely  in such a way that if you need to roll back, you don't lose data (such as when you drop a column you think you don't need). 
 To help with the automatic deprecation schedules it suggests, I've written  Devel::Deprecate  so that you don't need to remember when to do the deprecations.  Your code will complain loudly for you (and only in testing, not in production). 
 **Important**
:  You'll periodically find that you're applying so many database migration levels with this technique that you'll sometimes need to "bump up" your minimum base migration because it takes too long to rebuild the database.  Just take a new dump of the database at the desired migration level and remove all migrations less than or equal to that level. 
 **Update**
: Fast forward a few years and today I recommend  sqitch . It's designed from the ground up to handle the case of putting a database under version control without tying you to a particular programming language or VCS. 
 
 One very interesting project that's still probably a little young to rely on is Adam Kennedy's  ORLite::Migrate  which takes it's inspiration from Rails migrations.  He  wrote up a very interesting journal  over at use.perl.org about his plans and I hope to keep an eye on it for the future. 
 It does appear that this package only works with SQLite at the moment but I think Adam's planning on building this out to be more database agnostic in the future. 
 
 We use a system similar to what Manni described.  The two big disadvantages are: 
 
 Can't rollback schema changes (typically this is rare, not well tested and hard anyway so having to do it manually isn't a big deal IMO). 
 Using a sequential version number is a pain when you develop in multiple branches -- since you are using SVN this isn't as likely to be an issue as if you were using git though.  :-) 
 
 The script script I use is here:  database_update  and there's a small  example data file . 
 
 How about  sqitch ?  It advertises itself as a "database change management application",  
 
 There is an interesting CPAN module ( Database::Migrator ). I have used it, and works fine in order to handle the migrations of your project. 
 Each migration goes into its own directory. Migrations are applied in sorted order, typically you name them starting with a number prefix. The migration directory can either contain files with SQL or Perl.  
 