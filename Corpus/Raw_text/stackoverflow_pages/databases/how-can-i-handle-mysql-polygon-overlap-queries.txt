*** how-can-i-handle-mysql-polygon-overlap-queries ***

 For example, I have a table of users. Users each are a "square" (or circle) on a map.  
 I want to find users that  **overlap**
 another square on a map.  Is this currently supported in MySQL 5.6? (What about development versions of MySQL?) 
 Please note that I'm not looking for "find users with a point inside this square".  I'm looking for "find users whose square overlaps this square (not necessarily contain; as long as both squares touch - it's fine)". 
 It would really help if someone could provide an example of INSERTING records and then QUERYING them using ST_INTERSECT polygons. 
 
 SQL fiddle 
 
 **Create table with polygon column**

 Please note, that to use spatial indexes, you can not use InnoDB.
You can use the geometry without spatial indexes, but performance degrades as usual. 
 
 **Get 3 squares and a triangle inserted**

 
 **Select everything that intersects small square in lower left corner**

(purple square #1) 
 
 **Select everything that intersects triangle ranging from lower left to lower right corners to upper right corner)**

(squares #1 and #2 and triange #4.) 
 
 **Selects everything in square that is outside of our image**

(nothing) 
 
 Edit #1: 
 I reread the question and I think you have the spatial relations a little confused. If what you want is find everything that fits wholy inside a square (polygon), then you need to use Contains/ST_Contains. Please see  spatial functions in MySQL documentation  to find out which function does the job for you.
Please note the following difference between ST/MBR functions:  
 **Selects everything that is completely inside a square (#0 from below)**

(squares #1, #2, triangle #4) 
 
 **Selects everything that is completely inside a square (#0 from below) and shares no edges**

(square #2, triangle #4) 
 
 Edit #2: 
 Very nice addition from @StephanB ( SQL fiddle ) 
 
 To list all intersections join the table onto itself and filter away
  the reverse intersection 
 
 **Select any overlapping objects**

 
 (just note, that you should remove the   if you are working with  , as   while  ) 
 In the following picture (non-exhaustive list): 
 
 2 intersects #6. 
 6 intersects #2 
 0 intersects #1, #2, #3, #4, #5 
 1 intersects #0, #5 
 0 contains #1, #3, #4 and #5 (#1, #3, #4 and #5 are within #0) 
 1 contains #5 (#5 is within #1) 
 0 st_contains #3, #4 and #5 
 1 st_contains #5 
 
 
 Edit #3: Searching by distance/Working in (with) circles 
 MySQL does not directly support circle as a geometry, but you can use spatial function   to work around it. What   does, is creating a buffer of said distance around geometry. If you start with geometry point, the buffer is indeed a circle. 
 You can see what buffer actually does by calling just: 
 
 (result is quite long, so i won't post it here) It actually creates polygon which represents the buffer - in this case (and my MariaDB) the result is 126 point polygon, which aproximates a circle. With such a polygon you can work as you would work with any other polygon. So there should be no performance penalty. 
 So if you want to  **select all polygons which fall into a circle**
 you can rinse and repeat previous example
(this will find just the square #3) 
 
 **Select all polygons which intersect with a circle**

 
 When working with shapes different from rectangles, you should use the   functions. Functions without   use a bounding rectangle. So the previous example selects the triangle #4 even though it is not in the circle. 
 As   creates quite big polygons, there will definitely be some performance penalty over using the   method. Unfortunately I can not quantify it. You will have to do some benchmarking.  
 
 Another way of finding objects by distance is using the   function.  
 **Select all elements from the table and compute their distance from point POINT(6 15)**

 
 You can use   in   clause as well. 
 **Select all elements whose distance from POINT(0 0) is less or equal than 10**
 (selects #1, #2 and #3) 
 
 Although the distance is computed from closest point to closest point. Making it similar to the  . So the above example will select #2 even though it does not fit wholly inside the circle. 
 And yes, the second argument (0) for  , does not play any role, you can safely ignore it. I have picked it up from some sample and it kind of stuck in my answer. I have left it out in my later edits. 
 btw.  phpMyAdmin  support for spatial extension is not flawless, but it helps quite a bit to see what is in your database. Helped me with these images I have attached. 
 