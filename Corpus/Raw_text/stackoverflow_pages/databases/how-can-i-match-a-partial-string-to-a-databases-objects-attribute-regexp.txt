*** how-can-i-match-a-partial-string-to-a-databases-objects-attribute-regexp ***

 I have a database containing a list of movies. A typical entry look like this: 
 
 Now I'm trying to make a series of search tests pass and so far I have made a single test case pass where if you type the title "Manhatten and the Murderer" in a text field it will find the movie that you want. The problem is with partial matching.  
 Now I'd like a way to search "Manhat" and match the record "Manhatten and the Murderer". I also want it to match with any movie that has "Manhat" in it. For example, it would return maybe 2 or 3 others like title: "My life in Manhattan", title: "The Big Apple in Manhattan" etc. etc. 
 Below is the code that I have so far in my Movie model: 
 
 My question is, how can I set this up? My problem is the "where(title:) line. One thought was to use Regexp to match the title attribute. Any help would be appreciated! Thanks. 
 
 Use a query that searches a substring in between: 
 
 For example:  
 
  will get you:  
  will get:      
  will get you both:  
 
 But, if you're searching through movies synopsis, you should use  Thinking Sphinx  or  Elastic Search 
 For example, with Elastic Search, you could set the synopsis like this: 
 Add  : 
 
 Index your data with  
 And then run Sphynx with:  
 You can search just like this: 
 
 
 Elastic Search is a great alternative to ThinkingSphinx, there's even a  RailsCast  about it, so you should definitely take a look to see what really suites you best... Hope this helps! 
 
 You do not need regex to find movies that have the search string. You can use SQL query like this: 
 
 That would return all movies start with "Batman" 
 
 That would return all movies that have Batman anywhere in it's title.
I think you figured out the '%' is a joker character in the query. 
 
 One option is to run a search server alongside your Rails application. It is certainly my go to solution. This route offers a ton of features not found within Rails itself and might be overkill, but worth consideration.  
 I use Sphinx and implement it using the thinking-sphinx gem. 
 Resources: 
 http://pat.github.io/thinking-sphinx/   
 http://sphinxsearch.com/ 
 