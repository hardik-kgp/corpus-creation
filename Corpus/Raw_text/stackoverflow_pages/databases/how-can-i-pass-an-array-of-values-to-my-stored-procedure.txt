*** how-can-i-pass-an-array-of-values-to-my-stored-procedure ***

 I want to be able to pass an "array" of values to my stored procedure, instead of calling "Add value" procedure serially. 
 Can anyone suggest a way to do it? am I missing something here? 
 Edit: I will be using PostgreSQL / MySQL, I haven't decided yet. 
 
 As Chris pointed, in PostgreSQL it's no problem - any base type (like int, text) has it's own array subtype, and you can also create custom types including composite ones. For example: 
 
 Now you can easily create array of test: 
 
 You can write a function that will multiply n*m for each item in array, and return sum of products: 
 
 and run it: 
 
 
 If you plan to use MySQL 5.1, it is not possible to pass in an array. 
See the MySQL 5.1  faq   
If you plan to use PostgreSQL, it is possible look  here 
 
 You didn't indicate, but if you are referring to SQL server,  here's one way . 
 And the MS support  ref . 
 
 I don't know about passing an actual array into those engines (I work with sqlserver) but here's an idea for passing a delimited string and parsing it in your sproc with this function.  
 
 
 For PostgreSQL, you could do something like this: 
 
 Then, you could pass a delimited string to your stored procedure. 
 Say, param1 was an input param containing  
 The statement: 
 
 results in a result set that can be joined or inserted. 
 Likewise, for MySQL, you could do something like this: 
 
 Then simply CALL   should produce the same result set as the above PostgreSQL query. 
 
 Thanks to JSON support in MySQL you now actually have the ability to pass an array to your MySQL stored procedure. Create a JSON_ARRAY and simply pass it as a JSON argument to your stored procedure. 
Then in procedure, using MySQL's WHILE loop and MySQL's JSON "pathing" , access each of the elements in the JSON_ARRAY and do as you wish. 
An example here  https://gist.githubusercontent.com/jonathanvx/513066eea8cb5919b648b2453db47890/raw/22f33fdf64a2f292688edbc67392ba2ccf8da47c/json.sql   
 
 Incidently, here is how you would add the array to a function (stored-proc) call: 
 
 