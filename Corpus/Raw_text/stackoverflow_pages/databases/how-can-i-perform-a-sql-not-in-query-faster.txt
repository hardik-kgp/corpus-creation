*** how-can-i-perform-a-sql-not-in-query-faster ***

 I have a table (EMAIL) of email addresses: 
 
 and a table (BLACKLIST) of blacklisted email addresses: 
 
 and I want to select those email addresses that are in the EMAIL table but NOT in the BLACKLIST table.  I'm doing: 
 
 but when the row counts get very high the performance is terrible. 
 How can I better do this?   (Assume generic SQL if possible.  If not, assume T-SQL.) 
 
 You can use a left outer join, or a   clause. 
 Left outer join: 
 
 Not Exists: 
 
 **Both**
 are quite generic SQL solutions (don't depend on a specific DB engine). I would say that the latter is a little bit more performant (not by much though). But definitely more performant than the   one. 
 As commenters stated, you can also try creating an index on  , that should help speed up the execution of your query. 
 
 NOT IN differs from NOT EXISTS if the blacklist allow null value as EmailAddress. If there is a single null value the result of the query will always return zero rows because NOT IN (null) is unknown / false for every value. The query plans therefore differs slighyly but I don't think there would be any serious performance impact. 
 A suggestion is to create a new table called VALIDEMAIL, add a trigger to BLACKLIST that removes addresses from VALIDEMAIL when rows are inserted and add to VALIDEMAIL when removed from BLACKLIST. Then replace EMAIL with a view that is a union of both VALIDEMAIL and BLACKLIST. 
 
 
 Equals 
(BTW there is probably an owner) 
 
 will give you the rows that are different even if NULL in an EmailAddress 
 