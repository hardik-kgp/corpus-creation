*** how-can-i-populate-a-class-from-the-results-of-a-sql-query-in-c ***

 I've got a class like this: 
 
 I can fetch those details from my database like this: 
 
 I don't want to have to manually run through a   or   to set the values. 
 I'm sure there's a way to populate the class using some kind of binding / mapping mechanism, but the only stuff I could find was for binding to winforms components or using XAML. 
 Is there some kind of attribute I can apply to my properties / class to have the class automatically populated from a query row? 
 
 I've decided to propose another answer, which actually extension to the answer provided by Alex (so all credits to him), but it introduces attributes for the sake of column-name-2-property-name mapping. 
 First of all custom attribute to hold column name is needed: 
 
 The attribute must be applied to those properties of the class, that are to be populated from database row: 
 
 And rest goes as Alex proposed, except that the attribute is used to retrieve column name: 
 
 
 You need to either map the properties yourself or use an ORM (Object relational mapper). 
 Microsoft provides  Entity Framework , but  Dapper  requires less overhead and might be a viable option depending on your requirements. 
 In your case, the Dapper code would look something like: 
 
 For the sake of completeness, it's important to point out that I'm talking about Dapper here because the question concerns mapping SQL results to objects. EF and Linq to SQL will do this too, but they will also do additional stuff, like translating Linq queries into SQL statements, which might also be useful. 
 
 If you don't want to leverage an ORM framework (Entity Framework etc.) you can do it by hand: 
 
 you use it like this: 
 
 Only thing to take care of, is the order of the fields in the query (it MUST match the order of the properties as they are defined in your class). 
 All you need to do is build the class, write a query, then it will take care of the "mapping". 
 **WARNING**
 I use this method a lot and never had any issue, but  **it doesn't work properly for partial classes**
. If you come to partial models you're much better off using an ORM framework anyway. 
 
 I would use Linq to SQL and do it as follows: 
 
 
 There is no such functionality by default in raw .NET Framework. You could use Entity Framework, but if it's not a good solution for you, then an alternative would be reflection mechanism. 
 
 Create some custom attribute class that can hold a column name for each public property of your class. 
 After retrieving record from database instantiate an object of   class and enumerate properties. For each property that has you custom attribute - use   of   to change value according to column name defined in custom attribute. 
 
 Take the following into consideration: 
 
 the solution is quite and overhead to simple assignments; it only makes sense if you have many tables and many classes like   - and wish to write one code to automatically initialize all of them 
 reflection is an overhead itself - so some caching would be required in the long run 
 
 
 One possible solution: 
 In SQL query you can use  "PATH Mode with FOR XML "  clause. 
 The result of the query will be an XML, which you can  deserialize directly to C# objects .  
 It also works very well on large nested SQL queries. 
 
 Then you should be using Entity Framework or Linq To SQL and if you dont want to use that, then you need to map/fill it yr self 
 more info on Entity Framework
 http://msdn.microsoft.com/en-us/data/ef.aspx 
 more info on Linq to SQL
 http://msdn.microsoft.com/en-us/library/bb386976.aspx 
 
 
 