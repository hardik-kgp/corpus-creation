*** how-do-i-alter-the-position-of-a-column-in-a-postgresql-database-table ***

 I've tried the following, but I was unsuccessful: 
 
 
 " Alter column position " in the PostgreSQL Wiki says: 
 
 PostgreSQL currently defines column
  order based on the   column of
  the   table. The only way
  to change column order is either by
  recreating the table, or by adding
  columns and rotating data until you
  reach the desired layout. 
 
 That's pretty weak, but in their defense, in standard SQL, there is no solution for repositioning a column either.  Database brands that support changing the ordinal position of a column are defining an extension to SQL syntax. 
 One other idea occurs to me:  you can define a   that specifies the order of columns how you like it, without changing the physical position of the column in the base table. 
 
 This post is old and probably solved but I had the same issue.  I resolved it by creating a view of the original table specifying the new column order.   
 From here I could either use the view or create a new table from the view.   
 
    CREATE VIEW original_tab_vw AS
    SELECT a.col1, a.col3, a.col4, a.col2
    FROM original_tab a
    WHERE a.col1 IS NOT NULL --or whatever
 
 
    SELECT * INTO new_table FROM original_tab_vw
 
 Rename or drop the original table and set the name of the new table to the old table. 
 
 One, albeit a clumsy option to rearrange the columns when the column order must absolutely be changed, and foreign keys are in use, is to first dump the entire database with data, then dump just the schema ( ). Next edit the schema file to rearrange the columns as you would like, then recreate the database from the schema, and finally restore the data into the newly created database. 
 
 In PostgreSQL, while adding a field it would be added at the end of the table. 
If we need to insert into particular position then 
 
 
 I don't think you can at present: see  this article on the Postgresql wiki . 
 The three workarounds from this article are:  
 
 Recreate the table 
 Add columns and move data 
 Hide the differences with a view. 
 
 
 Open the table in PGAdmin and in the SQL pane at the bottom copy the SQL Create Table statement. Then open the Query Tool and paste. If the table has data, change the table name to 'new_name', if not, delete the comment "--" in the Drop Table line. Edit the column sequence as required. Mind the missing/superfluous comma in the last column in case you have moved it. Execute the new SQL Create Table command. Refresh and ... voil√†. 
 For empty tables in the design stage this method is quite practical. 
 In case the table has data, we need to rearrange the column sequence of the data as well. This is easy: use   to import the old table into its new version with: 
 
 ... where  ,  ,   are the columns  ,  ,   of the old table in their new positions. Please note that in this case you  **must use a 'new' name**
 for the edited 'old' table, or  **you will lose your data**
. In case the column names are many, long and/or complex use the same method as above to copy the new table structure into a text editor, and create the new column list there before copying it into the   statement. 
 After checking that all is well,   the old table and change the the 'new' name to 'old' using   and you are done. 
 
 I use Django and it requires id column in each table if you don't want to have a headache.
Unfortunately, I was careless and my table bp.geo_location_vague didn't contain this field.
I initialed little trick.
Step 1: 
 
 Step 2: (without create table - table will create automaticaly!)     
 
 Step 3: 
 
 Because I need have bigserial pseudotype in the table. After SELECT * into pg will create bigint type insetad bigserial. 
 step 4: 
Now we can drop the view, drop source table and rename the new table in the old name.
The trick was ended successfully. 
 