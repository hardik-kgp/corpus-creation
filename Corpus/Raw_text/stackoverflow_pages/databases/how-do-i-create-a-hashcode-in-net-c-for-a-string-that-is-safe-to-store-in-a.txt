*** how-do-i-create-a-hashcode-in-net-c-for-a-string-that-is-safe-to-store-in-a ***

 To quote from  Guidelines and rules for GetHashCode   by  Eric Lippert: 
 
 Rule:  **Consumers of GetHashCode cannot rely upon it being stable over time or across appdomains**

 Suppose you have a Customer object
  that has a bunch of fields like Name,
  Address, and so on. If you make two
  such objects with exactly the same
  data in two different processes, they
  do not have to return the same hash
  code. If you make such an object on
  Tuesday in one process, shut it down,
  and run the program again on
  Wednesday, the hash codes can be
  different. 
 This has bitten people in the past.
  The documentation for
  System.String.GetHashCode notes
  specifically that two identical
  strings can have different hash codes
  in different versions of the CLR, and
  in fact they do.  **Don't store string hashes in databases and expect them to be the same forever, because they won't be.**

 
 So what is the correct way to create a HashCode of a string that I can store in a database?    
 (Please tell me I am not the first person to have left this bug in software I have written!) 
 
 It depends what properties you want that hash to have. For example, you  could  just write something like this: 
 
 So long as you  document  that that is how the hash is computed, that's valid. It's in no way cryptographically secure or anything like that, but you can persist it with no problems. Two strings which are absolutely equal in the ordinal sense (i.e. with no cultural equality etc applied, exactly character-by-character the same) will produce the same hash with this code. 
 The problems come when you rely on  undocumented  hashing - i.e. something which obeys   but is in no way guaranteed to remain the same from version to version... like  . 
 Writing and documenting your own hash like this is a bit like saying, "This sensitive information is hashed with MD5 (or whatever)". So long as it's a well-defined hash, that's fine. 
 EDIT: Other answers have suggested using cryptographic hashes such as SHA-1 or MD5. I would say that until we know there's a requirement for cryptographic security rather than just stability, there's no point in going through the rigmarole of converting the string to a byte array and hashing that.  Of course if the hash  is  meant to be used for anything security-related, an industry-standard hash is  exactly  what you should be reaching for. But that wasn't mentioned anywhere in the question. 
 
 Here is a reimplementation of  the current way .NET calculates it's string hash code for 64 bit systems . This does not use pointers like the real   does so it will be slightly slower, but it does make it more resilient to internal changes to  , this will give a more evenly distributed hash code than  Jon Skeet's version  which may result in better lookup times in dictionaries. 
 
 
 The answer is to just write your own hashing function. You can find source for some by following links in the comments to the article you posted. Or you can use a built-in hash function that's originally intended for cryptography (MD5, SHA1, etc.) and just not use all of the bits. 
 