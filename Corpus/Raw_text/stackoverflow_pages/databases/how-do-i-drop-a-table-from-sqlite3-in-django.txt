*** how-do-i-drop-a-table-from-sqlite3-in-django ***

 I made a model, and ran python manage.py syncdb. I think that created a table in the db. Then I realized that I had made a column incorrectly, so I changed it, and ran the same command, thinking that it would drop the old table, and add a new one. 
 Then I went to python manage.py shell, and tried to run .objects.all(), and it failed, saying that column  doesn't exist. 
 I want to clear out the old table, and then run syncdb again, but I can't figure out how to do that. 
 
 Another simple way to do this while using Django 1.4 or below, would be 
 
 which drops and re-creates the tables used by the models of this app. 
 This was deprecated in Django 1.3 and is no longer available from Django 1.5 
 
 to clear out an application is as simple as writing: 
 
 then in order to rebuild your tables just type: 
 
 
 None of the answers shows how to delete just one table in an app. It's not too difficult. The   command logs the user into the sqlite3 shell.  
 
 When you are in the shell, type the following command to see the structure of your database. This will show you all the table names in the database (and also the column names within tables). 
 
 In general, Django names tables according to the following convention: "appname_modelname". Therefore, SQL query that accomplishes your goal will look similar to the following: 
 
 This should be sufficient, even if the table had relationships with other tables. Now you can log out of SQLITE shell by executing: 
 
 If you run syncdb again, Django will rebuild the table according to your model. This way, you can update your database tables without losing all of the app data. If you are running into this problem a lot, consider using South - a django app that will migrate your tables for you. 
 
 get the DROP statements with  
 
 then try 
 
 and execute the DROP statement 
 check out  http://docs.djangoproject.com/en/dev/ref/django-admin/ 
 
 I had the same problem.  
 For a quick resolve (if you don't care about losing your tables/data), correct your models.py file with the desired data types, delete the Migration folder and db.SQLite3 file,  
 then re-run the following commands:  
 
 python manage.py migrate 
 python manage.py makemigrations  
 python manage.py migrate 
 python manage.py createsuperuser (to create an admin user/pswd to manage admin page) 
 python manage.py runserver 
 
 
 In Django 1.9 I had to do Kat Russo's steps, but the second migration was a little bit tricky. You have to run 
 
 
 In Django 2.1.7, I've opened the   file in  SQLite browser  (there is also a Python package on  Pypi ) and deleted the table using command 
 
 and then  
 
 Then run again 
 
 