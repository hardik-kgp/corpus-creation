*** how-do-i-handle-nil-return-values-from-database ***

 I am writing a basic program to read values from database table and print in table. The table was populated by an ancient program. Some of the fields in the row are optional and when I try to read them as string, I get the following error: 
 
 After I read other questions for similar issues, I came up with following code to handle the nil values. The method works fine in practice. I get the values in plain text and empty string instead of the nil values. 
 However, I have two concerns: 
 
 This does not look efficient. I need to handle 25+ fields like this and that would mean I read each of them as bytes and convert to string. Too many function calls and conversions. Two structs to handle the data and so on... 
 The code looks ugly. It is already looking convoluted with 2 fields and becomes unreadable as I go to 25+ 
 
 Am I doing it wrong? Is there a better/cleaner/efficient/idiomatic golang way to read values from database? 
 I find it hard to believe that a modern language like Go would not handle the database returns gracefully. 
 Thanks in advance! 
 **Code snippet:**

 
 **edit:**

 I want to have something like the following where I do no have to worry about handling NULL and automatically read them as empty string. 
 
 
 There are separate types to handle   values coming from the database such as  ,  , etc. 
 For example: 
 
 
 go's database/sql package handle pointer of the type. 
 
 You should get like below: 
 
 
 An alternative solution would be to handle this in the SQL statement itself by using the COALESCE function (though not all DB's may support this). 
 For example you could instead use: 
 
 which would effectively give 'state' a default value of an empty string in the event that it was stored as a NULL in the db. 
 
 I've started to use the MyMySql driver as it uses a nicer interface to that of the std library. 
 https://github.com/ziutek/mymysql 
 I've then wrapped the querying of the database into simple to use functions. This is one such function: 
 
 To use this is as simple as this snippet: 
 
 Notice the nice row methods for coercing to a particular value. Nulls are handled by the library and the rules are documented here: 
 https://github.com/ziutek/mymysql/blob/master/mysql/row.go 
 