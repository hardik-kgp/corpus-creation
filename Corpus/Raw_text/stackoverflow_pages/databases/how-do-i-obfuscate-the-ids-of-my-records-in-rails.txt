*** how-do-i-obfuscate-the-ids-of-my-records-in-rails ***

 I'm trying to figure out how to obfuscate the ids of my records in rails. 
 For example: a typical path might look like  http://domain/records/1 , so it's pretty easy for people to deduce how much traffic the site is getting if they just create a new record.  
 One solution that I've used is to hash the id with a salt, but since I'm not sure whether that function is bijective, I end up storing it in another column in my database and double check for uniqueness.  
 Another option I was thinking about was generating a random hash and storing that as another column. If it isn't unique ... just generate another one.  
 What's the best way of doing this? 
 
 You could use the built-in OpenSSL library to encrypt and decrypt your identifiers, that way you would only need to overwrite   on your models. You'll also need to use Base64 to convert the encrypted data into plain text. I would stick this in a module so it can be reused: 
 
 So now your models would need to look something like this: 
 
 Then in your controller when you need to find a record by the encrypted id, you would use something like this: 
 
 If you're looking to encrypt/decrypt ids  **without**
 storing them in the database, this is probably the easiest way to go. 
 
 Instead of numeric ids, use some kind of friendly url or human readable slug. There are  **lots of tools**
 to choose from in this department. Not only are they more friendly to your users, but well chosen slugs can give a nice advantage with search engines. 
 
 Here's a gem that keeps it numeric, requires no database migrations, and no routing changes:  https://github.com/namick/obfuscate_id 
 
 I've found that this gem doesn't work in concert with some other gems, notably paper_trail. This is because of the way it replaces the   method, and paper_trail causes   to be called with the actual record id. 
 So I've been using the gem's "scatter_swap" functionality, but not the rest of it. Here's the model: 
 
 And in the controller: 
 
 As an alternative to the redirection that takes place there, you could simply include a canonical URL in the page. The redirection has the bug of ignoring any query parameters in the URL. This was not a problem for my project, as I didn't have any. But a canonical URL would be better. 
 
 It's pretty easy to generate unique random identifiers for your records either using a randomized string generator or a simple call to   which produces reasonably random and cryptographically unique results. 
 For instance, you can create a secondary column called   or   that stores your public identifiers. You can then over-write   to use this instead: 
 
 Theoretically there is a chance of collision on SHA1 but the odds are so astronomically low you're more liable to have a software crash because of a memory error or hardware malfunction. You can test this to see if it suits your needs by generating a few billion identities to see if they ever collide, which they shouldn't. A 256-bit random number should provide a sufficient amount of data for the SHA1 algorithm to chew on. 
 
 After reading through  @siannopollo's post , I created a Gem based on the idea of his post (but with some improvements):  https://github.com/pencil/encrypted_id 
 