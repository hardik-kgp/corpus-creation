*** how-do-i-update-a-mongo-document-after-inserting-it ***

 Let's say I insert the document. 
 
 Now, let's say I want to add a field and update it. How do I do that? This doesn't seem to work..... 
 
 
 In pymongo you can update with: 
 
Upsert parameter will insert instead of updating if the post is not found in the database. 
Documentation is available at  mongodb site . 
 **UPDATE**
 For version > 3 use  update_one  instead of  update : 
 
 
 
 should work splendidly for you. If there is no document of id  , it will fail, unless you also use  . This returns the old document by default. To get the new one, pass  . All parameters are described in  the API . 
 The method was introduced for MongoDB 3.0. It was extended for 3.2, 3.4, and 3.6. 
 
 I will use   this way. I've just tested this, and it still works for me. The following is quoted directly from  : 
 
 
 Save a document in this collection. 
 If to_save already has an "_id" then 
  an update() (upsert) operation is performed and 
  any existing document with that "_id" is
  overwritten. Otherwise an insert() operation is performed. In this
  case if manipulate is True an "_id" will be added to to_save and this
  method returns the "_id" of the saved document. If manipulate is False
  the "_id" will be added by the server but this method will return
  None. 
 
 
 This is an old question, but I stumbled onto this when looking for the answer so I wanted to give the update to the answer for reference. 
 The methods   and   are deprecated. 
 
 save(to_save, manipulate=True, check_keys=True, **kwargs)Â¶ Save a
  document in this collection. 
 DEPRECATED - Use insert_one() or replace_one() instead. 
 Changed in version 3.0: Removed the safe parameter. Pass w=0 for
  unacknowledged write operations. 
 update(spec, document, upsert=False, manipulate=False, multi=False,
  check_keys=True, **kwargs) Update a document(s) in this collection. 
 DEPRECATED - Use replace_one(), update_one(), or update_many()
  instead. 
 Changed in version 3.0: Removed the safe parameter. Pass w=0 for
  unacknowledged write operations. 
 
 in the OPs particular case, it's better to use  . 
 
 According to the latest documentation about PyMongo titled  Insert a Document  (insert is deprecated) and following defensive approach, you should insert and update as follows: 
 
 