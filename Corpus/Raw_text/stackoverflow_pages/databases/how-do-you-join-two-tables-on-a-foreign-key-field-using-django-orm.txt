*** how-do-you-join-two-tables-on-a-foreign-key-field-using-django-orm ***

 Let's assume I have the following models: 
 
 I want to perform the equivalent SQL query using django's ORM: 
 
 How would I do that with django's ORM? The query isn't exactly correct, but the idea is that I want a single query, using django's ORM, that gives me   joined with   based on the player's position. 
 
 It isn't one query, but it's pretty efficient. This does one query for each table involved, and joins them in Python.  More on   here:  https://docs.djangoproject.com/en/dev/ref/models/querysets/#prefetch-related 
 
 
 I've been working with django for a while now and I have had a pretty rough time figuring out the table joins, but I think I finally understand and I would like to pass this on to others so they may avoid the frustration that I had with it. 
 Consider the following model.py: 
 
 Here we can see that location_id in EventsBoardmeeting is a foreign key for the id in EventsMeetinglocation. This means that we should be able to query the information in EventsMeetinglocation by going through EventsBoardmeeting.  
 Now consider the following views.py: 
 
 As stated many times before in may other posts, django takes care of joins automatically. When we query everything in EventsBoardmeeting we also get any related information by foreign key as well, But the way that we access this in html is a little different. We have to go through the variable used as the foreign key to access the information associated with that join. For example: 
 
 The above references ALL of the names in the table that were the result of the join on foreign key. x is essentially the EventsBoardmeeting table, so when we access x.location_id we are accessing the foreign key which gives us access to the information in EventsMeetinglocation.  
 
  and   is your solution. They work almost same way but has some difference. 
  works by creating an SQL join and including the fields of the related object in the SELECT statement. For this reason,   gets the related objects in the same database query. But it only works for one-to-one or one-to-many relation. Example is below- 
 
 , on the other hand, does a separate lookup for each relationship and does the ‘joining’ in Python. This allows it to prefetch many-to-many and many-to-one objects, which cannot be done using  . So   will execute only one query for each relation. Example is given below- 
 
 
 From   import connection In your view include the below statement: 
 
 