*** how-do-you-model-a-table-for-unit-conversion ***

 I'm looking to create a db model of various units and their relation to each other.  For instance, 36 inches = 3 feet = 1 yard = .9144 meters etc.  This table would also store cups in ounces, pounds, kg, grams, cm and all sorts of measurements.   
 How do you do this?  I was thinking about something like this:   
 
Amount | Units | ConversionFactor | ConversionUnits
1      | foot  | 12               | inches
1      | yard  | 36               | inches
 
 But frankly, this seems like a terrible idea.  Trying to figure out how many feet in a yard would be very convoluted, and I don't think I could ever store all the conversions I need.   
 What other ideas are there?  I know this is a solved problem.  Thanks! 
 
 Store  conversions to SI units , not to other non-metric units. Then you can convert between units in without needing to know the explicit conversion. 
 
 So 14 feet in yards is:  
 
 
 Pick a base unit for each  dimension  you are interested in (read that wiki page, it'll be useful). For example, if most of your data is in SI units, you would pick kilogram for mass, second for time, metre for distance, and so on. If most of your data is in US units, pick units from the  US customary units , for example pound for mass, foot for length, second for time. 
 Then store, for each actual unit you want to be able to handle, the conversion factor to the dimensionally-appropriate base unit. So if you choose foot as your base unit of distance, store 
 
 To actually do a conversion, once you've checked that the dimensions match, simply multiply by the   of the source unit, and divide by the   of the destination unit. For example, to get from metres to miles, multiply by 3.28084, then divide by 5280. 
 
 I think the original post's proposed schema is fine, apart from not including Class (as in Seth's answer) - you don't want to try to convert between pints and inches. 
 Converting between two units where neither of them is the conversion unit is simply achieved by retrieving both units' conversion records and dividing one factor by the other (eg. 36/12 = 3 feet in a yard). 
 If you are particularly concerned about accuracy, you could ensure that all units for a given class have entries for all other units in the same class - this strikes me as overkill, though. 
 
 
 ToUnit = (FromUnit + FromOffset) * Multiplicand / Denominator + ToOffset 
 