*** how-do-you-move-dev-database-changes-to-production-database ***

 I have been working on a project and gotten it through the first stage. However, the requirments ended up changing and I have to add new tables and redo some of the foriegn key references in the DB. 
 The problem I have is my lack of knowledge of dealing with doing this kind of change to a staging then production database once I get the development done on dev database. 
 What are some strategies for migrating database schema changes and maintaining data in the database? 
 About as far as my knowledge is on doing this is open up Sql Server Management Studio and starting adding tables manually. I know this is probably a bad way to do it so looking for how to do it properly while realizing I probably started out wrong. 
 
 I typically use something like the  SQL Server Publishing Wizard  to produce SQL scripts of the changes. That is a rather simple and easy approach. The major downside with that tool is that the produced will drop and recreate tables that are not changed but used by procedures that have changed (and I can't understand why), so there is some manual labour involved in going through the script and remove things that don't need to be there.  
 **Note**
 that you don't need to download and install this tool; you can launch it from within Visual Studio. Right-click on a connection in the Server Explorer and select "Publish to Provider" in the context menu. 
 
 For maintaining schema changes you can use  ApexSQL Diff , a SQL Server and SQL Azure schema comparison and synchronization tool, and for maintaining data in the database you can use  ApexSQL Data Diff , a SQL Server and SQL Azure data comparison and synchronization tool. 
 Hope this helps 
 Disclaimer: I work for ApexSQL as a Support Engineer 
 
 You have to have something called as a "KIT". Obviously, if you are maintaining some kind of a source control, all the scripts for the changes that you do in the development environments should be maintained in the source control configuration tool. 
 Once you are done with all the scripts/changes that you deem certified to move to next higher environment. Prepare the kit with having all these scripts in folders (ideally categorized as Procedures, Tables, Functions, Bootstraps) And then have a batch files that could execute these scripts in the kit in a particular order using OSQL command line utility. 
 Have separate batch files for UAT/ Staging/ production so that you can just double click on the batch file to execute the kit in the appropriate server. Check for OSQL options. 
 This way all your environments are in sync! 
 
 Red Gate SQL Compare and SQL Data Compare all the way. Since my company bought it, it saved me tons of time staging our databases from DEV to TEST to ACCEPTANCE to PRODUCTION. 
 And you can have it synchronize with a scripts folder too for easy integration in a source control system. 
 http://www.red-gate.com 
 
 You might want to check out a tool like Liquibase:  http://liquibase.org/ 
 
 There are some tools available to help you with that. 
 If you have Visual Studio Team edition, check database projects (aka DataDude aka Visual Studio Team for Database Professionals)  See here  and  here 
 It allows you to generate a model from the dev/integration database and then (for many, but not all cases) automatically create scripts which update your prod database with the changes you made to dev/integration. 
 For VS 2008, make sure you get the GDR2 patches. 
 
 You can use visual studio 2015. Go to  **Tools**
=>  **SQL server**
 =>  **New Schema comparison**

 **step 1)**
 Select  **source**
 and  **target**
 Database.
Click on  **Compare**
 option. 
 **step 2)**
 once comparison completed, you can click on icon  **Generate Script(Shift+alt+G)**

 this will generate  **Commit**
 script. 
 **step 3)**
 To generate  **rollback**
 script for database changes just  **swap**
 database from  **step 1**

 
 We have found the best way to push changes is to treat databases changes like code. All changes are in scripts, they are in source control and they are part of a version. Nothing is ever under any circumstances pushed to prod that is not scripted and in source control.  That way you don't accidentally push changes that are in dev, but not yet ready to be pushed to prod. Further you can restore prod data to the dev box and rerun all the scripts not yet pushed and you have fresh data and all the dev work preserved. This also works great when you have lookup values to tables that are chaging that you don;t want pushed to prod until other things move as well. Script the insert and put it with the rest of the code for the version. 
 It's nice to use those tools to do a compare to see if something is missed in the scripts, but I would NEVER rely on them alone. Far too much risk of pushing something "not yet ready for prime time" to prod. 
 
 A good database design tool (such as Sybase Powerdesigner) will allow you to create the design changes to the data model, then generate the code to implement those changes. You can then store and run the code as you choose. This tool should also be able to do reverse engineering when you inherit a database you didn't build. 
 Finding all the changes between development and production is often difficult even in an organized, well-documented environment. Idera has a tool for SQL Server which will detect structural differences between your development and production database and another tool which detects changes in the data. In fact, I often use these to go the other direction and sync development with production to start a new project. 
 