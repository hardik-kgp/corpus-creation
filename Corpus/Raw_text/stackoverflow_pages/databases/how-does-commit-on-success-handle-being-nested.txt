*** how-does-commit-on-success-handle-being-nested ***

 I'm a bit confused about how I should handle transactions in a particular situation. 
 I've got some code that boils down to this: 
 
 I want to know what happens if a   fails. 
 How does commit_on_success handle being nested? Will it understand to commit each   or if one fails the whole   rolls back? 
 
 Here's the source code of it:  https://github.com/django/django/blob/1.2.4/django/db/transaction.py#L286 
 And  enter_transaction_management  is as simple as putting new transaction handling mode on the thread stack. 
 So, in your case, if   fails (i.e. exception occurs), then the transaction is rolled back in its entirety, and then the exception propagates upwards from   as well but there is nothing to roll back. 
 And no, if one   fails then the whole   is not being rolled back - there's no magic there, only COMMIT and ROLLBACK on the database level, which means that what gets rolled back is only what has been written to the DB after the last commited  . 
 Summarizing,  **I think that what you need**
 is just a single   around  , possibly supported by  transaction savepoints  - which unfortunately are available only in PostgreSQL backend, even though MySQL 5.x supports them as well. 
 **EDIT 10 Apr 2012**
: Savepoint support for MySQL is now  available in Django 1.4 
 **EDIT 2 Jul 2014**
: Transaction management has been completely rewritten in Django 1.6 -  https://docs.djangoproject.com/en/1.6/topics/db/transactions/  and   has been deprecated. 
 
 To gain more control on the transaction management, it's good to use  : 
 
 Here you can decide depending on circumstances, commit transaction or not. 
 