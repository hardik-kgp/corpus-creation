*** how-does-jdbc-work ***

 can anyone tell me How does jdbc work? How it manages to communicate with a DBMS? since DBMS may be written with some other programming language. 
 
 Communication with the database is handled by JDBC drivers that can use various strategies to "talk" to a database (from "translation" to the use of "native" language). Depending on the strategy used, drivers are categorized into 4 types.  Types of JDBC technology drivers  provide a good description of each of them: 
 
 
 **A JDBC-ODBC bridge provides JDBC API access via one or more ODBC
  drivers.**
 Note that some ODBC native
  code and in many cases native database
  client code must be loaded on each
  client machine that uses this type of
  driver. Hence, this kind of driver is
  generally most appropriate when
  automatic installation and downloading
  of a Java technology application is
  not important. For information on the
  JDBC-ODBC bridge driver provided by
  Sun, see JDBC-ODBC Bridge Driver. 
 **A native-API partly Java technology-enabled driver converts
  JDBC calls into calls on the client
  API**
 for Oracle, Sybase, Informix, DB2,
  or other DBMS. Note that, like the
  bridge driver, this style of driver
  requires that some binary code be
  loaded on each client machine. 
 **A net-protocol fully Java technology-enabled driver translates
  JDBC API calls into a DBMS-independent
  net protocol which is then translated
  to a DBMS protocol by a server**
. This
  net server middleware is able to
  connect all of its Java
  technology-based clients to many
  different databases. The specific
  protocol used depends on the vendor.
  In general, this is the most flexible
  JDBC API alternative. It is likely
  that all vendors of this solution will
  provide products suitable for Intranet
  use. In order for these products to
  also support Internet access they must
  handle the additional requirements for
  security, access through firewalls,
  etc., that the Web imposes. Several
  vendors are adding JDBC
  technology-based drivers to their
  existing database middleware products. 
 **A native-protocol fully Java technology-enabled driver converts
  JDBC technology calls into the network
  protocol used by DBMSs directly**
. This
  allows a direct call from the client
  machine to the DBMS server and is a
  practical solution for Intranet
  access. Since many of these protocols
  are proprietary the database vendors
  themselves will be the primary source
  for this style of driver. Several
  database vendors have these in
  progress. 
 
 
 As we can see, there are various strategies to make interoperability possible, including implementing the  network protocol  used by a given database in Java (type 4). And because of their ease of use (no extra stuff to install, no JNI) and their good performances (they perform as well as type 2 drivers now), type 4 are actually the most frequently used nowadays. 
 
 From  Wikipedia : 
 
 JDBC drivers are client-side adapters  (installed on the client
  machine, not on the server) that convert requests from Java programs
  to a protocol that the DBMS can understand. [edit] Types 
 There are commercial and free drivers available for most relational
  database servers. These drivers fall into one of the following types: 
 
 Type 1 that calls native code of the locally available ODBC driver. 
 Type 2 that calls database vendor native library on a client side. This code then talks to database over network. 
 Type 3, the pure-java driver that talks with the server-side middleware that then talks to database 
 Type 4, the pure-java driver that uses database native protocol 
 
 
 
 Most database systems support ODBC (Open Database Connectivity or whatever). This is meant to allow applications (e.g., Access) to work with multiple RDBMS implementations at the cost of some performance hit. When JDBC was first released, there was a driver that allowed you to connect to an ODBC provider. Later on, some vendors provided JDBC drivers specific to their RDMS. 
 From a developer's perspective, JDBC is used as a set of interfaces. All the actual details are hidden in loading the driver. The driver is a Java class that can use any trick of the book, including native code or just sending network traffic to the RDBMS. 
 
 From the  wikipedia page : 
 Types 
 
 
 Reading a bit about the  four types of JDBC drivers  might enlighten you. 
 
 From Wikipedia: 
 
 JDBC is an API for the Java programming language that defines how a client may access a database. It provides methods for querying and updating data in a database. JDBC is oriented towards relational databases. 
 JDBC was first introduced in the Java 2 Platform, Standard Edition, version 1.1 (J2SE), together with a reference implementation JDBC-to-ODBC bridge, enabling connections to any ODBC-accessible data source in the JVM host environment. 
 
 Without going into too much detail, you can think of JDBC as an abstraction layer that lets you talk to different databases. The implementation-specific details are hidden from you, but the interface for querying a database (be it MySQL or Oracle or whatever) is the same. 
 What this means is that in future, if there was a new database, someone only needs to use the existing interface. The method names would be the same, but the methods would contain implementation-specific code for that particular database. This is a common software-engineering pattern. 
 The entity that contains the implementation-specific code is called the  JDBC driver . The JDBC driver provides a connection to the database and it also implements the specific protocol for sending the query to the database and the result-set back to the client. 
 
 Can't say I know the exact answer to your question, but here is some information to help. 
 Here's a great place to start: 
 http://java.sun.com/products/jdbc/overview.html 
 
 The JDBC API contains two major sets of interfaces: the first is the JDBC API for application writers, and the second is the lower-level JDBC driver API for driver writers. 
 
 Information for JDBC Driver Developers.  Basically there are a set of interfaces that a developer implements to create a JDBC driver for a particular DBMS. 
 http://java.sun.com/products/jdbc/driverdevs.html 
 As far as a DBMS being written in a different language.  That DBMS most likely exposes some API (in various languages and/or formats) that allow for drivers, such as JDBC, to communicate with the DBMS. 
 