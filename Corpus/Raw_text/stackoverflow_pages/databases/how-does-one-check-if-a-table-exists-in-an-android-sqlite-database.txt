*** how-does-one-check-if-a-table-exists-in-an-android-sqlite-database ***

 I have an android app that needs to check if there's already a record in the database, and if not, process some things and eventually insert it, and simply read the data from the database if the data does exist. I'm using a subclass of SQLiteOpenHelper to create and get a rewritable instance of SQLiteDatabase, which I thought automatically took care of creating the table if it didn't already exist (since the code to do that is in the onCreate(...) method).  
 However, when the table does NOT yet exist, and the first method ran upon the SQLiteDatabase object I have is a call to query(...), my logcat shows an error of "I/Database(26434): sqlite returned: error code = 1, msg = no such table: appdata", and sure enough, the appdata table isn't being created. 
 Any ideas on why?  
 I'm looking for either a method to test if the table exists (because if it doesn't, the data's certainly not in it, and I don't need to read it until I write to it, which seems to create the table properly), or a way to make sure that it gets created, and is just empty, in time for that first call to query(...) 
 **EDIT**

 
This was posted after the two answers below:
 
I think I may have found the problem. I for some reason decided that a different SQLiteOpenHelper was supposed to be created for each table, even though both access the same database file. I think refactoring that code to only use one OpenHelper, and creating both tables inside it's onCreate may work better... 
 
 Try this one: 
 
 
 I know nothing about the Android SQLite API, but if you're able to talk to it in SQL directly, you can do this: 
 
 Which will ensure that the table is always created and not throw any errors if it already existed. 
 
 This is what I did: 
 
 
 Although there are already a lot of good answers to this question, I came up with another solution that I think is more simple. Surround your query with a try block and the following catch: 
 
 It worked for me! 
 
 Yep, turns out the theory in my edit was right: the problem that was causing the onCreate method not to run, was the fact that   objects should refer to databases, and not have a separate one for each table. Packing both tables into one   solved the problem. 
 
 You mentioned that you've created an class that extends   and implemented the   method. Are you making sure that you're performing all your database acquire calls with that class? You should only be getting   objects via the   and   otherwise the   method will not be called when necessary. If you are doing that already check and see if th   method is being called instead. If so, then the database version number was changed at some point in time but the table was never created properly when that happened.  
 As an aside, you can force the recreation of the database by making sure all connections to it are closed and calling   and then using the   to give you a new db object. 
 
 
 
 sqlite maintains sqlite_master table containing information of all tables and indexes in database. 
 So here we are simply running SELECT command on it, we'll get cursor having count 1 if table exists. 
 
 
 
 
  is coming because once you create database with one table after that whenever you create table in same database it gives this error. 
 To solve this error you must have to  create new database and inside the  onCreate() method you can create multiple table in same database. 
 
 **Important**
 condition is  **IF NOT EXISTS**
 to check table is already exist or not in database 
 like... 
 
 
 i faced that and deal with it by try catch as simple as that i do what i want in table if it not exist will cause error so catch it by exceptions and create it :)  
 
 
 .....
Toast t = Toast.makeText(context, "try... "  , Toast.LENGTH_SHORT);
        t.show(); 
 
 ..... 
 