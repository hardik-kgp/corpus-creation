*** how-does-transactionscope-work ***

 When   instantiates a   and calls   that also instantiates a  , how does .NET know both are in the same scope?
I believe it doesn't use static methods internally otherwise it wouldn't work well on multithreaded applications like ASP.NET. 
 Is it possible to create my own TransactionScope-like class or does the original one use special features those just Microsoft knows how they work? 
 
 Hope this helps:   
 http://msdn.microsoft.com/en-us/magazine/cc300805.aspx 
 
 For those unfamiliar with TransactionScope, it is part of the System.Transactions namespace new to the MicrosoftÂ® .NET Framework 2.0. System.Transactions provides a transactions framework fully integrated into the .NET Framework, including but not limited to ADO.NET. The Transaction and TransactionScope classes are two of the most important classes in this namespace. As the question alludes to, you can create a TransactionScope instance, and ADO.NET operations executed within the scope of that TransactionScope will be enlisted automatically (you can also access the current Transaction through the Transaction.Current static property): 
 
 
 
  pretty much builds on top of COM - specifically over  MSDTC . 
 This coordinates transactions, and allows nesting of transactions. 
 In short, when you first call  , a transaction registers with MSDTC, as would all other calls to  . MSDTC coordinates them all. 
 