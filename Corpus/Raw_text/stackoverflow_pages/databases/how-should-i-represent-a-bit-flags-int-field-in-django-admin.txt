*** how-should-i-represent-a-bit-flags-int-field-in-django-admin ***

 I have a data model with a bitfield defined something like this: 
 
 And used like this: 
 
 My questions are: 
 A) What's the easiest way to represent the different bitflags as separate items in the admin site? Should I override the template, or do something with forms? 
 B) How about the search list? I could create functions in the model to represent each bit, but how would searching and sorting be done? 
 I'm new to Django. 
 
 Working off the snippet in Andrew's answer, here are the changes you'd need to make: 
 
 
 I think the best solution here would be for you to create a new field type by subclassing  . You could make use of the  choices  parameter to assign the valid bit flags and their meanings. This would help keep your model declaration clean and readable, with a final result along the lines of: 
 
 The Django documentation has a great in-depth article on how to go about subclassing models.Field:   
 Writing Custom Model Fields 
It seems to cover everything you need to do, including: 
 
 Specifying Form Field  (Tying a form to the field so that django-admin knows how to display it.) 
 Preparing Values for Lookups  (Which will allow you to use the field for searches and filtering.) 
 
 If you're looking for an example of a subclassed field,  this snippet  might be of use. Its goal is similar (multiple choices as a model field), but its manner of storing them in the database differs (it's using a CSV text field instead of bit flags).  
 
 A great tested solution, even if it doesn't fit your model right away, would be using  django-bitfield 
 
 This is how I would use the flags with my User class: 
 
 Of course instead of printing the flags, you can create a comma-separated string to display in the admin view, or whatever you desire. 
 For the admin, just use a  boolean  for each of the group values. 
 