*** how-stuff-and-for-xml-path-work-in-sql-server ***

 Table is: 
 
 Required output:  
 
 Query: 
 
 This query is working properly. But I just need the explanation how it works or is there any other or short way to do this.  
 I am getting very confused to understand this.  
 
 Here is how it works: 
 **1. Get XML element string with FOR XML**
  
 Adding FOR XML PATH to the end of a query allows you to output the results of the query as XML elements, with the element name contained in the PATH argument. For example, if we were to run the following statement: 
 
 By passing in a blank string (FOR XML PATH('')), we get the following instead: 
 
 **2.  Remove leading comma with STUFF**

 The STUFF statement literally "stuffs” one string into another, replacing characters within the first string. We, however, are using it simply to remove the first character of the resultant list of values.  
 
 The parameters of   are: 
 
 The string to be “stuffed” (in our case the full list of name with a
leading comma)  
 The location to start deleting and inserting characters (1, we’re stuffing into a blank string) 
 The number of characters to delete (1, being the leading comma) 
 
 So we end up with: 
 
 **3. Join on id to get full list**

 Next we just join this on the list of id in the temp table, to get a list of IDs with name: 
 
 And we have our result: 
 
 Hope this helps! 
 
 This article  covers various ways of concatenating strings in SQL, including an improved version of your code which doesn't XML-encode the concatenated values. 
 
 To understand what's happening, start with the inner query: 
 
 Because you're specifying  , you'll get a single row containing an XML fragment representing all of the rows. 
 Because you haven't specified a column alias for the first column, each row would be wrapped in an XML element with the name specified in brackets after the  . For example, if you had  , you'd get an XML document that looked like: 
 
 But, since you haven't specified an element name, you just get a list of values: 
 
 The   simply retrieves the value from the resulting XML fragment, without XML-encoding any "special" characters. You now have a string that looks like: 
 
 The   function then removes the leading comma, giving you a final result that looks like: 
 
 It looks quite confusing at first glance, but it does tend to perform quite well compared to some of the other options. 
 
 **PATH mode is used in generating XML from a SELECT query**

 
 The Output is element-centric XML where each column value in the resulting rowset is wrapped in an row element. Because the SELECT clause does not specify any aliases for the column names, the child element names generated are the same as the corresponding column names in the SELECT clause.  
 For each row in the rowset a  tag is added. 
 
 For Step 2: If you specify a zero-length string, the wrapping element is not produced. 
 
 In Step 4 we are concatenating the values. 
 
 In Step 6 we are grouping the date by ID. 
 **STUFF( source_string, start, length, add_string )
Parameters or Arguments
source_string
The source string to modify.
start
The position in the source_string to delete length characters and then insert add_string.
length
The number of characters to delete from source_string.
add_string
The sequence of characters to insert into the source_string at the start position.**

 
 
 There is very new functionality in Azure SQL Database and SQL Server (starting with 2017) to handle this exact scenario. I believe this would serve as a native official method for what you are trying to accomplish with the XML/STUFF method. Example: 
 
 STRING_AGG -  https://msdn.microsoft.com/en-us/library/mt790580.aspx 
 **EDIT:**
 When I originally posted this I made mention of SQL Server 2016 as I thought I saw that on a potential feature that was to be included. Either I remembered that incorrectly or something changed, thanks for the suggested edit fixing the version. Also, pretty impressed and wasn't fully aware of the multi-step review process that just pulled me in for a final option. 
 
 In  , if we define any value like   then these tags will be added with each row: 
 
 
 
 Here in the above query  **STUFF**
 function is used to just remove the first comma   from the generated xml string   then it will become  . 
 And   simply converts column data into   string but in  **PATH**
 we are passing '' so it will not create a XML tag. 
 And at the end we have grouped records using  **ID**
 column. 
 
 
 
 I did debugging and finally returned my 'stuffed' query to it it's normal way. 
 Simply  
 
 gives me contents of the table to write to a log table from a trigger I debug. 
 
 Im frequently using with where clause 
 
 