*** how-to-cache-data-in-a-mvc-application ***

 I have read lots of information about page caching and partial page caching in a MVC application. However, I would like to know how you would cache data. 
 In my scenario I will be using LINQ to Entities (entity framework). On the first call to GetNames (or whatever the method is) I want to grab the data from the database. I want to save the results in cache and on the second call to use the cached version if it exists. 
 Can anyone show an example of how this would work, where this should be implemented (model?) and if it would work. 
 I have seen this done in traditional ASP.NET apps , typically for very static data. 
 
 Reference the System.Web dll in your model and use System.Web.Caching.Cache 
 
 A bit simplified but I guess that would work. This is not MVC specific and I have always used this method for caching data. 
 
 Here's a nice and simple cache helper class/service I use:   
 
 **Usage:**

 
 Cache provider will check if there's anything by the name of "cache id" in the cache, and if there's not, it will call a delegate method to fetch data and store it in cache.     
 **Example:**

 
 
 I'm referring to TT's post and suggest the following approach: 
 **Reference the System.Web dll in your model and use System.Web.Caching.Cache**

 
 You should not return a value re-read from the cache, since you'll never know if at that specific moment it is still in the cache. Even if you inserted it in the statement before, it might already be gone or has never been added to the cache - you just don't know. 
 So you add the data read from the database and return it directly, not re-reading from the cache.  
 
 For .NET 4.5+ framework 
 add reference:    
 add using statement:
  
 
 
 In the .NET Framework 3.5 and earlier versions, ASP.NET provided an in-memory cache implementation in the System.Web.Caching namespace. In previous versions of the .NET Framework, caching was available only in the System.Web namespace and therefore required a dependency on ASP.NET classes. In the .NET Framework 4, the System.Runtime.Caching namespace contains APIs that are designed for both Web and non-Web applications.  
 
 More info: 
 
 https://msdn.microsoft.com/en-us/library/dd997357(v=vs.110).aspx   
 https://docs.microsoft.com/en-us/dotnet/framework/performance/caching-in-net-framework-applications 
 
 
 Steve Smith did two great blog posts which demonstrate how to use his CachedRepository pattern in ASP.NET MVC. It uses the repository pattern effectively and allows you to get caching without having to change your existing code. 
 http://ardalis.com/Introducing-the-CachedRepository-Pattern 
 http://ardalis.com/building-a-cachedrepository-via-strategy-pattern 
 In these two posts he shows you how to set up this pattern and also explains why it is useful. By using this pattern you get caching without your existing code seeing any of the caching logic. Essentially you use the cached repository as if it were any other repository. 
 
 **AppFabric Caching**
 is distributed and an in-memory caching technic that stores data in key-value pairs using physical memory across multiple servers. AppFabric provides performance and scalability improvements for .NET Framework applications.  Concepts and Architecture   
 
 Extending @Hrvoje Hudo's answer... 
 **Code:**

 
 **Examples**

 Single item caching (when each item is cached based on its ID because caching the entire catalog for the item type would be too intensive). 
 
 Caching all of something 
 
 **Why TId**

 The second helper is especially nice because most data keys are not composite. Additional methods could be added if you use composite keys often. In this way you avoid doing all sorts of string concatenation or string.Formats to get the key to pass to the cache helper. It also makes passing the data access method easier because you don't have to pass the ID into the wrapper method... the whole thing becomes very terse and consistant for the majority of use cases. 
 
 Here's an improvement to Hrvoje Hudo's answer.  This implementation has a couple of key improvements: 
 
 Cache keys are created automatically based on the function to update data and the object passed in that specifies dependencies 
 Pass in time span for any cache duration 
 Uses a lock for thread safety 
 
 Note that this has a dependency on Newtonsoft.Json to serialize the dependsOn object, but that can be easily swapped out for any other serialization method. 
 ICache.cs 
 
 InMemoryCache.cs 
 
 Usage: 
 
 
 
 
 I have used it in this way and it works for me.
 https://msdn.microsoft.com/en-us/library/system.web.caching.cache.add(v=vs.110).aspx 
parameters info for system.web.caching.cache.add. 
 
 
 I use two classes. First one the cache core object: 
 
 Second one is list of cache objects: 
 
 
 I will say implementing Singleton on this persisting data issue can be a solution for this matter in case you find previous solutions much complicated 
 
 
 
 
 The solution below by Oli was one of the agreed upon approaches. I was thinking that since noms could reference a non null for the cache at the check for null, couldn't noms reference another value if the cache expired or became invalidated somehow (possibly a null) before the function did the return? I have a feeling I may be missing something. 
 
 Thank you! 
 
 You can also try and use the caching built into ASP MVC: 
 Add the following attribute to the controller method you'd like to cache: 
 
 In this case the  ActionResult of this will be cached for 10 seconds. 
 More on this  here 
 