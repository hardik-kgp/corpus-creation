*** how-to-call-the-scan-variadic-function-using-reflection ***

 I'm looking to call the  Rows.Scan()  function using reflection.  However it takes a variable number of pointers, but there are not a lot of source examples.  I need to use reflection because I plan on filling a slice with the values from a Query call.  So basically using   to get the length of the row and then   a slice of   to fill with the data points that would normally be filled using the pointers passed to the   function. 
 Basically something like this code: 
 
 Anyone have an example of calling a variadic function that takes pointers using reflection that I can take a look at? 
 Edit:
Sample code that doesn't appear to do what I'm after. 
 
 The results: 
 
 
 Here's the solution that I've arrived at.  It doesn't get the Types before traversing the data, and so doesn't know before hand the type of each value before pulling the values out through  , but the point really is to not have to know the types before hand. 
 The trick was to create 2 slices, one for the values, and one that holds pointers in parallel to the values slice.  Then once the pointers are used to fill data, the values array is actually filled with the data, which can then be used to populate other data structures. 
 
 
 To lucidquiet: you can also assign a interface instead of making a slice 
 The following code works good: 
 
 
 I don't think you need reflection for this - you can use a slice and the   operator to pass multiple values to a variadic function. 
 
 I may be misunderstanding what you want to do though! 
 
 The following solution allows you to refer to the field by field name instead of index. It's more like PHP style: 
 **Table definition:**

 
 **main.go:**

 
 **Sample output:**

 # go run main.go 
 
 