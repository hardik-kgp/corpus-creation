*** how-to-check-if-a-double-is-null ***

 I'm querying a database and some of the results I'm getting are null. I'm setting these values to a variable with a datatype of double. Let's call the variable "results". So I tried setting up an if statement to see it equals Null which of course didn't work. Here is the code I have for that if statement: 
 
 The error I get with this code is: 
 The operator == is undefined for the argument type(s) double, null 
 Is there a better way to determine if it's null? 
 
 I would recommend using a Double not a double as your type then you check against null. 
 
 Firstly, a Java   cannot be null, and cannot be compared with a Java  .  (The   type is a primitive (non-reference) type and primitive types cannot be null.) 
 Next, if you call  , that returns a   not a  , the documented behaviour is that a NULL (from the database) will be returned as zero.  (See javadoc linked above.)  That is no help if zero is a legitimate value for that column. 
 So your options are: 
 
 use   to test for a (database) NULL ... immediately after the   call, or 
 use  , and type cast the result to  . 
 
 The   method will deliver the value as a   (assuming that the column type is  ), and is documented to return   for a NULL.  (For more information,  this page  documents the default mappings of SQL types to Java types, and therefore what actual type you should expect   to deliver.) 
 
 A double primitive in Java can never be null. It will be initialized to 0.0 if no value has been given for it (except when declaring a local double variable and not assigning a value, but this will produce a compile-time error). 
 More info on default primitive values  here . 
 
 To say that something "is null" means that it is a reference to the null value.  Primitives (int, double, float, etc) are by definition not reference types, so they cannot have null values.  You will need to find out what your database wrapper will do in this case. 
 
 How are you getting the value of "results"? Are you getting it via ResultSet.getDouble()? In that case, you can check  . 
 
 I believe Double.NaN might be able to cover this. That is the only 'null' value double contains. 
 