*** how-to-configure-postgresql-for-the-first-time ***

 I have just installed postgresql and I specified password x during installation. 
When I try to do   and specify any password I get the message: 
 
 createdb: could not connect to database postgres: FATAL:  password authentication failed for user 
 
 Same for  . 
 How should I start? 
Can I add myself as a user to the database? 
 
 The other answers were not completely satisfying to me. Here's what worked for postgresql-9.1 on Xubuntu 12.04.1 LTS. 
 
 Connect to the default database with user postgres : 
 
 sudo -u postgres psql template1 
 
 Set the password for user postgres, then exit psql (Ctrl-D) : 
 
 ALTER USER postgres with encrypted password 'xxxxxxx'; 
 
 Edit the   file : 
 
 sudo vim /etc/postgresql/9.1/main/pg_hba.conf 
 
 
 [Remember, in case of any other version of postgresql just   to know what number you should add instead of 9.1, Also, you can use nano or other editor instead of vim (for newer users)] 
 
 
 Restart the database : 
 
 sudo /etc/init.d/postgresql restart 
 
 (Here you can check it worked with  .) 
 Create a user having the same name as you (to find it, you can type  ) : 
 
 sudo createuser -U postgres -d -e -E -l -P -r -s  
 
 The options tell postgresql to create a user that can login, create databases, create new roles, is a superuser, and will have an encrypted password. The really important ones are -P -E, so that you're asked to type the password that will be encrypted, and -d so that you can do a  . 
 **Beware of passwords**
 : it will first ask you twice the new password (for the new user), repeated, and then once the postgres password (the one specified on step 2). 
 Again, edit the   file (see step 3 above), and change "peer" to "md5" on the line concerning "all" other users : 
 
 local      all      **all**
      peer  md5 
 
 Restart (like in step 4), and check that you can login without -U postgres : 
 
 psql template1 
 
 Note that if you do a mere  , it will fail since it will try to connect you to a default database having the same name as you (ie.  ). template1 is the admin database that is here from the start. 
 Now   should work. 
 
 
 Under Linux PostgresQL is usually configured to allow the root user to login as the postgres superuser   from the shell (console or ssh). 
 
 Then you would just create a new database as usual: 
 
 This should work without touching  . If you want to be able to do this using some GUI tool over the network - then you would need to mess with  . 
 
 This is my solution: 
 
 
 
There are two methods you can use. Both require creating a user  **and**
 a database. 
 
 **Using createuser and createdb**
, 
 
 **Using the SQL administration commands, and connecting with a password over TCP**

 
 And, then in the psql shell 
 
 Then you can login, 
 
 If you don't know the port, you can always get it by running the following, as the   user, 
 
 Or, 
 
 
 Sidenote: the   user 
 I suggest  NOT  modifying the   user. 
 
 It's normally locked from the OS. No one is supposed to "log in" to the operating system as  . You're supposed to have root to get to authenticate as  . 
 It's normally not password protected and delegates to the host operating system. This is a  **good thing**
. This normally means in order to log in as   which is the PostgreSQL equivalent of SQL Server's  , you have to have write-access to the underlying data files. And, that means that you could normally wreck havoc anyway. 
 By keeping this disabled, you remove the risk of a brute force attack through a named super-user. Concealing and obscuring the name of the superuser has advantages. 
 
 
 **EDIT: Warning: Please, read the answer posted by **
**Evan Carroll**
**. It seems that this solution is not safe and not recommended.**

 This worked for me in the standard  **Ubuntu 14.04 64 bits**
 installation. 
 I followed the instructions, with small modifications, that I found in  http://suite.opengeo.org/4.1/dataadmin/pgGettingStarted/firstconnect.html   
 
 Install postgreSQL (if not already in your machine): 
 
 
 
 Run  psql  using the postgres user 
 
 
 
 Set a new password for the postgres user: 
 
 
 
 Exit psql 
 
 
 
 Edit  **/etc/postgresql/9.3/main/pg_hba.conf**
 and change: 
 
 
 To:  
 
 
 Restart postgreSQL: 
 
 
 
 Create a new database 
 
 
 
 Run psql with the postgres user again: 
 
 
 
 List the existing databases (your new database should be there now): 
 
 
 
 You probably need to update your   file. This file controls what users can log in from what IP addresses. I think that the postgres user is pretty locked-down by default. 
 
 If you're running macOS like I am, you may not have the postgres user.  
 When trying to run   I was getting the error  
 Luckily there are executables that postgres provides.  
 
 Then I was able to access   without issues.  
 
 
 If you're creating a new postgres instance from scratch, here are the steps I took. I used a non-default port so I could run two instances. 
 
 Then I edited   with my preferred port, 5433. 
 
 Done! 
 
 
 
 Just browse up to your installation's directory and execute this file "pg_env.bat", so after go at bin folder and execute pgAdmin.exe. This must work no doubt! 
 