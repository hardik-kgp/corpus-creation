*** how-to-create-table-if-it-doesnt-exist-using-derby-db ***

 I am new to   and I cant seem to make work 
 
 as can be achieved in   etc. I am getting a  ,  when I try to run this   statement in my   program. 
 I checked in the documentation page for  Derby Db Create Statements , but couldn't find such an alternative. 
 
 Create the table, catch the   and check SQL status code. 
 The full list of error codes can be found  here   but I couldn't find  ; it's probably  .  The code you need is  . 
 Just run the code once and print the error code. Don't forget to add a test to make sure the code works; this way, you can catch changes in the error code (should not happen ...). 
 In my projects, I usually add a helper class with static methods so I can write: 
 
 Another option is to run a   against the table and check the status code (which should be  ). But that's a second command you need to send and it doesn't offer any additional information. 
 What's worse, it can fail for other reasons than "Table doesn't exist", so the "create-and-ignore-error" is better IMO. 
 
 Derby does not support that sql-statement. 
In my program I parse all the Tables from the Database into a Set and check if the table exists there. 
Like this: 
 
 
 to check if table is exist :  
 
 to show all tables name :  
 
 
 the query you are executing does not supported by Derby db. Instead, if you know the name of the table you can find if table exists or not quite easily. 
 
 
 **Catch is to specify name of the table in Uppercase else you won't be able to find table name in metadata.**
  
 
 
 Following  Aaron Digulla 's lead with a   class to check if the table exists, this is the solution I came up with : 
 **Calling class**

 
 **DerbyUtils**

 
 
 
 
 https://db.apache.org/derby/docs/10.2/ref/rrefexcept71493.html 
 
 
 I know this was marked with an answer but in case anyone wanted another way of checking I wanted to post anyway. Here I check the table metadata with a method that returns a boolean, true if exists, false if it doesn't. Hope it helps others if they are looking.  
 
 
 Another solution with 2 conditions: 
 
 Willing to  **drop table**
 before creating each time, with the same being present in a .sql file 
 Are using Spring and hence willing to use  **spring-test**
 as a Maven dependency, your life can become much simpler with it's  @Sql  annotation 
 
 So, firstly adding this as a dependency to your pom: 
 
 Secondly, assuming you have an sql that drops, creates table a in a file 
 rectangle.sql : 
 
 And you have a test class BlahTest that should run this sql before doing whatever test it is to run, simply add the following  **@Sql**
 annotation to your class: 
 
 The specified  config  attribute value's  @SqlConfig  has the magic that makes it skip the drop statement errors in case the table doesn't exist. I believe it's been written to specifically target these types of databases that don't support  IF EXISTS  for dropping / table creation (which derby really should, even if it's not part of the SQL standard at the moment) 
 
 Here is a solution that will you can script in SQL. 
 
 Create a Class like the following: 
 
 } 
 **Note**
: you don't have to use spring, you can write it in straight JDBC, but then you have to know how to do it correctly. (Left as an exercise for the reader).  Also, you could rewrite this to parse out the table name from the ddl parameter.  Another thing would be to do proper error handling. 
 Make sure the class is compiled and placed in the classpath of the VM the database will be running in. 
 Write your SQL script: 
 
 ??? 
 profit 
 
 
 
 Surround the create statement by try-catch.and make sure comment the e.printstacktace();
if it is already exists it does not show error ,otherwise it create table..!! 
 