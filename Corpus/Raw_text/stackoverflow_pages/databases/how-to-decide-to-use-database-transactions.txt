*** how-to-decide-to-use-database-transactions ***

 How do you guys decide that you should be wrapping the sql in a transaction? 
 Please throw some light on this. 
 Cheers !! 
 
 A transaction should be used when you need a set of changes to be processed completely to consider the operation complete and valid.  In other words, if only a portion executes successfully, will that result in incomplete or invalid data being stored in your database? 
 For example, if you have an insert followed by an update, what happens if the insert succeeds and the update fails?  If that would result in incomplete data (in this case, an orphaned record), you should wrap the two statements in a transaction to get them to complete as a "set". 
 
 If you are executing two or more statements that you expect to be functionally atomic, you should wrap them in a transaction.   
 
 if your have more than a single data modifying statement to execute to complete a task, all should be within a transaction. 
 This way, if the first one is successful, but any of the following ones has an error, you can rollback (undo) everything as if nothing was ever done. 
 
 Whenever you wouldn't like it if part of the operation can complete and part of it doesn't. 
 
 Anytime you want to lock up your database and potentially crash your production application, anytime you want to litter your application with hidden scalability nightmares go ahead and create a transaction.  Make it big, slow, and put a loop inside. 
 Seriously, none of the above answers acknowledge the trade-off and potential problems that come with heavy use of transactions.  Be careful, and consider the risk/reward each time. 
 Ebay doesn't use them at all.  I'm sure there are many others. 
 http://www.infoq.com/interviews/dan-pritchett-ebay-architecture 
 
 Whenever any operation falls under ACID( **Atomicity**
, **Consistency**
, **Isolation**
, **Durability**
) criteria you should use transactions 
 Read this  article   
 