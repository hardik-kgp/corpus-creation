*** how-to-delete-child-entities-before-parent-with-entity-framework-cf ***

 I am trying to use EF code-first to delete a db record ( ) and it's children ( ). 
 
 However, Entity Framework seems to be unable to track the fact that the child records should be deleted before the parent. I get the error: 
 
 The DELETE statement conflicted with the REFERENCE constraint "ItemPrice_Item". 
  The conflict occurred in database "DEVDB", table "dbo.ItemPrices", 
  column 'Item_ItemId'. 
  The statement has been terminated. 
 
 How would I execute this delete in EF? 
 
 I ended up finding a quick line that'd do it for me: 
 
 
 EF6 
 
 
 Cascade delete in EF is dependent on cascade delete configured in relation in the database so if you don't have cascade delete configured in the database you must first load all item prices to your application and mark them as deleted. 
 
 Well the most easiest solution would be to iterate through prices first and call save changes, then set the entry to delete for deleteMe and call save changes again, but have you checked out this:  Entity framework code first delete with cascade ? It seems to be what you want. 
 Curious though also why you just aren't removing the entities from the context to delete but instead setting the entry state? 
 Another option is to set cascade delete  http://blogs.msdn.com/b/alexj/archive/2009/08/19/tip-33-how-cascade-delete-really-works-in-ef.aspx 
 Do something like this (not tested but hopefully you get the jist): 
 
 Additionally you could call: 
 
 and  
 
 instead of setting the entry state. Not sure if there is a difference behind the scenes between the two though. 
 
 Cascade delete in Entity framework is tricky thing, as you need to be sure about deletion entity object graph.It is better to always write a integration test for these cascade deletes.  
 If you try to delete parent entity in EF, it will try to execute delete statements for any child entities in current dbcontext. As a result, it will not initialize any child entities which have not been loaded. This will lead to RDBMS runtime error which violate the foreign key constraint. To be in safe side ensure all dependent entities loaded to current dbcontext before deleting. 
 
 If your object is self-referencing, you can delete both many-to-many and one-to-many children using the method below. Just remember to call db.SaveChanges() afterwards :) 
 
 
 I had a similar issue and for me, it looked like I hadn't correctly established the relationship between Parent and Child in their respective classes. 
 My fix was to add the attributes specified below to the Child class, for the property that represented its Parent's Id 
 
 
 The following works quite efficiently. 
For each relational table in your database add the following (At your context file). 
 
 Then in your code, don't forget to load these tables, before you delete 
 
 This will delete the entity (record) from the main entry table and all the connected table records (related through FK) quite fast and efficiently (Even if the relationship cascades deeply at multiple levels).  
 