*** how-to-design-the-schema-for-something-like-stackoverflow-questions-tags ***

 I have 3 plans: 
 **1, in questions table:**

 
 **2, in tags table and split:**

 
 **3, in tags table:**

 
 I think that plan 3 is better, but what's your opinion? 
 Any other good ideas for this implementation? 
 Thanks for the help :) 
 
 These patterns are called  ,   and   (from the least to the most normalized). 
 They all have their benefits and drawbacks. You can read quite a good analysis here:  
 http://forge.mysql.com/wiki/TagSchema (WayBackMachine Version) 
 Note that   heavily depends on your database's ability to perform   searches efficiently. 
 This means that for   with   and for some other systems it's very impractical. 
 
 The relationship between tags and content is  many-to-many . What this means is that one tag can be associated with several units of content, and one unit of content can be associated with several tags. 
 To implement this in a database, you can use an auxiliary table called  . The relationship of   to   is one-to-many; the relationship of   to   is one-to-many. 
 
 As you can see, the relationship is clearly reflected (content 1 is associated with tags 1 and 2; content 2 is associated with tags 1, 2, and 3; content 3 is only associated with tag 1) 
 
 Depends on how normalized you want your data to be. 
 Firstly, I cringe when I see an "id" column in a table that isn't unique. At least rename the column to "question_id". 
 Secondly, it depends on whether you want a quick listing of all tags defined. In which, case, you'd want a separate tag table defining the set of possible tags, and then an intermediate table between questions and tags that provided a many-to-many association. 
 
 The correct approach is to create the one-many relations, that is you have one comment and multiple tags. From WIKI 
 In database technology, a one-to-many (also known as to-many) relationships occurs when one entity is related to many occurrences in another entity. For example, one club has many members. 
 And the main concept in the database design is the  Database normalization . 
 So I'd do it like this. 
 
 