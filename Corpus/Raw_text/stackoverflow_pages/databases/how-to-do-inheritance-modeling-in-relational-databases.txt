*** how-to-do-inheritance-modeling-in-relational-databases ***

 My question is regarding Inheritance modeling in Relational Database Systems. I have canonical data model and in that I have some fields related to pricing of product inheriting certain attributes from product table and I want to model this inheritance in MySQL relational database and so,  
 "How can we do Inheritance Modeling in Relational Databases ?" 
 Thanks.  
 
 Martin Fowler discusses this extensively in his book Patterns of Enterprise Application Architecture book. Get this book and look into: 
 
 Single Table Inheritance 
 Class Table Inheritance 
 Concrete Table Inheritance 
 
 The Website should give you some idea. You might also want to read the section on  inheritance mappers . Each of the different approaches have their pros and cons so choose wisely. 
 
 Look at these articles for some ideas: 
 Mapping Objects to Relational Databases 
 Inheritance in O/R Mapping 
 
 If you just want to look at some web articles instead of reading a book, you can find some good articles by Googling on:   
 
 The gen-spec pattern covers a lot of the same ground that inheritance does in OOP environments. 
 If you google on 
 
 you'll get a whole new batch of articles, most of which mention inheritance explicitly. 
 There is a design technique that's summarized in the following tag  class-table-inheritance  under the info tag.  This allows you to use subclass tables to "extend" a class table, if you'll allow a strange use of the word "extend".  There's some work involved, but it's worth it. 
 
 Relational databases don't deal with objects (and, thus, inheritance) - they deal with relationships. What you're really asking is how to map your object structure to your database - and the answer to that is "it depends on your ORM layer". 
 Take a look at  Mapping Objects to Relational Databases: O/R Mapping In Detail  article for some details. If you tell us what software stack you're using, you'll likely get a more to-the-point answer. 
 
 Chapter 6 of "Practical Issues in Database Management" is probably an interesting read for you. 
 As are all the other chapters, probably, but those don't relate directly to your question. 
 