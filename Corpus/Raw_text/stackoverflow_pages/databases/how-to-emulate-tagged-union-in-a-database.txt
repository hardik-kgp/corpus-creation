*** how-to-emulate-tagged-union-in-a-database ***

 What is the best way to emulate  Tagged union  in databases?
I'm talking about something like this: 
 
 where vehicle_id would be id in car table OR motor table, and it would know which. 
 (assume that motor and car tables have nothing in common0 
 
 Some people use a design called Polymorphic Associations to do this, allowing   to contain a value that exists either in   or   tables.  Then add a   that names the table which the given row in   references.   
 The trouble is that you can't declare a real SQL foreign key constraint if you do this.  There's no support in SQL for a foreign key that has multiple reference targets.  There are other problems, too, but the lack of referential integrity is already a deal-breaker. 
 A better design is to borrow a concept from OO design of a  common supertype  of both   and  : 
 
 Then make   reference this super-type table: 
 
 And also make the sub-types reference their parent supertype.  Note that the primary key of the sub-types is  not  auto-incrementing.  The parent supertype takes care of allocating a new id value, and the children only reference that value.  
 
 Now you can have true referential integrity, but also support multiple subtype tables with their own attributes. 
 
 The answer by @Quassnoi also shows a method to enforce  disjoint subtypes .  That is, you want to prevent both   and   from referencing the same row in their parent supertype table.  When I do this, I use a single-column primary key for   but also declare a   key over  .  The foreign keys in   and   can reference the two-column unique key instead of the primary key. 
 
 
 
 I think you could model such a reference by using  table inheritance in PostgreSQL . 
 If you really need to know where a row comes from in a Query, you could use a simple UNION ALL statment like (this possibility has nothing to do with table inheritance): 
 
 