*** how-to-fallback-to-a-different-value-in-where-clause-sql ***

 I have a case where i have to fetch records for column field1='value1' if there are no values for 'value1' then i should fetch the record for 'default'. 
 For the above scenario I have used two queries: 
 
 If the above query does not give back any record I fire the following query: 
 
 Now I want to do the above stated in one query. Can someone please help me with the same. I believe the answer lies somewhere in using   clause. 
 Also the above queries should work for oracle, postgres as well as mysql. 
 
 Use CASE and Exists like below 
 
 
 Core ANSI SQL answer, expected to run on all different platforms: 
 
 
 Optimal solution using  : 
 
 Notice the   in the subquery: In this case it is mandatory to ensure that subselect doesn't return more than one row. But even using the   approach it is a good practice to add it because, otherwise, database engine would be forced to scan all rows matching the subquery. 
 Of course, most modern databases are smart enough to silently optimize it. But some old ones could not. And anyway, it can be cases where they cant. 
 That is, for example, in PostgreSQL, if subquery uses non (or non properly declared as) stable functions, the planner would be forced to perform a full scan to produce consistent results if that function has any side effect. 
 
 For Mysql: 
 
 
 Okay , i tried out this it seems to be working . 
 
 
 You could try this... 
 
 
 You can use   statement with   check. 
 
 