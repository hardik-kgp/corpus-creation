*** how-to-find-all-ids-of-children-recursively ***

 I would like to get all IDs from children in a tree with MySQL only. 
 I have a table like this: 
 
 Now I'm trying to get all child IDs for cat1 (2,3,4) recursively. Is there any way how to achieve that? 
 
 There are two basic methods for doing this: adjacency lists and nested lists. Take a look at  Managing Hierarchical Data in MySQL . 
 What you have is an adjacency list. No there isn't a way of recursively grabbing all descendants with a single SQL statement. If possible, just grab them all and map them all in code. 
 Nested sets can do what you want but I tend to avoid it because the cost of inserting a record is high and it's error-prone. 
 
 Here is a simple single-query MySql-solution: 
 
 Just substitute   with the parent element's  . 
 This will return a string with the  s of all descendants of the element with   =  , separated by  . If you would rather have multiple rows returned, with one descendant on each row, you can use something like this: 
 
 **Including the root/parent element**

 The OP asked for the children of an element, which is answered above. In some cases it might be useful to include the root/parent element in the result. Here are my suggested solutions: 
 Comma-separated string of ids: 
 
 Multiple rows: 
 
 
 You could probably do it with a stored procedure, if that's an option for you. 
 Otherwise you can't do it with a single sql-statement. 
 Ideally you should make the recursive calls to walk the tree from your program 
 
 
 create table it should be look like below 
 
 
 
 Create function for getting parent child element 
 
 
 
 write query for desire output 
 
 
 
 Seeing that the answer is basically no or at least not very easy with a single MYSQL statement, I'll post my php/mysql code to do the hierarchy list..  
 
 Then you call it by
$cat_array = createCategorySubArray(); 
 I need this to find out which promotions based on product categories are being applied to the sub categories.  
 
 Your question seems a bit imprecise.  Why do you want to have them, and what do you mean by having them, "in a tree" ? 
 The table you've got IS (the relational way to represent) the tree. 
 If you want them "in a table" with rows that hold the pairs (ID 4 , ParentID 0), then you need your SQL engine's version of recursive SQL to do this, if that engine supports it. 
 I wouldn't know about MySQL specifically, but my understanding is that they once planned to implement recursive SQL using the same syntax as Oracle, i.e. with CONNECT BY. 
 If you look in your manual's table of contents for keywords such as "recursive queries" or "CONNECT BY", I imagine you should be able to find the answer. 
 (Sorry for not being able to provide a more ready-to-consume answer.) 
 