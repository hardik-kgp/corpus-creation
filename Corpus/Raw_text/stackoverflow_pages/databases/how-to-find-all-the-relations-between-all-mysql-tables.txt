*** how-to-find-all-the-relations-between-all-mysql-tables ***

 How to find all the relations between all MySQL tables? If for example, I want to know the relation of tables in a database of having around 100 tables. 
 Is there anyway to know this? 
 
 The better way, programmatically speaking, is gathering data from  INFORMATION_SCHEMA.KEY_COLUMN_USAGE  table as follows: 
 
 There are more columns info like  ORDINAL_POSITION  that could be useful depending your purpose.  
 **More info:**
  http://dev.mysql.com/doc/refman/5.1/en/key-column-usage-table.html 
 
 Try this: 
 
 
 Try 
 
 SELECT  
  `TABLE_NAME`,  
  `COLUMN_NAME`,  
  `REFERENCED_TABLE_NAME`,  
  `REFERENCED_COLUMN_NAME`  
  FROM `information_schema`.`KEY_COLUMN_USAGE`   
  WHERE `CONSTRAINT_SCHEMA` = 'YOUR_DATABASE_NAME' AND  
  `REFERENCED_TABLE_SCHEMA` IS NOT NULL AND  
  `REFERENCED_TABLE_NAME` IS NOT NULL AND  
  `REFERENCED_COLUMN_NAME` IS NOT NULL  
 
 do not forget to replace YOUR_DATABASE_NAME with your database name! 
 
 A quick method of visualizing relationships in MySQL is reverse engineering the database with  MySQL Workbench . 
 This can be done using the reverse engineering too, which will result in an entity-relationship diagram much like the following (though you may have to organize it yourself, once it is generated): 
 
 
 
 
 you can use: 
 
 
 1)  Go into your database: 
 
 2)  Show all the tables: 
 
 3)  Look at each column of the table to gather what it does and what it's made of: 
   
 4)  Describe is nice since you can figure out exactly what your table columns do, but if you would like an even closer look at the data itself: 
 
If you have big tables, then each row usually has an  , in which case I like to do this to just get a few lines of data and not have the terminal overwhelmed: 
  - You can put any condition here you like.   
 This method give you more information than just doing  , and it also provides you with more bite-sized information each time. 
 **EDIT**

 As the comments suggested, the above   was a bad choice as a conditional placeholder.  It is not a good idea to limit by ID number, especially since the id is usually not trustworthy to be sequential.  Add   at the end of the query instead. 
 
 One option is : You can do reverse engineering to understand it in diagrammatic way. 
 When you install MySQL, you will get MySQLWorkbench. You need to open it and choose the database you want to reverse engineer. Click on Reverse Engineer option somewhere you find under the tools or Database menu. It will ask you to choose the tables. Either you select the tables you want to understand or choose the entire DB. It will generate a diagram with relationships. 
 
 I think with MySQL, for example in XAMPP, you just need to choose the database, from the   drop-down, click to expand & select   option.  
 See bellow print-screen for more details: 
 
 