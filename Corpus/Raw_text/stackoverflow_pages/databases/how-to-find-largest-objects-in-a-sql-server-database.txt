*** how-to-find-largest-objects-in-a-sql-server-database ***

 How would I go about finding the largest objects in a SQL Server database?  First, by determining which tables (and related indices) are the largest and then determining which rows in a particular table are largest (we're storing binary data in BLOBs)? 
 Are there any tools out there for helping with this kind of database analysis?  Or are there some simple queries I could run against the system tables? 
 
 I've been using this SQL script (which I got from someone, somewhere - can't reconstruct who it came from) for ages and it's helped me quite a bit understanding and determining the size of indices and tables: 
 
 Of course, you can use another ordering criteria, e.g. 
 
 to get the tables with the most rows, or  
 
 to get the tables with the most pages (8K blocks) used. 
 
 In SQL Server 2008, you can also just run the standard report Disk Usage by Top Tables.  This can be found by  **right clicking**
 the DB, selecting Reports->Standard Reports and selecting the report you want. 
 
 This query help to find largest table in you are connection. 
 
 
 You may also use the following code: 
 
 
 If you are using Sql Server Management Studio 2008 there are certain data fields you can view in the object explorer details window.  Simply browse to and select the tables folder.  In the details view you are able to right-click the column titles and add fields to the "report".  Your mileage may vary if you are on SSMS 2008 express.   
 
 I've found this query also very helpful in SqlServerCentral, here is the link to original post 
 Sql Server largest tables 
 
 In my database they gave different results between this query and the 1st answer. 
 Hope somebody finds useful 
 
 @marc_s's answer is very great and I've been using it for few years. However, I noticed that the script misses data in some columnstore indexes and doesn't show complete picture. E.g. when you do   against the script and compare it with total space database property in Management Studio the numbers don't match in my case (Management Studio shows larger numbers). I modified the script to overcome this issue and extended it a little bit: 
 
 Hope it will be helpful for someone.
This script was tested against large TB-wide databases with hundreds of different tables, indexes and schemas. 
 