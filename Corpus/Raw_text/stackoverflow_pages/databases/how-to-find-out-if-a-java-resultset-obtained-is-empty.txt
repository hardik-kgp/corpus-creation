*** how-to-find-out-if-a-java-resultset-obtained-is-empty ***

 
 Why is it so? 
 
 The pattern I normally use is as follows: 
 
 
 Here's a simple method to do it: 
 
 **Caveats**

 This moves the cursor to the beginning. But if you just want to test whether it's empty, you probably haven't done anything with it yet anyways. 
 **Alternatively**

 Use the   method immediately, before doing any processing.
    ResultSet rs = stat.executeQuery("SELECT * from table WHERE is_query_processed = 0;"); 
 
 
 ResultSet (Java Platform SE 6) 
 
 You can do this too: 
 
 
 
 is used to iterate over a result set.so results.next() will return false if its empty. 
 
 
 Why is execution not entering the
  while loop? 
 
 If your ResultSet is empty the   method returns false and the body of the while loop isn't entered regardless to the rownumber (not count)   returns. Colins example works. 
 
 Shifting the cursor forth and back to determine the amount of rows is not the normal JDBC practice. The normal JDBC practice is to map the   to a   of value objects each representing a table row entity and then just use the   methods to determine if there are any rows. 
 For example: 
 
 where the   method look like as follows: 
 
 Also see  this answer  for other JDBC examples. 
 
 CLOSE_CURSORS_AT_COMMIT 
 public static final int CLOSE_CURSORS_AT_COMMIT 
 
 
 Try with this: 
 
 This manner you'll be able work normally. 
 
 This checks if it's empty or not while not skipping the first record 
 
 
 May be you can convert your resultset object into String object and check whether is it empty or not. 
 
 