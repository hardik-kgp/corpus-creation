*** how-to-get-fully-materialized-query-from-querydsl ***

 I am trying to use querydsl for building dynamic queries for dynamic schemas. I am trying to get just the query instead of having to actually execute it. 
 So far I have faced two issues:
- The schema.table notation is absent. Instead I only get the table name.
- I have been able to get the query but it separates out the variables and puts '?' instead which is understandable. But I am wondering if there is some way to get fully materialized query including the parameters. 
 Here is my current attempt and result(I am using MySQLTemplates to create the configuration): 
 
 And what I get is: 
 
 What I wanted to get was: 
 
 Update:  I came up with this sort of  **hack to get parameters materialized**
(Not ideal and would love better solution) But still  **could not get Schema.Table notation to work**
: 
 Hack follows. Please suggest cleaner QueryDsl way of doing it: 
 
 
 To enable schema printing use the following pattern 
 
 SQLTemplates subclasses were used before, but since some time the builder pattern is the official way to customize the templates  http://www.querydsl.com/static/querydsl/3.3.1/reference/html/ch02s03.html#d0e904 
 And to enable direct serialization of literals use  
 
 Here is a full example 
 
 If you always just want the SQL query string out, move setUseLiterals from query to configuration. 
 Concerning the usage of Querydsl expressions the usage of code generation like documented here is advised  http://www.querydsl.com/static/querydsl/3.3.1/reference/html/ch02s03.html 
 It will make your code typesafe, compact and readable. 
 If you want to try Querydsl without code generation you can replace 
 
 with 
 
 
 When working with QueryDSL, you must provide a template for the database platform to build the query for.  I see you are already are doing this here: 
 
 To make the schema name appear in the generated query, the only way I have found to do this is (there may be an easier way) is to extend the template class and explicitly call   inside the constructor.  Here is a class that should work for MySql: 
 
 Then simply use this   class in place of the   class like this: 
 
 I have this working using PostgresTemplates, so I may have a typo or mistake in the NewMySqlTemplates class above, but you should be able to get it to work.  Good luck! 
 