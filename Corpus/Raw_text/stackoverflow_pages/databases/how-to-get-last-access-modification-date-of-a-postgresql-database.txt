*** how-to-get-last-access-modification-date-of-a-postgresql-database ***

 On development server I'd like to remove unused databases. To realize that I need to know if database is still used by someone or not.  
 Is there a way to get last access or modification date of given database, schema or table? 
 
 You can do it via checking last modification time of table's file.
In postgresql,every table correspond one or more os files,like this: 
 
 the relfilenode is the file name of table "test".Then you could find the file in the database's directory. 
 in my test environment: 
 
 the last command means listing all files ordered by last modification time. 
 
 There is no built-in way to do this - and  all the approaches that check the file mtime described in other answers here are wrong . The only reliable option is to add triggers to every table that record a change to a single change-history table, which is horribly inefficient and can't be done retroactively. 
 If you only care about "database used" vs "database not used" you can potentially collect this information from the CSV-format database log files. Detecting "modified" vs "not modified" is a lot harder; consider  . 
 If you don't need to detect  old  activity, you can use  , which records activity  since the last stats reset . e.g.: 
 
 so I can see that there  has  been activity on this DB since the last stats reset. However, I don't know anything about what happened before the stats reset, so if I had a DB showing zero activity since a stats reset half an hour ago, I'd know nothing useful. 
 
 PostgreSQL 9.5 let us to track last modified commit. 
 
 Check track commit is on or off using the following query 
 
 If it return "ON" go to step 3 else modify postgresql.conf 
 
 Change  
 
 to  
 
 Restart the postgres / system 
 Repeat step 1. 
 Use the following query to track last commit  
 
 
 
 My way to get the modification date of my tables: 
 Python Function 
 
 SQL Query 
 
 I'm not sure if things like vacuum can mess this aproach, but in my tests it's a pretty acurrate way to get tables that are no longer used, at least, on INSERT/UPDATE operations. 
 
 I guess you should activate some log options. You can get information about logging on postgreSQL  here . 
 