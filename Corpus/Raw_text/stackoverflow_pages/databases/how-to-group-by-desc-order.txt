*** how-to-group-by-desc-order ***

 I have the following table called questions: 
 
 I want to select each asker only once and if there are multiple askers with the same name, select the one of the highest id. So, the expected results: 
 
 I use the following query: 
 
 I get the following result: 
 
 So it selects the first 'Bob' it encounters instead of the last one. 
 Thanks 
 
 If you want the last   for each  , then you should use an aggregate function: 
 
 The reason why you were getting the unusual result is because MySQL uses an extension to   which allows items in a select list to be nonaggregated and not included in the GROUP BY clause. This however can lead to unexpected results because MySQL can choose the values that are returned. (See  MySQL Extensions to GROUP BY )  
 From the MySQL Docs: 
 
 MySQL extends the use of GROUP BY so that the select list can refer to nonaggregated columns not named in the GROUP BY clause. ... You can use this feature to get better performance by avoiding unnecessary column sorting and grouping. However, this is useful primarily when all values in each nonaggregated column not named in the GROUP BY are the same for each group. The server is free to choose any value from each group, so unless they are the same, the values chosen are indeterminate. Furthermore, the selection of values from each group cannot be influenced by adding an ORDER BY clause. Sorting of the result set occurs after values have been chosen, and ORDER BY does not affect which values the server chooses. 
 
 Now if you had other columns that you need to return from the table, but don't want to add them to the   due to the inconsistent results that you could get, then you could use a subquery to do so. ( Demo ) 
 
 
 Normally MySQL allows group by ascending order records only. So we can order records before grouping. 
 
SELECT *
FROM (
  SELECT *
  FROM questions
  ORDER BY id DESC
) AS questions
GROUP BY questions.asker
 
 
 The records need to be grouped using   and   to get the maximum ID for every  . 
 
 
 SQLFiddle Demo 
 
 OUTPUT 
 
 
 The others are correct about using MAX(ID) to get the results you want.  If you're wondering why your query doesn't work, it's because   happens  after  the  . 
 
 Im writing this answer because @Taryn's first/shorter alternative in accepted answer works only if you are exactly selecting just columns used in GROUP BY and MAX. User asking question is selecting all columns in table (he used SELECT *). So when you add another 3rd column to table, that column value in query result will be incorrect. You will get mixed values from different table rows. @Taryn's second/longer alternative (using inner join and subquery) works but query is uselessly complicated and  **is 5 times slower**
 in my use case than my simple alternative below.  
 
 Consider table  : 
 
 Query   returns  **expected**
: 
 
 
 Now consider another table  : 
 
 Query   returns  **unexpected**
: 
 
 ... note that value of   for second row of result is incorrect because   comes from second row of table but   comes from first row of table! That is way many users in comments of Taryn's answer reports that this solution does not work. 
 
 Possible simple solution when selecting also another columns is to use   +  : 
 
 
 (see demo:  https://www.db-fiddle.com/f/esww483qFQXbXzJmkHZ8VT/10 ) 
 ... but this simple solution has some limitations: 
 
 Table must be InnoDB (I think it is not problem because you will get better performance and also since MySQL >= 5.5.5 default/preferred storage engine was changed from MyISAM to InnoDB) 
 You have to create index for column which is used in GROUP BY - so   in this case (I think it is not problem because you will get better performance since index is suitable in this case. GROUP BY usually needs creation of tmp table but when index is available tmp table will not be created which is faster) 
 For MySQL 5.7 and 8.0 is needed to disable SQL mode ONLY_FULL_GROUP_BY (e.g  ) or use   on selected columns which are not aggregated to avoid error  ER_WRONG_FIELD_WITH_GROUP. 
 Unfortunately MySQL developers removed support of ASC/DESC withing GROUP BY since MySQL 8.0  https://dev.mysql.com/worklog/task/?id=8693  but fortunately there is alternative  : 
 
 
 
 (see demo:  https://www.db-fiddle.com/f/esww483qFQXbXzJmkHZ8VT/11 ) 
 ... result is the same as above with   (do not forget to use InnoDB and create index). 
 
 To get every column: 
 
 Improved version of the answer of @bluefeet. 
 
 It's because   is performed  AFTER   . 
 Try this: 
 
 