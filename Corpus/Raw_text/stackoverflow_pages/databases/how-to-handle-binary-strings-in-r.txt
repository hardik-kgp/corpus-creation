*** how-to-handle-binary-strings-in-r ***

 R is not able to cope with null-strings (\0) in characters, does anyone know how to handle this? More concrete, I want to store complex R objects within a database using an ODBC or JDBC connection. Since complex R objects are not easily to be mapped to dataframes, I need a different possibility to store such objects. An object could be for example: 
 
 Because >model< cannot be stored directly in a database, I use the serialize() function to retrieve a binary representation of the object (in order to store it in a BLOB column): 
 
 Now I would like to store this via ODBC/JDBC. To do so, I need a string representation of the object in order to send a query to the database, e.g. INSERT INTO. Since the result is a vector of type raw vector, I need to convert it: 
 
 And there is the problem:  
 
 R is not able to deal with \0 in strings. Does anyone has an idea how to bypass this restriction? Or is there probably a completly different approach to achieve this goal? 
 Thanks in advance 
 
 You need  
 
 for a character representation of the raw bit codes. rawToChar will try to convert the raw bit codes, which is not what you want in this case. 
 The resulting stringModel can be converted later on back to the original model by : 
 
 
 Regarding the writing of binary types to databases through RODBC : as for today, the  vignette of RODBC  reads (p.11) : 
 
 Binary types can currently only be
  read as such, and they are returned as
  column of class "ODBC binary" which is
  a list of raw vectors. 
 
 
 A completely different approach would be to simply store the output of   along with a descriptive name and then reconstitute it with   or  . See comments below regarding the need for capture.output(). 
 
 