*** how-to-implement-a-many-to-many-relationship-in-postgresql ***

 I believe the title is self-explanatory. How do you create the table structure in  PostgreSQL to make a many-to-many relationship. 
 My example: 
 
 
 The SQL DDL (data definition language) statements could look like this: 
 
 I made a few adjustments: 
 
 The  **n:m relationship**
 is normally implemented by a separate table -   in this case. 
 I added   columns as  **surrogate primary keys**
. I highly recommend that, because the name of a product is hardly unique. Also, enforcing uniqueness and referencing the column in foreign keys is much cheaper with a 4-byte   than with a string stored as   or  . 
In Postgres 10 or later consider an   column  instead. Details: 
 
 https://blog.2ndquadrant.com/postgresql-10-identity-columns/ 
 
 Don't use names of basic data types like   as  **identifiers**
. While this is possible, it is bad style and leads to confusing errors and error messages. Use  legal, lower case, unquoted identifiers . Never use  reserved words  and avoid double-quoted mixed case identifiers if you can. 
  is not a good name. I renamed the   column of the table   to be  . That is a better  **naming convention**
. Otherwise, when you join a couple of tables in a query - which you do  a lot  in a relational database - you end up with multiple columns named   and have to use column aliases to sort out the mess. That's not helpful. Another widespread anti-pattern would be just   as column name. 
I am not sure what the name of a   would be. Maybe   can be the  name  in this case. 
  is of  **data type**
   to store fractional numbers  precisely as entered  (arbitrary precision type instead of floating point type). If you deal with whole numbers exclusively, make that  . For example, you could save  prices as Cents . 
 The   (  in your question) goes into the linking table   and is of type   as well. Again,   if you deal with whole numbers exclusively. 
 You see the  **foreign keys**
 in  ? I created both to cascade changes ( ): If a   or   should change, the change is cascaded to all depending entries in   and nothing breaks. 
I also used   for  : If you delete a bill, the details are deleted with it. 
Not so for products: You don't want to delete a product that's used in a bill. Postgres will throw an error if you attempt this. You would add another column to   to mark obsolete rows instead. 
 All columns in this basic example end up to be  , so   values are not allowed. (Yes,  all  columns - columns used in a primary key are defined   automatically.) That's because   values wouldn't make sense in any of the columns. It makes a beginner's life easier. But you won't get away so easily, you need to understand   handling  anyway. Additional columns might allow   values, functions and joins can introduce   values in queries etc. 
 Read the chapter on   in the manual . 
 Primary keys are implemented with a unique  **index**
 on the key columns, that makes queries with conditions on the PK column(s) fast. However, the sequence of key columns is relevant in multicolumn keys. Since the PK on   is on   in my example, you may want to add another index on just   or   if you have queries looking for given a   and no  . Details: 
 
 PostgreSQL composite primary key 
 Is a composite index also good for queries on the first field? 
 Working of indexes in PostgreSQL 
 
 Read the  chapter on indexes in the manual . 
 
 