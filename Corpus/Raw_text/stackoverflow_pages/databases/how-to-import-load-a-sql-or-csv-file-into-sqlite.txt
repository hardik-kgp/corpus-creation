*** how-to-import-load-a-sql-or-csv-file-into-sqlite ***

 I need to dump a  **.sql**
 or  **.csv**
 file into SQLite (I'm using SQLite3 API). I've only found documentation for importing/loading tables, not entire databases. Right now, when I type: 
 
 I get a syntax error, since it's expecting a table and not an entire DB. 
 
 To import from an SQL file use the following: 
 
 To import from a CSV file you will need to specify the file type and destination table: 
 
 
 Try doing it from the command like: 
 
 This will obviously only work with SQL statements in dump.sql. I'm not sure how to import a CSV. 
 
 To go from SCRATCH with SQLite DB to importing the CSV into a table: 
 
 Get SQLite from the website. 
 At a command prompt run   *It will be created as an empty file. 
 Make a new table in your new database. The table must match your CSV fields for import. 
 You do this by the SQL command:  
 
 Once you have the table created and the columns match your data from the file then you can do the above... 
 
 
 The sqlite3 .import command won't work for ordinary csv data because it treats any comma as a delimiter even in a quoted string.  
 This includes trying to re-import a csv file that was created by the shell: 
 
 It seems we must transform the csv into a list of Insert statements, or perhaps a different delimiter will work. 
 Over at SuperUser I saw a suggestion to use LogParser to deal with csv files, I'm going to look into that.  
 
 If you are happy to use a (python) script then there is a python script that automates this at:  https://github.com/rgrp/csv2sqlite 
 This will auto-create the table for you as well as do some basic type-guessing and data casting for you (so e.g. it will work out something is a number and set the column type to "real"). 
 
 Remember that the default delimiter for SQLite is the pipe "|" 
 
 http://sqlite.awardspace.info/syntax/sqlitepg01.htm#sqlite010 
 
 SQLite is extremely flexible as it also allows the SQLite specific  dot commands  in the SQL syntax, (although they are interpreted by CLI.) This means that you can do things like this. 
 Create a   table like this: 
 
 Then two files:  
 
 To test the import of the CSV file using the SQL file, run: 
 
 In conclusion, this means that you can use the   statement in SQLite SQL, just as you can do in any other RDB, like MySQL with   etc. However, this is not recommended.  
 
 Check out termsql.  https://gitorious.org/termsql   https://gitorious.org/termsql/pages/Home 
 It converts text to SQL on the command line. (CSV is just text) 
 Example: 
 
 By default the delimiter is whitespace, so to make it work with CSV that is using commata, you'd do it like this: 
 
 alternatively you can do this: 
 
 By default it will generate column names "COL0", "COL1", if you want it to use the first row for the columns names you do this: 
 
 If you want to set custom column names you do this: 
 
 
 if you are using it in windows, be sure to add the path to the db in "" and also to use double slash \ in the path to make sure windows understands it. 
 
 This is how you can insert into an identity column: 
 
 myfile.txt is a file in C:\code\db\predefined\ 
 data.db is in C:\code\db\ 
 myfile.txt contains strings separated by newline character. 
 If you want to add more columns, it's easier to separate them using the pipe character, which is the default. 
 
 Import your csv or sql to sqlite with  phpLiteAdmin , it is excellent. 
 