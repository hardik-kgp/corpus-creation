*** how-to-insert-values-into-two-tables-with-a-foreign-key-relationship ***

 I created two tables: 
 
 Table   with columns   (primary key, auto increment),  ,  ,  
 Table   with columns   (primary key, auto increment),   (foreign key to  ),  
 
 I have form to create new staff with existing role. Data sample to insert:  
 
 I want to write a stored procedure in SQL Server 2014 to insert new staff to   and insert new record into   with   I just inserted. 
 What should I do? 
 I am so sorry if my question is duplicate with other. I am fresher in SQL.
Thanks for any help. 
 
 Use  SCOPE_IDENTITY()  second insert into   on a place of  . Like: 
 
 **EDIT**

 There too much comments on this answer, so I want to give an explanation. 
 If OP guarantee that he will not use any triggers he may use   (bad practice), it is sufficient enough to his needs, but best practice to use  .  
 
 SCOPE_IDENTITY(), like @@IDENTITY, will return the last identity value created in the current session, but it will also limit it to your current scope as well. In other words, it will return the last identity value that you explicitly created, rather than any identity that was created by a trigger or a user defined function. 
 
  will guarantee that you get identity from current operation, not from another connection or last one processed. 
 Why not  ? Because  
 
 IDENT_CURRENT is not limited by scope and session; it is limited to a specified table. IDENT_CURRENT returns the identity value generated for a specific table in any session and any scope. 
 
 So you make take last scoped but not current one. Yes, OP can use it too, but it is a bad practice in that situation (like using only  ) 
 Using   is indeed good practice, but over complicated for only one identity. If OP need to process more then one row in a time - yes, he need   . 
 
 Because it seems like you are discussing 1 row at a time some people may tell you to use a system vairable like   or some of the others but to ensure with more certainty I recommend the   clause of the insert statement.  The good thing about this method is it can easily be adapted to handle more than 1 row at a time. 
 
 Reasons not to use   in case another operation linked to yours is performed.  E.g. a trigger inserts another row into another table, or updates another record in your database.,   has a similar shortfall when a trigger modifies the same table.    has a short coming too.  Do an internet search to learn more there are tons of great resources on these. 
 
 You can use   from your first insert statement. 
 
 You can insert several roles at once as well.  
 
 
 After the insert into the first table use something like 
 
 
 Try this: 
 
 Please note to the differences between  ,   and  . Read about it  Here 
 