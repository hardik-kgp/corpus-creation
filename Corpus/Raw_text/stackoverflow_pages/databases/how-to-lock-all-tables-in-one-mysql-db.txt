*** how-to-lock-all-tables-in-one-mysql-db ***

 I write a backup shell script to execute mysqldump. 
 
 My db's storage ENGINE is MyISAM. So I can't use   option.
The   only lock one table in mysqldump progress.
There are many databases in my MySQL instance, I don't want to use  , it will lock all databases run in my server.
So, How to lock all tables in ONE mysql database at sametime so I can dump it? 
 
 Not the prettiest solution by far, but this works.  I had the same need and here's my solution, slightly modified to match your variable names.  I'm assuming you're running MySQL on Linux, as this relies pretty heavily on shell BASH semantics.  If you're on Windows, this probably won't work. 
 
 
 You should look into this option. 
 
 
 Closes all open tables and locks all tables for all databases with a global read lock. This is a very convenient way to get backups... 
 
 http://dev.mysql.com/doc/refman/5.0/en/flush.html 
 
 Here's how I did it. It should work in all cases since it uses  .  
 
 The shell   command is just to make sure that the background task running the mysql locking command is executed before the mysqldump starts. You could reduce it to 1 second and it should still be fine. Increase it to 30 seconds and try inserting a values in any table from another client during those 30 seconds you'll see it's locked. 
 There are 2 advantages in using this manual background locking, instead of using the   options   and  : 
 
 This locks everything, if you have mixed MyISAM/InnoDB tables. 
 You can do run other commands in addition to the   during the same locking period. It's useful, for instance, when setting up replication on a master node, because you need to get the binary log position with   at the exact state of the dump you created (before unlocking the database), to be able to create a replication slave. 
 
 