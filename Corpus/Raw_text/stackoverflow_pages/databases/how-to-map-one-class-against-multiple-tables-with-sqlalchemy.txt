*** how-to-map-one-class-against-multiple-tables-with-sqlalchemy ***

 Lets say that I have a database structure with three tables that look like this: 
 
 I would like to be able to do this in SQLAlchemy: 
 
 I'm new to SQLAlchemy and I found this in the documentation ( http://www.sqlalchemy.org/docs/05/mappers.html#mapping-a-class-against-multiple-tables ):  
 
 It only adds item_id and attribute_id to Item and its not possible to add attributes to Item object. 
 Is what I'm trying to achieve possible with SQLAlchemy? Is there a better way to structure the database to get the same behaviour of "dynamic columns"? 
 
 This is called the  entity-attribute-value  pattern. There is an example about this under the SQLAlchemy examples directory:  vertical/ . 
 If you are using PostgreSQL, then there is also the   contrib module that can store a string to string mapping. If you are interested then I have some code for a custom type that makes it possible to use that to store extended attributes via SQLAlchemy. 
 Another option to store custom attributes is to serialize them to a text field. In that case you will lose the ability to filter by attributes. 
 
 The link to vertical/vertical.py is broken. The example had been renamed to   and  
 I am pasting in the contents of  : 
 
 