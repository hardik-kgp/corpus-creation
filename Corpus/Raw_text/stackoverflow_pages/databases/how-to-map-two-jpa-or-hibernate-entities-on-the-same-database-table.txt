*** how-to-map-two-jpa-or-hibernate-entities-on-the-same-database-table ***

 In our project, we have an entity 'Restaurant' with nearly 30 fields(some have relationships with other entities). So, every time we need a 'Restaurant' object even for a few fields, all the others are retrieved. This effects the performance. So, in the HBM file, we wrote two classes both pointing to the same physical class and same database table, as shown below. 
 
 In one of the DAO implementations, we are using Criteria which takes 'RestaurantLite' and returning list of restaurants as shown below. 
 
 Now we want to remove all hbm files and use annotations. So how the same can be done using annotations for entites? Do we need to create an extra class 'RestaurantLite'? If then, how the above criteria returns 'Restaurant' objects?? 
 
 
 Since this is a very common question, I decided to write a  detailed article  about it. 
 
 To summarize it, the following mappings are going to demonstrate how you can map multiple entities to the same database table: 
 
 And Hibernate will work just fine: 
 
 
 The   is just a read-only View over your original entity, hence I annotated it with  . 
 The   is marked with   and so you can propagate changes from this View entity too. 
 
 This test is also available on  GitHub . 
 
 You have to add annotation @Entity,@Table(name="RESTAURANT") on your class, add annotations and replace your detailed mapping in hbm file by 
. 
 Here a complete example:  http://viralpatel.net/blogs/hibernate-many-to-many-annotation-mapping-tutorial/ 
 