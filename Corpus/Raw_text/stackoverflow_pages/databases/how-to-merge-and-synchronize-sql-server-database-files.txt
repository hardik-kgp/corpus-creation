*** how-to-merge-and-synchronize-sql-server-database-files ***

 I'm building a C# program for windows tablets that are synchronized with a database. They will each have their own local   SQL Server database which they interact with using SQL Server Express. 
 However the users will take the tablets out of an internet connection and make changes. Then when one reconnects to the network which contains a "master copy" of the DataBase, I want to synchronize their   database with that. Then replace the database files of the computer and the tablet with the newly synchronized one. 
 I have a   column, and a   of when that row was last changed, so if there were conflicts I'd just take the most recent change.  
 I've read some literature on this, but I'd love to see an explicit example or tutorial of how to do it. I know what I want is  Merge Replication , and that  Microsoft Sync Framework  seems to have the functionality I want. I just am struggling to implement it. Alternatively, feel free to recommend a different tool to do it. 
 Thanks in advance!  
 
 I know this isn't much of an answer but I'm sure this is done with  Microsoft Sync Framework . I'm also quite sure you can easily sync a db from a tablet even though it was offline. The only limitation could be the lack of  **live**
 sync for which you'd need to use Azure services, WebSockets, Apache MQ or whatever. Apologies for lack of more info, I'd post it as a comment but don't have enough points. 
 
 if it's a Windows Store App (WinRT), you have to use the  Sync Framework Toolkit  . 
 if plain Windows app (WPF, WinForms, etc...), yes, you can use Sync Framework.  
 the idea for both is that your Windows app uses a local database (SQL CE, LocalDB, SQLite, etc...) for CRUD that you occasionally sync with a central server when you have connection (via WCF, like  this ) 
 
 MS Merge Replication is complex, but based on your use case you will not need most of the functionality. I will warn you ahead of time that it is known to have problems.  It's not very reliable in the Enterprise. It works but it just requires baby sitting.  If you don't mind the service calls, then proceed.  If you want a robust sync system (for your use case) then you are better off rolling your own using audit tables.  It's not that difficult to do; especially since you are already using guids as your primary keys. You would also benefit from using sequential guids.  Random guids will fragment your clustered index and your database performance will suffer greatly. If you need help with implementation, reach out to me.  I've successfully done this for a client. They process over a million records per day without a single issue.  If you still want to use MS Merge Replication I can do that for you as well.   
 
 Most existing tools like Microsoft Sync and Merge-Replication ended seeming likebeing way too much overkill and being more hassle than they'd be worth. 
 This is my SQL Script to attach the databases 
 
 Then to sync the databases 
 
 