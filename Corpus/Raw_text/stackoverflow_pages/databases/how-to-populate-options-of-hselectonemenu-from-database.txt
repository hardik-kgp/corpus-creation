*** how-to-populate-options-of-hselectonemenu-from-database ***

 I am creating a web application, where you have to read a list of objects / entities from a DB and populate it in a JSF  . I am unable to code this. Can someone show me how to do it? 
 I know how to get a   from the DB. What I need to know is, how to populate this list in a  . 
 
 
 Based on your question history, you're using JSF 2.x. So, here's a JSF 2.x targeted answer. In JSF 1.x you would be forced to wrap item values/labels in ugly   instances. This is fortunately not needed anymore in JSF 2.x. 
 
 **Basic example**

 To answer your question directly, just use   whose   points to a   property which you preserve from the DB during bean's (post)construction. Here's a basic kickoff example assuming that   actually represents a  . 
 
 with 
 
 Simple as that. Actually, the  's   will be used to represent both the dropdown item label and value. So, when you're instead of   using a list of complex objects like   and you haven't overridden the class'   method, then you would see   as item values. See next section how to solve it properly. 
 Also note that the bean for   value does not necessarily need to be the same bean as the bean for   value. This is useful whenever the values are actually applicationwide constants which you just have to load only once during application's startup. You could then just make it a property of an application scoped bean. 
 
 
 **Complex objects as available items**

 Whenever   concerns a complex object (a javabean), such as   which has a   property of  , then you could use the   attribute to get hold of the iteration variable which you in turn can use in   and/or   attribtues (if you omit the  , then the label becomes the same as the value). 
 Example #1: 
 
 with 
 
 Or when it has a   property   which you would rather like to set as item value: 
 Example #2: 
 
 with 
 
 
 **Complex object as selected item**

 Whenever you would like to set it to a   property in the bean as well and   represents an  , then you would need to bake a custom   which converts between   and an unique string representation (which can be the   property). Do note that the   must represent the complex object itself, exactly the type which needs to be set as selection component's  . 
 
 with 
 
 and 
 
 (please note that the   is a bit hacky in order to be able to inject an   in a JSF converter; normally one would have annotated it as  ,  but that unfortunately doesn't allow   injections ) 
 Don't forget to make sure that the complex object class has   and   properly implemented , otherwise JSF will during render fail to show preselected item(s), and you'll on submit face  Validation Error: Value is not valid . 
 
 
 **Complex objects with a generic converter**

 Head to this answer:  Implement converters for entities with Java Generics . 
 
 **Complex objects without a custom converter**

 The JSF utility library  OmniFaces  offers a special converter out the box which allows you to use complex objects in   without the need to create a custom converter. The   will simply do the conversion based on readily available items in  . 
 
 
 **See also:**

 
 Our   wiki page 
 
 
 **View-Page**

 
 **Backing-Bean**

 
 To display particular selected record, it must be one of the values in the list. 
 
 **Roll-your-own generic converter for complex objects as selected item**

 The Balusc gives a very useful overview answer on this subject. But there is one alternative he does not present: The Roll-your-own generic converter that handles complex objects as the selected item. This is very complex to do if you want to handle all cases, but pretty simple for simple cases. 
 The code below contains an example of such a converter. It works in the same spirit as the OmniFaces  SelectItemsConverter  as it looks through the children of a component for   containing objects. The difference is that it only handles bindings to either simple collections of entity objects, or to strings. It does not handle item groups, collections of  s, arrays and probably a lot of other things. 
 The entities that the component binds to must implement the   interface. (This could be solved in other way, such as using  .) 
 Note that the entities must implement   in such a way that two entities with the same ID compares equal. 
 The only thing that you need to do to use it is to specify it as converter on the select component, bind to an entity property and a list of possible entities: 
 
 Converter: 
 
 
 I'm doing it like this: 
 
 Models are ViewScoped 
 converter: 
 
 
 and bind to component with: 
 
 If you will use entity id rather than hashCode you can hit a collision- if you have few lists on one page for different entities (classes) with the same id 
 
 Call me lazy but coding a Converter seems like a lot of unnecessary work. I'm using Primefaces and, not having used a plain vanilla JSF2 listbox or dropdown menu before, I just assumed (being lazy) that the widget could handle complex objects, i.e. pass the selected object as is to its corresponding getter/setter like so many other widgets do. I was disappointed to find (after hours of head scratching) that this capability does not exist for this widget type without a Converter. In fact if you supply a setter for the complex object rather than for a String, it fails silently (simply doesn't call the setter, no Exception, no JS error), and I spent a ton of time going through  BalusC's excellent troubleshooting tool  to find the cause, to no avail since none of those suggestions applied. My conclusion: listbox/menu widget needs adapting that other JSF2 widgets do not. This seems misleading and prone to leading the uninformed developer like myself down a rabbit hole. 
 In the end I resisted coding a Converter and found through trial and error that if you set the widget value to a complex object, e.g.: 
 
 ... when the user selects an item, the widget can call a String setter for that object, e.g.  , and the String passed is a JSON String representing the Thing object. I can parse it to determine which object was selected. This feels a little like a hack, but less of a hack than a Converter. 
 