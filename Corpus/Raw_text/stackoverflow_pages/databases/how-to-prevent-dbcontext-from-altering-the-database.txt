*** how-to-prevent-dbcontext-from-altering-the-database ***

 I'm learning Entity Framework (currently using EF6 beta) and I'm using the code first pattern on an existing database. The entities and   class are created automatically using a T4 template. 
 I would like to prevent the   from creating / altering anything into the database at runtime. 
 How can I do that? 
 
 When you do  **enable-migrations**
 command, you will be presented with folder  **/Migrations**
 under which you can find file named  **Configuration.cs**
. Within constructor of that file, by the default, there is a property set to value: 
 
 Which will ensure that your database won't be migrated automatically, but rather by invoking each migration manually. 
 However, if your database is larger than your domain models, i.e. you're just operating on the portion of already existing database, then somewhere in your application start (if it is ASP.NET app,  **Application_Start**
 event handler), you need to add the following code: 
 
 Otherwise, Entity Framework will complain that there is a mismatch between database definition in your domain model and actual current state of the database. 
 **EDIT:**

 If you want to be sure that YourDbContext is not attempting to change database, do this: 
 
 **EDIT again:**

 I'm trying to understand what scenario are you trying to accomplish. If you have existing database, and you want to update it but only manually, this is the approach: 
 
 Use DbContext generator template to generate DbContext and entities
from existing database.  
 Run enable-migrations 
 Do add-migration Initial 
 Step 3 should generate empty migration if everything was done
properly. You can delete it. 
 Now whenever you do some change, you need to do add-migration
ChangeName. This will not go to database, unless you do
update-database. 
 
 
 Set the initialiser for your context to  .  
 That should leave the database in it's existing state when the application starts up.  
 Note that you'll get an exception if you try to run the application after altering your dbContext class and/or your database schema, as your database schema will no longer match what the context expects. 
 
 I had this issue with DBFirst and EF 6.1 it was creating a new table based on the EntityName. So I modified the OnModelCreating virtual method to map my tables.  
 So if the EntityName was named MyStuffs since by default the EnitityNames are pluralized which you do have the option to deselect that during the EF generation. In my case the wizard was generating the pluralized version of the table. 
 
 