*** how-to-randomly-select-rows-in-sql ***

 I am using MSSQL Server 2005. In my db, I have a table "customerNames" which has two columns "Id" and "Name" and approx. 1,000 results.  
 I am creating a functionality where I have to pick 5 customers randomly every time. Can anyone tell me how to create a query which will get random 5 rows (Id, and Name) every time  when query is executed? 
 
 
 That said, everybody seems to come to this page for the more general answer to your question: 
 **Selecting a random row in SQL**

 **Select a random row with MySQL:**

 
 **Select a random row with PostgreSQL:**

 
 **Select a random row with Microsoft SQL Server:**

 
 **Select a random row with IBM DB2**

 
 **Select a random record with Oracle:**

 
 **Select a random row with sqlite:**

 
 
 
 
 Maybe  this site  will be of assistance. 
 For those who don't want to click through: 
 
 
 In case someone wants a PostgreSQL solution: 
 
 
 There is a nice Microsoft SQL Server 2005 specific solution here.
Deals with the problem where you are working with a large result set (not the question I know). 
 Selecting Rows Randomly from a Large Table
 http://msdn.microsoft.com/en-us/library/cc441928.aspx 
 
 SELECT * FROM TABLENAME ORDER BY random() LIMIT 5;  
 
 This is an old question, but attempting to apply a new field (either NEWID() or ORDER BY rand()) to a table with a large number of rows would be prohibitively expensive. If you have incremental, unique IDs (and do not have any holes) it will be more efficient to calculate the X # of IDs to be selected instead of applying a GUID or similar to every single row and then taking the top X # of.  
 
 If you wanted to select many more rows I would look into populating a #tempTable with an ID and a bunch of rand() values then using each rand() value to scale to the min-max values. That way you do not have to define all of the @randomId1...n parameters. I've included an example below using a CTE to populate the initial table. 
 
 
 I have found this to work best for big data. 
 
  is random but need to add the   to get the correct sample size. 
 Using   is very slow on large tables. 
 
 If you have a table with millions of rows and care about the performance, this could be a better answer: 
 
 https://msdn.microsoft.com/en-us/library/cc441928.aspx 
 
 As I explained in  this article , in order to shuffle the SQL result set, you need to use a database-specific function call. 
 
 Note that sorting a large result set using a RANDOM function might turn out to be very slow, so make sure you do that on small result sets. 
 If you have to shuffle a large result set and limit it afterward, then it's better to use something like the  Oracle   or the   in  SQL Server  or  PostgreSQL  instead of a random function in the ORDER BY clause. 
 
 So, assuming we have the following database table: 
 
 And the following rows in the   table: 
 
 **Oracle**

 On Oracle, you need to use the   function, as illustrated by the following example: 
 
 When running the aforementioned SQL query on Oracle, we are going to get the following result set: 
 
 
 Notice that the songs are being listed in random order, thanks to the   function call used by the ORDER BY clause. 
 
 **SQL Server**

 On SQL Server, you need to use the   function, as illustrated by the following example: 
 
 When running the aforementioned SQL query on SQL Server, we are going to get the following result set: 
 
 
 Notice that the songs are being listed in random order, thanks to the   function call used by the ORDER BY clause. 
 
 **PostgreSQL**

 On PostgreSQL, you need to use the   function, as illustrated by the following example: 
 
 When running the aforementioned SQL query on PostgreSQL, we are going to get the following result set: 
 
 
 Notice that the songs are being listed in random order, thanks to the   function call used by the ORDER BY clause. 
 
 **MySQL**

 On MySQL, you need to use the   function, as illustrated by the following example: 
 
 When running the aforementioned SQL query on MySQL, we are going to get the following result set: 
 
 
 Notice that the songs are being listed in random order, thanks to the   function call used by the ORDER BY clause. 
 
 