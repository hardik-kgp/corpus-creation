*** how-to-recover-a-corrupt-sqlite3-database ***

 This is a follow up question to a previously answered post:  Is there a command line utility for validating SQLite databases in Linux? 
 If a database is producing the following error: 
 
 Is there any cleanup processing that can be done to recover the database to a usable state? Even at the potential loss of some corrupt records? 
 Thanks 
 
 If there were any automatic method, SQLite would already be able to do it. 
 Sometimes, the corruption is only or mostly in indexes, in which case it would be possible to get some or most records by trying to dump the entire database with  , and use those commands to create a new database: 
 
 However, this is not always possible. 
 The easiest and most reliable way is to restore the database file from the backup. 
 
 I had an sqlite file that was corrupt that would show a symptom like this. 
 
 But when I would try to load the records with  
 
 It would only return 7 records. 
 I tried several things, but these steps were the most successful. 
 On a mac, open terminal and run these commands on your corrupt database. (these are sqlite3 commands, so you should be able to use other sqlite3 editors or similar commands in other systems). 
 
 These steps were taken from this website:
http://www.dosomethinghere.com/2013/02/20/fixing-the-sqlite-error-the-database-disk-image-is-malformed/ 
 
 If the database is seriously corrupt, the   will contain errors, and some data may be lost. 
 For more complex data schemas, this will mean orphaned and/or partial records which may confuse the application. 
 It may be preferable to   to a file, then use a text editor to remove problematic rows. Search for   within the dump file. 
 
 I was able to repair my Chrome history file (which is a sqlite3 database file) this way: 
 
 
 My method is similar, prevents a error rollback script: 
 
 
 I know this is an old question, but I would still like to share my solution.
My problem was that a sqlite3 database for kodi(xbmc) was corrupted. 
 .dump did not work in my case 
 
 What worked was the following: 
 
 Made a backup of the old db File 
 Let kodi create a new db File 
 Checked on  this  site for the header format of sqlite files 
 Opened both files with a hex editor (bless) and checked the first 96 Bytes 
 The first 40 bytes where different so i copied the first 40 bytes from the new db file to the old db file 
 After doing this, my database file worked again !!! 
 
 
 The pragma   disables some integrity checks, so this two commands might also do the trick, keeping db customizations in place: 
 
 
 This worked for me: 
 Download the sqlite3 tools package from  here  and put it into any folder. Put your corrupted database in the same folder. 
 Open a command prompt. 
 Type the following: 
 sqlite3.exe  
 (Press Enter) 
 NAME_OF_YOUR_CORRUPTED_DATABASE> ".dump" | sqlite3 new.db  
 (Press enter) 
 All the other solutions didn't work for me. 
 
 I have fixed database corruption caused by missing indexes with these steps and they are working for me. 
 
 DROP Index:  sqlite drop index command 
 Run vacuum  Sqlite vacuum command 
 Recreate index again :  Sqlite create index 
 
 
 With  Sqlite 3.29.0  a new   command has been introduced to the CLI: 
 
 Add the ".recover" command which tries to recover as much content as
  possible from a corrupt database file. 
 
 
 The following fix worked to repair my database without running any command line tools. 
 I got the "database disk image is malformed" error message when I was working with one of my tables so I ran [PRAGMA integrity_check] which returned 
 Main freelist: free-page count in header is too small 
 On tree page 16198 cell 1: 2nd reference to page 14190 
 Page 16988 is never used 
 Page 46637 is never used 
 row 4493 missing from index indexname1 
 row 4493 missing from index indexname2 
 row 4493 missing from index indexname3 
 I first saved the schema for the table with the bad indexes so I could recreate those indexes. I then dropped the indexname 1, 2, and 3 indexes with the [drop index _] command.  I exported my tables one by one to JSON files and then truncated each table.  Running the integrity check at that point was successful.  I then added the three indexes back with the [create index _] command and imported each table's records from their JSON file export.  Running the integrity check command is still returning "ok" with all of the records restored. 
 