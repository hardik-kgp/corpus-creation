*** how-to-remove-a-field-completely-from-a-mongodb-document ***

 
 Suppose this is a document. How do I remove " " completely from all the documents in this collection? I want all documents to be without " ": 
 
 
 Try this: If your collection was 'example' 
 
 Refer this: 
 http://www.mongodb.org/display/DOCS/Updating#Updating-%24unset 
 **UPDATE**
:  
 The above link no longer covers '$unset'ing. Be sure to add   if you want to remove this field from all of the documents in the collection; otherwise, it will only remove it from the first document it finds that matches. See this for updated documentation: 
 https://docs.mongodb.com/manual/reference/operator/update/unset/ 
 Example: 
 
 
 In the beginning, I did not get why the question has a bounty (I thought that the question has a nice answer and there is nothing to add), but then I noticed that the answer which was accepted and upvoted 15 times was actually wrong! 
 Yes, you have to use   operator , but this unset is going to remove the words key which does not exist for a document for a collection. So basically it will do nothing. 
 So you need to tell Mongo to look in the document tags and then in the words using  dot notation . So the correct query is. 
 
 Just for the sake of completion, I will refer to  another way of doing it , which is much worse, but this way you can change the field with any custom code (even based on another field from this document). 
 
 **To remove or delete field in MongoDB**

 
 For single Record   
 
 For Multi Record   
 
 
 
 
 We can also use this to update multiple documents. 
 
 I was trying to do something similar to this but instead remove the column from an embedded document. It took me a while to find a solution and this was the first post I came across so I thought I would post this here for anyone else trying to do the same. 
 So lets say instead your data looks like this: 
 
 To remove the column   from the embedded document, do this:  
 
 or using the  
 
 The   will only edit it if the value exists but it will not do a safe navigation (it wont check if   exists first) so the exists is needed on the embedded document. 
 This uses the  all positional operator  ( ) which was introduced in version 3.6 
 
 By default, the update() method updates a single document. Set the Multi Parameter to update all documents that match the query criteria. 
 Changed in version 3.6.
Syntax :  
 
 Example : 
 
 In your example : 
 
 
 Starting  , it's also possible to use a slightly different syntax: 
 
 The  update  method can also accept an aggregation pipeline (note the squared brackets signifying the use of an aggregation pipeline). 
 This means the   operator being used is the aggregation one (as opposed to the  "query" one ), whose syntax takes an array of fields. 
 
 And for mongomapper,  
 
 Document: Shutoff 
 Field to remove: shutoff_type 
 
 
 
 { 
    name: 'book',
    tags: {
        words: ['abc','123'],
        lat: 33,
        long: 22
    }
} 
 Ans: 
 db.tablename.remove({'tags.words':['abc','123']}) 
 
 Checking if "words" exists and then removing from the document 
 
 true indicates update multiple documents if matched. 
 
 you can also do this in aggregation by using project at 3.4 
 {$project: {"tags.words": 0} } 
 
 To reference a package and remove various "keys",
try this 
 
 