*** how-to-set-up-different-databases-per-environment-in-play-2-0 ***

 I'd like my Play app to use different databases for test, local and production (production is Heroku) environments. 
 In   I have:  
 
 This doesn't seem to work. When I run   or  , 
all DB access fails with:  
 
 I have a few questions about this: 
 
 In general, I'm a little confused about how databases are configured 
in Play: it looks like there's plain  ,   and   and different tutorials make different choices among 
those. Certain expressions that seem like they should work (e.g.   fail with an error that a string was provided where an object was expected). 
 I've seen other people suggest that I create separate  ,   and   files that each include   and then contain DB-specific configuration. But in that case, how do I specify what database to use when I run   from the Play console?  
 Is the   syntax supposed to work in Play 2? 
 What's the correct way to specify an environment for   to use? 
 
 
 In Play 2 there aren't different config environments.  Instead you just set or override the config parameters in the   file.  One way to do it is on the   command line, like: 
 
 You can also tell Play to use a different config file: 
 
 For an example Procfile for Heroku, see: 
 https://github.com/jamesward/play2bars/blob/scala-anorm/Procfile 
 More details in the Play Docs: 
 http://www.playframework.org/documentation/2.0/Configuration 
 
 At least in Play 2.1.1 it is possibly to override configuration values with environment variables, if they are set. (For details see:  http://www.playframework.com/documentation/2.1.1/ProductionConfiguration ) 
 So you can set the following in your  : 
 
 per default it will use the JDBC-URL defined unless the environment variable   defines a value for it.
So you just set your development database in the configuration and for production or stages you define the environment variable. 
 But beware, this substitution does NOT WORK if you put your variable reference inside quoted strings: 
 
 Instead, just unquote the section to be substituted, for example. 
 
 In this example, localhost will be used by default if the environment variable   is not set. (For details see:  https://www.playframework.com/documentation/2.5.x/ConfigFile#substitutions ) 
 
 You can actually still use the Play 1.0 config value naming method, in Play 2, if you, when you load config values, check if  , and then prefix the properties you load with 'test.'. Here's a snipped: 
 
 And the related config snippet: 
 
 Now you don't need to remember setting any system properties when you run your e2e test suite, and you won't accidentally connect to the prod database. 
 I suppose that you can optionally place the   values in a separate file, which you would then include at the end of the main config file I think. 
 
 There is another approach which is to override Global / GlobalSettings method  **onLoadConfig**
 and from there you can setup application configuration with generic config and specific environment configuration like below... 
 
 You can check  http://bit.ly/1AiZvX5  for my sample implementation. 
 Hope this helps. 
 
 Off-topic but if you follow 12-factor-app then having separate configurations named after environments is bad: 
 
 source:  http://12factor.net/config 
 