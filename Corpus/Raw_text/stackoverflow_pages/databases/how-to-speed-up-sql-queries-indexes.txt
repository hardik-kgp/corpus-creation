*** how-to-speed-up-sql-queries-indexes ***

 I have the following database structure : 
 
 I have the following query running on these tables and I'm trying to optimize the query to run as fast as possible : 
 
 How do I make this query run as fast as possible ? Should I use indexes ? If so, which columns of which tables should I index ? 
 Here is a picture of my query plan : 
 
 Thanks, 
 
 
 Indexes are essential to any database. 
 Speaking in "layman" terms, indexes are... well, precisely that. You can think of an index as a second, hidden, table that stores two things: The sorted data and a pointer to its position in the table. 
 Some thumb rules on creating indexes: 
 
 Create indexes on every field that is (or will be) used in joins. 
 Create indexes on every field on which you want to perform frequent   conditions. 
 Avoid creating indexes on everything. Create index on the relevant fields of every table, and use relations to retrieve the desired data. 
 Avoid creating indexes on   fields, unless it is absolutely necessary. 
 Avoid creating indexes on   fields, unless it is absolutely necesary. 
 
 I recommend you to read this:  http://dev.mysql.com/doc/refman/5.5/en/using-explain.html 
 
 Your JOINS should be the first place to look. The two most obvious candidates for indexes are   and  . 
 You should consider indexing  ,  and   as well. 
 However, adding indexes increases the workload in maintaining them. While they might give you a performance boost on this query, you might find that updating the tables becomes unacceptably slow. In any case, the MySQL optimiser might decide that a full scan of the table is quicker than accessing it by index. 
 Really the only way to do this is to set up the indexes that would appear to give you the best result and then benchmark the system to make sure you're getting the results you want here, whilst not compromising the performance elsewhere. Make good use of the  EXPLAIN  statement to find out what's going on, and remember that optimisations made by yourself or the optimiser on small tables may not be the same optimisations you'd need on larger ones. 
 
 The other three answers seem to have indexes covered so this is in addition to indexes.  You have no where clause which means you are always selecting the whole darn database.  In fact, your database design doesn't have anything useful in this regard, such as a shipping date.  Think about that. 
 You also have this: 
 
 That's all well and good but you don't select anything from this subquery.  Therefore why do you have it?  If you did want to select something, such as the sum(amount), you will have to give that an alias to make it available in the select clause. 
 