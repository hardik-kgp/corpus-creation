*** how-to-store-graph-data-in-a-database ***

 I am new to graphs and its very interesting.This question may be noob one but please site some good materials. 
 I am trying to make a small social Network where each user is a node and has undirected connection with his friend. 
 Its working fine but now I want to store it in a database. 
 How can I store the data?How to store all the connected nodes(pointer) of a node. 
 Is it better to delete the memory after the user log out and read it from database when he logs in or should logging in and logging out shouldnot have any impact on the node? 
 I know its theoretical. Any references will be really helpful. 
 
 Use an actual graph database to store your data. 
 http://www.neo4j.org/ 
 You can store key/value pairs in a node and you can also store edges that connect nodes. 
 Then you can use something like Gremlin to query/traverse the graph - https://github.com/tinkerpop/gremlin . See their documentation to download examples and run sample queries:   https://github.com/tinkerpop/gremlin/wiki/Getting-Started 
 An idea of the syntax: 
 
 
 I start at the bottom. 
 
 Is it better to delete the memory after the user log out and read it from database when he logs in or should logging in and logging out should not have any impact on the node? 
 
 You will need some sort of permanent storage, or your lose all the data you acquired on your first crash/restart that might upset your users a bit. 
 
 How can I store the data?
  Well without knowing more about this it is difficult however assuming that you have a list of users and each user can have 0 or more friends then i would go with 2 tables. 
 
 
 Users  - stores all your user information such as username and password 
 UsersFriends *- store all the relationships in a UserID -> UserID fashion * 
 
 **Example**

 Users Table 
 
 UsersFriends 
 
 Means user2511713 is friends with anotheruser & abstracthchaos and abstracthchaos friends with anotheruser, dependant on your business logic it may also be useful to imply the other way around such that  
 