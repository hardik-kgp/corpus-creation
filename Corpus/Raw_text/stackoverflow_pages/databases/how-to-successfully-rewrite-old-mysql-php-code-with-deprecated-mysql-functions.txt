*** how-to-successfully-rewrite-old-mysql-php-code-with-deprecated-mysql-functions ***

 I am still learning mostly from books I buy, but today I leart that my book is old even though I bought it this year concerning programming in PHP. Now I know that mysql_* commands in PHP are deprecated and should be replaced with more secure and stable prepared statements and PDO. So I put myself to rewrite all my web according to it and maybe I will need some advices from you how to do it properly and working from you all more experienced guys :) 
 So I will start my rewrite with only main part (connect to db and choosing DB) in here (the rest I can do on my own with google and manuals). I will write here my old script and ask you if I am doing everything right and not missing anything and I hope this could be some good manual/answer for other people as well. So lets start. 
 So in config I have something like this: 
 
 Which should be like this: 
 
 Right? But when I need to choose database later should i do it without  ? But how to choose database later? 
 Here is my one and only script to rewrite which is basic in most web projects and I hope it will bring not only me some understanding how new PDO system really works: 
 
 So from what I know from Google and Wiki - functions like   and   should not be needed anymore, right? The same with functions like   SO only whats left is   but i have no idea how to do this correctly without damading all connection to database. Because in rest of my code (not mentioned here) I can easily choose database by this code:   But with prepared statements I do not know if this is even possible in easy way. I hope some advices around this from you will help me and other users understand this new code better. Other parts in code you may have are eplained in this  PDO Tutorial for MySQL Developers . Thank you. 
 
 Actually, a simple, sweet and short: Yes, not necessary any longer. 
 Let's review the code not that we have lost something: 
 
  - The constructor merely contained all the configuration. PDO has a much easier concept here, a connection string containing the most information: 
 
 
 
 Also PDO provides the constructor for use ready-made, so double not necessary. 
  - The connection function is not necessary any longer as well. This is done by instantiating PDO already. You can look for exceptions, the PHP manual has an example  on it's constructor page . 
  - This complicated function is not needed any longer as well. Wow, the third function we can just drop because of the PDO connection string. Much power with so less characters. Cheers! 
  - The destructor. Let's be fair: MySQL did not need this as well. However with PDO we get it for free - without writing a single line of code. 
 
 Looks good! You managed to migrate from that obscure database class to PDO by removing outdated code! Congratulations: 
 
 If you now think, what about if I want to have database class on my own? Well you can do that, because you can extend from PDO (yes that works!): 
 
 Why you might want to do that? No idea, but maybe it's more fluent for your code. If you're looking for a better code-example, I have one at  PHP/MySQL Table with Hyperlinks . 
 
 I think the easiest way to switch the database inside your application will be: 
 
 and 
 
 or the maybe better (and cleaner) way might be 
 
 and 
 
 If you mark a database in your class active, you can access the data with   or  . 
 