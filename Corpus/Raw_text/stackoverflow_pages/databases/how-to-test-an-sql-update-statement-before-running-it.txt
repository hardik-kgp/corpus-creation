*** how-to-test-an-sql-update-statement-before-running-it ***

 In some cases, running an UPDATE statement in production can save the day. However a borked update can be worse than the initial problem. 
 Short of using a test database, what are options to tell what an update statement will do before running it? 
 
 In addition to using a transaction as Imad has said (which should be mandatory anyway)  you can also do a sanity check which rows are affected by running a select using the same WHERE clause as the UPDATE. 
 So if you UPDATE is  
 
 The following will show you which rows will be updated: 
 
 
 What about Transactions? They have the ROLLBACK-Feature. 
 @see  https://dev.mysql.com/doc/refman/5.0/en/commit.html 
 For example: 
 
 Answer on question from @rickozoe below: 
 In general these lines will not be executed as once. In PHP f.e. you would write something like that (perhaps a little bit cleaner, but wanted to answer quick ;-) ): 
 
 Another way would be to use MySQL Variables (see  https://dev.mysql.com/doc/refman/5.7/en/user-variables.htm l
and
 https://stackoverflow.com/a/18499823/1416909 
): 
 
 But I would suggest to use the language wrappers available in your favorite programming language. 
 
 Autocommit OFF ... 
 **MySQL**

 
 It sets the autommit off for the current session. 
 You execute your statement, see what it has changed, and then rollback if it's wrong or commit if it's what you expected ! 
 EDIT: The benefit of using transactions instead of running select query is that you can check the resulting set easierly. 
 
 I know this is a repeat of other answers, but it has some emotional support to take the extra step for testing update :D 
 For testing update, hash # is your friend. 
 If you have an update statement like: 
 
 You hash UPDATE and SET out for testing, then hash them back in: 
 
 It works for simple statements. 
 An additional practically mandatory solution is, to get a copy (backup duplicate), whenever using update on a production table.  Phpmyadmin > operations > copy: table_yearmonthday. It just takes a few seconds for tables <=100M. 
 
 Not a direct answer, but I've seen many borked prod data situations that could have been avoided by  **typing the **
** clause first**
! Sometimes a   can help with putting a working statement together safely too. And looking at an estimated execution plan, which will estimate rows affected, can be useful. Beyond that, in a transaction that you roll back as others have said. 
 
 Run select query on same table with all   conditions you are applying in update query. 
 
 In these cases that you want to test, it's a good idea to focus on only  **current**
 column values and  **soon-to-be-updated**
 column values. 
 Please take a look at the following code that I've written to update WHMCS prices: 
 
 This way we clearly compare already existing values versus new values. 
 
 make a   of it, 
 like if you got 
 
 convert it to 
 
 