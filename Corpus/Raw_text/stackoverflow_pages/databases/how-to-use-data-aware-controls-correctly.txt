*** how-to-use-data-aware-controls-correctly ***

 I would like to ask experienced users, if you prefer to use data aware controls to add, insert, delete and edit data in DB or you favor to do it manualy.  
 I developed some DB applications, in which for the sake of "user friendly policy" I run into complicated web of table events (afterinsert, afteredit, after... and beforeedit, beforeinsert, before...). After that it was a quite nasty work to debug the application. 
 Aware of this risk (later by another application) I tried to avoid this problem, so I paid increased attention to write code well, readable and comprehensive. It seemed everything all right from the beginning, but as I needed to handle some preprocessing stuff before sending and loading data etc, I run into the same problems again, "slowly and inevitably". Sometime I could not use dataaware controls anyway, and what seemed to be a "cool" feature of DAControl at the beginning it turned to an obstacle on the end. I "had to" write special routine for non-dataaware controls, in order to behave as dataaware. Then I asked myself, why on earth should I use dataaware controls? Is it better to found application architecture on non-dataaware controls? It requires more time to write bug-proof code, of course, but does it worth of it? I do not know...   
 I happened to me several times, like jinxed : paradise on the beginning hell on the end...  
 I do not know, if I use wrong method to write DB program, if there is some standard common practice how to proceed. Or if it is common problem to everybody? 
 Thanx for advices and your experiences 
 
 I've written applications that used data aware components against TTable style components and applications which used non-data aware components.  
 My preference these days is to use data aware components but with TClientDataSets rather than TTable style components. 
 Using a TClientDataSet I don't have to make my user interface structure mimic my database structure. It's flexible enough to fill it with the data from several tables and then when you are applying the updates back to the database you can manually add/delete/update records as you see fit. 
 
 The secret should be in DataSet parameter automation, you can create a control that glues datasets together in master-slave way, just by defining connections between them. Ofcourse such control should be fed with form parameters in some other generalized way. In this case calling form with entity identifier, all datasets will get filled in a proper order and will allow to update data in database automatically by provider. 
 Generally it is better to have DataSets being an exact representation of tables with optional calculated fields (fkInternalCalc sometimes works better as it updates with row change not field change) bound to data aware controls. Data aware controls are the most optimal approach, and less error prone. Like in every aspect, there are exceptions to that. 
 If you must write too many glue functions, the problem probably is in design pattern not in VCL. 
 
 A lot of the time I use data aware controls linked to an in-memory table (kbmMemTable) that is filled from a query. 
 The benefits I see are: 
 
 I have full control over all inserts/updates/posts/edits to the database. 
 No need to worry about a user leaving a record in update mode (potentially locking other users) 
 Did I mention full control over all inserts/updates/posts/edits? 
 
 Using the in-memory table is as easy as: 
 
 And then "resolving" back to the database, you are given access to the original and new data for each field in each record (similar in a way to a trigger) - you can easily transaction and resolve a whole edit back in milliseconds - even if it took the end user 30 mins to fill in the data aware controls. 
 
 Have you considered a  O/R mapper  for Delphi like  tiOPF  or  hcOPF ? 
 This will separate the business domain logic from the database layer. For big and legacy systems, it is even common to add another layer, the ' Anti Corruption Layer ', which protects the model from changes in the database design. 
 