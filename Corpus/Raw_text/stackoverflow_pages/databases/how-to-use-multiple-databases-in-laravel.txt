*** how-to-use-multiple-databases-in-laravel ***

 I want to combine multiple databases in my system. Most of the time the database is MySQL; but it may differ in future i.e. Admin can generate such a reports  which is  **use source of heterogeneous**
 database system. 
 So my question is  **does Laravel provide any Facade**
 to deal with such situations? Or any other framework have more suitable capabilities for problem is? 
 
 **Using **
** >= 5.0**
 (tested on 5.5) 
 **In **

 
 **In **

 
 
 **Note:**
 In   if DB_username and DB_password is same, then you can use   which is metioned in   first few lines. 
 
 **Without **
** <5.0**

 **Define Connections**

 
 
 
 
 
 **Schema**

 To specify which connection to use, simply run the   method 
 
 **Query Builder**

 
 **Eloquent**

 Set the   variable in your model 
 
 You can also define the connection at runtime via the   method or the   static method: 
 
 
 **Note**
 Be careful about attempting to build relationships with tables across databases! It is possible to do, but it can come with some caveats and depends on what database and/or database settings you have. 
 
 
 From Laravel Docs 
 **Using Multiple Database Connections**

 When using multiple connections, you may access each   via the connection method on the   facade. The   passed to the   method should correspond to one of the connections listed in your   configuration file: 
 
 You may also access the raw, underlying PDO instance using the getPdo method on a connection instance: 
 
 
 **Useful Links**

 
 Laravel 5 multiple database connection FROM  
 Connect multiple databases in laravel FROM  
 Multiple DB Connections in Laravel FROM  
 
 
 In Laravel 5.1, you specify the connection: 
 
 Default, Laravel uses the default connection. It is simple, isn't it? 
 Read more here:  http://laravel.com/docs/5.1/database#accessing-connections 
 
 Actually,   doesnt work for me, because 'name' has to be in double quotes: "name" 
 Still, the select query is executed on my default connection. Still trying to figure out, how to convince Laravel to work the way it is intended: change the connection. 
 Edit: I figured it out. After debugging Laravels DatabaseManager it turned out my database.php (config file) (inside $this->app) was wrong. In the section "connections" I had stuff like "database" with values of the one i copied it from. In clear terms, instead of 
 
 I needed to place something like 
 
 since all connections were listed with the same values for the database, username, password, etc. which of course makes little sense if I want to access at least another database name 
 Therefore, every time I wanted to select something from another database I always ended up in my default database 
 
 Laravel has inbuilt support for multiple database systems, you need to provide connection details in  config/database.php  file 
 
 Once you have this you can create two base model class for each connection and define the connection name in those models 
 
 You can extend these models to create more models for tables in each DB. 
 