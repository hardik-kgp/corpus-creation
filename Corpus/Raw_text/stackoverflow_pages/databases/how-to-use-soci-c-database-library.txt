*** how-to-use-soci-c-database-library ***

 I'm trying to implement soci in my program but I don't know how.  I'm using C++ on Linux, on a project using netbeans. I have followed the steps in:  http://soci.sourceforge.net/doc/structure.html  to install it, and I tried to copy the files soci.h from /src/core and soci-mysql.h from /src/backends/mysql in my project but it gives a compilation error (these files include other soci files, but it's illogical to copy all files into the directory...). I have read the guide several time but I don't understand what I'm doing wrong. The examples only include these files. 
 Thanks.  
 Edit: I have given more information in a comment below the answer. I don't know what steps I have to follow to implement soci.  
 
 The relevant bit on that page is 
 
 When the configure script is run without parameters, the remaining part of the process will use   as a default destination for SOCI header files and   as a default destination for library files 
 
 Now /usr/local/include ought to be in your default include path (e.g. try something like   to see the list your install uses) and so you can include these using 
 
 You then need to add the libraries to your link step. It looks like you'll have both static and shared versions of the libraries. You'll need to add   to your link step; however if that doesn't work then you'll also need to specify /usr/local/lib as a search directory i.e.  . (Again it's probably there already but you can see using  .) However, the issue then is that if you're using the shared version and /usr/local/lib isn't in your distributions library search path (see /etc/ld.so.conf and/or /etc/ld.so.conf.d/*) then it won't be able to find the shared library at runtime. You'll need to either hard-code in the path to the library with the linker switch   or add /usr/local/lib to the system-wide search path as before or in your environment (variable  ). I'm not sure what the best way to do this is - I'd suggest   to avoid modifying the system in general, although if you're building a lot of libraries into /usr/local/lib it might make sense to add it. 
 
 I got the same  **doesn't load backend**
 error on my C++ program when I execute  
 I found a solution (at least on my Ubuntu 11.04). Just do: 
 
 It seem that the SOCI library search for the file   that is not in the system, buy if you make a link to the library   that it's in the system it works (I think debian/ubuntu makes a file name change from the original name, but it have side effects because the SOCI library search inside for the original name). 
 I found the error using the bash environment variable   and running my C++ binary. 
 Hope it helps. 
 