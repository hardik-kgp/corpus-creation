*** how-to-use-yii-with-a-multilingual-database-model ***

 I’m having a problem getting the data from my database which I created to be completely multilingual, and I hope someone here can help me. 
 I’ve split up all my tables in 2 parts; the “universal” table (does not contain any text that needs to be translated) and the table which contains all the fields that need to be translated with their translations. 
 Example tables: 
 
 Query to get the translations (using English (en) as a fall-back language if there is no translation available): 
 
 My question is how I can automatically get those translations (with the fall-back language as in this query) attached to my model in Yii when I’m searching for the base_material objects? (This is only 1 example table, but almost all my tables (20+) are built in this way, so if possible I would be needing something flexible) 
 An example of an existing system using what I would need is Propel:  http://propel.posterous.com/propel-gets-i18n-behavior-and-why-it-matters 
 Any ideas how to go about doing that? I’ve checked the existing Yii extensions regarding multilingual sites (like  Multilingual Active Record ), but they all use a different database design (general information+fall-back language in the main table, translations in the i18n table), and I’m not sure how to change those extensions to use my kind of DB model. 
 If someone knows of a way to change that existing extension so it can use my kind of DB scheme, then that would be absolutely brilliant and probably the best way to do this. 
 Edit: I've added a bounty because I still can't find anything on how to let Propel work with Yii (there does exist an extension for Doctrine, but Doctrine doesn't support this kind of DB model with translations either), nor any more information as to how to deal with this using an existing Yii extension or with scopes. 
 **Edit**
: 98 times viewed but only 3 upvotes and 1 comment. I can't help feeling like I'm doing something wrong here, be it in my question or application/database design; either that or my problem is just very unique (which would surprise me, as I don't think my multilingual database design is that absurd ;-). So, if anyone knows of a better all-round solution for multilingual sites with Yii and/or Propel (apart from the current extensions which I really don't like due to the duplication of text fields) or something similar, please let me know as well. 
 Thanks in advance! 
 
 I am also looking for a generic solution to implement i18n into Yii models.
Recently I chose a very similar database schema for a project like you.
The only difference is, that I am not using a separate language table, I store the language information in the i18n table. 
 The following solution is without a custom SQL statement, but I think this could be implemented with relation params, anyway, if you're working with foreign key in your database (eg. MySQL InnoDB) gii will create relations between your base_material and base_material_i18n table, like 
 
 Now you'd be able to access your translations by using the object notation for relations. 
 
 I thought about creating a behavior or base class for those models which would act a as helper for managing the translations - pseudo code: 
 
 CActiveRecord __get() source 
 There is more work to be done to find the needed i18n record, also you could further limit the with() option to improve performance and reduce parsing on the PHP side.  
 But there may be different use cases how to determine the value, e.g. all translations, translation or fallback, no fallback (empty value).
Scenarios could be helpful here. 
 PS: I would be up for a  github project ! 
 
 Have you tried  http://www.yiiframework.com/extension/i18n-columns/  (based on  http://www.yiiframework.com/extension/stranslateablebehavior/ )? 
 It is an alternate, simpler, approach by adding new table fields in the style of {field}_{language code}, and then setting the translated field in the original model to the current language's translation on afterFind. 
 In essence, it will get you up and running with translatable fields with the translated content being fetched "automatically", for good and bad :). Adding and removing languages (=columns) is done using migrations. 
 
 You can try to use a simple multilingual CRUD extension.
it is very simple to use and modificate. you just need to add language field to your table.
just watch description here:  http://all-of.me/yii-multilingual-crud/ 
it is in alpha state, but tried on a few projects. you can easily modificate it or contact author to fix or add features 
 