*** implementing-result-paging-in-hibernate-getting-total-number-of-rows ***

 How do I implement paging in Hibernate? The   objects has methods called   and   which are certainly helpful. But where can I get the total number of results, so that I can show link to last page of results, and print things such as results 200 to 250 of  xxx ? 
 
 You can use Query.setMaxResults(int results) and Query.setFirstResult(int offset). 
 Editing too: There's no way to know how many results you'll get. So, first you must query with "select count(*)...". A little ugly, IMHO. 
 
 You must do a separate query to get the max results...and in the case where between time A of the first time the client issues a paging request to time B when another request is issued, if  new records are added or some records now fit the criteria then you have to query the max again to reflect such. I usually do this in HQL like this 
 
 for   queries I usually push my data into a DTO like this 
 
 
 you could perform two queries - a count(*) type query, which should be cheap if you are not joining too many tables together, and a second query that has the limits set. Then you know how many items exists but only grab the ones being viewed. 
 
 You can just setMaxResults to the maximum number of rows you want returned.  There is no harm in setting this value greater than the number of actual rows available.  The problem the other solutions is they assume the ordering of records remains the same each repeat of the query, and there are no changes going on between commands. 
 To avoid that if you really want to scroll through results, it is best to use the ScrollableResults.  Don't throw this object away between paging, but use it to keep the records in the same order.  To find out the number of records from the ScrollableResults, you can simply move to the last() position, and then get the row number.   Remember to add 1 to this value, since row numbers start counting at 0. 
 
 I personally think you should handle the paging in the front-end. I know this isn't that efficiÃ«nt but at least it would be less error prone. 
 If you would use the count(*) thing what would happen if records get deleted from the table in between requests for a certain page? Lots of things could go wrong this way. 
 