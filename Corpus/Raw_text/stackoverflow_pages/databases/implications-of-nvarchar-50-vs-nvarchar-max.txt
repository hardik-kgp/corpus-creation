*** implications-of-nvarchar-50-vs-nvarchar-max ***

 What are the general storage and performance differences between the below two tables if their only difference is   vs.   and the strings in each field range from 1 to 50 characters? This is in SQL Server 2005. 
 **TABLE 1**

 
 **TABLE 2**

 
 
 If you are guaranteed to have strings between 1 and 50 characters, then the same query run across strings of up-to-length X will run faster using varchar(X) vs. varchar(MAX).  Additionally, you can't create an index on a varchar(MAX) field. 
 Once your rows have values above 8000 characters in length, then there are additional performance considerations to contend with (the rows are basically treated as TEXT instead of varchar(n)).  Though this isn't terribly relevant as a comparison since there is no varchar(N) option for strings of length over 8000. 
 
 First and foremost, you won't be able to create indexes on the (max) length columns. So if you are going to store searchable data, ie., if these columns are going to be part of the WHERE predicate, you may not be able to improve the query performance. You may need to consider FullText Search and indexes on these columns in such a case. 
 
 nvarchar max is for columns up to 2GB.  So essentially it takes up more resources.  You are better off using the nvarchar(50) if you know you aren't going to need that much space.  each character is about 2 bytes so with 2 GB thats 1 billion characters... 
 