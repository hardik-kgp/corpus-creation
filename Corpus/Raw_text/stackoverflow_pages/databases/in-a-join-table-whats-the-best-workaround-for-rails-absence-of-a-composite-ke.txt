*** in-a-join-table-whats-the-best-workaround-for-rails-absence-of-a-composite-ke ***

 
 I have a join table (as above) with columns that refer to a corresponding  categories  table and a  posts  table. I wanted to enforce a unique constraint on  **the composite key category_id, post_id**
 in the  **categories_posts**
 join table. But Rails does not support this (I believe).  
 To avoid the potential for duplicate rows in my data having the same combination of category_id and post_id,  **what's the best workaround for the absence of a composite key in Rails**
?  
 My assumptions here are: 
 
 The default auto-number column
(id:integer) would do nothing to
protect my data in this situation. 
 ActiveScaffold may provide a
solution but I'm not sure if
it's overkill to include it in my
project simply for this single
feature, especially if there is a
more elegant answer. 
 
 
 Add a unique index that includes both columns.  That will prevent you from inserting a record that contains a duplicate category_id/post_id pair. 
 
 
 It's  **very hard**
 to recommend the "right" approach. 
 1)  **The pragmatic approach**

 Use validator and do not add unique composite index. This gives you nice messages in the UI and it just works.  
 
 You can also add two separate indexes in your join tables to speed up searches: 
 
 Please note (according to the book  Rails 3 Way ) the  validation is not foolproof because of a potential race condition between the SELECT and INSERT/UPDATE queries . It is recommended to use unique constraint if you must be absolutely sure there are no duplicate records. 
 2)  **The bulletproof approach**

 In this approach we want to put a constraint on the database level. So it means to create a composite index: 
 
 Big advantage is a great database integrity, disadvantage is not much useful error reporting to the user. Please note in creating of composite index, order of columns is important. 
 If you put less selective columns as leading columns in index and put most selective columns at the end, other queries which have condition on non-leading index columns may also take advantage of INDEX SKIP SCAN. You may need to add one more index to get advantage of them, but this is highly database dependant. 
 3)  **Combination of both**

 One can read about combination of both, but I tend to like the number one only. 
 
 I think you can find easier to validate uniqueness of one of the fields with the other as a scope: 
 FROM THE API: 
 
 Validates whether the value of the specified attributes are unique across the system. Useful for making sure that only one user can be named "davidhh". 
 
 It can also validate whether the value of the specified attributes are unique based on multiple scope parameters. For example, making sure that a teacher can only be on the schedule once per semester for a particular class. 
 
 When the record is created, a check is performed to make sure that no record exists in the database with the given value for the specified attribute (that maps to a column). When the record is updated, the same check is made but disregarding the record itself. 
 Configuration options: 
 
 
 I implement both of the following when I have this issue in rails: 
 1) You should have a unique composite index declared at the database level to ensure that the dbms won't let a duplicate record get created. 
 2) To provide smoother error msgs than just the above, add a validation to the Rails model: 
 
 
 A solution can be to add both the index and validation in the model. 
 So in the migration you have:
add_index :categories_posts, [:category_id, :post_id], :unique => true 
 And in the model:
validates_uniqueness_of :category_id, :scope => [:category_id, :post_id]
validates_uniqueness_of :post_id, :scope => [:category_id, :post_id] 
 