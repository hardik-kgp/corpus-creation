*** in-a-stackoverflow-clone-what-relationship-should-a-comments-table-have-to-ques ***

 In an application similar to StackOverflow that I am building, I am trying to decide what relationship my  ,   and   tables should have. 
 I could have   and   both be represented by a single table  . 
 That would allow   to have a single foreign key to  . 
 But if   and   are separate tables, what relationships should   have to each of these? 
 UPDATE: Although the chosen answer recommends a Class Table Inheritance approach and this seems like the best approach in database terms, this option is not supported by the Rails ORM. So, in Rails my models will have to use Single Table Inheritance and will probably look like this: 
 
 
 
 I'd go with the Posts approach.  This is the best way to ensure referential integrity. 
 If you need additional columns for Answers and Questions respectively, put them in additional tables with a one-to-one relationship with Posts.   
 For example, in MySQL syntax: 
 
 This is called Class Table Inheritance.  There's a nice overview of modeling inheritance with SQL in this article: " Inheritance in relational databases ." 
 It can be helpful to use post_type so a given Post can be only one answer or one question.  You don't want both an Answer and a Question to reference one given Post.  So this is the purpose of the   column above.  You can use CHECK constraints to enforce the values in  , or else use a trigger if your database doesn't support CHECK constraints. 
 I also did a presentation that may help you.  The slides are up at  http://www.slideshare.net/billkarwin/sql-antipatterns-strike-back .  You should read the sections on Polymorphic Associations and Entity-Attribute-Value. 
 
 If you use Single Table Inheritance, as you said you're using Ruby on Rails, then the SQL DDL would look like this: 
 
 You can use a foreign key constraint in this example, and I recommend that you do!  :-) 
 Rails philosophy tends to favor putting enforcement of the data model into the application layer.  But without constraints enforcing integrity at in the database, you have the risk that bugs in your application, or ad hoc queries from a query tool, can harm data integrity.  
 
 In the social networks that I build I do something a bit different.  If you think about it a comment could be attached to just about any Entity in a site.  This could be a blog post, a forum thread or post, an article, someones picture, a persons profile, a vendor of a service, etc.  For this reason I create a SystemObjects table which holds the object type (table reference).  For the most part I create records for the Entities of my system that will accept comments...but these map directly to my tables.  The SystemObjects table houses the SystemObjectID, and a friendly name for future reference (a lookup table).   
 With this in place I then create a Comments table which has the SystemObjectID reference to tell me what table to go look in.  Then I also house the SystemObjectRecordID which tells me which PK of the referenced table I am interested in (along with all the standard comment data). 
 I use this notion of the SystemObject table for many other generic far reaching concepts in my sites.  Think about Tags, Ratings, Comments, and any other dangling fruit that might be attached across your site and aggregated up for quick use. 
 Read more about this in my book  ASP.NET 3.5 Social Networking . 
 
 You could create a single comments table with two foreign keys, one to questions.questionID and the other to answers.answerId 
 
 You would need two domain tables that bring the relationships together CommentsForQuestions and CommentsForAnswers. Basically you're going to need to create 5 tables for this purpose: 
 
 The one problem this has is that it's inferior to the posts idea because referential integrity isn't as strong. I can garuntee that CommentsForQuestions connects to a comment and a question, but I can't prevent both a question and an answer from connecting to the same comment. 
 
 A foreign key relationship; you can either have QuestionComments and AnswerComments, or you can have Comments have a Foreign key column for both Questions and Answers (and have those columns be exclusive). 
 Personally, I'd go with the Posts approach. 
 Edit:  On consideration, there's a third approach that might work; you might have a Comments table, and then just have an association table that associates the Comments with either a Question or an Answer (so Comments would have an ID and the comment, the join table would have a CommentID, an AnswerID, and a QuestionID).  Or, you could have just a Comments table, then have an Answer-Comment association table, and a separate Question-Comment association table. 
 
 There are 2 ways that I can think of. 
 First, use another column in the Comment table to indicate whether the comment belongs to Question or Answer. So the PK of the Comment table becomes  wher PostID is the foreign key to Question or Answer and PostType can be someting like 1=Question and 2=Answer. 
 Second, use a relationship table for each Question and Answer. So you have a Question, Answer, Comment, QuestionComment, and AnswerComment table. 
 Let's say the primary key of Question, Answer, Comment tables are QuestionID, AnswerID, and CommentID respectively. Then the columns of QuestionComment would be [QuestionID, CommentID]. Similarly, the columns of AnswerComment would be [AnswerID, CommentID]. 
 