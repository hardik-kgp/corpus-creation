*** in-general-should-every-table-in-a-database-have-an-identity-field-to-use-as-a ***

 This seems like a duplicate even as I ask it, but I searched and didn't find it. It seems like a good question for SO -- even though I'm sure I can find it on many blogs etc. out there. SO will have more of a debate than you can get on a blog.  
 I'm running into an issue with a join: getting back too many records. I think of this as "expansion". I added a table to the set of joins and the number of rows expanded, way too much. Usually when this happens I add a select of all the ID fields that are involved in the join. That way it's pretty obvious where the expansion is happening and I can change the ON of the join to fix it. Except in this case, the table that I added doesn't have an ID field. To me, this is a problem. But perhaps I'm wrong.  
 The question: should every table in a database have an IDENTITY field that's used as the PK? Are there any drawbacks to having an ID field in every table? What if you're reasonably sure this table will never be used in a PK/FK relationship?  
 Related, but not duplicate:  When having an identity column is not a good idea? 
 Apparently this debate has been  going on for a while . Shoulda known.  
 This post  (surrogate vs. natural keys) is also relevant. 
 
 There are two concepts that are close but should not be confused:   and  
 Every table (except for the rare conditions) should have a  , that is a value or a set of values that uniquely identify a row. 
 See  **here**
 for discussion why. 
  is a property of a column in   which means that the column will be filled automatically with incrementing values. 
 Due to the nature of this property, the values of this column are inherently  . 
 However, no   constraint or   index is automatically created on   column, and after issuing   it's possible to insert duplicate values into an   column, unless it had been explicity   constrained. 
 The   column should not necessarily be a  , but most often it's used to fill the surrogate  s 
 It may or may not be useful in any particular case. 
 Therefore, the answer to your question: 
 
 The question: should every table in a database have an IDENTITY field that's used as the PK? 
 
 is this: 
 **No. There are cases when a database table should NOT have an **
** field as a **
**.**

 Three cases come into my mind when it's not the best idea to have an   as a  : 
 
 If your   is composite (like in many-to-many link tables) 
 If your   is natural (like, a state code) 
 If your   should be unique across databases (in this case you use   /   /  ) 
 
 All these cases imply the following condition: 
 **You shouldn't have **
** when you care for the values of your **
** and explicitly insert them into your table.**

 **Update:**

 Many-to-many link tables should have the pair of  's to the table they link as the composite key. 
 It's a natural composite key which you already have to use (and make  ), so there is no point to generate a surrogate key for this. 
 I don't see why would you want to reference a   link table from any other table except the tables they link, but let's assume you have such a need. 
 In this case, you just reference the link table by the composite key. 
 This query: 
 
 is much more efficient than this one: 
 
 , for obvious reasons. 
 
 Almost always yes.  I generally default to including an identity field unless there's a compelling reason not to.  I rarely encounter such reasons, and the cost of the identity field is minimal, so generally I include. 
 Only thing I can think of off the top of my head where I didn't was a highly specialized database that was being used more as a datastore than a relational database where the DBMS was being used for nearly every feature except significant relational modelling.  (It was a high volume, high turnover data buffer thing.) 
 
 I'm a firm believer that natural keys are often far worse than artificial keys because you often have no control over whether they will change which can cause horrendous data integrity or performance problems.  
 However, there are some (very few) natural keys that make sense without being an identity field (two-letter state abbreviation comes to mind, it is extremely rare for these official type abbreviations to change.)  
 Any table which is a join table to model a many to many relationship probably also does not need an additional identity field. Making the two key fields together the primary key will work just fine.  
 Other than that I would, in general, add an identity field to most other tables unless given a compelling reason in that particular case not to. It is a bad practice to fail to create a primary key on a table or if you are using surrogate keys to fail to place a unique index on the other fields needed to guarantee uniqueness where possible (unless you really enjoy resolving duplicates). 
 
 Every table should have some set of field(s) that uniquely identify it.  Whether or not there is a numeric identifier field separate from the data fields will depend on the domain you are attempting to model.  Not all data easily falls into the 'single numeric id' paradigm, and as such it would be inappropriate to force it.  Given that, a lot of data does easily fit in this paradigm and as such would call for such an identifier.  There is no one answer to always do X in any programming environment, and this is another example. 
 
 No.  Whenever you have a table with an artificial identity column, you also need to identify the natural primary key for the table and ensure that there is a unique constraint on that set of columns too so that you don't get two rows that are identical apart from the meaningless identity column by accident. 
 Adding an identity column is not cost free.  There is an overhead in adding an unnecessary identity column to a table - typically 4 bytes per row of storage for the identity value, plus a whole extra index (which will probably weigh in at 8-12 bytes per row plus overhead).  It also takes slightly to work out the most cost-effective query plan because there is an extra index per table.  Granted, if the table is small and the machine is big, this overhead is not critical - but for the biggest systems, it matters. 
 
 If you have modelled, designed, normalised etc, then you will have no identity columns. 
 You will have identified natural and candidate keys for your tables. 
 You may decide on a surrogate key because of the physical architecture (eg narrow, numeric, strictly monotonically increasing), say, because using a nvarchar(100) column is not a good idea (still need unique constraint). 
 Or because of ideology: they appeal to OO developers I've found. 
 Ok, assume ID columns. As your db gets more complex, say several layers, how can you jon parent and grand-.child tables directly. You can't: you always need intermediate tables and well indexed PK-FL columns. With a composite key, it's all there for you... 
 Don't get me wrong: I use them. But I know why I use them... 
 Edit: 
 I'd be interested to collate "always ID"+"no stored procs" matches on one hand, with "use stored procs"+"IDs when they benefit" on the other... 
 
 Yes, for the vast majority of cases. 
 Edge cases or exceptions might be things like: 
 
 two-way join tables to model m:n relationships 
 temporary tables used for bulk-inserting huge amounts of data 
 
 But other than that, I think there is no good reason against having a primary key to uniquely identify each row in a table, and in my opinion, using an IDENTITY field is one of the best choices (I prefer surrogate keys over natural keys - they're more reliable, stable, never changing etc.). 
 Marc 
 
 I can't think of any drawback about having an ID field in each table. Providing your the type of your ID field provides enough space for your table to grow. 
 However, you don't necessarily need a single field to ensure the identity of your rows.
So no, a  **single ID field is not mandatory**
. 
 Primary and Foreign  **Keys**
 can consist not only of one field, but of  **multiple fields**
. This is typical for tables implementing a N-N relationship. 
 You can perfectly have   on your table: 
 
 
 Recognize the distinction between an Identity field and a key... Every table should have a key, to eliminate the data corruption of inadvertently entering multiple rows that represent the same 'entity'.  If the only key a table has is a meaningless surrogate key, then this function is effectively missing.  
 otoh, No table 'needs' an identity, and certainly not every table benefits from one... Examples are:  A table with a short and functional key, a table which does not have any other table referencing it through a foreign Key, or a table which is in a one to zero-or-one relationship with another table... none of these need an Identity 
 
 I'd say, if you can find a simple, natural key in your table (i.e. one column), use that as a key instead of an identity column. 
 I generally give every table some kind of unique identifier, whether it is natural or generated, because then I am  **guaranteed**
 that every row is uniquely identified somehow. 
 Personally, I avoid IDENTITY (incrementing identity columns, like 1, 2, 3, 4) columns like the plague.  They cause a lot of hassle, especially if you delete rows from that table.  I use generated uniqueidentifiers instead if there is no natural key in the table. 
 Anyway, no idea if this is the accepted practice, just seems right to me.  YMMV. 
 