*** in-vs-any-operator-in-postgresql ***

 What is the difference between   and   operator in PostgreSQL? 
The working mechanism of both seems to be the same. Can anyone explain this with an example? 
 
 **Logically**
,  quoting the manual : 
 
  is equivalent to  . 
 
 But there are two  **syntax variants**
 of   and two variants of the   construct. Details: 
 
 How to use ANY instead of IN in a WHERE clause with Rails? 
 
 The   variant  **taking a **
**set**
 is equivalent to   taking a  set , as demonstrated here: 
 
 postgreSQL - in vs any 
 
 But the  **second variant of each is **
**not**
** equivalent to the other**
. The second variant of the   construct takes an  **array**
 (must be an actual array type), while the second variant of   takes a comma-separated  **list of values**
. This leads to different restrictions in passing values and  can  also lead to different query plans in special cases: 
 
 Index not used with   but used with  
 Pass multiple sets or arrays of values to a function 
 
 
 The   construct is far more versatile, as it can be combined with various operators, not just  . Example for  : 
 
 For a big number of values, providing a  set  scales better for each: 
 
 Optimizing a Postgres query with a large IN 
 
 Related: 
 
 Can PostgreSQL index array columns? 
 
 **Inversion / opposite / exclusion**

 The inversion of: 
 
 "find rows where   is  **not**
 in the array"  - is: 
 
 Which is the same as: 
 
 Rows with   do not pass either of these expressions. To include   values additionally: 
 
 