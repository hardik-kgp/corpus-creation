*** inefficient-sql-query ***

 I'm building a simple web app at the moment that I'll one day open source. As it stands at the moment, the nav is generated on every page load (which will change to be cached one day) but for the moment, it's being made with the code below. Using PHP 5.2.6 and MySQLi 5.0.7.7, how more efficient can the code below be? I think joins might help, but I'm after advice. Any tips would be greatly appreciated. 
 
 
 You can run this query: 
 
 Then iterate thru the results to create the proper heading like: 
 
 Note that I used   but you should use your own function instead which wraps around printf, but runs   thru the parameters (except the first of course). 
 Disclaimer: I do not necessarily encourage such use of  s. 
 This code is just here to show the basic idea of processing hierarchical data got with one query. 
 
 First off, you shouldn't query your database in your view. That would be mixing your business logic and your presentation logic. Just assign the query results to a variable in your controller and iterate through it.  
 As for the query, yup a join can do that in 1 query.  
 
 This will get you an initial result set. But this won't give you the data nicely ordered like you expect. You'll need to use a bit of PHP to group it into some arrays that you can use in your loops.  
 Something along the lines of  
 
 This should give you an array of categories which have all the related snippets in an array. You can simply loop through this array to reproduce your list.  
 
 I'd try this one: 
 
 I didnt test it, though. Also check the indexes using the  EXPLAIN  statement so MySQL doesnt do a full scan of the table. 
 With these results, you can loop the results in PHP and check when the category name changes, and build your output as you wish. 
 
 Besides a single combined query you can use two separate ones. 
 You have a basic tree-structure here with branch elements (categories table) and leaf elements (snippets table). The shortcoming of the single-query solution is that you get owner brach-element repeatedly for every single leaf element. This is redundant information and depending on the number of leafs and the amount of information you query from each branch element can produce large amount of additional traffic. 
 The two-query solution looks like: 
 
 
 It should print completely the same code as your example 
 
 