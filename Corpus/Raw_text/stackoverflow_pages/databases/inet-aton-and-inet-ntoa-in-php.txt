*** inet-aton-and-inet-ntoa-in-php ***

 I want to store IP addresses in my database, but I also need to use them throughout my application. I read about using   and   in my MySQL queries to get a 32-bit unsigned integer out of an IP address, which is exactly what I want as it will make searching through the database faster than using char(15). 
 The thing is, I can't find a function that does the same sort of thing in PHP. The only thing I came across is: 
 http://php.net/manual/en/function.ip2long.php 
 So I tested it: 
 
 And it outputs nothing. In the example they gave it seems to work, but then again I'm not exactly sure if   does the same thing as  . 
 Does someone know a PHP function that will do this? Or even a completely new solution to storing an IP address in a database? 
 Thanks. 
 
 The   and   functions should work just fine. 
 Note : you should use those for IPv4 addresses -- make sure that, in your case,   actually contains a valid IPv4 address  (and not some IPv6-stuff) . 
 
Trying on a google IP address : 
 
 I get the following output : 
 
 
 There is an important distinction between  ,   and the MySQL functions. 
 PHP's   and   deal with signed integers. 
 See  http://php.net/manual/en/function.ip2long.php 
 
 "Because PHP's integer type is signed, and many IP addresses will result in negative integers on 32-bit architectures, you need to use the '%u' formatter of sprintf() or printf() to get the string representation of the unsigned IP address." 
 
 MySQL's   and   deal with unsigned integers 
 See  http://dev.mysql.com/doc/refman/5.0/en/miscellaneous-functions.html#function_inet-aton 
 
 "To store values generated by INET_ATON(), use an INT UNSIGNED column rather than INT, which is signed. If you use a signed column, values corresponding to IP addresses for which the first octet is greater than 127 cannot be stored correctly." 
 
 **Here are some functions you can use to work between the two.**

 If you inserted into the MySQL database, an IP using  , you can convert it back in PHP using the following: 
 
 And you can convert it to save it in the database from PHP using this: 
 
 (Also important, don't type-cast the   to   as this might cause problems by wrapping the number if it's bigger than  . If you must cast it, cast it to a   or  ) 
 
 You should not have to deal with that inside PHP, that's what MySQL native funcions are for. See this example: 
 
 If you want to deal with both ipv4 and ipv6 in the same field, and you are using Mysql 5.6 or higher, you can use varbinary(16) and the functions inet6_aton and inet6_ntoa. This is a better example of why you should use MySQL functions and not deal with binary data inside PHP: 
 
 You can see that by doing this, you can actually avoid having to evaluate ipv6 addresses in different formats, since MySQL converts them to binary and back to their simpliest expression. 
 I know this question has more than 2 years already, but I want to let this information be useful for others that come across. 
 HTH 
 Francisco Zarabozo 
 
 For IPv4 and IPv6 support use   and  , these are availiable since PHP 5.1+ and mimic exactly the equivalent MySQL functions. 
 Otherwise just use   and  . 
 
 Here PHP alternative functions (simple copy/paste in your program) -  
 
 
 ip2long is equivalent to inet_aton().  
 ip2long only works with IPv4. I suspect your system is using IPv6 for loopback. Try to print REMOTE_ADDR. 
 