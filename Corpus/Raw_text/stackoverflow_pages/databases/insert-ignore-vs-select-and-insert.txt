*** insert-ignore-vs-select-and-insert ***

 I want to write a program add new item to table. This item has an unique key   and it can be created by one of 100 threads, so I need to make sure that it is inserted only once. 
 I have two ideas: 
 
 Use  
 Fetch it from database via   then   it to table if no returned row. 
 
 Which option is better?  Is there an even more superior idea? 
 
 SELECT + INSERT -- two round trips to the server, hence slower. 
 INSERT IGNORE -- requires a PRIMARY or UNIQUE key to decide whether to toss the new INSERT.  If this works for you, it is probably the best. 
 REPLACE -- is a DELETE + an INSERT.  This is rarely the best. 
 INSERT ... ON DUPLICATE KEY UPDATE -- This lets you either INSERT (if the PRIMARY/UNIQUE key(s) are not found)  or  UPDATE.  This is the one to use  if  you have things you need to update in existing rows. 
 
 Late to the party, but I'm pondering something similar.  
 I created the following table to track active users on a license per day: 
 
 In other words, 1 primary key and 1 unique index across the remaining 3 columns. 
 I then inserted 1 million unique rows into the table. 
 Attempting to re-insert a subset (10,000 rows) of the same data yielded the following results: 
 
 : 38 seconds 
 : 40 seconds 
   : <2 seconds 
 
 If those 10,000 rows aren't already present in the table: 
 
 : 34 seconds 
 : 41 seconds 
   : 21 seconds 
 
 So the conclusion must be     is fastest by far - at least for this particular table configuration. 
 The missing test is          , but I'll assume   is faster for this operation. 
 For your particular case, however, I would go with   because (as far as I'm aware) it's an atomic operation and that'll save you a lot of trouble when working with threads. 
 
 Best: SELECT + INSERT IGNORE. 
 Because it is use SELECT for check it do not need lock table or row in table.
Any INSERT need lock. So this can reduce performance on concurrent INSERT's. 
 