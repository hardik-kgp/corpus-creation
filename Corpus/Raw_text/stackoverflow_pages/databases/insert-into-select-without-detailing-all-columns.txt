*** insert-into-select-without-detailing-all-columns ***

 How do you insert selected rows from   to   using SQL in MySQL where: 
 
 Both tables have the same schema 
 All columns should transfer except for the auto-increment  
 Without explicitly writing all the column names, as that would be tedious 
 
 The trivial   fails on duplicate entries for primary key. 
 
 Either you list all of the fields you want in the insert...select, or you use something else externally to build the list for you. 
 SQL does not have something like  , so you'll have to bite the bullet and write out the field names. 
 
 Column names have to be specified - 
 
 Just pass NULL as a value for the auto-increment id field. 
 
 Of course, primary key must be unique. It depends on what you want to achieve, but you could exclude rows with a primary key that already exists. 
 
 **UPDATE**
: since you also need the extra rows, you should resolve the conflict first, does table_source have relationships? If not you could change those keys: 
 
 Where 1000, is a constant, big enough so they go after the end of your table. 
 
 Tedious but safe and correct. 
 Writing INSERT statements without providing a list of columns leads to code that's hard to debug and, more importantly, very fragile code that will break if the definition of the table is changed. 
 If you absolutely can't write the column names out yourself then it's relatively easy to build a tool into your code that will create the comma-separated list for you. 
 
 This is my final solution to mass update with 'replace insert' command. 
 
 
 I think you could use syntax like: 
 
INSERT INTO table (a,b,c) VALUES (1,2,3)
  ON DUPLICATE KEY UPDATE c=c+1;
 
 REF:  http://dev.mysql.com/doc/refman/5.0/en/insert-on-duplicate.html 
Hope it helps 
 
  just "bypass" the duplicate rows. 
 http://dev.mysql.com/doc/refman/5.5/en/insert.html 
 
 You can probably do it with prepared statements.  
 
 
 It seems as if columns can not be given as a place holder in a MySQL Prepared Statement. I have compiled the following solution for testing: 
 
 
 The easiest way to do it is to use phpmyadmin to write the list of columns, then to change it as needed, in the example below I want to duplicate row with id=1078 and in this table I have id unique auto increment and alias unique.therefore I created my query as follow,  with id & alias replaced by a desired value. and it worked like a charm. 
 INSERT INTO  select 1079,  ,  , " ",  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,   from   where id=1078 
 Alternatively, to auto increment id, use the following Join statement:
INSERT INTO  select * 
from (SELECT MAX( +1 )from  )a
join (select  ,  , " ",  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  from   where id=1079)b 
 