*** inserting-null-into-mysql-timestamp ***

 I'm observing unexpected behavior with inserting/updating NULL in a MySQL timestamp column. 
 Consider the following statements. 
 
 The first insert (when   is not specified in the SQL, hireDate is   which is expected. 
 However when an explicit null passed in SQL, the current date time is inserted which is unexpected.  Why does this happen? 
 Note: Hibernate uses second type of insert and hence it become an issue. How do I insert null into a timestamp column? 
 
 http://dev.mysql.com/doc/refman/5.0/en/timestamp-initialization.html 
 
 In addition, you can initialize or update any TIMESTAMP column to the current date and time by assigning it a NULL value, unless it has been defined with the NULL attribute to permit NULL values.  
 
 
 **You can insert and update NULL into a MySQL timestamp.**

 **Create the table:**

 
 **Insert some rows:**

 
 **Which prints:**

 
 The column called   with datatype:   in 2nd row has the value NULL. 
 
 You need to change the default value for the hireDate column. Default value should be null 
 This  
 
 Should be this: 
 
 
 Never store any application-value into a MySQL timestamp-type column.
Use the timestamp-type only for database-server-side dynamic timestamping (see the DEFAULT and ON UPDATE column attributes).
Make that explicit, by calling the columns 'mysql_row_created_at' and 'mysql_row_updated_at'. 
 Be aware that MySQL physically stores its timestamp-type as a numerical UNIX-epoch-delta, so it has an implicit timezone of UTC, which makes it immune to timezone changes on the session (AKA connection) level. 
 Stay away from the 'datetime' type, even more so when storing any value that has a known timezone. The 'datetime' type is much like a string of packed numbers. There are no timezone details stored with that. 
 The 'date' type is generally fine to use. Be aware though that in some contexts it will be intepreted as a datetime at midnight (of the active timezone), which will then lead to all 'datetime' related confusions that you should avoid. 
 For any application-side date-time-values, use an 'int unsigned', a 'bigint' (signed), a 'double' (signed) or a decimal(N,P), to simply store UNIX-epoch-deltas.
Make sure to show the resolution in a column name suffix, if it is not seconds. 
 Examples: 
 
 Treat your database as much as dumb storage as possible. So do any conversions only on the application-side, never on the database-side. 
 Good to know about: 
 
 
 if you want to insert NULL in the   coloumn  of your table then you have to provide null  
 
 Because    of   is   and it should be defined as null when creating column 
 