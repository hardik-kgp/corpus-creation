*** is-dbcp-apache-commons-database-connection-pooling-still-relevant ***

 The JDBC 3.0 spec talks about Connection (and Prepared Statement) pooling. 
 We have several standalone Java programs (i.e. we are not using an application server) that have been using DBCP to provide connection pooling.  Should we continue to use DBCP, or can we take advantage of the JDBC-provided pooling and get rid of DBCP? 
 We are using MySQL (Connector/J) and will eventually be adding SQL Server support (jTDS); it's unlikely that we'll support any other databases. 
 EDIT: See comment below about my attempt to eliminate the connection pooling library.  It appears that DBCP is still relevant (note that some commenters recommended C3P0 over DBCP). 
 
 Based on the encouragement of other posters, I attempted to eliminate DBCP and use the MySQL JDBC driver directly (Connector/J 5.0.4).  I was unable to do so. 
 It appears that while the driver does provide a foundation for pooling, it does not provide the most important thing: an actual pool (the source code came in handy for this).  It is left up to the application server to provide this part. 
 I took another look at the JDBC 3.0 documentation (I have a printed copy of something labeled "Chapter 11 Connection Pooling", not sure exactly where it came from) and I can see that the MySQL driver is following the JDBC doc. 
 When I look at DBCP, this decision starts to make sense.  Good pool management provides many options.  For example, when do you purge unused connection?  which connections do you purge?  is there a hard or soft limit on the max number of connections in the pool?  should you test a connection for "liveness" before giving it to a caller?  etc. 
 Summary: if you're doing a standalone Java application, you need to use a connection pooling library.  Connection pooling libraries are still relevant. 
 
 DBCP has serious flaws. I don't think it's appropriate for a production application, especially when so many drivers support pooling in their   natively. 
 The straw that broke the camel's back, in my case, was when I found that the entire pool was locked the whole time a new connection attempt is made to the database. So, if something happens to your database that results in slow connections or timeouts, other threads are blocked when they try to return a connection to the poolâ€”even though they are done using a database. 
 Pools are meant to improve performance, not degrade it. DBCP is naive, complicated, and outdated. 
 
 I prefer using dbcp or c3p0 because they are vendor neutral. I found out, at least with mysql or oracle, that whenever I try to do something with the jdbc client that is not standard sql I have to introduce compile-time dependency on the vendor's classes. See, for example, a very annoying example  here . 
 I am not sure about mysql, but oracle uses their specific, non-standard classes for connection pooling. 
 
 People still use DBCP, I think it even comes as a default with Hibernate. 
 Is DBCP not meeting your current needs? 
 I'm not a big believer in replacing infrastructure unless there's already a performance or functionality gap that it can't fill, even if there are newer or fancier alternatives around.  
 