*** is-enter-and-exit-behaviour-for-connection-objects-specified-in-the-pyth ***

 Background 
 I recently discovered the Python   keyword and started seeing its potential usefulness for more prettily handling some scenarios where I'd previously have used   constructs. I immediately decided to try it out on the MySQLdb connection object in some code I was writing. 
 I didn't bother reading up on how   and   behave in implementors of the Python database API, and naively expected the behaviour to be like that of file objects - all I was expecting was for exit to call  . 
 Imagine my confusion, then, at this behaviour: 
 
  returns a MySQLdb connection object, but the   method of that connection object returns a cursor object, not the connection object itself like I was expecting given how   and   work for file objects. I guess I ought to be doing  , or else not using   at all. 
 Questions 
 Immediately this discovery makes me wonder a few things: 
 
 What else do the   and   methods of MySQLdb connection objects do? Is   going to magically commit or rollback changes for me without me explicitly asking for that to happen? Is there anything else non-obvious that I should know? 
 Is this behaviour the same in other implementers of the Python database API (like sqlite3, django, or psycopg2)? 
 Is this behaviour formally specced anywhere?  ing the latest spec ( PEP 249 -- Python Database API Specification v2.0 ) for 'enter', 'exit' and 'context manager' doesn't throw up anything. 
 
 
 The Python DBAPI was written well before context managers were added to the Python language. 
 As such, different database libraries made their  own  decisions on how to implement context manager support (if they implemented it at all). 
 Usually  using the database as a context manager ties you to a transaction. The transaction is started on  , and committed or aborted on  , depending on wether or not there was an exception. As such, you are supposed to use the MySQL connection as a context manager after connecting seperately: 
 
 The   context manager implementation  is subtly different; it also manages transactions, but does not return a cursor from the   method: 
 
 Technically, it just returns   on  . 
 
 See the   function in this link.
 https://github.com/PyMySQL/mysqlclient-python/blob/master/MySQLdb/connections.py 
  function of connection object returns  .  
 That is why you are getting cursor object instead of Connection object. 
 