*** is-golangs-sql-package-incapable-of-ad-hoc-exploratory-queries ***

 Based of the documentation, it seems the only way to get data out of a database in Go is using Rows.Scan(), meaning you must know the count and types of all columns at compile-time. 
 Am I missing something? How are you supposed to support ad hoc queries? Or even pull all columns out of a table that may change in the future? 
 
 The   type has a   method that will give you a list of the result column names.  That can be used to determine the number of columns for unknown queries. 
 In the docs for the   method, it says: 
 
 If an argument has type *[]byte, Scan saves in that argument a copy of
     the corresponding data. The copy is owned by the caller and can be
     modified and held indefinitely. The copy can be avoided by using an
     argument of type *RawBytes instead; see the documentation for RawBytes
     for restrictions on its use. 
 If an argument has type *interface{}, Scan copies the value provided by
     the underlying driver without conversion. If the value is of type
     []byte, a copy is made and the caller owns the result. 
 
 So we also have support for scanning column values when we don't know their type: either in their raw form, or as Go types. 
 Putting these two together, you could do something like the following using the   syntax to call variadic functions : 
 
 Now the   slice should contain the decoded versions of all the column values for the current result row. 
 If you have extra knowledge about the table (e.g. expected types, or know the number of columns ahead of time), you could probably simplify the logic a little. 
 
 Found example code for go-mssqldb driver doing exactly this. Ref.  https://github.com/denisenkom/go-mssqldb/blob/master/examples/tsql/tsql.go  - code extracted below.
It works, at least, for this driver. However, it only uses the sql-namespace API so it will probably/possibly work for other drivers too. 
 **Given any(?) SQL select statement, it displays the resulting data rows**

 
 