*** is-hibernate-using-pessimistic-or-optimistic-locking ***

 All my classes have an  
 @Version 
 annotation, so I assumed they were using optimistic locking. 
 But I the following exception in my logs that seem to indicate Im using pessimistic locking. So which is it ? (I want to use optimistic locking)  
 
 
 You are using  optimistic locking , as your   statement already indicates: 
 
 The presence of the   column is what optimistic locking is all about. 
 You were misled by the   which might be caused by an  explicit or an implicit row-level lock . 
 You must understand that locks are acquired on rows implicitly, to avoid dirty-writes.  This book  explains this topic with lots of diagrams and code examples. 
 
 This exception is due to Lock TimeOut. 
 Caused by: org.h2.jdbc.JdbcSQLException: Timeout trying to lock table ;  
 Check a solution  here 
 Also hibernate provides mechanisms for implementing both types of locking in your applications. 
 Your locking strategy can be either optimistic or pessimistic. 
 Optimistic 
 Optimistic locking ssumes that multiple transactions can complete without affecting each other, and that therefore transactions can proceed without locking the data resources that they affect. Before committing, each transaction verifies that no other transaction has modified its data. If the check reveals conflicting modifications, the committing transaction rolls back[1].  
 Pessimistic 
 Pessimistic locking assumes that concurrent transactions will conflict with each other, and requires resources to be locked after they are read and only unlocked after the application has finished using the data.  
 Details can be found  here  
 
 It is most likely, that you will use a different database for Testing, than you do in LIVE environment. 
 H2 can produce errors, which might not appear on LIVE Database like Oracle, MySQL a.s.o.. Means even your code is correct, but the H2 can possibly be messing around. 
 The MVCC=true works perfectly. 
At the same time you should ensure that you have full integration tests on LIVE like systems for your use case in order to verify the LIVE Database behaviour. 
 