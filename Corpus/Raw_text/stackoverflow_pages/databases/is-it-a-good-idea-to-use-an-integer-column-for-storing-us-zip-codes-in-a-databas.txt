*** is-it-a-good-idea-to-use-an-integer-column-for-storing-us-zip-codes-in-a-databas ***

 From first glance, it would appear I have two basic choices for storing  ZIP codes  in a database table: 
 
 Text (probably most common), i.e.   or   to support +4 extension 
 Numeric, i.e. 32-bit integer 
 
 Both would satisfy the requirements of the data, if we assume that there are no international concerns.  In the past we've generally just gone the text route, but I was wondering if anyone does the opposite?  Just from brief comparison it looks like the integer method has two clear advantages: 
 
 It is, by means of its nature, automatically limited to numerics only (whereas without validation the text style could store letters and such which are not, to my knowledge, ever valid in a ZIP code).  This  doesn't  mean we could/would/should forgo validating user input as normal, though! 
 It takes less space, being 4 bytes (which should be plenty even for 9-digit ZIP codes) instead of 5 or 9 bytes. 
 
 Also, it seems like it wouldn't hurt display output much.  It is trivial to slap a   on a numeric value, use simple string manipulation to insert a hyphen or space or whatever for the +4 extension, and use string formatting to restore leading zeroes. 
 Is there anything that would discourage using   as a datatype for US-only ZIP codes? 
 
 A numeric ZIP code is -- in a small way -- misleading.   
 Numbers should mean something  numeric .  ZIP codes don't add or subtract or participate in any numeric operations.  12309 - 12345 does not compute the distance from downtown Schenectady to my neighborhood. 
 Granted, for ZIP codes, no one is confused.  However, for other number-like fields, it can be confusing. 
 Since ZIP codes aren't numbers -- they just happen to be coded with a restricted alphabet -- I suggest avoiding a numeric field.  The 1-byte saving isn't worth much.  And I think that that  meaning  is more important than the byte. 
 
 **Edit**
. 
 "As for leading zeroes..." is my point.  Numbers don't have leading zeros.  The presence of meaningful leading zeros on ZIP codes is yet another proof that they're not numeric. 
 
 Are you going to ever store non-US postal codes? Canada is 6 characters with some letters. I usually just use a 10 character field. Disk space is cheap, having to rework your data model is not. 
 
 Use a string with validation.  Zip codes can begin with 0, so numeric is not a suitable type.  Also, this applies neatly to international postal codes (e.g. UK, which is up to 8 characters).  In the unlikely case that postal codes are a bottleneck, you could limit it to 10 characters, but check out your  target formats  first. 
 Here are  validation regexes for UK, US and Canada. 
 
 Yes, you can pad to get the leading zeroes back.  However, you're theoretically throwing away information that might help in case of errors.  If someone finds 1235 in the database, is that originally 01235, or has another digit been missed? 
 Best practice says you should say what you mean.  A zip code is a code, not a number.  Are you going to  add/subtract/multiply/divide  zip codes?  And from a practical perspective, it's far more important that you're excluding extended zips. 
 
 Normally you would use a non-numerical datatype such as a varchar which would allow for more zip code types. If you are dead set on only allowing 5 digit [XXXXX] or 9 digit [XXXXX-XXXX] zip codes, you could then use a char(5) or char(10), but I would not recommend it. Varchar is the safest and most sane choice. 
 Edit: It should also be noted that if you don't plan on doing numerical calculations on the field, you should not use a numerical data type. ZIP Code is a not a number in the sense that you add or subtract against it. It is just a string that happens to be made up typically of numbers, so you should refrain from using numerical data types for it. 
 
 From a technical standpoint, some points raised here are fairly trivial.  I work with address data cleansing on a  daily  basis - in particular cleansing address data from all over the world.  It's not a trivial task by any stretch of the imagination.  When it comes to zip codes, you  could  store them as an integer although it may not be "semantically" correct.  The fact is, the data is of a numeric form whether or not, strictly speaking it  is  considered numeric in value. 
 However, the very real drawback of storing them as numeric types is that you'll lose the ability to easily see if the data was entered incorrectly (i.e. has missing values) or if the system removed leading zeros leading to costly operations to validate potentially invalid zip codes that were otherwise correct. 
 It's also very hard to force the user to input correct data if one of the repercussions is a delay of business.  Users often don't have the patience to enter correct data if it's not immediately obvious.  Using a regex is one way of guaranteeing correct data, however if the user enters a value that doesn't conform and they're displayed an error, they may just omit this value altogether or enter something that conforms but is otherwise incorrect.  One example [using Canadian postal codes] is that you often see A0A 0A0 entered which isn't valid but conforms to the regex for Canadian postal codes.  More often than not, this is entered by users who are forced to provide a postal code, but they either don't know what it is or don't have all of it correct. 
 One suggestion is to validate the whole of the entry as a unit validating that the zip code is correct when compared with the rest of the address.  If it is incorrect, then offering alternate valid zip codes for the address will make it easier for them to input valid data.  Likewise, if the zip code is correct for the street address, but the street number falls outside the domain of that zip code, then offer alternate street numbers for that zip code/street combination. 
 
 Unless you have a business requirement to perform mathematical calculations on ZIP code data, there's no point in using an INT.  You're over engineering. 
 Hope this helps, 
 Bill 
 
 No, because 
 
 You never do math functions on zip code 
 Could contain dashes 
 Could start with 0  
 NULL values sometimes interpreted as zero in case of scalar types
like integer (e.g. when you export the data somehow) 
 **Zip code, even if it's a number, is a designation of an area,
meaning this is a name instead of a numeric quantity of anything**

 
 
 ZIP code is really a coded namespace, if you think about it. Traditionally digits, but also a hyphen and capital letters: 
 "10022-SHOE" 
 http://www.saksfifthavenue.com/main/10022-shoe.jsp 
 Realistically, a lot of business applications will not need to support this edge case, even if it is valid. 
 
 Integer is nice, but it only works in the US, which is why most people don't do it.  Usually I just use a varchar(20) or so.  Probably overkill for any locale. 
 
 If you were to use an integer for US Zips, you would want to multiply the leading part by 10,000 and add the +4.  The encoding in the database has nothing to do with input validation.  You can always require the input to be valid or not, but the storage is matter of how much you think your requirements  or the USPS will change. (Hint: your requirements  will  change.) 
 
 I  learned recently  that in Ruby one reason you would want to avoid this is because there are some zip codes that begin with leading zeroes, which–if stored as in integer–will automatically be converted to octal. 
 From  the docs : 
 
 You can use a special prefix to write numbers in decimal, hexadecimal, octal or binary formats. For decimal numbers use a prefix of 0d, for hexadecimal numbers use a prefix of 0x, for octal numbers use a prefix of 0 or 0o… 
 
 