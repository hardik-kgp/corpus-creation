*** is-it-good-practice-to-set-all-database-columns-as-not-null ***

 Normally is it good practice to set all database columns as NOT NULL or not ? Justify your answer. 
 
 No. It's a good idea to set columns to NULL  where appropriate . 
 
 I kind of disagree with the "where appropriate" rule. It is actually  **rather safe**
 to set any column to be NOT NULL; and then later modify the columns to allow NULL values when you need them. On the other hand, if you allow NULL values first and then later decide you don't want to allow them, it can potentially be much more difficult to do this. 
 It may make your database table/column descriptions quite ugly if you do this excessively, but when in doubt, go ahead and restrict the data. 
 
 Relational theory has it that   is evil. 
 However, your question kind of referred to practice. 
 So, to the extent that you want your practices to conform to the heavenly ideals of theory, yes, avoid   as if it were the plague, Cholera and AIDS all-in-one. 
 To the extent that these crappy implementations called "SQL DBMSs" do not leave you any other choice, yes, (sniff) use them. 
 EDIT 
 Someone mentioned "business rules" as the guideline for "appropriateness" in the accepted answer, and some others upvoted that remark.  That is total crap.  Business rules can always do without  s and the only guideline to "appropriateness" is the very deficiencies of any SQL system that makes it a non-relational system to boot. 
 
 The inventor of the NULL reference (1965) recently called it his "billion-dollar mistake":  http://qconlondon.com/london-2009/presentation/Null+References:+The+Billion+Dollar+Mistake 
 Languages such as Scala, SML, and Haskell are non-NULL by default: NULL is called "Option" or "Maybe" and require special syntax and checks. 
 Since the time databases were invented, allowing NULL by default has been considered more and more dangerous and undesirable. Should databases follow? Probably. 
 Go with NOT NULL when you can. 
 
 If you can't know the value at insert time, you really must have a null allowed. For instance, suppose you havea record that includes two fields, begin date and end date. You know begin date when the record is inserted but not the end date. Creating a fake date to put in this field just to avoid nulls is dumb to say the least. 
 In real life at least as much harm is caused by forcing data entry into a field as by not forcing it. If you havea an email field and don't know the customer's email, then the user has to make something up to put into the required field. Likely what they make up may not be what you would want them to make up something like "thisistupid@ass.com". Sometimes this bad info gets provided back to the client or to a vendor in a data feed and your company looks really really stupid. I know as I process a lot of these feeds coming in from our customers. Nice things in the email field have included, "his secretary is the fat blonde", "this guy is a jerk" etc. 
 
 From my perspective, while it may be better for the database, it's not better for the user.  Once you get into more interactive applications, you want to be able to persist the data in an interim state, so most of your fields will probably be null at that point. 
 
 I'm a newbie and my answer may be totally asinine, but here's my personal take on the subject. 
 In my humble opinion, I don't see the problem with allowing ALL fields except primary/foreign keys to be nullable. I know many of you cringed as soon as I said that, and I'm sure I heard someone cry out, "Heretic! Burn him at the stake!"  But here's my reasoning: 
 Is it really the job of the  database  to enforce rules about what values should and should not be permitted - except of course as needed to enforce things like referential integrity and to control storage consumption (by having things like max chars set)?  Wouldn't it be easier and better to enforce all "null vs. not null" rules at the  code  level prior to storing the values in the database? 
 After all, it's the job of the code to validate all values prior to them being stored in the database anyway, right?  So why should the database try to usurp the code's authority by also setting up rules about what values are valid?  (In a way, using not null constraints except where absolutely necessary almost feels like a violation of the idea of "separation of concerns.")  Furthermore, any time a constraint is enforced at the database level, it must necessarily be enforced at the code level also to prevent the code from "blowing up." So why do twice as much work? 
 At least for me, it seems like things work out better when my database is allowed to simply be a "dumb data storage container" because inevitably in the past when I've tried to use "NOT NULL" to enforce a business rule which made sense to me at the time, I end up wishing I hadn't and end up going back and removing the constraint. 
 Like I said, I realize I'm a newbie and if there's something I'm overlooking, let me know - and try not to butcher me up too bad :)  Thanks. 
 
 It depends on what you're trying to do, but for many applications it's a good idea to avoid  s where possible — and the most foolproof way to do this is to use  . 
 The problem is that the meaning of   is open to interpretation. It could mean “ no value belongs here ,” or it could mean “ we haven't got the value yet, so we should keep asking the user for it .” If you are using it, you'll want to read up on SQL's  3-valued logic , and functions such as  , etc. 
 Nevertheless, as Cletus and others have said, if you use    **appropriately**
 it can be useful. 
 
 In business apps I was always removing my NOT NULLS because the users did not like being forced to enter data that they didn't know. It depends on the table but I set most of my fields to NULL and only set the bare minimum number of fields to NOT NULL. 
 
 If your data can actually BE "unknown", and it's important to record that fact, then yes, use a NULL. Bear in mind that sometimes you need to differentiate between "unknown" and "not relevant" - for example, a DateTime field in one of my databases can either be the SQL Server minimum date (not applicable), NULL (unknown), or any other date (known value). 
 For fields which don't really have business rules depending on them - I'm talking about "Comments", "Description", "Notes" columns here - then I set them to default to empty strings, as (a) it saves dealing with nulls, and (b) they are never "unknown" - they just aren't filled in, which logically is a known empty value. 
 E.g.: 
 
CREATE TABLE Computer (
  Id INT IDENTITY PRIMARY KEY
  , Name NVARCHAR(16) NOT NULL
  , ...[other fields]...
  , Comments NVARCHAR(255) NOT NULL
      CONSTRAINT DF_Computer_Comments DEFAULT (N'')
)
 
 If you don't supply a value to Comments, it defaults to empty. 
 
 Short answer: it depends on what you are storing. 
 I can see a table (or two) having all NOT NULLS or all NULLS.  But an entire database? 
 
 Only for columns where not having a value doesn't make any sense. 
 Nulls can be very handy; for one thing, they compress beautifully.  They can be a nasty surprise when you don't expect them, though, so if you can't have a Student without a First Name -- make that column NOT NULL.  (Middle names, on the other hand... maybe you want to have a default empty string, maybe not -- decent arguments both ways) 
 
 You should not forget to set not null where needed, use check constraints if applicable, not forget about unique constraints, create proper indexes and brush your teeth after every meal and before going to bed:) 
 In most cases you can use not null and you should use not null. It is easier to change not null->null than in opposite direction, but for example in Oracle empty string is treated as null, so it is obvious that you can't use it all the time. 
 
 **What's the alternative?**

 I found this question as a result of a discussion at work.  Our question was: 
 **Should we have a **
**nullable foreign key**
** or an **
**association table**
** with unique constraints?**

The context was that sometimes there is an association and sometimes there isn't. (EG: Unplanned vs. planned schedules) 
 For me, a combination of nullable foreign key with a 'set field to null on delete' was equivalent to the association table but had two advantages: 
 
 More understandable (the schema was already complex) 
 Easier to find 'unplanned' schedules with an 'xxx is null' query (vs. not exists query) 
 
 **In summary**
, sometimes 'null' (the absence of information) actually means something.  Try to have non-null, but there are exceptions. 
 FWIW, we were using Scala / Squeryl so, in code, the field was an 'Option' and quite safe. 
 
 My take is that if you want to have flexible and "ambiguous" tables to some extent, just use NoSQL, as it is precisely built for that purpose. Otherwise, having a NULL value in a row is just acceptable as it maybe some piece of optional data, like Address 2, or home phone number and that kind of things. 
 In my opinion, making Foreign keys nullable break one of the main reasons we use relational databases. As you want your data to be as tightly related and consistent as possible. 
 
 **It depends**
 (on the datatype) 
 Think about this, If the immediate technology that interacts with database is Python I shall make everything   with a proper  . 
 However the above makes sense if the column is   with default as empty string.  
 What about  , It is hard to come up with default values where   can convey more details other than simply set to  
 For   still   makes some sense, and so on.  
 Similar argument can be carried out for various datatypes like spatial data types.  
 
 IMO, using NULLable option must be minimized. The application should designate a suitable value for the "non-existent" state. In Peoplesoft I think, the application puts a 0 for Numericals and a space for Char columns where a value does not exist. 
 One could argue why the so-called suitable value couldn't be NULL.  
 Because SQL implementation treats nulls totally differently. 
 For e.g. 
1 = NULL and 0 = NULL both result in false!
NULL = NULL is false!
NULL value in GROUP BY and other aggregate functions also create unexpected results. 
 