*** is-it-possible-to-lose-a-sqlite-database-connection ***

 I am seeing few   exceptions from an Android app. I didn't close the connection in many places. It is also possible that the connection is getting closed in some other thread. 
 Just to make sure, is it possible for an SQLite connection to get closed automatically or by the operating system or implicitly? 
 
 This  source  recommends you to use a singleton DatabaseHelper, and some  do not demonify it . 
 This would indicate to me that the Database is not expected to simply close itself during the lifetime of your Application. 
 **First Source **
**@Alex Lockwood**

 
 Approach #1: Use a Singleton to Instantiate the SQLiteOpenHelper 
 Declare your database helper as a static instance variable and use the
  Singleton pattern to guarantee the singleton property. The sample code
  below should give you a good idea on how to go about designing the
  DatabaseHelper class correctly. 
 The static getInstance() method ensures that only one DatabaseHelper
  will ever exist at any given time. If the sInstance object has not
  been initialized, one will be created. If one has already been created
  then it will simply be returned. You should not initialize your helper
  object using with new DatabaseHelper(context)! Instead, always use
  DatabaseHelper.getInstance(context), as it guarantees that only one
  database helper will exist across the entire application's lifecycle. 
 
 **Second Source **
**@CommonsWare**

 
 Having a single SQLiteOpenHelper instance can help in threading cases.
  Since all threads would share the common SQLiteDatabase,
  synchronization of operations is provided. 
 
 
 Yes - any database  **connection**
 can be closed behind your back. It can happen on the server end if a dba decides to kill your connection. It can happen in the client if something times out. It can happen inside jdbc for various reasons. It can even happen by accident in your code. 
 There is some ambiguity here though. You report a  Cannot perform this operation because the connection  **pool**
 has been closed . Your connection pool is unlikely to be closed without your knowledge. Also if you use a connection pool correctly it will reopen the  **database**
 connection if it closes. 
 
 I have only encountered that happened within a few means: 
 
 You close your connection to the database instead of closing a cursor  
 
 IE: 
 
 
 The calling activity context is no longer valid 
 
 
 This is my personal experience. 
 After I adopted my code to the notorious singleton SQLÄ°teOpenHelper approach, things got better as the helper object synchronizes all db accesses on that object. But still, it was not the best yet. 
 See, all these sync stuff are not really atomic and they're happenning in the area that you don't have much of a control on it. So assume that right before your query, the connection might have been closed by some other thread that has the lock. 
 You may check the connection prior to your queries but what if it's closed? You skip doing what you need to do? Or you implement a simple synchronization for your particular db access hubs, at the level where you have a control? I'd take the 2nd way for sure. 
 