*** is-it-practical-to-have-back-end-database-side-validation-for-everything ***

 With Back-end validations I mean, during the- Triggers,CHECK, Procedure(Insert, Update, Delete),  etc.
 **How practical or necessary**
 are they now, where nowadays most of these validations are handled in front-end strictly.  **How much of back-end validations are good for a program?**
 Should small things be left out of back-end validations? 
 For example: Lets say we have an age barrier of peoples to enter data of. This can be done in back-end using Triggers or Check in the age column. It can/is also be done in front-end. So is it necessary to have a back-end validation when there is strict validation of age in the front-end? 
 
 This is a conceptual question. In general modern programs are built in 3 layers: 
 
 Presentation 
 Business Logic 
 Database 
 
 As a rule, layer 1  **may**
 elect to validate all input in a modern application, providing the user with quick feedback on possible issues (for example a JS popup saying  "this is not a valid email address" ). 
 Layer 2  **always**
 has to do full validation. It's the gateway to the backend and it can check complex relational constraints. It ensures no corrupt data can enter the database, in any way, validated against the application's constraints. Those constraints are oft more complex than what you can check in a database anyway (for example a bank account number here in the Netherlands has to be either 3 to 7 numbers,  **or**
 9 or 10 and match a  check digit test ). 
 Layer 3  **can**
 do validation. If there's only one 'client' it's not a necessity per se, if there's more (especially if there are 'less trusted' users of the same database) it should definitely also be in the database. If the application is mission-critical, it's also recommended to do full validation in the database as well with triggers and constraints, just to have a double guard against bugs in the business logic. The database's job is to ensure its own  integrity , not compliance to specific business rules. 
 There's no clear-cut answers to this one, it depends on what your application does and how important it is. In a banking application - validate on all 3 levels. In an internet forum - check only where it is needed, and serve extra users with the performance benefits. 
 
 This might help: 
 
 Front end (interface) validation is for data entry help and contexual messages. This ensures that the user has a hassle free data entry experience; and minimizes the roundtrip required for validate  correctness . 
 Application level validation is for business logic validation. The values are correct, but do they  make sense . This is the kind of validation do you here, and the majority of your efforts should be in this area. 
 Databases don't do any validation. They provide methods to  constraint  data and the scope of that should be to ensure  referential integrity . Referential integrity ensures that your queries (especially cross table queries) work as expected. Just like no database server will stop you from entering   in a numeric column, it also shouldn't be the place to check if age < 40 as this has no impact on the integrity of the data. However, ensuring that a row being deleted won't leave any orphans - this is referential integrity and should be enforced at the database level. 
 
 
 back end validations are necessary! 
 if the front end uses JavaScript validation, and the user disables the JavaScript in the browser the validation is turned off. So there is need for back-end validation. 
 
 Put  **contraints**
 on your database. This is NOT business validation, more like data validation, for example - foreign key constraints, or making sure your primary keys are unique. It's making sure your data is  consistent .  
 The validation you are talking about is  **business**
 validation, and this kind of validation should be in your  **business**
 layer, for example in your domain, and should be the main source for validation. If these rules change, you modify them in the business layer and all of your clients immediately are affected.  
 In the UI you could/should also do basic  **input**
 validation - like checking mandatory fields, or validity of an email address; and updating or disabling UI controls based on that. I would say that this is the kind of validation that doesn't change (a lot). 
 
 The age old answer:  it depends . 
 It really depends on your needs. If users will be modifying the database directly, I would say you absolutely need to constrain your database. That said, a large number of databases are only modified by a web application. While you definitely need server side validation in the web application itself, because users can bypass your web pages, you may not need database constraints. 
 You should still do validation on the client side as a convenience to the client. 
 
 If you are concerned about security then everything should be validated on the server to prevent someone creating an alternative client to access/manipulate your database. Front end is also necessary as it improves efficiency and prevents the server being accessed with inappropriate data. 
 