*** is-normalizing-a-persons-name-going-too-far ***

 You usually normalize a database to avoid data redundancy. It's easy to see in a table full of names that there is plenty of redundancy. If your goal is to create a catalog of the names of every person on the planet (good luck), I can see how normalizing names could be beneficial. But in the context of the average business database is it overkill? 
 (Of course I know you could take anything to an extreme... say if you normalized down to syllables... or even adjacent character pairs. I can't see a benefit in going that far) 
 Update: 
 One possible justification for this is a random name generator. That's all I could come up with off the top of my head. 
 
 Database normalization usually refers to normalizing the field, not its content. In other words, you would normalize that there only be one first name field in the database. That is generally worthwhile. However the data content should not be normalized, since it is individual to that person - you are not picking from a list, and you are not changing a list in one place to affect everybody - that would be a bug, not a feature. 
 
 Yes, it's an overkill. 
 People don't change their names from   to   all at once. 
 
 How do you normalize a name? Not all names have the same structure. Not all countries or cultures use the same rules for names. A first name is not necessarily just a first name. People have variable numbers of names. Some countries don't have the simple pair of firstname/lastname. What if my first name just so happens to be your last name, should they be considered the same in your database? If not, then you get into the problem that last name might mean different things in different countries. In most countries I know of, it is a family name. Your last name is the same as at least one of your parents' last name. On Iceland, it is your father's first name, followed by "son" or "daughter". So the same last name will mean completely different things depending on whether you encounter it in Iceland and the US. 
 In some cultures it is common when getting married, for the woman to take her husband's last name. In other cultures, that's completely optional, or might even work the opposite way. 
 How can you normalize this? What information would it gain you? If you find someone in your database who has "Smith" as the last word making up their name, what does that tell you? It might not be their family name. It might only be  part  of the family name. It might be an honorary in some language, but which according to their culture, should be considered part of the name. 
 You can only normalize data if it follows a common structure. 
 
 Yes, definitely overkill.  What's a few dozen bytes betewen friends? 
 
 Maybe if you work in the Census office it might make sense. Otherwise, see every other answer :) 
 
 If you had a need to perform queries based on diminutive names I could see a need for normalizing the names. e.g. a search for "Betty" may need to return results for "Betty", "Beth", and "Elizabeth" 
 
 I would say yes, it is going too far in 95%+ of the cases. 
 
 Yes.  I cannot think of an instance where the benefits outweigh the problems and query complications. 
 
 No, but you might want to normalise to a canonical record for a customer (so you don't get 5 different entries for 'Bloggs & Co.' in your database.  This is a data cleansing issue that often bites on MIS projects. 
 
 You often don't go over fourth form normalization in a database. Therefore seventh form normalization is quite a bit overboard. The  only  place this might even be a remotely plausible idea is in some kind of massive data warehouse. 
 
 Generally yes. Normalizing to that level would be going to far. Depending on the queries (such as phone books where searches by last name are common) it might be worthwhile. I expect that to be rare. 
 
 I generally haven't seen a need to normalize the name, mainly because that adds a performance hit on the join that will always be called, and doesn't give any benefit. 
 If you have so many similar names, and have a storage problem then it may be worth it, but there will be a performance hit that would need to be considered. 
 
 I would say it is absolutely overkill.  In most applications, you display folks' names so often, every query involved with that is going to look that much more complex and harder to read.  
 
 Yes, it is.  It is commonly recognized that just applying all of the Rules of Normalization can cause you to go way too far and end up with an overnormalized database.  For example, it would be possible to normalize every instance of every character to a reference to a character enumeration table.  It's easy to see that that's ridiculous. 
 Normalization needs to be performed at a level that is appropriate for your problem domain.  Overnormalization is as much a problem as undernormalization (although, of course, for different reasons). 
 
 There might be a case where being able to link married/maiden names would be useful. 
Recently had a case where I had to rename thousands of emails in exchange because somebody got divorced and didn't want any emails listing her as married_name@company.com 
 
 No need to normalize to that level unless the names make up a composite primary key and you have data that is dependant on one of the names (e.g. anyone with the surname Plummer knows nothing about databases). In which case, by not normalizing, you would violate  second normal form . 
 
 I agree with the general response, you wouldn't do that. 
 One thing comes to mind though, compression.  If you had a billion people and you found that 60% of first names were pulled from 5 very common names, you could use some tricky bit manipulation to reduce the size very significantly.  It would also require very customized database software. 
 But this isn't for the purpose of normalization, just compression. 
 
 You should normalize it out if you need to avoid the delete anomaly that comes with not breaking it out.  That is, if you ever need to answer the question, has my database ever had a person named "Joejimbobjake" in it, you need to avoid the anomaly.  Soft deletes is probably a much better way than having a comprehensive first name table (for example), but you get my point. 
 
 In addition to all the points everyone else has made, consider that if you were implementing a data entry operation (for example), and were to insert a new contact, you would have to search your first name and last name tables to locate the correct Id's and then use those values. But then this is further complicated by the occasion when the name is not on the FN and/or LN tables, then you have to insert the new first/last name and use the new id(s). 
 And if you think that you have a comprehensive list of names, think again. I work with a list of over 200k unique first names and I'd guess it represents 99.9% of the US population. But that .1% = a lot of people. And don't forget the foreign names and misspellings... 
 