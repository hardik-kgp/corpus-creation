*** is-there-a-p2p-database-implementation-out-there ***

 
 
 
 
 
 Closed.  This question is  off-topic . It is not currently accepting answers.
                            
                         
 
 
 
 
 
 
 
 
 
 
 Want to improve this question?   Update the question  so it's  on-topic  for Stack Overflow.
                         
 Closed  3 years ago . 
 
 
 
 Currently, I am researching p2p application models. I believe even though the peers share data between each other, there is still a database server somewhere that holds user account information. Take Skype as an example. I believe they are/were using PostgreSQL though the users establish a p2p communication. What I am wondering is is there a p2p database implementation out there so the data is distributed (and encrypted) across client computers rather than hosted in a server farm? 
 If not, would it be extremely difficult/unrealistic to implement a p2p database? 
 
 If you're interested in non-relational databases, there are lots of transactional and non-transactional P2P key-value stores, such as memcached (within a workgroup), or the different Distributed Hash Table (DHT) implementations over the Internet as a whole (e.g. CAN, Chord, Pastry, Tapestry, and Chimera).   
 Here's a good starting point:  http://en.wikipedia.org/wiki/Distributed_hash_table 
 
 You mention Skype, and this is a good example.  AFAIK, Skype distributes their database across peers.   
 However, note that they have a patent on some kind of database distributed over peers.  If you write anything, make sure you don't step on their patent!   
 I believe it is part of the reason they were sold for over $8B to Microsoft. 
 I propose that you read a little about  JoltID (company)  which holds the intellectual property rights to US patent 7,480,658 " covering distributed database systems and co-ordinated decentralized peer-to-peer computing " 
 
 P2P frameworks are usually implemented independently of any database. They focus on transporting information between nodes. Some rely on in-memory databases to store temporary information. Regarding JXTA, the user can configure nodes to operate with in-memory or file-based databases. 
 I have been in P2P for quite some and I have not heard about a fully P2P-database user oriented framework. I think you will have to implement your favorite P2P framework on top of your database. 
 
 A late answer, but may be helpful for others having the same question. I agree with @JVerstry in that implementations of P2P databases are usually just communication and synchronisation layers that are placed atop a standard database. 
 I know a project that essentially do bidirectional replication and conflict resolution on a database between various networked copies, with each node having a full copy. This is indeed a P2P database, but note that there are other kinds (@Canuck correctly mentions DHTs, which are used to implement searches in networks where each node holds a partial copy of the database). 
 For a NoSQL approach, you could look at  Refuge , which is based upon CouchDB. I believe it is early days at the time of writing, but it looks interesting. 
 
 I'm not sure whether this answers your question directly or not, but it seems to me that any kind of application that stores data locally and offers to sync or share it with other instances of itself (or compatible apps) is, de facto, some kind of peer to peer database. 
 Take a distributed search engine app for instance. There are a few experiments in that area (e.g.  http://yacy.net ). Using them, you've a local index which you can share with your peers and so forth. 
 Or, more to the point, a bit torrent client... 
 Neither of these are communicating through SQL proper, nor is there necessarily a DB server that stores user account information. Each in their own way are, de facto, in the realm of distributed data stores. 
 In each case, the purpose of having a "server" (or whatever it gets referred to), is to keep instances of the app from shaping disjoint networks that do not know about each other. Best I'm aware, there is no reliable means to achieve this reliably without some kind of "always on" reference points. 
 The twist, in the case of Skype, is that in addition to wanting to shape a unique network, you want to a) authenticate the users as they join the network, and b) store some amount of (but not all) history (e.g. you get notified for missed phone calls and contact requests; but missed chat messages will only appear when both Skype clients are connected). 
 
 There is actually one, but it needs a new maintainer: Prophet 
 http://syncwith.us/ 
 
 Prophet is a new kind of database designed for the post Web-2.0 world. It's made to let you collaborate with your friends and coworkers without needing any kind of special server or internet provider. 
 Prophet's buzzword-laden pitch reads something like this: 
 A grounded, semirelational, peer to peer replicated, disconnected, versioned, property database with self-healing conflict resolution. 
 
 It's even been used to create a P2P bug tracker called Simple Defects 
 