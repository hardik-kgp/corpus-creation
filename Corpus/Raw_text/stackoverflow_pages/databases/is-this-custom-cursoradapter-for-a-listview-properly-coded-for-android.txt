*** is-this-custom-cursoradapter-for-a-listview-properly-coded-for-android ***

 I have never been happy with the code on my custom CursorAdapter until today I decided to review it and fix a little problem that was bothering me for a long time (interestingly enough, none of the users of my app ever reported such a problem). 
 Here's a small description of my question: 
 My custom CursorAdapter overrides   and   instead of   as most examples I see. I use the ViewHolder pattern between these 2 methods. But my main issue was with the custom layout I'm using for each list item, it contains a  . 
 The problem was that the button state was not kept when a list item view scrolled out of view and then scrollbed back into view. This problem existed because the   was never aware that the database data changed when the   was pressed and it was always pulling the same data. I tried to requery the cursor when clicking the   and that solved the problem, but it was very slow. 
 I have solved this issue and I'm posting the whole class here for review. I've commented the code thoroughly for this specific question to better explain my coding decisions. 
 Does this code look good to you? Would you improve/optimize or change it somehow? 
 P.S: I know the CursorLoader is an obvious improvement but I don't have time to deal with such big code rewrites for the time being. It's something I have in the roadmap though. 
 Here's the code: 
 
 
 Your solution is optimal an I will add it to my weapons :) Maybe, I'll try to bring a little optimization for the calls to database. 
 Indeed, because of conditions of the task, there are only three solutions: 
 
 Update only one row, requery cursor and redraw all items. (Straight-forward, brute force). 
 Update the row, cache the results and use cache for drawing items.  
 Cache the results, use cache for drawing items. And when you leave this activity/fragment then commit the results to database. 
 
 For 3rd solution you can use SparseArray for looking for the changes. 
 
 Once again: from the start this array is empty. When you toggle the button first time (there is a change), you add NoteData to array. When you toggle the button second time (there is a rollback), you remove NoteData from array. And so on.  
 When you're finishing, just request the array and push the changes into database. 
 
 What you are seeing is the View re use of Android. I don't think that you are doing something wrong by querying the cursor again. Just dont use the cursor.requery() function.  
 Instead, set the toggle to false at first always and then ask the cursor and switch it on if you have to.  
 Maybe you were doing that and I misunderstood something, however I don't think that you should  have slow results doing it.  
 Pseudo-code: 
 
 
 I would wait before going to CursorLoader. As it seems CursorLoader derivatives do not worl with CursorLoader. 
 