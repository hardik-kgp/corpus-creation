*** java-api-for-sql-data-definition-language ***

 
 
 
 
 
 Closed.  This question is  off-topic . It is not currently accepting answers.
                            
                         
 
 
 
 
 
 
 
 
 
 
 Want to improve this question?   Update the question  so it's  on-topic  for Stack Overflow.
                         
 Closed  3 years ago . 
 
 
 
 Before I write one, is there a Java API for manipulating a database. Like an object orientated wrapper around  , with support for things like  ? 
 Obviously correct SQL statements should be executed in the background based on the DB in use. 
 I'm specifically interested in an API for performing DDL statements. 
 
 DdlUtils from Apache does this  https://db.apache.org/ddlutils/ 
 
 Many object-relational mapping frameworks come with tools to generate domain model classes out of an existing schema, or create (or even update) a schema to match the domain model classes. 
 In particular, hibernate can do this, see  
 http://docs.jboss.org/hibernate/core/3.6/reference/en-US/html_single/#toolsetguide-s1 
 
 As far as I can remember some tools such as NetBeans can create/ modify database schemas on-the-fly. You could have a look at the source code if you don't find a specific library. 
 
 Have you considered uisng straight JDBC calls ? 
 For control and security reasons I like to separate DDL and DML with ORM and JDBC respectively. This allows less experienced coders to focus on data manipulation ( via hibernate ). 
 Likely just my "old school " bias.... 
 Hibernate can do some DDL functions however I have not used it extensively for this . I believe it cannot create tables dynamically ( i.e. on a running existing DB ) for example . 
 
 
 Java API for DDL in SQL: I've had to build one for my project, so I've published it as open-source:  https://bitbucket.org/aragot/play-sql-dialects  (APL2 license) 
 The license says it's ok to derive and include in a project for sale, as long as you respect the terms. 
 There's only a full dialect for PostgreSQL. Please feel free to contribute support for MySQL or Oracle. The unfortunate part is, Oracle and MySQL don't support transactional DDL, so in case of exception you need to recover the state of the database, which is the reason I didn't bother. 
 Example: 
 
 
 I always thought that if you used prepared statements for your SQL then you could effortlessly change the database connector and switch to a different database, one that has the relevant JDBC connectors. 
 
 We are using the Pentaho Data Integration (ex-Kettle) with some success, although the Community Edition APIs are poorly documented.  It may require some hacking, but the abstraction and many features it provides may be worth it. 
 