*** java-connection-pooling-best-practices ***

 After getting fed up with c3p0's constant locking I'm turning to BoneCP for an alternative connection pool for my database. I have a server app that processes around 7,000 items per minute and needs to log those items into our MySQL database. I currently have 100 worker threads and have set up my pool like such: 
 
 Are those acceptable settings for such an app? I'm asking because after a minute or two into running I was getting BoneCP exceptions when trying to call   on the pool. Thanks for the help. 
 Here is the code I was using for the db calls in my worker threads, it can't fail on the   line. Am I not closing connections properly? 
 
 This is the error I was seeing: 
 
 
 
 Are those acceptable settings for such an app? I'm asking because after a minute or two into running I was getting boneCP exceptions when trying to call getConnection on the pool. thanks for the help. 
 
 If you have 100 workers, why do you limit the pool to 50 connections (number of partitions x max number of connections per partition i.e. 5 x 10 in your case)? 
 
 Am I not closing connections properly? 
 
 Looks ok (but maybe enable   as hinted to see what the warning is about exactly). Personally, I close all the resources I use, including statement and result sets. Just in case, here is the idiom I use: 
 
 You could group the above calls in a static method of a utility class.  
 Or you could use   from Commons DbUtils that already does this. 
 