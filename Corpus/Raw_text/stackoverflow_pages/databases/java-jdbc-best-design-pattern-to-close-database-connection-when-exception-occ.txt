*** java-jdbc-best-design-pattern-to-close-database-connection-when-exception-occ ***

 I'm new to Java (I'm using Java 6). I've been using the below design pattern for all my Java POJOs and servlets to access an Oracle 11G database via GlassFish 3.1.2 web server.  
 I'm getting an intermittent database error (ORA-12519) when all available processes (or sessions, not sure what the difference is) are consumed, leading me to think somehow the processes are not being released by the application. 
 Looking at the design pattern below, is there a better way to make sure that the JDBC connection to the database is released in the event of an exception? For example, should I also place the   code INSIDE the catch block? Or, is there a better design pattern? Thanks in advance for any comments/hints. 
 
 
 
 At this line    cannot  be null. The most popular pattern, up until Java 6 is: 
 
 With  **Java 7**
 this will become less cumbersome with its  try-with-resource  construct. The above code can change to the much shorter 
 
 
 Use a   block always to free up resources. 
 
 The finally block always executes when the try block exits. This ensures that the finally block is executed even if an unexpected exception occurs.  
 
 
 
 java se 7 supports the try-with-resources feature. that generates the finally for you.  http://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html 
 the finally block will close the resources alocated in the try. like you were using the keyword using in c# 
 however the user is using java se6 ... See the options of other users :) 
 IMPORTANT: Statements used should be closed too. 
 
 I prefer another more elegant way than: 
 
 You could use DbUtils.closeQuietly:  http://commons.apache.org/dbutils/apidocs/org/apache/commons/dbutils/DbUtils.html 
 