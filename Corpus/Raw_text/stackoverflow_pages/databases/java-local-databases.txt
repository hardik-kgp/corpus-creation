*** java-local-databases ***

 TL DR; Want some Java help with connecting to a truly local database ( no access to server tech ), or if you can whip up code, that will work. All it has to do is query the DB ( MS Access, although can be changed ), and output a JSON string. See EDIT2 for more specificity. 
 EDIT: Before anyone says JDBC; I looked through the tutorials ( started reading in depth ), but most of it seems to be geared towards server tech, which I have no access to. 
 EDIT2: Seems most the answers so far are requiring an installation of some kind which I unfortunately cannot do ( and failed to mention, so I apologize ). However, this is what is currently being used and I would like a solution similar for Java that would make it more cross-browser compatible as opposed to being HTA only (link:  https://launchpad.net/accessdb  ) 
 Okay, for the long version. I'm trying to make use of a local database to create a desktop style application for work ( and possibly make use of the knowledge for other projects ). The database I can create without a problem ( MS Access 2003, just happens to be quickly available ). Currently I'm using ActiveX scripting to work with the database in a HTML Application (*.HTA file works only with Internet Explorer), I would really like to make this more cross browser ( in the event the company EVER switches to an actual browser ) by using JAVA to access the database, then output the results in JSON to a local variable JavaScript can call and make use of. 
 Honestly would rather tutorial type information as I want to actually learn why this works so I can later modify it to suit my needs. I have Eclipse installed as well as JDK, and can right small programs in Java, so not completely brain dead ( but not far from :P ). I've been working with JavaScript so I can read quite a bit of Java code as it stands ( not the same syntax since they are not related, but the little I do know of Java I can translate back to JS without problem ). 
 Anyway, any assistance would be greatly appreciated. I can continue developing with ActiveX ( as I know that works on the system and I'm 99% sure they will continue using Internet Explorer, but, would like some flexibility ). 
 
 I am not sure I understood your requirements very well, however I did decipher some key points. What I am suggesting will let you deliver a complete working application in a  **single package**
 (say a JAR) that will not require much (if any)  **configuration or administration**
 of servers. 
 Some Required skills: 
 
 Java programming langauge 
 JDBC, SQL 
 JSP and Servlets (for the Web tier) 
 
 
 I'm trying to make use of a local
  database to create a desktop style
  application [...]
  I Want some Java help with connecting to
  a truly local database ( no access to
  server tech ) 
 
 **Datastore**

 JDBC can be used with any database that has a JDBC driver, which isn't necessarily a database in "network mode", it can be used with embedded databases as well. 
 Here is an example with Derby in  embedded mode :
 
 
 When an application accesses a Derby
  database using the Embedded Derby JDBC
  driver, the Derby engine does not run
  in a separate process, and there are
  no separate database processes to
  start up and shut down. Instead, the
  Derby database engine runs inside the
  same Java Virtual Machine (JVM) as the
  application. So, Derby becomes part of
  the application just like any other
  jar file that the application uses.
  Figure 1 depicts this embedded
  architecture. 
 
 **Here are some 100% Java and embeddable databases:**

 http://www.h2database.com/html/main.html 
 http://db.apache.org/derby/ 
 http://hsqldb.org/ 
 **Web tier**

 You can also embed a Web server like  Jetty . 
 
 Jetty has a slogan "Don't deploy your
  application in Jetty, deploy Jetty in
  your application". What this means is
  that as an alternative to bundling
  your application as a standard WAR to
  be deployed in Jetty, Jetty is
  designed to be a software component
  that can be instantiated and used in a
  Java program just like any POJO. 
 
 Embedding  Jetty . 
 Please note that there are other web servers that you can use this way. 
 
 Ok, so you need to serve JSON from a local database, right?  
 You don't need a server, you can serve web pages directly from your local machine ( you just have to point to localhost )  
 So, basically ( and I know this won't be complete, but I hope is a good start )  
 You have to:  
 
 Install a servlet container ( Tomcat or Jetty ), they are very easy to use. 
 Create a servlet or JSP page to display the data ( JSP are also easy )  
 Create a connection using JDBC to a local database such as Derby 
 Use a library to transform your data into JSON 
 
 Install tomcat 
 ( I will describe for UNIX, but it's the same for Windows) 
 Download it from here  and then unzip the file in some directory you like ( eg. /home/you/ or C:\Users\you\ )  
 Open a terminal and go to the tomcat   directory and type    that will start tomcat, you need to have Java installed on your system 
 Open your browser in    
 It should look like this: 
 
 
 **Create a JSP file**
  
 Next, go to the tomcat    directory,  it should contain these folders: 
 
 Create a new one, for instance   or whatever and inside create a file   with the following: 
 
 And then open in your browser:  
 Should look like: 
 
 
 **Create a JDBC program**

 Next, in your webapp   create the directory:   and save there the derby JDBC driver, you can get it from  here 
 Modify your Hello.jsp file to create a sample table like this: 
 
 And execute your jsp again by going to  
 If you execute it twice the system will tell you the table already exists: 
 
 
 That's ok, we have created the table already. 
 **Use a library to output JSON**

 Shudown tomcat, but pressing contrl-c  
 Download and copy to your WEB-INF/lib directory the json-simple jar. You can get it from  here 
 Start tomcat again  
 Comment the creation code in the JSP and replace it for a SQL query like this: 
 
 Notice we are using a throw import, and at the end, we change the invocation of the method to put the result in a javascript variable    
 When run, the JSP page  would look like this ( you'll have to right click to see the HTML source code so see the   tag): 
 
 
 I hope you find this useful. I tried to make it extremely simple for you. 
 **IMPORTANT**
 The sample above is full of bad practices, don't  code like that ( for instance, creating web apps directly on tomcat webapps folder, or executing SQL directly from JSP page ( not to mention , not closing the resources etc. )  
 The main idea was to give you enough information to get started.  
 There are ways to integrate this with eclipse, and to use a SQL visor such as SquirrelSQL client to manipulate the data.  
 This should be simple enough, I actually downloaded the files and create the test while writing this answer, so it should work.  
 
 As a follow up to Oscar... 
 Here's a simple "Type in the SQL" JSP page, using JSTL (Java Standard Tag Library) tags. 
 All you need to make this work is toss in the derby.jar library. 
 Download tomcat from Apache. 
 Download derby from Apache 
 
 
 
 Take the following and put it in index.jsp: 
 
 
 take the following and put it in web.xml 
 
 
 copy the   in to  
 You should now have 3 files: 
 
 $TOMCAT_HOME/webapps/yourapp/index.jsp
  $TOMCAT_HOME/webapps/yourapp/WEB-INF/web.xml
  $TOMCAT_HOME/webapps/yourapp/WEB-INF/lib/derby.jar 
 
 Now fire up Tomcat, and point your browser at  
 And you'll get this little box to type SQL in to. 
 Derby will create the DB for you automagically. 
 With the JSTL and SQL tags you can do all you want from straight JSP. 
 Is it "best practice" to do everything in JSP? No. 
 Does it work? Yes. 
 Is it practical? Yes. 
 You can always change it later. 
 
 You might want to take a look at  Apache Derby . Recent JDKs include it as JavaDB. On Windows, you will find it in ProgramFiles/Sun. 
 