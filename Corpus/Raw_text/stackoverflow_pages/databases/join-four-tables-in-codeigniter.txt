*** join-four-tables-in-codeigniter ***

 I have four tables Like below 
 Listings: 
 
 **changed my list_id from a random string to UUID.**

 from this comment on php.net 
 see this stackoverflow question 
 **In listings table list_id is primary key, i know using autoincreament is best but my requirement is like this. and s.no is primary key for rest of tables.**

 I need to generate a random key from PHP side because to set list_id in session and to avoid another query to set list_id in session.
 Likes: 
 
 comments: 
 
 Views: 
 
 I am trying to get a list of user id user100 from listings table 
 and need to get count of views,like,comments for the list id of the user from various tables i have. 
 i tried using this query from codeigniter 
 
 I am getting wrong views and likes and comments count. 
 is this database design good or i need to change anything. i have less awarness in using joins please help me. 
 **EDIT:**

 I tried this query from answers below 
 
 I am getting what i want but this way of querying fails(return null) if i don't have any comments or views or likes. 
 
 If   is not unique to  ,   or   you will end up with a cross product when doing multiple joins, which will inflate your counts. Because youâ€™re only querying one user_id, subqueries might be the best way to go. 
 Remember to set the second parameter to   to   so codeigniter doesn't try to escape the subqueries.  
 
 
 Considering your structure your each table should have a one field defined as a   and the associations of listing table (likes,views and comments) should relate to that key as a   i expect   field to be defined as primary key for each table ,so in your case   column in likes views and comments will have reference of listing table with with auto generated list id that is 1,2,3 so on then the   column in your listing table is not needed any more , same case will apply for your users table and its auto generated user ids now the query part you are using multiple joins so that there will be  **cross product  as mentioned by @FuzzyTree**
 and doing aggregation on the result set will give you wrong results more than expected so that you need a distinct count thats why i have defined primary keys for tables so instead of counting   count distinct   same for like and comments 
 
 Using active record you can write your query something like  
 
 According to your provided data set list 1 has 3 likes,3 views and 1 comment you can find attached demo of above query and also you can find update table definitions with  foreign keys and cascading  (will help to maintain relations) 
 
 **Edit for posts with 0 likes/views and comments**

 using inner join posts with 0 likes/views and comments will not be returned for this you need left join you can see updated demo and using active record you can build query something like below, define join type (left/inner/right) in   function's 3rd parameter 
 
 
 
 If you take a closer look at the "wrong" values, and took a look at the individual rows that are contributing to the inflated values, you'll find that you are getting the same rows counted multiple times. (With an inner join, if one of the tables has zero matching rows, that row won't be returned.) 
 You've got a classic cross product. What's happening with the JOIN operation, every matching row from   is getting "matched" to every matching row from  .  If there's three matching rows in  , and three matching rows in  , you're going to get 3x3 rows returned. 
 
 Your database design looks okay. 
 It's the generated SQL query that is the problem. 
 To fix the query, either 
 **either avoid generating a cross product**
 or  **count distinct rows***

 To avoid a cross product, don't   to both   and   tables. As an alternative, you could avoid the join operations and instead use correlated subqueries in the SELECT list... 
 
 or, if you do use JOIN operation and generate a cross product, then get a count of unique rows by using an expression like  , so you don't count the same row more than once. 
 
 To allow rows with zero counts to be returned, you'd want to use outer joins:  
 
 
 Once you understand what MySQL is doing with the SELECT statement your code is currently generating, it's just a matter of figuring out a SQL statement that will return the result you want. 
 Once you get a SQL statement that returns the expected results, then it's just a matter of getting CodeIgniter to run SQL statement. 
 
 
 
 kindly change your query to get correct count as bellow. 
 
 
 If you are afraid of too much joins, time you tried out the SQL IN statement. Do something like; 
 
 