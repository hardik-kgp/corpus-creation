*** jpa-foreign-key-that-is-also-a-primary-key-mapping ***

 I have been trying to solve this for whole day but no luck! Also i tried to read most of the tutorials on the net but as you all know they all are full of useless examples that do not reflect what you need in the real world. 
 So here is my situation: 
 The database: 
 table:  **vehicles**
(vehicleId, brand, model, devYear, regNumber) <-- vehicleId is the PrimaryKey 
 table:  **extras**
(vehicleId, allowSmoke, allowFood, allowDrinks, airConditioner) <-- vehicleId is a PK and a FK. 
 The point is that if i have a class  **Vehicle**
 and a class  **TravelExtras**
 which are mapped to the database i want the  **Vehicle**
 class to have an attribute  **TravelExtras**
 travelExtras and get and set methods. 
 Unfortunatelly no matter what i tried when i try to persist the object in the databse i get various errors. 
 Here is an illustration: 
 
 Any one knows what kind of annotations to use for this One to one case ? 
 
 The Java Persistence wikibook has a section called  Primary Keys through OneToOne and ManyToOne Relationships  which seems to indicate that what you want is possible. 
 If I'm reading it right, for your case, it would look something like: 
 
 Note that one of your entities will need to make sure it has the same id as the other, which is accomplished in the example by the TravelExtras constructor requiring the Vehicle it is bound to. 
 
 Why don't you use an   object? When using an embedded object, you get 
the logical separation you desire in your code and keep your database compliant with Entity-Relational Normalization rules.  
 It's weird to think on a One-to-One relationship, because even though JPA/Hibernate allows it, all data should be stored in the same table, making you model simpler, while also simplifying queries and increasing database performance by removing the need for a Join operation. 
 When using Embedded objects you don't have to worry about mapping IDs and bizarre relations, since your ORM is capable of understanding that your just making a code separation, instead of demanding an actual relation of One-to-One between tables. 
 
 . 
 
 
 You can map your classes for example with Netbeans. It will generate annotations. The problem could be your dao layer. You have to persist objects in correct way. For example can't save travelExtra without Vehicle. Also be aware of owning side. 
 