*** laravel-belongstomany-relationship-defining-local-key-on-both-tables ***

 So the belongsToMany relationship is a many-to-many relationship so a pivot table is required 
 Example we have a   table and a   table and a   pivot table. 
 The pivot table has two columns,  ,  ...   referring to the   in roles table. 
 So to do this we write the following in the   eloquent model:  
 
 Now this looks for an   field in   table and joins it with the   field in the   table. 
 Issue is I want to specify a different field, other than   to join on in the   table. For example I have   in the users table that I want to use as the   to join with  
 From laravel's documentation, it is not clear on how to do this. In other relationships like   and   we can specify   and   but not in here for some reason. 
 I want the   on the users table to be   instead of just  . 
 How can I do this? 
 
 Update:
as of  **Laravel 5.5**
 onwards it is possible with generic relation method, as mentioned by @cyberfly below: 
 
 
 
 for reference, previous method: 
 I assume   is the primary key on your   model, so there is no way to do this with Eloquent methods, because   uses   to get that key. 
 So you need to create custom relation extending   that will do what you need. 
 A quick guess you could try: (not tested, but won't work with eager loading for sure) 
 
 
 On Laravel 5.5 and above,  
 
 From the source code: 
 
 
 This is a recently added feature. I had to upgrade to 4.1 because I was also looking for this. 
 From the  API documentation : 
 
 The   and   parameters were added in 4.1. Using the   and   parameters allows you to specify the keys on both sides of the relation. 
 
 The best way is set the primary key. 
 
 
 **belongsToMany**
 allows to define the name of the fields that are going to store che keys in the pivot table  **but**
 the method insert always the  **primary key**
 values into these fields. 
 You have to: 
 
 define in the method  **belongsToMany**
 the table and the columns; 
 then using    protected  **$primaryKey**
 = 'local_key'; you can choose which value store. 
 
 
 I recently went through the same problem where I needed to have an associated table that used ID's to link two tables together that were not Primary Keys.  Basically what I did was create a copy of my model that models the pivot table and set the Primary Key to the value that I wanted it to use.  I tried creating a model instance, settings the primary key and then passing that to the relation but Laravel was not respecting the primary key I had set ( using the ->setPrimaryKey() method above ). 
 Making a copy of the model and setting the primary key feels a little bit 'hackish' but in the end it works as it should and since Pivot table models are generally very small I don't see it causing any problems in the future. 
 Would love to see a third key option available in the next release of Laravel that lets you get more specific with your linking. 
 