*** laravel-migrations-seeding-for-production-data ***

 My application needs a pre registered data set to work. So i need to insert them in the database when i set up the application. 
 Laravel  propose two mechanisms : 
 
 Database migrations  :  "They allow a team to modify the database schema and stay up to date on the current schema state." 
 Database seeding  :  "Laravel also includes a simple way to seed your database with test data using seed classes." 
 
 When I read this description, none of these solutions seems to be adapted. 
 A similar question has been  asked on stackoverflow  and  answered . The answer proposes to use the a database seeder to populate the database by detecting the current environment : 
 
 Of course, this solution works. But i am not sure that it is the right way to do this, because by inserting data using seeders you are losing all the advantages provided by the migration mechanism (database upgrate, rollback...) 
 I want to know what is the best practice in this case. 
 
 Laravel development is about freedom. So, if you need to seed your production database and think DatabaseSeeder is the best place to do so, why not? 
 Okay, seeder is mainly to be used with test data, but you'll see some folks using it as you are. 
 I see this important kind of seed as part of my migration, since this is something that cannot be out of my database tables and   is ran everytime I deploy a new version of my application, so I just do  
 
 And create my seedind stuff in it: 
 
 
 I've often found myself wondering what the right answer to this is. Personally, I'd steer clear of using seeding to populate required rows in the database as you'll have to put a load of conditional logic in to ensure that you don't attempt to populate something that's already there. (Deleting and recreating the data is  **very**
 inadvisable as you could end up with key mismatches and if you're using cascading deletes you may accidentally wipe a load of your database my mistake! ;-) 
 I put the 'seeding' of rows into the migration script as the chances are, the data will need to be there as part of the rollout process. 
 It's worth noting that you should use the DB class instead of Eloquent models to populate this data as your class structure could change over time which will then prevent you from re-creating the database from scratch (without rewriting history and changing you migration files, which I'm sure is a bad thing.) 
 I'd tend to go with something like this: 
 
 This then allows me to 'seed' the town table easily when I first create it, and wont interfere with any additions made to it at run time. 
 
 This is what I use in production. 
 Since I run migration on each deployment 
 
 I create a seeder (just to keep seeding data out of migration for easy access later) and then run that seeder along with the migration 
 
 I do not add this seed call to seeds/DatabaseSeeder.php to avoid running it twice on a new installation. 
 