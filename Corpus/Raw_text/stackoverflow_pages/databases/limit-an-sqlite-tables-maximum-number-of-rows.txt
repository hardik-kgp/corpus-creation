*** limit-an-sqlite-tables-maximum-number-of-rows ***

 I am looking to implement a sort of 'activity log' table where actions a user does are stored in a sqlite table and then presented to the user so that they can see the latest activity they have done. However, naturally, I don't feel it is necessary to keep every single bit of history, so I am wondering if there is a way to configure the table to start pruning older rows once a maximum set limit is reached. 
 For example, if the limit is 100, and that's how many rows there currently are in the table, when another action is inserted, the oldest row is automatically removed so that there are always a maximum of 100 rows. Is there a way to configure the sqlite table to do this? Or would I have to run a cron job? 
 **Clarification Edit**
: At any given moment, I would like to display the last 100 (for example) actions/events (rows) of the table. 
 
 Another solution is to precreate 100 rows and instead of   use   to update the oldest row. 
Assuming that the table has a   field, the query 
 
 can do the job. 
 **Edit:**
 display the last 100  entries 
 
 **Update**
: here is a way to create 130 "dummy" rows by using join operation: 
 
 
 You could create a  trigger  that fires on INSERT, but a better way to approach this, might be to simply have a scheduled job that runs periodically (say once a week) and deletes records from the table. 
 
 There are a couple of ways to  constrain  a table to 100 rows. (For brevity, 5 rows in the code below.) Tested in SQLite version 3.7.9. 
 All this code relies on a kind of quirk in the way SQLite handles data type declarations. (It seems quirky to me, anyway.) SQLite lets you insert nonsense like 3.14159 and 'wibble' into a bare integer column. But it lets you insert only integers into a column declared   or  .  
 **FOREIGN KEY constraint**

 Use a foreign key constraint to a table of valid id numbers to guarantee that the id numbers are in the range you want. Foreign key constraints work even on autoincrementing columns. 
 
 Sixth insert fails with "Error: foreign key constraint failed". 
 I don't  think  Using an autoincrement is entirely safe. On other platforms, a rollback  would leave a gap in the sequence.  If you don't use an autoincrement, you can safely insert rows by picking the id number out of "row_numbers". 
 
 **CHECK() constraint**

 The primary key constraint below guarantees the id numbers will be integers. The CHECK() constraint guarantees the integers will be in the right range. Your application might still have to deal with gaps caused by rollbacks. 
 
 