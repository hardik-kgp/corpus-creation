*** list-database-tables-with-sqlalchemy ***

 I want to implement a function that gives information about all the tables (and their column names) that are present in a database (not only those created with SQLAlchemy). While reading the documentation it seems to me that this is done via reflection but I didn't manage to get something working. Any suggestions or examples on how to do this? 
 
 start with an engine: 
 
 quick path to all table /column names, use an inspector: 
 
 docs:  http://docs.sqlalchemy.org/en/rel_0_9/core/reflection.html?highlight=inspector#fine-grained-reflection-with-inspector 
 alternatively, use MetaData / Tables: 
 
 docs:  http://docs.sqlalchemy.org/en/rel_0_9/core/reflection.html#reflecting-all-tables-at-once 
 
 Hey I created a small module that helps easily reflecting all tables in a database you connect to with SQLAlchemy, give it a look:  EZAlchemy 
 
 
 While  reflection/inspection  is useful, I had trouble getting the data out of the database. I found  sqlsoup  to be much more user-friendly. You create the engine using sqlalchemy and pass that engine to sqlsoup.SQlSoup. ie: 
 
 If you're familiar with sqlalchemy then you're familiar with sqlsoup. I've used this to extract data from a wordpress database.  
 
 First set up the sqlalchemy engine. 
 
 Like others have mentioned, you can use the inspect method to get the table names. 
 But in my case, the list of tables returned by the inspect method was incomplete. 
 So, I found out another way to find table names by using pure SQL queries in sqlalchemy. 
 
 Just for sake of completeness of answer, here's the code to fetch table names by inspect method (if it works good in your case). 
 
 