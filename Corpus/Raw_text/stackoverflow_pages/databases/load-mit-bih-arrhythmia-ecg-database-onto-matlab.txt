*** load-mit-bih-arrhythmia-ecg-database-onto-matlab ***

 I am working on ECG signal processing using neural network which involves pattern recognition. 
As I need to collect all the data from Matlab to use it as test signal, I am finding it difficult to load it on to the Matlab.
I am using MIT Arrhythmia database  here . 
 The signal needs to be indexed and stored as data structure in Matlab compatible format.
Presently, the signal is in   and   format. 
 How can you load MIT-BIH Arrhythmia database onto Matlab? 
 
 You can use physionet  ATM  to get  .mat  files which are easier to work with. 
 In the  input  part select the desired leads, length, database and sample. 
 In the  toolbox  select  : 
   
 Then download the '.mat' file, 
   
 In order to open the file in MATLAB, here is a sample code: 
 
 and you will get, 
 
 However, If you were to read  annotation  files for  arrhythmia  or  QRS complexes  that would be another problem.  
 **Edit**

 The  base  and  gain  come from the  info  file (second picture).
This file gives you various information regarding the ECG signal. 
 
 In the last sentence it says:  To convert from raw units to the physical units shown above, subtract 'base' and divide by 'gain'. 
 
 You need the program   (MATLab script) from  this website . The program can be found  here .   is probably the only program you will need to read the ecg signals. I remember having used this program and database myself not too long ago. 
 
 So I read this answer 3 months ago and removed the base and gain. It turns out , i completely shifted my R-peaks in various directions, screwing up all my results. While I am not sure if doing this is necessary in matlab or not, DO NOT DO THIS if you are not preprocessing your signal in matlab. I was preprocessing my signal in python, and all I did to normalizae it was  
 
 and used butterworth filters to remove artifacts  (range 0.5hz-45hz) 
 **CORRECTION**

 The cutoff i selected is  0.5 to 45  not 5-15 as I previously reported. This cutoff preserves the QRS for various arrhythmias without adding too much noise 
 
 
 There is a tutorial for using matlab to read the data.  tutorial for matlab user 
 
 install "The WFDB Toolbox for Matlab" from the link above. Add the folder of the toolbox to the path in matlab. 
 Download the ECG signal. Be sure to download   together for the signal you are to deal with. 
 Command in matlab is as follows :
 
Note: for signal '101', its name is '101'. And you can check the detail information about rdsamp and rdann from the tutorial.  
 
 
 just use it 
 
 
 Use  ATM  to extract  .mat  as described by  Kamtal  (now known Rashid). 
However, note that to see the  .info  file in some cases, you need to click the arrow 
 
 After I pushed this forward to developers  here , we got improvements in the documentation  here  in Section 4.  
 
 If they are all integers in the range [-2^N, 2^N-1 ] or [ 0, 2^N ], they are probably digital. Compare the values to see if they are in the expected physiological range of the signal you are analyzing. For example, if the header states that the signal is an ECG stored in milivolts, which typically has an amplitude of about 2mV, a signal of integers ranging from -32000 to 32000 probably isn't giving you the physical ECG in milivolts... 
 If they are not integers then they are physical. Once again you can quickly compare the values to see if they are in the expected physiological range of the signal you are analyzing. 
 
 **0-9-10 wfdb - physical units**

 
 We say that signals are in 'physical units' when the values are used to represent the actual real life values as closely as possible, although obviously everything on the computer is digital and discrete rather than analogue and continuous. This includes our precious 64 bit double precision floating point values, but this is as close as we can get and already very close to the actual physical values, so we refer to them as 'physical'. 
 - 
 For example, if a 15 bit signal is collected via a capturing device, Physionet will likely store it as a 16 bit signal. Each 16 bit block stores an integer value between -2^15 and 2^15-1, and using the gain and offset stated in the header for each channel, the original physical signal can be mapped out for processing.  
 
 The default units are now physical units where base and gain should be added stated in the header for each channel, so the physical signal can be mapped out for processing.  
 
 ,   use also physical units. 
 ,   use then again analog/digital units where you need to remove base and gain. 
If you use   or  , you need to adjust for base and gain where   and  
 
 See the .info file below where you can get the   and  . There is also the unit   which suggests the values should be near   after the base-gain operations.  
 **<0-9-9 wfdb - analog/digital units so base and gain by default; now only **
** for analog units**

 After selection ATM, you should be able to see the list where you can select  .info  file after the export as described in Kamtal's answer. 
The  .info  file instructs to remove so-called  base  and  gain  from the data before use 
 
 **Comparing wrong answers here! [Deprecated]**

 Kamtal (now called Rashid) answer is about the old wfdb system which used digital units without removal of base and gain 
 
 and you get the difference between my method and his method 
 
 