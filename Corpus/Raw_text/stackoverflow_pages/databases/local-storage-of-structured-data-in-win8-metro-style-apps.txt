*** local-storage-of-structured-data-in-win8-metro-style-apps ***

 
 
 
 
 
 
 
 
                            As it currently stands, this question is not a good fit for our Q&A format. We expect answers to be supported by facts, references,   or expertise, but this question will likely solicit debate, arguments, polling, or extended discussion. If you feel that this question   can be improved and possibly reopened,  visit the help center  for guidance.
                            
                         
 
 
 Closed  7 years ago . 
 
 
 In a desktop .NET application, the standard option for implementing a  local  relational database is to use SQL Server Compact Edition, and then of course there is the possibility to use SQLite and other third-party engines. 
 What are the options available to a .NET Metro-style application? SQL CE seems to be unavailable - any replacement? In fact, the entire   namespace seems to be gone - so no LINQ to SQL or Entity Framework, either? 
 What about HTML5 IndexedDB that seems to be available to Metro HTML/JS apps - can that be used from .NET somehow?  
 
 Apparently, the  Extensible Storage Engine  Win32 API (aka "JET Blue") is still available in Metro apps. C++ ones can use it directly via  . .NET apps would have to use P/Invoke. This does not give SQL or any other sort of high-level relational querying constructs, but it does provide for key lookup, transactions, multiple indices per table, and multi-field indices. 
 
 Let's be clear: SQL CE exists in Windows 8. It exists not only in Program Files but in Windows\System32 to seem even  **more embedded**
 than before. Windows7 doesn't have sqlcecompact40.dll in system32 so this is definitely new. System.Data and System.Data.Linq both live in C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework.NETFramework\v4.5. 
 You can add references to those dlls manually but getting the app to compile is hit or miss. It seems that if you first open your project and  do nothing , you can add a reference to those dlls anywhere and compile the app. If you remove the dlls and try to add them back you're hit with a "A reference to '<4.5 framework directory>' could not be added. If by some chance you can't add them via Visual Studio you can easily just add the HintPath manually. 
 My app now compiles but I also ran into an issue where linking the AppX wasn't working correctly and it gave a cryptic "Payload cannot contain 2 of the same dll" type messages. Like it was trying to include both 32 bit (the one I linked) and 64bit at the last minute. It included DLLs I wasn't touching manually like System.Data.OracleClient or System.Transactions so it was definitely some artifact from the build process I've yet to see again. 
 The main issue I'm dealing with right now is how to generate a proper connection string since it won't initialize properly without one. SQL CE is likely still looking for hardcoded C:\ references so the ApplicationData samples may not work as desired. I may try to make SQL CE 4 databases in Win7, transfer to Win8 and simply reference them locally but I'm kind of in the same boat there too.  **This | |**
 close! 
 Please feel free to comment regarding any issues you run into and I'm definitely down for some offline collaboration if anyone would like to pool resources. This is definitely a thick forest of beasts and going it alone is proving a lot more challenging. 
 