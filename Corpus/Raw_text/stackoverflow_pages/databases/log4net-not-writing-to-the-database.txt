*** log4net-not-writing-to-the-database ***

 I've checked the connection string (I got it from the server explorer). 
 I've checked the commandText in log4net config. 
 I've checked the database permissions (integrated security is fine and works outside of the log4net class). 
 I've checked the repository's configured property (it is configured, it finds the config file fine). 
 I've also checked that the fields defined in the config file match the attributes (field size etc.) of the table in the database. 
 Any ideas? 
 When I'm debugging it seems to be hitting all the right methods at all the right times, with no exceptions raised. 
 
 It's writing to neither appender. 
 
 Right, after hours of pulling my hair out - I've cracked it. 
 This line: 
 
 Needed putting in prior to any logging (well, as early as possible in the app). That's it. That was all it took. This is one of those problems were I'm extremely relieved but frustrated at the same time. 
 
 I would recommend turning on Log4Net debugging:  
 
 That may point you in the right direction if there's an error that's occurring behind the scenes.  The output will be directed to the console output in the IDE or in the command line. 
 
 
 Check if log4net.dll is placed in the same folder as your application.  
 Try to enable log4net self-logging, maybe it'll help to find out: 
 
 
 See also the  official log4net FAQ . 
 
 I ran into a similar issue yesterday, Log4Net was just not writing to the database. I copied the configuration from another existing appender that successfully writes logs to the database. My solution was to run SQL Server Profiler to try and catch what was happening. Profiler showed that the INSERT statements were being sent by Log4Net, but it was failing on the SQL Server side. Manually running the INSERT statement in SQL Server Management Studio showed me exactly what was wrong with it, in my case, it was inserting NULL into a column that didn't accept NULL. 
 
 per the  ADONetAppender  config example: 
 
 This uses the ADO.NET parameterized query format, so you need to use that syntax.  Additionally, you may not want to use integrated security for the db connection (esp. if you are running a web site or a service).  For your file appender, I recommend a fully qualified path, and make sure it is writeable by the logger. 
 I assume you have already created the table in the specified database? 
 **NOTE**
 I recommend setting the  trace appender  in Debug mode too, to make sure you are actually logging stuff. 
 
 Add this line in the AssemblyInfo.cs file 
 
 As the official configuration manual states "The log4net configuration can be configured using assembly-level attributes rather than specified programmatically", which I found as a more clear approach. Some people might find my answer as a more straightforward. 
 Source:  https://logging.apache.org/log4net/release/manual/configuration.html 
 
 for sql server connectivity I'm using my live account to login to azure and sql server and due to that I had to change integrated security to "SSPI" instead of "true" did the trick 
 only found out it was the con string by adding this  
 
 
 