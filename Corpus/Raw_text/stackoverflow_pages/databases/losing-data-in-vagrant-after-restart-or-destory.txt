*** losing-data-in-vagrant-after-restart-or-destory ***

 I am new to Vagrant and have some couple of questions. 
 Sometimes when I restart my computer or destroy my vagrant the whole Mysql database is wiped out.
I tried to find some answers about this on stackoverflow but didn't had any luck so far. 
 So my question are: 
 1) Where does the data get stored? 
 2) Why do I sometimes lose data? 
 3) If so how do I keep the data after restart of destroy? 
 
 In my opinion, the answers to your questions depend on how you set up the project. On a project that I work on our set up is the following (simplified): 
 
 database server (cloud hosted) 
 origin server (cloud hosted) 
 vagrant box for local development 
 git repository 
 ... 
 
 On   each developer gets a copy of the environment which is a ubuntu server. All application code (website) is mounted into the virtual machine from your local file system. We keep this application in the git repository. Then we keep a few scripts inside the vagrant machine that synchronize the database from the production (or demo server) - basically it downloads the database dump file and places it into your virtual machine.  
 In that case, if you do   and then   you need to run the database sync script to get the databse back. Our developers (mostly) don't change the content of the database so we don't need to keep the local changes.  
 I hope that this helps a bit.  
 
 The top answer is pretty good, I just wanted to add to your third question. 
 To keep your changes, you should  **keep the database on your host machine**
, and have vagrant connect to it to use it. This way you won't lose the database on  **vagrant destroy**
.  
 You're probably already using NFS to sync the folders with the code, so this is just a step in a similar direction. 
 
 Another solution for question 3 that I recently used is to install the  vagrant-triggers  plugin: 
 
 Then add some code to the   to run a script on   and  : 
 
 Then create the   script: 
 
 My   folder is not versioned and won't disappear if my vagrant box is destroyed. This setup allows me to have recent backups in my local environment that I can restore any time I want. 
 This is less useful when working with large databases, though. In those situations I prefer Nick Zinger's answer of keeping the database on the host machine and connecting to it from within vagrant. 
 