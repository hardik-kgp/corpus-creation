*** map-string-column-in-entity-framework-to-enum ***

 Is there a way to map a string column to an enum in an Entity Model? 
 I have done this in Hibernate, but can't figure it out in EMF. 
 
 It is ugly, but for mapping enums to strings I found something like this: 
 
 OrderStatus is the enumerator type, Status is the enumerator and StatusString is the string version of it. 
 
 Probably a nicer version. 
 OrderStateIdentifier field is used for both JSON serialization and database field, 
while OrderState is only used in the code for convenience. 
 
 
 You can do either: 
 Decorate the Enum property in your class as a text column 
 
 OR 
 in your   class, override the   and add: 
 
 
 Acutally I think there is another solution to this. 
 What we did in our Project recently was using Extension Methods. 
 I wrote two of them, one for the Enum and one for the Entity, but here is the Example: 
 
 ... the enum itself, and now the extension methods containing static class:  
 
 ... the extension method for the entity type, and a convenience method for shorter typing: 
 
 ... and finally usage: 
 
 Now, you just need to be "using Foo.Enums;" and you can call the methods on the entity as well as on the enum. And even better, in some sort of wrappers for your entities, you could also do seamless marshalling between defferent types representing the same thing in big projects.  
 The only thing worth noting about this is that you sometimes have to execute the extension method before you hand your Linq expression to Linq. The problem here is that Linq can't execute the extension method in its own context... 
 Maybe just an alternative, but we've done it like that because it gives you great flexibility on how to get things for entities. You could easily write an extension to receive an Accounts actual Products in ShoppingCart... 
 Greetings,
Kjellski 
 
 An alternative is to use a static class with string const fields instead of enums. 
 For example: 
 
 For added validation on the database side you can add a check constraint to verify that the column is the expected value (you can do this when mapping to an enum as well, but since the property is just a string this helps ensure the consumer of your api set the value properly). 
 
 
 It's on the roadmap for EF7:
 https://github.com/aspnet/EntityFramework/issues/242 
 You may want to vote for it:  http://data.uservoice.com/forums/72025-entity-framework-feature-suggestions/suggestions/2639292-simple-type-mapping-or-mapped-type-conversion-sup 
 
 If you want to map the enum value to another correspondent string (ex. abbreviation) you can use this approach: 
 
 
 I had the same problem. I've come up with a solution, but I'm not completely happy with it.  
 My   class has a   enum, and I use data annotations to map the string to the database and ignore the enum. 
 
 here is the extension method to get the correct enum from the string. 
 
 I wrote a blog post about this -  http://nodogmablog.bryanhogan.net/2014/11/saving-enums-as-strings-with-entity-framework/ 
 