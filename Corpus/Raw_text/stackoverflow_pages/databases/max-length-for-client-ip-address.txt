*** max-length-for-client-ip-address ***

 
 
 
 
 
 This question already has answers here :
                            
                         
 
 
 Closed  6 years ago . 
 
 
 
 **Possible Duplicate:**

 Maximum length of the textual representation of an IPv6 address?   
 
 What would you recommend as the maximum size for a database column storing client ip addresses?  I have it set to 16 right now, but could I get an ip address that is longer than that with IPv6, etc? 
 
 For IPv4, you  could  get away with storing the 4 raw bytes of the IP address (each of the numbers between the periods in an IP address are 0-255, i.e., one byte).  But then you would have to translate going in and out of the DB and that's messy. 
 IPv6 addresses are 128 bits (as opposed to 32 bits of IPv4 addresses).  They are usually written as 8 groups of 4 hex digits separated by colons:  .  39 characters is appropriate to store IPv6 addresses in this format. 
 Edit: However, there is a caveat, see @Deepak's answer for details about IPv4-mapped IPv6 addresses. (The correct maximum IPv6 string length is  **45 characters**
.) 
 
 **There's a caveat with the general 39 character IPv6 structure.**
  For IPv4 mapped IPv6 addresses, the string can be longer (than 39 characters).  An example to show this: 
 IPv6 (39 characters) :   
 
 IPv4-mapped IPv6 (45 characters) :   
 
 Note: the last 32-bits (that correspond to IPv4 address) can need up to 15 characters (as IPv4 uses 4 groups of 1 byte and is formatted as 4 decimal numbers in the range 0-255 separated by dots (the   character), so the maximum is  ). 
 **The correct maximum IPv6 string length, therefore, is 45.**

 This was actually a quiz question in an IPv6 training I attended.  (We all answered 39!) 
 
 If you want to handle IPV6 in standard notation there are 8 groups of 4 hex digits: 
 
 32 hex digits + 7 separators = 39 characters. 
 CAUTION:  If you also want to hold IPV4 addresses mapped as IPV6 addresses,  use  **45**
 characters as @Deepak suggests .  
 
 Take it from someone who has tried it all three ways... just use a varchar(39) 
 The slightly less efficient storage far outweighs any benefit of having to convert it on insert/update and format it when showing it anywhere. 
 
 As described in the  IPv6 Wikipedia  article, 
 
 IPv6 addresses are normally written as
  eight groups of four hexadecimal
  digits, where each group is separated
  by a colon (:) 
 
 A typical IPv6 address: 
 
 This is 39 characters long.  IPv6 addresses are 128 bits long, so you could conceivably use a binary(16) column, but I think I'd stick with an alphanumeric representation. 
 
 IPv4 uses 32 bits, in the form of: 
 
 I suppose it depends on your datatype, whether you're just storing as a string with a CHAR type or if you're using a numerical type. 
 IPv6 uses 128 bits.  You won't have IPs longer than that unless you're including other information with them. 
 IPv6 is grouped into sets of 4 hex digits seperated by colons, like (from wikipedia): 
 
 You're safe storing it as a 39-character long string, should you wish to do that.  There are other shorthand ways to write addresses as well though.  Sets of zeros can be truncated to a single 0, or sets of zeroes can be hidden completely by a double colon. 
 
 If you are just storing it for reference, you can store it as a string, but if you want to do a lookup, for example, to see if the IP address is in some table, you need a "canonical representation."  Converting the entire thing to a (large) number is the right thing to do.  IPv4 addresses can be stored as a long int (32 bits) but you need a 128 bit number to store an IPv6 address. 
 For example, all these strings are really the same IP address: 127.0.0.1, 127.000.000.001, ::1, 0:0:0:0:0:0:0:1 
 
 People are talking about characters when one can compress an IP address into raw data. 
 So in principle, since we only use IPv4 (32bit) or IPv6 (128bit), that means you need at most 128 bits of space, or 128/8 =  **16 bytes**
! 
 Which is much less than the suggested 39 bytes (assuming charset is ascii). 
 That said, you will have to decode and encode the IP address into/from the raw data, which in itself is a trivial thing to do (I've done it before, see PHP's   for 32-bit IPs). 
 **Edit:**
   (and its opposite,  ) does what you need, and works with both address types. But beware, on Windows it's available since PHP 5.3. 
 