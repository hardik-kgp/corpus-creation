*** meteor-how-to-perform-database-migrations ***

 How do you perform database migrations with Meteor?  With Ruby on Rails there is ActiveRecord::Migration.  Is there an equivalent mechanism in Meteor? 
 For example, I make an app with some user data.  I'm storing the data in Mongo using a JSON format.  The app changes, and the JSON database schema needs to change.  I can write a migration method to change the schema, however, I only want this to run if the server database is out of date. 
 
 There's nothing built in for this.  What I've done myself for now is similar to how Rails works, but as part of startup instead of a separate task.  First create a   called Migrations, and then for each discrete migration, create a function under the   subdirectory that runs on startup.  It should only run the migration if it hasn't run before, and it should flag the migration in the Migrations collection once its done. 
 
 You could extend this technique to support down migrations (look for the existence of a given migration and reverse it), enforce a sort order on the migrations, and split each migration into a separate file if you wanted. 
 It'd be interesting to think about a smart package for automating this. 
 
 As Aram pointed already in the comment, p ercolate:migrations  package gives you what you need. Sample 
 
 
 I created a smart package for this use case. 
See  https://atmosphere.meteor.com/package/migrations 
 