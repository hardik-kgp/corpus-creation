*** microservices-with-shared-database-using-multiple-orms ***

 I'm learning about microservices and I'm gonna build a project with a microservices architecture. 
 The thing is, one of my team mates want to use one database for all services, sharing all tables so "data doesn't get repeated", each service would be built with different frameworks and languages like django and rails which use very different ORM standards. 
 What would be the correct approach? Since I think working with one database would involve a lot of "hacking" the ORMs in order to make them work correctly. 
 
 You are not likely to benefit from a Microservices architecture if all the services share the same database tables. This is because you are effectively tightly coupling the services. If a database table changes all the services will have to change.  
 You have to understand that the whole reason for a Microservices architecture is to reduce dependencies between development teams and allow them to move ahead independently with fast releases.  
 Here is a quote from Werner Vogels, the Amazon CTO (Amazon pioneered a lot of the Microservices style architecture): 
 
 For us service orientation means encapsulating the data with the
  business logic that operates on the data, with the only access through
  a published service interface. No direct database access is allowed
  from outside the service, and thereâ€™s no data sharing among the
  services. 
 
 For more information read  this  and  this . 
 
 In general a microservice should be responsible for it's own data. That's a perfect world scenario.  
 In practice some of the services may be highly related to each other. E.g. CustomerShippingDetails and CustomerShoppingCheckout services may both access the same data - customer address. How would you then solve a problem of providing customer address to the customer checkout service. If the checkout service queries the shopping details directly then you break loose coupling between services. Other option is to introduce a shared database.  
 There will always have to be some kind of compromise on the architecture. What is sacreficed is an architectural decision that highly depends on the big picture (the design of the whole system). 
 Not having too many details about your system I would go with a mixed approach. That is, having a shared database for services that take care of similar business logic. So CustomerShippingDetails and CustomerShoppingCheckout can share a database. But a StoreItemsDetails would have a separate database. 
 You can find more about shared database pattern for microservices at  Microservice Architecture . 
 