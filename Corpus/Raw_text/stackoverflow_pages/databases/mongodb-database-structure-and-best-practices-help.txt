*** mongodb-database-structure-and-best-practices-help ***

 I'm in the process of developing Route Tracking/Optimization software for my refuse collection company and would like some feedback on my current data structure/situation. 
 Here is a simplified version of my MongoDB structure: 
 **Database:**
 data 
 **Collections:**

 **“customers”**
 - data collection containing all customer data. 
 
 **“trucks”**
 - data collection containing all truck data. 
 
 **“drivers”**
 - data collection containing all driver data. 
 
 **“route-lists”**
 - data collection containing all predetermined route lists. 
 
 **"routes"**
 - data collections containing data for all active and completed routes. 
 
 Here is the process thus far: 
 Each day drivers begin by Starting a New Route. Before starting a new route drivers must first input data: 
 
 **driverid**

 **date**

 **truck**

 
 Once all data is entered correctly the Start a New Route will begin: 
 
 Create new object in collection  **“routes”**
  
 Query collection  **“route-lists**
” for  **“day”**
 +  **“truck”**
 match and return  **"stops"**

 Insert  **“route-lists”**
 data into  **“routes”**
 collection 
 
 As driver proceeds with his daily stops/tasks the  **“routes”**
 collection will update accordingly. 
 On completion of all tasks the driver will then have the ability to Complete the Route Process by simply changing “status” field to “active” from “complete” in the "routes" collection. 
 That about sums it up. Any feedback, opinions, comments, links, optimization tactics are greatly appreciated. 
 Thanks in advance for your time. 
 
 You database schema looks like for me as 'classic' relational database schema. Mongodb good fit for data denormaliztion. I guess when you display routes you loading all related customers, driver, truck. 
 If you want make your system really fast you may embedd everything in route collection. 
 So i suggest following modifications of your schema: 
 
 customers - as-is 
 trucks - as-is 
 drivers - as-is 
 route-list: 
 Embedd data about customers inside stops instead of reference. Also embedd truck. In this case schema will be: 
 
 routes: 
 When driver starting new route copy route from route-list and in addition embedd driver information: 
 
 
 I guess you asking yourself what do if driver, customer or other denormalized data changed in main collection. Yeah, you need update all denormalized data within other collections. You will probably need update billions of documents (depends on your system size) and it's okay. You can do it async if it will take much time. 
 What benfits in above data structure? 
 
 Each document contains all data that you may need to display in your application. So, for instance, you no need load related customers, driver, truck when you need display routes. 
 You can make any difficult queries to your database. For example in your schema you can build query that will return all routes thats contains stops in stop of customer with name = "Bill" (you need load customer by name first, get id, and look by customer id in your current schema). 
 
 Probably you asking yourself that your data can be unsynchronized in some cases, but to solve this you just need build a few unit test to ensure that you update your denormolized data correctly. 
 Hope above will help you to see the world from not relational side, from document database point of view. 
 