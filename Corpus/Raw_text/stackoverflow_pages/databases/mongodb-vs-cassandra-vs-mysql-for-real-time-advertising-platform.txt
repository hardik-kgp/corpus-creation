*** mongodb-vs-cassandra-vs-mysql-for-real-time-advertising-platform ***

 I'm working on a real-time advertising platform with a heavy emphasis on performance. I've always developed with MySQL, but I'm open to trying something new like MongoDB or Cassandra if significant speed gains can be achieved. I've been reading about both all day, but since both are being rapidly developed, a lot of the information appears somewhat dated. 
 The main data stored would be entries for each click, incremented rows for views, and information for each campaign (just some basic settings, etc). The speed gains need to be found in inserting clicks, updating view totals, and generating real-time statistic reports. The platform is developed with PHP. 
 Or maybe none of these? 
 
 There are several ways to achieve this with all of the technologies listed. It is more a question of how you use them. Your ideal solution may use a combination of these, with some consideration for usage patterns. I don't feel that the information out there is that dated because the concepts at play are very fundamental. There may be new NoSQL databases and fixes to existing ones, but your question is primarily architectural. 
 NoSQL solutions like MongoDB and Cassandra get a lot of attention for their insert performance. People tend to complain about the update/insert performance of relational databases but there are ways to mitigate these issues. 
 Starting with MySQL you could review O'Reilly's  High Performance MySQL , optimise the schema, add more memory perhaps run this on different hardware from the rest of your app (assuming you used MySQL for that), or partition/shard data. Another area to consider is your application. Can you queue inserts and updates at the application level before insertion into the database? This will give you some flexibility and is probably useful in all cases. Depending on how your final schema looks, MySQL will give you some help with extracting the data as long as you are comfortable with SQL. This is a benefit if you need to use 3rd party reporting tools etc. 
 MongoDB and Cassandra are different beasts. My understanding is that it was easier to add nodes to the latter but this has changed since MongoDB has replication etc built-in. Inserts for both of these platforms are not constrained in the same manner as a relational database. Pulling data out is pretty quick too, and you have a lot of flexibility with data format changes. The tradeoff is that you can't use SQL (a benefit for some) so getting reports out may be trickier. There is nothing to stop you from collecting data in one of these platforms and then importing it into a MySQL database for further analysis. 
 Based on your requirements there are tools other than NoSQL databases which you should look at such as  Flume . These make use of the Hadoop platform which is used extensively for analytics. These may have more flexibility than a database for what you are doing. There is some content from  Hadoop World  that you might be interested in. 
 
 Nosql solutions are better than Mysql, postgresql and other rdbms techs for this task. Don't waste your time with Hbase/Hadoop, you've to be an astronaut to use it. I recommend MongoDB and Cassandra. Mongo is better for small datasets (if your data is maximum 10 times bigger than your ram, otherwise you have to shard, need more machines and use replica sets). For big data; cassandra is the best. Mongodb has more query options and other functionalities than cassandra but you need 64 bit machines for mongo. There are some works around for analytics in both sides. There is atomic counters in both sides. Both can scale well but cassandra is much better in scaling and high availability. Both have php clients, both have good support and community (mongo community is bigger). 
 Cassandra analytics project sample:Rainbird  http://www.slideshare.net/kevinweil/rainbird-realtime-analytics-at-twitter-strata-2011 
 mongo sample:  http://www.slideshare.net/jrosoff/scalable-event-analytics-with-mongodb-ruby-on-rails 
 http://axonflux.com/how-superfeedr-built-analytics-using-mongodb 
 doubleclick developers developed mongo  http://www.informationweek.com/news/software/info_management/224200878 
 
 Characteristics of MySQL: 
 
 Database locking (MUCH easier for financial transactions) 
 Consistency/security (as above, you can guarantee that, for instance, no changes happen between the time you read a bank account balance and you update it). 
 Data organization/refactoring (you can have disorganized data anywhere, but MySQL is better with tables that represent "types" or "components" and then combining them into queries -- this is called normalization). 
 
 Characteristics of Cassandra: 
 
 Speed 
 Availability (data is always available, regardless of being 100% "correct") 
 Optional fields (CAN be done in MySQL with meta tables etc., but it's for-free in Cassandra) 
 
 **Cassandra is key-value or document-based storage**
.  Think about what that means.  TYPICALLY I give Cassandra ONE KEY and I get back ONE DATASET.  It can branch out from there, but that's basically what's going on.  It's more like accessing a static file.  Sure, you can have multiple indexes, counter fields etc. but I'm making a generalization. That's where Cassandra is coming from. 
 **MySQL and SQL is based on group/set theory**
 -- it has a way to combine ANY relationship between data sets. It's pretty easy to take a MySQL query, make the query a "key" and the response a "value" and store it into Cassandra (e.g. make Cassandra a cache). That might help explain the trade-off too, MySQL allows you to always rearrange your data tables and the relationships between datasets simply by writing a different query.  Cassandra not so much.  And know that while Cassandra might PROVIDE features to do some of this stuff, it's not what it was built for. 
 MongoDB and CouchDB fit somewhere in the middle of those two extremes.  I think MySQL can be a bit verbose and annoying to deal with especially when dealing with optional fields, and migrations if you don't have a good model or tools. Also with scalability, I'm sure there are great technologies for scaling a MySQL database, but Cassandra will always scale, and easily, due to limitations on its feature set. MySQL is a bit more unbounded.  However, NoSQL and Cassandra do  not  do joins, one of the critical features of SQL that allows one to combine multiple tables in a single query. So, complex relational queries will not scale in Cassandra. 
 
 I'd also like to add Membase (www.couchbase.com) to this list. 
 As a product, Membase has been deployed at a number of Ad Agencies (AOL Advertising, Chango, Delta Projects, etc).  There are a number of public case studies and examples of how these companies have used Membase successfully. 
 While it's certainly up for debate, we've found that Membase provides better performance and scalability than any other solution.  What we lack in indexing/querying, we are planning on more than making up for with the integration of CouchDB as our new persistence backend. 
 As a company, Couchbase (the makers of Membase) has a large amount of knowledge and experience specifically serving the needs of Ad/targeting companies. 
 Would certainly love to engage with you on this particular use case to see if Membase is the right fit. 
 Please shoot me an email (perry -at- couchbase -dot- com) or visit us on the forums:  http://www.couchbase.org/forums/ 
 Perry Krug 
 
 Cassandra vs. MongoDB
Are you considering Cassandra or MongoDB as the data store for your next project?  Would you like to compare the two databases?  Cassandra and MongoDB are both “NoSQL” databases, but the reality is that they are very different. They have very different strengths and value propositions – so any comparison has to be a nuanced one. Let’s start with initial requirements… Neither of these databases replaces RDBMS, nor are they “ACID” databases. So If you have a transactional workload where normalization and consistency are the primary requirements, neither of these databases will work for you. You are better off sticking with traditional relational databases like MySQL, PostGres, Oracle etc. Now that we have relational databases out of the way, let’s consider the major differences between Cassandra and MongoDB that will help you make the decision. In this post, I am not going to discuss specific features but will point out some high-level strategic differences to help you make your choice. 
 
 Expressive Object Model
MongoDB supports a rich and expressive object model. Objects can have properties and objects can be nested in one another (for multiple levels). This model is very “object-oriented” and can easily represent any object structure in your domain. You can also index the property of any object at any level of the hierarchy – this is strikingly powerful! Cassandra, on the other hand, offers a fairly traditional table structure with rows and columns. Data is more structured and each column has a specific type which can be specified during creation. 
 
 Verdict: If your problem domain needs a rich data model then MongoDB is a better fit for you. 
 
 Secondary Indexes
Secondary indexes are a first-class construct in MongoDB. This makes it easy to index any property of an object stored in MongoDB even if it is nested. This makes it really easy to query based on these secondary indexes. Cassandra has only cursory support for secondary indexes. Secondary indexes are also limited to single columns and equality comparisons. If you are mostly going to be querying by the primary key then Cassandra will work well for you. 
 
 Verdict:  If your application needs secondary indexes and needs flexibility in the query model then MongoDB is a better fit for you. 
 
 High Availability
MongoDB supports a “single master” model. This means you have a master node and a number of slave nodes. In case the master goes down, one of the slaves is elected as master. This process happens automatically but it takes time, usually 10-40 seconds. During this time of new leader election, your replica set is down and cannot take writes. This works for most applications but ultimately depends on your needs. Cassandra supports a “multiple master” model. The loss of a single node does not affect the ability of the cluster to take writes – so you can achieve 100% uptime for writes. 
 
 Verdict: If you need 100% uptime Cassandra is a better fit for you. 
 
 Write Scalability
MongoDB with its “single master” model can take writes only on the primary. The secondary servers can only be used for reads. So essentially if you have three node replica set, only the master is taking writes and the other two nodes are only used for reads. This greatly limits write scalability. You can deploy multiple shards but essentially only 1/3 of your data nodes can take writes. Cassandra with its “multiple master” model can take writes on any server. Essentially your write scalability is limited by the number of servers you have in the cluster. The more servers you have in the cluster, the better it will scale. 
 
 Verdict: If write scalability is your thing, Cassandra is a better fit for you. 
 
 Query Language Support
Cassandra supports the CQL query language which is very similar to SQL. If you already have a team of data analysts they will be able to port over a majority of their SQL skills which is very important to large organizations. However CQL is not full blown ANSI SQL – It has several limitations (No join support, no OR clauses) etc. MongoDB at this point has no support for a query language. The queries are structured as JSON fragments. 
 
 Verdict: If you need query language support, Cassandra is the better fit for you. 
 
 Performance Benchmarks
Let’s talk performance.  At this point, you are probably expecting a performance benchmark comparison of the databases.  I have deliberately not included performance benchmarks in the comparison. In any comparison, we have to make sure we are making an apples-to-apples comparison. 
 Database model - The database model/schema of the application being tested makes a big difference. Some schemas are well suited for MongoDB and some are well suited for Cassandra. So when comparing databases it is important to use a model that works reasonably well for both databases. 
 Load characteristics – The characteristics of the benchmark load are very important. E.g. In write-heavy benchmarks, I would expect Cassandra to smoke MongoDB. However, in read-heavy benchmarks, MongoDB and Cassandra should be similar in performance. 
 Consistency requirements  - This is a tricky one. You need to make sure that the read/write consistency requirements specified are identical in both databases and not biased towards one participant.  Very often in a number of the ‘Marketing’ benchmarks, the knobs are tuned to disadvantage the other side. So, pay close attention to the consistency settings. 
 
 One last thing to keep in mind is that the benchmark load may or may not reflect the performance of your application. So in order for benchmarks to be useful, it is very important to find a benchmark load that reflects the performance characteristics of your application. Here are some benchmarks you might want to look at:
- NoSQL Performance Benchmarks
- Cassandra vs. MongoDB vs. Couchbase vs. HBase 
 
 Ease of Use
If you had asked this question a couple of years ago MongoDB would be the hands-down winner. It’s a fairly simple task to get MongoDB up and running. In the last couple of years, however, Cassandra has made great strides in this aspect of the product. With the adoption of CQL as the primary interface for Cassandra, it has taken this a step further – they have made it very simple for legions of SQL programmers to use Cassandra very easily. 
 
 Verdict: Both are fairly easy to use and ramp up. 
 
 Native Aggregation
MongoDB has a built-in Aggregation framework to run an ETL pipeline to transform the data stored in the database. This is great for small to medium jobs but as your data processing needs become more complicated the aggregation framework becomes difficult to debug. Cassandra does not have a built-in aggregation framework. External tools like Hadoop, Spark are used for this. 
 Schema-less Models
In MongoDB, you can choose to not enforce any schema on your documents. While this was the default in prior versions in the newer version you have the option to enforce a schema for your documents.  Each document in MongoDB can be a different structure and it is up to your application to interpret the data. While this is not relevant to most applications, in some cases the extra flexibility is important. Cassandra in the newer versions (with CQL as the default language) provides static typing. You need to define the type of very column upfront. 
 
 
 I would look at New Relic as an example of a similar workload.  They capture  **over 200 Billion data points a day to disk**
 and are using MySQL 5.6 (Percona) as a backend. 
 A blog post is available here:
 http://blog.newrelic.com/2014/06/13/store-200-billion-data-points-day-disk/ 
 