*** mongodb-vs-cassandra ***

 
 
 
 
 
 Closed.  This question is  off-topic . It is not currently accepting answers.
                            
                         
 
 
 
 
 
 
 
 
 
 
 Want to improve this question?   Update the question  so it's  on-topic  for Stack Overflow.
                         
 Closed  2 years ago . 
 
 
 
 I am evaluating what might be the best migration option. 
 Currently, I am on a sharded MySQL (horizontal partition), with most of my data stored in JSON blobs. I do not have any complex SQL queries (already migrated away after since I partitioned my db). 
 Right now, it seems like both MongoDB and Cassandra would be likely options. My situation: 
 
 Lots of reads in every query, less regular writes 
 Not worried about "massive" scalability 
 More concerned about simple setup, maintenance and code 
 Minimize hardware/server cost 
 
 
 **Lots of reads in every query, fewer regular writes**

 Both databases perform well on reads where the hot data set fits in memory.  Both also emphasize join-less data models (and encourage denormalization instead), and both provide indexes on  documents  or  rows , although MongoDB's indexes are currently more flexible. 
 Cassandra's storage engine provides constant-time writes no matter how big your data set grows. Writes are more problematic in MongoDB, partly because of the b-tree based storage engine, but more because of the  multi-granularity locking  it does. 
 For analytics, MongoDB provides a custom map/reduce implementation; Cassandra provides native Hadoop support, including for  Hive  (a SQL data warehouse built on Hadoop map/reduce) and  Pig  (a Hadoop-specific analysis language that many think is a better fit for map/reduce workloads than SQL).  Cassandra also supports use of  Spark . 
 **Not worried about "massive" scalability**

 If you're looking at a single server, MongoDB is probably a better fit. For those more concerned about scaling, Cassandra's no-single-point-of-failure architecture will be easier to set up and more reliable. (MongoDB's global write lock tends to become more painful, too.) Cassandra also gives a lot more control over how your replication works, including support for multiple data centers. 
 **More concerned about simple setup, maintenance and code**

 Both are trivial to set up, with reasonable out-of-the-box defaults for a single server. Cassandra is simpler to set up in a multi-server configuration since there are no special-role nodes to worry about. 
 If you're presently using JSON blobs, MongoDB is an insanely good match for your use case, given that it uses BSON to store the data. You'll be able to have richer and more queryable data than you would in your present database. This would be the most significant win for Mongo. 
 
 I've used MongoDB extensively (for the past 6 months), building a hierarchical data management system, and I can vouch for both the ease of setup (install it, run it, use it!) and the speed. As long as you think about indexes carefully, it can absolutely scream along, speed-wise. 
 I gather that Cassandra, due to its use with large-scale projects like Twitter, has better scaling functionality, although the MongoDB team is working on parity there. I should point out that I've not used Cassandra beyond the trial-run stage, so I can't speak for the detail. 
 The real swinger for me, when we were assessing NoSQL databases, was the querying - Cassandra is basically just a giant key/value store, and querying is a bit fiddly (at least compared to MongoDB), so for performance you'd have to duplicate quite a lot of data as a sort of manual index. MongoDB, on the other hand, uses a "query by example" model. 
 For example, say you've got a Collection (MongoDB parlance for the equivalent to a RDMS table) containing Users. MongoDB stores records as Documents, which are basically binary JSON objects. e.g: 
 
 If you wanted to find all of the users called Smith who have Admin rights, you'd just create a new document (at the admin console using Javascript, or in production using the language of your choice): 
 
 ...and then run the query. That's it. There are added operators for comparisons, RegEx filtering etc, but it's all pretty simple, and the Wiki-based documentation is pretty good. 
 
 Why choose between a traditional database and a NoSQL data store? Use both! The problem with NoSQL solutions (beyond the initial learning curve) is the lack of transactions -- you do all updates to MySQL and have MySQL populate a NoSQL data store for reads -- you then benefit from each technology's strengths. This does add more complexity, but you already have the MySQL side -- just add MongoDB, Cassandra, etc to the mix.  
 NoSQL datastores generally scale way better than a traditional DB for the same otherwise specs -- there is a reason why Facebook, Twitter, Google, and most start-ups are using NoSQL solutions. It's not just geeks getting high on new tech. 
 
 I'm probably going to be an odd man out, but I think you need to stay with MySQL. You haven't described a real problem you need to solve, and MySQL/InnoDB is an excellent storage back-end even for blob/json data.  
 There is a common trick among Web engineers to try to use more NoSQL as soon as realization comes that not all features of an RDBMS are used. This alone is not a good reason, since most often NoSQL databases have rather poor data engines (what MySQL calls a storage engine).  
 Now, if you're not of that kind, then please specify what is  missing  in MySQL and you're looking for in a different database (like, auto-sharding, automatic failover, multi-master replication, a weaker data consistency guarantee in cluster paying off in higher write throughput, etc).  
 
 I haven't used Cassandra, but I have used MongoDB and think it's awesome. 
 If you're after simple setup, this is it: You simply untar MongoDB and run the mongod daemon and that's it ... it's running. 
 Obviously that's only a starter, but to get you started it's easy. 
 
 I saw a presentation on mongodb yesterday. I can definitely say that setup was "simple", as simple as unpacking it and firing it up. Done. 
 I believe that both mongodb and cassandra will run on virtually any regular linux hardware so you should not find to much barrier in that area.  
 I think in this case, at the end of the day, it will come down to which do you personally feel more comfortable with and which has a toolset that you prefer. As far as the presentation on mongodb, the presenter indicated that the toolset for mongodb was pretty light and that there werent many (they said any really) tools similar to whats available for MySQL. This was of course their experience so YMMV. One thing that I did like about mongodb was that there seemed to be lots of language support for it (Python, and .NET being the two that I primarily use). 
 The list of sites using mongodb is pretty  impressive , and I know that twitter just switched to using cassandra. 
 