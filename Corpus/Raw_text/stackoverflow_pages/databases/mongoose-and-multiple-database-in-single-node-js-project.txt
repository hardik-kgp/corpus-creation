*** mongoose-and-multiple-database-in-single-node-js-project ***

 I'm doing a Node.js project that contains sub projects. One sub project will have one Mongodb database and Mongoose will be use for wrapping and querying db. But the problem is  
 
 Mongoose doesn't allow to use multiple databases in single mongoose instance as the models are build on one connection. 
 To use multiple mongoose instances, Node.js doesn't allow multiple module instances as it has caching system in  . I know disable module caching in Node.js but I think it is not the good solution as it is only need for mongoose.  
 I've tried to use   and   in mongoose, but it was not the solution. 
 I've tried to deep copy the mongoose instance ( http://blog.imaginea.com/deep-copy-in-javascript/ ) to pass new mongoose instances to the sub project, but it throwing  .  
 
 I want to know is there anyways to use multiple database with mongoose or any workaround for this problem? Because I think mongoose is quite easy and fast. Or any other modules as recommendations? 
 
 One thing you can do is, you might have subfolders for each projects. So, install mongoose in that subfolders and require() mongoose from own folders in each sub applications. Not from the project root or from global. So one sub project, one mongoose installation and one mongoose instance. 
 
 In foo_db_connect.js 
 
 In bar_db_connect.js 
 
 In db_access.js files 
 
 Now, you can access multiple databases with mongoose. 
 
 According to  the fine manual ,    can  be used to connect to multiple databases. 
 However, you need to create separate models for each connection/database: 
 
 I'm pretty sure that you can share the schema between them, but you have to check to make sure. 
 
 As an alternative approach, Mongoose does export a constructor for a new instance on the default instance. So something like this is possible. 
 
 This is very useful when working with separate data sources, and also when you want to have a separate database context for each user or request. You will need to be careful, as it is possible to create a LOT of connections when doing this. Make sure to call disconnect() when instances are not needed, and also to limit the pool size created by each instance. 
 
 Pretty late but this might help someone. The current answers assumes you are using the same file for your connections and models. 
 In real life, there is a high chance that you are splitting your models into different files. You can use something like this in your main file: 
 
 which is just how it is described in the docs. And then in your model files, do something like the following: 
 
 Where myDB is your database name. 
 