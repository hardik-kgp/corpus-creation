*** multiple-and-single-indexes ***

 I'm kinda ashamed of asking this since I've been working with MySQL for years, but oh well. 
 I have a table with two fields,   and  . I will be running the following queries on it: 
 
 
 
 
 
 From the performance point of view,  **is at least one of the following configurations of indexes slower for at least one query**
? If yes, please elaborate. 
 
 
 
 
 
 Thanks (note that we are talking about non unique indexes) 
 
 Yes, at least one case is considerably slower. If you only define the following index:  
 
 ... then the query   will not use that index. 
 When you create an index with a composite key, the order of the columns of the key is important. It is recommended to try to order the columns in the key to enhance selectivity, with the most selective columns to the left-most of the key. If you don't do this, and put a non-selective column as the first part of the key, you risk not using the index at all. (Source:  Tips on Optimizing SQL Server Composite Index ) 
 
 It's very improbable that mere existence of an index slow down a   query: it just won't be used. 
 In theory the optimizer can incorrectly choose more long index on   rather than one on   to serve the query which searches only for  . 
 In practice, I've never seen it:   usually does the opposite mistake, taking a shorter index when a longer one exists. 
 **Update:**

 In your case, either of the following configurations will suffice for all queries: 
 
 or  
 
  can also use two separate indexes with  , so creating these indexes 
 
 will also speed up the query with  , though to a lesser extent than any of the solutions above. 
 You may also want to read this article in my blog: 
 
 **Creating indexes**

 
 **Update 2:**

 Seems I finally understood your question :) 
 
 Excellent for   and  , reasonably good for  
 
 Excellent for  , almost excellent for  , poor for  
 
 Excellent for all three queries. 
 
 SQL will choose the index that best covers the query. 
An index on A, B will cover the query for both case 1 and 3, but not for 2 (since the primary index column is A) 
 So to cover all three queries you need two indexes: 
 
 
 For the example you have index set #3 is optimal.  Mysql will choose the single A and B indices for single column where clauses, and use the compound index for the A & B where clause. 
 