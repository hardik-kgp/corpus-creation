*** multiple-columns-index-when-using-the-declarative-orm-extension-of-sqlalchemy ***

 According to  the documentation  and the comments in the   class, we should use the class   to specify an index that contains multiple columns. 
 However, the example shows how to do it by directly using the Table object like this: 
 
 How should we do it if we use the declarative ORM extension? 
 
 I  would like an index on column "a" and "b". 
 
 those are just   objects, index=True flag works normally: 
 
 if you'd like a composite index, again   is present here as usual you just don't have to declare it, everything works the same (make sure you're on recent 0.6 or 0.7 for the declarative A.a wrapper to be interpreted as a   after the class declaration is complete): 
 
 In 0.7 the   can be in the   arguments too, which with declarative is via  : 
 
 
 To complete @zzzeek's  answer . 
 If you like to add a composite index with DESC and use the ORM declarative method you can do as follows. 
 Furthermore, I was struggling with the  Functional Indexes  documentation of SQSAlchemy, trying to figure out a how to substitute  . 
 
 
 
 We can just use the model property and call   on it: 
 
 If you use Alembic, I'm using Flask-Migrate, it generates something like: 
 
 Finally you should have the following table and indexes in your PostgreSQL database: 
 
 