*** multiple-tables-with-same-type-of-objects-in-room-database ***

 I'm using Room as the database for the app. I have a scenario where an   of a certain type needs to be stored in separate tables. As an example, lets take the   called    
 Now, I want to have two SQL tables: 
 
 Books_Read 
 Books_To_Read  
 
 ignore any naming conventions for SQL DB please - this is just an example 
 **Problem**
  
 Normally, one would just use   in the   class and have a   class that will use that table name.  
 The thing is; how would I then be able to use the same   class to store in the   table? Since I already defined   as part of the   class and I see no where to define the   table for the   class  
 The only solution I was able to come up with, which seems a little hackery and unnessasery, was to create a new class - let's call it    that extends   and define   in the class.  
 **Question**

 Is there a better way to do this or is this the expected way to handle it?  
 
 
 Is this the expected way to handle it? 
 
 **No**
. It is a wrong approach. You should  **eliminate duplication of data**
 for several reasons. 
 
 It will cost storage space. As the size of database increases, this
will began to become worse. 
 It will make the system complicated. If you are updating a single
field, You may have to perform the same action at different places.
If you miss any one of them, the entire data will become
inconsistent. It is possible to perform such operations as
a single transaction. But it is always better to keep the database structure 
clean. 
 
 
 Solution 
 **Method 1: Introduce new tables**

 You can store details of books in only one table say  .   or any other table should contain only the reference to the   table ( By using the id/ primary key in   table ). You can then use the   keyword to get the entire record at a single query. 
 This method is preferred if each type (read and unread books in this case) has it's own set of fields ( Like the read_date, read_time for read books and wish_to_read for unread books ). 
 **Method 2: Introduce new field**

 You can simply add a new type which specifies the type. In this case, there are only two type(read and unread), a boolean field (something like  ) will be fine. 
 This would be the easiest method. But this will work only if you just want to indicate which type the row belongs to. If you do need to store type specific data and you introduce additional fields for that purpose, remember that those fields will exists for others types too. 
 
 This is how I eventually solved this problem:  
 I added an ID to the   class that represents whether it has been read or not. Backed by an   that was either   or   and then in my   for   I then just use a   to   the   I want. So by changing the query I can get either all the   or   or  . This way, there is no duplication of data and everything is in one table, without having to use   or   relationships.  
 
 
 I think this is best way to connecting two tables. Try it and let me know your 
   feed back. I will give anothor solution 
 
 I was writing sample app when Ahamad gave his answer.  
 
 Room  provides an abstraction layer over SQLite to allow fluent
  database access while harnessing the full power of SQLite. 
 
 main idea is same as of to store Book data in one table and use the id of the book in other tables. 
have a look at my sample  project   
 result of logcat  
 
 