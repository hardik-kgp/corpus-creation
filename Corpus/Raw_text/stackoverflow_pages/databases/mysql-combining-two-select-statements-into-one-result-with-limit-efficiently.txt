*** mysql-combining-two-select-statements-into-one-result-with-limit-efficiently ***

 For a dating application, I have a few tables that I need to query for a single output with a LIMIT 10 of both queries combined. It seems difficult to do at the moment, even though it's not an issue to query them separately, but the LIMIT 10 won't work as the numbers are not exact (ex. not LIMIT 5 and LIMIT 5, one query may return 0 rows, while the other 10, depending on the scenario). 
 
 Imagine you are Karen and just logged in, you should see these 2 items: 
 
 In one query with a LIMIT of 10. Instead here are two queries that need to be combined: 
 
 Again, sometimes both tables may be empty, or 1 table may be empty, or both full (where LIMIT 10 kicks in) and ordered by time. Any ideas on how to get a query to perform this task efficiently? Thoughts, advice, chimes, optimizations are welcome. 
 
 You can combine multiple queries with  , but only if the queries have the same number of columns.  Ideally the columns are the same, not only in data type, but also in their semantic meaning; however, MySQL doesn't care about the semantics and will handle differing datatypes by casting up to something more generic - so if necessary you  could  overload the columns to have different meanings from each table, then determine what meaning is appropriate in your higher level code (although I don't recommend doing it this way). 
 When the number of columns differs, or when you want to achieve a better/less overloaded alignment of data from two queries, you can insert dummy literal columns into your   statements.  For example: 
 
 You could even have some columns reserved for the first table and others for the second table, such that they are   elsewhere (but remember that the column names come from the first query, so you may wish to ensure they're all named there): 
 
 You could try aligning your two queries in this fashion, then combining them with a   operator; by applying   to the  , you're close to achieving your goal: 
 
 The only issue that remains is that, as presented above, 10 or more records from the first table will "push out" any records from the second.  However, we can utilise an   in the outer query to solve this. 
 Putting it all together: 
 
 Of course, now it's up to you to determine what type of row you're dealing with as you read each record in the resultset (suggest you test   and/or   for   values; alternatively one could add an additional column to the results that explicitly states from which table each record originated, but it should be equivalent provided those   columns are  ). 
 