*** mysql-myisam-vs-inno-db ***

 
 
 
 
 
 Closed . This question needs to be more  focused . It is not currently accepting answers.
                            
                         
 
 
 
 
 
 
 
 
 
 
 Want to improve this question?  Update the question so it focuses on one problem only by  editing this post .
                         
 Closed  2 years ago . 
 
 
 
 What are the differences between MyISAM and Inno DB types in MySql? 
 
 The main difference is that InnoDB supports transactions while MyISAM does not. 
 There are numerous other differences, however the common one's i am aware of are: 
 
 MyISAM has typically been considered faster at searching, but recent InnoDB improvements are removing this difference and improving high concurrency workload performance 
 InnoDB support transactions whilst MyISAM does not 
 InnoDB supports referential integrity whilst MyISAM does not 
 InnoDB handles indexes a bit differently, storing the primary key as part of every index (making indexes take up more room on the disk, but also making a covering index more likely) 
 MyISAM does table level locking while InnoDB can do row level locking 
 Different memory/buffer/index settings are used in the MySQL configuration files 
 InnoDB is typically said to have better crash recovery 
 As mentioned in another answer, the data is store on disk differently. I believe InnoDB is configurable in this area and can have one file per table etc. if required 
 
 I'm sure a google search or the MySQL site will bring up numerous other differences in more detail. 
 
 
 **InnoDB and MyISAM**
  
 
 **Features and Performance comparison:**

 
 InnoDB is newer while MyISAM is older. 
 InnoDB is more complex while MyISAM is simpler. 
 InnoDB is more strict in data integrity while MyISAM is loose. 
 InnoDB implements row-level lock for inserting and updating while MyISAM implements table-level lock. 
 InnoDB has transactions while MyISAM does not. 
 InnoDB has foreign keys and relationship contraints while MyISAM does not. 
 InnoDB has better crash recovery while MyISAM is poor at recovering data integrity at system crashes. 
 MyISAM has full-text search index while InnoDB has not. 
 
 In light of these differences, InnoDB and MyISAM have their unique advantages and disadvantages against each other. They each are more suitable in some scenarios than the other. 
 **Advantages of InnoDB**

 
 InnoDB should be used where data integrity comes a priority because it inherently takes care of them by the help of relationship constraints and transactions. 
 Faster in write-intensive (inserts, updates) tables because it utilizes row-level locking and only hold up changes to the same row that’s being inserted or updated. 
 
 **Disadvantages of InnoDB**

 
 Because InnoDB has to take care of the different relationships between tables, database administrator and scheme creators have to take more time in designing the data models which are more complex than those of MyISAM. 
 Consumes more system resources such as RAM. As a matter of fact, it is recommended by many that InnoDB engine be turned off if there’s no substantial need for it after installation of MySQL. 
 No full-text indexing. 
 
 **Advantages of MyISAM**

 
 Simpler to design and create, thus better for beginners. No worries about the foreign relationships between tables. 
 Faster than InnoDB on the whole as a result of the simpler structure thus much less costs of server resources. 
 Full-text indexing. 
 Especially good for read-intensive (select) tables. 
 
 **Disadvantages of MyISAM**

 
 No data integrity (e.g. relationship constraints) check, which then comes a responsibility and overhead of the database administrators and application developers. 
 Doesn’t support transactions which is essential in critical data applications such as that of banking. 
 Slower than InnoDB for tables that are frequently being inserted to or updated, because the entire table is locked for any insert or update. 
 
 The comparison is pretty straightforward. InnoDB is more suitable for data critical situations that require frequent inserts and updates. MyISAM, on the other hand, performs better with applications that don’t quite depend on the data integrity and mostly just select and display the data. 
 **Reference:**

 Comparison InnoDB and MyISAM 
 You can also check it out here for further details:
 MyISAM Or InnoDB MySQL engine? 
 Hope this helps. 
 
 MyISAM supports (non-standard-SQL) fulltext indexing which InnoDB still does not. This is the only reason we ever use MyISAM today. 
 
 The most important difference between MyISAM and InnoDB is that InnoDB supports transactions and foreign keys. If you need foreign keys and related functionality (for example automatically cascading deletes), you will need to use InnoDB. 
 InnoDB is slower than MyISAM for most uses, but can perform faster in certain conditions due to a better locking mechanism; MyISAM locks the whole table for reading while inserts/updates are executing. InnoDB can do row-level locking, thus allowing multiple concurrent writes and read on the table. 
 
 You can have more information about MyISAM & InnoDB in MySQL Documentation: 
 http://dev.mysql.com/doc/refman/5.1/en/myisam-storage-engine.html 
 http://dev.mysql.com/doc/refman/5.1/en/innodb-overview.html 
 
 The major difference is that InnoDB supports  transactions , whereas MyISAM doesn't. 
 
 MyISAM and InnoDB also store their data on disk differently.  MyISAM uses a data file and an index file for each table, stored in a directory named after the database.  InnoDB seems to lump everything together in a file called ibdata1. 
 
 **NFS support**

 Unlike MyISAM, InnoDB may have problems on NFS. 
 From  Configuring InnoDB (MySQL version 5.5) 
 
 Caution 
 If reliability is a consideration for
  your data, do not configure InnoDB to
  use data files or log files on NFS
  volumes. Potential problems vary
  according to OS and version of NFS,
  and include such issues as lack of
  protection from conflicting writes,
  and limitations on maximum file sizes. 
 
 
 InnoDB Features
1.  Provides Full transaction capability with full ACID (Atomicity, Consistency, Isolation, and   Durability) compliance. 
 
 It has row level locking.By supporting row level locking, you can add data to an InnoDB table without the engine locking the table with each insert and  this speeds up both the recovery and storage of information in the database. 
 The key to the InnoDB system is a database, caching and indexing structure where both indexes and data are cached in memory as well as being stored on disk This enables very fast recovery, and works even on very large data sets. 
 InnoDB supports foreign key constraints 
 InnoDB supports  automatic crash recovery 
 InnoDB supports  table compression (read/write) 
 InnoDB supports spatial data types (no spatial indexes) 
 Innodb support non-locking ANALYZE TABLE and is only required when the server has been running for a long time since it dives into the index statistics and gets the index information when the table opens. 
 Innodb does not have separate index files so they do not have to be opened. 
 Innodb builds its indexes one row at a time in primary key order (after an ALTER), which means index trees aren't built in optimal order and are fragmented.There is currently no way to defragment InnoDB indexes, as InnoDB can't build indexes by sorting in MySQL 5.0. Even dropping and recreating InnoDB indexes  may result in fragmented indexes, depending on the data. 
 A table can contain a maximum of 1000 columns. 
 The InnoDB internal maximum key length is 3500 bytes, but MySQL itself restricts this to 3072 bytes. (1024 bytes for non-64-bit builds before MySQL 5.0.17, and for all builds before 5.0.15.) 
 The default database page size in InnoDB is 16KB. By recompiling the code, you can set it to values ranging from 8KB to 64KB. You must update the values of UNIV_PAGE_SIZE and UNIV_PAGE_SIZE_SHIFT in the univ.i source file. 
 InnoDB tables do not support FULLTEXT indexes. 
 MYISAM Features 
 
 No Transaction support 
 Table level locking 
 Provides Full Text search 
 No limit to data in table. 
 fast COUNT(*)s (when WHERE, GROUP BY, or JOIN is not used) 
 full text indexing 
 smaller disk footprint 
 very high table compression (read only) 
 spatial data types and indexes (R-tree) 
 
 By using DATA DIRECTORY='/path/to/data/directory' or INDEX DIRECTORY='/path/to/index/directory' you can specify where the MyISAM storage engine should
put a table's data file and index file. The directory must be the full path name to the directory, not a relative path. 
 
 you can find more detail at
 http://faisalbhagat.blogspot.com/2014/09/innodb-vs-myisam.html 
 
 Here is a description of differences between InnoDB and MyIsam: 
 Differences between InnoDB and MyIsam 
 Few differences: 
 
 **MYISAM**
 doesnt support any database transactions,  
 **INNODB**
 will provide transactions 
 **MYISAM**
 provides a table level locking,  
 **INNODB**
 provides a row level locking 
 **INNOBD**
 supports foreign keys,  **MYISAM**
 does not... 
 
 
 MyISAM is more convienient when it comes to backup, since it's rather simple to just lock all tables and copy the files directly in the filesystem. (mysqlhotcopy which is a perl-script is even part of mysql afaik) 
 InnoDB is a little more complex and just copying the files won't do since they cannot be restored on another machine out-of-the-box. 
 However, there are commercial software that offers InnoDB hotcopying. 
 
 While transaction support is the major difference, table-level locking can be an issue if you have  long-running SELECT queries mixed with UPDATE statements . 
 