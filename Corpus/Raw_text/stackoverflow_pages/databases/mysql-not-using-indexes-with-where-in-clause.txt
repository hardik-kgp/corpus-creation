*** mysql-not-using-indexes-with-where-in-clause ***

 I'm trying to optimize some of the database queries in my Rails app and I have several that have got me stumped.  They are all using an   in the   clause and are all doing full table scans even though an appropriate index appears to be in place. 
 For example: 
 
 performs a full table scan and   says: 
 
 Are indexes not used when an   statement is used or do I need to do something differently?  The queries here are being generated by Rails so I could revisit how my relationships are defined, but I thought I'd start with potential fixes at the DB level first. 
 
 See  How MySQL Uses Indexes . 
 Also validate whether MySQL still performs a  full table scan  after you add an additional 2000-or-so rows to your   table.  In small tables, access-by-index is actually more expensive (I/O-wise) than a table scan, and MySQL's optimizer might take this into account. 
 Contrary to my previous post , it turns out that MySQL is also  using a cost-based optimizer , which is very good news - that is, provided you run your   at least once when you believe that the volume of data in your database is  representative  of future day-to-day usage.   
 When dealing with cost-based optimizers (Oracle, Postgres, etc.), you need to make sure to periodically run   on your various tables as their size increases by more than 10-15%.  (Postgres will do this automatically for you, by default, whereas other RDBMSs will leave this responsibility to a DBA, i.e. you.)  Through statistical analysis,   will help the optimizer get a better idea of how much I/O (and other associated resources, such as CPU, needed e.g. for sorting) will be involved when choosing between various candidate execution plans.  Failure to run   may result in very poor, sometimes disastrous planning decisions (e.g. millisecond-queries taking, sometimes, hours because of  bad nested loops  on  s.) 
 If performance is still unsatisfactory after running  , then you will typically be able to work around the issue by using hints, e.g.  , whereas in other cases you might have stumbled over a MySQL bug (e.g. this  older one , which could have bitten you were you to use Rails'  ). 
 Now,  **since you are in a Rails app**
, it will be cumbersome (and defeat the purpose of  ) to issue your custom queries with hints instead of continuing to use the  -generated ones. 
 I had mentioned that in our Rails application  all    queries dropped below 100ms after switching to Postgres, whereas some of the complex joins generated by   would occasionally take as much as 15s or more with MySQL 5.1 because of nested loops with inner table scans, even when indices were available.  No optimizer is perfect, and you should be aware of the options.  Other potential performance issues to be aware of, besides query plan optimization, are locking.  This is outside the scope of your problem though. 
 
 Try forcing this index: 
 
 I just checked, it does use an index on exactly same query: 
 
 
 Sometimes MySQL does not use an index, even if one is available. One circumstance under which this occurs is when the optimizer estimates that using the index would require MySQL to access a very large percentage of the rows in the table. (In this case, a table scan is likely to be much faster because it requires fewer seeks.) 
 What percentage of rows match your IN clause? 
 
 I know I'm late for the party. But hope I can help someone else with similar problem. 
 Lately, I'm having the same problem. Then I decide to use self-join-thing to solve my problem.
The problem is not MySQL. Problem is us. The return type from subquery is difference from our table. So we must cast the type of subquery to the type of select column.
Below is example code: 
 
 Or my own code: 
 Old: (Not use index: ~4s) 
 
 New: (Use index: ~0.02s) 
 
 jxm_character: 
 
 Records: ~3.5M 
 PK: jxm_character(information_date, ranking_type, character_id) 
 
 
 
 Last note: Make sure you understand MySQL index left-most rule. 
 P/s: Sorry for my bad English. I post my code (production, of course) to clear my solution :D. 
 
 Does it get any better if you remove the redundant brackets around the where clause? 
 Although it could just be that because you've only got 200 or so rows, it decided a table scan would be faster.  Try with a table with more records in it. 
 