*** mysql-query-max-group-by ***

 Daft SQL question. I have a table like so ('pid' is auto-increment primary col) 
 
 Actual table data: 
 
 I want to get the PID of the latest row for each rid (1 result per unique RID). For the sample data, I'd like: 
 
 I've tried running the following query: 
 
 and I get: 
 
 The PID returned is always the first occurence of PID for an RID (row / pid 1 is frst time rid 1 is used, row / pid 3 the the first time RID 2 is used, row / pid 7 is first time rid 3 is used). Though returning the max timestamp for each rid, the pids are not the pids for the timestamps from the original table. What query would give me the results I'm looking for? 
 
 (Tested in PostgreSQL 9.something) 
 Identify the rid and timestamp. 
 
 Join to it. 
 
 
 
 Hope I helped !  
 
 
 
 I created an index on rid and timestamp. 
 
 Showing rows 0 - 2 (3 total, Query took 0.0104 sec) 
 This method will select all the desired values from   (test), left joining itself (maxt) on all timestamps higher than the one on test with the same rid. When the timestamp is already the highest one on test there are no matches on maxt - which is what we are looking for - values on maxt become NULL. Now we use the WHERE clause   or any other column on maxt. 
 
 You could also have subqueries like that: 
 
 But this way, you'll need one more subquery if you want   included in the shown columns, etc.  
 So, the   and   is better solution. 
 
 If you want to avoid a JOIN, you can use: 
 
 
 Try: 
 
 