*** mysql-select-upcoming-birthdays ***

 I'm trying to write a query to select users of a database whose birthdays are in the next 7 days. 
 I've done a lot of research but I can't come up with a working solution.  
 The birthday field is stored as a varchar eg '04/16/93' is there any way to work with this? 
 This is what I have so far: 
 
 I should have made it more clear, I'm trying to find birthdays not dates of birth. So i'm just looking for days and months not years. 
 
 To get all birthdays in next 7 days, add the year difference between the date of birth and today to the date of birth and then find if it falls within next seven days.  
 
 If you want to exclude today's birthdays just change   to    
 
 Here is a  DEMO  of all queries 
 
 Its very easy and simple. No need to use any if conditions or anything else you just need to use DATE_FORMAT() function of mysql.  
 Here is my sql query that is  
 
 
 
 This is my solution. It also works if date of birth is January 1st and today's date is December 31. 
 
 
 try this: 
 
 
 I managed to get it working with this query. Due mostly to the help of Lobo's answer. 
 
 
 I found this code to work really well: 
 
 it actually really simple, it calculate the person age, then the current's year birthday and then add 1 year. 
 it based on the answer of Robert Eisele which you may find here:
 http://dev.mysql.com/doc/refman/5.1/en/date-and-time-functions.html 
 p.s. 
 with this solution you might fetch people who had a birthday yesterday (that's because the -1 in the FROM_DAYS calculation, but it is needed because of the leap years). this shouldn't consider you too much since you only want 7 days a head so you should just add the following condition: 
 
 
 The accepted answer above from Lobo is flawed in that, if the query is run on December 31, and the user has a birthday on January 1, they will not be matched. 
 You must add logic to the query so that, if the birthday has already passed this year, you look at NEXT YEAR's birthday, not this year's.  Details below: 
 
 
 We've had troubles with a calendar that had to show the next ten birthdays (including todays birthdays).
I've reduced the solution I just found to the relevant parts: 
 
 It sets every year (including the actual) to a leap year, so there won't be any problems with that.
If you get close to the end of the year it's no problem, too.
I'm quite statisfied to finally finding a working solution, so I wanted to share this, maybe it is of use for someone else :) 
 P.S.: If you don't want to show todays birthdays, just add a   after  
 
 This is what I did when I faced the same problem : 
 
 
 While trying to get the list who have their b'days upcoming in a range of time, we can run in to couple of issues. 
 When there is a leap year, then there is a chance that the condition you have fails to handle the case of leap years. Next problem could be like today is   and you need b'days for next 7 days. So the end of the period is in year  . Some condition fail in this case. These are very important test cases. 
 Most of the fixed in this thread are using the   which fails when you are on a leap year.  
 eg.  
  is  . 
  is  
 Simplest and most easy to understand way is this.  
 
 Calculate the next upcoming b'day for a user. 
 Then check if the day comes in our range. 
 
 This works on leap years and also the range of dates span in two years. 
 
 PS: Also it is the best solution if you want to order these on the basis of the b'days. You just need to add this as a field. 
 
 
 This works for me.  
 
 Building on Lobo's answer to tackle leap years 
 
 
 So another approach you can take is to do a little more work before hitting the database layer. For example, I recently did this in a Laravel (PHP) and Postgres project. I basically built up an array of dates (ie. the next 7 days), and did a   query to find users with birthdays on those dates. 
 
 
 Here is a simple PHP Code & SQL Query to retrieve upcoming birthdays. Where date of birth is stored as DATE (YYYY-MM-DD Format).  enter image description here 
 
 
 I did a lot "researches" and here is my solution, I guess it is very easy to understand! 
 
 