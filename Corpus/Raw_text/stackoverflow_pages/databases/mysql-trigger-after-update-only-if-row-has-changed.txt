*** mysql-trigger-after-update-only-if-row-has-changed ***

 Is there any possibility to use an "after update" trigger only in the case the data has been REALLY changed.
I know of "NEW and OLD". But when using them I'm only able to compare columns.
For example "NEW.count <> OLD.count". 
 But I want something like: run trigger if "NEW <> OLD" 
 An Example: 
 
 The point is, there was an update, but  **nothing has changed**
.
But the trigger ran anyway. IMHO there should be a way it doesn't. 
 I know that I could have used  
 
 IF NOW.b <> OLD.b 
 
 for this example. 
 BUT imagine a large table with changing columns.
You have to compare every column and if the database changes you have to adjust the trigger.
AND it doesn't "feel" good to compare every column of the row hardcoded :) 
 **Addition**

 As you can see on the line  
 
 Rows matched: 1  Changed: 0  Warnings: 0 
 
 MySQL knows that the line didn't change. But it doesn't share this knowledge with the trigger.
A trigger like "AFTER REAL UPDATE" or something like this would be cool. 
 
 As a workaround, you could use the timestamp (old and new) for checking though, that one is  not  updated when there are no changes to the row. (Possibly that is the source for confusion? Because that one is also called 'on update' but is not executed when no change occurs)
Changes within one second will then not execute that part of the trigger, but in some cases that could be fine (like when you have an application that rejects fast changes anyway.) 
 For example, rather than 
 
 you could use 
 
 Then you don't have to change your trigger every time you update the scheme (the issue you mentioned in the question.) 
 **EDIT: Added full example**

 
 It is working because of mysql's behavior on handling timestamps.
The time stamp is only updated if a change occured in the updates. 
 Documentation is here: 
 https://dev.mysql.com/doc/refman/5.7/en/timestamp-initialization.html 
 
 
 
 BUT imagine a large table with changing columns. You have to compare every column and if the database changes you have to adjust the trigger. AND it doesn't "feel" good to compare every row hardcoded :) 
 
 Yeah, but that's the way to proceed. 
 As a side note, it's also good practice to pre-emptively check before updating: 
 
 In your example this would make it update (and thus  **overwrite**
)  two  rows instead of three. 
 
 I cant comment, so just beware, that if your column supports NULL values, OLD.x<>NEW.x isnt enough, because 
 
 returns 0 as same as 
 
 So it will not track changes FROM and TO NULL 
 The correct way in this scenario is  
 
 
 You can do this by comparing each field using the  NULL-safe equals operator   and then  negating the result using  . 
 The complete trigger would become:  
 
 (Based on a  different answer of mine .) 
 
 In here if there any row affect with new insertion Then it will update on different table in the database. 
 
 
 Use the following query to see which rows have changes: 
 
 The results of this query should consist of all the new records that are different from the old ones. 
 
 
 