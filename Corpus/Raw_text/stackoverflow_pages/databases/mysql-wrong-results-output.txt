*** mysql-wrong-results-output ***

 I have 3 tables with the following data: 
 1st table called connections where   is the one who follows and   is the one who is followed. 
 It has the following rows: 
 
 2nd table called questions. It has a column for for the asker called   and another for the one who receives the question called  . When the asker is called "sys.tem" and the target called "every.one", it's considered a global question and could be answered by all members. 
 Anonymous users could ask and their ip is recorded as the  .  
 It has the following rows: 
 
 The 3rd table is called answers. The id in the answers table is the same as the question id. This table has a column for id and username and answer. 
 
 I want a query which combines the following conditions related to "mikha" and the people he follows: 
 1)   is NOT "mikha" 
 2)    is either "mikha" or any of the users he follows. 
 3) If   equals to "every.one" and answered by "mikha", show the question. 
 4) If   equals to "every.one" and answered by any of the people whom "mikha" follows, show the question and its answer. If no answer by the users whom "mikha" follow, don't show the question. 
 5) If   equals to "every.one" and is not answered by any one at all, show the question once.  
 6) If   equals to "every.one" and is not answered by "mikha" and not answered by any of the people he follows, show the question only once. 
 I use the following query: 
 
 The result I expect: 
 
 The result I actually get: 
 
 I built a scheme on  http://sqlfiddle.com/#!2/29929e/1  to show you the results I actually get 
 Thanks :) 
 
 The problem is that - in some circumstances - you want to show a question twice when only one matching answer exists. I quote: 
 
 So, i want to show it only once for "mikha" whether it's answered or not and show it again each time it's answered by any of the people "mikha" follows 
 
 This duplication makes things pretty hard. 
 I tried to solve that with a   and it seems to work. However, I still haven't fully understood your requirements... 
 Anyway, here we go: 
 
 Test it live: 
 With answer from mikha for question 8 
 Without answer from mikha for question 8 
 
 OK, lets start from the simplest one (Your first rule): 
 
 Now lets add Your second rule - now more complexity is added... 
 
 Now the third rule (for everyone answered by mikha): 
 
 Now for the fourth rule: 
 
 Fifth rule (Jesus!): 
 
 And for the last one:  
 
 I think that rule 4 and rule 6 are kinda against each other (contradicting could be said) and when used in one query it would have the same effect as if omitted... 
 I didn't test any of the queries but I believe they work. 
 
 I would suggest that one of the main issues with your starting point is that you need to join your connections table twice - once for answers and once for questions. 
 The code below gives inline comments on what it's doing. I would also agree with other answers in suggesting that numeric id fields would be better for comparisons - and I would also advise putting a unique rowid field on the answers table (better still, change   to   and then make   the unique field. 
 
 It doesn't give you two rows for question 8, but I couldn't really work out why you wanted that. The issue there is that it's not clear which of your rules are additive and which are combinatory. If you can explain which rules should "add" a row rather than just providing another reason to show a row, maybe we can get you that extra row for question 8 too. 
 