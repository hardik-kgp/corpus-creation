*** naming-conventions-for-tables-and-columns-in-database ***

 
 
 
 
 
 This question already has answers here :
                            
                         
 
 
 Closed  7 years ago . 
 
 
 
 **Possible Duplicate:**

 Database, Table and Column Naming Conventions?   
 
 Each time when new project starts, Iâ€™m thinking about naming conventions of table and columns in database. Which case is your recommendation and why? 
 Case 1. column_name 
Case 2. ColumnName 
Case 3. Column_Name 
Case 4. columnName  
 
 You should use case #1 because it's free of case sensitivity problems. Also, camel case sucks with acronyms. 
 
 Also, spaces between words are visually more pleasant than jamming everything together. Absolutely worth whatever perceived pain of typing an underscore there is. Underscores simulate spaces and compound nouns and phrases have spaces in normal, written language. TheOnlyPeopleToTypeLikeThisMayHaveBeenTheRomans. 
 
 Whatever you decide to choose, sticking to the same is most important, that is be consistent. 
 I prefer #2 as this is imo most readable and as mentioned before underscore is ugly and annoying to type. #4 is second best. #3 i like the least, both uppercase and underscore is overkill. 
 
 I agree with #2 for two reasons: 
 
 Underscores ARE a pain to type. 
 In .Net properties are usually cased this way.  This makes all your naming match up - which is handy and helps in situations where you are using an ORM. 
 
 Coincidentally, I believe Java developers trend to use #4 in their classes. I'd change my answer to #4 if the client software is in Java. 
 
 I vote for "Whichever one you used in the previous project" Consistency in this case is probably more important than any particular ideology... 
 
 I Like case 2, values seem to stand out to me better that way.  Whatever you pick, keep it consistent! 
 
 I use case 2 (ColumnName) - because underscores are a pain to type.   
 Underscores are OK in index names, triggers, or other objects that aren't frequently typed.  I leave them out of tables, columns, views, stored proc names since those are names that are frequently used and reaching for that underscore can slow you down if you use it often. 
 
 I name my tables exactly the same as I name the objects which I am going to create to wrap them.  This works well with modern ORMs (Object relational mappers) because they can often create an object model for you based on your database structure (or the other way around).  The accepted answer seems to belittle the "pain of typing an underscore", but I take it seriously.  Suffering from RSI, especially in my pinkys, which I use to hold down the Shift and Ctrl keys, I do absolutely everything I can to avoid unnecessary underscores.  Of course, a good answer to this issue is to remap your CapsLock key to either the Shift key or the Underscore key.  But in any case, I add this answer to an old question because no one mentioned working with your ORM.  Since I do most programming in .NET most of my properties are camel cased and so I name my db columns in camel case as well.  I have absolutely no problem camel casing abbreviations.  So I do things like: 
 PersonDao.GetIdByName("Hello world"). 
 Camel casing definitely gets annoying for long names... but then, I avoid long names.  Usually it means that I've organized things incorrectly.  And if I determine that I haven't, well... in those cases, long names are so rare in my code and the situation so unique, that it doesn't slow me down anyway. 
 I think naming's absolutely of paramount importance.  And just like some people have an XML fetish, others have database fetishes.  Personally, I like to use my ORMs to ignore my database completely (or as much as possible).  To facilitate this, I name my columns just as I name the properties in code.  So, ultimately, underscore hating aside, I use whatever conventions exist for the language my code exists in. 
 
 I just love camelCasing (4) great readability, no underscore 
 