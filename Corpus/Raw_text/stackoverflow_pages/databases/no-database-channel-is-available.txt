*** no-database-channel-is-available ***

 I have an app which connects to the internet and stores data in an SQL database. I tested with iOS4, it works completely as it should. When I upgrade to the new version though, I get an NSInternalInconsistencyException, with this as the reason:  
 
 '_obtainOpenChannel -- NSSQLCore 0x951a640: no database channel is available' 
 
 From what I can gather, my database is being accessed by something when it shouldn't be, though I can't understand where or why. 
 Can anyone help me locate and properly diagnose my problem? 
 
 I found something for this one: 
 I got the error (among some other ones, seemingly randomly appearing) while I was accessing a managed object's relationships in a different thread than the one the managed context was created in. There have been some  **changes with respect to concurrent access to managed objects in iOS5**
 (see here  http://developer.apple.com/library/ios/#releasenotes/DataManagement/RN-CoreData/_index.html#//apple_ref/doc/uid/TP40010637 ) - and although the doc states the default behaviour should be as pre-iOS5 it apparently is not true, my code did work without problems in iOS4.2. 
 For now, my workaround was to do all the relationship-access thingies in the main thread, store the data in an array, and access the data I need in the other thread via that array. No more errors at least. This is not the 'nice' solution I suppose, as I should (and will) change the way I concurrently access managed objects, but I'm not going to change that in a hurry now. 
 
 This default concurrency type for   is  , which means it can only be used by a single thread. From the documentation: 
 
 You promise that context will not be used by any thread other than the
  one on which you created it. 
 
 You can instead create a managed object context that is backed by a private queue for multithreaded use: 
 
 To use the managed object context from a different thread, use   (asyncronous) or   (synchronous), e.g. 
 
 The documentation says you don't need to use the block API from the thread that created the managed object context. 
 Another option is to create separate managed object contexts for each thread. 
 See the  iOS 5 release notes  for more info. 
 