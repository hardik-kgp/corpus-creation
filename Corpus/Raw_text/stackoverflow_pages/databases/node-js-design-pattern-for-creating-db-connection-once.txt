*** node-js-design-pattern-for-creating-db-connection-once ***

 I am looking for help with a design pattern for creating a database connection in my node.js application. 
 It seems obvious to do: 
 module1: 
 
 module2: 
 
 It seems painful to have to penalize every single person who wants to get the db connection with the requirement of using a callback. 
 I could do this: 
 module1: 
 
 This makes it so that getting the db connection is simple and fast, but means we have to "wait" at node startup time for the connection to be established. 
 Which is the better design?  Is there a better way of doing things? 
 
  module: 
 
 Other modules: 
 
 This creates the DB client instance once at startup. I like this solution because the creation code is encapsulated in a separate module and the other modules can get access to the client with one require() statement. 
 
 Best answer I've seen for this is: 
 in start.js: 
 
 in databases.js: 
 
 This way you can do the async startup of the database server without that awkward / dangerous waiting period. 
 
 I wrote  connect-once  just for solving this kind of problems. There are two main goals, that are achived by this module: 
 
 Connection should be initialized before request arrives 
 Connection should be initialized once, even there are multiple requests coming in at the same time 
 
 You can look at  express-mongo-db  and  express-mongoose-db  as examples of usage. 
 