*** node-js-doesnt-have-a-good-orm-for-managing-mysql-schema-migrations-so-can-i ***

 I need to use Node.js, but it doesn't have a good ORM for MySQL. So I'm planning on using SQLAlchemy to define my schema. And then use node-mysql to do low-level queries (of course, I wouldn't be able to use SQLAlchemy's query language coz it's in python.) 
 What do you guys think? 
 sequelize  seems to be the best one...but it doesn't seem that many people are using it. Also, what about migrations? How would I handle that? 
 node-orm  doesn't seem very active either. 
 Thoughts on this? 
 
 Sequelize  is pretty good ORM for MySQL and has excellent documentation. You can use  node-migrate  for migrations. 
 
 We are using Sequelize.js in our Node project and I guess it kind of does the job done but there are gotchas. One example is that the MySQL Sequelize query engine does case sensitive string matching on the SQL string that you feed it (this.sql.indexOf('SELECT') == 0). This means it can fail if your SQL happens to be lowercase. SQL keywords  are usually case insensitive  (although upper case by convention) so the Sequelize implementation seems like a hack. 
 There is migration support in Sequelize as of version 1.3.0 but I haven't used it and I'm considering rolling my own instead. 
 I come from a background of having used the Ruby ActiveRecord ORM and in light of this and the gotcha mentioned above I'm hesitant to recommend Sequelize. Unfortunately, I don't know what better alternatives are out there. 
 UPDATE1: there are other ORMs suggested under  "Which ORM should I use for Node.js and MySQL?" . 
 UPDATE2: I've released my Sequelize.js migration code  on Github 
 
 You can use  **light-orm**
 and  **mysql**
: 
 
 https://npmjs.org/package/light-orm  - ORM wrapper 
 https://npmjs.org/package/mysql  - Driver 
 
 Bookshelf.js is also pretty good, but, in some aspects, not flexible. For example, you can not execute SQL request and convert result to models. So, use light-orm. 
 