*** normalisation-2nf-vs-3nf ***

 Struggling to see the differences between them. I know we say 2NF is "the whole key" and 3NF "nothing but the key". 
 Referencing this great answer by Smashery:  What are 1NF, 2NF and 3NF in database design? 
 The example used for 3NF is exactly the same as 2NF - its a field which is dependant on only one key attribute. How is the example for 3NF different from the one for 2NF? 
 Thanks 
 
 Suppose that some relation satisifies a non-trivial functional dependency of the form A->B, where B is a nonprime attribute. 
 2NF is violated if A is not a superkey but is a proper subset of a candidate key 
 3NF is violated if A is not a superkey 
 You have spotted that the 3NF requirement is just a special case (but not really so special) of the 2NF requirement. 2NF in itself is not very important. The important issue is whether A is a superkey, not whether A just happens to be some part of a candidate key. 
 
 Since you ask very specific question about an answer for  existing so question  here is an explanation of that (and basically I'll say what dportas already said in his answer, but in more words). 
 The examples of design that is not in 2NF and not in 3NF are not the same. 
 Yes, the dependency in both cases is on a single field. 
 However, in non 2NF example: 
 
 dependency is on the  part of the primary key 
 
 while in non 3NF example (which is in 2NF): 
 
 dependency is on a field that is  not a part of the primary key  (and also notice that in that example it  **does satisfy**
 2NF; this is to show that even if you check for 2NF you should also check for 3NF) 
 
 In both cases to normalize you would create additional table which would not exhibit update anomalies (example of update anomaly: in 2NF example, what happens if you update   for  , but not for  ? You get inconsistent=meaningless=unusable data). 
 So, if you memorize  the key, the whole key and nothing but the key , which covers both 2NF and 3NF, that should work for you in practice when normalizing. The distinction between 2NF and 3NF might seem subtle to you (question if in the additional dependency the attribute(s) on which the data is dependent are part of candidate key or not) - and, well, it is - so just accept it. 
 
 
 **2NF**
 allows non-prime attributes to be functionally dependent on non-prime attributes 
 
 but 
 
 **3NF**
 allows non-prime attributes to be functionally dependent only on super key 
 
 Thus,when a table is in 3NF it is in 2NF and 3NF is stricter than 2NF 
 Hope this helps... 
 
 You have achieved the 3rd NF when there are no relations between the key and other columns that don't depend on it. 
 Not sure my professor would have said that like this but this is what it is. 
 If you're "in the field". Forget about the definitions. Look for "best practices". One is DRY : Don't Repeat Yourself. 
 If you follow that principle, you already master everything you need for NF. 
 Here is an example.
Your table has the following schema: 
 
 Age and name are related to the person entry (=> id) but the model depends to the car and not the person. 
 Then, you would split it in two tables: 
 
 You can have replication in 2FN but not in 3FN anymore. 
 Normalization is all about non-replication, consistency, and from another point of view foreign keys and JOINs. 
 The more normalized the better for data but not for performance nor understanding if it gets really too complicated. 
 
 2NF follows the partial dependency whereas 3NF follows the transitive functional dependency. It is important to know that the 3NF must be in 2NF and support transitive functional dependency. 
 