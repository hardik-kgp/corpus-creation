*** nosql-vs-relational-database ***

 Recently  **NoSQL**
 has gained immense popularity.  
 What are the advantages of  **NoSQL**
 over traditional  **RDBMS**
? 
 
 Not all data is relational.  For those situations, NoSQL can be helpful. 
 With that said, NoSQL stands for "Not Only SQL".  It's not intended to knock SQL or supplant it.   
 SQL has several very big advantages:  
 
 Strong mathematical basis. 
 Declarative syntax. 
 A well-known language in Structured Query Language (SQL). 
 
 Those haven't gone away. 
 It's a mistake to think about this as an either/or argument.  NoSQL is an alternative that people need to consider when it fits, that's all. 
 Documents can be stored in non-relational databases, like CouchDB. 
 Maybe reading  this  will help. 
 
 The history seem to look like this: 
 
 Google needs a storage layer for their inverted search index. They figure a traditional RDBMS is not going to cut it. So they implement a NoSQL data store, BigTable on top of their GFS file system. The major part is that thousands of cheap commodity hardware machines provides the speed and the redundancy. 
 Everyone else realizes what Google just did. 
 Brewers  CAP theorem  is proven. All RDBMS systems of use are CA systems. People begin playing with CP and AP systems as well.  K/V stores  are vastly simpler, so they are the primary vehicle for the research. 
 Software-as-a-service systems in general do not provide an SQL-like store. Hence, people get more interested in the NoSQL type stores. 
 
 I think much of the take-off can be related to this history. Scaling Google took some new ideas at Google and everyone else follows suit because this is the only solution they know to the scaling problem right now. Hence, you are willing to rework everything around the distributed database idea of Google because it is the only way to scale beyond a certain size. 
 C - Consistency  
A - Availability  
P - Partition tolerance 
K/V - Key/Value 
 
 NoSQL is better than RDBMS because of the following reasons/properities of NoSQL 
 
 It supports semi-structured data and volatile data 
 It does not have schema 
 Read/Write throughput is very high 
 Horizontal scalability can be achieved easily  
 Will support Bigdata in volumes of Terra Bytes & Peta Bytes 
 Provides good support for Analytic tools on top of Bigdata 
 Can be hosted in cheaper hardware machines 
 In-memory caching option is available to increase the performance of queries 
 Faster development life cycles for developers 
 
 **EDIT:**
  
 To answer "why RDBMS cannot scale", please take a look at  RDBMS Overheads  pdf written by Stavros Harizopoulos,Daniel J. Abadi,Samuel Madden and  Michael Stonebraker 
 **RDBMS's have challenges in handling huge data volumes of Terabytes & Peta bytes**
. Even if you have Redundant Array of Independent/Inexpensive Disks (RAID) & data shredding, it does not scale well for huge volume of data. You require very expensive hardware. 
 **Logging**
: Assembling log records and tracking down all changes in database structures slows performance. Logging may not be necessary if recoverability is not a requirement or if recoverability is provided through other means (e.g., other sites on the network). 
 **Locking**
: Traditional two-phase locking poses a sizeable overhead since all accesses to database structures are governed by a separate entity, the Lock Manager. 
 **Latching**
: In a multi-threaded database, many data structures have to be latched before they can be accessed. Removing this feature and going to a single-threaded approach has a noticeable performance impact. 
 **Buffer management**
: A main memory database system does not need to access pages through a buffer pool, eliminating a level of indirection on every record access. 
 **This does not mean that we have to use NoSQL over SQL.**
  
 Still, RDBMS is better than NoSQL for the following reasons/properties of RDBMS 
 
 Transactions with  **ACID**
 properties - Atomicity, Consistency, Isolation & Durability 
 **Adherence to Strong Schema**
 of data being written/read 
 **Real time query management**
 ( in case of data size < 10 Tera bytes ) 
 Execution of complex queries involving  **join & group by clauses**

 
 We have to use RDBMS (SQL) and NoSQL (Not only SQL) depending on the business case & requirements 
 
 NOSQL has no special advantages over the relational database model. NOSQL does address certain limitations of current SQL DBMSs but it doesn't imply any fundamentally new capabilities over previous data models. 
 NOSQL means only no  SQL  (or "not only SQL") but that doesn't mean the same as no  relational . A relational database in principle would make a very good NOSQL solution - it's just that none of the current set of NOSQL products uses the relational model. 
 
 RDBMS  focus more on relationship and  NoSQL  focus more on storage.  
 You can consider using  NoSQL  when your  RDBMS  reaches bottlenecks.  NoSQL  makes  RDBMS  more flexible. 
 
 The biggest advantage of NoSQL over RDBMS is  **Scalability**
. 
NoSQL databases can easily scale-out to many nodes, but for RDBMS it is very hard. 
Scalability not only gives you more storage space but also much higher performance since many hosts work at the same time. 
 
 If you need to process huge amount of data with high performance  
 OR  
 If data model is not predetermined  
 then  
 NoSQL database is a better choice. 
 
 Just adding to all the information given above 
 NoSql Advantages: 
 1) NoSQL is good if you want to be production ready fast due to its support for schema-less and object oriented architecture. 
 2) NoSql db's are eventually consistent which in simple language means they will not provide any lock on the data(documents) as in case of RDBMS and what does it mean is latest snapshot of data is always available and thus increase the latency of your application. 
 3) It uses MVCC (Multi view concurrency control) strategy for maintaining and creating snapshot of data(documents). 
 4) If you want to have indexed data you can create view which will automatically index the data by the view definition you provide. 
 NoSql Disadvantages: 
 1) Its definitely not suitable for big heavy transactional applications as it is eventually consistent and does not support ACID properties. 
 2) Also it creates multiple snapshots (revisions) of your data (documents) as it uses MVCC methodology for concurrency control, as a result of which space get consumed faster than before which makes compaction and hence reindexing more frequent and it will slow down your application response as the data and transaction in your application grows.
To counter that you can horizontally scale the nodes but then again it will be higher cost as compare sql database. 
 
 From  mongodb.com : 
 
 NoSQL databases differ from older, relational technology in four main areas: 
 **Data models**
: A NoSQL database lets you build an application without having to define the schema first unlike relational databases which make you define your schema before you can add any data to the system. No predefined schema makes NoSQL databases much easier to update as your data and requirements change. 
 **Data structure**
: Relational databases were built in an era where data was fairly structured and clearly defined by their relationships. NoSQL databases are designed to handle unstructured data (e.g., texts, social media posts, video, email) which makes up much of the data that exists today. 
 **Scaling**
: Itâ€™s much cheaper to scale a NoSQL database than a relational database because you can add capacity by scaling out over cheap, commodity servers. Relational databases, on the other hand, require a single server to host your entire database. To scale, you need to buy a bigger, more expensive server. 
 **Development model**
: NoSQL databases are open source whereas relational databases typically are closed source with licensing fees baked into the use of their software. With NoSQL, you can get started on a project without any heavy investments in software fees upfront. 
 
 