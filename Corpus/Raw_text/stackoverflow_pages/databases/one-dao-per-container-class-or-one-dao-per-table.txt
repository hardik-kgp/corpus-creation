*** one-dao-per-container-class-or-one-dao-per-table ***

 I have a 'container' class with fields that are contained in several database tables, and I use the DAO pattern for accessing the data. 
 The question is, should I create a single DAO for this 'container' class, or is it better to have one DAO per table and combine their data? 
 
 You should design your DAO according to your application needs, not the layout of your database. Start of with one DAO, and if it becomes too large, then refactor it into multiple DAOs in a way that makes sense to your code. 
 The whole point of a DAO is to  hide  any database concepts (like tables) from your application. Your application should just view it as a service with some useful methods. 
 For example, if your application needs some user data that comes from both the Users table and the EmailAddresses table, your application code should not have to coordinate two DAOs - it should call one DAO method getUserDetails() and the DAO will hide the fact that multiple tables need to be called. 
 I am recommending the first of the options in your question, but I wouldn't restrict yourself to the rule "one DAO per container class". 
 