*** onetoone-between-two-tables-with-shared-primary-key ***

 I'm trying to set up the following tables using JPA/Hibernate: 
 
 There may be many users and every user may have max one validation code or none. 
 Here's my classes: 
 
 I create a user and then try to add a validation code using the following code: 
 
 When I try to run it I get a org.hibernate.PersistentObjectException: detached entity passed to persist: User 
 I have also tried to use the following code in my Validation class: 
 
 and when I create a validation code I simply do: 
 
 But then since User is null I get org.hibernate.PropertyValueException: not-null property references a null or transient value: User.code 
 Would appreciate any help regarding how to best solve this issue! 
 
 If you use Hibernate you can also use 
 
 Hibernate will make sure that the ID of Validation will be the same as the ID of the User entity set. 
 
 I have been able to solve this problem of "OneToOne between two tables with shared primary key" in pure JPA 2.0 way(Thanks to many existing threads on SOF). In fact there are two ways in JPA to handle this. I have used eclipselink as JPA provider and MySql as database. To highlight once again no proprietary eclipselink classes have been used here. 
 
 First approach is to use AUTO generation type strategy on the Parent Entity's Identifier field. 
 
 Parent Entity must contain the Child Entity Type member in OneToOne relationship(cascade type PERSIST and mappedBy = Parent Entity Type member of Child Entity) 
 
 Child Entity must not contain an identifier field. It must contain a member of Parent Entity Type with Id, OneToOne and JoinColumn annotations. JoinColumn must specify the ID field name of the DB table. 
 
 Above approach internally uses a default DB table named SEQUENCE for assigning the values to the identifier field. If not already present, This table needs to be created as below. 
 
 
 Second approach is to use customized TABLE generation type strategy and TableGenerator annotation on the Parent Entity's Identifier field. 
 
 Except above change in identifier field everything else remains unchanged in Parent Entity. 
 
 There is no change in Child Entity. It remains same as in the first approach. 
 This table generator approach internally uses a DB table APP_SEQ_STORE for assigning the values to the identifier field. This table needs to be created as below. 
 
 
 
 
 Are you using JPA or JPA 2.0 ? 
 If Validation PK is a FK to User, then you do not need the Long userId attribute in validation class, but instead do the   annotation alone. It would be: 
 
 Try with it and tell us your results. 
 
 You need to set both   and  . 
 If you set just the  , then the   for   is 0 and is deemed detached. If you set just the  , then you need to make the   property nullable, which doesn't make sense here. 
 To be safe, you can probably set them both in one method call: 
 
 I marked the method   so that Hibernate will ignore it. Also, so you can still have   and   work as expected with out any "side effects." 
 