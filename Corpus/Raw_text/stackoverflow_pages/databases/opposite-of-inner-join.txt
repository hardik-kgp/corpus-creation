*** opposite-of-inner-join ***

 What will be the opposite of inner join? For a table table Person  , I want to know the rows in Person with bad   which don't have a row in the   table. 
 
 
 What will be the opposite of inner join?  
 
 An OUTER join, which can be of three options: 
 
 LEFT 
 RIGHT 
 FULL 
 
 This is a good visual representation of JOINs 
 
 I want to know the rows in Person with bad AddrId which don't have a row in the Address table. 
 
 **Using LEFT JOIN/IS NULL**

 
 **Using NOT EXISTS**

 
 **Using NOT IN**

 
 
 An Inner join is not diametric to an Outer Join. They serve different purposes. However, a common pattern to find rows from one table that do not exist in another is to use an Outer Join: 
 
 This returns all rows from Table1 and any matching rows from Table2 such that if a given Table1 row has no Table2 match, a null for the Table2 columns are returned. By then requiring that a non-nullable column (Table2.PrimaryKeyCol) be Null, I will get all rows from Table1 that do not exist in Table2. Using your example table names we would have something like: 
 
 
 If you consider an inner join as the rows of two tables that meet a certain condition, then the opposite would be the rows in  either  table that don't. 
 For example the following would select all people with addresses in the address table: 
 
 I imagine the "opposite" of this would be to select all of the people without addresses and all addresses without people.  However this doesn't seem to be what you are asking, you seem to be interested in just one component of this: all the people without an address in the addresses table. 
 For this a left join would be best: 
 
 Note that often some prefer to write it differently as in their opinion it is more readable (however in my experience with large tables it performs worse than the above way): 
 
 
 I think the best solution would be using  . Like this: 
 
 The query above will return every person that the AddrId is set but does not have a corresponding record in the Address table. 
 **Obs.:**
 Use the constant 1 in the   query to avoid table access. 
 