*** oracle-materialized-view-error-code-included ***

 When I run the following code on Oracle 10g: 
 
 I get this error upon trying to create the materialized view  : 
 
 I don't understand how any of the objects in the "FROM clause" depend on each other. 
 How do I get this to work? Currently the only work around I can think of is to replace   with a ordinary table and manually delete and refresh the data. This approach works, but seems like a bit of a hack. 
 Alternatively (and perhaps preferably) I'd just like to see an example where can have two tables, and join them into a materialized view, where one of the base tables is bulk updated (and does not need to be reflected in the materialized view) but the others updates should be reflected in the materialized view (i.e. it's kind of "half"  , and half  ). I tried using  , but when using   I found no evidence of fash refresh on commit being available. I'd also like to do this with  s as well.  
 
 You can make the test4 materialized view refresh fast like this: 
 
 Your case doesn't work because for a nested MV to work, an underlying MV cannot be a basic MV. This sounds strange at first, but you'd need a trick like you did with test3 to make it work. Also, for a join MV to work, the materialized view logs of the underlying table need to be created WITH ROWID. 
 You might want to look at a series of blog posts I wrote about fast refreshable materialized view errors. They describe almost all restrictions: 
 Basic MV's 
 Join MV's 
 Aggregate MV's 
 Union all MV's 
 Nested MV's 
 MV_CAPABILITIES_TABLE 
 Summary   
 Regards, 
Rob. 
 
Added: 29-09-2011

 Here is an example with a nested MV using the union all trick on test2 as well: 
 
 Hope this helps! 
 
 Quoting from  Oracle 
 
 **Restrictions for Using Multitier Materialized Views**

 Both master materialized views and materialized views based on
  materialized views must: 
 
 Be primary key materialized views  
 Reside in a database that is at  9.0.1 or higher compatibility level 
 
 Note: The COMPATIBLE initialization parameter controls a database's
  compatibility level. 
 
 However, I'll try a solution for you. I'll be back. 
 **Update**
: Sorry I didn't succeded. You have too many restrictions :) 
 
 You may be out of luck, per the Oracle documentation: 
 http://download.oracle.com/docs/cd/B28359_01/server.111/b28313/basicmv.htm#i1006734 
 
 You can create a nested materialized view on materialized views, but  **all parent and base 
  materialized views must contain joins or aggregates. If the defining queries for a materialized view do not contain joins or aggregates, it cannot be nested.**
 All the underlying objects (materialized views or tables) on which the materialized view is defined must have a materialized view log. All the underlying objects are treated as if they were tables. In addition, you can use all the existing options for materialized views. 
 
 