*** oracle-ora-02270-no-matching-unique-or-primary-key-for-this-column-list-erro ***

 I have two tables,   and  , here is the structure 
 
 Now, i want to add foreign key constraint to   referencing to   table, as  
 
 this throws  , doing some investigation it appears that we need to have either   constraint on   but I cannot have that as one   can have multiple   associated with him, any thoughts or suggestions on how to fix this issue? 
 Researched  ORA-02270  and  SO related question 
 
 The ORA-2270 error is a straightforward logical error: it happens when the columns we list in the foreign key do not match a primary key or unique constraint on the parent table.  Common reasons for this are 
 
 the parent lacks a PRIMARY KEY or UNIQUE constraint altogether  
 the foreign key clause references the wrong column in the parent table 
 the parent table's constraint is a compound key and we haven't referenced all the columns in the foreign key statement. 
 
 Neither appears to be the case in your posted code.  But that's a red herring, because your code  does not run  as you have posted it.  Judging from the previous edits I presume you are not posting your actual code but some simplified example.  Unfortunately in the process of simplification you have eradicated whatever is causing the ORA-2270 error.   
 
 That statement failed because USER is a reserved keyword so we cannot name a table USER.  Let's fix that: 
 
 And lo! No ORA-2270 error. 
 Alas, there's not much we can do here to help you further.  You have a bug in your code.  You can post your code here and one of us can spot your mistake.  Or you can check your own code and discover it for yourself.   
 
 Note: an earlier version of the code defined HOB.USERID as VARCHAR2(20). Because USER.ID is defined as a NUMBER the attempt to create a foreign key would have hurl a different error: 
 
 ORA-02267: column type incompatible with referenced column type 
 
 An easy way to avoid mismatches is to use foreign key syntax to default the datatype of the column:  
 
 
 The data type in the Job table (Varchar2(20)) does not match the data type in the USER table (NUMBER NOT NULL). 
 
 The scheme is correct, User.ID must be the primary key of User, Job.ID should be the primary key of Job and Job.UserID should be a foreign key to User.ID. Also, your commands appear to be syntactically correct. 
 So what could be wrong? I believe you have at least a Job.UserID which doesn't have a pair in User.ID. For instance, if all values of User.ID are: 1,2,3,4,6,7,8 and you have a value of Job.UserID of 5 (which is not among 1,2,3,4,6,7,8, which are the possible values of UserID), you will not be able to create your foreign key constraint. Solution: 
 
 will delete all jobs with nonexistent users. You might want to migrate these to a copy of this table which will contain archive data. 
 
 Most Probably when you have a missing Primary key is not defined from parent table. then It occurs. 
 Like Add the primary key define in parent as below:  
 
 Hope this will work. 
 
 In my case the problem was cause by a disabled PK. 
 In order to enable it: 
 
 I look for the Constraint name with: 
 
 Then I took the Constraint name in order to enable it with the following command: 
 
 
 
 I faced the same issue in my scenario as follow: 
 I created textbook table first with 
 
 Then chapter table: 
 
 Then topic table: 
 
 Now when I wanted to create a relationship called chapter_topic between chapter (having composite primary key) and topic (having single column primary key), I faced issue with following query: 
 
 The solution was to refer to composite foreign key as below: 
 
 Thanks to APC post in which he mentioned in his post a statement that: 
 
 Common reasons for this are  
  - the parent lacks a constraint altogether  
  - the parent table's constraint is a compound key and we haven't referenced all the columns in the foreign key statement. 
  - the referenced PK constraint exists but is DISABLED 
 
 
 Isn't the difference between your declaration of USERID the problem 
 
 
 If primary key is not already defined on parent table then this issue may arise. Please try to define the primary key on existing table. 
For eg: 
 
 
 When running this command: 
 
 I got this error: 
 
 The referenced table has a primary key constraint with matching type.  The root cause of this error, in my case, was that the primary key constraint was disabled. 
 
 
 