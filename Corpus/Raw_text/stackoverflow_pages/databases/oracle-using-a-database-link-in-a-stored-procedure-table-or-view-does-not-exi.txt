*** oracle-using-a-database-link-in-a-stored-procedure-table-or-view-does-not-exi ***

 I currently have an issue whereby I cannot reference a table in a linked database within a stored procedure. I get the error message: 
 
 ORA-00942: table or view does not exist 
 
 Here are the steps I took on the host machine (running oracle 10g) to set up the database link to the remote database (running oracle 11g). The steps are accurate, but some some names have been changed, though they have been kept consistent. 
 
 Update tnsnames.ora, adding a new entry: 
 
 Create database link, as the user who will later be creating and executing the stored procedure: 
 
 Prove database link is working by selecting from it: 
 
 Create stored procedure that depends on working database link: 
 
 Explode own head after staring at the following error message for over an entire working day: 
 
 
 I have tried many things to try to sort this issue out, including: 
 
 When creating the database link, not using quotes around the username and password. Link creates fine, but selecting from it gives me this error: 
 
 Tried various combinations of username and password in upper/lowercase. Received same error as 1. 
 Tried single quotes instead of double quotes around username and password. Recieved this error: 
 
 Proved I have full access to the remote db by connecting into it with sqlplus: 
 
 
 I'm not sure what to do next. The possible next step is to start looking at issues on the remote database, and perhaps see if other databases can connect to it. Another would be to look at incompatibilities going from host 10g to remote 11g. 
 
 OK so I was able to get this working, of sorts. 
 It turns out that when creating the database link, the double quotes around the username and password fields were causing the issue. To summarise: 
 If they were present, and the link created as so: 
 
 
 The remote database  **could**
 be queried via sql 
 The stored procedure  **could not**
 be compiled, recieving the ORA-942 error 
 As the procedure could not be compiled, it could not be executed 
 
 When the double quotes are not present: 
 
 
 The remote database  **could not**
 be queried via sql, recieving an invalid password error (detailed in the question) 
 The stored procedure  **could**
 be compiled with no errors. 
 The stored procedure  **executes as expected**
, retrieving data from across the database link, and displaying it. 
 
 So, even though the remote database cannot be querued via sql, recieving an invalid password error, the procedure that uses this same connection information compiles and executes normally. 
 I'm sure you'll agree, this is a curious state of events, and I genuinely stumbled across making it work in my scenario. I'm not quite sure I would call it a solution, as there are plenty of unanswered questions. 
 Hopefully if someone comes here via google, they'll find this answer useful, and at least get their code running. 
 GC. 
 
 I faced the same issue on 11gR2, and I'm thankful to this forum for helping me find the problem. The way to make the db link work in both SQL and procedure is to follow the below syntax (enclose only the password within double quotes). 
 
 
 I think I see a problem here.  Is the user who is executing the stored procedure the same user who created the stored procedure? 
 You said, "Create database link, as the user who will later be  executing  the stored procedure". 
 If the user creating the database link is different from the user creating the stored procedure, that may be your problem. 
 Try creating the stored procedure and database link as the same user, or creating a public database link. 
 Then, since Oracle default is definer rights, you can have anyone execute the stored procedure (assuming they have been granted execute privilege on the procedure). 
 