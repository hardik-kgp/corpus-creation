*** pdo-php-insert-into-db-from-an-associative-array ***

 I have an array like this 
 
 When I do a var-dump I get this -> 
 
 Now I am trying to add this to the DB using the IN statement - 
 
 The problem I am having is that implode return a string. But the 'phone' column is an integer in the database and also the array is storing it as an integer. Hence I am getting the SQL error as my final query look like this -- 
 
 Which is a wrong query. Is there any way around it. 
 My column names are dynamic based what the user wants to insert. So I cannot use the placeholders like  **:phone**
 and  **:image**
 as I may not always get a values for those two columns. Please let me know if there is a way around this. otherwise I will have to define multiple functions each type of update. 
 Thanks. 
 
 Last time I checked, it was not possible to prepare a statement where the affected columns were unknown at preparation time - but that thing seems to work - maybe your database system is more forgiving than those I am using (mainly postgres) 
 What is clearly wrong is the implode() statement, as each variable should be handled by it self, you also need parenthesis around the field list in the insert statement.  
 To insert user defined fields, I think you have to do something like this (at least that how I do it); 
 
 If you cannot trust the field names in $a, you have to do something like 
 
 Where validfields is a function that you write that tests each fieldname and checks if it is valid (quick and dirty by making an associative array $valfields=array('name'=>1,'email'=>1, 'phone'=>1 ... and then checking for the value of $valfields[$f], or (as I would prefer) by fetching the field names from the server) 
 
 SQL query parameters can be used only where you would otherwise put a  literal value . 
 So if you could see yourself putting a quoted string literal, date literal, or numeric literal in that position in the query, you can use a parameter. 
 You can't use a parameter for a column name, a table name, a lists of values, an SQL keyword, or any other expressions or syntax. 
 For those cases, you still have to interpolate content into the SQL string, so you have some risk of SQL injection.  The way to protect against that is with  whitelisting  the column names, and rejecting any input that doesn't match the whitelist. 
 
 Because all other answers allow  **SQL injection**
. For user input you need to filter for allowed field names: 
 
 
 You actually can have the   and   fields bound with null values in advance. The structure of the table is fixed anyway and you probably should got that way.  
 
 But the answer to your question might look like this: 
 
 
 I appreciated MortenSickel's answer, but I wanted to use named parameters to be on the safe side: 
 
 
 I know this question has be answered a long time ago, but I found it today and have a little contribution in addition to the answer of @MortenSickel. 
 The class below will allow you to insert or update an associative array to your database table. For more information about MySQL PDO please visit:  http://php.net/manual/en/book.pdo.php 
 
 dbConnection class usage: 
 
 