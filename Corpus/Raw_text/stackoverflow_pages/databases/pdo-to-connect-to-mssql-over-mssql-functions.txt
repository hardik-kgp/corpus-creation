*** pdo-to-connect-to-mssql-over-mssql-functions ***

 There is a range of   Which are not in the depreciation process. 
 They work the same as   functions; they need to me manually escaped, please find the link to the manual below:  
 http://uk1.php.net/manual/en/book.mssql.php 
 MSSQL_* Functions was apart of   but have now been moved into  
 Furthermore, using PDO for your Database Construct, is available but is  **experimental**

 http://php.net/manual/en/ref.pdo-dblib.php 
 But my overall question, from the fact that PDO/MySQLI is being pushed as main database communication solution, should I stop using the functions    
 Or is it possible for:  
 PDO Connection:  
 
 But if this process is still listed as experimental, should developers using   for their databases, wait till this extension is  stable for MSSQL Servers 
 So at the end of the  day, PDO Extension or MSSQL_* Functions even though they are not depreciated.. If so, why? 
 
 **My Own Opinion**

 I have been using   to connect to a   database for over a year now and so far I have found absolutely no issues. 
 In fact, I looked into using the   functions before migrating to  , and came to the conclusion that they were a much less reliable, not to mention, insecure way of connecting to a   Database. 
 **Logically**

 From a logical point of view,   is also the better option as it only takes a few tweaks to the code in order to change from   to  . 
 I wrote a wrapper class for the PDO class that makes connecting to these databases very easy. 
 Consider this as an example: 
 
 Anything that is unique to   is defined in this extension and then passed up to the parent class  . The beauty of PDO is that the code in the file   does not have to be altered in any way to work with any database (or, all the databases that I have tried thus far). 
 So all that is needed here is a small extension for each database type and it will work. 
 Whereas, with the native   functions, if you were to decide to change database for any particular reason, you would have to rewrite everything. Not to mention, you would have to use PDO for MySQL anyway given that the   functions are now deprecated. 
 **My Testing with PDO**

 I have been running complex stored procedures, with  ,  ,  , on databases with 100,000,000+ records in them. These have worked absolutely flawlessly, and continue to do so! 
 
 Another reason not to use the   functions is that they are no longer supported on Windows with PHP version 5.3 or later: 
 **See Here**

 The SyBase Extension falls under the same category as the   functions. They are procedural, impractical and not portable at all! 
 **Functionality**

 At a glance, I have noticed that none of these extensions have a function equivalent to the   function. Whereas, in PDO, there is no need for this 
 **Conclusion**

 It goes without saying that I am a moral PDO supporter (and this has only come after using it for 1 year!). That is not to say I will not listen to other peoples opinions on the   functions, it will just be very hard to persuade me, and I think most people, that these functions can even compete the PDO. 
 So to conclude, in my opinion, PDO is the way forward for the following key reasons: 
 
 It is very portable, easy to switch to different databases with minimal code 
 It is secure without the need of functions like  
 It is fast becoming the norm for developers 
 If you do not have experience with Object Oriented Programming, then it is an excellent introduction 
 It comes pre-installed with most PHP Packages 
 It can execute comples queries with ease, including stored procedures 
 **After benchmarking it with a MySQL database against the old deprecated **
** functions, it has proved to be faster in a lot of cases, if not all cases.**
 -  **See Here**

 
 I asked a similar question a while back, and the same conclusion was drawn: 
 **See here**
  
 
 This could spark up a good debate. I guess the only way to test the stability of the PDO functions towards Microsoft SQL Servers, is to setup your own local testing zone and push the PDO Class to its abilities. 
 As you said, php5-sybase contains MSSQL Functions and are not in the deprecation process. 
 I guess it's down to what the developer feels comfortable with. 
 If you're happy with MSSQL_* Functions, then go ahead and use them, but there could be a possibility they will end up getting deprecated from PHP altogether in the near future -- it's happening with MySQL Functions. 
 Although, if you're looking for a change and new challenges, with added security from SQL Injection, then go ahead and try out the PDO compatibility with MSSQL Servers. 
 It's entirely down to you. 
 From my preference & and guess many other developers preference, I would say go for the PDO functions. I assume it would work as normal.  
 
 
 PDO is definitely the way to go and for linux users I stongly recommend going with the sybase connector and the the dblib DSN. 
 For ubuntu users with PHP7 it would be: 
 
 And for connecting: 
 
 And you should be good to go. 
 
 PDO is the obvious choice with security in mind.  PDO code is portable - it can be adjusted to send information to a number of databases without having to change the function calls and only changing a few parameters. 
 The MSSQL class is not portable the way that PDO is portable. 
 PDO has excellent support for prepared statements while MSSQL has none.
PDO acts as an abstraction layer much like JDBC in Java and is portable.
PDO has support for transactions, is better for handling errors 
 Hope the answer is obvious! 
 