*** pg-undefinedtable-error-relation-users-does-not-exist ***

 I saw this question up before, but only for rspec. I haven't created test yet because it's too advanced for me but one day soon i will! :P 
 I get this error when I try to sign-up/login into my app. I used devise to create user and also  omniauth2  to sign-in with  google . 
 **this is the error**

 
 I tried  , but it already is created: in schema table users exist. Has anyone got this error before? 
 **database.yml**

 config=/opt/local/lib/postgresql84/bin/pg_config 
 
 
 At first, you shall detach all connections out of database. By default you use the  development  environment. Then try to reset database with the following: 
 
 
 The rake db:reset task will drop the database and set it up again. This is functionally equivalent to rake db:drop db:setup. 
 This is not the same as running all the migrations. It will only use the
  contents of the current schema.rb file. If a migration can't be rolled back,
  rake db:reset may not help you. To find out more about dumping the schema see
  Schema Dumping and You section.  Rails Docs 
 
 If the trick doesn't help, drop the database, then re-create it again, migrate data, and if you have seeds, sow the database: 
 
 or in short way (since 3.2): 
 
 Since   implies drop, create and migrate the db. Because the default environment for   is  development , in case if you see the exception in spec tests, you should re-create db for the  test  environment as follows: 
 
 or with just loading the migrated scheme: 
 
 In most cases the test database is being sowed during the test procedures, so   task action isn't required to be passed. Otherwise, you shall to prepare the database (this is deprecated in  Rails 4 ): 
 
 and then (if it is actually required): 
 
 On newer versions of Rails the error  **ActiveRecord::NoEnvironmentInSchemaError**
 may be risen, so just prepend the tasks with a database environment set task:  db:environment:set : 
 
 
 Your test database is not ready for rspec. 
 Prepare your test database for rspec to fix this error 
 
 It will drop, create and add migrations to your test database 
 In case rake task is aborted with message like 'PG::Error: ERROR:  database "[your_db_test]" is being accessed by other users' execute this one 
 
 
 I encountered this error, and upon my research, found out that one of the reasons for  **PG undefinedtable error relation users does not exist**
 error is: 
 This error is a migration error. You may have created new model with some database attributes. After creating model you have to migrate attributes to your rails app schema. 
 If you are using local machine, for development, you can use command  
 
 If you're using heroku 
 
 
 I had a similar error. The root of my error was that I had a reference to a Rails model in my factories.rb file. So it caused a load error issue. The fix was to wrap the reference in a block or   so that it delays running it. 
 Here was the BROKEN code: 
 
 And it was erroring because   was not defined when factories.rb was being loaded. I wrapped the   call in a block and it solved the issue: 
 Fixed code: 
 
 Note: probably not best practice to need to call your model like this, but it was a solution to DRY up my code. 
 
 I was getting this error as well when running rspec: 
 
 It was resolved for me after I ran 
 
 
 This is often caused by a bug in ActiveAdmin. Here's how to get around the bug: 
 If you're using ActiveAdmin, whichever table PG says doesn't exist, comment out the contents of that ActiveAdmin rb file. 
 For example, for this case  , comment out the entire contents of  , then uncomment after you've done your migrations. 
 
 That issue for me was being caused by Factory Girl rails. I would recommend for those using it to rename the specs/factories folder to specs/temp and attempting 
 RAILS_ENV=your_environment bundle exec rake db:migrate --trace 
 If it passes, then you just found what was causing it. A quick dig through the Factory Girl Rails gem github repo helped me identify the issue. 
 The factories were failing because I was trying to instantiate a Model that didn't exist upon running! Code sample below:  
 
 Encapsulating the Array in a block (adding {}) did the fix for me. Note that payment_options can take more than one payment option in the example... 
 
 Refer to the  Dynamic Attributes part of the Factory Girl Rails docs  for more info. 
 Don't forget to rename your factories folder back! 
 
 I was facing the same problem and then I discovered the following solution. 
 Make sure You have entered all of the following credentials in the database.yml file and they are correct: 
 
 
 I had this problem after I deleted the users table. solutions was changing 
 
 to 
 
 
  was missing in migrations.
instead of throwing  **syntax error**
 it throws  
 
 PG::UndefinedTable: ERROR: relation roles does not exists 
 
 after wasting hours I finally figured out that migration is missing  . 
 **Erroneous Migration:**

 
 **Fixed and Correct Migration**

 
 This could be a bug with rails and might help someone, instead of struggling and wondering. 
 
 I was getting a similar error while trying to run tests using rspec. 
 I followed  Малъ Скрылевъ's steps but still ended up short. The final step I needed to do was load my schema into my test database using:  
 
 After that the problem went away and I could move on to the next bug. Hopefully that gives you some insight. 
 
 Remove the Admin folder and run rake again. 
 
 (I know this is old, but for future googlers) 
 Are you using  ? I know specifically   is a problem, but maybe others as well. It doesn't have to be   though. Generically the solution is to comment out the offending model, class, whatever, and un-comment any sections the errors ask for. 
 For me, what was happening is that   is reading the   model to see what you have as arguments for   (the class method
i.e.  ) 
 But, it will read the whole file and if this isn't a new project it might get tripped up by other class methods relying on other things (in my case it was the   gem, and then an  
 The answer was to comment out the   model except for the   lines(s) * and   should run fine. 
 
 otherwise I got this error: 
 ArgumentError: Mapping omniauth_callbacks on a resource that is not omniauthable
Please add   to the   model 
 
 
 The most probable cause is that your rake is using different environment from database.yml than your webserver. 
 
 I had this problem and it turned out to be caused by  Grape API . I noticed in the stack trace that the routes file was being read during the migration. 
 In routes.rb the Grape api is mounted 
 
 And in the API were references to the missing model. So, thanks to  this answer  I put it in a block that detects whether its being run by the server or during the migration. 
 
 And it worked. 
 
 If you get this error while migrating, make sure your model name is plural  
 e,g.  
 
 
 In my case, I had to comment out  2    files. Here were my steps: 
 
 Initial error/stacktrace (note we're using   on this project):
 '
/Users/matthewcampbell/Sites/code/stack-builders/AchieveX/config/routes.rb:3:in  '
/Users/matthewcampbell/Sites/code/stack-builders/AchieveX/config/environment.rb:5:in `'
Tasks: TOP => db:migrate => environment
(See full trace by running task with --trace)
 
 
 I commented out the   file per  Arcolye's answer above  and tried to migrate my database again.  
 Same error. 
 I looked at the stacktrace a bit more closely, and noticed that in fact   was throwing the exception - and sure enough, that file has a dependency on my   table (via executing  ). 
 Finally, commenting out the contents of   allowed me to finally migrate my database successfully. 
 FYI: there's a discussion  here  in   about whether that gem should load the database when required. 
 
 So having the same problem just now. Remember to have only one model in each migration. That solved it for me.  
 I came across the answer here. 
 
 I was having the following error and doing a lookup into all my application code for   I was unable to find it. I also looked at the db and it was updated. 
 Turns out it was a file under fixtures   that was causing the trouble. 
 
 
 I was catching the Error: 
 
 It turned out to be a super easy fix. I had copied files over from an older version of the project and forgot to nest them inside of a "migrate" folder. When I did that it solved the problem for me. 
 
 For anyone who is still having this problem, in my case, it was my factory in FactoryGirl that was triggering this error.  
 I was trying to add reference via '.new' or '.create'. 
 
 it usually can happen when you use  **wrong type of association**
  between models, check for dependency destroy and has_many associations, for example:  
 **wrong way that can cause this trouble:**
  
 article.rb  
 
 subcategory.rb 
 
 **right way:**

 article.rb  
 
 subcategory.rb 
 
 