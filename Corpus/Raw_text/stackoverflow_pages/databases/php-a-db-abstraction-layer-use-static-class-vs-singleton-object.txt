*** php-a-db-abstraction-layer-use-static-class-vs-singleton-object ***

 I don't want to create a discussion about singleton better than static or better than global, etc. I read dozens of questions about similar subjects on SO, but I couldn't come up with an answer to this SPECIFIC question, so I hope someone could now illuminate me by answering this question with one (or more)  **real simple EXAMPLES**
, and not  just theoretical discussions. 
 In my app I have the  **typical DB class to abstract the DB layer**
 and to perform tasks on DB without having to write everywhere in code  
 **I could write the class either as a STATIC CLASS:**

 
 **OR as a SINGLETON:**

 
 Then after in my app if I want to query the DB i could do  
 
 To me Singleton has got the only advantage to avoid declaring as   each method of the class. I'm sure some of you could give me an  **EXAMPLE**
 of real advantage of singleton in this  **specific case**
. Thanks in advance. 
 
 What is wrong with the following (simplified) example: 
 
 This demonstrates how you can make use of lazy loading connections, and still have flexibility to use different database connections. 
 The database instances will only connect to their individual connection when an object that consumes one of the instances (in this case one of the models) decides to call a method of the instance.  
 
 In my most recent project, I actually went against the "good" design principles by making the database class entirely static. The reason behind this is that I used a lot of caching on PHP objects. Originally I had the database passed in through the constructor of each object as a dependency injection, however I wanted to make sure that the database didn't have to connect unless absolutely necessary. Thus, using a database as a member variable of that object would not have been practical because if you unserialized an object from the cache, you wouldn't want to connect to the database unless you actually performed an operation on it. 
 So in the end I had only two (public) static functions, Database::fetch() and Database::execute() which would check whether or not it had already connected, and if not, it would connect and perform the query. This way I wouldn't have to worry about deserialization and would connect as seldom as possible. It technically makes unit testing impossible though. 
 You don't always have to follow every single good practice. But I would still recommend against doing what I did since some would consider it premature optimization. 
 
 My advice: STOP using Singleton and static all together. 
 Why? Because you will insert dependencies that will render your code unusable in other projects, and will not allow to unit test it. Also forget about loose coupling if using singleton. 
 The alternatives? Dependency Injection. 
 http://www.potstuck.com/2009/01/08/php-dependency-injection 
 
 Making DB library static is certainly shorter and quicker, than doing: 
 $db = DBSingleton::blabla(); // everytime I need ya 
 But also, since it is global, tempting to use everywhere. 
 So, choose other methods if you  **want**
 clean code... and choose static if you  **need**
 quick code ;-) 
 
 
 