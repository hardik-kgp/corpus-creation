*** pizza-food-database-design ***

 I want to create a website that allow customer to order food from the website. 
 There are two food type: 
 
 regular food/drink (eg: burger, donner kebab, chip, coke, pepsi etc) 
 Pizza food (eg: Margherita Pizza, meat Pizza, etc) 
 
 If they select pizza from the list - they may need to select Base (thin crust, dep crust), Extras, and the pizza size/Option. 
 How to design the tables in this situation? 
 **Note**
: Each item have 1 or more options. An option may have extra (1 or more) or without extra.  If item is pizza type - then it may have Base (crust) 
 **Screenshots prototype**

 See two screenshots I am trying to implement, I on the right path on the database design or what could have done better? 
 **Pizza customize:**

 
 **Beef Burger customize:**

 
 **Extras functionality (Dropdown  / tickboxes)**

 On the extras, sometime I need to add multiple extras for the dropdown instead tickboxes. That means the customer can only choose 1 from 1, 2 or 3 dropdowns.  
 
 **Database design**

 How would you set up your database modell to implement something like the above customization options? 
Here is what I have came up with: 
 **categories Table:**

 
 **items Table:**

 
 - item_type (0 = normal, 1 = pizza, 2 = set meal) 
 **item_options Table:**

 
 **item_extras Table:**

(Do you think should have separate tables for pizza toppin and extras?) 
 
 **item_pizza_base Table:**

 
 **SQL Result:**

 
 As you can see extras from burger and pizza in 1 table.. should it be separated?    
 
 keep in mind, price extras for each item is not always the same. For example: Pizza size 10" will cost 1.00 for each extra but 0.50 for 12" pizzas. Also there will be a case for each pizza will have different cost of extras. 
 Is the database design correct or what could be improved? 
 
 
 Im stuck with Extras functionality - how to design table and fields for the dropdown extras? See my question "Extras functionality (Dropdown / tickboxes)"    
 
 If you need to make a dropdown, put the values for the dropdown in a table. 
It's OK to put extra values in there, as long as you can easily separate out the values you need in the dropdown.   
 
 As soon as you know the item, you can populate the dropdown using: 
 
 **Normalize those tables**

This table has a major flaw: 
 
 It's not normalized, put the names in a separate labels table, just like in the example above. If a row (excluding the id) is  **not**
 unique then your data is not normalized and you're doing it wrong.   
 Because you are using a lot of joins, it's IMHO best to use InnoDB, it has some cool features to speed up joins that use PK's a lot. 
 **No matter what people say**

Don't denormalize until slowness starts.   
 **Use indexes**

Put an index on all fields named *_id. 
Also put an index on alls fields that are used in   clauses often. 
 **Do not**
 put indexes on fields with low cardinality, so no index on a boolean or enum field! 
Indexes slow down inserts and speed up selects.   
 
 You have an order table. Then an order item or order line table. With items that can have ingredients on it, you end up with a table that holds the ingredients. With pizza, in particular, you have to worry about halfs, so people can order different things on each half. So far it looks like you are heading in the right direction. 
 The way I go through design is I figure out the "objects" first. There are tangible objects, like a burger or a pizza, and there are intangible objects, like an order, an order line. 
 Pizza Hut has one of the best user interfaces for setting up pizza on the web. I would look at it, as it will give you some ideas on how to store the data. 
 