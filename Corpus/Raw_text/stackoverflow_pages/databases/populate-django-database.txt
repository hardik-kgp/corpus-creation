*** populate-django-database ***

 I'm developing a Django application which stores user information like their address, phone number, name, etc. 
 I've worked with PHP's  Faker  library and the seeder included with Laravel. I had been able to populate the database with fake data but now I'm working with Django. 
 I'd like to populate my users table with around 200 entries. But, I don't want the entries to be random strings. I want it to be fake data like I can get with Laravel. I don't know how to do it. 
 What do I need to do to persist fake data? 
 This is for showing the end user the application with some entries so he can see statistics and other things. The data will need to stay in the database. I tried using unit tests but that deletes the database after the unit test ends. 
 Thanks! 
 
 To get it done in a nice way you'll need a combination of  Factory Boy ,  Faker  and  custom management commands . 
 Factory Boy allows you to create templates for producing valid objects and Faker generates fake data. 
 When you install Factory Boy,  , you also get Faker. 
 Given, 
 
 You can define a Factory as follows: 
 
 Then, you can create fake users by calling  . 
 One way to get your 200 fake users would be to jump into the shell,  , and do: 
 
 Another way, which can give you a lot more flexibility, is to create a custom management command. 
 For example, create   (this will be the management command name) in the directory   (to have it discovered by Django) with the following: 
 
 And, you'd run it via the command-line with   or   for example. 
 
 Try the   app: 
 https://github.com/gregmuellegger/django-autofixture 
 
 This app aims to provide a simple way of loading masses of randomly
  generated test data into your development database. You can use a
  management command to load test data through command line. 
 It is named autofixture because it is based on django's fixtures.
  Without autofixture you add test data through the admin to see how the
  non-static pages on your site look. You export data by using dumpdata
  to send it to your colleagues or to preserve it before you make a
  manage.py reset app and so on. As your site grows in complexity the
  process of adding and re-adding data becomes more and more annoying. 
 
 See this django packages too, maybe can help with fake tests and others problems.
 https://www.djangopackages.com/grids/g/fixtures/ 
 