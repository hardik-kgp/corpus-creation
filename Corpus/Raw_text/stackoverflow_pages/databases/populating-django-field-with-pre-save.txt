*** populating-django-field-with-pre-save ***

 
 I'm assuming the above is how to create and store a slug when a title is inserted into the table TodoList, if not, please correct me! 
 Anyhow, I've been looking into pre_save() as another way to do this, but can't figure out how it works.  How do you do it with pre_save()? 
 is it like 
 
 I'm guessing no.  What is the code to do this? 
 Thanks! 
 
 Most likely you are referring to  django's   signal . You could setup something like this: 
 
 If you dont include the sender argument in the decorator, like  , the callback will be called for all models. 
 You can put the code in any file that is parsed during the execution of your app,   is a good place for that. 
 
 
 
 you can use django signals.pre_save: 
 
 
 The   signal hook  is indeed a great place to handle slugification for a large number of models. The trick is to know what models need slugs generated, what field should be the basis for the slug value. 
 I use a class decorator for this, one that lets me mark models for auto-slug-generation, and what field to base it on: 
 
 This registers a signal handler for specific models only, and lets you vary the source field with each model decorated: 
 
 Note that no attempt is made to generate a  unique  slug value. That would require checking for integrity exceptions in a transaction or using a randomised value in the slug from a large enough pool as to make collisions unlikely. Integrity exception checking can only be done in the   method, not in signal hooks. 
 
 Receiver functions must be like this: 
 
 Notice that the function takes a  **sender**
 argument, along with wildcard keyword arguments  **(**kwargs)**
; all signal handlers must take these arguments. 
 All signals send  **keyword arguments**
, and may change those keyword arguments at any time. 
 Reference  here . 
 