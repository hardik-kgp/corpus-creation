*** possible-pdoexception-errors-mysql-5 ***

 So I'm setting up an installer for my web app, and have input fields for database credentials. Part of my validation process includes testing the database connection (using PHP's PDO library). If the connection fails, I want to be able to differentiate between a bad password, bad address, nonexistent database name, etc. so I can reference the proper input field on the form. 
 Can anone point me towards a reference that outlines the possible error codes/messages that are returned with a PDOException? 
 **Edit:**
 It occurred to me that these error codes/messages are probably database-specific and the native database codes/errors may simply be getting passed through. If this is the case, I am currently only working with MySQL 5 databases. 
 
 The MySQL documentation is the complete reference for  error codes . 
 Error codes starting at 1000 are  server errors .  These include errors like: 
 
 Error: 1045 SQLSTATE: 28000 ( )
Message: Access denied for user '%s'@'%s' (using password: %s) 
 Error: 1049 SQLSTATE: 42000 ( )
Message: Unknown database '%s' 
 
 Error codes starting at 2000 are  client errors .  These include errors like: 
 
 Error: 2005 ( ) Message: Unknown MySQL server host '%s' (%d) 
 Error: 2003 ( ) Message: Can't connect to MySQL server on '%s' (%d) 
 
 I'm not going to list all possible errors, because they're already documented, and I don't know which ones you need to handle.  For instance, errors 2001 and 2002 are specific to UNIX socket connections, which may be irrelevant to your target platform. 
 Don't forget to use   and   instead of simply the   message. 
 
 Re your comment about   -- No, it doesn't seem to be supported in that way.  I did a quick test, to   a  .  Unfortunately, its code is simple "0" even though the error code and SQLSTATE are included in the exception message. 
 Exception::getCode()  is part of the base   class, as of PHP version 5.1.0.  It's up to the respective PDO driver implementation to utilize this object field.  At least for the MySQL driver, they apparently didn't. 
 
 I'm not sure about PDO, but you can use the   function which returns something like this: 
 
 
 Access denied for user  **youruser**
@ **yourserver**

 Unable to select database 
 ...etc 
 
 
 You could then display these errors directly to the user, or play around to get a list of all possible errors, and determine the cause of the error directly. 
 