*** postgres-and-indexes-on-foreign-keys-and-primary-keys ***

 Does Postgres automatically put indexes on Foreign Keys and Primary Keys?  How can I tell?  Is there a command that will return all indexes on a table? 
 
 PostgreSQL automatically creates indexes on primary keys and unique constraints, but not on the referencing side of foreign key relationships.  
 When Pg creates an implicit index it will emit a  -level message that you can see in   and/or the system logs, so you can see when it happens. Automatically created indexes are visible in   output for a table, too. 
 The  documentation on unique indexes  says: 
 
 PostgreSQL automatically creates an index for each unique constraint and primary key constraint to enforce uniqueness. Thus, it is not necessary to create an index explicitly for primary key columns. 
 
 and the documentation on  constraints  says: 
 
 Since a DELETE of a row from the referenced table or an UPDATE of a
  referenced column will require a scan of the referencing table for
  rows matching the old value, it is often a good idea to index the
  referencing columns. Because this is not always needed, and there are
  many choices available on how to index, declaration of a foreign key
  constraint does not automatically create an index on the referencing
  columns. 
 
 Therefore you have to create indexes on foreign-keys yourself if you want them. 
 Note that if you use primary-foreign-keys, like 2 FK's as a PK in a M-to-N table, you will have an index on the PK and probably don't need to create any extra indexes. 
 While it's usually a good idea to create an index on (or including) your referencing-side foreign key columns, it isn't required. Each index you add slows DML operations down slightly, so you pay a performance cost on every  ,   or  . If the index is rarely used it may not be worth having. 
 
 If you want to list the indexes of all the tables in your schema(s) from your program, all the information is on hand in the catalog: 
 
 If you want to delve further (such as columns and ordering), you need to look at pg_catalog.pg_index. Using   comes in handy for figuring out how to query the catalog. 
 
 This query will  **list missing indexes on foreign keys**
,  original source . 
 
 
 Yes - for primary keys, no - for foreign keys (more in the  docs ). 
 
 in  "psql"  shows a description of a table including all its indexes. 
 
 I love how this is explained in the article  Cool performance features of EclipseLink 2.5 
 
 **Indexing Foreign Keys**

 The first feature is auto indexing of foreign keys. Most people incorrectly assume that databases index
  foreign keys by default. Well, they don't. Primary keys are auto
  indexed, but foreign keys are not. This means any query based on the
  foreign key will be doing full table scans. This is any  **OneToMany**
,
   **ManyToMany**
 or  **ElementCollection**
 relationship, as well as  **many**
  **OneToOne**

  relationships, and  **most queries on any relationship involving joins or
  object comparisons**
. This can be a major perform issue, and you should
  always index your foreign keys fields. 
 
 
 For a  , an index will be created with the following message: 
 
 For a  , the constraint will not be created if there is no index on the referenc **ed**
 table. 
 An index on referenc **ing**
 table is not required (though desired), and therefore will not be implicitly created. 
 