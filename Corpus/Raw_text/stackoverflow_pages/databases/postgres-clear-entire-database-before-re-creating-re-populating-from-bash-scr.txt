*** postgres-clear-entire-database-before-re-creating-re-populating-from-bash-scr ***

 I'm writing a shell script (will become a cronjob) that will: 
 1: dump my production database 
 2: import the dump into my development database 
 Between step 1 and 2, I need to clear the development database (drop all tables?). How is this best accomplished from a shell script? So far, it looks like this: 
 
 
 I'd just drop the database and then re-create it. On a UNIX or Linux system, that should do it: 
 
 That's how I do it, actually. 
 
 If you don't actually need a backup of the database dumped onto disk in a plain-text .sql script file format, you could connect   and   directly together over a pipe. 
 To drop and recreate tables, you could use the   command-line option for   to emit SQL commands to clean (drop) database objects prior to (the commands for) creating them. (This will not drop the whole database, just each table/sequence/index/etc. before recreating them.) 
 The above two would look something like this: 
 
 
 Although the following line is taken from a windows batch script, the command should be quite similar: 
 
 This command is used to clear the whole database, by actually dropping it. The   (in Windows should be  ) in the command is a windows style environment variable that evaluates to the database name. You will need to substitute that by your  . 
 
 To dump: 
 
 To restore: 
 
 
 I've used: 
 
 
 If you want to clean your database named "example_db": 
 1) Login to another db(for example 'postgres'): 
 
 2) Remove your database: 
 
 3) Recreate your database: 
 
 
 Note: my answer is about really deleting the tables and other database objects; for  deleting all data  in  the tables, i.e. truncating all tables , Endre Both has provided a similarily well-executed (direct execution) statement a month later. 
 For the cases where you can’t just  ,   or something, here’s a stand-alone SQL script I wrote, which is transaction-safe (i.e. you can put it between   and either   to just test it out or   to actually do the deed) and cleans up “all” database objects… well, all those used in the database our application uses or I could sensibly add, which is: 
 
 triggers on tables 
 constraints on tables (FK, PK,  ,  ) 
 indicēs 
 s (normal or materialised) 
 tables 
 sequences 
 functions / procedures (  probably  should be honoured  though) 
 all nōn-default (i.e. not   or DB-internal) schemata “we” own: the script is useful when run as “not a database superuser”; a superuser can drop  all  schemata (the really important ones are still explicitly excluded, though) 
 extensions (user-contributed but I normally deliberately leave them in) 
 
 Not dropped are (some deliberate; some only because I had no example in our DB): 
 
 the   schema (e.g. for extension-provided stuff in them) 
 aggregate functions 
 collations and other locale stuff 
 event triggers 
 text search stuff, … (see  here  for other stuff I might have missed) 
 roles or other security settings 
 composite types 
 toast tables 
 FDW and foreign tables 
 
 This is  **really**
 useful for the cases when the dump you want to restore is of a different database schema version (e.g. with Debian  , Flyway or Liquibase/DB-Manul) than the database you want to restore it into. 
 I’ve also got a version which deletes “everything except two tables and what belongs to them” in case someone is interested; the diff is small. Contact me if necessary. 
 **SQL**

 
 Tested, except later additions (  contributed by  Clément Prévost ), on PostgreSQL 9.6 ( ). Bugfixes and further improvements welcome! 
 