*** postgres-error-more-than-one-row-returned-by-a-subquery-used-as-an-expression ***

 I have two separate databases. I am trying to update a column in one database to the values of a column from the other database: 
 
 This is the error I am receiving: 
 
 
 
 Any ideas? 
 
 **Technically**
, to repair your statement, you can add   to the subquery to ensure that at most 1 row is returned. That would remove the error, your code would still be nonsense. 
 
 **Practically**
, you want to match rows  somehow  instead of picking an arbitrary row from the remote table   to update every row of your local table  . 
Your rudimentary question doesn't provide enough details, so I am  **assuming**
 a text column   in both tables (and   in  ) for the sake of this example: 
 
 But that's an extremely expensive way of doing things. 
 **Ideally**
, you should  **completely rewrite the statement**
.  
 
 This remedies a number of problems in your original statement. 
 
 Obviously, the  **basic problem**
 leading to your error is fixed. 
 It's almost always better to join in additional relations in the   clause of an   statement  than to run  **correlated subqueries**
 for every individual row. 
 When using dblink, the above becomes a thousand times more important. You do not want to call   for every single row, that's  **extremely expensive**
. Call it once to retrieve all rows you need. 
 With correlated subqueries, if  **no row is found**
 in the subquery, the column gets updated to NULL, which is almost always not what you want. 
In my updated form, the row only gets updated if a matching row is found. Else, the row is not touched. 
 Normally, you wouldn't want to update rows, when nothing actually changes. That's expensively doing nothing (but still produces dead rows). The last expression in the   clause prevents such  **empty updates**
: 
 
 
 
 This means your nested SELECT returns more than one rows.  
 You need to add a proper WHERE clause to it. 
 
 This error means that the   query has returned two or more rows in the   database. If you would like to update all customers, use a join instead of a scalar   operator. You need a condition to "connect" customers to store items in order to do that. 
 If you wish to update all  s to the same  , you need to supply a   clause to the remotely executed   so that the query returns a single row. 
 
 The fundamental problem can often be simply solved by changing an   to  , in cases where you've got a one-to-many relationship. For example, if you wanted to update or delete a bunch of accounts for a given customer: 
 
 
 The result produced by the Query is having no of rows that need proper handling this issue can be resolved if you provide the valid handler in the query like
1. limiting the query to return one single row 
2. this can also be done by providing "select max(column)" that will return the single row  
 