*** postgres-how-to-return-rows-with-0-count-for-missing-data ***

 I have unevenly distributed data(wrt date) for a few years (2003-2008). I want to query data for a given set of start and end date, grouping the data by any of the supported intervals (day, week, month, quarter, year) in PostgreSQL 8.3 ( http://www.postgresql.org/docs/8.3/static/functions-datetime.html#FUNCTIONS-DATETIME-TRUNC ). 
 The problem is that some of the queries give results continuous over the required period, 
as this one: 
 
 but some of them miss some intervals because there is no data present, as this one: 
 
 where the required resultset is: 
 
 A count of 0 for missing entries. 
 I have seen earlier discussions on Stack Overflow but they don't solve my problem it seems, since my grouping period is one of (day, week, month, quarter, year) and decided on runtime by the application. So an approach like left join with a calendar table or sequence table will not help I guess. 
 My current solution to this is to fill in these gaps in Python (in a Turbogears App) using the calendar module. 
 Is there a better way to do this. 
 
 You can create the list of all first days of the last year (say) with 
 
 Then you can join with that series. 
 
 This question is old. But since fellow users picked it as master for a new duplicate I am adding a proper answer. 
 **Proper solution**

 
 
 Use  , of course. 
  can produce a table of timestamps on the fly, and very fast. 
 It's generally faster to aggregate  before  you join. I recently provided a test case on sqlfiddle.com in this related answer: 
 
 PostgreSQL - order by an array 
 
 Cast the   to   ( ) for a basic format. For more use  . 
  is syntax shorthand to reference the first output column. Could be   as well, but that might conflict with an existing column of the same name. Or   but that's too long for my taste. 
 Works with the available interval arguments for  . 
  never produces   (  for no rows), but the   does. 
To return   instead of   in the outer  , use  .  The manual. 
 For a  **more generic solution or arbitrary time intervals**
 consider this closely related answer: 
 
 Best way to count records by arbitrary time intervals in Rails+Postgres 
 
 
 
 You could create a temporary table at runtime and left join on that.  That seems to make the most sense. 
 