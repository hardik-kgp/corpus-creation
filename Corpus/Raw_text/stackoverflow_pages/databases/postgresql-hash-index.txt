*** postgresql-hash-index ***

 Does anyone know a situation where a PostgreSQL HASH should be used instead of a B-TREE for it seems to me that these things are a trap. They are take way more time to CREATE or maintain than a B-TREE (at least 10 times more), they also take more space (for one of my table.columns, a B-TREE takes up 240 MB, while a HASH would take 4 GB) and I seem to have understood from my googling, that they do not SELECT faster than B-TREEs; yet the HASH may have recently been optimized or google was wrong.  
 Anyway, I wanted you guy's opinions and experiences. If these HASHs are evil, people should know.  
 Thanks 
Also: what about MySQL's HASHs? 
 
 Hashes are faster than B-Trees for cases where you have a known key value, especially a known unique value.  
 Hashes should be used if the column in question is  never  intended to be scanned comparatively with   or   commands. 
 Hashes are   complexity, B-Trees are   complexity ( iirc ) , ergo, for large tables with unique entries, fetching an  , they will be the most efficient way of looking it up.  
 This is  especially  practical when these unique fields are used on a join condition. 
 
 It's better to use a Hash index for text columns that are searched using = operator only. For example a URL column which needs to be indexed for lookups. 
 A Hash index is approximately 30% the size of a B-Tree index for something like a URL. 
 The reduced size allows PostgreSQL to use it's cache memory (Aka, shared_buffers) more efficiently. 
 
 As  http://www.postgresql.org/docs/9.2/static/sql-createindex.html  point Hash index are still not WAL-safe; which means that they are not 100% reliable for crashes (index has to be reconstructed and wrong response could happen on replications). Check also  http://www.postgresql.org/docs/9.1/static/wal-intro.html 
 
 I haven't tried this, but am considering this approach, to use hash indexes on non-logged temp tables.  
 My understanding is that they build faster, take less space & query slightly faster than b-tree.  
 According to  this benchmark , hash indices are a bit faster and somewhat smaller than BTree indices. However, you can't make a unique hash index with them -- additionally they are not WAL-logged. 
 