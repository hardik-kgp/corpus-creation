*** postgresql-index-on-string-column ***

 Say, I have a table  , and in this table I have unique constraints  , which is   type. For future query, I gonna add an index on this column.
The query will only have operation  , and I'll use B-TREE pattern since the Hash pattern is not recommended currently. 
 Question: From efficiency view, using B-TREE, do you think I should add a new column with numbers 1,2,3....,N corresponding to different homeaddress, and instead of adding index on  , I should add index on the number column? 
 I ask this question because I don't know how index works. 
 
 For simple equality checks ( ), a B-Tree index on a   or   column is simple and the best choice. It certainly helps performance  a lot . 
 Of course, a B-Tree index on a simple   performs better. For starters, comparing simple   values is a bit faster. But more importantly, performance is also a function of the size of the index. A bigger column means fewer rows per data page, means more pages have to be read ... 
 Since the   is hardly unique anyway, it's not a good natural primary key. I would strongly suggest to use a  **surrogate primary key**
 instead. A   column  is the obvious choice for that. Its only purpose is to have a simple, fast primary key to work with.  
 If you have other tables referencing said table, this becomes even more efficient. Instead of duplicating a lengthy string for the foreign key column, you only need the 4 bytes for an integer column. And you don't need to cascade updates so much, since an address is bound to change, while a surrogate pk can stay the same (but doesn't have to, of course). 
 Your table could look like this: 
 
 This results in two B-Tree indexes. A unique index on   and a plain index on  . 
 More about indexes in the manual . 
Postgres offers a lot of options - but you don't need any more for this simple case. 
 
 In Postgres, a unique constraint is enforced by maintaining a unique index on the field, so you're covered already. 
 In the event you decide the unique constraint on the address is bad (which, honestly, it is: what a spouse creating a separate account? about flatshares? etc.), you can create one like so: 
 
 