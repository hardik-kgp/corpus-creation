*** postgresql-optimizing-columns-size-for-numeric-fields ***

 I dont understand how Postgresql (9.2) calculate the column size (in kb), I have this tables: 
 
 And i populate them with this code, in order to have 10000 rows for each table; 
 
 Now, what I dont understand is how could be that: 
 
 So, the d_* tables has the same size, even if the precision (and the lenght of the data stored) is very different; 
 Table b1 is smaller than b2 even if has a bigger precision. 
 All tables has been flushed (vacuum, analize) before the  . 
 Im not been able to find an answer in  Postgresql's datatypes documentations , so I'm gonna ask it here:  **How does the size in kb grow in relation of the precision of numeric columns?**

 Im doing this tests in order to decide what precision/scale to use to store monetary types in the database for a CMS, I would like to have only 1 precision/scale value for all item's prices (not for the totals, where the scale must be of 2 decimals). 
 The more decimals I can store the better is, for the user (so I dont have limits when a customer ask to store 12 decimals for a specific items), but I want to understand how this decision will affect database size and performance. 
 
 From the  manual : 
 
 Numeric values are physically stored without any extra leading or trailing
  zeroes. Thus, the declared precision and scale of a column are maximums,
  not fixed allocations. (In this sense the numeric type is more akin to
  varchar(n) than to char(n).) The actual storage requirement is two bytes
  for each group of four decimal digits, plus three to eight bytes overhead. 
 
 The result of the  pg_total_relation_size  function includes indexes. The correct column size for each of the values you are inserting is: 
 
 So if you want to let the user to have a maximum of   decimals just define it as  . It will only use the space up to the number of existing decimals as trailing zeroes are not stored. 
 
 According to Postgresql doc, integer has 4 bytes, bigint - 8 bytes. The size of 
 
 11+(p/2) bytes, where p = precision, s = scale 
 Storage determined by size of numeric type, no padding. For Example: 
 
 