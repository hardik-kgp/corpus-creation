*** procedure-or-function-has-too-many-arguments-specified ***

 I am developing my very first stored procedure in   and need advice concerning the errors message. 
 
 Procedure or function  xxx too many arguments specified 
 
 which I get after executing the stored procedure   that calls another stored procedure called  . 
 When calling   (code see below) via right-mouse-click and ‘Execute stored procedure’ the query that appears in the query-window is: 
 
 The output is  
 
 Msg 8144, Level 16, State 2, Procedure etl_M_Update_Promo, Line 0 
  Procedure or function etl_M_Update_Promo has too many arguments specified. 
 
 **QUESTION**
: What does this error message exactly mean, i.e. where are too many arguments? How to identify them? 
 I found several threads asking about this error message, but the codes provided were all different to mine (if not in another language like   anyway). So none of the answers solved the problem of my   query (i.e. SPs). 
 Note: below I provide the code used for the two SPs, but I changed the database names, table names and column names. So, please, don’t be concerned about naming conventions, these are only example names! 
 Thanks in advance for any advice and thoughts! 
 (1) Code for SP1 [dbo].[M_UPDATES] 
 
 (2) Code for SP2  [etl_M_Update_Promo] 
 
 
 You invoke the function with 2 parameters (@GenId and @Description): 
 
 However you have declared the function to take 1 argument: 
 
 SQL Server is telling you that   only takes 1 parameter ( ) 
 You can alter the procedure to take two parameters by specifying  . 
 
 
 This answer is based on the title and not the specific case in the original post.  
 I had an insert procedure that kept throwing this annoying error, and even though the error says, "procedure....has too many arguments specified," the fact is that the procedure did NOT have enough arguments. 
 The table had an incremental id column, and since it is incremental, I did not bother to add it as a variable/argument to the proc, but it turned out that it is needed, so I added it as @Id and viola like they say...it works. 
 
 Use the following command before defining them: 
 
 
 For those who might have the same problem as me, I got this error when the DB I was using was actually  **master**
, and not the DB I should have been using.  
 Just put   on the top of your script, or manually change the DB in use in the SQL Server Management Studio GUI. 
 
 In addition to all the answers provided so far, another reason for causing this exception can happen when you are saving data from list to database using ADO.Net. 
 Many developers will mistakenly use   loop or   and leave the   to execute outside the loop, to avoid that make sure that you have like this code sample for example: 
 
 