*** psycopg2-disconnects-from-server ***

 I've been tackling this for a while. I setup a completely new machine. I've installed a fresh copy of postgresql and all my other dependencies. Basically, I get these database disconnections at random times. I can perform identical requests and either it works or it doesn't. Very nondeterministic in outward appearance. Watching logs at Postgresql, it doesn't even get a connection. Now, I would expect that if it never connected I would get this problem when establishing the connection and getting the cursor, but I get it when trying to actually use the connection later. Given the traceback below, I would expect to see a connection made in the pg logs, and then disconnected for some reason later. I don't, so I wonder if there is some clue in that mismatch. 
 
 
 This is a very similar question to the one posted here: 
 Django + FastCGI - randomly raising OperationalError 
 I imagine the answer will be the same to both if and when someone eventually figured it out.  This same problem has been bothering me for about a month now and I have no idea what could be causing it. 
 
 Do you   child processes (use preforked FastCGI or something similar)? This might be the reason that connection established in parent process doesn't work in child. If you use preforked method it's easy to switch to threading to see whether the problem has gone away. I saw exactly the same floating error in such case. 
 
 Even though it's very old question,
Best Solution I've found is in  this  answer.
just do the following: 
 
 and before calling fork or using multiprocessing execute: 
 
 
 In my case, my WSGI server, uWSGI, was forking my app processes such that the underlying connection pool was shared. This was causing undefined behavior that (non-deterministically) was sending connections down as OP saw.  
 I'd recommend ensuring your app processes are eagerly forked. In uWSGI you do that with the option 
 
 