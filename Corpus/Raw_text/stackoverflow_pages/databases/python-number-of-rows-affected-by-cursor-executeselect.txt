*** python-number-of-rows-affected-by-cursor-executeselect ***

 How can I access the number of rows affected by: 
 
 
 Try using  : 
 
  will hold a tuple with one element, the value of  .
So to find the number of rows: 
 
 Or, if you'd rather do it in one fell swoop: 
 
 PS. It's also good practice to use parametrized arguments whenever possible, because it can automatically quote arguments for you when needed, and protect against sql injection. 
 The correct syntax for parametrized arguments depends on your python/database adapter (e.g. mysqldb, psycopg2 or sqlite3). It would look something like 
 
 
 From  PEP 249 , which is usually implemented by Python database APIs: 
 
 Cursor Objects should respond to the following methods and attributes: 
 
 […] 
 
  
             This read-only attribute specifies the number of rows that the last .execute*() produced (for DQL statements like 'select') or affected (for DML statements like 'update' or 'insert'). 
 
 But be careful—it goes on to say: 
 
 The attribute is -1 in case no   has been performed on the cursor or the rowcount of the last operation is cannot be determined by the interface.  [7] 
 **Note:**

  Future versions of the DB API specification could redefine the latter case to have the object return   instead of -1. 
 
 So if you've executed your statement,  and  it works,  and  you're certain your code will always be run against the same version of the same DBMS, this is a reasonable solution. 
 
 The number of rows effected is returned from execute: 
 
 of course, as AndiDog already mentioned, you can get the row count by accessing the rowcount property of the cursor at any time to get the count for the last execute: 
 
 From the inline documentation of python MySQLdb: 
 
 
 In my opinion, the simplest way to get the amount of selected rows is the following: 
 The cursor object returns a list with the results when using the fetch commands (fetchall(), fetchone(), fetchmany()). To get the selected rows just print the length of this list. But it just makes sense for fetchall(). ;-) 
 Example: 
 
 