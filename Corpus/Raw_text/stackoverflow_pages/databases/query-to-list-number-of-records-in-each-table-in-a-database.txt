*** query-to-list-number-of-records-in-each-table-in-a-database ***

 How to list row count of each table in the database. Some equivalent of  
 
 I will post a solution but other approaches are welcome 
 
 If you're using SQL Server 2005 and up, you can also use this: 
 
 In my opinion, it's easier to handle than the   output. 
 
 A snippet I found at  http://www.sqlteam.com/forums/topic.asp?TOPIC_ID=21021  that helped me: 
 
 
 To get that information in SQL Management Studio, right click on the database, then select Reports --> Standard Reports --> Disk Usage by Table. 
 
 
 
 As seen here,  this will return correct counts, where methods using the meta data tables will only return estimates. 
 
 
 
 Output: 
 
 
 Well luckily SQL Server management studio gives you a hint on how to do this. 
Do this,  
 
 start a SQL Server trace and open the activity you are doing (filter
by your login ID if you're not alone and set the application Name
to Microsoft SQL Server Management Studio), pause the trace and discard any results you have recorded till now; 
 Then, right click a table and select property from the pop up menu; 
 start the trace again; 
 Now in SQL Server Management studio select the storage property item on the left; 
 
 Pause the trace and have a look at what TSQL is generated by microsoft. 
 In the probably last query you will see a statement starting with  
 when you copy the executed code to visual studio you will notice that this code generates all the data the engineers at microsoft used to populate the property window. 
 when you make moderate modifications to that query you will get to something like this: 
 
 Now the query is not perfect and you could update it to meet other questions you might have, the point is, you can use the knowledge of microsoft to get to most of the questions you have by executing the data you're interested in and trace the TSQL generated using profiler.  
 I kind of like to think that MS engineers know how SQL server work and, it will generate TSQL that works on all items you can work with using the version on SSMS you are using so it's quite good on a large variety releases prerviouse, current and future. 
 And remember, don't just copy, try to understand it as well else you might end up with the wrong solution. 
 Walter 
 
 This approaches uses string concatenation to produce a statement with all tables and their counts dynamically, like the example(s) given in the original question: 
 
 Finally this is executed with  : 
 
 
 Fastest way to find row count of all tables in SQL Refreence ( http://www.codeproject.com/Tips/811017/Fastest-way-to-find-row-count-of-all-tables-in-SQL ) 
 
 
 The first thing that came to mind was to use sp_msForEachTable  
 
 that does not list the table names though, so it can be extended to  
 
 The problem here is that if the database has more than 100 tables you will get the following error message: 
 
 The query has exceeded the maximum
  number of result sets that can be
  displayed in the results grid. Only
  the first 100 result sets are
  displayed in the grid. 
 
 So I ended up using table variable to store the results 
 
 
 The accepted answer didn't work for me on Azure SQL, here's  one  that did, it's super fast and did exactly what I wanted: 
 
 
 This sql script gives the schema, table name and row count of each table in a database selected: 
 
 Ref:  https://blog.sqlauthority.com/2017/05/24/sql-server-find-row-count-every-table-database-efficiently/ 
 Another way of doing this: 
 
 
 I think that the shortest, fastest and simplest way would be: 
 
 
 You could try this: 
 
 
 
 
 From this question:
 https://dba.stackexchange.com/questions/114958/list-all-tables-from-all-user-databases/230411#230411 
 I added record count to the answer provided by @Aaron Bertrand that lists all databases and all tables. 
 
 
 You can copy, past and execute this piece of code to get all table record counts into a table. Note: Code is commented with instructions 
 
 I have tested this code and it works fine on SQL Server 2014. 
 
 If you use MySQL >4.x you can use this: 
 
 Keep in mind that for some storage engines, TABLE_ROWS is an approximation. 
 
 
 Here   means a CLUSTERED index and   is a HEAP 
 