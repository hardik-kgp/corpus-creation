*** rails-checking-if-a-record-exists-in-database ***

 What is the most efficient of way of checking if a database will return a record before processing it.  Example:  
 This may or may not return a truck if the truck exists.  What is the most efficient way for me to ensure the page will not crash when processing this request.  How would I handle this both in the view and the controller if lets say I was using a loop to go through each truck and print out its number. 
 If the record does not exist I would like to be able to print out a message instead saying no records found. 
 
 If you want to check for the existence of an object why not use exists? 
 
 The   method has the advantage that is not selecting the record from the database (meaning is faster than selecting the record).
The query looks like: 
 
 You can find more examples in the  Rails documentation for #exists? . 
 
 Here is how you can check this.  
 
 **where**
 method returns an  **ActiveRecord::Relation object**
 (acts like an array which contains the results of the where), it can be empty but never be nil. 
 
 **OP actual use case solution**

 The simplest solution is to combine your DB check and retrieval of data into 1 DB query instead of having separate DB calls.  Your sample code is close and conveys your intent, but it's a little off in your actual syntax. 
 If you simple do   and this record does NOT exists, it will throw a   error when you call   because   may retrieve a   record if none are found that match your criteria. 
 That's because your query will return an array of objects that match your criteria, then you do a   on that array which (if no matching records are found) is  . 
 A fairly clean solution: 
 
 I recommend using clean syntax that "comments" itself so others know exactly what you're trying to do. 
 If you really want to go the extra mile, you could add a method to your   class that does this for you and conveys your intent: 
 
 Then you would call it like so: 
 
 The   method will retrieve the first record that matches your criteria or else returns   if no record is found with that criteria.  Note that the order of the   and   methods is important; you must call the   on the   model.  This is because when you call the   method you're actually returning an   object which is not what you're looking for here. 
 See ActiveRecord API for 'find_by' method 
 **General solutions using 'exists?' method**

 As some of the other contributors have already mentioned, the   method is engineered specifically to check for the existence of something.  It doesn't return the value, just confirms that the DB has a record that matches some criteria. 
 It is useful if you need to verify uniqueness or accuracy of some piece of data.  The nice part is that it allows you to use the   criteria. 
 For instance, if you have a   model with an   attribute and you need to check if an email already exists in the dB: 
 
 The benefit of using   is that the SQL query run is 
 
 which is more efficient than actually returning data. 
 If you need to actually conditionally retrieve data from the DB this isn't the method to use.  However, it works great for simple checking and the syntax is very clear so other developers know exactly what you're doing.  Using appropriate syntax is critical in projects with multiple developers.  Write clean code and let the code "comment" itself. 
 
 You could just do: 
 
 This will return   if no record is found, or   of  only the first  record otherwise. 
 Then in your view you could just do something like: 
 
 If you want to fetch and display multiple results, then in your controller: 
 
 and in your view: 
 
 
 If you just want to check whether the record exists or not. Go with the @cristian's answer i.e. 
 
 But if truck exits then you want to access that truck then you will have to find truck again which will lead to two database query. If this is the case go with 
 
 
 Rails has a   method
 for using like you want  
 