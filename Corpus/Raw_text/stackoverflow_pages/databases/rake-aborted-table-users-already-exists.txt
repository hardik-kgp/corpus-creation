*** rake-aborted-table-users-already-exists ***

 I have created a database with devise and the nifty generator. I'm trying to make a new database with the nifty generator ( ), but when I try to migrate the database ( ), I get the following error: 
 
 I'm following a tutorial and have quite a hard time understanding why this happens. Can anyone explain what is going on? 
 
 The migration is trying to create a table that already exists in your database. 
 Try to remove the user table from your database. Something went wrong with you migration process. You should also compare your schema.rb version with your db/migrate/*.rb files. 
 **Clarification:**

 It seems that many SO users don't agree with my reply, either because they consider it inaccurate or not recommended. 
 Removing a table is always destructive, and I think that everyone understands that. 
 I should have mentioned  add_column , since the table was being created in another migration file. 
 
 In your   migration (APP_ROOT/db/migrate/..), add   right before   and run  . It will remove the users table before recreating it. You can remove that line of code after running this migration so it doesn't give you errors later on. Just a small fix if you dont have UI access to a database (on heroku, for example). 
 
 You need to drop that table from the sql lite console (You will lost all the data contained in it) 
 
 Access the sql lite console, type in terminal 
 
 Drop table (dont forget the last  **;**
 (semicolon)) 
 
 run  **db:migrate**
 again 
 
 
 Hope it helps, it worked for me 
 
 If you wanna play safe and don't want to lose any data then you can check if the table exists in your database. 
 
 
 If you know the database was created properly, you can just comment out the creation part of the migration code.  For example: 
 
 If the table was created, but later commands weren't completed for some reason, you can just leave the later options for example: 
 
 If you don't have any significant data in your database to preserve however you can just have it drop the table and all the data and create it fresh.  For example ( **notice the "drop_table :votes", in the self.up**
): 
 
 
 Don't delete tables. Data > migrations! 
 The version of the database already reflects the changes the error-causing migration is trying to add. In other words, if the migration could be skipped, then everything would be fine. Check the db_schema_migrations table and try inserting the version of the erroneous migration (e.x, 20151004034808). In my case this caused subsequent migrations to execute perfectly and everything seems fine. 
 Still not sure what caused this problem. 
 
 I think this is an issue unique or more common to mysql in rails, possible having to do with the mysql2 gem itself. 
 I know this because I just switched from sqlite to mysql and just started having this problem systematically.  
 In my case, I simply commented out the code that had already run and ran the migration again (which I'm not adding more detail to because it looks like the guy above me did that).  
 
 I had a similar problem when trying to add Devise authentication to an existing Users table.  
 My solution: I found that I had two migrate files, both trying to create the Users table. So rather than deleting the table (probably not the best habit to form), I commented out the first (original) migrate file that created the Users table and then left the Devise migrate file as-is. Re-ran the migration and it worked fine. 
 As it turns out, the Devise file wasn't causing the problem; I can see that it is "changing" the table, not "creating it", which means that even without the devise installation, a db:migrate probably would have caused the same issue (though I haven't tested this). 
 
 If you want to  **keep your data**
,  **rename the table**
, but do it in the migration to save time, then remove it once the migration has ran. 
 Place at the top part of the  **up**
 section of the migration file. 
 
 
 If your app is new and you don't care about the data in your database, simply: 
 
 