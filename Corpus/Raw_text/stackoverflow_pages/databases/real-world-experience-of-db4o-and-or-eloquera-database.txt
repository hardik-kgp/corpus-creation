*** real-world-experience-of-db4o-and-or-eloquera-database ***

 I am evaluating two object databases, db4o ( http://www.db4o.com ) and Eloquera Database ( http://eloquera.com ) for a coming project. I have to choose one. My basic requirement is  scalability, multi user support and easy type evolution for RAD. 
 
 Please share your real world experience. 
 If you have both, can you compare these two? Which do you prefer? 
 
 
 For the last 2 years I've been using DB4O, and I'm now switching to Eloquera.
My reasons, in order: 
 
 I'm building a commercial product, and the royalty based licensing on DB4O is WAY to high; DB4O said we could "talk about it", but I'm a very small development shop and giving away a huge chunk of each sale I make just doesn't make any sense when there's a perfectly good alternative. 
 I'm using the Db4oTool.exe to modify my assmeblies in a post-build step, and it really slows down the build process.  Eloquera doesn't need to modify my assemblies. 
 I found a bug in the DB4O code, and it took many many months before it was integrated into their codebase.  I have found bugs in Eloquera and they fixed them in a day or two 
 DB4O is not yet on .NET 4 (although they finally have an early beta).  DB4O is the ONLY thing holding me back from using VS2010 (and .NET 4).  I tried migrating to VS2010 but VS2010 automatically converts all unit tests to .NET 4, so all of my persistence related unit tests immediately failed. 
 DB4O is not really designed to be thread-safe. 
 DB4O has features and many API features that are obviously ported from Java. 
 
 Robert 
 
 Eloquera (  www.eloquera.com  ) originally designed and developed for use in the Web environment and it’s designed as native .NET application in C#. 
 Eloquera wasn’t ported from Java as many other databases. 
 Eloquera natively as part of architecture supports: 
 
 Simultaneous user access 
 Security settings 
 Has genuine C/S architecture, has desktop mode available. 
 Max database size 1TB+, in a large data scale Eloquera maintains the fast query response; it has patents pending technologies including virtual file system, indexing, and adaptive cache. Eloquera has state of the art reflection written in MSIL that allows Eloquera to outperform many databases that use Microsoft’s standard reflection. 
 Supports in-memory database for the fast data processing 
 Since most of the users in the Web come from relational database world it was natural for Eloquera to support SQL and LINQ 
 EF support is due next month 
 Unlike some databases Eloquera does not put blindly objects in the database, if you change fields from int;int; to long; it will not keep querying with a wrong results because it still sees two int;int; - it will notify the user to update the definition 
 Eloquera provides a native indexing for properties and fields. Most of the databases do not provide properties indexing. 
 
 I might argue with Carl regarding DB4O the easiest database on the market, since Eloquera can do the same things from API perspective. 
 Eloquera is younger than Versant and still has some enterprise features coming. 
 Last month Eloquera R&D department got engaged with Eloquera Parallel Server to provide horizontal scaling that arguably will be magnitude cheaper than Versant’s VOD. 
 Some of the distinguished points  
 
 Eloquera is FREE for commercial use. You are not required to pay any royalties. All features above you have for FREE. 
 Eloquera has a commercial support available. 
 Eloquera is designed for the modern world with modern architecture. It was not adapting from time to time to market needs. It is natural part of Eloquera’s architecture. 
 
 
 If you are interested to hear user experiences with db4o, I suggest you also ask in  our db4o user forums . 
 While db4o was originally developed for embedded use in applications with limited resources (and now runs very well on constrained platforms like Android, CompactFramework and Silverlight) I know that we do have many users that are happily using db4o for web applications. 
 Indeed there is some correctness to the db4o-bashing-post by leatrop: The db4o server core currently only allows one thread to enter for storing and querying tasks in a particular database. 
 However there are a couple of ways to make db4o applications scale very well: 
Since the setup costs for db4o databases is very low (one single API call) it is possible to work with multiple databases. You can use the db4o replication system (dRS) to distribute objects between multiple databases. It is also possible to create backups of db4o databases while they are running and to replicate these backups to multiple machines. The approach of using multiple databases (for timeslices of data or for different usecases in your application) can be very nice for backup and debugging purposes. You don't need to copy the entire database if you want to test only some aspects of your live app. 
 If you still find that db4o does not scale good enough for concurrent users or database sizes, you can later switch to our high-end object database  Versant VOD . It was built to run in the cloud and it has a proven track record to work for thousands of concurrent users with multi-terabyte databases. VOD for .NET also comes with a LINQ provider, so the interfaces of db4o and VOD are compatible. 
 My recommendation: Start with db4o. It is the easiest object database to get started with and to develop with. Just store any object with one line of code, without setting up schemas or mapping files. Use LINQ to query (or native queries, if you work with Java). 
 db4o is open source and  it's free  (under the GPL). 
 
 I'm creating a 2nd generation Social Media Platform completely based on Javafx and Db4o. We are able to do things with db4o that would be impossible with any other database. Semantic OWL Ontologies and Complex relationships with Objects and Our User Definable Canvas make Db4o an amazing fit for us. We have no worries about scaling either and have found several solutions. Carl is one of the most intelligent people in software. This fact is obvious when you learn about his product. 
 Mike Tallent
CEO
Objectwheel 
 