*** regexp-performance-compare-with-like-and ***

 I am using MySQL. I have asked a question about how to query in database for  a single word match here . 
 
 There is an answer which suggest me to use  
 It is a good answer, however, I am not sure how is this   thing from performance perspective? If I have a large table, is this way harm the performance of my application? 
 
 For example, compare with   operation, e.g.  , is the   operation far more slow than   for large table? 
 
 There is another answer which suggested me to use LIKE, but I think it is not good from performance point of view. 
 Then, I googled and found an  article  which says use   is even  **faster**
 than   . I get confused, which way I should use for a single word match query in a large table... 
 
 Can I say,   is the fastest operation, then   , and   is the poorest one from performance perspective? 
 
 **Regarding regexp**
  
 The regexp can  **never**
 use an index in MySQL. 
The   will use an index if: 
 
 an index is declared on the column; 
 the values in the column have sufficient cardinality (if more than +/- 20% of the rows match, MySQL will not use an index, because in that case doing a full table scan is  **faster**
);   
 No other indexes on the same table are better suited (MySQL can only use one index per table per subselect);   
 
 Considering these and some other more esoteric caveats an   comparison is  **much**
 faster than a regexp.   
 **Regarding like**
  
 LIKE can use an index if the wildcard is not the first char.   
 
 The performance of   when using an index is very close to   (assuming the same number of rows returned).   
 
 There is another way to search data:  Full-Text Search .
It can be used when  ,   is not enough (executing time) and on the other hand Sphinx, Lucene is too powerfull. 
 To used it you should create full-text index on a column and query it. If you will use it please be aware of  ,   system vars that reduce min/max size words. 
 Hope it helps. 
 The rest of your question was answered by @Johan. 
 