*** registercontentobserver-on-raw-sqlite-cursor ***

 All of the examples I've seen of using   do so through a   interface. But Cursor has a   call, so I figured maybe the Android folks have put together some deep magic that would allow for getting updates on a   cursor when one of the rows from an active result set changed. Either I'm doing it wrong, or there is no such magic. Here's the code I'm working with, the expectation being that when I click on the button to update the value in row #1 I would get an   callback. Any ideas? 
 
 
 This is actually possible. 
 You have to define an  **Uri**
 somewhere (a constant maybe). 
 I would advice to use something like this: 
 
 Then when you update the database data you call: 
 
 And from the  **CursorLoader**
 you are writing do something like: 
 
 The  **ForceLoadContentObserver**
 is a public static inner class inside the  **Loader**
 class, if you are using the Support Library it will be  android.support.v4.content.Loader.ForceLoadContentObserver 
 In the same  **Loader**
 make sure you  forceReload  if data change: 
 
 A good start for your  **CursorLoader**
 if you do not know how to write it is this:  CursorLoader usage without ContentProvider 
 Your  **CursorAdapter**
 should now be initialized like this: 
 
 The  **ContentResolver**
 will take care of notifying observer on the uri you set up. 
 This is exactly how the  ContentProvider  works. 
 If you are not using a  **Loader**
 you can do the same stuff, the important modifications are: 
 
 Call  ContentResolver.notifyChange(URI,null);  when you change the data 
 Call  Cursor.setNotificationUri(ContentResolver, URI);  when you load the cursor 
 
 This way when you register an observer you will be notified when the underling data change. 
 
 No takers huh? Well an excellent excuse to dig in myself and figure it out. For those who might be curious after me, if you download the platform source the relevant files to look at are: 
 frameworks/base/core/java/android/database/sqlite/SQLiteCursor.java
frameworks/base/core/java/android/database/AbstractCursor.java 
 It looks like the mContentObservable is there to signal different parts of a program running off the cached result set in a Cursor, and the observable is a signal from the cached result set to let consumers know when the cache has been dumped/updated. It doesn't tie into the SQLite implementation to fire events when the underlying datastore is manipulated. 
 Not exactly surprising, but given the docs I thought maybe I was missing something. 
 