*** regression-analysis-in-mysql ***

 **Introduction**

in my project I'm saving FacebookPages and their like count, as well as the like count per country. I have a table for the FacebookPages, one for the languages, one for the correlation between the facebook page and the language (and counting the likes) and one table which saves this data as a history. What I want to do, is to get the page with the strongest increase in likes over a specific time period. 
 **Data to work with**
  
 I'm stripping the non relevant information from the create queries. 
 Table containing all facebook pages 
 
 Example data: 
 
 
 Table containing all languages 
 
 Example data 
 
 
 Table containing the correlation 
 
 Example data 
 
 
 Table containing the history 
 
 Example data 
 
 As you can see, I got data for the 14th and 11th September. Now I want to get the site, with the biggest increase in likes. Before I have done it with a column called last_like_count, but the problem is, that I can't be dynamic in the date range. With a "normal" regression function I could be dynamic for every date range. 
 **Solution finding**

What I already managed to do, was to build all the relationships that are present 
 
 With that query I'm getting every likecount in the history of the system for specific languages. But, how would I build regression analysis into that part? 
 I already found this link here 
 Identifying trend with SQL query 
 but my math and MySQL skills aren't high enough to translate the SQL into MySQL. Any help? 
 
 This might be, what you are looking for: 
 
 It returns the slope of the linear regression per Page and Language. The column Slope represents the number of likes per second. In your sample data the amount of likes decreases for two cases. I don't know why. The output should look like this. The SQL statement is tested and I checked two row calculations manually for correct output. 
 
 There might be a problem, if there is no data in the tables. So maybe ISNULL-checks have to be added. 
 
 When you only want to know the absolute values it is simpler. You can take following statement: 
 
 which has 4 sub-queries. Only two are needed which you have to choose. I have choosen to use the number of likes just before the period and the last number of likes which is in the period to calculate the difference. The result looks like this: 
 
 
 This was what I could came up with right now. I can't properly test this query, because now I don't have the time to create these table structures in one of the web's sql test pages. But I think even if it doesn't work initially it can point you in the right direction. 
 
 Hope it helps. Later, when I can I will further test and improve this query. 
 