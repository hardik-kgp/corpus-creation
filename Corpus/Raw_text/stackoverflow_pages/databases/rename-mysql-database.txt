*** rename-mysql-database ***

 
 
 
 
 
 This question already has answers here :
                            
                         
 
 
 
 How do I quickly rename a MySQL database (change schema name)? 
 
                                    (47 answers)
                                 
 
 Closed  5 years ago . 
 
 
 I created a database with the name of  . Now I need to change database name to  . But, It is disabled in MySQL workbench. Can I do that on the Linux server itself? 
 
 I don't think you can do this. I think you'll need to dump that database, create the newly named one and then import the dump.   
 If this is a live system you'll need to take it down. If you cannot, then you will need to setup replication from this database to the new one. 
 If you want to see the commands to do this,  @jan has the details . 
 
 In case you need to do that from the command line, just copy, adapt & paste this snippet: 
 
 
 It's possible to copy database via mysqldump command without storing dump into file: 
 
 
 
 
 
 
 You can create a new database exactly as the previous database existed and then drop the old database when you're done. Use the mysqldump tool to create a .sql backup of the database via   or if you need to use a username and password then run  . orig_db is the name of the database you want to "rename", root would be the user you're logging in as and orig_db.sql would be the file created containing the backup. Now create a new, empty database with the name you want for the database. For example,  . Once that's done, then run  . new_db now exists as a perfect copy of orig_db. You can then drop the original database as you now have it existing in the new database with the database name you wanted. 
 The short, quick steps without all the above explanation are: 
 
 
 
 
 
 
 Hope this helps and this is a reliable means to accomplish it without using some ad-hoc method that will corrupt your data and create inconsistencies. 
 
 You can do it by RENAME statement for each table in your "current_db" after create the new schema "other_db" 
 
 Source  Rename Table Syntax 
 
 Well there are 2 methods:  
 **Method 1**
: A well-known method for renaming database schema is by dumping the schema using Mysqldump and restoring it in another schema, and then dropping the old schema (if needed). 
 From  
 
 Although the above method is easy, it is time and space consuming. What if the schema is more than a  **100GB?**
 There are methods where you can pipe the above commands together to save on space, however it will not save time. 
 
 To remedy such situations, there is another quick method to rename
  schemas, however, some care must be taken while doing it. 
 
 **Method 2**
: MySQL has a very good feature for renaming tables that even works across different schemas. This rename operation is atomic and no one else can access the table while its being renamed. This takes a short time to complete since changing a table’s name or its schema is only a metadata change. Here is procedural approach at doing the rename: 
 
 Create the new database schema with the desired name. 
 Rename the tables from old schema to new schema, using MySQL’s
“RENAME TABLE” command. 
 Drop the old database schema. 
 
 If there are   in the schema, those will need to be recreated too. MySQL’s “RENAME TABLE” fails if there are triggers exists on the tables. To remedy this we can do the following things : 
 **1)**
   This done using -E, -R flags (in addition to -t -d which
    dumps the triggers) to the mysqldump command. Once triggers are
    dumped, we will need to drop them from the schema, for RENAME TABLE
    command to work. 
 
 **2)**
 Generate a list of  only “BASE” tables. These can be found using a
    query on information_schema.TABLES table. 
 
 **3)**
 Dump the views in an out file. Views can be found using a query on
    the same information_schema.TABLES table. 
 
 **4)**
 Drop the triggers on the current tables in the old_schema. 
 
 **5)**
 Restore the above dump files once all the “Base” tables found in step #2 are renamed. 
 
 Intricacies with above methods :
We may need to update the   for users such that they match the correct schema_name. These could fixed with a simple   on  ,  ,  , mysql.db tables updating the   to   and calling “Flush privileges;”.
Although “ ″ seems a bit more complicated than the “ ″, this is totally scriptable. A simple bash script to carry out the above steps in proper sequence, can help you save space and time while renaming database schemas next time. 
 The Percona Remote DBA team have written a script called “rename_db” that works in the following way : 
 
 To demonstrate the use of this script, used a sample schema “emp”, created test triggers, stored routines on that schema. Will try to rename the database schema using the script, which takes some seconds to complete as opposed to time consuming dump/restore method. 
 
 As you can see in the above output the database schema “emp” was renamed to “emp_test” in less than a second.
Lastly, This is the script from Percona that is used above for “ ″. 
 
 
 In short no.  It is generally thought to be too dangerous to rename a database. MySQL had that feature for a bit, but it was removed.  You would be better off using the workbench to export both the schema and data to SQL then changing the CREATE DATABASE name there before you run/import it. 
 
 For impatient mysql users (like me), the solution is: 
 
 
 I used following method to rename the database 
 
 take backup of the file using mysqldump  or any DB tool eg heidiSQL,mysql administrator etc 
 Open back up (eg backupfile.sql) file in some text editor. 
 Search and replace the database name and save file. 
 Restore the edited SQL file 
 
 
 If your DB contains only MyISAM tables (do  **not**
 use this method if you have InnoDB tables): 
 
 shut down the MySQL server 
 go to the mysql   directory and rename the database directory (Note: non-alpha characters need to be encoded in a special way) 
 restart the server 
 adjust privileges if needed (grant access to the new DB name) 
 
 You can script it all in one command so that downtime is just a second or two. 
 
 First backup the old database called HRMS and edit the script file with replace the word HRMS to SUNHRM. After this step import the database file to the mysql 
 
 Another way to rename the database or taking image of the database is by using Reverse engineering option in the database tab. It will create a ERR diagram for the database. Rename the schema there. 
 after that go to file menu and go to export and forward engineer the database. 
 Then you can import the database. 
 