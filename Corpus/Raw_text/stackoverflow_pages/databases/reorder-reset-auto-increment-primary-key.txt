*** reorder-reset-auto-increment-primary-key ***

 I have a MySQL table with an auto increment primary key. I deleted some rows in the middle of the table. Now I have, for example, something like this in the ID column: 12, 13, 14, 19, 20. I deleted the 15, 16, 17 and 18 rows. 
 I want to reassign / reset / reorder the primary key so that I have continuity, i.e. make the 19 a 15, the 20 a 16, and so on. 
 How can I do it? 
 
 You could drop the primary key column and re-create it. All the ids should then be reassigned in order. 
 However this is probably a bad idea in most situations. If you have other tables that have foreign keys to this table then it will definitely not work.  
 
 Even though this question seems to be quite old, will post an answer for someone who reaches in here searching. 
 
 If the column is used as a foreign key in other tables, make sure you use   instead of the default   for the foreign key relationship in those tables. 
 Further, in order to reset the   count, you can immediately issue the following statement. 
 
 For MySQLs it will reset the value to  . 
 
 To reset the IDs of my User table, I use the following SQL query. It's been said above that this will ruin any relationships you may have with any other tables. 
 
 
 You may simply use this query 
 
 
 
 I think this will do it 
 
 Or, from PhpMyAdmin, remove "AutoIncrement" flag, save, set it again and save.this resets it. 
 
 **in phpmyadmin**

 
 note: this will work if you delete last rows not middle rows. 
 
 goto your table-> click on operations menu-> goto table options->change AUTO_INCREMENT to that no from where you want to start. 
 your table autoincrement start from that no. 
 try it.
 
 
 
 if you want to    
 
 You can remove the primary key auto increment functionality of that column, then every time you update that column run a query before hand that will count all the rows in the table, then run a loop that iterates through that row count inserting each value into the respective row, and finally run a query inserting a new row with the value of that column being the total row count plus one. This will work flawlessly and is the most absolute solution to someone trying to accomplish what you are. Here is an example of code you may use for the function: 
 
 Here I created an associative array which I had appended on a rank column with the query within a select query, which gave each row a rank value starting with 1. I then iterated through the associative array. 
 Another option would have been to get the row count, run a basic select query, get the associative array and iterate it through the same way but with an added variable that updates through each iteration. This is less flexible but will accomplish the same thing. 
 
 
 for InnoDB, do this (this will remove all records from a table, make a bakcup first): 
 
 
 I had the same doubts, but could not make any changes on the table, I decided doing the following having seen my ID did not exceed the maximum number setted in the variable @count: 
 
 The solution takes, but it's safe and it was necessary because my table owned foreign keys with data in another table. 
 
 The best choice is to alter the column and remove the auto_increment attribute.  Then issue another alter statement and put auto_increment back onto the column.  This will reset the count to the max+1 of the current rows and thus preserve foreign key references back to this table, from other tables in your database, or any other key usage for that column. 
 
 My opinion is to create a new column called row_order. then reorder that column. I'm not accepting the changes to the primary key. As an example, if the order column is banner_position, I have done something like this, This is for deleting, updating, creating of banner position column. Call this function reorder them respectively. 
 
 
 This works -  https://stackoverflow.com/a/5437720/10219008.....but  if you run into an issue 'Error Code: 1265. Data truncated for column 'id' at row 1'...Then run the following. Adding ignore on the update query. 
 
 
 You can also simply avoid using numeric IDs as Primary Key. You could use Country codes as primary id if the table holds countries information, or you could use permalinks, if it hold articles for example. 
 You could also simply use a random, or an MD5 value. All this options have it's own benefits, specially on IT sec. numeric IDs are easy to enumerate. 
 