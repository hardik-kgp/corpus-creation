*** replacing-mysql-functions-with-pdo-and-prepared-statements ***

 I've always done the simple connection of  ,  : 
 
 While using this I've always used the simple method to escape any data before making a query, whether that be  ,  ,   or   by using  
 
 Now I understand this is safe, to an extent! 
 It escapes dangerous characters; however, it is still vulnerable to other attacks which can contain safe characters but may be harmful to either displaying data or in some cases, modifying or deleting data maliciously. 
 So, I searched a little bit and found out about PDO, MySQLi and prepared statements. Yes, I may be late to the game but I've read many, many tutorials (tizag, W3C, blogs, Google searches) out there and not a single one has mentioned these. It seems very strange as to why, as just escaping user input really isn't secure and not good practice to say the least. Yes, I'm aware you could use Regex to tackle it, but still, I'm pretty sure that's not enough? 
 It is to my understanding that using PDO/prepared statements is a much safer way to store and retrieve data from a database when the variables are given by user input. The only trouble is, the switch over (especially after being very stuck in my ways/habits of previous coding) is a little difficult. 
 Right now I understand that to connect to my database using PDO I would use 
 
 Now, function names are different so no longer will my  ,  ,   etc work. So I'm having to read/remember a load of new ones, but this is where I'm getting confused. 
 If I wanted to insert data from say a sign up/registration form, how would I go about doing this, but mainly how would I go about it securely? I assume this is where prepared statements come in, but by using them does this eliminate the need to use something like  ? I know that   requires you to be connected to a database via  /  so now we aren't using either won't this function just produce an error? 
 I've seen different ways to approach the PDO method too, for example, I've seen   and   as what I think are known as place holders (sorry if that is wrong). 
 But I think this is roughly the idea of what should be done to fetch a user from a database 
 
 But then I'm stuck on a couple things, if the variable wasn't a number and was a string of text, you have to given a length after   if I'm not mistaken. But how can you give a set length if you're not sure on the value given from user in-putted data, it can vary each time? Either way, as far as I know to display the data you then do 
 
 Now, is this all safe? 
 If I am right, would inserting data be the same for example: 
 
 Would that work, and is that safe too? If it is right what value would I put in for the  ? Have I got this all completely wrong? 
 **UPDATE**

 The replies I've had so far have been extremely helpful, can't thank you guys enough! Everyone has got a +1 for opening my eyes up to something a little different. It's difficult to choose the top answer, but I think Col. Shrapnel deserves it as everything is pretty much covered, even going into other arrays with custom libraries which I wasn't aware of! 
 But thanks to all of you:) 
 
 Thanks for the interesting question. Here you go: 
 
 It escapes dangerous characters,  
 
 Your concept is utterly  **wrong.**

In fact "dangerous characters" is a myth, there are none. 
And mysql_real_escape_string escaping but merely a  string delimiters .  From this definition you can conclude it's limitations - it works only for  strings . 
 
 however, it is still vulnerable to other attacks which can contain safe characters but may be harmful to either displaying data or in some cases, modifying or deleting data maliciously. 
 
 You're mixing  here everything. 
Speaking of database,  
 
 for the strings it is  **NOT vulnerable.**
 As long as your strings being quoted and escaped, they  **cannot**
 "modify or delete data maliciously". 
 for the other data typedata - yes, it's  useless . But not because it is somewhat "unsafe" but just because of improper use.  
 
 As for the displaying data, I suppose it is  **offtopic**
 in the PDO related question, as  **PDO has nothing to do with displaying data either.**
  
 
 escaping user input 
 
 ^^^ Another delusion to be noted! 
 
 **a user input has absolutely nothing to do with escaping**
. As you can learn from the former definition, you have to escape strings, not whatever "user input". So, again: 
 
 you have escape strings, no matter of their source 
 it is useless to escape other types of data, no matter of the source. 
 
 
 Got the point? 
Now, I hope you understand the limitations of escaping as well as the "dangerous characters" misconception.  
 
 It is to my understanding that using PDO/prepared statements is a much safer 
 
 Not really. 
In fact, there are  **four**
 different query parts which we can add to it dynamically: 
 
 a string 
 a number 
 an identifier 
 a syntax keyword. 
 
 so, you can see that escaping covers only one issue. (but of course, if you treat numbers as strings (putting them in quotes),  when applicable , you can make them safe as well) 
 while prepared statements cover - ugh - whole 2 isues! A big deal ;-) 
 For the other 2 issues see my earlier answer,  In PHP when submitting strings to the database should I take care of illegal characters using htmlspecialchars() or use a regular expression? 
 
 Now, function names are different so no longer will my mysql_query, mysql_fetch_array, mysql_num_rows etc work.  
 
 That is another,  **grave delusion of PHP **
**users**
**,**
 a natural disaster, a catastrophe: 
 Even when utilizing old mysql driver,  **one should never use bare API functions**
 in their code! One have to put them in some library function for the everyday usage! (Not as a some magic rite but just to make the code shorter, less repetitive, error-proof, more consistent and readable). 
 **The same goes for the PDO as well!**

 Now on with your question again. 
 
 but by using them does this eliminate the need to use something like mysql_real_escape_string? 
 
 YES. 
 
 But I think this is roughly the idea of what should be done to fetch a user from a database 
 
 Not to fetch, but  to add a whatever data to the query ! 
 
 you have to given a length after PDO:PARAM_STR if I'm not mistaken 
 
 You can, but you don't have to.  
 
 Now, is this all safe? 
 
 In terms of database safety there are just no weak spots in this code. Nothing to secure here.  
 for the displaying security - just search this site for the   keyword. 
 Hope I shed some light on the matter. 
 BTW, for the long inserts you can make some use of the function I wrote someday,  Insert/update helper function using PDO 
 However, I am not using prepared statements at the moment, as I prefer my home-brewed placeholders over them, utilizing  a library  I mentioned above. So, to counter the code posted by the riha below, it would be as short as these 2 lines: 
 
 But of course you can have the same code using prepared statements as well.  
 
 
 
 I never bother with bindParam() or param types or lengths.   
 I just pass an array of parameter values to execute(), like this: 
 
 This is just as effective, and easier to code. 
 You may also be interested in my presentation  SQL Injection Myths and Fallacies , or my book  SQL Antipatterns: Avoiding the Pitfalls of Database Programming . 
 
 Yes, :something is a named placeholder in PDO, ? is an anonymous placeholder. They allow you to either bind values one by one or all at once. 
 So, basically that makes four options to provide your query with values. 
 **One by one with **
**bindValue()**

 This binds a concrete value to your placeholder as soon as you call it. You may even bind hard coded strings like   if desired. 
 Providing a parameter type is optional (but suggested). However, since the default is  , you only need to specify it when it is not a string. Also,   will take care of the length here - there is no length parameter. 
 
 I usually prefer this approach. I find it the cleanest and most flexible. 
 **One by one with **
**bindParam()**

 A variable is bound to your placeholder that will be read when the query is  **executed**
, NOT when bindParam() is called. That may or may not be what you want. It comes in handy when you want to repeatedly execute your query with different values. 
 
 You only prepare and bind once which safes CPU cycles. :) 
 **All at once with named placeholders**

 You just drop in an array to  . Each key is a named placeholder in your query (see Bill Karwins answer). The order of the array is not important. 
 On a side note: With this approach you cannot provide PDO with data type hints (PDO::PARAM_INT etc.). AFAIK, PDO tries to guess. 
 **All at once with anonymous placeholders**

 You also drop in an array to execute(), but it is numerically indexed (has no string keys). The values will replace your anonymous placeholders one by one in the order they appear in your query/array - first array value replaces first placeholder and so forth. See erm410's answer. 
 As with the array and named placeholders, you cannot provide data type hints. 
 **What they have in common**

 
 All of those require you to bind/provide as much values as you have
placeholders. If you bind too many/few, PDO will eat your children. 
 You don't have to take care about escaping, PDO handles that. Prepared PDO statements are SQL injection safe by design. However, that's not true for  exec()  and  query()  - you should generally only use those two for hardcoded queries. 
 
 Also be aware that  **PDO throws exceptions**
. Those could reveal potentially sensitive information to the user. You should at least put your  **initial PDO setup in a try/catch block**
! 
 If you don't want it to throw Exceptions later on, you can set the error mode to warning. 
 
 
 To answer the length question, specifying it is optional unless the param you are binding is an OUT parameter from a stored procedure, so in most cases you can safely omit it. 
 As far as safety goes, escaping is done behind the scenes when you bind the parameters. This is possible because you had to create a database connection when you created the object. You are also protected from SQL injection attacks since by preparing the statement, you are telling your database the format of the statement before user input can get anywhere near to it. An example: 
 
 Thus, in terms of safety, your examples above seem fine. 
 Finally, I agree that binding parameters individually is tedious and is just as effectively done with an array passed to PDOStatement->execute() (see  http://www.php.net/manual/en/pdostatement.execute.php ). 
 