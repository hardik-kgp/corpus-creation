*** retrieve-database-or-any-other-file-from-the-internal-storage-using-run-as ***

 On a non-rooted android device, I can navigate to the data folder containing the database using the   command with my package name. Most files types I am content with just viewing, but with the database I would like to pull if from the android device. 
 Is there a     or   command from this part of adb shell? I would like to download the database file and view its content using a database browser. 
 One answer here involves turning entire application package into a compressed archive, but there is no further answer on how to extract that archive once this is done and moved to the machine, leaving me very sidetracked when there might be a more direct solution to begin with 
 
 By design   build of Android (that's what you have on your phone until you unlock the  bootloader  and flash the phone with   or   software) restricts access to the  Internal Storage  - every app can only access its own files. Fortunately for software developers not willing to  root  their phones Google provides a way to access the  Internal Storage  of  debuggable  versions of their packages using   command.  
 To download the   from an Android 5.1+ device run the following command: 
 
 To download multiple files in a folder under the   at once - use  : 
 
 
 The accepted answer doesn't work anymore for me (blocked by Android?) 
 So instead I did this: 
 
 
 If anyone looking for pulling database from  **debug application**
 may use the procedure below: 
 
 
 search and open device file explorer 
 
 
 
 
 
 Select your handset and then browse to   directory 
 
 
 
 
 
 Now find your application package and go to databases folder. You can see the databases there and upon right click, you will get option
  to save this in your drive. 
 
 
 
 
 I've published a simple shell script for dumping databases: 
 
 https://github.com/Pixplicity/humpty-dumpty-android 
 
 It performs two distinct methods described here: 
 
 First, it tries to make the file accessible for other users, and attempting to pull it from the device. 
 If that fails, it streams the contents of the file over the terminal to the local machine. It performs an additional trick to remove   characters that some devices output to the shell. 
 
 From here you can use a variety of CLI or GUI SQLite applications, such as   or  , to browse the contents of the database. 
 
 I couldn't get anything else to work for me but this: 
 
 The first exit is to exit out of the run-as, the second exit is to exit out of adb shell to do the pull. 
 
 For app's debug version, it's very convenient to use command   to extract a single file. But you have to do multiple times for multiple files. Here is a simple script I use to extract the directory. 
 
 Hope it would be helpful. This script is also available at  gist .  
 Typical usage is  
 
 then it will extract all files under your apps databases directory, which is  , into current directory. 
 
 Much much simpler approach to download the file onto your local computer: 
 In your PC shell run: 
 
 
 
 You can use this script for get Realm database. 
 
 If someone is looking for another answer that can be used to retrieve   as well as   then follow this step: 
 In your   file of your app add line 
 
 debugCompile 'com.amitshekhar.android:debug-db:1.0.0' 
 
 now when you run your app in   mode then your app will automatically open 8080 port from your device   make sure your device is connected via   and your   is sharing the same network. Now simply visit the url  
 
 http://your_mobile_device_ip:8080/   
 
 to watch all data of database along with shared preferences. 
 
 Here's a solution that works on a device running Android 5.1. The following example is for Windows.  
 You need  sed  (or sed.exe on windows, e.g. from cygwin.) ( On Unix, it'll just be there ;) ). To remove bad '\r' characters, at least on windows. 
 Now just run the following command: 
 
 The sed command strips out trailing /r characters. 
 Of course you should replace "com.yourcompany.yourapp" with the package name of the app and "YourDatabaseName" with the name of the database in the app.  
 
 The database file is  **emtpy**
 when using  . This can be resolved by calling close() on the RoomDatabase instance. Call close() to let SQLite write its journal to disk.
I've created this button that closes the database connection on request:  via GIPHY 
 Here is how to call close  on the RoomDatabase instance. 
 