*** safest-way-to-update-game-score-from-client-to-server-database-javascript ***

 So I have this game that is completely run on the client. No server interaction what so ever apart from downloading the initial scripts to play the game. Anyway at the end of the game I would like for the client to send me back the scores which should be updated in the server database. Now I have come to accept the fact that there is no way on earth I can hide this from a hacker and send the scores unaltered. But I would like to know till what level can I modify the whole process that it virtually becomes pretty infeasible for the hacker manipulate the data which is being sent. For sure I would not like the score to be sent as plain text from client machine and I don't want my server to perform complex decryption algorithm. What is the best way hence to achieve considerable amount of security that every tom dick and harry doesn't hack the scores... I hope someone could provide a nice little way that I could work on... :) Thanks 
 So my ideal result should be -> have trusted result from a calculation (of score) made by an untrusted party (the player)! 
 -Edit- 
 Someone told me something about hiding the data in a picture get request. Like, I am implementing this game on canvas (html5). So he asked me at the end of the game to fetch a game over image from my server, and they request should contain the hashed score. I did not exactly understand the complete process but if you could explain it, would be really glad! :) 
 
 coda^   so you can mask the requests nicely 
 shouvik how do I do it!? 
 coda^   you can compose the checksum you want to submit. like 12312312a12313a232 is your md5 which contains the score. bring in an asset into the canvas like 
 coda^   server.com/images/md5_hash_of_score/congratulations.png 
 coda^   which you can rewrite server side via htaccess 
 
 
 
 "Now I have come to accept the fact that there is no way on earth I can hide this from a hacker and send the scores unaltered." 
 
 
Oh yes, there is! 
 You can use RSA or any other public key encryption method (also called assymetric cryptography). 
 Create a set of (public and private) keys for the server.
Have your client code include your server's public key. 
 At the end of the game, the client code, encrypts the score (with this key) and sends both (plain score and encrypted score) to server. 
 Server decrypts and checks if plain score and decrypted one are same.
If yes, accept score.
If not, reject (there's a hacker or network error in the middle).
 
 -------UPDATE-----------CORRECTION-------------- 
 As Ambrosia, pointed out, my approach fails completely with this kind of attack. 
 What you actually want is to have a trusted result from a calculation (of score) made by an untrusted party (the player). No easy way to achieve this. 
 See this:  http://coltrane.wiwi.hu-berlin.de/~fis/texts/2003-profit-untrust.pdf 
 Also this one:  http://www.cse.psu.edu/~snarayan/publications/securecomputation.pdf 
 And this (which needs a subscription to the ACM digital library):  http://portal.acm.org/citation.cfm?id=643477.643479 
 
 You seem to know this already, but just to stress;  **you cannot stop someone doing this; you can only make it as hard as possible!**

 Assume you currently submit the score as: 
 
 Someone watching in Firebug can easily distinguish where the score is submitted, and to alter it.   gives it away, as does the name of the parameter. The score is a easily distinguishable integer. 
 
 Change the end point:  
 Change the parameter name:  
 
 It's getting harder for the user to work out what is going on. 
 Now you can make the score harder (again, harder, not impossible), to change. First, you can encrypt it (obviously you'll need to be able to decrpt it later). 
 
 Base 64 encode it. 
 Numbers -> Letters (1=a, 2=b, etc). 
 Reverse the order of the score representation. 
 
 You name it, you do it. So you now have  . 
 The next thing you can do is hash the score with something else. Send the hash with the score, and recalculate it on the server. For example,   the score with a random string, and send the score (encoded), the string, and the hash in the request: 
 
 When the request hits the server, do: 
 
 Obviously people can (relatively) easily go through your JavaScript code and see what's going on; so make it harder for them there. Minify and Obfuscate the code. 
 If you make it hard enough for someone, they're going to try understand your JavaScript, try using Firebug, not understand what's going on, and not bother; for the sake of getting a few extra points on your game. 
 
 Use something like OAuth to authorize the request from client to server.
The header contains a token which matches to the body of the request. if these two doesn't match, then discard the request. Don't need to decrypt at server side, instead encrypt the body and check if the result obtained at server side and the token matches the same to find if the body was modified 
 
 Can you use ajax to send the score (and any identifiers) to the server? Unless they have something like firebug open they won't see it happening. 
 
 
 Make the client send you the credentials (or some sort of session information in case you don't have logon credentials) and do that over SSL (https). This way you have both authentication and integrity control. Very easy and extremely lightweight for both server and client. 
 