*** saving-arraylists-in-sqlite-databases ***

 So I want to save an ordered set of double values, and I want to be able to insert, retrieve or delete any value from this easily. As of such, I'm using a an ArrayList, where I define a class called Doubles to store the double values. 
 How do I store this arraylist in a record in an SQLite database? I mean...what should the columns type be? Can it be done? 
 
 You cannot insert ArrayList directly into Sqlite. Instead, you could use JSONObject (org.json.JSONObject) to insert the ArrayList. Please check below snippet, you can try something like below.... 
 To insert, 
 
 Insert the string into db. 
 To Read,
         Read the string from db as String,  
 
 
 To Insert : 
 
 //....Add Values to inputArray 
 
 To retreive: 
 Get the String from the SQLiteDatabse what you saved and changed into ArrayList type like below: 
 outputarray is a String which is get from SQLiteDatabase for this example. 
 
 
 In my case it was ArrayList of POJO classes Note 
 
 As manual says JSONObject supports only following types: Object: a JSONObject, JSONArray, String, Boolean, Integer, Long, Double, NULL, or null. May not be NaNs or infinities. So, I should break my Note class into supported objects.    
 
 Pack created array into JSONObject. 
 
 Create String. 
 
 Put created String in ContentValues, cause in my case it's Android app 
 
 And when i should read values from SQLite database. 
 
 
 I suggest going through all 3  Notepad tutorials  you want to store the values your storing to a database table. you don't store the actual array directly into the database just the data. but you shouldn't actually need to use an array at all instead of adding a new item to the array instead call your db insert method 
 
 I've needed to do something similar in my application, where I have a custom class (Foo, Bar, etc.) and I have an ArrayList of foo, bar, etc. that I persist to SQL. My knowledge of SQL isn't strong, but I'll explain my approach here in case it helps. My understanding is that to store any kind of object, you need to define a particular table for that object type, where the table has separate columns representing the primitive types within that object. Furthermore, to persist and retrieve an ArrayList of those objects, you'll use one table row per ArrayList entry, and iterate over in a loop to store and retrieve.  
 There are ArrayLists of several custom classes in my application that I wanted to persist to DB. So, to make things tidy (well, to me at least -- I'm still a relatively new Java / Android programmer, so take this with a pinch of salt) I decided to implement a kind of "SQL Serializable Interface" that my DB-persistable objects must implement. Each object (Foo, Bar, etc.) that can be persisted to DB must implement: 
 
 A public static final TABLE_NAME string, the name of the SQL DB table used for this object type. 
 A public static final TABLE_CREATE_STRING, a complete SQL instruction to create the table for this object. 
 A constructor method to populate its member variables from a ContentValues object.  
 A 'get' method to populate a ContentValues from its member variables. 
 
 So, say I have ArrayLists of objects Foo and Bar. When the DB is first created, within my DB helper class I call Foo.TABLE_CREATE_STRING, Bar.TABLE_CREATE_STRING, etc. to create the tables for those objects.  
 To populate my ArrayList, I use something like: 
 
 
 Create a dbHelper class which has an inner class and pretty much whatever the notepad tutorial says. The class must be having an insertion method somthing like this :- 
 
 This method will then add values into the table row.
After that you can call this method from your main activity and since you are using cursor i believe you will call the method in a for loop 
 for(i=0;list.length();i++)  or may be its  list.size :P 
 { 
 // Call the method here 
 } 
 and keep adding value in the database by calling the method in for loop 
 