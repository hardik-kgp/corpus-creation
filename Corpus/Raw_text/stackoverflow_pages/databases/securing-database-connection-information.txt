*** securing-database-connection-information ***

 I know that the question   has been asked and answered multiple times (e.g.  How to secure database passwords in PHP? ). 
 A commonly accepted answer to that question is to store the details outside of the web root. But I'm curious as to why this really makes much difference. 
 From what I understand, a person cannot download the source of the PHP file via HTTP (unless your web sever is not configured properly, but you would know about that right away). So you won't be able to see the credentials unless you have access to the source of the PHP file anyways. Correct me if I'm wrong, but doesn't this basically mean that you would need shell access? And if you have shell access, can't you just get to the file outside the web root anyways? 
 If the answer to that question is that the include file might have special permissions that don't allow anyone but the web server user to read it, then (considering that I have shell access), couldn't I just write (or modify) any PHP file to just echo out those credentials? 
 So the question is, does it  really  make any difference whether you store the credentials directly in the PHP script vs. in a file outside the web root? 
 
 Suppose, due to a error in the webserver, the webserver no longer processes php files, but treats them as html files.  
 In that case something like   would simple reveal the credentials of your database. 
 So the answer is: Yes, it does really matter, where and how you store the database credentials. 
 
 The main issue is that the web server might break down later on. E.g. after a software update php might not work properly anymore and the server falls back to delivering the files directly. Or again after a software update the configuration might be reset, so PHP is no longer registered for the file extension. Or the server breaks down under heavy load and also starts delivering files plainly. 
 Many things can happen and it's rather easy to mess up the config at some point. Better be safe and keep it outside the document root. 
 
 
 Create an O/S user for your application, such as 'UserForMyApp' 
 For that user, create an O/S user environment variable 'MY_APP_DATABASE_PASSWORD', and set the value 
 Run your app as 'UserForMyApp' 
 In MyApp, read the O/S user environment variable 'MY_APP_DATABASE_PASSWORD' and use that to login to the database 
 
 Other non-root users cannot read an O/S user environment variable for another user. This is default. You don't have to set anything, unlike w file permissions.  
 There is no chance of storing the password in source control by accident.  
 If db and app are on same machine could just let db trust local access without password. 
 