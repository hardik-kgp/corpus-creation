*** select-null-values-in-sqlalchemy ***

 Here's my (PostgreSQL) table -- 
 
 I want to select all people that are  **not**
 known to be married, i.e., including those with NULL marriage_status. 
 This does  **not**
 work -- 
 
 Of course this does -- 
 
 The problem is that I'm accessing it from SQLAlchemy with -- 
 
 which gets translated to -- 
 
 And does  **not**
 work -- 
 
 neither does -- 
 
 How should I select NULL values through SQLAlchemy? 
 
 (as indicated by  @augurar ): Because  sqlalchemy  uses  magic methods (operator overloading)  to create   constructs, it can only handle operator such as   or  , but is not able to work with   (which is a very valid Python construct). 
 Therefore, to make it work with sqlalchemy, you should use:   
 
 , basically replace the   with  . In this case your query will be translated properly to the following SQL: 
 
 See   in the  documentation . 
 
 Since SQLAlchemy 0.7.9 you may use the   method of the column. 
 A filter expression like: 
 
 will generate the parameterized SQL: 
 
 
 i ran into a similar problem 
 https://groups.google.com/forum/?fromgroups#!topic/sqlalchemy/EVpxsNp5Ifg%5B1-25%5D 
 short answer:
 - there is not a column operator for IS (NOT) NULL now, but there will be 
 in the meantime you can use either: 
 filter(tablename.is_deleted.op("IS NOT")(True))  
 filter(coalesce(tablename.is_deleted, False) != True)  
 