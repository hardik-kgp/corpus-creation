*** select-random-sampling-from-sqlserver-quickly ***

 I have a huge table of > 10 million rows. I need to efficiently grab a random sampling of 5000 from it. I have some constriants that reduces the total rows I am looking for to like 9 millon.  
 I tried using order by NEWID(), but that query will take too long as it has to do a table scan of all rows.  
 Is there a faster way to do this?  
 
 If you can use a pseudo-random sampling and you're on SQL Server 2005/2008, then take a look at TABLESAMPLE. For instance, an example from SQL Server 2008 / AdventureWorks 2008 which works based on rows: 
 
 The catch is that TABLESAMPLE isn't exactly random as it generates a given number of rows from each physical page. You may not get back exactly 5000 rows unless you limit with TOP as well. If you're on SQL Server 2000, you're going to have to either generate a temporary table which match the primary key or you're going to have to do it using a method using NEWID(). 
 
 Have you looked into using the TABLESAMPLE clause? 
 For example: 
 
 
 SQL Server 2000 Solution, regarding to Microsoft (instead of slow NEWID() on larger Tables): 
 
 
 The SQL Server team at Microsoft realized that not being able to take
  random samples of rows easily was a common problem in SQL Server 2000;
  so, the team addressed the problem in SQL Server 2005 by introducing
  the TABLESAMPLE clause. This clause selects a subset of rows by
  choosing random data pages and returning all of the rows on those
  pages. However, for those of us who still have products that run on
  SQL Server 2000 and need backward-compatibility, or who need truly
  row-level randomness, the BINARY_CHECKSUM query is a very effective
  workaround. 
 
 Explanation can be found here:
 http://msdn.microsoft.com/en-us/library/cc441928.aspx 
 
 Yeah, tablesample is your friend (note that it's not random in the statistical sense of the word):
 Tablesample at msdn 
 