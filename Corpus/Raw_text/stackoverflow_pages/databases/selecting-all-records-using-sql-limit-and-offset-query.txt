*** selecting-all-records-using-sql-limit-and-offset-query ***

 I wonder if there is a way to accomplish: 
 
 by using   and   like so: 
 
 Can I write SQL statement  **using**
 LIMIT and OFFSET but still getting ALL result?
 
*  of course I can use an   statement but I rather avoid it if possible   
 
 From the  MySQL documentation : 
 
 To retrieve all rows from a certain offset up to the end of the result
  set, you can use some large number for the second parameter. This
  statement retrieves all rows from the 96th row to the last: 
 SELECT * FROM tbl LIMIT 95,18446744073709551615; 
 
 So getting all rows might look as follows: 
 
 
 This may not be the best way to do it, but its the first that comes to mind... 
 
 Replace 1000000 with some adequately large number that you know will always be larger than the total number of records in the table. 
 
 I used this code in nodeJS with MySQL and it's run well, It's may help you.
Why you use it?  
 
 It's reliable because it's a string that will append with query. 
 If you want to set limit then you can put the limitation with the variable otherwise pass 0 with variable.     
 
 
 
 As the record will grow up, use   to dynamically find total amount of records, instead of using  . 
 
 then: 
 
 
 Maybe not the cleanest solution but setting limit to a very high number could work. Offset needs to be 0. 
 Why not use a   statement where you add the limit and offset to the query as a statement is true? 
 
 
 You might receive an error if you set the limit to a very high number as defined by mysql doc. Thereofre, you should try to limit it  9999999999999, going higher can give you an error unless you set up server to go higher. 
 You might want to use LIMIT in a function, therefore it is not a bad idea. If you use it in a function, you might want it to be Limit All at one point and limit 1 at another point.  
 Below, I list an example where you might want your application to have no limit.  
 
 function get_navigation($select = "*", $from= "pages", $visible= 1, $subject_id = 2, $order_by = "position", $sort_by = "asc", $offset=0, $limit = 9551615){
    global $connection; 
 
 