*** selecting-most-recent-date-between-two-columns ***

 If I have a table that (among other columns) has two DATETIME columns, how would I select the  **most recent**
 date from those two columns. 
 Example: 
 
 If I wanted my results to look like  
 
 Is there a simple way of doing this that I am obviously overlooking? I know I can do subqueries and case statements or even write a function in sql server to handle it, but I had it in my head that there was a max-compare type function already built in that I am just forgetting about. 
 
 CASE is IMHO your best option: 
 
 
 If one of the columns is nullable just need to enclose in  : 
 
 
 
 
 You can throw this into a scalar function, which makes handling nulls a little easier. Obviously it isn't going to be any faster than the inline case statement. 
 
 
 I think the accepted answer is the simplest.  However, I would watch for null values in the dates... 
 
 
 From  **SQL Server 2012**
 it's possible to use the shortcut   to   expression though the latter is SQL Standard: 
 
 
 Whenever possible, use InLine functions as they suffer none of the performance issues generally associated with UDFs... 
 
 For usage guidelines, see   Here 
 
 Other than case statement, I don't believe so...  
 
 
 AFAIK, there is no built-in function to get the maximum of two values, but you can write your own easily as: 
 
 and call it as 
 
 
 This thread  has several solutions. If you had more than 2 dates to compare, "unpivot" might be preferable to writing a series of case statements. The following is blatantly stolen from  Niikola : 
 
 Then you can  , if that's helpful. 
 
 All other correct answers as already posted. 
 But if you are still really looking for MAX keyword then here is a way :  
 
 
 
 
 
 
 Why couldn't you use the GREATEST function? 
 
 I included a NVL to ensure that NULL was evaluated correctly, otherwise if either Date1 or Date2 is null, the Greatest returns NULL. 
 
 