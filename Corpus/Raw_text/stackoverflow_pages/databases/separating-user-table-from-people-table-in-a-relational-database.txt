*** separating-user-table-from-people-table-in-a-relational-database ***

 I've done many web apps where the first thing you do is make a user table with usernames, passwords, names, e-mails and all of the other usual flotsam.  My current project presents a situation where non-users records need to function similarly to users, but do not need to the ability to be a first order user.   
 Is it reasonable to create a second table,  , that is the main relational table and data store, and only use the   for authentication? Does separating   from   present any problems?  If this is commonly done, what are some strategies and solutions as well as drawbacks?   
 
 This is certainly a good idea, as you are normalizing the database. I have done a similar design in an app that I am writing, where I have an employee table and a user table. Users may a from an external company or an employee, so I have separate tables because an employee is always a user, but a user may not be an employee. 
 The issues that you'll run into is that whenever you use the user table, you'll nearly always want the person table to get the name or other common attributes you would want to show up.  
 From a coding standpoint, if you're using straight SQL, it will take a little more effort to mentally parse the select statement. It may be a little more complicated if you're using an ORM library. I don't have enough experience with those. 
 In my application, I'm writing it in Ruby on Rails, so I'm constantly doing things like employee.user.name, where if I kept them together, it would be just employee.name or user.name. 
 From a performance standpoint, you are hitting two tables instead of one, but given proper indexes, it should be negligible. If you had an index that contained the primary key and the person name, for instance, the database would hit the user table, then the index for the person table (with a nearly direct hit), so the performance would be nearly the same as having one table. 
 You could also create a view in the database to keep both tables joined together to give you additional performance enhancements. I know in the later versions of Oracle you can even put an index on a view if needed to increase performance. 
 
 I routinely do that because for me the concept of "user" (username, password, create date, last login date) is different from "person" (name, address, phone, email).  One of the drawbacks that you may find is that your queries will often require more joins to get the info you're looking for.  If all you have is a login name, you'll need to join the "people" table to get the first and last name for example.  If you base everything around the user id primary key, this is mitigated a bit, but still pops up. 
 
 If user_tb has auth info, I would very much keep it separate from people_tb. I would however keep a relationship between the two, and most of users' info would be stored in people_tb except all of the info needed for auth (which i guess will not be used for much else) Its a nice tradeoff between design and efficiency i think. 
 
 I always try to avoid as much data repetition as possible. If not all people need to login, you can have a generic   table with the information that applies to both people and users (eg. firstname, lastname, etc). 
 Then for people that login, you can have a   table that has a 1~1 relationship with  . This table can store the username and password. 
 
 I'd say go for the normalized design (two tables) and only denormalize (go down to one user/person table) if it will really make your life easier down the line. If however practically all people are also users it may be simpler to denormalize up front. Its up to you; I have used the normalized approach without problems. 
 
 Very reasonable.   
 As an example, take a look at the aspnet_* services tables  here . 
 Their built in schema has a   and   with the later table having more extended information about a given user (hashed passwords, etc) but the   is used in the other portions of the schema for referential integrity etc. 
 Bottom line, it's very common, and good design, to have attributes in a separate table if they are different entities, as in your case. 
 
 That is definitely what we do as we have millions of people records and only thousands of users. We also separate address, phones and emails into relational tables as many people have more than one of each of these things. Critial is to not rely on name as the identifier as name is not unique. Make sure the tables are joined through some type of surrogate key (an integer or a GUID is preferable) not name. 
 