*** shelve-is-too-slow-for-large-dictionaries-what-can-i-do-to-improve-performance ***

 I am storing a table using python and I need persistence. 
 Essentially I am storing the table as a dictionary string to numbers. And the whole is stored with shelve 
 
 I use   to   as I found the system tends to be unstable if I don't. 
 After the computations the system needs to close the database, and store it back. Now the database (the table) is about 540MB, and it is taking ages. The time exploded after the table grew to about 500MB. But I need a much bigger table. In fact I need two of them. 
 I am probably using the wrong form of persistence. What can I do to improve performance? 
 
 For storing a large dictionary of   key-value pairs, I'd suggest a JSON-native storage solution such as  MongoDB . It has a wonderful API for Python,  Pymongo . MongoDB itself is lightweight and incredibly fast, and json objects will natively be dictionaries in Python. This means that you can use your   key as the object ID, allowing for compressed storage and quick lookup. 
 As an example of how easy the code would be, see the following: 
 
 You'd just have to convert back from unicode, which is trivial. 
 
 Based on my experience, I would recommend using  SQLite3 , which comes with Python. It works well with larger databases and key numbers. Millions of keys and gigabytes of data is not a problem. Shelve is totally wasted at that point. Also having separate db-process isn't beneficial, it just requires more context swaps. In my tests I found out that SQLite3 was the preferred option to use, when handling larger data sets locally. Running local database engine like mongo, mysql or postgresql doesn't provide any additional value and also were slower. 
 
 How much larger?  What are the access patterns?  What kinds of computation do you need to do on it? 
 Keep in mind that you are going to have some performance limits if you can't keep the table in memory no matter how you do it. 
 You may want to look at going to SQLAlchemy, or directly using something like  , but both of those will sacrifice simplicity of code.  However, with SQL you may be able to offload some of the work to the database layer depending on the workload. 
 
 I think your problem is due to the fact that you use the  . The  documentation  says (emphasis is mine): 
 
 Because of Python semantics, a shelf cannot know when a mutable
  persistent-dictionary entry is modified. By default modified objects
  are written only when assigned to the shelf (see Example). If the
  optional writeback parameter is set to True, all entries accessed are
  also cached in memory, and written back on sync() and close(); this
  can make it handier to mutate mutable entries in the persistent
  dictionary, but, if many entries are accessed, it can consume vast
  amounts of memory for the cache, and  **it can make the close operation
  very slow since all accessed entries are written back**
 (there is no way
  to determine which accessed entries are mutable, nor which ones were
  actually mutated). 
 
 You could avoid using   and make sure the data is written only once (you have to pay attention that subsequent modifications are going to be lost). 
 If you believe this is not the right storage option (it's difficult to say without knowing how the data is structured), I suggest sqlite3, it's integrated in python (thus very portable) and has very nice performances. It's somewhat more complicated than a simple key-value store. 
 See other answers for alternatives. 
 