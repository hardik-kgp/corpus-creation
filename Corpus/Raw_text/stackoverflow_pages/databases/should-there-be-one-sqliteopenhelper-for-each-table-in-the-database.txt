*** should-there-be-one-sqliteopenhelper-for-each-table-in-the-database ***

 Is it better to have a single big   subclass that defines   and   methods for every table in the database, or is better to have many   subclasses, one for each table? 
 Is there a best practice? Or are both acceptable, but with different good and bad side effects? 
 
 You should have a single SQLiteOpenHelper class for all the tables. Check  this  link. 
 
 Just for the sake of a different approach: 
 You can always overried on the   method have it called your   . Be sure to use the   statement rather than  
 
 You do that with every class that extends from SQLiteOpenHelper 
 
 @TheReader is right. I prefer a single SQLiteOpenHelper for all tables, here is what i do: pass a List of "table creation" sqls to the Constructor of the SQLiteOpenHelper subClass, then in the onCreate function iterate the list to create each table.
so my SQLiteOpenHelper subclass looks sth like this: 
 
 But that comes another problem: after adding a new table, and install the new version of the app with an existing old one installed, the new table won't be created, because the existence of the old database will prevent the onCreate function from being called. So user has to uninstall the app first, and install the app completely. The DATABASE_VERSION helps, it seem android  **will not**
 execute the onCreate function  **if and only if**
 the a existin database with the same name and the same DATABASE_VERSION  
 