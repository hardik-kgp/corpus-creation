*** should-we-use-prefixes-in-our-database-table-naming-conventions ***

 We are deciding the naming convention for tables, columns, procedures, etc. at our development team at work. The singular-plural table naming  has already been decided , we are using singular. We are discussing whether to use a prefix for each table name or not. I would like to read suggestions about using a prefix or not, and why. 
 Does it provide any security at all (at least one more obstacle for a possible intruder)? I think it's generally more comfortable to name them with a prefix, in case we are using a table's name in the code, so to not confuse them with variables, attributes, etc. But I would like to read opinions from more experienced developers. 
 
 I prefer prefixing tables and other database objects with a short name of the application or solution. 
 This helps in two potential situations which spring to mind: 
 
 You are less likely to get naming conflicts if you opt to use any third-party framework components which require tables in your application database (e.g. asp net membership provider). 
 If you are developing solutions for customers, they may be limited to a single database (especially if they are paying for external hosting), requiring them to store the database objects for multiple applications in a single database. 
 
 
 I find hungarian DB object prefixes to indicate their types rather annoying. 
 I've worked in places where every table name had to start with "tbl".  In every case, the naming convention ended up eventually causing much pain when someone needed to make an otherwise minor change. 
 For example, if your convention is that tables start with "tbl" and views start with "v", thn what's the right thing to do when you decide to replace a table with some other things on the backend and provide a view for compatibility or even as the preferred interface?  We ended up having views that started with "tbl". 
 
 I don't see how any naming convention can improve security... 
 If an intruder have access to the database (with harmful permissions), they will certainly have permissions to list table names and select to see what they're used for. 
 But I think that truly confusing table names might indirectly worsen security. 
It would make further development hard, thus reducing the chance security issues will be fixed, or it could even hide potential issues: 
 If a table named (for instance) 'sro235onsg43oij5' is full of randomly named coloumns with random strings and numbers, a new developer might just think it's random test data (unless he touches the code that interact with it), but if it was named 'userpasswords' or similar any developer who looks at the table would perhaps be shocked that the passwords is stored in plaintext. 
 
 Why not name the tables according to the guidelines you have in place for coding? Consider the table name a "class" and the columns a "property" or "field". This assists when using an ORM that can automatically infer table/column naming from class/member naming. 
 For instance,  Castle ActiveRecord , declared like below  assumes the names are the same  as the member they are on. 
 
 
 If you use SqlServer the good start would be to look at the sample databases provided for some guidance.  
 
 In the past, I've been opposed to using prefixes in table names and column names. However, when faced with the task of redesigning a system, having prefixes is invaluable for doing search and replace. For example, grepping for "tbl_product" will probably give you much more relevant results than grepping for "product". 
 
 If you're worried about mixing up your table names, employ a hungarian notation style system in your code. Perhaps "s" for string + "tn" for table name: 
 
 Of course, the prefix is up to you, depending on how verbose you like your code...  
 Appending a prefix to table names does have some benefits, especially if you don't hardcode that prefix into the system, and allow it to change per installation. For one, you run less risk of conflicts with other components, as Ian said, and secondly, should you wish, you could have two or instances of your program running off the same database. 
 