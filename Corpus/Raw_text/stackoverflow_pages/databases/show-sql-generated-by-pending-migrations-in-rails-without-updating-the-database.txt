*** show-sql-generated-by-pending-migrations-in-rails-without-updating-the-database ***

 I'd like to have a way to produce the actual sql (ie: if I pasted into a mysql console, it would work) that will be generated by a rake db:migrate without actually updating the target database. 
 rake db:migrate:status does a good job of showing which migrations are pending for a given database, but I've yet to find a way to get the actual SQL produced. 
 Any ideas? 
 
 This can be done by monkey-patching the database adapter. This example works for MySQL. 
 Create a rake task for "fake db:migrate": 
 
 
 The rake task monkey-patches the   method in the connection adapter so that SQL is printed instead of being executed, before actually running the migrations. However, we still have to execute some of the internal SQLs that are used by the   task to get the database schema and to find out which migrations are pending. That's what the   call does. 
 **Test**

 Suppose now that and we have a pending migration in  :
 
 
 Now, let's run our fake migrations task: 
 
 The migrations status has not been changed, i.e. the migration is still pending: 
 
 Tested on rails 4.2.3 with the   gem. 
 
 Very interesting question! I found this way: 
 
 Assume your migration placed in file   and called  
 Go to Rails console and load migration file: 
 
 Open transaction, run migration and rollback transaction before commit :) 
 
 
 If you want to check SQL on rollback, just call   on step 3. SQL will be executed and tested on database, but not committed - so you can verify your migration without affects. 
 
 A slightly more low-level function, which can be used for your purpose: 
 
 
 You can do  
 
 and rake will test the task. Then use one of the methods listed to get the SQL that would be run. 
 