*** simple-and-reliable-in-memory-database-for-fast-java-integration-tests-with-supp ***

 My integration tests would run much faster if I used in-memory-database instead of PostgreSQL. I use JPA (Hibernate) and I need an in-memory-database that would be easy to switch to using JPA, easy to setup, and reliable. It needs to support JPA and Hibernate (or vice verse if you will) rather extensively since I have no desire to adopt my data access code for tests. 
 What database is the best choice given requirements above? 
 
 For  **integration testing**
, I now use  H2  (from the original author of HSQLDB) that I prefer over HSQLDB. It is  faster  (and I want my tests to be as fast as possible), it has some nice features like  the  compatibility  mode, the dev team is very responsive (while HSQLDB remained dormant for years until very recently). 
 
 I've been using  HSQLDB   in-memory  for integration testing JPA/Hibernate persistence in Java. Starts pretty quickly, doesn't require any special setup. 
 The only issue I've seen so far with using HSQLDB with Hibernate was to do with batch size needing to be set to 0, but that might just have been related to an old version. I'll have a dig and see if I can find details of that problem. 
 Derby supports an in-memory mode  these days, it is no longer marked experimental. 
 
 I use Derby.  For one thing it is about 3 less lines of code per unit test since there is no need for a shutdown after the test.  However, you need to use a JPA implementation that can drop and create tables such as EclipseLink. 
 Derby can also initialize a new in-memory database from a file so you can have a reference database and revert to it at anytime. 
 For unit testing though, I prefer to create my objects in my unit test's @Before logic I find it easier especially with JPA as it allows me the flexibility to do refactorings and not have to worry about the underlying database structure, other tools such as DBunit rely on practically a static structure and refactoring implies changing of the DBunit XMLs manually rather than relying on Eclipse's refactoring capabilities. 
 