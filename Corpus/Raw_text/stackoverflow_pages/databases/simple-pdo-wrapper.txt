*** simple-pdo-wrapper ***

 My web application currently has do execute simple queries: simple CRUD operations, counting,... 
 A few months ago, someone recommended me here to write a simple PDO wrapper for this (to avoid writing try/catch, prepare(), execute(), etc. each time a query should be executed). This example method was shown (I've made some changes so I could use it in my own project): 
 
 As I need to perform more operations (executing queries, retrieving 1 record, retrieving multiple records, counting results) I created a method for all of these: 
 
 As you see, most of the code is the same. Only 2 lines of code are different for each method: the initialisation of $result (I always want to return a value, even if the query fails) and the fetching. Instead of using 4 methods, I could write just one of them and pass an extra parameter with the type of action. That way, I could use a bunch of if/else statements of a switch statement. However, I think the code can get messy. Is this a good way for solving this problem? If not, what would be a good solution to it? 
 The second problem I have (which is why I'm working on this class right now) is that I want to use prepared statements with the LIMIT SQL statement. However, it is not possible to do this: 
 
 The variabele will be quoted for some reason (and so the query will fail), as explained here:
 https://bugs.php.net/bug.php?id=40740 
 The solution seems to use bindValue() and use the int datatype as a parameter:
 http://www.php.net/manual/de/pdostatement.bindvalue.php 
 I could rewrite the method(s) to support this, but I would also need to use an extra parameter. I can't just use   anymore as I need to know the data type. 
 What's the best way to solve this? 
 Thanks 
 
 How about creating a class with methods that you can chain (for clarity, I've removed error checking): 
 
 You can then use it like this: 
 
 You could alter the   method to accept an array or associative array if you prefer, but I find this syntax quite clear - it avoids having to build an array.  The parameter type checking is optional, as   works for most values, but be aware of potential issues when passing null values (see  comment in   documentation). 
 