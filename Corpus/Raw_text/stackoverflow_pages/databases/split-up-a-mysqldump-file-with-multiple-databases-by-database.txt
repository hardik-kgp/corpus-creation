*** split-up-a-mysqldump-file-with-multiple-databases-by-database ***

 I have a mysqldump file of multiple databases (5). One of the database takes a very long time to load, is there a way to either split the mysqldump file by database, or just tell mysql to load only one of the specified databases? 
 Manish 
 
 This Perl script should do the trick. 
 
 Run this for the dump file containing all databases 
 
 
 Or, it is possible to save every database into separate file directly... 
 
 
 Here is a great blog post I always re-refer to to do this kind of thing with a  . 
 http://gtowey.blogspot.com/2009/11/restore-single-table-from-mysqldump.html 
 You can easily extend it to extract individual db's. 
 
 I've been working on a python script which splits one big dump file into small ones, one per database. It's name is dumpsplit and here's a scratch: 
 
 
 Like Stano suggested the best thing would be to do it at dump time with something like... 
 
 Of course, this relies on the presence of a ~/.my.cnf file with  
 
 Otherwise just define them with the -u and -p parameters to the mysql and mysqldump call: 
 
 Hope this helps 
 
 A "mysqldump file" is just a text file full of SQL statements. As such, you can use any variety of text editors to chop it up how you see fit.  
 You might be better served by doing a more selective dump in the first place (just one database per file, etc.). If you don't have access to the original database, you could also do a full restore, then use mysqldump again create dumps for the individual databases. 
 If you just want a quick and dirty solution, a quick google search yields references to a  couple   tools  that might also be useful.  
 
 I might do the dump and reload in steps: 
 
 Take the dump of table structure with --no-data with dumps per database. 
 Create the structure in new server  
 Take the data dump of table with --no-create-info per database level 
 Now, as have dumps per database, I can split the files even with cut file if some particular file is large. 
 
 Note: if you are using MyISAM tables, you can disable the indexes evaluation during step 4 and re-enable it later to make your insert faster. 
 