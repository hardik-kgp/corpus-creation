*** spring-data-crudrepositorys-save-method-and-update ***

 I wanted to know if the   method in   do an update if it finds already the entry in the database like :  
 
 So if I call that method on an already registred entry, it'll update it if it finds a changed attribute ? 
 Thanks. 
 
 
 I wanted to know if the {save} method in CrudRepository do an update
  if it finds already the entry in the database 
 
 The Spring documentation about it is not precise : 
 
 Saves a given entity. Use the returned instance for further operations
  as the save operation might have changed the entity instance
  completely. 
 
 But as the   interface doesn't propose another method with an explicit naming for updating an entity, we may suppose that yes since CRUD is expected to do all CRUD operations (CREATE, READ, UPDATE, DELETE). 
 This supposition is confirmed by the implementation of the  
class which is the default implementation of   which shows that both cases are handled by the method : 
 
 
 So if I call that method on an already registered entry, it'll update
  it if it finds a changed attribute? 
 
 It will do a merge operation in this case. So all fields are updated according to how the merging cascade and read-only option are set. 
 
 Looking at the default implemantation of CrudRepository interface  
 
 Save method manage two situations: 
 -If the person Id is null (a new entity is created) then save will call persist method => insert query will be executed.  
 -If the person id is not null then save will call merge: fetch the existing entity from entityManagerFactory(from the 2 level cache if it doesn't exist then it will be fetched from the database) and comparing the detached entity with the managed and finally propagate the changes to the database by calling update query.  
 
 I wanted to know if the {save} method in CrudRepository do an update if it finds already the entry in the database: 
 The Answer is Yes, It will update if it finds an entry: 
 From Spring Documentation: Here https://docs.spring.io/spring-data/jpa/docs/1.5.0.RELEASE/reference/html/jpa.repositories.html ? 
 Saving an entity can be performed via the CrudRepository.save(…)-Method. It will persist or merge the given entity using the underlying JPA EntityManager. If the entity has not been persisted yet Spring Data JPA will save the entity via a call to the entityManager.persist(…)-Method, otherwise the entityManager.merge(…)-Method will be called. 
 
 To be precise, the save(obj) method will treat obj as a  **new**
 record if the  **id is empty**
 (therefore will do an insert) and will treat obj as an  **existing**
 record if the  **id is filled in**
 (therefore will do the merge).  
 **Why is this important?**
  
Let's say the Project object contains an auto-generated id and also a person_id which must be unique. You make a Project object and fill in the person_id but not the id and then try to save. Hibernate will try to insert this record, since the id is empty, but if that person exists in the database already, you will get a duplicate key exception.  
 **How to handle**

Either do a findByPersonId(id) to check if the obj is in the db already, and get the id from that if it is found,  
Or just try the save and catch the exception in which case you know it's in the db already and you need to get and set the id before saving.  
 
 In my case I had to add the id property to the Entity, and put the annotation @Id like this. 
 
 This way when you get the object has the Id of the entity in the database, and does the Update operation instead of the Create. 
 