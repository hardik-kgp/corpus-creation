*** spring-securitypassword-encoding-in-db-and-in-applicationcontext ***

 Have config (applicationContext-security.xml): 
 
 from other side have SQLs from my  (it's  JdbcDaoImpl ): 
 
 There is now word about   in this code,so password selected from standard Spring Security   table not encoded. 
 Perhaps, I should provide some   attribute for   column in my hibernate mapping config here: 
 
 For now password saved to DB as is,but should be encoded. 
 How to friend   config and DB queries to be the same password encoding? 
 
 If you are choosing a hashing system yourself, rather than building an app using an existing database which already contains hashed passwords, then you should make sure your hashing algorithm also uses a salt. Don't just use a plain digest. 
 A good choice is bcrypt, which we now support directly in Spring Security 3.1 via the   (implemented using  jBCrypt ). This automatically generates a salt and concatenates it with the hash value in a single String. 
 Some databases have built-in support for hashing (e.g.  Postgres ). Otherwise, you need to hash the password yourself before passing it to JDBC: 
 
 That's all you need to do to encode the passwords when you create a user. 
 For authentication, you would use something like: 
 
 
 A little more explanation on the accepted answer. Hope it helps someone. 
 Hash the password yourself before putting it to database: 
 
 Add BCryptPasswordEncoder bean to your security-config.xml
      
 Add passwordEncoder as a property to Authentication Provider class. Autowire it or provide setter and getter methods.  
 
 Get the property while you authendicate user for login 
 
 And in the authenticating class match both passwords 
 
 
 In a simple way can you do something like in applicationContext-security.xml 
 
 In Java 
 
 Then test it 
 
 
 Using Spring Security 3.1, try this: 
 
 What's new:   points to   and   points to  . 
 **Edit:**
 In Java you will have to encode the password with something like this: 
 
 **Warn:**
 Be careful! Do not mix  SHA  with  MD5 ! 
 If you set the   of the   as  SHA , you need to encode in Java the same way to keep consistent. But if you enconde in Java as  MD5 , as the sample you found, do not forget to set the  hash  to "md5".  DigestUtils  also provides md5 encoder: 
 
 
 Just a tip for doing it with annotations 
 
 
 The accepted answer is right. 
I tested it with  **spring 3.1**
 and  **BCrypt**
 encode algorithm. 
 When create a user.  
 
 When the user login, Remember, use the plain password ( **not hashed**
). just like: 
 
 Here is security-config: 
 
 Hope it will help somebody! 
 
 with 3.1.x this mapping doesnt work for auth.
Working way is: 
 
 