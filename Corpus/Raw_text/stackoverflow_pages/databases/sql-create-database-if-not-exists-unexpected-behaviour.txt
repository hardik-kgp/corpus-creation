*** sql-create-database-if-not-exists-unexpected-behaviour ***

 I have a long stored procedure which begins with the following statement: 
 
 It is expected to create the DB on my local server, if it does not exist. The problem is that almost all of the time it goes thorugh this part of the stored procedure and does not create it, which then interferes with the other code from the same procedure. On the other hand, in very rare cases, it creates the DB. My question is: Is there a better way to check if the DB exists, because I have already tried at least 10. 
 Other ways I tried: 
 
 But if I run it outside of my sp, it works perfectly, which makes me think that it can be some problem related to permissions. 
 
 Try using 
 
 If that does not work, it could be the permissions. That would explain why you are not getting an error message. 
 
 ...minimum permissions required to see the corresponding row are
  ALTER ANY DATABASE or VIEW ANY DATABASE server-level permission, or
  CREATE DATABASE permission in the master database. The database to
  which the caller is connected can always be viewed in sys.databases 
 
 (From  sys.databases on MS documentation ) 
 What permissions does the user under which you are running has? 
 Try changing your code to just return the contents of sys.databases so you can see it. 
 
 Chiming in because I had a similar issue: I wanted to create a database if it does not exist, then perform operations on that database.  
 I think the problem was that the script tried to run in one batch, so it tried to   the database before the SQL server received the   command.
This resulted in the whole script getting reverted and it seemed like the root of the issue was that the database never got created. 
 In my case the solution was to  add a   command  after the initial part of the script where the table gets created but before I start working with it (e.g. creating tables). 
 
 When comparing strings use LIKE  
 
 