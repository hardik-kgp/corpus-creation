*** sql-cross-join-what-use-has-anyone-found-for-it ***

 
 
 
 
 
 Closed . This question needs to be more  focused . It is not currently accepting answers.
                            
                         
 
 
 
 
 
 
 
 
 
 
 Want to improve this question?  Update the question so it focuses on one problem only by  editing this post .
                         
 Closed  5 years ago . 
 
 
 
 Today, for the first time in 10 years of development with sql server I used a cross join in a production query. I needed to pad a result set to a report and found that a cross join between two tables with a creative where clause was a good solution. I was wondering what use has anyone found in production code for the cross join?      
 Update: the code posted by Tony Andrews is very close to what I used the cross join for. Believe me, I understand the implications of using a cross join and would not do so lightly. I was excited to have finally used it (I'm such a nerd) - sort of like the time I first used a full outer join.     
 Thanks to everyone for the answers! Here's how I used the cross join: 
 
 
 One use I've come across a lot is splitting records out into several records, mainly for reporting purposes. 
 Imagine a string where each character represents some event during the corresponding hour.  
 
 Now you want a report which shows how many events happened at what day.  Cross join the table with a table of IDs 1 to 24, then work your magic... 
 
 => 
 
 
 A typical legitimate use of a cross join would be a report that shows e.g. total sales by product and region.  If no sales were made of product P in region R then we want to see a row with a zero, rather than just not showing a row. 
 
 
 I have different reports that prefilter the recordset (by various lines of business within the firm), but there were calculations that required percentages of revenue firm-wide.  The recordsource had to contain the firm total instead of relying on calculating the overall sum in the report itself.  
 Example:  The recordset has balances for each client and the Line of Business the client's revenue comes from. The report may only show 'retail' clients. There is no way to get a sum of the balances for the entire firm, but the report shows the percentage of the firm's revenue. 
 Since there are different balance fields, I felt it was less complicated to have full join with the view that has several balances (I can also reuse this view of firm totals) instead of multiple fields made up sub queries. 
 Another one is an update statement where multiple records needed to be created (one record for each step in a preset workflow process). 
 
 Here's one, where the CROSS JOIN substitutes for an INNER JOIN. This is useful and legitimate when there are no identical values between two tables on which to join. For example, suppose you have a table that contains version 1, version 2 and version 3 of some statement or company document, all saved in a SQL Server table so that you can recreate a document that is associated with an order, on the fly, long after the order, and long after your document was rewritten into a new version. But only one of the two tables you need to join (the Documents table) has a VersionID column. Here is a way to do this: 
 
 
 I've used a CROSS JOIN recently in a report that we use for sales forcasting, the report needs to break out the amount of sales that a sales person has done in each General Ledger account. 
 So in the report I do something to this effect: 
 
 This gives me every GL account for every sales person like: 
 
SalesPsn    AccountN
1000    40100
1000    40200
1000    40300
1000    48150
1000    49980
1000    49990
1005    40100
1005    40200
1005    40300
1054    48150
1054    49980
1054    49990
1078    40100
1078    40200
1078    40300
1078    48150
1078    49980
1078    49990
1081    40100
1081    40200
1081    40300
1081    48150
1081    49980
1081    49990
1188    40100
1188    40200
1188    40300
1188    48150
1188    49980
1188    49990
 
 
 For charting (reports) where every grouping must have a record even if it is zero.
(e.g. RadCharts) 
 
 I had combinations of am insolvency field from my source data.
There are 5 distinct types but the data had combinations of 2 of these. So I created  lookup table of the 5 distinct values then used a cross join for an insert statement to fill out the rest. like so 
 
 
 I personally try to avoid cartesian product's in my queries.  I suppose have a result set of every combination of your join could be useful, but usually if I end up with one, I know I have something wrong. 
 