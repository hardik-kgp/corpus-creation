*** sql-full-text-search-vs-like ***

 Let's say I have a fairly simple app that lets users store information on DVDs they own (title, actors, year, description, etc.) and I want to allow users to search their collection by any of these fields (e.g. "Keanu Reeves" or "The Matrix" would be valid search queries). 
 What's the advantage of going with SQL full text search vs simply splitting the query up by spaces and doing a few "LIKE" clauses in the SQL statement?  Does it simply perform better or will it actually return results that are more accurate? 
 
 Full text search is likely to be quicker since it will benefit from an index of words that it will use to look up the records, whereas using LIKE is going to need to full table scan. 
 In some cases LIKE will more accurate since LIKE "%The%" AND LIKE "%Matrix" will pick out "The Matrix" but not "Matrix Reloaded"  whereas full text search will ignore "The" and return both.  That said both would likely have been a better result. 
 
 Full-text indexes (which are indexes) are much faster than using LIKE (which essentially examines each row every time).  However, if you know the database will be small, there may not be a performance need to use full-text indexes.  The only way to determine this is with some intelligent averaging and some testing based on that information. 
 Accuracy is a different question.  Full-text indexing allows you to do several things (weighting, automatically matching eat/eats/eating, etc.) you couldn't possibly implement that in any sort of reasonable time-frame using LIKE.  The real question is whether you need those features. 
 Without reading the full-text documentation's description of these features, you're really not going to know how you should proceed.  So, read up! 
 Also, some basic tests (insert a bunch of rows in a table, maybe with some sort of public dictionary as a source of words) will go a long way to helping you decide. 
 
 A full text search query is much faster. Especially when working which lots of data in various columns. 
 Additionally you will have language specific search support. E.g. german umlauts like "ü" in "über" will also be found when stored as "ueber". Also you can use synonyms where you can automatically expand search queries, or replace or substitute specific phrases. 
 
 In some cases LIKE will more accurate
  since LIKE "%The%" AND LIKE "%Matrix"
  will pick out "The Matrix" but not
  "Matrix Reloaded" whereas full text
  search will ignore "The" and return
  both. That said both would likely have
  been a better result. 
 
 That is not correct. The full text search syntax lets you specify "how" you want to search. E.g. by using the  CONTAINS  statement you can use exact term matching as well fuzzy matching, weights etc. 
 So if you have performance issues or would like to provide a more "Google-like" search experience, go for the full text search engine. It is also very easy to configure. 
 
 Just a few notes: 
 
 LIKE can use an Index Seek if you don't start your LIKE with %. Example: LIKE 'Santa M%' is good! LIKE '%Maria' is bad! and can cause a Table or Index Scan because this can't be indexed in the standard way. 
 This is very important. Full-Text Indexes updates are Asynchronous. For instance, if you perform an INSERT on a table followed by a SELECT with Full-Text Search where you expect the new data to appear, you might not get the data immediatly. Based on your configuration, you may have to wait a few seconds or a day. Generally, Full-Text Indexes are populated when your system does not have many requests.   
 
 
 It will perform better, but unless you have a lot of data you won't notice that difference.  A SQL full text search index lets you use operators that are more advanced then a simple "LIKE" operation, but if all you do is the equivalent of a LIKE operation against your full text index then your results will be the same. 
 
 Imagine if you will allow to enter notes/descriptions on DVDs. 
In this case it will be good to allow to search by descriptions. 
Full text search in this case will do better job. 
 
 You may get slightly better results, or else at least have an easier implementation with full text indexing. But it depends on how you want it to work ... 
 What I have in mind is that if you are searching for two words, with LIKE you have to then manually implement (for example) a method to weight those with both higher in the list. A fulltext index should do this for you, and allow you to influence the weightings too using relevant syntax. 
 
 To   in SQL Server as  
First, You have to create a   and assign it to your table 
 
 Second, use the following tSql script: 
 
 
 If you do not just search English word, say you search a Chinese word, then how your fts tokenizes words will make your search a big different, as I gave an example here  https://stackoverflow.com/a/31396975/301513 . But I don't know how sql server tokenizes Chinese words, does it do a good job for that? 
 