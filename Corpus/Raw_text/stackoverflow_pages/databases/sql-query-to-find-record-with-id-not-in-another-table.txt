*** sql-query-to-find-record-with-id-not-in-another-table ***

 I have two tables with binding primary key in database and I desire to find a disjoint set between them. For example, 
 
  has columns ( ) and sample data:    
  has columns ( ) and sample data:  
 
 So how do I create a SQL query so I can fetch the row with ID from   that is not in  . In this case,   should be returned?  
 **Ps.**
 The ID is the primary key for those two tables.  
 Thanks in advance. 
 
 Try this  
 
 
 Use  
 
 
 **Fast Alternative**

 I ran some tests (on postgres 9.5) using two tables with ~2M rows each. This query below performed at least 5* better than the other queries proposed:  
 
 
 There are basically 3 approaches to that:  ,   and  .  
 **LEFT JOIN with IS NULL**

 
 **NOT IN**

 
 **NOT EXISTS**

 
 Which one is better? The answer to this question might be better to be broken down to major specific RDBMS vendors. Generally speaking, one should avoid using   when the magnitude of number of records in the sub-query is unknown. Some vendors might limit the size. Oracle, for example, has a  limit of 1,000 . Best thing to do is to try all three and show the execution plan.  
 Specifically form PostgreSQL, execution plan of   and   are the same. I personally prefer the   option because it shows better the intent. After all the semantic is that  you want to find records in A that its pk  **do not exist**
 in B . 
 Old but still gold, specific to PostgreSQL though:  https://explainextended.com/2009/09/16/not-in-vs-not-exists-vs-left-join-is-null-postgresql/ 
 
 Keeping in mind the points made in @John Woo's comment/link above, this is how I typically would handle it: 
 
 
 
 