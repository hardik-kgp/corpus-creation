*** sql-select-from-multiple-tables ***

 Using PHP/PDO/MySQL is it possible to use a wildcard for the columns when a select is done on multiple tables and the returned array keys are fully qualified to avoid column name clash? 
 example: 
 **SELECT * from table1, table2;**

 gives: 
 Array keys are 'table1.id', 'table2.id', 'table1.name' etc. 
 I tried "SELECT table1.*,table2.* ..." but the returned array keys were not fully qualified so columns with the same name clashed and were overwritten. 
 
 Yes, you can. The easiest way is with pdo, although there's at least a few other extensions which are capable of it. 
 **pdo**

 Set the attribute on the  PDO  object, not the  PDOStatment . 
 
 That's it. Then you get associative array keys like  . It works if you fetch an object too (eg via  ) so beware, because you need to access the properties like  
 *The  manual says  the   attribute is only supported by certain drivers. If the above doesn't work, this  might  work instead. 
 
 
 Same basic pattern is used for other database extensions 
 **mysql**

 
 
 **mysqli**

 
 This should also work with table aliases (tested in php 7.1) - the qualified column name will use the table alias. 
 
 you can do this: 
 
 where you get all columns from one table using "*" and then just the columns from the other table you need, so there is no clash. 
 You could also use column aliases, where you "rename" a column: 
 
 your result set would be of columns T1_A and T2_A 
 
 Unfortunately, no; there is no SQL syntax for ensuring that column names are unique.  
 If you truly don't know the names of the columns and must use  , your only real option would be to revert to some very ugly looking dynamic SQL that could inspect the structure of the tables and generate a query that would select them all explicitly with a table-name prefix. 
 I don't know which RDBMS you're using, but something like this should work on SQL Server: 
 
 
 Shamelessly repackaged from @goat: 
 
 NOTE: if you use: 
 
 SELECT 1 FROM my_table AS my_table_alias 
 
 then you will get  . I would have hoped for  . I got this result with PHP 5.6 and sqlite driver. 
 
 Unfortunately, PHP (particularly the MySQL, PgSQL, MSSQL extensions) will always have your columns overwrite in the case of overlap. 
 I would recommend creating a   in your database, and Alias your columns so that they are "fully-qualified". 
 For example: (MySQL) 
 
 The syntax may not be perfect, but you can get a general idea of what I am talking about. 
 