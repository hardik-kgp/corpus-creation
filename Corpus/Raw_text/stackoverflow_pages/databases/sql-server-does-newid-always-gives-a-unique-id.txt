*** sql-server-does-newid-always-gives-a-unique-id ***

 Does the   function never give me the same ID as it already did? Let's say I select a   and it returns '1' (just as an example). Will it never return '1' again? Is it impossible? 
 
 Both   and   give globally unique values of type  . 
  involves random activity, thus the next value is unpredictable, and it's slower to execute. 
  doesn't involve random activity, thus  the next generated value can be predicted  (not easily!) and executes faster than  . 
 So, if you're not concerned about the next value being predicted (for security reasons), you can use  . If you're concerned about predictability or you don't mind the tiny performance penalty you can use  . 
 However, in strict sense, there are still negligible chances that GUIDs generated by different machines have the same value. In practice, it's considered as being impossible. 
 If you want further info, read this:  Which method for generating GUIDs is best for ensuring the GUID is really unique? 
 Note   complies  RFC 4122 . And the other function uses a Microsoft's algorithm for generating the value. 
 
 If you're running   on the same machine then the return value will always be unique because it incorporates the current time stamp in its calculation. 
 On separate machines/systems, however, you could  technically  get the same id but the probability of that happening is so low that today's SQL DB community has essentially accepted that it IS impossible. Microsoft has more or less banked their reputation on it. 
 Related 
 
 https://stackoverflow.com/a/12550377/1439748 
 https://msdn.microsoft.com/en-us/library/ms190348.aspx 
 
 
 I had the same question, so I ran this simple query to see how unique the newid () could be, as you'll see there is no repeated IDs even in the same milisecond: 
 
 You can define @TRIES as you wish. 
 