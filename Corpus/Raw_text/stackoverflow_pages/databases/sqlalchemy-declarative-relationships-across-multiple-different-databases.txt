*** sqlalchemy-declarative-relationships-across-multiple-different-databases ***

 It took me a while, but I figured out how to use SQLAlchemy to model a relationship across two different kinds of databases: 
 
 I have to do this because the TERM table is in an Oracle database on which I only have read access, and I'm writing an app that records surveys, taken by students, about that term. 
 The above works, but it's very fragile when the number of tables climbs up, as the Session needs to specify exactly which mapped classes correspond to which engine.  I would really like to be able to use a different   to define which tables belong to which engine, instead of binding each table individually.  Like this: 
 
 Unfortunately, this results in the following error when the query runs: 
   
 even though I  **did**
 add the relationship() to Survey after Term was defined. 
 Does anyone have any suggestions? 
 
 You can't. AFAIK there's no single query against two different databases. Also, your Models have to share the same Metadata instance to be used in the same query.  
 Perhaps you can link the Oracle db to the MySQL db on the DB layer via ODBC, then you'd only talk to MySQL. I have never done this, and I don't know how it works. 
 You can also query both databases independently and filter and select data on the application layer, whichever is less work. 
 
 Possibly very late with this reply, but you could have defined the metadata separate from the declarative base and then passed it onto both. ie: 
 
 