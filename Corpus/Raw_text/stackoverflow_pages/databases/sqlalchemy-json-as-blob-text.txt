*** sqlalchemy-json-as-blob-text ***

 I'm storing JSON down as blob/text in a column using MySQL.  Is there a simple way to convert this into a dict using python/SQLAlchemy? 
 
 You can very easily  create your own type  with SQLAlchemy 
 
 For SQLAlchemy versions >= 0.7, check out  Yogesh's answer  below 
 
 
 This can be used when you are defining your tables (example uses elixir): 
 
 You can also use a different json serialiser to jsonpickle. 
 
 I think the JSON example from the SQLAlchemy docs is also worth mentioning: 
 http://www.sqlalchemy.org/docs/core/types.html#marshal-json-strings 
 However, I think it can be improved to be less strict regarding NULL and empty strings: 
 
 
 There is a recipe for this in the  official documentation : 
 
 
 How about  json.loads() ? 
 
 
  has been deprecated (v0.7 onward), the  documentation recommends  using   instead. 
 I found a  Git gist  by  dbarnett  that I have tested for my usage. It has worked well so far, for both dictionary and lists. 
 Pasting below for posterity: 
 
 
 Based on @snapshoe answer and to answer @Timmy's comment: 
 You can do it by using properties. Here is an example of a table: 
 
 Now you can use it on a   object: 
 
 I know this is an old Question maybe even dead, but I hope this could help someone. 
 
 This is what I came up with based on the two answers above. 
 
 
 As an update to the previous responses, which we've used with success so far. As of MySQL 5.7 and SQLAlchemy 1.1 you can use the  native MySQL JSON data type , which gives you better performance and a whole  range of operators  for free. 
 It lets you to create  virtual secondary indexes  on JSON elements too. 
 But of course you will lock yourself into running your app on MySQL only when moving the logic into the database itself. 
 