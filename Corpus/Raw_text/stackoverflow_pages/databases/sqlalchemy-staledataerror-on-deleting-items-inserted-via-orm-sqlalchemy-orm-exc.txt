*** sqlalchemy-staledataerror-on-deleting-items-inserted-via-orm-sqlalchemy-orm-exc ***

 I'm having an issue where I get a an error such as this one: 
 
 So, I have a good idea what is causing the issue but I have been unable to solve it. 
 I have a page_view model, that has a foreign key on   and a  . 
 Here's what the model looks like: 
 
 Here's what the relations look like 
 
 I am adding some items to my database using an insert statement, something similar to this: 
 
 As far as I can tell from the logs, the transactions gets committed properly and I see the items in the DB. 
 However, when I try to delete the page item using the ORM, I get the StaleDataError exception.  Looking at the logs, I see the ORM issuing a delete statement but then rolling back due to the error. 
 I have tried experimenting with   as well as   right after the insert statement but they weren't very helpful and I still the error. 
 Here's what I see in the SQLAlchemy logs. 
 
 I thought the double delete statement was  a suspect, maybe pointing to a misconfigured ORM relation but I don't think that's the case. 
 
 I guess I can give a  **hint**
 on this problem. The short version is: "You will probably have to modify data in the Database manually to solve the issue". 
 The longer version: I had a similar issue with SQLite. I had the following table mapped: 
 
 see that composite primary key? I somehow managed to insert two rows with the same recipe_title/product_title pair. I was surprized to find  out that there were not a single constraint on the side of SQLite for this table (no primary key, no fereign key - it was just a plain vanilla table), but well - thats the way sqlalchemy goes, not my business. 
 Then when I tried to delete a persited object involving those two rows, sqlalchemy saw that it's constraints were violated and it threw the 'StaleDataError'. Finally I just had to remove one duplicatinng row manually from SQLite table.  
 
 Although columns can be marked as  , make sure this is enforced on the database level as well (for example when the database was created by some different tool). In MySQL this means ensuring they are   and not only  . 
 In my case there were 2 columns marked as   (composite) but  there were multiple rows containing the same (supposedly) unique  's. 
 