*** sqlconnection-close-inside-using-statement ***

 I'm using this code: 
 
 Is it wrong if I don't add   before disposing it? I mean. It's not showing any errors, no problems at all. Is it better to Close it first? If yes, why? 
 
 No need to   the   block will take care of that for you.  
 As stated from  MSDN : 
 
 The following example creates a SqlConnection, opens it, displays some
  of its properties. The connection is automatically closed at the end
  of the using block.  
 
 
 
 The   even if an exception occurs while you are calling methods on the object.  ; in fact, this is how the using statement is  **translated by the compiler**
.  MSDN 
 So ultimately your code line 
 
 will be converted into a normal   by compiler calling  
 
 According to  MSDN documentation for the   method :  
 
 you must explicitly close the connection by calling  **Close**
 or  **Dispose**
.  **Close**
 and  **Dispose**
 are functionally equivalent. 
 
 Therefore, calling   (implicitly so, even, using  ) will cover your bases, as it were. 
 It's worth noting, too, I think,though not specific to your case, that   will always effectively be called when the thing is wrapped in a   statement - which might  not  be the case should it be omitted and an exception occur without the proper  / /  handling. 
 
 
 Is it wrong if I don't add sqlConnection.Close(); before disposing it 
 
 No, it is not as long as you are using your connection within  .  When you will leave the using scope,   will be called for sql connection. which will  close the existing connection  and free-up all the resources as well. 
 
 The using statement is a try finally block and in your case the final block would have a   call. So you don't really need a independent   statement there. 
 The advantage is that this ensures the disposal even in case of an exception since the finally block will always run. 
 
 
 You are using a   which will   the object for you. 
 If you take the connection outside of the   statement, then yes - you would need to close the connection when finished. 
 
 No, it is not wrong. The sqlConnection will close the connection after it will pass  **using**
 block and call Dispose method. SqlConnection.Dispose() equal to SqlConnection.Close() method. 
 From MSDN:  If the SqlConnection goes out of scope, it won't be closed. Therefore, you must explicitly close the connection by calling Close or Dispose. Close and Dispose are functionally equivalent. 
 