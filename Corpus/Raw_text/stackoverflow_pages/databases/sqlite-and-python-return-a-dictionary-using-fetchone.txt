*** sqlite-and-python-return-a-dictionary-using-fetchone ***

 I'm using sqlite3 in python 2.5.  I've created a table that looks like this: 
 
 I'm accessing it with something like this: 
 
 What I'd like to be able to do is have fetchone (or some other method) return a dictionary, rather than a list, so that I can refer to the field by name rather than position.  For example: 
 
 I know you can do this with MySQL, but does anyone know how to do it with SQLite? 
 Thanks!!! 
 
 The way I've done this in the past: 
 
 Then you set it up in your connection: 
 
 This works under pysqlite-2.4.1 and python 2.5.4. 
 
 There is actually an option for this in sqlite3.  Change the   member of the connection object to  : 
 
 or 
 
 This will allow you to access row elements by name--dictionary-style--or by index.  This is much more efficient than creating your own work-around. 
 
 I was recently trying to do something similar while using sqlite3.Row(). While sqlite3.Row() is great for providing a dictionary-like interface or a tuple like interface, it didn't work when I piped in the row using **kwargs. So, needed a quick way of converting it to a dictionary. I realised that the Row() object can be converted to a dictionary simply by using itertools. 
 Python 2: 
 
 Or in Python 3, more simply: 
 
 Similarly, you can use the dbCursor.fetchall() command and convert the entire set of rows to a list of dictionaries in a for loop. 
 
 Sure, make yourself a DictConnection and DictCursor as explained and shown at  http://trac.edgewall.org/pysqlite.org-mirror/wiki/PysqliteFactories  for example. 
 
 I know you're not asking this, but why not just use sqlalchemy to build an orm for the database?  then you can do things like, 
 
 as an added bonus your code will be easily portable to an alternative database, and connections and whatnot will be managed for free. 
 
 I've used this: 
 
 Then you can do this: 
 
 Now   is a dictionary where the keys are   and the values are  . This also works for  
 
 I use something like this: 
 
 with this: 
 
  is a class that inherits from  .
SqliteRow class is a base class for every object that I want to have returned by a query.
Every column becomes an attribute and is logged into the   list.
Function   is used to change the whole object to a form suitable for queries (simply pass the whole object and forget).  
 To get different class types of that function. You would need to make a factory object, that will generate objects based on the list of fields (for example: dict with { some_unique_value_made_of_fields: class}  ) 
 This way I get a simple ORM. 
 
 The following works for me: 
 
 Another option: 
 
 Rest of Code: 
 
 Sources:   mysql.connector.cursor  ,  MySQLdb.cursors.DictCursor 
 