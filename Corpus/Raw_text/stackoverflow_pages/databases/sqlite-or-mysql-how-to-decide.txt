*** sqlite-or-mysql-how-to-decide ***

 
 
 
 
 
 Closed . This question needs to be more  focused . It is not currently accepting answers.
                            
                         
 
 
 
 
 
 
 
 
 
 
 Want to improve this question?  Update the question so it focuses on one problem only by  editing this post .
                         
 Closed  4 years ago . 
 
 
 
 Any good rules of thumb on how to decide which of the two to use? 
 And, if you take over an Sqlite database, and the system is expected to "get much larger", how to decide whether to stick with it or move to MySql? 
 
 Their feature sets are not at all the same. Sqlite is an embedded database which has no network capabilities (unless you add them). So you can't use it on a network. 
 If you need 
 
 Network access - for example accessing from another machine;  
 Any real degree of concurrency - for example, if you think you are likely to want to run several queries at once, or run a workload that has lots of selects and a few updates, and want them to go smoothly etc. 
 a lot of memory usage, for example, to buffer parts of your 1Tb database in your 32G of memory. 
 
 You need to use mysql or some other server-based RDBMS. 
 Note that MySQL is not the only choice and there are plenty of others which might be better for new applications (for example pgSQL). 
 Sqlite is a very, very nice piece of software, but it has never made claims to do any of these things that RDBMS servers do. It's a small library which runs SQL on local files (using locking to ensure that multiple processes don't screw the file up). It's really well tested and I like it a lot. 
 Also, if you aren't able to choose this correctly by yourself, you probably need to hire someone on your team who can. 
 
 The sqlite team published an article explaining  when to use sqlite  that is great read. Basically, you want to avoid using sqlite when you have a lot of write concurrency or need to scale to terabytes of data. In many other cases, sqlite is a surprisingly good alternative to a "traditional" database such as MySQL. 
 
 SQLite out-of-the-box is not really feature-full regarding concurrency. You will get into trouble if you have hundreds of web requests hitting the same SQLite database. 
 You should definitely go with MySQL or PostgreSQL. 
 If it is for a single-person project, SQLite will be easier to setup though. 
 
 My few cents to previous excellent replies.
the site www.sqlite.org works on a sqlite database. Here is the  link  when the author (Richard Hipp) replies to a similar question. 
 