*** sqliteopenhelper-how-is-the-database-created ***

 I'm making a database application, and my program works and I've understood most of the tutorial I've been following. However, one aspect remains unclear to me. 
 There is an inner class of MyDBHelper extending SQLiteOpenHelper.  Outer  variables include the SQLiteDatabase called d. The code for the MyDBHelper is: 
 
 My question is how does this actually create the initial database. It  occurs in the onCreate() method, but as far as I can see, this is  **never**
 called. I understand that it is called when the database is created for the first time, but where? And furthermore, how is it passed a SQLiteDatabase db? I haven't passed any database to the method. And how is my SQLiteDatabase db variable from the  outer  class set to the created database? Could someone talk me through this like an idiot? 
 
  and   methods are really called the first time when Db is created.
In facts, it's checked in   methods of  . It will check if the DB already exist on the data directory and what is it's version. According to this it will either call  . Or nothing, if db file exist and of correct version. 
 You can search your code for executing  . That is the time when this check will be performed. 
 Please let me know if more details are needed. Good luck 
 
 Keep in mind that you are extending SQLiteOpenHelper, all of the magic happens in this super class, specifically the database is initially created (or just re-opened) when you call either   or  . These two methods:  
 
 Define the   variable (and control passing   to your callback methods) 
 Initialize   by calling your   method or opening the existing database 
 Check the version number and call your   or   if necessary 
 
 They also call a few more callback methods like  ,  , etc. ( Read more  about these methods.)  If it will help, you can read through  the source code  yourself to understand the structure of how and when all of this happens. 
 
 The onCreate() method is not a constructor for this class.  onCreate is called when you create the DB.  
 Here PeopleDB extends SQLiteOpenHelper.  This code is from a different class and  onCreate is called when getWritableDatabase() or getReadableDatabase(), or anything of the sort is called 
 
 Hope that helps. 
 
 See our database is created in the openhelper's constructor itself not in the overridden onCreate method. Inside onCreate method we are firing a query for creating a table in the database which is created in open helper's constructor to insert the data not creating the database. 
 One more thing is SQLiteDatabase object is not instantiated in SQLiteOpenHelper class. It is instantiated in the class where you want to use the database to perform db operations and there you need to write a function like this to intialise or open your database to get ready for insertion. 
 
 Here is code you have to write for any operation in database like insertion deletion anything, you just have to change the QUERY 
 
 
 Probably, in   or   when they are called for the first time 
 
 
 You create a subclass implementing onCreate(SQLiteDatabase), onUpgrade(SQLiteDatabase, int, int) and optionally onOpen(SQLiteDatabase), and this class takes care of opening the database if it exists, creating it if it does not, and upgrading it as necessary. (Android Developer Website) 
 
 The class   is called "Helper" for good reason. It saves us app writers considerable effort. 
 The  **first time**
 that you call   (or  ) for your implementation of  , your   statement in your constructor passes the current   and the database   that you prefer to the superclass constructor for  .  
 The superclass constructor then sets up initial space for your   and assigns it the name that you passed through  .  
 When finished, the superclass constructor calls   and passes the named   that it created through  's only parameter. Since   only gets called this one time, it's a very good place to call   to define the structure of your database. 
 Subsequent executions of   (or  ) merely open the database for you and never again call  . (When the superclass constructor notes that   has sent a different version number,   is calle.) 
 Understanding the way   creates a database without obvious code and how the heck   gets passed an argument "out of the blue" was a real chore for me. Now I can't believe it could have ever been hard. 
 