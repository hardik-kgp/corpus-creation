*** storage-of-sqlite-database-using-android-and-phonegap ***

 I'm developing a Android Cordova/Phonegap app where I want to use a SQLite database. I used the example from the official  documentation .  
 
 Although this seems to work (the database is created and filled without errors, and I get the written data back with the query), I'm wondering how the database is stored on my device. For debugging I use a hardware phone with Android 4.1.1.  
 The database is located under  . Now I wanted to export the database and analyze it manually on my pc with SQLiteManager, but it seems the changes are not written to the db file.  
 However, when examining the directory   i found the two temporary files   and  , whose timestamps are changed every time I perform a database operation, but never the db file itself. 
 My question is, why are the changes never written to the persistent database file? There does not seem to be a way to close a database connection with phonegap, and even killing the app manually doesn't write the changes to the .db file. I'm not sure what I did wrong. 
 Anyone seeing the problem here? 
 
 
 This line above deletes the table named DEMO everytime you start your PhoneGap mobile application 
 And I just wanted to tell you I love your code.  It gives a very good clue about "what to do" for anyone's PhoneGap or Cordova application.  It will greatly help anyone who is entering the world of SQLite for the first time.  
 Your code is very clean to read and understand compared to the codes written on Cordova/PhoneGap SQLite plugin official website on GitHub.   
 My friend, who also works as the CTO of a company, and has a plenty of experience with SQLite, told me that it is not necessary to close a SQLite database connection manually, and also greatly recommended SQLite. 
 **And for anyone else looking for SQLite for PhoneGap/Cordova information -**

 Let's say you have a table named mytable and want to store values "beautiful" and "dolphin"  
 When you want to perform an operation on the SQLite of a mobile device, such as a tablet or  phone, remember to call it this way 
 Have the following in your source code 
 
 and store "beautiful" inside var1 and "dolphin" inside var2 and 
 do the following statement in order to execute the SQL insert statement and then save inside the device. 
 
 **Do not**
 directly call insertNewLine(tx)  
 **Do not**
 directly call tx.executeSql( /* SQL INSERT STATEMENT */ ); in your JavaScript sourcecode 
 **And do not**
 include the values straight into the SQL query statement and then run the SQL statement that includes the values you want to store in the database. 
 In other words, the following is  **incorrect**
  
 
 The above is incorrect because the values you want to store, "beautiful" and "dolphin" are included inside the SQL statement.  They should be separate.   
 The following is the correct way to run the INSERT SQL 
 
 and then perform the entire database transaction by including the following in your JavaScript code 
 
 **not the below code**

 
 **not the below code either**

 
 And to use the SELECT SQL statement, have the following code 
 
 And then, perform the database transaction 
 
 If you are trying to choose one from SQLite, WebSQL and IndexedDB, please remember that I searched around stackoverflow for a while and learned that  
 
 Nobody likes IndexedDB because of its complexity  
 IndexedDB is incompatible with many types and versions of mobile OS  
 WebSQL has been deprecated by W3C 
 WebSQL returns 673K results but SQLite returns 1800K results.  IndexedDB returns 300K results on Google 
 Among IndexedDB, SQLite and WebSQL, SQLite is the only one with an official website.   
 
 The following command at the command line while you are in the directory of your Cordova project will install the SQLite plugin into your Cordova project 
 
 
 **The solution is : Debug your app with emulator instead of physical device.**

 Run your app with   instead of physical device. You will find your   file in  . You can   the   file and browse the tables and data.  
 
 In  WAL mode , any changes are written to the   file; the database file itself does not get updated until a  checkpoint  is done. 
 If there is a   file, you must copy it, too. 
 