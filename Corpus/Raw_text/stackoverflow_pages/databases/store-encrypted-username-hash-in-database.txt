*** store-encrypted-username-hash-in-database ***

 I'm currently working on basic user authentication for an app I'm putting together, and I don't have much experience with security. 
 This said, I understand the practice (and necessity) of salting/storing a (salted) password hash in a database as a blob, as opposed to the password (encrypted or no).  I've already implemented this. 
 Is there anything to be gained by salting/hashing a user name and storing the hash in the database, as opposed to the username in plain-text (or encrypted)?  It strikes me this would make it quite a bit harder to determine which users may access the system using the database for authentication.   
 Since it's vital to make it difficult for someone to crack the password for a user account, wouldn't it also make sense to increase the difficulty for determining which users are viable? 
 Edit: it's possible some of the language I'm using isn't 100% correct: feel free to correct :-) 
 Edit2: I changed one of my first points to indicate salting hashes -- thanks everyone for pointing out that I missed this :-) 
 Edit3: Removed wording indicating I am encrypting/decrypting a password.  I'm using salted hashes and am storing that in the DB -- thanks Scotty for pointing this out. 
 
 **Short answer:**
 most likely no. 
 **Long answer:**
 Your situation seems to lack the key "my usernames are sensitive because of ..." which raises the question: "Why? What is the specific, demonstrable problem that protecting usernames would solve?" 
 Without that problem, what you are describing is a common pitfall in security-related development (and really development as a whole): coming up with some idea to secure or obfuscate some part of the system, and then searching for a reason to use it. As with anything in software development, you should avoid doing anything other than exactly what is needed until a clear problem presents itself that can only be solved by using a specific tool. 
 **Extra hint (for free!):**
  salt your password hashes . Plain-old hashes are  far less secure . 
 
 **It depends on the context**

 It's important to assess the sensitivity of the material you're serving. To dig deeper, I'll provide a few use cases. 
 **Scenario 1: A social networking application**

 All of your user's interactions happen in the public. Their email address will be used as their username. There username is not considered private because their name appears in all their posts. The username may be searched by other users and/or email invites are enabled. 
 Verdict - Hashing = Bad 
 **Scenario 2: An E-Commerce site**

 The user may or may not participate in public interactions (ex. commenting, reviews). Using an email address as the username is probably a bad idea because, through the use of password recovery, a compromised email account means a compromised user account on your site. 
 There is a lot of gray area here that is typically exploited for 'convenience.' If your site uses email as the user name, stores shipping history, and credit card numbers; a compromised email could mean a lot of identity theft troubles for your user. 
 In this case, using a policy where the username  **is not**
 the user's email address is probably a good idea. Hashing the email adds no value. 
 Note: I'm looking at you  Amazon.com . 
 Verdict: Common Practice != good practice 
 **Scenario 3: A porn site**

 Make the username a pseudonym and the login name the user's email address. They may feel inclined to talk about the content and don't necessarily want their name to show up on Google's results for a smut site. 
 Assume the worst here. If somehow your database is hacked, the exposing of your user's identities could cause irreparable harm. Don't think this could happen to you?  Take a look at this article . 
 Not only are their user's accounts hacked and passwords exposed but, there's a good chance a lot of those users used the same password on their email accounts. Now their info is posted anonymously on PasteBin for the whole world to see. Even worse, most of them probably don't even know this has happened yet. 
 By simply hashing both the username and password, they would have saved themselves and their users a whole lot of trouble. 
 Verdict: Definitely hash the email address whether or not it's used as the username. 
 **Scenario 4: A bank**

 It should go without saying that no expense should be spared when it comes to banking/financial sites. 
 Security can be increased by: 
 
 Using a username other than the email address 
 Forcing a unique username by requiring numbers and letters 
 Hashing passwords 
 Requiring 2-point authentication (in case the user's email password is compromised) 
 Hashing email addresses 
 etc... 
 
 No expense should be spared to protect your users because, to not do so, means you're gambling with their livelihood.  
 
 **Conclusion:**

 There is no hard and fast rule for security that applies to all sites. In some cases, the username is made public so hashing it adds no value. In others, not hashing it could cause irreparable harm. If you do end up developing a site where a username/email hash could be made useful here's a good approach. 
 
 Hash the username 
 Generate a unique salt for the user 
 Hash the password using the salt 
 Store the password with the salt in the database 
 
 By not hashing the username with a salt you avoid the chicken/egg problem. Unless you use a static salt for all of the usernames. 
 Keep in mind that a static salt for all the user accounts may be found out by reading the code. Once a static salt is found out, it'll essentially be useless when a rainbow table attack is employed. If you salt the passwords, generate a dynamic salt and store it along with the rest of the user's credentials in the database. 
 **If you want hard/fast rules for simplicity here are a few good assumptions to remember:**

 
 Assume your database may be compromised at some point 
 Assume your source code will be compromised at some point 
 Assume your user's email will be compromised at some point 
 Assume your user's are dumb and use the same password for your site as they use for their email 
 Assume that hackers are smart/resourceful and financially driven. 
 
 If you choose to store sensitive/private data, then going the extra step may save you a PR/legal nightmare in the future. 
 **Update:An interesting article about **
**seed hashing just showed up on Coding Horror**
**.**

 
 If you salted & hashed the username, you'd leave yourself with a bit of a chicken & egg problem. 
 If you salted & hashed the username, how would you find it in the database?  You'd need to look up the user's record to find the salt you used to hash the username... 
 
 Probably not.  Think of it this way - the username is the application's way of figuring out which account a user is trying to login as.  The password is the application's way of figuring out whether the user is actually allowed to login as that account.  In practice, this means you're going to look up a row in your accounts table using the username as an index. By encrypting the username, you're simply making it harder to find the right row.   
 However, if you're using the same encryption scheme to encrypt the username and password, they are pretty much equally secure - if you can break one, you can break the other.  Thus, encrypting both makes it harder to lookup the user, but doesn't add any additional security. 
 **Note:**
 In your question you talk about decrypting your password field.  You probably want to make this impossible (literally).  Most people encrypt their passwords using a one-way hash function of some sort (MD5 and SHA256 are popular), along with a salt.  The "one-way" part simply means that once you run something through the function, you can't use what you get out to get what you started with.  However, if you start with the same input, you'll always get the same output.  The salt is a secret that only your application knows (sort of like an encryption key), which is added to whatever you are encrypting, before it is run through the one-way hash.  This makes it impossible to do things like match two encrypted passwords from two different sites (assuming they're using different salts). 
 
 It's not very fair to your users to store their password in plain text since everybody that has access to your database can see their passwords. You should use a salted hash. 
 Salt_(cryptography) 
 
 You can never properly evaluate the security of a system by looking at a single part of it in isolation. Whereabouts are you storing the key to decrypt the passwords?  
 Do the people that have access to the database also have access to the location you are storing the encyption key? If so you've only gained a minor improvement in security by encrypting the passwords and probably nothing much more to gain by encrypting the usernames. 
 If the decryption key and program using it are more secure than the database - which is pretty unusual, normally the database is in the most secure spot possible - then there would possibly be additional benefit to also encrypting the username as you'd be depriving attackers of useful information in brute force attacks. 
 