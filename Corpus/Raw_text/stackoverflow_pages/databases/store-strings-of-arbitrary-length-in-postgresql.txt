*** store-strings-of-arbitrary-length-in-postgresql ***

 I have a Spring application which uses JPA ( **Hibernate**
) initially created with Spring Roo. I need to store Strings with arbitrary length, so for that reason I've annotated the field with  **@Lob**
: 
 
 The application works ok in localhost but I've deployed it to an external server and it a problem with encoding has appeared. For that reason I'd like to check if the data stored in the PostgreSQL database is ok or not. The application creates/updates the tables automatically. And for that field (message) it has created a column of type: 
 
 text NOT NULL 
 
 The problem is that after storing data if I browse the table or just do a SELECT of that column I can't see the text but numbers. Those numbers seems to be identifiers to "somewhere" where that information is stored. 
 Can anyone tell me exactly what are these identifiers and if there is any way of being able to see the stored data in a @Lob columm from a pgAdmin or a select clause? 
 Is there any better way to store Strings of arbitrary length in JPA? 
 Thanks. 
 
 I would recommend skipping the '@Lob' annotation and use columnDefinition like this: 
 
 see if that helps viewing the data while browsing the database itself. 
 
 Use the @LOB definition, it is correct.  The table is storing an OID to the catalogs -> postegreSQL-> tables -> pg_largeobject table.   
 The binary data is stored here efficiently and JPA will correctly get the data out and store it for you with this as an implementation detail. 
 
 Old question, but here is what I found when I encountered this: 
 http://www.solewing.org/blog/2015/08/hibernate-postgresql-and-lob-string/ 
 Relevant parts below. 
 
 The Hibernate PostgreSQL9Dialect stores @Lob String attribute values by explicitly creating a large object instance, and then storing the UID of the object in the column associated with attribute. 
 Obviously, the text of our notes isnâ€™t really in the column. So where is it? The answer is that Hibernate explicitly created a large object for each note, and stored the UID of the object in the column. If we use some PostgreSQL large object functions, we can retrieve the text itself. 
 Use this to query: 
 
 