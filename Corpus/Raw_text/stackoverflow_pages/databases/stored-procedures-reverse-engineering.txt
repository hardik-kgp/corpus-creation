*** stored-procedures-reverse-engineering ***

 We're having problem with a huge number of legacy stored procedures at work. Do you guys recommend any tool the can help better understand those procedures? Some kind of reverse engineering that indentifies inter-procedure dependencies and/or procedure vs. tables dependencies. Can be a free or commercial tool. 
 Thanks! 
 
 Redgate has a rather expensive product called  SQL Dependency Tracker  that seems to fulfill the requirements. 
 
 The cheaper solution than 'dependency tracker' is the data dictionary table sys.sql_dependencies which from which this data can be queried from the data dictionary.  Oracle has a data dictionary view with similar functionality called DBA_DEPENDENCIES (plus equivalent USER_ and ALL_ views) .  Using the other data dictionary tables (sys.tables/DBA_TABLES) etc. you can generate object dependency reports. 
 If you're feeling particularly keen you can use a recursive query (Oracle CONNECT BY or SQL Server Common Table Expressions) to build a complete object dependency graph. 
 Here's an example of a recursive CTE on sys.sql_dependencies.  It will return an entry for every dependency with its depth.  Items can occur more than once, possibly at different depths, for every dependency relationship.  I don't have a working Oracle instance to hand to build a CONNECT BY query on DBA_DEPENDENCIES so anyone with edit privileges and the time and expertise is welcome to annotate or edit this answer. 
 Note also with   that you can get column references from  .  This could be used (for example) to determine which columns were actually used in the ETL sprocs from a staging area with copies of the DB tables from the source with more columns than are actually used. 
 
 I've got this to open-up to the community now.  Could someone with convenient access to a running Oracle instance post a CONNECT BY recursive query here?  Note that this is SQL-server specific and the question owner has since made it clear that he's using Oracle.  I don't have a running Oracle instance to hand to develop and test anything. 
 
 I think the  Red Gate Dependency Tracker mentioned by rpetrich  is a decent solution, it works well and Red Gate has 30 day trial (ideally long enough for you do do your forensics). 
 I would also consider isolating the system and running the  **SQL Profiler which will show you all the SQL action on the tables**
. This is often a  **good starting point for building a sequence diagram or however you choose to document these codes**
. Good luck!   
 
 Redgate SQL Doc. the generated documentation included cross-referenced dependency information. For example, for each table, it lists views, stored procedures, triggers etc that reference that table.   
 
 What database are the stored procedures in? Oracle, SQL Server, something else? 
 **Edit based on comment:**
 Given you're using Oracle then, have a look at  TOAD . I use a feature in it called the Code Roadmap, which allows you to graphically display PL/SQL interdependancies within the database. It can run in Code Only mode, showing runtime call stack dependancies, or Code Plus Data mode, where it also shows you database objects (tables, views, triggers) that are touched by your code. 
 (Note - I am a TOAD user, and gain no benefit from referring it) 
 
 This isn't real deep or thorough, but I think that if you're using MS SQL Server or Oracle (Perhaps Nigel can help with a PL-SQL sample)...Nigel is on to something . This only goes 3 dependencies deep, but could be modified to go however deep you need. It's not the prettiest thing...but it's functional... 
 
 
 How to find the dependency chain of a database object  (MS SQL Server 2000(?)+)
by Jacob Sebastian 
 
 Every time he needs to deploy a new report or modify an existing
  report, he needs to know what are the database objects that depend on
  the given report stored procedure. Some times the reports are very
  complex and each stored procedure might have dozens of dependent
  objects and each dependent object may be depending on other dozens of
  objects. 
 He needed a way to recursively find all the depending objects of a
  given stored procedure. I wrote a recursive query using CTE to achieve
  this. 
 
 
 The single best tool for reverse engineering is by APEX. Its amazing. It can even trace into .NET assemblies and tell you where the procs are used. Its by far the deepest product of its kind. RedGate has great other tools but not in this case.  
 