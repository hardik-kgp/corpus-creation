*** storing-dotnetopenauth-information-and-user-info-retrieval ***

 This question is a bit of a structural/design question as I'm having trouble working out the best way to perform the task. 
 In my MVC app, I am using DotNetOpenAuth (3.4) as my login information provider and just using the standard   for cookies etc. 
 The current user table in the DB has: 
 
 UserId (PK, uniqueidentifier) 
 OpenIdIdentifier (nvarchar(255)) 
 OpenIdDisplay (nvarchar(255)) 
 Displayname (nvarchar(50)) 
 Email (nvarchar(50)) 
 PhoneNumber (nvarchar(50)) 
 
 As the UserId is the clear identifier for a user (they should be able to change their OpenId provider at a later date), it is the key that other tables link to (for a user). 
 This is the current code, that on a successfull authentication, creates a temporary user and redirects to Create Action. 
 
 And now for the crux of the question: 
 
 Is the   the correct piece of information to be storing against a user? 
 Is   the preferred way to forms authentication? Or is there a better way? 
 When I call SetAuthCookie, there is no data relating to the user except for the  . If I'm consistently referring to their  , is a better idea to create the user, then store that   in the cookie instead of the  ? 
 If I'm using that UserId in a number of places, how do I either retrieve it from the cookie, or store it somewhere else more logical/useful? 
 
 A bit long winded but I've been having trouble trying to work out the best way to do this/ 
 
 
 1.Is the response.ClaimedIdentifier the correct piece of information to be storing against a user? 
 
 Yes .  And make sure the column you store it in the database with is case sensitive.  Here is a table schema that demonstrates how to make sure it is case sensitive.  This comes out of the DotNetOpenAuth project template's database schema.  The "CS" bit of the specified collation stand for Case Sensitive. 
 
 
 2.Is FormAuthentication.SetAuthCookie the preferred way to forms authentication? Or is there a better way? 
 
 For MVC apps it definitely is, since you still can return your preferred   from the method. 
 
 3.When I call SetAuthCookie, there is no data relating to the user except for the ClaimedIdentifier. If I'm consistently referring to their UserId, is a better idea to create the user, then store that UserId in the cookie instead of the ClaimedIdentifier? 
 
 That sounds like personal preference.  But I would typically go with user_id, since it might result in a faster database lookup every time an HTTP request comes in that requires you to look up any user information.   
 
 4.If I'm using that UserId in a number of places, how do I either retrieve it from the cookie, or store it somewhere else more logical/useful? 
 
 FormsAuthentication  does  provide a way to store more information in its encrypted cookie than just username, but it is harder than you'd expect to use it.  This snippet comes out of DotNetOpenAuth's web SSO RP sample: 
 
 Then you can get at that extra data in a future HTTP request with this: 
 
 