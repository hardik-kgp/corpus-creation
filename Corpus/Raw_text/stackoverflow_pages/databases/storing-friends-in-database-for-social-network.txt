*** storing-friends-in-database-for-social-network ***

 For storing friends relationships in social networks, is it better to have another table with columns   or should the confirmed friend's user_id be seralized/imploded into a single long string and stored along side with the other user details like   and limit to like only 5000 friends similar to facebook? 
 Are there any better methods? The first method will create a huge table! The second one has one column with really long string... 
 On the profile page of each user, all his friends need to be retrieved from database to show like 30 friends similar to facebook, so i think the first method of using a seperate table will cause a huge amount of database queries? 
 
 The most  proper  way to do this would be to have the table of Members (obviously), and a second table of Friend relationships. 
 You should never  ever  store foreign keys in a string like that. What's the point? You can't join on them, sort on them, group on them, or any other things that justify having a relational database in the first place. 
 If we assume that the Member table looks like this: 
 
 Then your Friendship table should look like this: 
 
 Then, you can join the tables together to pull a list of friends 
 
 (This is specifically SQL Server syntax, but I think it's pretty close to MySQL. The   is a parameter) 
 This is always going to be faster than splitting a string and making 30 extra SQL queries to pull the relevant data. 
 
 Separate table as in method 1. 
method 2 is bad because you would have to unserialize it each time and wont be able to do JOINS on it; plus UPDATE's will be a nightmare if a user changes his name, email or other properties.  
 sure the table will be huge, but you can index it on Member11_id, set the foreign key back to your user table and could have static row sizes and maybe even limit the amount of friends a single user can have. I think it wont be an issue with mysql if you do it right; even if you hit a few million rows in your relationship table. 
 