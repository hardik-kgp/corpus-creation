*** storing-image-in-database-directly-or-as-base64-data ***

 The common method to store images in a database is to convert the image to   data before storing the data. This process will increase the size by 33%. Alternatively it is possible to directly store the image as a  ; for example: 
 
 and then display the image with 
 
 With the latter method, we save 1/3 storage space. Why is it more common to store images as   in MySQL databases? 
 **UPDATE:**
 There are many debates about advantages and disadvantages of storing images in databases, and most people believe it is not a practical approach. Anyway, here I assume we store image in database, and discussing the best method to do so. 
 
 
 **Pro base64:**
 the encoded representation you handle is a pretty safe string. It contains neither control chars nor quotes. The latter point helps against SQL injection attempts. I wouldn't expect any problem to just add the value to a "hand coded" SQL query string. 
 **Pro BLOB:**
 the database manager software knows what type of data it has to expect. It can optimize for that. If you'd store base64 in a TEXT field it might try to build some index or other data structure for it, which would be really nice and useful for "real" text data but pointless and a waste of time and space for image data. And it is the smaller, as in number of bytes, representation. 
 
 
 I contend that images (files) are NOT usually stored in a database base64 encoded. Instead, they are stored in their raw binary form in a binary (blob) column (or file). 
 Base64 is only used as a transport mechanism, not for storage. For example, you can embed a base64 encoded image into an XML document or an email message. 
 Base64 is also stream friendly. You can encode and decode on the fly (without knowing the total size of the data). 
 While base64 is fine for transport,  **do not store your images base64 encoded**
. 
 Base64 provides no checksum or anything of any value for storage. 
 Base64 encoding increases the storage requirement by 33% over a raw binary format. It also increases the amount of data that must be read from persistent storage, which is still generally the largest bottleneck in computing. It's generally faster to read less bytes and encode them on the fly. Only if your system is CPU bound instead of IO bound, and you're regularly outputting the image in base64, then consider storing in base64. 
 Inline images (base64 encoded images embedded in HTML) are a bottleneck themselves--you're sending 33% more data over the wire, and doing it serially (the web browser has to wait on the inline images before it can finish downloading the page HTML). 
 If you still wish to store images base64 encoded, please, whatever you do, make sure you don't store base64 encoded data in a UTF8 column then index it. 
 
 I recommend looking at modern databases like NoSQL and also I agree with  **user1252434**
's post. For instance I am storing a few < 500kb PNGs as base64 on my Mongo db with binary set to true with no performance hit at all. Mongo can be used to store large files like 10MB videos and that can offer huge time saving advantages in metadata searches for those videos, see  storing large objects and files in mongodb .  
 