*** strange-behavior-in-powershell-function-returning-dataset-datatable ***

 This is driving me crazy. I have a library I source from multiple scripts, which contains the following function: 
 
 This is called pretty much everywhere and it works just fine, except that I normally have to do this: 
 
 So I created a new simple wrapper function to avoid the extra step of dereferencing the first table: 
 
 The problem is that what's being returned from here is the  Rows collection of the table  for some reason, not the  table  itself. This causes the   row loop written as above to fail with a "Cannot index into a null array." exception. After much trial and error I figured out this works: 
 
 Note the difference between   and just   in the   statement. This  **works**
. Because   actually points to the Rows collection. If the statement 
 
 is supposedly correct, why is the function returning a child collection of the table object instead of the table itself? 
 I'm guessing there's something in the way Powershell functions work that's causing this obviously, but I can't figure out what.  
 
 You can use the comma operator to wrap the rows collection in an array so that when the array is unrolled you wind up with the original rows collection e.g.: 
 
 Essentially you can't prevent PowerShell from unrolling arrays/collections.  The best you can do is workaround that behavior by wrapping the array/collection within another, single element array. 
 
 PowerShell special-cases the DataTable internally. It does not implement any of the usual suspect interfaces like ICollection, IList or IEnumerable which normally trigger the unrolling. You can dig into this a bit with: 
 
 Yet: 
 
 -Oisin 
 
 Oh yes, I've been struggeling with this one too until I got this post..(tnxs Keith !) 
 2 things you need to indeed focus on
a) prepend your returned object with the comma indeed 
b) when you're filling your adaptor, make sure to either assign the outcome to a (disposalble) variable  **or**
 do an Out-Null 
 I didn't do the Out-Null and even with a prepended comma, I kept getting a collection back (item 0=  number of rows from the query, item1= the datatable) 
Drove my a bit crazy until I picked the Out-null parameter out. 
 Very weird IMHO, as I'm asking specifically to return the datatable but kept getting the collection back, even with the "," in front 
 
 