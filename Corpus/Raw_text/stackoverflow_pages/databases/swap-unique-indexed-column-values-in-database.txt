*** swap-unique-indexed-column-values-in-database ***

 I have a database table and one of the fields (not the primary key) is having a unique index on it. Now I want to swap values under this column for two rows. How could this be done? Two hacks I know are: 
 
 Delete both rows and re-insert them. 
 Update rows with some other value
and swap and then update to actual value. 
 
 But I don't want to go for these as they do not seem to be the appropriate solution to the problem.
Could anyone help me out? 
 
 I think you should go for solution 2. There is no 'swap' function in any SQL variant I know of. 
 If you need to do this regularly, I suggest solution 1, depending on how other parts of the software are using this data. You can have locking issues if you're not careful. 
 But in short: there is no other solution than the ones you provided. 
 
 The magic word is  **DEFERRABLE**
 here: 
 
 RESULT: 
 
 
 Further to Andy Irving's answer 
 this worked for me (on SQL Server 2005) in a similar situation
where I have a composite key and I need to swap a field which is part of the unique constraint. 
 key:  pID, LNUM 
rec1: 10, 0
rec2: 10, 1
rec3: 10, 2 
 and I need to swap LNUM so that the result is 
 key:  pID, LNUM
rec1: 10, 1
rec2: 10, 2
rec3: 10, 0 
 the SQL needed: 
 
 
 There is another approach that works with SQL Server: use a temp table join to it in your UPDATE statement. 
 The problem is caused by having two rows with the same value  at the same time , but if you update both rows at once (to their new, unique values), there is no constraint violation. 
 Pseudo-code: 
 
 Thanks to Rich H for this technique.
- Mark 
 
 I also think that #2 is the best bet, though I would be sure to wrap it in a transaction in case something goes wrong mid-update. 
 An alternative (since you asked) to updating the Unique Index values with different values would be to update all of the other values in the rows to that of the other row. Doing this means that you could leave the Unique Index values alone, and in the end, you end up with the data that you want. Be careful though, in case some other table references this table in a Foreign Key relationship, that all of the relationships in the DB remain intact. 
 
 Assuming you know the PK of the two rows you want to update... This works in SQL Server, can't speak for other products. SQL is (supposed to be) atomic at the statement level: 
 
 so you will go from: 
 
 to: 
 
 
 I have the same problem.  Here's my proposed approach in PostgreSQL.  In my case, my unique index is a sequence value, defining an explicit user-order on my rows.  The user will shuffle rows around in a web-app, then submit the changes. 
 I'm planning to add a "before" trigger.  In that trigger, whenever my unique index value is updated, I will look to see if any other row already holds my new value.  If so, I will give them my old value, and effectively steal the value off them. 
 I'm hoping that PostgreSQL will allow me to do this shuffle in the before trigger. 
 I'll post back and let you know my mileage. 
 
 For Oracle there is an option, DEFERRED, but you have to add it to your constraint. 
 
 To defer ALL constraints that are deferrable during the entire session, you can use the ALTER SESSION SET constraints=DEFERRED statement.  
 Source 
 
 I usually think of a value that absolutely no index in my table could have. Usually - for unique column values - it's really easy. For example, for values of column 'position' (information about the order of several elements) it's 0.  
 Then you can copy value A to a variable, update it with value B and then set value B from your variable. Two queries, I know no better solution though. 
 
 Oracle has deferred integrity checking which solves exactly this, but it is not available in either SQL Server or MySQL. 
 
 In SQL Server, the MERGE statement can update rows that would normally break a UNIQUE KEY/INDEX. (Just tested this because I was curious.) 
 However, you'd have to use a temp table/variable to supply MERGE w/ the necessary rows. 
 
 1)  switch the ids for name  
 
 For the sample input, the output is: 
 id    student  
 
 "in case n number of rows how will manage......" 
 