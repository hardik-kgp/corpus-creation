*** switching-from-sqlite-to-mysql-with-flask-sqlalchemy ***

 I have a site that I've built with Flask SQLAlchemy and SQLite, and need to switch to MySQL. I have migrated the database itself and have it running under MySQL, but  
 
 Can't figure out how to connect to the MySQL database (that is, what the   should be) and 
 Am unclear if any of my existing SQLAlchemy SQLite code will work with MySQL. 
 
 I suspect that (1) is fairly simple and just a matter of being shown how to map, for example, the contents of the connection dialog I use in my MySQL database tool to an appropriately formatted URL. But I'm worried about (2), I had assumed that SQLAlchemy provided an abstraction layer so that  simple SQLAlchemy code such as   
 
 wold work without any modifications other than an appropriate change to the database URI; but the  examples I've found  for using SQLAlchemy with MySQL seem to use a completely different API. 
 Can I (2) migrate my Flask SQLAlchemy code to work with a MySQL database by simply changing the database URI and if so (1) what should that URI be? 
 
 The tutorial pointed by you shows the right way of connecting to MySQL using SQLAlchemy. Below is your code with very little changes: 
 My assumptions are your MySQL server is running on the same machine where Flask is running and the database name is db_name. In case your server is not same machine, put the server IP in place of  . 
 
 It happened to me that the default driver used by   ( ), doesn't get compiled for me in my virtual environments. So I have opted for a MySQL driver with full python implementation  . Once you install it using  , the SQLALCHEMY_DATABASE_URI will change to: 
 
 The purpose of using ORM like SQLAlchemy is that , you can use different database with little or no change in most cases. So, my answer is yes. You should be able to use your sqlite code to work with MySQL with the URI mapped as in above code. 
 
 The accepted answer was correct at the time, but the syntax in the import statement has been deprecated.  
 This: 
 
 Should be replaced with: 
 
 Since questions regarding database connections tend to get traffic and stay relevant for a long time, it's worth having on the record. 
 The deprecation is in the  Flask Version 1.0 Changelog , which actually uses this module in the example: 
 
 flask.ext - import extensions directly by their name instead of
  through the flask.ext namespace. For example, import
  flask.ext.sqlalchemy becomes import flask_sqlalchemy. 
 
 