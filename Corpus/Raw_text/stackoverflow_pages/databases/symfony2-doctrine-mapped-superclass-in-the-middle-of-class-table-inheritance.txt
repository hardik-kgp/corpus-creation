*** symfony2-doctrine-mapped-superclass-in-the-middle-of-class-table-inheritance ***

 I currently have a model structure as follows: 
 
 The idea here is to be able to tie a comment to any of the other tables. This all seems to be working ok so far (granted, I'm still exploring design options so there could be a better way to do this...), but the one thing I've noticed is that the subclasses have some common fields that I'd like to move into a common parent class. I don't want to move them up into the BaseEntity as there will be other objects that are children of BaseEntity, but that won't have those fields. 
 I've considered creating a MappedSuperclass parent class in the middle, like so: 
 
 I figured this would work, but the doctrine database schema generator is complaining that I can't have a OneToMany mapping on a MappedSuperclass. I didn't expect this to be a problem as the OneToMany mapping is still between the root BaseEntity and the Comment table. Is there a different structure I should be using, or other way to make these fields common without adding them on the BaseEntity? 
 
 **From the Docs:**

 
 A mapped superclass is an abstract or concrete class that provides
  persistent entity state and mapping information for its subclasses,
   **but which is not itself an entity**
. Typically, the purpose of such a
  mapped superclass is to define state and mapping information that is
  common to multiple entity classes. 
 
 That said, how can you associate one entity with one that is not? 
 **More from the docs:**

 
 A mapped superclass cannot be an entity,  **it is not query-able**
 and
  persistent relationships defined by a mapped superclass must be
  unidirectional (with an owning side only).  **This means that One-To-Many
  assocations are not possible on a mapped superclass at all.**

  Furthermore Many-To-Many associations are only possible if the mapped
  superclass is only used in exactly one entity at the moment. For
  further support of inheritance,  **the single or joined table inheritance
  features have to be used.**

 
 Source:  http://docs.doctrine-project.org/projects/doctrine-orm/en/latest/reference/inheritance-mapping.html 
 
 **Update**

 Because your MappedSuperClass extends BaseEntity it also inherits the BaseEntity's associations, as if it were its own. So you effectively DO have a OneToMany on a MappedSuperClass. 
 To get around it, well, you'd need to modify/extend doctrine to work the way you want. 
 As far as native functionality goes you have two options: 
 **Class Table Inheritance**

You Common class and the resulting DB representation would have the common fields and child classes will now only have the fields specific to themselves. Unfortunately this may be a misrepresentation of your data if you are simply trying to group common fields for the sake of grouping them. 
 **Make Common an Entity**

It appears that all a Mapped Super Class is is an Entity that isn't represented in the DB. So, make common a Entity instead. The downside is that you'll end up with a DB table, but you could just delete that. 
 I recommend that you take a second look at your data and ensure that you are only grouping fields if they are common in both name and purpose. For example, a ComputerBox, a ShoeBox, a Man, and a Woman may all have the "height" property but in that case I wouldn't suggest have a Common class with a "height" property that they all inherit from. Instead, I would have a Box with fields common to ComputerBox and ShoeBox and I'd have a Person with fields common to Man and Woman. In that situation Class Table Inheritance or single table if you prefer would work perfectly. 
 If your data follows that example go with Single Table or Class Table Inheritance. If not, I might advise not grouping the fields. 
 