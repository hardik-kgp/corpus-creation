*** synchronous-database-queries-with-node-js ***

 I have a Node.js/Express app that queries a MySQL db within the route and displays the result to the user.  My problem is how do I run the queries and block until both queries are done before redirecting the user to the page they requested? 
 In my example I have 2 queries that need to finish before I render the page.  I can get the queries to run synchronously if i nest query 2 inside the 'result' callback of query 1.  This however will become very convoluted when the number of queries increase. 
 How do I go about running multiple (in this case 2) database queries synchronously without nesting the subsequent query in the prior query's 'result' callback? 
 I've looked at the 'Flow control / Async goodies' in the Node modules and tried flow-js but I can't get it to work with the async queries. 
 Listed below are the 2 queries that I'm attempting to execute from the '/home' route.  Can the Node experts explain the 'right' way to do this. 
 
 
 The goal with node is not to care what order things happen in. This can complicate some scenarios. There is no shame in nesting callbacks. Once you are used to how it looks, you may find that you actually prefer that style. I do; it is very clear what order callbacks will fire. You can forgo the anonymous functions to make it less verbose if you have to. 
 If you are willing to restructure your code a bit, you can  use the "typical" nested callback method. If you want to avoid callbacks, there are numerous async frameworks that will try and help you do this. One that you might want to check out is async.js (https://github.com/fjakobs/async.js). Example of each: 
 
 For a one-off, I would probably just use a reference counting type approach. Simply keep track of how many queries you want to execute and render the response when they have all finished. 
 
 An even nicer approach would be to simply call finishRequest() in each 'result' callback an check for non-empty arrays before you render the response. Whether that will work in your case depends on your requirements. 
 
 Here's a really easy trick to handle multiple callbacks. 
 
 Example 
 **Usage:**

 
 So basically you need reference counting. This is the standard approach in these situations. I actually use this small utility function instead of flow control. 
 If you want a full blown flow control solution I would recommend  futuresJS 
 
 I find that the async library is the best for things like this.  https://github.com/caolan/async#parallel 
 I can't test this or anything, so forgive me if there are some typos. I refactored your query function to be reusable. So, calling queryRows will return a function that matches the format of the async module's parallel callback functions. After both queries are complete, it will call the last function and pass the result of the two queries as an argument, which you can read to pass to your template. 
 
 
 There are some solutions here, but in my opinion the best solution is to make the code synchronously in a very easy way. 
 You could use the "synchonize" package. 
 Just  
 
 npm install synchronize 
 
 Then  
 Put logic which should be synchronous into a fiber by using  
 
 An example for two mysql queries: 
 
 When "saveSomething()" is called, it inserts a row in a main table and receives the last inserted id. After that the code below will be executed. No need for nesting promises or stuff like that. 
 
 option one: if all your queries related to each other, create stored procedure, put all  your data logic into it and have a single  
 option two: if your db uses one connection then commands a guaranteed to be executed  serially and you can use this as async helper 
 
 
 You can use fibers to write pseudo-synchronous code with Node.JS take a look at these tests for DB   https://github.com/alexeypetrushin/mongo-lite/blob/master/test/collection.coffee 
they are asynchronous but looks like synchronous, more details  http://alexeypetrushin.github.com/synchronize 
 