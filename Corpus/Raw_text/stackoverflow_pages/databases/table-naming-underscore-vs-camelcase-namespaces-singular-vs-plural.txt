*** table-naming-underscore-vs-camelcase-namespaces-singular-vs-plural ***

 I've been reading a couple of questions/answers on StackOverflow trying to find the 'best', or should I say must accepted way, to name tables on a Database. 
 Most of the developers tend to name the tables depending on the language that requires the database (JAVA, .NET, PHP, etc). However I just feel this isn't right. 
 The way I've been naming tables till now is doing something like: 
 
 The things I'm concerned are: 
 
 Legibility 
 Quick identifying of the module the table is from (doctors||patients) 
 Easy to understand, to prevent confusions. 
 
 I would like to read any opinions regarding naming conventions.
Thank you. 
 
 Being consistent is far more important than what particular scheme you use. 
 
 I typically use PascalCase and the entities are singular: 
 
 It mimics the naming conventions for classes in my application keeping everything pretty neat, clean,  **consistent**
, and easy to understand for everybody. 
 
 Case insensitive nature of SQL supports  . Modern software however supports any kind of naming scheme. However sometimes some nasty bugs, errors or human factor can lead to   so that those, who selected both   and   scheme live with all their nerves in good place. 
 
 I use underscores. I did an Oracle project some years ago, and it seemed that Oracle forced all my object names to upper case, which kind of blows any casing scheme. I am not really an Oracle guy, so maybe there was a way around this that I wasn't aware of, but it made me use underscores and I have never gone back. 
 
 An aggregation of most of the above:  
 
 don't rely on case in the database 
 don't consider the case or separator part of the name - just the words 
 do use whatever separator or case is the standard for your language 
 
 Then you can easily translate (even automatically) names between environments.   
 But I'd add another consideration:  you may find that there are other factors when you move from a class in your app to a table in your database:  the database object has views, triggers, stored procs, indexes, constraints, etc - that also need names.  So for example, you may find yourself only accessing tables via views that are typically just a simple "select * from foo".  These may be identified as the table name with just a suffix of '_v' or you could put them in a different schema.  The purpose for such a simple abstraction layer is that it can be expanded when necessary to allow changes in one environment to avoid impacting the other.  This wouldn't break the above naming suggestions - just a few more things to account for. 
 
 I tend to agree with the people who say it depends on the conventions of language you're using (e.g. PascalCase for C# and snake_case for Ruby). 
 Never camelCase, though. 
 
 Since the question is not specific to a particular platform or DB engine, I must say for maximum portability, you should always use lowercase table names. 
 /[a-z_][a-z0-9_]*/ is really the only pattern of names that seamlessly translates between different platforms.  Lowercase alpha-numeric+underscore will always work consistently. 
 As mentioned elsewhere,  relation  (table) names should be singular:  http://www.teamten.com/lawrence/programming/use-singular-nouns-for-database-table-names.html 
 
 After reading a lot of other opinions I think it's very important to use the naming conventions of the language, consistency is more important than naming conventions only if you're (and will be) the only developer of the application. If you want readability (which is of huge importance) you better use the naming conventions for each language. In MySQL for example, I don't suggest using CamelCase since not all platforms are case sensitive. So here underscore goes better. 
 
 These are my five cents. I came to conclusion that if DBs from different vendors are used for one project there are two best ways: 
 
 Use underscores.  
 Use camel case with quotes. 
 
 The reason is that some database will convert all characters to uppercase and some to lowercase. So, if you have   it will become   or   when you will work with DB. 
 
 Unfortunately there is no "best" answer to this question. As @David stated consistency is far more important than the naming convention.  
 
 there's wide variability on how to separate words, so there you'll have to pick whatever you like better; but at the same time, it seems there's near consensus that the table name should be singular. 
 
 Naming conventions exist within the scope of a language, and different languages have different naming conventions. 
 SQL is case-insensitive by default; so, snake_case is a widely used convention.  SQL also supports delimited identifiers; so, mixed case in an option, like camelCase (Java, where fields == columns) or PascalCase (C#, where tables == classes and columns == fields).  If your DB engine can't support the SQL standard, that's its problem.  You can decide to live with that or choose another engine. (And why C# just had to be different is a point of aggravation for those of us who code in both.)   
 If you intend to ever only use one language in your services and applications, use the conventions of that language at all layers.  Else, use the most widely used conventions of the language in the domain where that language is used. 
 