*** test-driven-development-to-check-database-queries-involved-methods ***

 I want to create a database driven application using Golang. I am trying to do it TDD way.
When I try to test methods that make Sql queries, What all are the packages available ? 
 
 I don't want to connect to the default database that I use for development. I can write code to take up another test database while running a test, but is there any go library that already does it. 
 Is there any library that does db tests without connecting to database at all ? 
 
 What is the standard way to do database test with golang ?  
 
 I had a similar question not long ago when refactoring some of my own tests, and there's a couple of ways you can do it: 
 a) Provide an exported type and an   or   function that returns it - e.g. 
 
 ... and then  each of your  tests, write setup & teardown functions that return an instance of   that you define your database functions on (as methods - i.e.  ): 
 
 Note that this is somewhat "integration" testing, but I strongly prefer to test against a "real" database since mocking the interface won't help you catch issues with your queries/query syntax. 
 b) The alternative, although less extensible on the application side, is to have a global   variable that you initialise in   within your tests—since tests have no guaranteed order you'll need to use  —and then run your tests from there. i.e. 
 
 You can find some practical examples in  drone.io's GitHub repo , and I'd also recommend  this article on structuring Go applications  (especially the DB stuff). 
 
 I use a global variable to store the data source (or connection string) of current database and set to different value in test function. Since there is only one database I need to operate so I choose the easiest way. 
 