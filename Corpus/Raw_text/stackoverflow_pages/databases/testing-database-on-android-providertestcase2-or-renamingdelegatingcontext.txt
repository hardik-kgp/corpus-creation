*** testing-database-on-android-providertestcase2-or-renamingdelegatingcontext ***

 I've implemented access to a database using   from the android.database package within some classes (with pattern DAO). 
 I wrote some junit tests for these classes using an   but this causes the tests to use the same database as the application. 
 I read that the   or   can be used to test the database separately. Unluckily I couldn't find any nice tutorial/example that shows how to test a database with ProviderTestCase2/RenamingDelegatingContext. 
 Can anyone point me somewhere OR give me some tip OR share some code for database testing?! 
 Cheeerrrrsss!!
Giorgio 
 
 Both the   and   will destroy the database if one already exists before opening it within it's context, so in that sense they both have the same low-level approach towards opening a SQLite database. 
 You leverage this by opening the database in your fixture in  , which will then ensure that your working with a fresh database before each test case. 
 I would suggest that you go for writing content providers rather than creating database adapters. You can use a common interface for accessing data, be it stored in the DB or somewhere over the network, the design of content providers can be accommodated to access such data at the cost of a bit of IPC overhead involved that most of us shouldn't have to care about.  
 If you did this for accessing a SQLite database, the framework would completely manage the database connection for you in a separate process. As added beef, the   completely bootstraps a test context for your content provider without you having to a write a single line of code. 
 But, that's not said it isn't such a huge effort to do the bootstrapping yourself. So supposing you had a database adapter as such; we'll just focus on   for getting write access to our database, nothing fancy: 
 
 Then you could write your test as such: 
 
 So what's happening here is that the context implementation of  , once   is called, will always recreate the database. Each test you write now will be going against the state of the database after   is called.  
 
 I actually use database with SQLiteOpenHelper and I have a trick for testing.
The idea is to use standard on-file stored DB during the normal use of the app and an in-memory DB during tests. In this way you can use a clear DB for each test without insert/delete/update data in your standard DB. It works fine for me. 
 Keep in mind you can use in-memory database, just passing null as name of database file. This is clearly documented in the API documentation. 
 Advantages of using in-memory DB during tests is explained here:
 https://attakornw.wordpress.com/2012/02/25/using-in-memory-sqlite-database-in-android-tests/ 
 In my project I have the DBHelper class wich extends SQLiteHelper. As you can see, there are the standard methods. I simply added a constructor with two parameters. The difference is that when I call the super constructor, I pass null as DB name. 
 
 Every "model" in the project extends DBModel that is an abstract class. 
 
 As discussed here:  How can I find out if code is running inside a JUnit test or not? 
there is a way to establish if you are running JUnit tests, simply searching in stack trace elements.
As a conseguence, I modified DBModel constructor 
 
 Note that 
 
 may be 
 
 in your case. 
 
 I have an application that uses a ContentProvider backed by an sqlite database to provide data to the application. 
 Let PodcastDataProvider be the actual dataprovider used by the application. 
 Then you can set up a test provider with something like the following: 
 
 to setup a test data provider that will be backed by a different database than the actual application. 
 To test the DAO, create another class which extends AbstractPodcastDataProvider and use the  
 
 method to get an instance of a content resolver that will use the test database instead of the application database. 
 
 
 if you give the exact location of the sqlite db(in my case it's db_path), using the above method you can find-out whether it returns an sqlitedatabase or not. 
 
 A possible solution can be to open database using this method 
 
 And change database name in your tests.  Here  you can find some info about this method. 
 