*** thread-messaging-system-database-schema-design ***

 I'm trying to achieve exactly what's explained here: 
 Creating a threaded private messaging system like facebook and gmail , 
however i don't completly understand Joel Brown's answer. can any one please explain. 
 This is what my db tables look like with sample data (I assume i filled it in correctly for demo purposes):
 
 
 I need to display a list of threads based on LoginId (newest on top) what would the query look like in LINQ? (what i'm asking is in a a group of message threads, give me the 1 newest message in each thread) - just like this is done on facebook. 
 I need to display ALL the messages in a message thread (LINQ) -> just like it's done on facebook where you click the message and you would see the whole "conversation" in a tread. 
 
 Please help!
thanks 
 **EDIT**
 -> continuation
Joel, is this correct?? 
 
 Joel, i'm a bit confused, can you please explain (comments/questions in bold): 
 The idea here is that every time a user starts a brand new thread/message, it starts with a new record in the THREAD table. The user is then added as a THREAD_PARTICIPANT and the content of the message is added to MESSAGE which points back to the containing THREAD. The FK from MESSAGE to USER indicates the author of the message. 
 **LoginId 1 sends a message to LoginId2 => new record is inserted to MessageThread table. Also a record is inserted to MessageThreadParticipant record with MessageThreadId = 1, LoginId = 1 (the sender). And a new record is inserted into Message table with MessageId =1, MessageThreadid =1, SenderLoginId = 1 (correct??)**

 this is what i have after that iteration:
 
 I think i'm confused because there is no way for Loginid 2 to know that there is a message for him. ?? OR maybe I need to insert 2 records into MessageThreadParticipant?? (the sender and the receiver)-> this way both can see the whole "conversation"?? 
 **EDIT2:**

Joe, I think I could do this: 
 
 Please correct me if i'm wrong :) 
 
 Well why don't you just ask? :) 
 Let me try to pin down my understanding of your requirement.  It seems to me that you are looking at a thread being a linear list (not a tree) of messages between two people.  I would think that you might want to allow more people in than just two.  That would be like Facebook insofar as someone posts a message and then any number of people can read it and then start adding comments.  When you add a comment it puts you into the thread and you start getting status updates and e-mails telling you about activity in the thread and so forth.  Assuming that is what you're after, then the schema I suggested to  Big Mike  is not exactly what you're looking for. 
 Consider instead the following: 
 
 The idea here is that every time a user starts a brand new thread/message, it starts with a new record in the THREAD table.  The user is then added as a THREAD_PARTICIPANT and the content of the message is added to MESSAGE which points back to the containing THREAD.  The FK from MESSAGE to USER indicates the author of the message. 
 When a user reads a message, they get an entry in the MESSAGE_READ_STATE table to indicate that they have marked the message read, either explicitly or implicitly, depending on how your requirements go. 
 When someone comments on the initial message in the thread, a second MESSAGE is added with an FK back to the original THREAD and the reply author (user) gets added to the THREAD_PARTICIPANT table.  And so it goes as messages are added to the thread by one, two or even more participants. 
 To get the most recent message in any thread, just take the top 1 from MESSAGE sorted descending on create date (or an identity key) where the message FK is to the thread of interest. 
 To get the most recently updated thread for a user, get the THREAD related to the top 1 from message sorted descending on create date where the message is in a thread in which the user is a THREAD_PARTICIPANT. 
 I'm afraid I can never state these things in LINQ without breaking out LinqPad.  If you are having trouble catching my drift from the above, I could flesh out the answer with table definitions and some SQL.  Just ask in the comments. 
 **EDIT: Clarification of Requirements and Implementation**

 Clarifying the requirements: Initially I was thinking about publicly posted messages with the opportunity for commenting, whereas Shane is after more of the direct message feature.  In which case the initial recipient needs to be included in the THREAD_PARTICIPANT table at the outset. 
 For some clarity, let's put a few rows in tables.  Here is the scenario, (in honour of Canada Day):  User 1 DMs User 2 to ask about meeting for a beer.  User 2 replies with a question about where to meet and User 1 answers.  The tables would look something like this:  (probably oversimplified) 
 
 
 **EDIT #2: Access SQL for list of all messages in a thread, with read state...**

 Using @OP's schema, this SQL will get a list of messages in a given thread with an indication of whether a given user has read each message or not.  Messages are in most recent first order. 
 
 Note that the trick, if it's fair to call it that, is that the read state is picked up with a sub-select.  This is necessary because part of the criteria for getting the read state requires a where clause that can't be satisfied with an outer join.  Therefore you use the subselect to pin down which (possibly missing) value you want from the MessageReadState child table. 
 **EDIT 3: SQL for getting all threads with latest message in each for a given user...**

 To get a list of all of the threads in which a given user has participated, sorted by most recent message first, with only the most recent message being displayed (1 message per thread) then you would use a similar query to the one above, except instead of filtering messages by their FK to the thread of interest, you filter the messages by a subquery that finds the latest message in each thread that the user of interest participated in.  It would look like this: 
 
 
 According to Joel Brown'answer, you can add   column into THREAD table then getting all threads with last messages SQL is become very simple. You must update this column when every message send. 
 **Getting all threads with latest message in each for a given user**

 
 