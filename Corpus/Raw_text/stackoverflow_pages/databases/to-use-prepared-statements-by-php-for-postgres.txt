*** to-use-prepared-statements-by-php-for-postgres ***

 This is a similar question to this  "When not to use Prepared statements?" , but with the "how-to" -part and for PostgreSQL. 
 I know that I need prepared statements because I make more than one call to my database during one script. 
 I would like to get concrete examples about the  following sentence 
 
 Look at typecasting, validating and sanitizing variables and using PDO with prepared statements. 
 
 I know what he mean by validating and sanitizing variables. However, I am not completely sure about prepared statements. How do we prepare statements? By filters, that is by sanitizing? Or by some PDO layer? What is the definition of the layer? 
 **What do prepared statements mean in the statement?**
 Please, use concrete examples. 
 
 
 What do prepared statements mean in
  the statement? 
 
 From the  documentation : 
 This feature allows commands that will be used repeatedly to be parsed and planned just once, rather than each time they are executed. 
 See  pg_prepare 
 Example from the page linked above: 
 
 The  MySQL documentation for Prepared Statements  nicely answers the following questions: 
 
 Why use prepared statements? 
 When should you use prepared
statements? 
 
 
 It means it will help you prevent SQL injection attacks by eliminating the need to manually quote the parameters.  
 Instead of placing a variable into the sql you use a named or question mark marker for which real values will be substituted when the statement is executed. 
 Definition of  PDO  from the PHP manual: 
'The PHP Data Objects (PDO) extension defines a lightweight, consistent interface for accessing databases in PHP.' 
 See the php manual on  PDO  and  PDO::prepare . 
 An example of a prepared statement with named markers: 
 
 An example of a prepared statement with question mark markers: 
 
 
 **How do we prepare statements:**

 You define a query one time, and can called it as often as you like with different values. (eg. in a loop) 
 
 see:  http://us2.php.net/manual/en/function.pg-execute.php 
 
 **Reply to Karim79's answer**

 This 
 
 seems to be the same as this 
 
 
 **Conclusion:**
 the use of   and   makes PHP much more efficient, since you do not need to consider sanitizing. It also helps you in the use of PDO. 
 