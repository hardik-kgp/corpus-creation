*** tsql-if-else-statement-inside-table-valued-functions-cant-go-through ***

 Before posting I have read few articles about developing USD functions, but have not encountered solutions for my problem... which is as follows: 
 I have a very simple database, which stores basketball players and consists of ID, Age, Height and Name column. What I would like to do is to implement a function 'height' with one parameter @set varchar(10), that depending one @set value will trigger off different select statements 
 what I was trying to implement was in psuedo-code: 
 
 Could anyone give me a hint how to implement it? 
 
 The simplest form is always the best 
 
 This form is called INLINE table function, which means SQL Server is free to expand it to join player directly to other tables in-line of a greater query, making it perform  infinitely 1  better  than a multi-statement table valued function. 
 You may prefer this though, so that your ranges are complete (you have a gap between 175 and 180) 
 
 SQL Server takes care of short circuiting the branches when the variable @set is parsed. 
 1 exaggeration, but only slightly 
 
 You were close.  Using a multi-statement table-valued function requires the return table to be specified and populated in the function: 
 
 I would recommend using an inline TVF as Richard's answer demonstrates.  It can infer the table return from your statement. 
 Note also that a multi-statement and inline TVFs are really quite different.  An inline TVF is less of a black-box to the optimizer and more like a parametrized view in terms of the optimizer being able to rearrange things with other tables and views in the same execution plan. 
 
 Why are you hardcoding this, create a heights table and then grab all the heights that are valid for the range 
 
 
 This should work. 
 
 I'll leave the < case for your enjoyment. 
 
 Something like this: 
 
 
 We can use Table valued function in following way with IF conditions on it. 
 
 
 
 
 According to Itzik Ben-Gan in his book "TSQL Querying" (Itzik Ben-Gan  et al , (c) 2015 Microsoft Press, ISBN 978-0-7356-8504-8, P. 215) "... I find inline TVFs to be a great tool, allowing for the encapsulation of the logic and reusability without any performance problems of UDF's... "  
 He says also that if you need " ...a reusable table expression like a View, but you also need to pass input parameters to the table expression...TSQL provides inline table-valued functions (TVFs).  "  
 This type of 'IF' (  inline function - a distinct type in sys.objects  ) uses the 'RETURNS TABLE' output specifier and seemingly cannot contain BEGIN / END. The syntax and allowances are very restrictive, yet we see good optimization and performance. These factors are indicated by the timings seen by @ryk. 
 