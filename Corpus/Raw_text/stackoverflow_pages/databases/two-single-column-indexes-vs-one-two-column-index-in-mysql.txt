*** two-single-column-indexes-vs-one-two-column-index-in-mysql ***

 I'm faced with the following and I'm not sure what's best practice. 
 Consider the following table (which will get large): 
 id PK | giver_id FK | recipient_id FK | date 
 I'm using InnoDB and from what I understand, it creates indices automatically for the two foreign key columns. However, I'll also be doing lots of queries where I need to match a particular combination of:  
 . 
 Each such combination will be unique in the table. 
 Is there any benefit from adding an two-column index over these columns, or would the two individual indexes in theory be sufficient / the same? 
 
 If you have two single column indexes, only one of them will be used in your example. 
 If you have an index with two columns, the query might be faster (you should measure). A two column index can also be used as a single column index, but only for the column listed first. 
 Sometimes it can be useful to have an index on (A,B) and another index on (B). This makes queries using either or both of the columns fast, but of course uses also more disk space. 
 When choosing the indexes, you also need to consider the effect on inserting, deleting and updating. More indexes = slower updates. 
 
 A covering index like: 
 
 ...would mean that the index could be used if a query referred to  , or a combination of   and  .  Mind that index criteria is leftmost based - a query referring to only   would not be able to use the covering index in the statement I provided. 
 Additionally, MySQL can only use one index per SELECT so a covering index would be the best means of optimizing your queries. 
 
 If one of the foreign key indexes is already very selective, then the database engine should use that one for the query you specified.  Most database engines use some kind of heuristic to be able to choose the optimal index in that situation. If neither index is highly selective by itself, it probably does make sense to add the index built on both keys since you say you will use that type of query a lot.   
 Another thing to consider is if you can eliminate the PK field in this table and define the primary key index on the   and   fields.  You said that the combination is unique, so that would possibly work (given a lot of other conditions that only you can answer).  Typically, though, I think the added complexity that adds is not worth the hassle. 
 
 Another thing to consider is that the performance characteristics of both approaches will be based on the size and cardinality of the dataset. You may find that the 2-column index only becomes noticing more performant at a certain dataset size threshold, or the exact opposite. Nothing can substitute for performance metrics for your exact scenario. 
 