*** unable-to-cast-object-of-type-system-dbnull-to-type-system-string ***

 I got the above error in my app. Here is the original code 
 
 I replaced with 
 
 Is there a better way around this? 
 
 A shorter form can be used: 
 
 EDIT: Haven't paid attention to ExecuteScalar. It does really return null if the field is absent in the return result. So use instead: 
 
 
 With a simple generic function you can make this very easy. Just do this: 
 
 using the function: 
 
 
 ExecuteScalar will return 
 
 null if there is no result set 
 otherwise the first column of the first row of the resultset, which may be DBNull. 
 
 If you know that the first column of the resultset is a string, then to cover all bases you need to check for both null and DBNull.  Something like: 
 
 The above code relies on the fact that DBNull.ToString returns an empty string.  
 If accountNumber was another type (say integer), then you'd need to be more explicit: 
 
 If you know for sure that your resultset will always have at least one row (e.g. SELECT COUNT(*)...), then you can skip the check for null. 
 In your case the error message "Unable to cast object of type ‘System.DBNull’ to type ‘System.String`" indicates that the first column of your result set is a DBNUll value.  This is from the cast to string on the first line: 
 
 Marc_s's comment that you don't need to check for DBNull.Value is wrong. 
 
 You can use C#'s null coalescing operator 
 
 
 There is another way to workaround this issue. How about modify your store procedure? by using ISNULL(your field, "") sql function , you can return empty string if the return value is null.  
 Then you have your clean code as original version. 
 
 This is the generic method that I use to convert any object that might be a DBNull.Value: 
 
 usage: 
 
 shorter: 
 
 
 I suppose you can do it like this: 
 
 If accountNumber is null it means it was DBNull not string :) 
 
 String.Concat transforms DBNull and null values to an empty string. 
 
 However, I think you lose something on code understandability 
 
 Since I got an instance which isn't null and if I compared to DBNULL I got   exeption,
and if I tried to change to compare to NULL, it simply didn't work ( since DBNull is an object) even that's the accepted answer. 
 I decided to simply use the 'is' keyword.
 So the result is very readable: 
 
 
 I use an extension to eliminate this problem for me, which may or may not be what you are after. 
 It goes like this: 
 
 **Note:**

 This extension  **does not**
 return   values! If the item is   or  DBNull.Value , it will return an empty String. 
 **Usage:**

 
 
 Convert it Like  
 
 