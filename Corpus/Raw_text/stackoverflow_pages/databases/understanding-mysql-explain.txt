*** understanding-mysql-explain ***

 So, I've never understood the explain of MySQL. I understand the gross concepts that you should have at least one entry in the   column for it to use an index, and that simple queries are better. But what is the difference between ref and eq_ref? What is the best way to be optimizing queries.  
 For example, this is my latest query that I'm trying to figure out why it takes forever (generated from   models) : 
 
 I had hoped to learn enough about mysql explain that the query wouldn't be needed. Alas, it seems that you can't get enough information from the explain statement and you need the raw SQL. Query : 
 
 
 Paul: 
 
 **eq_ref**

 One row is read from this table for each combination of rows from the previous tables.  **Other than the system and const types, this is the best possible join type.**
 It is used when all parts of an index are used by the join and the index is a PRIMARY KEY or UNIQUE index. 
 eq_ref can be used for indexed columns that are compared using the = operator. The comparison value can be a constant or an expression that uses columns from tables that are read before this table. In the following examples, MySQL can use an eq_ref join to process ref_table: 
 
 
 
 **ref**

 All rows with matching index values are read from this table for each combination of rows from the previous tables.  **ref is used if the join uses only a leftmost prefix of the key or if the key is not a PRIMARY KEY or UNIQUE index (in other words, if the join cannot select a single row based on the key value)**
. If the key that is used matches only a few rows, this is a good join type. 
 ref can be used for indexed columns that are compared using the = or <=> operator. In the following examples, MySQL can use a ref join to process ref_table: 
 
 
 These are copied verbatim from the MySQL manual:  http://dev.mysql.com/doc/refman/5.0/en/using-explain.html 
 If you could post your query that is taking  forever , I could help pinpoint what is slowing it down. Also, please specify what your definition of  forever  is. Also, if you could provide your "SHOW CREATE TABLE xxx;" statements for these tables, I could help in optimizing your query as much as possible.  
 What jumps out at me immediately as a possible point of improvement is the "Using temporary; Using filesort;". This means that a temporary table was created to satisfy the query (not necessarily a bad thing), and that the GROUP BY/ORDER BY you designated could not be retrieved from an index, thus resulting in a  filesort . 
 
 You query seems to process   records, which according to   need to be sorted. 
 This can take long. 
 If you post your query here, we probably will be able to optimize it somehow. 
 **Update:**

 You query indeed does a number of nested loops and seems to yield lots of values which need to be sorted then. 
 Could you please run the following query: 
 
 