*** unique-booleanfield-value-in-django ***

 Suppose my models.py is like so: 
 
 I want only one of my   instances to have   and all others to have   . How can I best ensure this uniqueness constraint is respected? 
 Top marks to answers that take into account the importance of respecting the constraint at the database, model and (admin) form levels! 
 
 Whenever I've needed to accomplish this task, what I've done is override the save method for the model and have it check if any other model has the flag already set (and turn it off). 
 
 
 I'd override the save method of the model and if you've set the boolean to True, make sure all others are set to False. 
 
 I tried editing the similar answer by Adam, but it was rejected for changing too much of the original answer. This way is more succinct and efficient as the checking of other entries is done in a single query. 
 
 Instead of using custom model cleaning/saving, I created a  custom field  overriding the   method on  . Instead of raising an error if another field was  , I made all other fields   if it was  . Also instead of raising an error if the field was   and no other field was  , I saved it the field as  
 
 **fields.py**

 
 
 **models.py**

 
 
 The following solution is a little bit ugly but might work: 
 
 If you set is_the_chosen_one to False or None it will be always NULL. You can have NULL as much as you want, but you can only have one True. 
 
 Trying to make ends meet with the answers here, I find that some of them address the same issue successfully and each one is suitable in different situations: 
 I would choose: 
 
 @semente : Respects the constraint at the database, model and admin form levels while it overrides Django ORM the least possible. Moreover it can  probably  be used inside a    table  of a   in a  situation.  (I will check it and report) 
 
 @Ellis Percival : Hits the database only one extra time and accepts the current entry as the chosen one. Clean and elegant. 
 
 
 Other solutions not suitable for my case but viable: 
 @nemocorp  is overriding the   method to perform a validation. However, it does not report back which model is "the one" and this is not user friendly. Despite that, it is a very nice approach especially if someone does not intend to be as aggressive as @Flyte. 
 @saul.shanabrook  and  @Thierry J.  would create a custom field which would either change any other "is_the_one" entry to   or raise a  . I am just reluctant to impement new features to my Django installation unless it is absoletuly necessary. 
 @daigorocub : Uses Django signals. I find it a unique approach and gives a hint of how to use  Django Signals . However I am not sure whether this is a -strictly speaking- "proper" use of signals since I cannot consider this procedure as part of a "decoupled application". 
 
 
 You can use the above form for admin as well, just use 
 
 
 
 Doing this made the validation available in the basic admin form 
 
 And that's all. 
 
 
 Using a similar approach as Saul, but slightly different purpose: 
 
 This implementation will raise a   when attempting to save another record with a value of True. 
 Also, I have added the   argument which can be set to any other field in the model, to check true-uniqueness only for records with the same value, such as: 
 
 
 Do I get points for answering my question? 
 problem was it was finding itself in the loop, fixed by: 
 
 
 I tried some of these solutions, and ended up with another one, just for the sake of code shortness (don't have to override forms or save method).
For this to work, the field can't be unique in it's definition but the signal makes sure that happens. 
 
 