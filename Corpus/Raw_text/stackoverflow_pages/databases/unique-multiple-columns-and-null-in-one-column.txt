*** unique-multiple-columns-and-null-in-one-column ***

 I have simple categories table. Category can have parent category (  column) or null if it is main category and with the same parent category there shouldn't be 2 or more categories with the same name or url. 
 Code for this table: 
 
 The problem is that even if I have unique keys it doesn't work. If I try to insert into database 2 categories that have   set to   and same name and url, those 2 categories can be inserted into database without a problem (and they shouldn't). However if I select for those categories other   (for example 1 assuming category with id 1 exists), only first record will be inserted (and that's desired behaviour). 
 Question - how to handle this case? I read that: 
 
 A UNIQUE index creates a constraint such that all values in the index
  must be distinct. An error occurs if you try to add a new row with a
  key value that matches an existing row. This constraint does not apply
  to NULL values except for the BDB storage engine. For other engines, a
  UNIQUE index permits multiple NULL values for columns that can contain
  NULL. If you specify a prefix value for a column in a UNIQUE index,
  the column values must be unique within the prefix. 
 
 however if I have unique on multiple columns I expected it's not the case (only   can be null,   and   cannot be null). Because   references to   of the same table but some categories don't have parent category it should allow   values. 
 
 This works as defined by the SQL standard. NULL means unknown. If you have two records of par_cat = NULL and name = 'X', then the two NULLs are not regarded to hold the same value. Thus they don't violate the unique key constraint. (Well, one could argue that the NULLs still  might  mean the same value, but applying this rule would make working with unique indexes and nullable fields almost impossible, for NULL could as well mean 1, 2 or whatever other value. So they did well to define it such as they did in my opinion.) 
 As MySQL does not support functional indexes where you could have an index on  , your only option is to make par_cat a NOT NULL column with 0 or -1 or whatever for "no parent", if you want your constraints to work. 
 
 I see that this was asked in 2014.
However it is often requested from MySQL:  https://bugs.mysql.com/bug.php?id=8173  and  https://bugs.mysql.com/bug.php?id=17825  for example. 
People can click on affects me to try and get attention from MySQL.   
 Since MySQL 5.7 we can now use the following workaround: 
 
 The generated_par_cat is a virtual generated column, so it has no storage space. When a user inserts (or updates) then the unique indexes cause the value of generated_par_cat to be generated on the fly which is a very quick operation.   
 