*** using-etcd-as-primary-store-database ***

 Can  etcd  be used as reliable database replacement? Since it is distributed and stores key/value pairs in a persistent way, it would be a great alternative nosql database. In addition, it has a great API. Can someone explain why this is not a thing? 
 
 **etcd**

 
 etcd  is a highly available key-value store which Kubernetes uses for persistent storage of all of its objects like  **deployment, pod, service**
 information.  
 etcd has high access control, that it can be accessed only using API in master node. Nodes in the cluster other than master  **do not have access**
 to etcd store. 
 
 **nosql database**

 
 There are currently more than than  255  nosql databases, which can be broadly classified into  Key-Value based, Column based, Document based and Graph based . Considering  **etcd**
 as an key-value store, lets see the available nosql key-value data stores. 
 Redis, memcached and memcacheDB  are popular key-value stores. These are general-purpose distributed memory caching system often used to speed up dynamic database-driven websites by caching data and objects in memory. 
 
 **Why etcd not an alternative**

 
 etcd cannot be stored in memory(ram) they can only be persisted in disk storage, whereas redis can be cached in ram and can also be persisted in disk. 
 etcd does not have various data types. It is made to store only kubernetes objects. But redis and other key-value stores have data-type flexibility. 
 etcd guarantees only high availabilty, but does not give you the fast querying and indexing. All the nosql key-value stores are built with the goal of fast querying and searching. 
 
 Eventhough it is obvious that etcd cannot be used as an alternative nosql database, I think the above explanation will prove it cannot be an suitable alternative. 
 
 The only answer I've come to see are those between our ears. Guess we need to show first that it can be done, and what the benefits are. 
 My colleagues seem to shy off it because "it's for storing secrets, and common truth". The etcd v3 revise made etcd capable of much more, but the news hasn't simply rippled down, yet. 
 Let's make some show cases, success stories. Personally, I like etcd because of the reasons you mentioned, and because of its focus on  dependable performance . 
 