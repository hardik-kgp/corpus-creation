*** using-pg-notify-in-postgresql-trigger-function ***

 I am attempting to issue a notification from a PostgreSQL trigger function. I can successfully use the NOTIFY command, but I am not having any luck with pg_notify. Even though I receive a notification when I invoke the pg_notify function from the psql console, I never receive a notification when invoking the same from my trigger function. 
 **This version of my trigger function works as expected.**
 I have a Java program that is LISTENing to 'mymessage', and it receives a notification with a 'fired by NOTIFY' payload. 
 
 **This version of my trigger function DOES NOT work as expected.**
 The only changes are uncommenting the pg_notify line and commenting out the NOTIFY line below. (I did not modify the Java application that is LISTENing.) I expect that my application LISTENing to 'mymessage' should receive a notification with a 'fired by FUNCTION' payload. The actual behavior is that nothing is received, even 30+ seconds after the corresponding table is modified. 
 
 **However, I'm **
**really**
** confused, because the same pg_notify command works as expected from the psql console!**
 When I execute the following command, my Java application receives a notification with a 'fired by CONSOLE' payload: 
 
 For completeness, here is my trigger definition: 
 
 I'm trying to use pg_notify because I would like to have a dynamic payload. Right now, that's a moot point. :) The Postgres 9.0 manual indicates that this should be possible.  The NOTIFY docs  for the 'payload' parameter state: 
 
 (If binary data or large amounts of information need to be communicated, it's best to put it in a database table and send the key of the record.) 
 
 I've also referenced a related Stack Overflow question, and I think I've dodged this issue:  LISTEN/NOTIFY using pg_notify(text, text) in PostgreSQL . 
 The database version is:  
 
 PostgreSQL 9.0.3, compiled by Visual C++ build 1500, 32-bit 
 
 My OS is Windows XP Professional, Version 2002, SP3. 
 Thanks in advance. 
 EDIT: Added my Java listener code below. It's based on this sample from the PostgreSQL docs:  http://jdbc.postgresql.org/documentation/81/listennotify.html . 
 
 This is a simple Java 1.6 SE desktop application, so I'm managing my own JDBC connection and everything. I'm loading the driver via 
 
 I'm using the postgresql-9.0-801.jdbc3.jar library (only one on my classpath), and JDK 1.6.0_22. 
 Just to recap from above, the Java code works fine with NOTIFY from psql and the trigger, and with pg_notify from psql. 
 
 This might be to late to help but perhaps someone else will be able to use it. 
Using SELECT pg_notify('', ''); in the trigger causes the DB to respond with  
 
 Changing the SELECT to PERFORM as the error say helps to resolve this issue and the notification gets delivered as expected. Perhaps this could have been the problem. 
 I have the same setup, and had the same problem.  
 
 It might be useful to someone out there. Sometimes you want to pass whole row to "observer" and then it might be a nice idea to serialise whole row into JSON. You can achieve this with help of  row_to_json 
 
 
 
 
 I don't know if these help with your problem, but some gotcha's I've hit are: 
 
 You have to commit the transaction with the   command. I'm not familiar with Java, I don't know if you're in autocommit mode or not. 
 Notifies are dispatched when you commit. I suppose for whatever reason, it could be that the transaction that triggered calling   did not commit or was rolled back? 
 Maybe the LISTEN connection is connecting to another database than the one where NOTIFY is sent? :) 
 
 However, none of these can explain why NOTIFY works and pg_notify didn't. 
 
 You can use the following code directly into your create trigger function: 
 
 OR 
 
 
 Maybe you'll like following syntax: 
 
 