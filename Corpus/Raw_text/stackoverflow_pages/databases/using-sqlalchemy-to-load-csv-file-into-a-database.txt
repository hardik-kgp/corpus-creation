*** using-sqlalchemy-to-load-csv-file-into-a-database ***

 I would like to use csv files in to a database 
 
 Because of the power of SQLAlchemy, I'm also using it on a project.  It's power comes from the object-oriented way of "talking" to a database instead of hardcoding SQL statements that can be a pain to manage.  Not to mention, it's also a lot faster. 
 To answer your question bluntly, yes!  Storing data from a CSV into a database using SQLAlchemy is a piece of cake.  Here's a full working example (I used SQLAlchemy 1.0.6 and Python 2.7.6): 
 
 (Note:  this is not necessarily the "best" way to do this, but I think this format is very readable for a beginner; it's also very fast:  0.091s for 251 records inserted!) 
 I think if you go through it line by line, you'll see what a breeze it is to use.  Notice the lack of SQL statements -- hooray!  I also took the liberty of using numpy to load the CSV contents in two lines, but it can be done without it if you like. 
 If you wanted to compare against the traditional way of doing it, here's a full-working example for reference: 
 
 (Note:  even in the "old" way, this is by no means the best way to do this, but it's very readable and a "1-to-1" translation from the SQLAlchemy way vs. the "old" way.) 
 Notice the the SQL statements:  one to create the table, the other to insert records.  Also, notice that it's a bit more cumbersome to maintain long SQL strings vs. a simple class attribute addition.  Liking SQLAlchemy so far? 
 As for your foreign key inquiry, of course.  SQLAlchemy has the power to do this too.  Here's an example of how a class attribute would look like with a foreign key assignment (assuming the   class has also been imported from the   module): 
 
 which points the "fid" column as a foreign key to Price_History's id column. 
 Hope that helps! 
 
 In case your CSV is quite large, using INSERTS is very ineffective. You should use a bulk loading mechanisms, which differ from base to base. E.g. in PostgreSQL you should use "COPY FROM" method: 
 
 
 I have had the exact same problem, and I found it paradoxically easier to use a 2-step process with pandas: 
 
 Note that my approach is similar to  this one , but somehow Google sent me to this thread instead, so I thought I would share.  
 
 To import a relatively small CSV file into database using sqlalchemy, you can use  , as described in detail in the  "Executing Multiple Statements" section of the sqlalchemy tutorial . 
 This is sometimes referred to as  "executemany" style of invocation , because it results in an   DBAPI call . The DB driver might execute a single multi-value   statement, which results in fewer round-trips to the DB and faster execution: 
 
 the MySQL connector does that by default 
 Postgres' psycopg2  does   not , unless you initialize it with  create_engine(..., executemany_mode='values') ) 
 
 According to the  sqlalchemy's FAQ , this is the fastest you can get without using DB-specific bulk loading methods, such as  COPY FROM  in Postgres,  LOAD DATA LOCAL INFILE   in MySQL, etc. In particular it's faster than using plain ORM (as in the answer by @Manuel J. Diaz here),  , or  . 
 
 