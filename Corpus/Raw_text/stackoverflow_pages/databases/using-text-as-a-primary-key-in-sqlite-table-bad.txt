*** using-text-as-a-primary-key-in-sqlite-table-bad ***

 Is it bad to have text as a primary key in an SQLite database? I heard that it's bad for performance reasons, is this true? And will the rowid be used as the actual primary key in such a case? 
 
 
 Is it bad to have text as a primary key in an SQLite database? I heard
  that it's bad for performance reasons, is this true? 
 
 I never heard that somebody used  string as primary key  in table. For me (and I honestly hope also for others) very  **"ugly" practise**
 with very low performance. 
 If you'll use string as primary key you needs to think about a "few" things: 
 
 Will be combination of 3 symbols enough? 
 Or should I use 5 symbols? 
 
 Here, each row must have  **same format**
 (readability issue of course) and also  **be unique**
. Oh! Here is next  "piggy work"    you'll need to create some  "unique string generator"  that will generate unique 1  string identificator 2 . 
 And also there are next issues is good to consider: 
 
 Longer strings   automatically harder and harder to compare 
 Size of table radically raises because it's pretty clear that
string has much more size as number 
 Number of rows - it's madness to use string as primary key if you
table can have 1000+ rows 
 
 It's more complex theme but i would like to say that OK, for very small tables would be possible to use strings as primary key (if it makes a sence) but if you'll look at disadvantages it's much more better technique to use number as primary key for sure! 
 **And what is conclusion?**

 I don't recommend you to use string as primary key. It has more disadvantages as advantages (it has really some advantage?).  
 Usage of number as primary key is much more better (I'm scared to say the best) practise. 
 
 And will the rowid be used as the actual primary key in such a case? 
 
 If you will use string as primary not. 
 1 In real strings are rarely unique. 
 2 Of course, you could say that you can create identificator from name of item in row, but it's once again spaghetti code (items can have same name). 
 
 
 Is it bad to have text as a primary key in an SQLite database? I heard that it's bad for performance reasons, is this true? 
 
 From correctness point of view,   is all right. 
 From performance point of view, prefer   keys. But as with any performance issue, measure it yourself to see if there's a significant difference with your data and use cases. 
 
 And will the rowid be used as the actual primary key in such a case? 
 
 Only   gets aliased with  . Other kinds of primary keys don't, and there will be the implicit integer rowid unless   is specified.  Reference . 
 
 In real world, using strings as primary key has a lot of benefits if we are talking about UUIDs. Being able to create entity "passport" exactly at the moment of its creation can massively simplify asynchronous code and/or distributed system (if we are talking about more complex mobile client / server architecture).  
 As to the performance, I did not find any measurable difference when running a benchmark to perform 10000 primary key lookups, as in reality, database indexes neither store nor compare strings when running indexed searches. 
 
 Yes, if you use TEXT you get
android.database.sqlite.SQLiteConstraintException: UNIQUE constraint failed: TableName.ColumnName (code 1555) 
 SQLite has session to insert and return the row ID of the last row inserted, if this insert is successful.
else will return -1. 
 return is mapped to _ID , this is the reason they force you interface BaseColumns for the table 
 its strange that insert call has to return the rowid, instead of a boolean or so 
 I wish TEXT PRIMARY KEY capability was there in sqlite 
 
 A field of type PRIMARY KEY implies comparing values. Comparing a number is simpler than comparing a text. 
 The reason is that  **there is a specific assembly instruction for 64 bit numeric comparison**
. This will always be much faster than comparing text which in theory can be unlimited in size. 
 Example comparing number: 
 
 Read more about   assembly instruction here:  https://www.tutorialspoint.com/assembly_programming/assembly_conditions.htm 
 **Knowing this allows us to know that numbers will always be more performative**
 (at least in the computing we have today). 
 