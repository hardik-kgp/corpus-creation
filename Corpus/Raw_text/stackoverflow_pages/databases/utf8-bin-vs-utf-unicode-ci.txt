*** utf8-bin-vs-utf-unicode-ci ***

 My table Website 
 
 I i use utf8_bin collation then my query to search wikipedia in Website is 
 
 And if i use utf8_unicode_ci then my select query to search wikipedia in Website is 
 
 Now I want to know which collation is best depending upon the following queries  
 
 It depends on what you need.   
 The   collation compares strings based purely on their Unicode  code point  values. If all of the code points have the same values, then the strings are equal. However, this falls apart when you have strings with different composition for combining marks (composed vs. decomposed) or characters that are canonically equivalent but don't have the same code point value. In some cases, using   will result in strings not matching when you expect them to. Theoretically,   is the fastest because no Unicode normalization is applied to the strings, but it may not be what you want.   
  applies Unicode normalization using language-specific rules and compares strings case-insensitively.   does the same, but compares strings case-sensitively.   
 
 Personally I would go with  , if you expect that lettercase is generally not important for the results you want to find. 
 Collations aren't only used at runtime, but also when MySQL builds indexes. So if any of these columns appear in an index, finding data according to the comparison rules of that collation will be pretty much as fast as it ever gets.  
 In those cases where you do not want case insensitive matching, then do not apply upper or lower. Instead, apply the   keyword in front of the utf8 column to force a literal code-point comparison rather than one according to the collation.  
 
 This should be much faster than using lower or upper, since in those cases, MySQL first needs to make a copy of the column value and modify its lettercase, and then apply the comparison. With BINARY in place it will simply use the index first to find matches, and then do a code-point by code-point comparison untill it finds the values are not equal, which will generally be faster. 
 
 I was using 'utf8_unicode_ci' which is default by doctrine , i had to change it to : 
 
 Since some of my composite primary keys consisted of text fields. Sadly 'utf8_unicode_ci' resolved "poistn√Ω" and "poistny" as same primary key value and ended with crash at doctrine inserting flush. I could not simply change collation of one part of composite primary key, had to drop table and recreate. Hope it saves time to someone else.. 
 