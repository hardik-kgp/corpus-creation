*** variable-table-name-in-sqlite ***

 Question: Is it possible to use a variable as your table name without having to use string constructors to do so? 
 
 Info:  
 I'm working on a project right now that catalogs data from a star simulation of mine. To do so I'm loading all the data into a sqlite database. It's working pretty well, but I've decided to add a lot more flexibility, efficiency, and usability to my db. I plan on later adding planetoids to the simulation, and wanted to have a table for each star. This way I wouldn't have to query a table of 20m some planetoids for the 1-4k in each solar system.  
 I've been told using string constructors is bad because it leaves me vulnerable to a SQL injection attack. While that isn't a big deal here as I'm the only person with access to these dbs, I would like to follow best practices. And also this way if I do a project with a similar situation where it is open to the public, I know what to do. 
 Currently I'm doing this: 
 
 This works, but I would like to do something more like: 
 
 though I understand that this would probably be impossible. though I would settle for something like 
 
 If this is not at all possible, I'll accept that answer, but if anyone knows a way to do this, do tell. :) 
 I'm coding in python. 
 
 Unfortunately, tables can't be the target of parameter substitution (I didn't find any definitive source, but I have seen it on a few web forums). 
 If you are worried about injection (you probably should be), you can write a function that cleans the string before passing it. Since you are looking for just a table name, you should be safe just accepting alphanumerics, stripping out all punctuation, such as   and whitespace. Basically, just keep  . 
 
 
 I wouldn't separate the data into more than one table.  If you create an index on the star column, you won't have any problem efficiently accessing the data. 
 
 For people searching for a way to make the table as a variable, I got this from another reply to same question  here :  
 It said the following and it works. It's all quoted from  **mhawke**
:  
 You can't use parameter substitution for the table name. You need to add the table name to the query string yourself. Something like this: 
 
 One thing to be mindful of is the source of the value for the table name. If that comes from an untrusted source, e.g. a user, then you need to validate the table name to avoid potential SQL injection attacks. One way might be to construct a parameterised query that looks up the table name from the DB catalogue: 
 
 
 Try with string formatting: 
 
 Replace   with your desire. 
 
 you can use something like this
    
 basically, if we want to separate the data into several tables according to the date right now, for example, you want to monitor a system based on the date.  
 createTable = '''CREATE TABLE  %s (#      );''' %dateNow) means that you create a table with variable dateNow which according to your coding language, you can define dateNow as a variable to retrieve the current date from your coding language. 
 
 As has been said in the other answers, "tables can't be the target of parameter substitution" but if you find yourself in a bind where you have no option, here is a method of testing if the table name supplied is valid. 
Note: I have made the table name a real pig in an attempt to cover all of the bases. 
 
 
 You can pass a string as the SQL command: 
 
 