*** what-are-best-practices-for-multi-language-database-design ***

 
 
 
 
 
 
 
 
                            As it currently stands, this question is not a good fit for our Q&A format. We expect answers to be supported by facts, references,   or expertise, but this question will likely solicit debate, arguments, polling, or extended discussion. If you feel that this question   can be improved and possibly reopened,  visit the help center  for guidance.
                            
                         
 
 
 Closed  7 years ago . 
 
 
 What is the best way to create multi-language database? To create localized table for every table is making design and querying complex, in other case to add column for each language is simple but not dynamic, please help me to understand what is the best choose for enterprise applications 
 
 What we do, is to create two tables for each multilingual object. 
 E.g. the first table contains only language-neutral data (primary key, etc.) and the second table contains one record per language, containing the localized data plus the ISO code of the language. 
 In some cases we add a DefaultLanguage field, so that we can fall-back to that language if no localized data is available for a specified language. 
 Example: 
 
 With this approach, you can handle as many languages as needed (without having to add additional fields for each new language). 
 
 Update (2014-12-14): please have a look at  this answer , for some additional information about the implementation used to load multilingual data into an application. 
 
 I recommend the answer posted by Martin. 
 But you seem to be concerned about your queries getting too complex: 
 
 To create localized table for every table is making design and querying complex... 
 
 So you might be thinking, that instead of writing simple queries like this: 
 
 ...you would need to start writing queries like that: 
 
 Not a very pretty perspective. 
 But instead of doing it manually you should develop your own database access class, that pre-parses the SQL that contains your special localization markup and converts it to the actual SQL you will need to send to the database. 
 Using that system might look something like this: 
 
 And I'm sure you can do even better that that. 
 The key is to have your tables and fields named in uniform way. 
 
 I find this type of approach works for me:  
 
Product     ProductDetail        Country
=========   ==================   =========
ProductId   ProductDetailId      CountryId
- etc -     ProductId            CountryName
            CountryId            Language
            ProductName          - etc -
            ProductDescription
            - etc -
 
 The ProductDetail table holds all the translations (for product name, description etc..) in the languages you want to support. Depending on your app's requirements, you may wish to break the Country table down to use regional languages too. 
 
 I'm using next approach: 
 **Product**

 ProductID OrderID,... 
 **ProductInfo**

 ProductID Title Name LanguageID 
 **Language**

 LanguageID Name Culture,....  
 
 Martin's solution is very similar to mine, however how would you handle a default descriptions when the desired translation isn't found ?  
 Would that require an IFNULL() and another SELECT statement for each field ? 
 The default translation would be stored in the same table, where a flag like "isDefault" indicates wether that description is the default description in case none has been found for the current language.  
 