*** what-are-implications-of-set-ting-allow-snapshot-isolation-on ***

 Should I run  
 
 if snapshot transaction (TX) isolation (iso) is not temporarily used? 
In other words,  
 
 why should it be enabled, in first place? 
 Why isn't it enabled by default? 
 
 What is the cost of having it enabled (but temporarily not used) in SQL Server? 
 
 **--Update:**

enabling of snapshot TX iso level on database does not change READ COMMITTED tx iso to be default. 
You may check it by running:    
 
 the last row shows that tx iso level of current session is (read committed).   
 So, enabling snapshot tx iso level without changing to it does not use it, etc 
In order to use it one should issue   
 
 **Update2:**

I repeat the scripts from [1] but with SNAPSHOT enabled (but not switched on) but without enabling READ_COMMITTED_SNAPSHOT 
 
 There no results/rows from from executing    
 
 after executing INSERT, DELETE or UPDATE  
 Can you provide me with scripts illustrating that enabled SNAPSHOT tx iso level by ( 1 ) but not switched on by ( 2 ) produces any versions in tempdb and/or increase the size of data with 14 bytes per row? 
Really I do not understand what is the point in versioning if it is enabled by ( 1 ) but not used (not set on by ( 2))?   
 [1] 
Managing TempDB in SQL Server: TempDB Basics (Version Store: Simple Example) 
 http://blogs.msdn.com/b/sqlserverstorageengine/archive/2008/12/31/managing-tempdb-in-sql-server-tempdb-basics-version-store-simple-example.aspx   
 
 As soon as row versioning (aka. snapshot) is enabled in the database all writes have to be versioned. It doesn't matter under what isolation level the write occurred, since isolation levels always affect  only  reads. As soon the database row versioning is enabled, any insert/update/delete will: 
 
 increase the size of data with 14 bytes per row 
 possibly create an image of the data before the update in the version store (tempdb) 
 
 Again, it is completely irrelevant what isolation level is used. Note that row versioning occurs also if any of the following is true: 
 
 table has a trigger 
 MARS is enabled on the connection 
 Online index operation is running on the table 
 
 All this is explained in  Row Versioning Resource Usage : 
 
 Each database row may use up to 14
  bytes at the end of the row for row
  versioning information. The row
  versioning information contains the
  transaction sequence number of the
  transaction that committed the version
  and the pointer to the versioned row.
  These 14 bytes are  added the first
  time the row is modified, or when a
  new row is inserted , under  **any**

  of these conditions: 
 
 READ_COMMITTED_SNAPSHOT or ALLOW_SNAPSHOT_ISOLATION options are
  ON. 
 The table has a trigger. 
 Multiple Active Results Sets (MARS) is being used. 
 Online index build operations are currently running on the table. 
 
 ... 
 Row versions must be stored for as
  long as an active transaction needs to
  access it. ... if it meets  **any**
 of the
  following conditions: 
 
 It uses row versioning-based isolation. 
 It uses triggers, MARS, or online index build operations. 
 It generates row versions. 
 
 
 **Update**

 
 
 By default, you have snapshot isolation OFF, If you turn it ON, SQL will maintain snapshots of data for running transactions.
Example: On connection 1, you are running big select. On connection 2, you update some of the records that are going to be returned by first select. 
 In snapshot isolation ON, SQL will make a temporary copy of the data, affected by update, so SELECT will return original data. 
 Any additional data manipulation will affect performance. That's why this setting is OFF by default. 
 