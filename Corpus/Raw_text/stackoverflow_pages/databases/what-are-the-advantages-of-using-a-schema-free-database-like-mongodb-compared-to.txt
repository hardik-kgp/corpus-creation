*** what-are-the-advantages-of-using-a-schema-free-database-like-mongodb-compared-to ***

 I'm used to using relational databases like MySQL or PostgreSQL, and combined with MVC frameworks such as Symfony, RoR or Django, and I think it works great. 
 But lately I've heard a lot about MongoDB which is a non-relational database, or, to quote the  official definition , 
 
 a scalable, high-performance, open
  source, schema-free, document-oriented
  database. 
 
 I'm really interested in being on edge and want to be aware of all the options I'll have for a next project and choose the best technologies out there. 
 In which cases using MongoDB (or similar databases) is better than using a "classic" relational databases?
And what are the advantages of MongoDB vs MySQL in general?
Or at least, why is it so different? 
 If you have pointers to documentation and/or examples, it would be of great help too. 
 
 Here are some of the advantages of MongoDB for building web applications: 
 
 A document-based data model. The basic unit of storage is analogous to JSON, Python dictionaries, Ruby hashes, etc. This is a rich data structure capable of holding arrays and other documents. This means you can often represent in a single entity a construct that would require several tables to properly represent in a relational db. This is especially useful if your data is immutable. 
 Deep query-ability. MongoDB supports dynamic queries on documents using a document-based query language that's nearly as powerful as SQL.   
 No schema migrations. Since MongoDB is schema-free, your code defines your schema. 
 A clear path to horizontal scalability. 
 
 You'll need to read more about it and play with it to get a better idea.  Here's an online demo: 
 http://try.mongodb.org/ 
 
 There are numerous advantages.  
 For instance your database schema will be more scalable, you won't have to worry about migrations, the code will be more pleasant to write... For instance here's one of my model's code : 
 
 Adding a key is just adding a line of code ! 
 There are also other advantages that will appear in the long run, like a better scallability and speed.  
 ...  **But keep in mind that a non-relational database is not **
**better**
** than a relational one**
. If your database has a lot of relations and normalization, it might make little sense to use something like MongoDB. It's all about finding the right tool for the job. 
 For more things to read I'd recommend taking a look at " Why I think Mongo is to Databases what Rails was to Frameworks " or  this post  on the mongodb website. To get excited and if you speak french, take a look at  this article  explaining how to set up MongoDB from scratch. 
 Edit: I almost forgot to tell you about  this railscast  by  Ryan . It's very interesting and makes you want to start right away! 
 
 The advantage of schema-free is that you can dump whatever your load is in it, and no one will ever have any ground for complaining about it, or for saying that it was wrong. 
 It also means that whatever you dump in it, remains totally void of meaning after you have done so. 
 Some would label that a gross disadvantage, some others won't. 
 The fact that a relational database has a well-established schema, is a consequence of the fact that it has a well-established set of extensional predicates, which are what allows us to attach meaning to what is recorded in the database, and which are also a necessary prerequisite for us to do so. 
 Without a well-established schema, no extensional predicates, and without extensional precicates, no way for the user to make any meaning out of what was stuffed in it. 
 
 MongoDB was featured on FLOSS Weekly this week -  http://twit.tv/floss105 
A database using a similar concept is CouchDB which was featured on another FLOSS Weekly:  http://twit.tv/floss36 
 I think it's worth listening to those in addition to the  links provided by @marcgg 
 
 My experience with Postgres and Mongo after working with both the databases in my projects . 
 Postgres(RDBMS) 
 Postgres is recommended if your future applications have a complicated schema that needs lots of joins or all the data have relations or if we have heavy writing. Postgres is open source, faster, ACID compliant and uses less memory on disk, and is all around good performant for JSON storage also and includes full serializability of transactions with 3 levels of transaction isolation. 
 The biggest advantage of staying with Postgres is that we have best of both worlds. We can store data into JSONB with constraints, consistency and speed. On the other hand, we can use all SQL features for other types of data. The underlying engine is very stable and copes well with a good range of data volumes. It also runs on your choice of hardware and operating system. Postgres providing NoSQL capabilities along with full transaction support, storing JSON documents with constraints on the fields data. 
 General Constraints for Postgres 
 Scaling Postgres Horizontally is significantly harder, but doable. 
 Fast read operations cannot be fully achieved with Postgres. 
 NO SQL Data Bases 
 Mongo DB (Wired Tiger) 
 MongoDB may beat Postgres in dimension of “horizontal scale”. Storing JSON is what Mongo is optimized to do. Mongo stores its data in a binary format called BSONb which is (roughly) just a binary representation of a superset of JSON. MongoDB stores objects exactly as they were designed. According to MongoDB, for write-intensive applications, Mongo says the new engine(Wired Tiger) gives users an up to 10x increase in write performance(I should try this), with 80 percent reduction in storage utilization, helping to lower costs of storage, achieve greater utilization of hardware. 
 General Constraints of MongoDb 
 The usage of a schema less storage engine leads to the problem of implicit schemas. These schemas aren’t defined by our storage engine but instead are defined based on application behavior and expectations. 
 Stand-alone NoSQL technologies do not meet ACID standards because they sacrifice critical data protections in favor of high throughput performance for unstructured applications. It’s not hard to apply ACID on NoSQL databases but it would make database slow and inflexible up to some extent. “Most of the NoSQL limitations were optimized in the newer versions and releases which have overcome its previous limitations up to a great extent”. 
 
 It's all about trade offs. MongoDB is fast but not ACID, it has no transactions. It is better than MySQL in some use cases and worse in others.  
 
 Bellow Lines Written in MongoDB: The Definitive Guide. 
 
 There are several good reasons:  
 
 Keeping different kinds of documents in the same collection can be a
  nightmare for developers and admins. Developers need to make sure
  that each query is only returning documents of a certain kind or
  that the application code performing a query can handle documents of
  different shapes. If we’re querying for blog posts, it’s a hassle to
  weed out documents containing author data. 
 It is much faster to get a list of collections than to extract a
  list of the types in a collection. For example, if we had a type key
  in the collection that said whether each document was a “skim,”
  “whole,” or “chunky monkey” document, it would be much slower to
  find those three values in a single collection than to have three
  separate collections and query for their names 
 Grouping documents of the same kind together in the same collection
  allows for data locality. Getting several blog posts from a
  collection containing only posts will likely require fewer disk
  seeks than getting the same posts from a collection con- taining
  posts and author data. 
 We begin to impose some structure on our documents when we create
  indexes. (This is especially true in the case of unique indexes.)
  These indexes are defined per collection. By putting only documents
  of a single type into the same collection, we can index our
  collections more efficiently 
 
 
 
 After a question of databases with textual storage), I glanced at MongoDB and similar systems. 
If I understood correctly, they are supposed to be easier to use and setup, and much faster. Perhaps also more secure as the lack of SQL prevents SQL injection... 
Apparently, MongoDB is used mostly for Web applications. 
Basically, and they state that themselves, these databases aren't suited for complex queries, data-mining, etc. But they shine at retrieving quickly lot of flat data. 
 
 
 MongoDB supports search by fields, regular expression searches.Includes user defined java script functions. 
 MongoDB can be used as a file system, taking advantage of load balancing and data replication features over multiple machines for storing files. 
 
 