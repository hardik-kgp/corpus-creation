*** what-are-the-reasons-to-use-sql-server-instead-of-mysql-with-a-complex-net-proj ***

 We currently have a 10 year old nasty, spaghetti-code-style SQL Server database that we are soon looking to pretty much re-write from scratch as part of a re-write to a large web application. (The existing application will serve as the functional requirements for the next incarnation of the app) The new version will be developed in .Net, so a large portion of the application stack will be based on Microsoft technologies (Visual Studio will be used IIS will be the application server). 
 One of the developers on the project has raised the possibility of switching to MySQL instead of SQL Server in order to save on cost for both the licence of the DB server, as well as the tools to design and manipulate the DB (such as the wonderfully free MySQL Workbench). 
 What are the various pros and cons of using SQL Server vs. MySQL as the database for a complex .Net project? Price is one factor we have identified, both in terms of the DB server licence as well as tools to manipulate the DB, but what other factors come into play? 
 
 My pro/con list for MySQL vs. SQL Server for .NET projects would be: 
 Pros to MySQL: 
 
 Cost 
 
 Pros to SQL Server: 
 
 Better tooling support, especially for .NET (Entity Framework + other ORM support is MUCH better) 
 Better Visual Studio support 
 Better integration support, especially if you want to do things like Silverlight + RIA, etc. 
 
 
 Have a look at 
 
 DBMS Comparisons: MySQL 5.0 vs.
Microsoft SQL Server 2005 
 Comparison of Microsoft SQL Server
2005, MySQL 5, and PostgreSQL 8.3 
 Microsoft SQL Server vs. MySQL 
 MySQL or SQL Server: Look beyond
politics and hype when deciding which
to use 
 
 
 With SQL Server, you can have better tooling integration ( such as designers) between your entity class and your database schema. 
 You can just drag a database and drop it in the designer, and viola! All the entities mapping to the tables and their relationships are generated.
 
 (source:  scottgu.com )   
 As for MySQL, obviously licensing cost is an advantage 
 
 It sounds like this is a large project you are working on. Obviously license cost will be higher using SQL Server compared to MySql, but there are many hidden costs using MySql too. 
 If this is a very large project and your team of developers are already trained in SQL Server, the additional cost of license for SQL Server compared to the cost of hundreds of hours of development time is minesque.  
 
 Along with the other answers on this page, i'd also consider the following: 
 
 MS SQL has database mirroring capabilities - if you need high availability and automatic failover, this would be something to consider. 
 Local availability of experts.  You should do a bit of research as to what your options are for local expert help.  When your database is dead, you don't want to suddenly find out that no local help is available. 
 
 
 **SQL Server Pros:**

 
 Transactions on all tables (No picking between the fast engine and the safe engine) 
 In SQL Server, when subqueries are the most natural way to write a query, you can go ahead and do it.  Especially with derived tables and Where Exists subqueries, there's not likely to be a performance penalty. 
 Any samples you come across from MS are going to assume SQL Server.  In my current job, having to translate everything to Oracle is always a nuisance. 
 I've found derived columns in SQL Server to be very handy, although they can confuse an ORM. 
 Does MySQL support foreign keys or check constraints, yet? 
 
 
 I personally would stick with MSSQL if using .NET.
It's much more tool friendly, as some of people suggested before 
 But Java has some pretty friendly environments with MySQL. If you don't mind using Java, give it a try. NetBeans IDE with Java Persistance API is really MySQL friendly :) 
 