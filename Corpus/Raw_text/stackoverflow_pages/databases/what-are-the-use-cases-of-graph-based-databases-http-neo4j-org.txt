*** what-are-the-use-cases-of-graph-based-databases-http-neo4j-org ***

 
 
 
 
 
 
 
 
                            As it currently stands, this question is not a good fit for our Q&A format. We expect answers to be supported by facts, references,   or expertise, but this question will likely solicit debate, arguments, polling, or extended discussion. If you feel that this question   can be improved and possibly reopened,  visit the help center  for guidance.
                            
                         
 
 
 Closed  7 years ago . 
 
 
 I have used Relational DB's a lot and decided to venture out on other types available. 
 This particular product looks good and promising:  http://neo4j.org/ 
 Has anyone used graph-based databases? What are the pros and cons from a usability prespective? 
 Have you used these in a production environment? What was the requirement that prompted you to use them? 
 
 I used a graph database in a previous job. We weren't using neo4j, it was an in-house thing built on top of Berkeley DB, but it was similar. It was used in production (it still is). 
 The reason we used a graph database was that the data being stored by the system and the operations the system was doing with the data were exactly the weak spot of relational databases and were exactly the strong spot of graph databases. The system needed to store collections of objects that lack a fixed schema and are linked together by relationships. To reason about the data, the system needed to do a lot of operations that would be a couple of traversals in a graph database, but that would be quite complex queries in SQL. 
 The main advantages of the graph model were rapid development time and flexibility. We could quickly add new functionality without impacting existing deployments. If a potential customer wanted to import some of their own data and graft it on top of our model, it could usually be done on site by the sales rep. Flexibility also helped when we were designing a new feature, saving us from trying to squeeze new data into a rigid data model. 
 Having a weird database let us build a lot of our other weird technologies, giving us lots of secret-sauce to distinguish our product from those of our competitors.  
 The main disadvantage was that we weren't using the standard relational database technology, which can be a problem when your customers are enterprisey. Our customers would ask why we couldn't just host our data on their giant Oracle clusters (our customers usually had large datacenters). One of the team actually rewrote the database layer to use Oracle (or PostgreSQL, or MySQL), but it was slightly slower than the original. At least one large enterprise even had an Oracle-only policy, but luckily Oracle bought Berkeley DB. We also had to write a lot of extra tools - we couldn't just use Crystal Reports for example. 
 The other disadvantage of our graph database was that we built it ourselves, which meant when we hit a problem (usually with scalability) we had to solve it ourselves. If we'd used a relational database, the vendor would have already solved the problem ten years ago. 
 If you're building a product for enterprisey customers and your data fits into the relational model, use a relational database if you can. If your application doesn't fit the relational model but it does fit the graph model, use a graph database. If it only fits something else, use that. 
 If your application doesn't need to fit into the current blub architecture, use a graph database, or CouchDB, or BigTable, or whatever fits your app and you think is cool. It might give you an advantage, and its fun to try new things. 
 Whatever you chose, try not to build the database engine yourself unless you really like building database engines. 
 
 We've been working with the Neo team for over a year now and have been very happy. We model scholarly artifacts and their relationships, which is spot on for a graph db, and run recommendation algorithms over the network. 
 If you are already working in Java, I think that modeling using Neo4j is very straight forward and it has the flattest / fastest performance for R/W of any other solutions we tried. 
 To be honest, I have a hard time  not  thinking in terms of a Graph/Network because it's so much easier than designing convoluted table structures to hold object properties and relationships. 
 That being said, we do store some information in MySQL simply because it's easier for the Business side to run quick SQL queries against. To perform the same functions with Neo we would need to write code that we simply don't have the bandwidth for right now. As soon as we do though, I'm moving all that data to Neo! 
 Good luck. 
 
 Two points: 
 First, on the data I've been working with the past 5 years in SQL Server, I've recently hit the scalability wall with SQL for the type of queries we need to run (nested relationhsips...you know...graphs).  I've been playing around with neo4j, and my lookup times are several orders of magnitude faster when I need this kind of lookup. 
 Second, to the point that graph databases are outdated.  Um...no.  Early on, as people were trying to figure out how to store and lookup data efficiently, they created and played with graph and network style database models.  These were designed so the physical model reflected the logical model, so their efficiency wasnt that great.  This type of data structure was good for semi-structured data, but not as good for structured dense data.  So, this IBM dude named Codd was researching efficient ways to arrange and store structured data and came up with the idea for the relational database model.  And it was good, and people were happy. 
 What do we have here?  Two tools for two different purposes.  Graph database models are very good for representing semi-structured data and the relationships between entities (that may or may not exist).  Relational databases are good for structured data that has a very static schema, and where join depths do not go very deep.  One is good for one kind of data, the other is good for other kinds of data. 
 To coin the phrase, there is no Silver Bullet.  Its very short sighted to say that graph database models are out of date and to use one gives up 40 years of progress.  That's like saying using C is giving up all the technological progress we've gone through to get things like Java and C#. That's not true though.  C is a tool that is needed for certain tasks.  And Java is a tool for other tasks. 
 
 I've been using MySQL for years to manage engineering data, and it worked well, but one of the problems we had (but didn't realise we had) was that we always had to plan the schema up-front. Another problem we knew we had was mapping the data up to domain objects and back.  
 Now we've just started trying out neo4j and it looks like it is solving both problems for us. The ability to add different properties to each node (and relation) has allowed us to re-think our entire approach to data. It is like dynamic versus static languages (Ruby versus Java), but for databases. Building the data model in the database can be done in a much more agile and dynamic way, and that is dramatically simplifying our code. 
 And since the object model in code is generally a graph structure, mapping from the database is also simpler, with less code and consequently fewer bugs. 
 And as a additional bonus, our initial prototype code for loading our data into neo4j is actually performing faster than the previous MySQL version. I have no solid numbers on this (yet), but that was a nice additional feature. 
 But at the end of the day, the choice probably should be based mostly on the nature of your domain model. Does it map better to tables or graphs? Decide by doing some prototypes, load the data and play with it. Use neoclipse to look at different views of the data. Once you've done that, hopefully you know if you're on to a good thing or not. 
 
 I am building an intranet at my company.  
 I am interested in understanding how to load data that was stored in tables (Oracle, MySQL, SQL Server, Excel, Access, various random lists) and loading it into Neo4J, or some other graph database.  Specifcally, what happens when common data overlaps existing data already in the system.   
 Yes, I know some data is best modeled in RDBMS, but I have this idea itching me, that when you need to superimpose several distinct tables, the graph model is better than the table structure.   
 For instance, I work in a manufacturing environment.  There is a major project we are working on and because of the complexity, each department has created a seperate Excel spreadsheet that has a  BOM (Bill Of Materials)  hierarchy in a column on the left and then several columns of notes and checks made by individuals who made these sheets.   
 So one of the problems is merging all these notes together into one "view" so that someone can see all the issues that need to be addressed in any particular part.   
 The second problem is that an Excel spreadsheet sucks at representing a hierarchial BOM when a common component is used in more than one subassembly.  Meaning that, if someone writes a note about the P34 relay in the ignition subassembly, the same comment should be associated with the P34 relays used in the motor driver subassembly.  This won't occur in the excel spreadsheet.   
 For the company intranet, I want to be able to search for anything easily.  Such as data related to a part number, a BOM structure, a phone number, an email address, a company policy, or procedure.  I want to even extend this to manage computer hardware assets, and installed software.   
 I envision that once the information network starts to get populated you can start doing cool traversals such as "I want to write an email to everyone working on the XYZ project".  People will have been associated with the project because they will be tagged as creating and modifying the data within the XYZ project.  So by using the XYZ project as a search key, a huge set with everything related to the XYZ project will be created.  Including links to people who built the XYZ project.  The people links will connect to their email addresses.  So by their involvement in the XYZ project, they will be included in my email.  This is in stark contrast to some secretary trying to maintain a list of people work on the project.  We generate a lot of lists.  We spend a lot of time maintaining lists and making sure they are up to date.  And most of it doesn't add any value to our products.  
 Another cool traversal could report all the computers that have a certain piece of software installed, by version.  That report could be used to generate tasks to remove extra copies of old software and to update people who need to have the latest copy.  It would also be useful for license tracking.      
 
 Here is a good article that talks about the needs that non relational databases fill:  http://www.readwriteweb.com/enterprise/2009/02/is-the-relational-database-doomed.php 
 It does a good job at pointing out (aside from the name) that relational databases arent flawed or wrong, its just that these days people are starting to process more and more data in mainstream software and web sites, and that relational databases just wont scale for these needs. 
 
 might be a bit late, but there is a growing number of projects using Neo4j, the better known ones listed at  Neo4j  . Also NeoTechnology, the company behind Neo4j, has some references at  their customers page 
 Note: I am part of the Neo4j team 
 