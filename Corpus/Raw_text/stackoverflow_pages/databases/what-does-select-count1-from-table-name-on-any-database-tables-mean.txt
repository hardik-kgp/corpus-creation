*** what-does-select-count1-from-table-name-on-any-database-tables-mean ***

 When we execute   it returns the number of rows. 
 What does   do? What does   signify here? Is this the same as   (as it gives the same result on execution)? 
 
 The parameter to the COUNT function is an expression that is to be evaluated for each row. The COUNT function returns the number of rows for which the expression evaluates to a non-null value. ( * is a special expression that is not evaluated, it simply returns the number of rows.) 
 There are two additional modifiers for the expression: ALL and DISTINCT. These determine whether duplicates are discarded. Since ALL is the default, your example is the same as count(ALL 1), which means that duplicates are retained. 
 Since the expression "1" evaluates to non-null for every row, and since you are not removing duplicates, COUNT(1) should always return the same number as COUNT(*). 
 
 Here is  a link  that will help answer your questions. In short: 
 
 count(*) is the correct way to write
  it and count(1) is OPTIMIZED TO BE
  count(*)  internally -- since  
 a) count the rows where 1 is not null
  is less efficient than 
  b) count the rows 
 
 
 Difference between count(*) and count(1) in oracle? 
 count(*) means it will count all records i.e each and every cell
BUT 
 count(1) means it will add one pseudo column with value 1 and returns count of all records 
 
 This is similar to the difference between  
 
 If you do  
 
 it will give you the number 1 for each row in the table.  So yes   and   will provide the same results as will   or  
 
 There is no difference. 
  is basically just counting a constant value 1 column for each row.  As other users here have said, it's the same as   or  .  Any non-  value will suffice. 
 http://asktom.oracle.com/pls/asktom/f?p=100:11:2603224624843292::::P11_QUESTION_ID:1156151916789 
 The Oracle optimizer did apparently use to have bugs in it, which caused the count to be affected by which column you picked and whether it was in an index, so the COUNT(1) convention came into being. 
 
 
 should do the exact same thing as  
 
 There may have been or still be some reasons why it would perform better than  on some database, but I would consider that a bug in the DB. 
 
 however has a different meaning, as it counts only the rows with a non-null value for the given column. 
 
 in oracle i believe these have exactly the same meaning 
 
 You can test like this: 
 
 
 Depending on who you ask, some people report that executing   runs faster than  . Others claim they are exactly the same. 
 This  link  claims that the speed difference between the 2 is due to a FULL TABLE SCAN vs FAST FULL SCAN. 
 