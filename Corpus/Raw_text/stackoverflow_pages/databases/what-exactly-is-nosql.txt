*** what-exactly-is-nosql ***

 What exactly is NoSQL? Is it database systems that only work with {key:value} pairs? 
 As far as I know   is one of such database systems, am I right? 
 What other popular NoSQL databases are there and where exactly are they useful? 
 Thanks, Boda Cydo. 
 
 From wikipedia: 
 
 NoSQL is an umbrella term for a loosely defined class of non-relational data stores that break with a long history of relational databases and ACID guarantees. Data stores that fall under this term may not require fixed table schemas, and usually avoid join operations. The term was first popularised in early 2009. 
 
 The motivation for such an architecture was high scalability, to support sites such as Facebook, advertising.com, etc... 
 
 I'm not agree with the answers I'm seeing, although it's true that NoSQL solutions tends to break the ACID rules, not all are created from that approach. 
 I think first you should define what is a SQL Solution and then you can put the "Not Only" in front of it, that will be more accurate definition of what is a NoSQL solution. 
 With this approach in mind: 
 
 SQL databases are a way to group all the data stores that are accessible using Structured Query Language as the main (and most of the time only) way to communicate with them, this means it requires that the database support the structures that are common to those systems like "tables", "columns", "rows", "relationships", etc. 
 
 Now, put the "Not Only" in front of the last sentence and you will get a definition of what means "NoSQL". NoSQL groups all the stores created as an attempt to solve problems which cannot fit into the table/column/rows structures or even in SQL Statements, in most of the cases these databases will not support relationships, they're abandoning the well known structures just because the problems have changed since their conception. 
 If you have a text file, and you create an API to store/retrieve/organize this information, then you have a NoSQL database in your hands. 
 All of these means that there are several solutions to store the information in a way that traditional SQL systems will not allow to achieve better performance, flexibility, etc etc. Every NoSQL provider tries to solve a different problem and that's why you wont be able to compare two different solutions, for example: 
 
 djondb  is a document store created to be used as
NoSQL enterprise solution supporting transactions, consistency, etc.
but sacrifice performance of its counterparts. 
 MongoDB  is a document store (similar to
djondb) which accomplish great performance but trades some of the
ACID properties to achieve this. 
 CouchDB  is another document store which
solves the queries slightly different providing views to retrieve the
information without doing a full query every time. 
 ... 
 
 As you may have noticed I only talked about the document stores, that's because I wanted to show you that 3 different document stores implementations have different approach, therefore you should keep in mind the golden rule of NoSQL stores "Use the right tool for the right job". 
 I'm the creator of djondb and I've been doing a lot of research even before trying to start my own NoSQL implementation, but this is a field where the concepts will keep changing the way we see the information storage. 
 
 To quickly get a handle on NoSQL systems, see this blog post I wrote:  Visual Guide to NoSQL Systems . Essentially, NoSQL systems sacrifice either consistency or availability in favor of tolerance to network partitions. 
 
 Take a look at these: 
 http://en.wikipedia.org/wiki/Nosql#List_of_NoSQL_open_source_projects 
 and this: 
 http://www.mongodb.org/display/DOCS/Comparing+Mongo+DB+and+Couch+DB 
 
 I used something called the  Raima Data Manager  more than a dozen years ago, that qualifies as NoSQL.  It calls itself a "Set Oriented Database"  Its not based on tables, and there is no query "language", just an C API for asking for subsets.   
 It's  fast  and easier to work with in C/C++ and SQL, there's no building up strings to pass to a query interpreter and the data comes back as an enumerable object rather than as an array.  variable sized records are normal and don't waste space.  I never saw the source code, but there were some hints at the interface that internally, the code used pointers a lot.  
 I'm not sure that the product I used is even sold anymore, but the company is still around. 
 
 MongoDB  looks interesting,  SourceForge is now using it . 
 I listened to a podcast with a team member. The idea with NoSQL isn't so much to replace SQL as it is to provide a solution for problems that aren't solved well with traditional RDBMS. As mentioned elsewhere, they are faster and scale better at the cost of reliability and atomicity (different solutions to different degrees). You wouldn't want to use one for a financial system, but a document based system would work great. 
 
 What is NoSQL ? 
 NoSQL is the acronym for Not Only SQL.  The basic qualities of NoSQL databases are schemaless, distributed and horizontally scalable on commodity hardware.  The NoSQL databases offers variety of functions to solve various problems with variety of data types, where “blob” used to be the only data type in RDBMS to store unstructured data. 
 1 Dynamic Schema
NoSQL databases allows schema to be flexible. New columns can be added anytime.  Rows may or may not have values for those columns and no strict enforcement of data types for columns. This flexibility is handy for developers, especially when they expect frequent changes during the course of product life cycle. 
 2 Variety of Data
NoSQL databases support any type of data.  It supports structured, semi-structured and unstructured data to be stored.  Its supports logs, images files, videos, graphs, jpegs, JSON, XML to be stored and operated as it is without any pre-processing.  So it reduces the need for ETL (Extract – Transform – Load). 
 3 High Availability Cluster
NoSQL databases support distributed storage using commodity hardware. It also supports high availability by horizontal scalability. This features enables NoSQL databases get the benefit of elastic nature of the Cloud infrastructure services. 
 4 Open Source
NoSQL databases are open source software.  The usage of software is free and most of them are free to use in commercial products.  The open sources codebase can be modified to solve the business needs.  There are minor variations in the open source software licenses, users must be aware of license agreements. 
 5 NoSQL – Not Only SQL
NoSQL databases not only depend SQL to retrieve data. They provide rich API interfaces to perform DML and CRUD operations. These are APIs are move developer friendly and supported in variety of programming languages. 
 
 Here is a comprehensive list of NoSQL Databases:  http://nosql-database.org/ . 
 I'm glad that you have had success with RDM John! I work at Raima so it's great to hear feedback.  For those looking for more information, here are a couple of resources: 
 
 Video Overview of RDM's General Architecture 
 Free Evaluation Download of RDM 
 
 