*** what-factors-to-consider-when-choosing-a-multi-model-dbms-orientdb-vs-arangodb ***

 I am looking to dip my hands into the world of Multi-Model DBMS, I have no particular use cases, just want to start learning. 
 I find that there are two prominent ones -  OrientDB  vs  ArangoDB , but was unable to find any  meaningful  comparison,  unopinionated  between them. Can someone shed some light on the difference in  **features**
 between the two, and any caveats in using one over the other? If I learn one would I be able to easily transition to the other? 
 (I tagged  FoundationDB  as well, but it is proprietary and I probably won't consider it) 
 This question asks for a general  **comparison**
 between OrientDB vs ArangoDB  **for someone looking to learn**
 about Multi-model DBMS, and  **not**
 an opinionated answer about which is better. 
 
 
 **Disclaimer:**
 I would no longer recommend OrientDB, see my comments below. 
 
 
 I can provide a slightly less biased opinion, having used both ArangoDB and OrientDB. It's still biased as I'm the author of OrientDB's node.js driver -  oriento  but I don't have a vested interest in either company or product, I've just necessarily used OrientDB  more . 
 ArangoDB and OrientDB are both targeting a similar market and have a lot of similarities: 
 
 Both are multi-model, you can use them to store documents, graphs and simple key / values. 
 Both have support for  Gremlin , but it's firmly a second class citizen compared to their own preferred query languages. 
 Both support server-side "stored procedures" in JavaScript. In both systems this comes via a slightly less than idiomatic JavaScript API, although ArangoDB's is a lot better. This is getting fixed in a forthcoming version of OrientDB. 
 Both offer REST APIs, both aim to be usable as an "API Server" via JavaScript request handlers. This is a lot more practical in ArangoDB than OrientDB. 
 Both are distributed under a permissive license. 
 Both are ACID and have transaction support, but in both the transactions are server-side operations - they're more like atomic batches of commands rather than the kinds of transactions you might be used to in a traditional RDBMS. 
 
 However, there are a lot of differences: 
 
 ArangoDB has no concept of "links", which are a very useful feature in OrientDB. They allow unidirectional relationships (just like a hyperlink on the web), without the overhead of edges. 
 ArangoDB is written in C++ (and JavaScript), whereas OrientDB is written in Java. Both have their advantages:

 
 Being written in C++ means ArangoDB uses V8, the same high performance JavaScript engine that powers node.js and Google Chrome. Whereas being written in Java means OrientDB uses Nashorn, which is still fast but not the fastest. This means that ArangoDB can offer a greater level of compatibility with the node.js ecosystem compared to OrientDB. 
 Being written in Java means that OrientDB runs on more platforms, including e.g. Raspberry PI. It also means that OrientDB can leverage a lot of other technologies written in Java, e.g. OrientDB has superb full text / geospatial search support via Lucene, which is not available to ArangoDB. 
 
 OrientDB uses a dialect of SQL as its query language, whereas ArangoDB uses its own custom language called AQL. In theory, AQL is better because it's designed explicitly for the problem, in practise though it feels quite similar to SQL but with different keywords, and is yet another language to learn while OrientDB's implementation feels a lot more comfortable if you're used to SQL. SQL is declarative whereas AQL is imperative - YMMV here. 
 ArangoDB is a "mostly-memory" database, it works best when most of your data fits in RAM. This may or may not be suitable for your needs. OrientDB doesn't have this restriction (but also loves RAM).  
 OrientDB is fully object oriented - it supports classes with properties and inheritance. This is exceptionally useful because it means that your database structure can map 1-1 to your application structure, with no need for ugly hacks like ActiveRecord. ArangoDB supports something fairly similar via models in Foxx, but it's more like an optional addon rather than a core part of how the database works. 
 ArangoDB offers a lot of flexibility via  Foxx , but it has not been designed by people with strong server-side JS backgrounds and reinvents the wheel a lot of the time. Rather than leveraging frameworks like  express  for their request handling, they created their own clone of  Sinatra , which of course makes it almost the same as express (express is also a Sinatra clone), but subtly different, and means that none of express's middleware or plugins can be reused. Similarly, they embed V8, but not libuv, which means they do not offer the same non blocking APIs as node.js and therefore users cannot be sure about whether a given npm module will work there. This means that non trivial applications cannot use ArangoDB as a replacement for the backend, which negates a lot of the potential usefulness of Foxx.  
 OrientDB supports first class property level and database level indices. You can query and insert into specific indexes directly for maximum efficiency. I've not seen support for this in ArangoDB. 
 OrientDB is the more established option, with many high profile users. ArangoDB is newer, less well known, but growing fast. 
 ArangoDB's documentation is excellent, and they offer official drivers for many different programming languages. OrientDB's documentation is not quite as good, and while there are drivers for most platforms, they're community powered and therefore not always kept up to date with bleeding edge OrientDB features. 
 If you're using Java (or a Java bridge), you can embed OrientDB directly within your application, as a library. This use case is not possible in ArangoDB. 
 OrientDB has the concept of users and roles, as well as  Record Level Security . This may be a killer feature for you, it is for me. It also supports token based authentication, so it's possible to use OrientDB as your primary means of authorizing/authenticating users. OrientDB also has  LDAP integration. In contrast, ArangoDB support only a very simple auth option. 
 
 Both systems have their own advantages, so choosing between them comes down to your own situation: 
 
 If you're building a small application, and you're a web developer optimizing for developer productivity, it will probably be easier to get up and running quickly with ArangoDB. 
 If you're building a larger application, which could potentially store many gigabytes or terabytes of data, or have many thousands of concurrent users, or have "enterprise" use cases, or need fine grained security controls, OrientDB is the one for you. 
 If you're storing RDF or similarly structured linked data, choose OrientDB. 
 If you're using Java, just choose OrientDB. 
 
 
 Note: This is ( my opinion of ) the state of play  today , things change quickly and I would not underestimate the ruthless efficiency of the awesome team behind ArangoDB, I just think that it's not quite there  yet  :) 
 
 
 Charles Pick (codemix.com) 
 