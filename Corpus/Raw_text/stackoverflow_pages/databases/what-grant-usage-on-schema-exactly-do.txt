*** what-grant-usage-on-schema-exactly-do ***

 I'm trying to create for the first time a Postgres database, so this is probably a stupid question. I assigned basic read-only permissions to the db role that must access the database from my php scripts, and I have a curiosity: if I execute 
 
 is there any need to execute also 
 
 ? 
 From  documentation : 
 
 USAGE: For schemas, allows access to objects contained in the
  specified schema (assuming that the objects' own privilege
  requirements are also met). Essentially this allows the grantee to
  "look up" objects within the schema. 
 
 I think that if I can select or manipulate any data contained in the schema, I can access to any objects of the schema itself. Am I wrong? If not, what   is used for? And what does the documentation means exactly with "assuming that the objects' own privilege requirements are also met"? 
 
 s on different objects are separate.  ing on a database doesn't   rights to the schema within. Similiarly,  ing on a schema doesn't grant rights on the tables within. 
 If you have rights to   from a table, but not the right to see it in the schema that contains it then you can't access the table.  
 The rights tests are done in order:  
 
 Your confusion may arise from the fact that the   schema has a default   of all rights to the role  , which every user/group is a member of. So everyone already has usage on that schema. 
 The phrase: 
 
 (assuming that the objects' own privilege requirements are also met) 
 
 Is saying that you must have   on a schema to use objects within it, but having   on a schema is not by itself sufficient to use the objects within the schema, you must also have rights on the objects themselves. 
 It's like a directory tree. If you create a directory   with file   within it then set it so that only your own user can access the directory or the file (mode   on the dir, mode   on the file) then nobody else can list the directory to see that the file exists. 
 If you were to grant world-read rights on the file (mode  ) but not change the directory permissions it'd make no difference. Nobody could  see  the file in order to read it, because they don't have the rights to list the directory. 
 If you instead set   on the directory, setting it so people can list and traverse the directory but not changing the file permissions, people could  list  the file but could not  read  it because they'd have no access to the file. 
 You need to set  both  permissions for people to actually be able to view the file. 
 Same thing in Pg. You need both schema   rights and object rights to perform an action on an object, like   from a table. 
 (The analogy falls down a bit in that PostgreSQL doesn't have row-level security yet, so the user can still "see" that the table exists in the schema by  ing from   directly. They can't interact with it in any way, though, so it's just the "list" part that isn't quite the same.) 
 
 For a production system, you can use this configuration : 
 
 
 Well, this is my final solution for a simple db, for Linux: 
 
 