*** what-is-an-appropriate-data-structure-and-database-schema-to-store-logic-rules ***

 Preface: I don't have experience with rules engines, building rules, modeling rules, implementing data structures for rules, or whatnot. Therefore, I don't know what I'm doing or if what I attempted below is way off base. 
 I'm trying to figure out how to store and process the following hypothetical scenario. To simplify my problem, say that I have a type of game where a user purchases an object, where there could be 1000's of possible objects, and the objects must be purchased in a specified sequence and only in certain groups. For example, say I'm the user and I want to purchase object F. Before I can purchase object F, I must have previously purchased object A OR (B AND C). I cannot buy F and A at the same time, nor F and B,C. They must be in the sequence the rule specifies. A first, then F later. Or, B,C first, then F later. I'm not concerned right now with the span of time between purchases, or any other characteristics of the user, just that they are the correct sequence for now.  
 What is the best way to store this information for potentially thousands of objects that allows me to read in the rules for the object being purchased, and then check it against the user's previous purchase history?  
 I've attempted this, but I'm stuck at trying to implement the groupings such as A OR (B AND C). I would like to store the rules in a database where I have these tables: 
 
 But obviously as you process through the results, without the grouping, you get the wrong answer. I would like to avoid excessive string parsing if possible :). One object could have an unknown number of previous required purchases. SQL or psuedocode snippets for processing the rules would be appreciated. :) 
 
 It seems like your problem breaks down to testing whether a particular condition has been satisfied. 
 You will have compound conditions.
So given a table of items: 
 
ID_Item    Description
----------------------
1          A         
2          B         
3          C         
4          F         
 
 and given a table of possible actions: 
 
ID_Action  VerbID  ItemID    ConditionID
----------------------------------------
1          BUY     4         1
 
 We construct a table of conditions: 
 
ID_Condition  VerbA  ObjectA_ID  Boolean  VerbB            ObjectB_ID
---------------------------------------------------------------------
1             OWNS   1           OR       MEETS_CONDITION  2
2             OWNS   2           AND      OWNS             3
 
 So OWNS means the id is a key to the Items table, and MEETS_CONDITION means that the id is a key to the Conditions table. 
 This isn't meant to restrict you.  You can add other tables with quests or whatever, and add extra verbs to tell you where to look.  Or, just put quests into your Items table when you complete them, and then interpret a completed quest as owning a particular badge.  Then you can handle both items and quests with the same code. 
 
 This is a very complex problem that I'm not qualified to answer, but I've seen lots of references to.  The fundamental problem is that for games, quests and items and "stats" for various objects can have non-relational dependencies.  This thread may help you a lot . 
 You might want to pick up a couple books on the topic, and look into using LUA as a rules processor. 
 
 Personally I would do this in code, not in SQL.  Each item should be its own class implementing an interface (i.e. IItem).  IItem would have a method called OkToPurchase that would determine if it is OK to purchase that item.  To do that, it would use one or more of a collection of rules (i.e. HasPreviouslyPurchased(x), CurrentlyOwns(x), etc.) that you can build.  
 The nice thing is that it is easy to extend this approach with new rules without breaking all the existing logic. 
 Here's some pseudocode: 
 
 