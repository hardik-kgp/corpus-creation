*** what-is-cursor-setnotificationuri-used-for ***

 I did research on how to use   and Loaders from  this tutorial 
 How I see it:
We have an   with  ,   and  . We also implement  . 
 In an   we can call   via a button click. 
 In our implementation of  , at the end of   method, we call   and our   will receive message that it should reload data and update UI. Also if we use   in   it will also receive message and its method   will be called.  
 So our ListView will be updated if we insert, update or delete data. 
  is deprecated,   deprecated, so I do not see any practice sense from   . 
 I looked into   method's source code and saw that it calls   inside the method. Also   does the same. Finally cursor will receive message and the following method will be called inside Cursor: 
 
 But I can not make sense of this. 
 So my question is:  **why should we call **
** in **
** method of our **
** implementation?**

 
 If you call  , Cursor will know what  ContentProvider Uri  it was created for.  
  registers its own   (which extends  ) with the  's   for the URI you specified when calling  . 
 So once that   knows that URI's content has been  changed  [ this happens when you call   inside  's  ,   and   methods ] it notifies all the observers including CursorLoader's  . 
  then marks Loader's mContentChanged as true 
 
  registers observer for the cursor,  **not**
 to the URI. 
 Look into  CursorLoader's source code  below. Notice that   registers   to the  .   
 
 The   needs to call method   to register   to the  .  
 
 Inside the  's  ,  ,   methods, you need to call   to notify change to the   observers.  
 So if you don't call  , your   will not receive notification if data underlying that   changes. 
 
 I use one URI for the cursor adaptor. 
 
 On another class, I  **use a different URI to change the database contents**
. To have my view updated, I had to change the  default  implementation of the data provider's   method. The default implementation only notifies the same URI. I have to notify another URI. 
 I ended up by calling the   twice on my data provider class, on the   method: 
 
 I did the same for the  and   methods. 
 