*** what-is-faster-jdbc-or-jndi ***

 I have two options to configure my application database connection - one is using JDBC, another one is using JNDI. What will be the best option in terms of how fast those connection types work with the database.  
 I understand those are two different types of database connections using different principles (JDBC is a direct db connection, JNDI is a database connection pool configuration on application server side). But are there other general JDBC/JNDI pros and cons which might be more important than operating speed? If yes, what are they? 
 
 I bet what you mean is choosing from  
 
 creating datasource or jdbc connection manually in your application, or  
 setup the datasource in the container, and application lookup the datasource through JNDI 
 
 If it is the case, always stick to 2 if possible. 
 The main reasons for the choice is never the performance differences.  The reason for sticking to 2 is in most cases is, you need 2 to gain more advanced features from container, for example, distributed transaction. 
 
 A database connection always uses JDBC. With JNDI you register a datasource in a directory service which can be looked up by its name. Thus JDBC and JNDI are completly different and not interchangeable. 
 
 This is what i have found about JNDI and JDBC. 
 **JNDI:**
 This is a technology which works like a telephone directory which is used to search the name on server and datasource remotely.  
 JNDI creates a connection pool. Connection pool is an environment on the server where JNDI and Database encapsulated to for Type4 connectivity. 
 **JDBC:**
 A Java API that enables Java programs to execute SQL statements. 
This allows Java programs to interact with any SQL-compliant database. 
 JDBC is similar to ODBC, but is designed specifically for Java programs, whereas ODBC is language-independent. 
 JDBC was developed by Sun Microsystems.  **JNDI is faster and efficient.**

 
 Not totally clear on the question.  
 JNDI isn't a type of database connection. You can use JNDI to look up a DataSource, which is a factory for connections. The DataSource is part of the JDBC API though, so JNDI works with JDBC as opposed to being alternatives here. 
 Are you talking about using JDBC against a database for directory information, vs. using JNDI against an LDAP repo? 
 
 The real speed benefit comes from being able to reuse database connections. 
 Hence, you need to use an approach which provides database connection pooling, and then use the appropriate technology to get to the pool.  Depending on implementation this can be either JDBC (if the driver supports it itself) or JNDI or something completely different. 
 If your application runs inside a web container, it is common to use JNDI to allow the pool to be configured and managed in the web container instead of inside your application. 
 
 As mentioned in previous answers, using Datasource is the same as using JDBC in terms of technology. 
 Nevertheless, using a Datasource is usually the preffered way because that way you have the server managing your DB connection pools. 
 
 Whether connection pooling is used does not affect application code. It does not require any code changes to the application because the application performs a lookup on a JNDI name of a previously registered data source. If the data source specifies a connection pooling implementation during JNDI registration (as described in section  Creating a Data Source Using the DataDirect Connection Pool Manager ), the client application benefits from faster connections through connection pooling. 
 
 The question is meaningless. Faster at what? There is nothing to compare. JDBC is a general-purpose interface to relational databases. JNDI is a general-purpose interface to naming systems. The strong probability is that the efficiency of either depends 99% on the target system being communicated with. In any case relational databases and naming systems fulfil completely different needs that are largely non-comparable. Usually JNDI is used to obtain a connection, then JDBC is used to operate with that connection. 
 