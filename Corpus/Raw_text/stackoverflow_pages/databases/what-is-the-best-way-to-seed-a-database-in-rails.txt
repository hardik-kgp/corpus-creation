*** what-is-the-best-way-to-seed-a-database-in-rails ***

 I have a rake task that populates some initial data in my rails app.  For example, countries, states, mobile carriers, etc. 
 The way I have it set up now, is I have a bunch of create statements in files in /db/fixtures and a rake task that processes them.  For example, one model I have is themes.  I have a theme.rb file in /db/fixtures that looks like this: 
 
 The idea here is that I want to install some stock themes for users to start with.  I have a problem with this method. 
 Setting the ID does not work.  This means that if I decide to add a theme, let's call it 'Red', then I would simply like to add the theme statement to this fixture file and call the rake task to reseed the database.  If I do that, because themes belong to other objects and their id's change upon this re-initialization, all links are broken.  
 My question is first of all, is this a good way to handle seeding a database?  In a previous post, this was recommended to me.  
 If so, how can I hard code the IDs, and are there any downsides to that? 
 If not, what is the best way to seed the database? 
 I will truly appreciate long and thought out answers that incorporate best practices. 
 
 Updating since these answers are slightly outdated (although some still apply).   
 Simple feature added in rails 2.3.4, db/seeds.rb 
 Provides a new rake task 
 
 Good for populating common static records like states, countries, etc... 
 http://railscasts.com/episodes/179-seed-data 
 *Note that you can use fixtures if you had already created them to also populate with the db:seed task by putting the following in your seeds.rb file (from the railscast episode): 
 
 For Rails 3.x use 'ActiveRecord::Fixtures' instead of 'Fixtures' constant 
 
 
 Usually there are 2 types of seed data required.  
 
 **Basic data**
 upon which the core of your application may rely. I call this the common seeds.  
 **Environmental data**
, for example to develop the app it is useful to have a bunch of data in a known state that us can use for working on the app locally (the Factory Girl answer above covers this kind of data). 
 
 In my experience I was always coming across the need for these two types of data. So I put together  a small gem that extends Rails' seeds  and lets you add multiple common seed files under db/seeds/ and any environmental seed data under db/seeds/ENV for example db/seeds/development. 
 I have found this approach is enough to give my seed data some structure and gives me the power to setup my development or staging environment in a known state just by running: 
 
 Fixtures are fragile and flakey to maintain, as are regular sql dumps. 
 
 factory_bot  sounds like it will do what you are trying to achieve. You can define all the common attributes in the default definition and then override them at creation time. You can also pass an id to the factory: 
 
 When used with faker it can populate a database really quickly with associations without having to mess about with Fixtures (yuck). 
 I have code like this in a rake task.  
 
 
 Using   file or   is great, but these are respectively great for fixed data structures and testing. 
 The   gem might give you more control and modularity to your seeds. It inserts rake tasks and you can also define dependencies between your seeds. Your rake task list will have these additions (e.g.): 
 
 
 Rails has a built in way to seed data as explained  here . 
 Another way would be to use a gem for more advanced or easy seeding such as:  seedbank . 
 The main advantage of this gem and the reason I use it is that it has advanced capabilities such as  data loading dependencies and per environment seed data. 
 Adding an up to date answer as this answer was first on google. 
 
 Add it in database migrations, that way everyone gets it as they update. Handle all of your logic in the ruby/rails code, so you never have to mess with explicit ID settings. 
 
 The best way is to use fixtures.   
 Note: Keep in mind that fixtures do direct inserts and don't use your model so if you have callbacks that populate data you will need to find a workaround. 
 