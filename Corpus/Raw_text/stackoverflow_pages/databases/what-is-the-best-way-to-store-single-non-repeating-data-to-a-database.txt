*** what-is-the-best-way-to-store-single-non-repeating-data-to-a-database ***

 What is best practice for storing data in a database which ever only requires a single entry. An example would be configuration data which relates to the entire application/website. Is it common to create a table for this which has only a single entry? 
 I'm asking under the context of a MongoDB database though I think the question is also valid for SQL databases. 
 
 An example of an auxiliary table commonly found in databases would be called   and may hold such values of pi, the idea begin that all applications using the database are required to use the same scale and precision. In standard SQL, to ensure they is at most one row e.g. ( from Joe Celko ): 
 
 Because mySQL doesn't support   constraint then a trigger is required to achieve the same. 
 
 A table would be fine, no reason why not to use it just because it will have only one row. 
 I just had the weirdest idea (I wouldn't implement it but for some reason I thought of that). You can create a hard-coded view like this: 
 
 and do    :) 
 but again, no reason why not to use a table just because it will have only one row 
 
 If you are using a SQL DB, you will probably have columns like key name, and value and each attribute will be stored as a row.
In MongoDB, you can store all related configuration as a single JSON document 
 
 For MongoDB databases, I usually just make a new "table", but, for SQL databases, that entails a lot more (especially when others are also working on the same database; SQL isn't as malleable), so, you might want to be a bit more careful with it. 
 
 I use a config table with a name (config_name) and a value (config_value). I even add a help field so that users can see what the name/value pair is intended for, or where it is used.  
 
 Then following php code recovers the value for a key, or returns an empty string. Assumes $db is an open database connection. All entries are forced to lower case. 
 
 All mysql/php in this instance, but the general principle remains.   
 
 I would just create table for configurations, as rainecc told, and use cache then to take that all table to memory :) and use it from there (cache). It will be the best. 
 