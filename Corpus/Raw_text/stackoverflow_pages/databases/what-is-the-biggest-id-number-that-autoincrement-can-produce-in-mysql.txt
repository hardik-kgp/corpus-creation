*** what-is-the-biggest-id-number-that-autoincrement-can-produce-in-mysql ***

 I have an database that is rapidly filled with data we talk about 10-20k rows per day. 
 What is a limit of an ID with and autoincrement option? If ID is created as INTEGER then I can do max value of 2,147,483,647 for unsigned values? 
 But what when autoincrement goes above this? Does it all collapses? What would be solution then? 
 I am sure that a lot of people have big databases, and I would like to hear them. 
 Thank you. 
 
 If you are worried about it growing out of bounds too quickly, I would set the PK as an UNSIGNED BIGINT. That gives you a max value of 18446744073709551615, which should be sufficient. 
 
 
 MySQL reference . 
 If you have mysql table with column ID (INT unsigned), and the table has 4,294,967,295 records, then you try to insert 1 more record, the ID of the new record will be automatically changed and set to the max which is "4,294,967,295", so you get a MySQL error message  , you will have duplicated IDs if the column is set as Primary Key. 
 **2 Possible Solutions:**

 
 **Easy Approach**
: Extend the limits, by setting the ID to  **BIGINT unsigned**
, just like what  **Dan Armstrong**
 said. Although this doesn't mean it's unbreakable! and performance might be affected when the table gets really large. 
 **Harder Approach**
:  Use partitioning,  which is a little more complicated approach, but gives better performance, and truly no database limit (Your only limit is the size of your physical harddisk.). Twitter (and similar huge websites) use this approach for their millions of tweets (records) per day! 
 
 