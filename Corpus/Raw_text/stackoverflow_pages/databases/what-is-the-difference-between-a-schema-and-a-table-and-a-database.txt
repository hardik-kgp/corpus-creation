*** what-is-the-difference-between-a-schema-and-a-table-and-a-database ***

 This is probably a n00blike (or worse) question. But I've always viewed a schema as a table definition in a database. This is wrong or not entirely correct. I don't remember much from my database courses.  
 
 schema  **:**
 database  **:**
 table  **::**
 floor plan  **:**
 house  **:**
 room 
 
 A  relation schema  is the logical definition of a table - it defines what the name of the table is, and what the name and type of each column is. It's like a plan or a blueprint. A  database schema  is the collection of relation schemas for a whole database. 
 A  table  is a structure with a bunch of rows (aka "tuples"), each of which has the attributes defined by the schema. Tables might also have indexes on them to aid in looking up values on certain columns. 
 A  database  is, formally, any collection of data. In this context, the database would be a collection of tables. A  DBMS  (Database Management System) is the software (like MySQL, SQL Server, Oracle, etc) that manages and runs a database. 
 
 In a nutshell, a schema is the definition for the entire database, so it includes tables, views, stored procedures, indexes, primary and foreign keys, etc. 
 
 This particular posting has been shown to relate to Oracle only and the definition of Schema changes when in the context of another DB. 
 Probably the kinda thing to just google up but FYI terms do seem to vary in their definitions which is the most annoying thing :) 
 In Oracle a database is a database. In your head think of this as the data files and the redo logs and the actual physical presence on the disk of the database itself (i.e. not the instance) 
 A Schema is effectively a user. More specifically it's a set of tables/procs/indexes etc owned by a user.  Another user has a different schema (tables he/she owns) however user can also see any schemas they have select priviliedges on. So a database can consist of hundreds of schemas, and each schema hundreds of tables.  You can have tables with the same name in different schemas, which are in the same database. 
 A Table is a table, a set of rows and columns containing data and is contained in schemas. 
 Definitions may be different in SQL Server for instance. I'm not aware of this. 
 
 Schema behaves seem like a parent object as seen in OOP world. so it's not a database itself. maybe  this link  is useful. 
 But, In MySQL, the two are equivalent.  The keyword DATABASE or DATABASES
can be replaced with SCHEMA or SCHEMAS wherever it appears. Examples: 
 
 CREATE DATABASE <=> CREATE SCHEMA  
 SHOW DATABASES <=> SHOW SCHEMAS 
 
 Documentation of MySQL 
 SCHEMA & DATABASE terms are something DBMS dependent. 
 A  **Table**
 is a set of data elements (values) that is organized using a model of vertical columns (which are identified by their name) and horizontal rows. A database contains one or more(usually)  **Tables**
 . And you store your data in these tables. The tables may be related with one another( See here ). 
 
 More on schemas: 
 In SQL 2005 a schema is a way to group objects.  It is a container you can put objects into.  People can own this object.  You can grant rights on the schema.   
 In 2000 a schema was equivalent to a user.  Now it has broken free and is quite useful. You could throw all your user procs in a certain schema and your admin procs in another.  Grant EXECUTE to the appropriate user/role and you're through with granting EXECUTE on specific procedures.  Nice.  
 The dot notation would go like this: 
 Server.Database.Schema.Object 
 or 
 myserver01.Adventureworks.Accounting.Beans 
 
 A   is a collection of database objects which includes logical structures too.
It has the name of the user who owns it.
A   can have any number of Schema's.
One table from a database can appear in two different schemas of same name.
A user can view any schema for which they have been assigned select privilege. 
 
 As MusiGenesis put so nicely, in most databases: 
 
 schema : database : table :: floor plan : house : room 
 
 But, in Oracle it may be easier to think of: 
 schema : database : table :: owner : house : room 
 
 In oracle Schema is one user under one database,For example scott is one schema in database orcl.
      In one database we may have many schema's like scott 
 
 Contrary to some of the above answers, here is my understanding based on experience with each of them: 
 
 MySQL:  
 SQL Server:  
 Oracle:  
 
 Please correct me on whether tablespace is optional or not with Oracle, it's been a long time since I remember using them. 
 
 Schemas contains Databases. 
 Databases are part of a Schema. 
 So, schemas > databases. 
 Schemas contains views, stored procedure(s), database(s), trigger(s) etc. 
 
 A schema is not a plan for the entire database. It is a plan/container for a subset of objects (ex.tables) inside a a database.    This goes to say that you can have multiple objects(ex. tables) inside one database which don't neccessarily fall under the same functional category. So you can group them under various schemas and give them different user access permissions.     That said, I am unsure whether you can have one table under multiple schemas. The Management Studio UI gives a dropdown to assign a schema to a table, and hence making it possible to choose only one schema. I guess if you do it with TSQL, it might create 2 (or multiple) different objects with different object Ids. 
 
 A database  **schema**
 is a way to logically group objects such as tables, views, stored procedures etc. Think of a schema as a container of objects.
And tables are collections of rows and columns.
combination of all tables makes a db. 
 
 A database contains one or more named schemas, which in turn contain tables. Schemas also contain other kinds of named objects, including data types, functions, and operators. The same object name can be used in different schemas without conflict; for example, both schema1 and myschema can contain tables named mytable. Unlike databases, schemas are not rigidly separated: a user can access objects in any of the schemas in the database he is connected to, if he has privileges to do so. 
 There are several reasons why one might want to use schemas: 
 To allow many users to use one database without interfering with each other. 
 To organize database objects into logical groups to make them more manageable. 
 Third-party applications can be put into separate schemas so they do not collide with the names of other objects. 
 Schemas are analogous to directories at the operating system level, except that schemas cannot be nested. 
 Official documentation can be referred
 https://www.postgresql.org/docs/9.1/ddl-schemas.html 
 