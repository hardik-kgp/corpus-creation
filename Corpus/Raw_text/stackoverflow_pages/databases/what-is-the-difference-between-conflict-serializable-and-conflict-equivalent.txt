*** what-is-the-difference-between-conflict-serializable-and-conflict-equivalent ***

 In database theory, what is the difference between "conflict serializable" and "conflict equivalent"?  
 My textbook has a section on conflict serializable but glosses over conflict equivalence. These are probably both concepts I am familiar with, but I am not familiar with the terminology, so I am looking for an explanation. 
 
 Just two terms to describe one thing in different ways. 
 **Conflict equivalent**
: you need to say Schedule A is conflict equivalent to Schedule B. it must involve two schedules 
 **Conflict serializable**
: Still use Schedule A and B. we can say Schedule A is conflict serializable. Schedule B is conflict serializable.   
 We didn't say Schedule A/B is conflict equivalent 
 We didn't say Schedule A is conflict serializable to Schedule B 
 
 Conflict in DBMS can be defined as two or more different transactions accessing the same variable and atleast one of them is a write operation. 
 For example: 
 
 In this case there's no conflict because both transactions are performing just read operations. 
 But in the following case: 
 
 there's a conflict. 
 Lets say we have a schedule  , and we can reorder the instructions in them. and create 2 more schedules   and  . 
 **Conflict equivalent**
: Refers to the schedules   and   where they maintain the ordering of the conflicting instructions in both of the schedules. For example, if   has to read    before   writes   in  , then it should be the same in   also. (Ordering should be maintained only for the conflicting operations). 
 **Conflict Serializability**
:   is said to be conflict serializable if it is conflict equivalent to a serial schedule (i.e., where the transactions are executed one after the other). 
 
 From  Wikipedia . 
 **Conflict-equivalence**

 The schedules   and   are said to be conflict-equivalent if the following conditions are satisfied: 
 
 Both schedules   and   involve the same set of transactions (including  ordering of actions  within each transaction). 
 The order of each pair of conflicting actions in   and   are the same. 
 
 **Conflict-serializable**

 A schedule is said to be conflict-serializable when the schedule is  conflict-equivalent to one or more serial schedules . 
 Another definition for conflict-serializability is that a schedule is conflict-serializable if and only if its precedence graph/serializability graph, when only committed transactions are considered, is acyclic (if the graph is defined to include also uncommitted transactions, then cycles involving uncommitted transactions may occur without conflict serializability violation). 
 
 If a schedule S can be transformed into a schedule S´ by a series of swaps of non-conflicting instructions, we say that S and S´ are conflict equivalent. 
 We say that a schedule S is conflict serializable if it is conflict equivalent to a serial schedule. 
 
 **Conflict Equivalent Schedules:**
 if a Schedule S can be transformed into a schedule S' by a series of swaps of non conflicting instructions, we say that schedule S & S' are conflict equivalent. 
 **Conflict Serializable Schedule:**
 Schedule S is conflict serializable if it is conflict equivalent to a serial schedule. 
 
 Conflict serializable means conflict equuivalent to any serial schedule. 
 
 Definitions have already been explained perfectly, but I feel this will be very useful to some.  
 I've developed a  small console program  (on github) which can test any schedule for conflict serializability and will also draw a precedence graph.  
 
 If there is at least one conflict equivalent schedule for considered transaction schedule, it is conflict serializable.  
 