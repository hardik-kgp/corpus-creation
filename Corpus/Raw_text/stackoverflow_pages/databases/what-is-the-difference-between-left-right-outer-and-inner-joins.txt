*** what-is-the-difference-between-left-right-outer-and-inner-joins ***

 I am wondering how to differentiate all these different joins ... 
 
 **Simple Example**
: Lets say you have a   table, and a   table. In SQL, the first table you specify in a join,  , is the  **LEFT**
 table, and the second one,  , is the  **RIGHT**
 table. 
 Each student can be assigned to a locker, so there is a   column in the   table. More than one student could potentially be in a single locker, but especially at the beginning of the school year, you may have some incoming students without lockers and some lockers that have no students assigned. 
 For the sake of this example, lets say you have  **100 students**
, 70 of which have lockers. You have a total of  **50 lockers**
, 40 of which have at least 1 student and 10 lockers have no student. 
 **INNER JOIN**
 is equivalent to " show me all students with lockers ". 
Any students without lockers, or any lockers without students are missing. 
 **Returns 70 rows**

 **LEFT OUTER JOIN**
 would be " show me all students, with their corresponding locker if they have one ".  
This might be a general student list, or could be used to identify students with no locker.  **Returns 100 rows**

 **RIGHT OUTER JOIN**
 would be " show me all lockers, and the students assigned to them if there are any ".  
This could be used to identify lockers that have no students assigned, or lockers that have too many students.  **Returns 80 rows**
 (list of 70 students in the 40 lockers, plus the 10 lockers with no student) 
 **FULL OUTER JOIN**
 would be silly and probably not much use.  
Something like " show me all students and all lockers, and match them up where you can "  **Returns 110 rows**
 (all 100 students, including those without lockers. Plus the 10 lockers with no student) 
 **CROSS JOIN**
 is also fairly silly in this scenario.  It doesn't use the linked   field in the students table, so you basically end up with a big giant list of every possible student-to-locker pairing, whether or not it actually exists. 
 **Returns 5000 rows**
 (100 students x 50 lockers). Could be useful (with filtering) as a starting point to match up the new students with the empty lockers. 
 
 There are three basic types of join: 
 
  join compares two tables and only returns results where a match exists.  Records from the 1st table are duplicated when they match multiple results in the 2nd.  INNER joins tend to make result sets smaller, but because records can be duplicated this isn't guaranteed. 
  join compares two tables and return every possible combination of rows from both tables.  You can get a lot of results from this kind of join that might not even be meaningful, so use with caution. 
  join compares two tables and returns data when a match is available or NULL values otherwise.  Like with INNER join, this will duplicate rows in the one table when it matches multiple records in the other table.  OUTER joins tend to make result sets larger, because they won't by themselves remove any records from the set.  You must also qualify an OUTER join to determine when and where to add the NULL values:

 
  means keep all records from the 1st table no matter what and insert NULL values when the 2nd table doesn't match.   
  means the opposite: keep all records from the 2nd table no matter what and insert NULL values whent he 1st table doesn't match.   
  means keep all records from both tables, and insert a NULL value in either table if there is no match. 
 
 
 Often you see will the   keyword omitted from the syntax.  Instead it will just be "LEFT JOIN", "RIGHT JOIN", or "FULL JOIN".  This is done because INNER and CROSS joins have no meaning with respect to LEFT, RIGHT, or FULL, and so these are sufficient by themselves to unambiguously indicate an OUTER join. 
 Here is an example of when you might want to use each type: 
 
 : You want to return all records from the "Invoice" table, along with their corresponding "InvoiceLines".  This assumes that every valid Invoice will have at least one line. 
 : You want to return all "InvoiceLines" records for a particular Invoice, along with their corresponding "InventoryItem" records.  This is a business that also sells service, such that not all InvoiceLines will have an IventoryItem. 
 :  You have a digits table with 10 rows, each holding values '0' through '9'.  You want to create a date range table to join against, so that you end up with one record for each day within the range.  By CROSS-joining this table with itself repeatedly you can create as many consecutive integers as you need (given you start at 10 to 1st power, each join adds 1 to the exponent).  Then use the DATEADD() function to add those values to your base date for the range. 
 
 
 There are only 4 kinds: 
 
 **Inner join**
: The most common type.  An output row is produced for every pair of input rows that match on the join conditions. 
 **Left outer join**
: The same as an inner join, except that if there is any row for which no matching row in the table on the right can be found, a row is output containing the values from the table on the left, with   for each value in the table on the right.  This means that every row from the table on the left will appear at least once in the output.   
 **Right outer join**
: The same as a left outer join, except with the roles of the tables reversed. 
 **Full outer join**
: A combination of left and right outer joins.  Every row from both tables will appear in the output at least once. 
 
 A "cross join" or "cartesian join" is simply an inner join for which no join conditions have been specified, resulting in all pairs of rows being output. 
 Thanks to RusselH for pointing out FULL joins, which I'd omitted. 
 
 SQL JOINS difference: 
 Very simple to remember : 
  only show records common to both tables.  
  all the content of the both tables are merged together either they are matched or not. 
  is same as   - (Select records from the first (left-most) table with matching right table records.) 
  is same as   - (Select records from the second (right-most) table with matching left table records.) 
 
 
 Check out  Join (SQL) on Wikipedia 
 
 Inner join - Given two tables an inner join returns all rows that exist in both tables 
 left / right (outer) join - Given two tables returns all rows that exist in either the left or right table of your join, plus the rows from the other side will be returned when the join clause is a match or null will be returned for those columns 
 Full Outer - Given two tables returns all rows, and will return nulls when either the left or right column is not there 
 Cross Joins - Cartesian join and can be dangerous if not used carefully 
 
 
  and   are types of  s.  
  is the default -- rows from both tables must match the join condition. 
 
 Making it more visible might help. One example: 
 Table 1: 
 ID_STUDENT      STUDENT_NAME     
 
 Table 2: 
 ID_STUDENT        LOCKER 
 
 What I get when I do: 
 
 
 **Inner join**
: Only show rows, when has it data from both of the tables. 
 **Outer join**
:  (left/right) : Show the all result from the  left / right  table with the paired row( s ), if it  exists  or not. 
 
 At first you have to understand what does join do? We connect multiple table and get specific result from the joined tables. The simplest way to do this is  **cross join**
.  
 Lets say tableA has two column A and B. And tableB has three column C and D.
If we apply cross join it will produce lot of meaningless row. Then we have to match using primary key to get actual data. 
 **Left:**
 it will return all records from left table and matched record from right table. 
 **Right:**
 it will return opposite to Left join. It will return all records from right table and matched records from left table. 
 **Inner:**
 This is like intersection. It will return only matched records from both table. 
 **Outer:**
 And this is like union. It will return all available record from both table. 
 Some times we don't need all of the data, and also we should need only common data or records. we can easily get it using these join methods. Remember left and right join also are outer join.  
 You can get all records just using cross join. But it could be expensive when it comes to millions of records. So make it simple by using left, right, inner or outer join. 
 thanks 
 