*** what-is-the-difference-between-wait-die-and-wound-wait ***

 What is the difference between wait-die and wound-wait? 
 I found that both the techniques of deadlock prevention are doing the same thing (Rollback of Older process). 
 Can anybody explain me what is the difference between them with suitable example ? 
 
 **Wait-die scheme**
: It is a non-preemptive technique for deadlock prevention. When transaction Ti requests a data item currently held by Tj, Ti is allowed to wait only if it has a timestamp smaller than that of Tj (That is Ti is older than Tj), otherwise Ti is rolled back (dies). 
 In this scheme, if a transaction requests to lock a resource (data item), which is already held with a conflicting lock by another transaction, then one of the two possibilities may occur − 
 **(1)**
 If TS(Ti) < TS(Tj) − that is Ti, which is requesting a conflicting lock, is older than Tj − then Ti is allowed to wait until the data-item is available. 
 **(2)**
 If TS(Ti) > TS(tj) − that is Ti is younger than Tj − then Ti dies. Ti is restarted later with a random delay but with the same timestamp. 
 This scheme allows the older transaction to wait but kills the younger one. 
 **For example:**

 Suppose that transaction T22, T23, T24 have time-stamps 5, 10 and 15 respectively. If T22requests a data item held by T23 then T22 will wait. If T24 requests a data item held by T23, then T24 will be rolled back. 
 **Wound-wait scheme:**
 It is a preemptive technique for deadlock prevention. It is a counterpart to the wait-die scheme. When Transaction Ti requests a data item currently held by Tj, Ti is allowed to wait only if it has a timestamp larger than that of Tj, otherwise Tj is rolled back (Tj is wounded by Ti). 
 In this scheme, if a transaction requests to lock a resource (data item), which is already held with conflicting lock by some another transaction, one of the two possibilities may occur − 
 **(1)**
 If TS(Ti) < TS(Tj), then Ti forces Tj to be rolled back − that is Ti wounds Tj. Tj is restarted later with a random delay but with the same timestamp. 
 **(2)**
 If TS(Ti) > TS(Tj), then Ti is forced to wait until the resource is available. 
 This scheme, allows the younger transaction to wait; but when an older transaction requests an item held by a younger one, the older transaction forces the younger one to abort and release the item. 
 **For example:**

 Suppose that Transactions T22, T23, T24  have time-stamps 5, 10 and 15 respectively . If T22requests a data item held by T23, then data item will be preempted from T23 and T23 will be rolled back. If T24 requests a data item held by T23, then T24 will wait.  
 In both the cases, the transaction that enters the system at a later stage is aborted. 
 
 Parth has given a detailed answer. Here I summarize it in a different way. 
 Assume that Ti requests a lock held by Tj. The following table summarizes the actions taken for wait-die and wound-wait scheme: 
 
 Both schemes prefer older transactions with an older timestamp. 
 
 **wait-die**
: When an  **older**
 transaction tries to lock a DB element that has been locked by a  **younger**
 transaction, it  **waits**
. When a  **younger**
 transaction tries to lock a DB element that has been locked by an  **older**
 transaction, it  **dies**
. 
 **wound-wait**
: When an  **older**
 transaction tries to lock a DB element that has been locked by a  **younger**
 transaction, it  **wounds**
 the younger transaction. When a  **younger**
 transaction tries to lock a DB element that has been locked by an  **older**
 transaction, it  **waits**
. 
 
 References: 
 
 Preventing deadlock with timestamps: the wait-die method 
 Preventing deadlock with timestamps: wound-wait scheme 
 Comparing the wait-die and wound-wait schemes 
 
 
 In both cases Old is always champ i.e. will survive. Difference is from younger transaction point of view. 
 If younger one is requesting a resource held by a old trans. , in wait/die he can wait to give respect as Old trans.If younger one is requesting a resource held by a old trans., in wound/die he will be force to rollback as Old trans. 
 In both scheme old is never in loss.  
 Refer: https://www.tutorialspoint.com/dbms/dbms_deadlock.htm 
 