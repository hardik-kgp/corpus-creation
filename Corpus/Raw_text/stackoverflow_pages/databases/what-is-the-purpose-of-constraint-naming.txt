*** what-is-the-purpose-of-constraint-naming ***

 What is the purpose of naming your constraints (unique, primary key, foreign key)? 
 Say I have a table which is using natural keys as a primary key: 
 
 What benefits (if any) does naming my PK bring? 
 Eg.
Replace: 
 
 With: 
 
 Sorry if my data model is not the best, I'm new to this! 
 
 Here's some pretty basic reasons. 
 (1) If a query (insert, update, delete) violates a constraint, SQL will generate an error message that will contain the constraint name. If the constraint name is clear and descriptive, the error message will be easier to understand; if the constraint name is a random guid-based name, it's a lot less clear. Particulary for end-users, who will (ok, might) phone you up and ask what " " means. 
 (2) If a constraint needs to be modified in the future (yes, it happens), it's very hard to do if you don't know what it's named. (ALTER TABLE MyTable drop CONSTRAINT um...) And if you create more than one instance of the database "from scratch" and use system-generated default names, no two names will ever match. 
 (3) If the person who gets to support your code (aka a DBA) has to waste a lot of pointless time dealing with case (1) or case (2) at 3am on Sunday, they're quite probably in a position to identify where the code came from and be able to react accordingly. 
 
 To identify the constraint in the future (e.g. you want to drop it in the future), it should have a unique name. If you don't specify a name for it, the database engine will probably assign a weird name (e.g. containing random stuff to ensure uniqueness) for you. 
 
 It keeps the DBAs happy, so they let your schema definition into the production database. 
 
 When your code randomly violates some foreign key constraint, it sure as hell saves time on debugging to figure out which one it was. Naming them greatly simplifies debugging your inserts and your updates. 
 
 It helps someone to know quickly what constraints are doing without having to look at the actual constraint, as the name gives you all the info you need. 
 So, I know if it is a primary key, unique key or default key, as well as the table and possibly columns involved. 
 
 By correctly naming all constraints, You can quickly associate a particular constraint with our data model. This gives us two real advantages: 
 
 We can quickly identify and fix any errors. 
 We can reliably modify or drop constraints. 
 
 
 By naming the constraints you can differentiate violations of them. This is not only useful for admins and developers, but your program can also use the constraint names. This is much more robust than trying to parse the error message. By using constraint names your program can react differently depending on which constraint was violated. 
 Constraint names are also very useful to display appropriate error messages in the userâ€™s language mentioning which field caused a constraint violation instead of just forwarding a cryptic error message from the database server to the user. 
 See my answer on  how to do this with PostgreSQL and Java . 
 