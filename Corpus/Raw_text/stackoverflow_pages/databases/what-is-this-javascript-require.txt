*** what-is-this-javascript-require ***

 I'm trying to get Javascript to read/write to a PostgreSQL database. I found this  project  on github. I was able to get the following sample code to run in node. 
 
 Next I tried to make it run on a webpage, but nothing seemed to happen. I checked on the Javascript console and it just says "require not defined." 
 So what is this "require?" Why does it work in node but not in a webpage? 
 Also, before I got it to work in node, I had to do  . What's that about? I looked in the directory and didn't find a file pg. Where did it put it, and how does Javascript find it? 
 
 
 So what is this "require?"  
 
  is not part of the standard JavaScript API. But in Node.js, it's a built-in function with a special purpose:  to load modules . 
 Modules are a way to split an application into separate files instead of having all of your application in one file. This concept is also present in other languages with minor differences in syntax and behavior, like C's  , Python's  , and so on. 
 One big difference between Node.js modules and browser JavaScript is how one script's code is accessed from another script's code. 
 
 In browser JavaScript, scripts are added via the   element. When they execute, they all have direct access to the global scope, a "shared space" among all scripts. Any script can freely define/modify/remove/call anything on the global scope. 
 In Node.js, each module has its own scope. A module cannot directly access things defined in another module unless it chooses to expose them. To expose things from a module, they must be assigned to   or  . For a module to access another module's   or  ,  it must use  . 
 
 In your code,   loads the   module, a PostgreSQL client for Node.js. This allows your code to access functionality of the PostgreSQL client's APIs via the   variable. 
 
 Why does it work in node but not in a webpage? 
 
 ,   and   are APIs of a module system that is specific to Node.js. Browsers do not implement this module system.  
 
 Also, before I got it to work in node, I had to do  . What's that about? 
 
 NPM  is a package repository service that hosts published JavaScript modules.   is a command that lets you download packages from their repository. 
 
 Where did it put it, and how does Javascript find it? 
 
 The npm cli puts all the downloaded modules in a   directory  where you ran  . Node.js has very detailed documentation on  how modules find other modules  which includes finding a   directory. 
 
 Alright, so let's first start with making the distinction between Javascript  in a web browser , and Javascript  on a server  (CommonJS and Node). 
 Javascript is a language traditionally confined to a web browser with a limited global context defined mostly by what came to be known as the Document Object Model (DOM) level 0 (the Netscape Navigator Javascript API). 
 Server-side Javascript eliminates that restriction and allows Javascript to call into various pieces of native code (like the Postgres library) and open sockets. 
 Now   is a special function call defined as part of the CommonJS spec. In node, it resolves libraries and modules in the Node search path, now usually defined as   in the same directory (or the directory of the invoked javascript file) or the system-wide search path. 
 To try to answer the rest of your question, we need to use a proxy between the code running in the the browser and the database server. 
 Since we are discussing Node and you are already familiar with how to run a query from there, it would make sense to use Node as that proxy. 
 As a simple example, we're going to make a URL that returns a few facts about a Beatle, given a name, as JSON. 
 
 
 It's used to load modules. Let's use a simple example. 
 In file  : 
 
 We can use this via  , like: 
 
 The   method is used to load and cache JavaScript modules. So, if you want to load a local, relative JavaScript module into a Node.js application, you can simply use the   method. 
 Example: 
 
 
 I noticed that whilst the other answers explained what require is and that it is used to load modules in Node they did not give a full reply on how to load node modules when working in the Browser.  
 It is quite simple to do. Install your module using npm as you describe, and the module itself will be located in a folder usually called node_modules.  
 Now the simplest way to load it into your app is to reference it from your html with a script tag which points at this directory. i.e if your node_modules directory is in the root of the project at the same level as your index.html you would write this in your index.html: 
 
 That whole script will now be loaded into the page - so you can access its variables and methods directly. 
 There are other approaches which are more widely used in larger projects, such as a module loader like  require.js . Of the two, I have not used Require myself, but I think it is considered by many people the way to go. 
 
 You know how when you are running JavaScript in the browser, you have access to variables like "window" or Math?  You do not have to declare these variables, they have been written for you to use whenever you want. 
 Well, when you are running a file in the Node.js environment, there is a variable that you can use.   It is called "module"  It is an object.  It has a property called "exports."  And it works like this: 
 In a file that we will name example.js, you write: 
 example.js 
 
 Now, you want this string "some code" in another file. 
 We will name the other file  otherFile.js 
 In this file, you write: 
 otherFile.js 
 
 That  require() statement goes to the file that you put inside of it, finds whatever data is stored on the module.exports property.    The let str = ... part of your code means that whatever that require statement returns is stored to the str variable. 
 So, in this example, the end-result is that in otherFile.js you now have this: 
 let string = "some code"; 
 
 or -    
 
 let str = ('./example.js').module.exports 
 Note:   
 the file-name that is written inside of the require statement:  If it is a local file, it should be the file-path to example.js.  Also, the .js extension is added by default, so I didn't have to write it. 
 You do something similar when requiring node.js libraries, such as Express.  In the express.js file, there is an object named 'module', with a property named 'exports'.   
 So, it looks something like along these lines, under the hood (I am somewhat of a beginner so some of these details might not be exact, but it's to show the concept: 
 express.js 
 
 If you are requiring a module, it looks like this:
const moduleName = require("module-name"); 
 If you are requiring a local file, it looks like this:
const localFile = require("./path/to/local-file"); 
 (notice the ./ at the beginning of the file name) 
 
 Also note that by default, the export is an object .. eg module.exports = {}  So, you can write module.exports.myfunction = () => {} before assigning a value to the module.exports.   But you can also replace the object by writing module.exports = "I am not an object anymore." 
 
 Two flavours of module.exports / require: 
 (see  here ) 
 Flavour 1 
export file (misc.js): 
 
 other file: 
 
 Flavour 2 
export file (user.js): 
 
 other file: 
 
 