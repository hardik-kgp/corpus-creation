*** whats-the-attraction-of-schemaless-database-systems ***

 I've been hearing a lot of talk about schema-less (often distributed) database systems like MongoDB, CouchDB, SimpleDB, etc... 
 While I can understand they might be valuable for some purposes, in most of my applications I'm trying to persist objects that have a specific number of fields of a specific type, and I just automatically think in the relational model.  I'm always thinking in terms of rows with unique integer ids, null/not null fields, SQL datatypes, and select queries to find sets. 
 While I'm attracted to the distributed nature and easy JSON/RESTful interfaces of these new systems, I don't understand how loosely typed key/value hashes will help me with my development.  Why would a loose typed, schema-less system be good for keeping clean data sets?  How can I for example, find all items with dates between x and y when they might not have dates?  Is there any concept of a join? 
 I understand many systems have their own differences and strengths, but I'm wondering at the difference in paradigm.  I suppose this is an open-ended question, but perhaps the community's answers and ways they have personally seen the advantages of these systems will help enlighten me and others about when I would want to make use of these (admittedly more hip) systems instead of the traditional RDBMS. 
 
 I'll just call out one or two common reasons  (I'm sure people will be writing essay answers) 
 
 With highly distributed systems, any given data set may be spread across multiple servers. When that happens, the relational constraints which the DB engine can guarantee are greatly reduced.  Some  of your referential integrity will need to be handled in application code. When doing so, you will quickly discover several pain points: 
 
 your logic is spread across multiple layers (app and db) 
 your logic is spread across multiple languages (SQL and your app language of choice) 
 
 The outcome is that the logic is less encapsulated, less portable, and MUCH more expensive to change. Many devs find themselves writing more logic in app code and less in the database. Taken to the extreme,  the database schema becomes irrelevant.  
 Schema management—especially on systems where downtime is not an option—is difficult. reducing the schema complexity reduces that difficulty. 
 ACID doesn't work very well for distributed systems ( BASE ,  CAP , etc). The SQL language (and the entire relational model to a certain extent) is optimized for a transactional ACID world. So some of the SQL language features and best practices are useless while others are actually harmful. Some developers feel uncomfortable about  "against the grain" and prefer to drop SQL entirely in favor of a language which was designed from the ground up for their requirements. 
 Cost: most RDBMS systems aren't free. The leaders in scaling (Oracle, Sybase, SQL Server) are all commercial products. When dealing with large ("web scale") systems,  database licensing costs can meet or exceed the hardware costs! The costs are high enough to change the normal build/buy considerations drastically towards building a custom solution on top of an OSS offering (all the significant NOSQL offerings are OSS) 
 
 
 Schemaless is great for two reasons: 
 
 Brain optimising intuitiveness of document storage 
 Resolves  Sparse-Matrix  and  Entity-Attribute-Value  storage problems. 
 
 I've used both SQL and No-SQL for production applications in Ruby on Rails. I'm not a database expert and I have to confess to googling ACID and similar terms as they're not familiar to me. 
 "Ah ha! Another know-nothing trend follower jumping on the latest bandwagon" you may say. But, actually, I'm really pleased with my decision to use MongoDB on our most recent 2 year old app and here's why... 
 The flip-side of brain-optimising intuitiveness was my experience with the Magento e-commerce system. I don't want to bash it because it served me well at the time but it really hit the processor hard trying to calculate the attributes for each product. The underlying reason was the Entity-Attribute-Value store of product data. Cache or be damned was the solution. 
 The major advantage to me is the optimisation in the only place that really matters -  **your own brain**
. So many technologies are critiqued on their efficiency in memory, processors, hardware and yet having a DB that's extremely intuitive to understand brings its own merits. We've found it quick to add features to our code because the database simply looks a lot like the real world we're modelling. When I've asked e-commerce clients to present me with their product list they will naturally tend to use Excel (think table store). The first columns are easy: 
 
 Product Name 
 Price 
 Product Type ( 
 
 Then it gets harder and covered in notes, colour coding and links to other tables (yep.. relationships) 
 
 Colour (Only some products)  
 Size (X Large, Large, Small) - only for products 8'9'10, golf clubs use a different scale 
 Colour 2. The cat collars have two colour choices. 
 Wattage 
 Fixing type (Male, Female) 
 
 So it ends in a terrible mess of Excel tables that make no sense to me and not much sense to the people who work with the products day in and day out. We throw our arms in the air and decide to go through the catalogue and then it hits me! Wouldn't it be great if you could store the data as it appears in the catalogue!? Just collections of records on each product that just lists the attribute of that product. You can then pick out common attributes to index for retrieval at a later date. Of course, that's a document store. 
 In summary, document stores are great when you have a sparse matrix problem or objects that mutate their attributes over time. Having lived in a No-SQL world for 2 years, I can't think of a real world application that doesn't have those features because the world itself looks like a document store. 
 
 The primary concern should be what do you need to do with your data. If you have a huge data set and are finding a traditional RDBMS to be a bottleneck then you may want to experiment with a schemaless or a a  NOSQL  solution.  
 Most environments that I am aware of using  NOSQL  solutions also use an RDBMS solution in some form or fashion. RDBMS based solutions are the norm where data integrity is extremely important and you need ACID transactions. However if your system is not highly transaction based but you need to scale up or scale out real quick, a  NOSQL  solution may be desirable. 
 
 I've only played with MongoDB but one thing that really interested me was how you could nest documents. In MongoDB a document is basically like a record. This is really nice because traditionally, in a RDBMS, if you needed to pull a "Person" record and get the associated address, employer info, etc. you'd frequently have to go to multiple tables, join them up, make multiple database calls. In a NoSQL solution like MongoDB, you can just nest the associated records (documents) and not have to mess with foreign keys, joining, multiple database calls. Everything associated with that one record is pulled. 
 This is especially handy when dealing with objects. You can in many cases just store an object as a series of nested documents. 
 
 NoSQL databases are not schemaless; the schema is embedded in the data. They are properly called semistructured. In some KV data stores, however, the schema may even be embedded in code. The advantage of the semi-structured approach is two fold: flexibility in which columns are part of a row (one row could have 5 columns and another have 5 different columns, and flexibility in the characteristics of the columns (e.g., variable lengths) 
 
 Normally the attraction is that of snake oil - most people favourising them have no clue about the relational theorem and speak SQL on a level making professionals puke. No idea what ACID conditions are, ehy they are important etc. 
 Not saying they do not have valid uses.... just saying that mostly the attraction is people not knowing what they should know and making stupid conclusions. Again, not everyone is like that, but most developers favouring them are - not good in their understanding what a database system acutally is responsible for. 
 