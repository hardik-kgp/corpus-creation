*** whats-the-best-database-structure-to-keep-multilingual-data ***

 
 
 
 
 
 This question already has answers here :
                            
                         
 
 
 Closed  7 years ago . 
 
 
 
 **Possible Duplicate:**

 Schema for a multilanguage database   
 
 Here's an example: 
 
 **The problem:**
 every new language will need modify the table structure. 
 Here's another example: 
 
 **The problem:**
 every new language will need the creation of new tables and the "price" field is duplicated in every table. 
 Here's another example: 
 
 **The problem:**
 hard? 
 
 Your third example is actually the way the problem is usually solved. Hard, but doable. 
 Remove the reference to product from the translation table and put a reference to translation where you need it (the other way around). 
 
 As an alternative (not especially a good one) you can have one single field and keep all translations there merged together (as XML, for example). 
 
 
 Similar to method 3: 
 
 So for each table, make another table (in my case with "_t" suffix) which holds the translated fields.
When you  , simply  . 
 Not that hard, and keeps you free from headaches. 
 
 In order to reduce the number of JOIN's, you could keep separate the translated and non translated in 2 separate tables : 
 
 
 At my $DAYJOB we use gettext for I18N. I wrote a plugin to  xgettext.pl  that extracts all English text from the database tables and add them to the master messages.pot. 
 It works very well - translators deal with only one file when doing translation - the po file. There's no fiddling with database entries when doing translations. 
 
 [languages]
    id (int PK)
    code (varchar) 
 
 I actually use this method, but in my case, it's not in a product point of view, for the various pages in my CMS, this work's quite well. 
 If you have a lot of products it might be a headache to update a single one in 5 or 6 languages... but it's a question of working the layout. 
 
 What about fourth solution? 
 
 *Translation_of* is  **FK**
 of it self. When You add default language *translation_of* is set to Null. But when you add second language *translation_of* takes primary produkt language id. 
 
 In that case we get all translations for product with id is 1. 
 
 We get only product in Polish translation. Without second table and JOINS. 
 
 Have many to many relationship. 
 You have your data table, languages table and a data_language table. 
 In the data_language table you have 
 
 id, data_id, language_id 
 
 I think that might work best for your.  
 
 We use this concept for our webiste (600k views per day) and (maybe surprisingly) it works. Sure along with caching and query optimalization. 
 
 