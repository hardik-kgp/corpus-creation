*** whats-the-best-way-of-converting-a-mysql-database-to-a-sqlite-one ***

 I currently have a relatively small (4 or 5 tables, 5000 rows) MySQL database that I would like to convert to an sqlite database.  As I'd potentially have to do this more than once, I'd be grateful if anyone could recommend any useful tools, or at least any easily-replicated method. 
 (I have complete admin access to the database/machines involved.) 
 
 I've had to do similar things a few times.  The easiest approach for me has been to write a script that pulls from one data source and produces an output for the new data source.  Just do a   query for each table in your current database, and then dump all the rows into an   query for your new database.  You can either dump this into a file or pipe it straight into the database frontend. 
 It's not pretty, but honestly, pretty hardly seems to be a major concern for things like this.  This technique is quick to write, and it works.  Those are my primary criteria for things like this. 
 You might want to check out  this thread , too.  It looks like a couple of people have already put together basically what you need.  I didn't look that far into it, though, so no guarantees. 
 
 As long as a MySQL dump file doesn't exceed the  SQLite  query language, you should be able to migrate fairly easily: 
 
 I haven't tried this myself. 
 UPDATE: 
 Looks like you'll need to do a couple edits of the MySQL dump.  I'd use sed, or  Google for it. 
 Just the comment syntax, auto_increment & TYPE= declaration, and escape characters differ. 
 
 Here is a list of converters: 
 
 http://www.sqlite.org/cvstrac/wiki?p=ConverterTools 
 
 
An alternative method that would work nicely but is rarely mentioned is: use a ORM class that abstracts the specific database differences away for you.  e.g. you get these in PHP ( RedBean ), Python (Django's ORM layer,  Storm ,  SqlAlchemy ), Ruby on Rails (  ActiveRecord ), Cocoa ( CoreData )

 i.e. you could do this: 
 
 Load data from source database using the ORM class. 
 Store data in memory or serialize to disk. 
 Store data into source database using the ORM class. 
 
 
 If it's just a few tables you could probably script this in your preferred scripting langauge and have it all done by the time it'd take to read all the replies or track down a suitable tool. I would any way. :) 
 