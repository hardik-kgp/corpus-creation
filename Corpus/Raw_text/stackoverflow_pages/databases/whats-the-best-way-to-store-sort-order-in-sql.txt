*** whats-the-best-way-to-store-sort-order-in-sql ***

 The guys at the top want sort order to be customizable in our app. So I have a table that effectively defines the data type. What is the best way to store our sort order. If I just created a new column called 'Order' or something, every time I updated the order of one row I imagine I would have to update the order of every row to ensure posterity. Is there a better way to do it? 
 
 None of the answers so far have touched on the real problem with custom sort order and that is what happens when two different people want the same records sorted differently.  
 If you need a custom sort order, you need a related table to store it in, not an additional field.  The table would have the userid, the recordId of the data and the sort order for the record. That way Joe Smith can have one order and Sally Jones another for the same data. Now you have the problem of new records being added to the data set. Do you put them at the beginning of the sort order or the end or do you require the person to set an order for them before they can be added to the set. This is in actuality a very complex problem that is generally not worth the amount of time it takes to implement because almost no one ever uses that system once it's in place (I mean do I really want to go through a hundred records and mark the individual order of each one?). Now it gets complicated in terms of saving the order of all the records (which will of course require changes the next time the query is run  since there will be new records.) This is very painful process of limited untility. 
 I did this once in a proposal writing application because we needed to be able to sort the parts and tasks on the proposal in the order we thought would be most impressive to the customer. Even then, we had to institute a default order, so that they only need to move around the two or three things they really wanted to show up first instead of ordering 10,000 individual parts. 
 A better choice if you can get them to buy off on it, is to allow them to sort the data by columns (desc or asc). Usually the user interface can be designed so that if you click on a column header, it will resort the data by that column. This is relatively straightforward to do and meets most needs for custom ordering.  
 You really need to discuss this requirement with management and get details of how they want it to work beyond, I want custom ordering. This is often one of those things people think they want, but don't really use.  
 
 The basic algorithm might be like one described below. Initially the sort field varies from item to item by 1000 (you may consider another interval).
The items in the table are in ordered state just for the sake of simplicity.
Btw, I've create  Yii2 component  to manage this stuff. And this one if you need a sortable tree  sortable tree .  
 
 Lets imagine we are going to add an item (id 4) after id 1: 
 
 So to calculate sort value for id 4 we took the sort value of the item before, which is 1000
and the item after - 2000 and took the mean. If you get a float, just round it to the nearest integer.
If you need to insert an item at the beginning of the list, then you take a mean of (1000 and 0, which is 500). 
 Now, if we need to insert an item (id 5) after id 1, we do the same: 
 
 Later on, you might face to this scenario: 
 
 So if you need to insert an item (id 16) between 1 and 15, first you should increment sort field by 1000 of all items followed by 1: 
 
 Now you can insert the item (id 16): 
 
 
 Use an int field. When you update the sort order of one row, you only have to update the field on the row you're updating and any rows between the row's old and new positions. This means that swapping two rows only involves touching those two rows. Also, for rows you're updating that aren't your "active" row, you only need to increment or decrement the field; the queries are easy to write. 
 
 You can use a float instead, and as long as you have enough precision you can always just set ordinal column for the moved record to the midpoint between the records on either side. 
 
 Generally the application would add the approriate ORDER BY clause to the query. If the result sets to be sorted are relatively small you can have keys on the selection criteria.   Even with large results it is often better to sort the selected data than retrieve in order by index. 
 If the requirement is to have orders like B A Z T Q M K, then you will need a column to place the relative order into. The appropriate value would need to be determined each time you add a row.  However, this works well for code tables which are relatively static. 
 