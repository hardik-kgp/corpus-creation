*** when-not-to-use-cassandra ***

 There has been a lot of talk related to  Cassandra  lately. 
 Twitter, Digg, Facebook, etc all use it. 
 When does it make sense to: 
 
 use Cassandra, 
 not use Cassandra, and 
 use a RDMS instead of Cassandra. 
 
 
 There is nothing like a silver bullet, everything is built to solve specific problems and has its own pros and cons. It is up to you, what problem statement you have and what is the best fitting solution for that problem. 
 I will try to answer your questions one by one in the same order you asked them. Since Cassandra is based on the NoSQL family of databases, it's important you understand why use a NoSQL database before I answer your questions. 
 **Why use NoSQL**

 In the case of RDBMS, making a choice is quite easy because all the databases like MySQL, Oracle, MS SQL, PostgreSQL in this category offer almost the same kind of solutions oriented toward ACID properties. When it comes to NoSQL, the decision becomes difficult because every NoSQL database offers different solutions and you have to understand which one is best suited for your app/system requirements.  For example, MongoDB is fit for use cases where your system demands a schema-less document store. HBase might be fit for search engines, analyzing log data, or any place where scanning huge, two-dimensional join-less tables is a requirement. Redis is built to provide In-Memory search for varieties of data structures like trees, queues, linked lists, etc and can be a good fit for making real-time leaderboards, pub-sub kind of system. Similarly there are other databases in this category (Including Cassandra) which are fit for different problem statements. Now lets move to the original questions, and answer them one by one. 
 **When to use Cassandra**

 Being a part of the NoSQL family, Cassandra offers a solution for problems where one of your requirements is to have a very heavy write system and you want to have a quite responsive reporting system on top of that stored data. Consider the use case of Web analytics where log data is stored for each request and you want to built an analytical platform around it  to count hits per hour, by browser, by IP, etc in a real time manner. You can refer to  this  blog post to understand more about the use cases where Cassandra fits in.  
 **When to Use a RDMS instead of Cassandra**

 Cassandra is based on a NoSQL database and does not provide ACID and relational data properties. If you have a strong requirement for ACID properties (for example Financial data), Cassandra would not be a fit in that case. Obviously, you can make a workaround for that, however you will end up writing lots of application code to simulate ACID properties and will lose on time to market badly. Also managing that kind of system with Cassandra would be complex and tedious for you. 
 **When not to use Cassandra**

 I don't think it needs to be answered if the above explanation makes sense. 
 
 When evaluating distributed data systems, you have to consider the CAP theorem - you can pick two of the following: consistency, availability, and partition tolerance. 
 Cassandra is an available, partition-tolerant system that supports eventual consistency. For more information see this blog post I wrote:  Visual Guide to NoSQL Systems .  
 
 Cassandra is the answer to a particular problem: What do you do when you have so much data that it does not fit on one server ? How do you store all your data on many servers and do not break your bank account and not make your developers insane ? Facebook gets 4 Terabyte of new compressed data EVERY DAY. And this number most likely will grow more than twice within a year. 
 If you do not have this much data or if you have millions to pay for Enterprise Oracle/DB2 cluster installation and specialists required to set it up and maintain it, then you are fine with SQL database. 
 However Facebook no longer uses cassandra and now uses MySQL almost exclusively moving the partitioning up in the application stack for faster performance and better control.  
 
 The general idea of NoSQL is that you should use whichever data store is the best fit for your application. If you have a table of financial data, use SQL. If you have objects that would require complex/slow queries to map to a relational schema, use an object or key/value store.  
 Of course just about any real world problem you run into is somewhere in between those two extremes and neither solution will be perfect. You need to consider the capabilities of each store and the consequences of using one over the other, which will be very much specific to the problem you are trying to solve. 
 
 Besides the answers given above about when to use and when not to use Cassandra, if you do decide to use Cassandra you may want to consider not using Cassandra itself, but one of the its many cousins out there. 
 Some answers above already pointed to various "NoSQL" systems which share many properties with Cassandra, with some small or large differences, and may be better than Cassandra itself for your specific needs. 
 Additionally, recently (several years after this question was originally asked), a Cassandra clone called Scylla (see  https://en.wikipedia.org/wiki/Scylla_(database) ) was released. Scylla is an open-source re-implementation of Cassandra in C++, which claims to have significantly higher throughput and lower latencies than the original Java Cassandra, while being mostly compatible with it (in features, APIs, and file formats). So if you're already considering Cassandra, you may want to consider Scylla as well. 
 
 Talking with someone in the midst of deploying Cassandra, it doesn't handle the many-to-many well. They are doing a hack job to do their initial testing. I spoke with a Cassandra consultant about this and he said he wouldn't recommend it if you had this problem set.  
 
 You should ask your self the following questions: 
 
 **(Volume, Velocity)**
 Will you be writing and reading TONS of information , so much information that no one computer could handle the writes.  
 **(Global)**
 Will you need this writing and reading capability around the world so that the writes in one part of the world are accessible in another part of the world?  
 **(Reliability)**
 Do you need this database to be up and running all the time and never go down regardless of which Cloud, which country, whether it's VM , Container, or Bare metal?  
 **(Scale-ability)**
 Do you need this database to be able to continue to grow easily and scale linearly  
 **(Consistency)**
 Do you need TUNABLE consistency where some writes can happen asynchronously where as others need to be certified?  
 **(Skill)**
 Are you willing to do what it takes to learn this technology and the data modeling that goes with creating a globally distributed database that can be fast for everyone, everywhere? 
 
 If for any of these questions you thought "maybe" or "no," you should use something else. If you had "hell yes" as an answer to all of them, then you should use Cassandra.  
 Use RDBMS when you can do everything on one box. It's probably easier than most and anyone can work with it.  
 
 **Heavy single query vs. gazillion light query**
 load is another point to consider, in addition to other answers here. It's inherently harder to automatically optimize a single query in a NoSql-style DB. I've used MongoDB and ran into performance issues when trying to calculate a complex query. I haven't used Cassandra but I expect it to have the same issue.  
 On the other hand, if your load is expected to be that of very many small queries, and you want to be able to easily scale out, you could take advantage of eventual consistency that is offered by most NoSql DBs. Note that eventual consistency is not really a feature of a non-relational data model, but it is much easier to implement and to set up in a NoSql-based system. 
 For a single, very heavy query, any modern RDBMS engine can do a decent job parallelizing parts of the query and take advantage of as much CPU and memory you throw at it (on a single machine). NoSql databases don't have enough information about the structure of the data to be able to make assumptions that will allow truly intelligent parallelization of a big query. They do allow you to easily scale out more servers (or cores) but once the query hits a complexity level you are basically forced to split it apart manually to parts that the NoSql engine knows how to deal with intelligently. 
 In my experience with MongoDB, in the end because of the complexity of the query there wasn't much Mongo could do to optimize it and run parts of it on multiple data.  Mongo parallelizes multiple queries  but isn't so good at optimizing a single one. 
 
 Let's read some real world cases: 
 http://planetcassandra.org/apache-cassandra-use-cases/ 
 In this article:  http://planetcassandra.org/blog/post/agentis-energy-stores-over-15-billion-records-of-time-series-usage-data-in-apache-cassandra 
 They elaborated the reason why they didn't choose MySql is because db synchronization is too slow.  
 (Also due to 2-phrase commit, FK, PK) 
 
 Cassandra is based on Amazon Dynamo paper 
 Features: 
 Stability 
 High availability 
 Backup performs well  
 Read and Write is better than HBase, (BigTable clone in java).  
 wiki  http://en.wikipedia.org/wiki/Apache_Cassandra 
 **Their Conclusion**
 is: 
 
 As of 2018, 
 I would recommend using ScyllaDB to replace classic cassandra, if you need back support. 
 Postgres kv plugin is also quick than cassandra. How ever won't have multi-instance scalability. 
 
 another situation that makes the choice easier is when you want to use aggregate function like sum, min, max, etcetera and complex queries (like in the financial system mentioned above) then a relational database is probably more convenient then a nosql database since both are not possible on a nosql databse unless you use really a lot of Inverted indexes. When you do use nosql you would have to do the aggregate functions in code or store them seperatly in its own columnfamily but this makes it all quite complex and reduces the performance that you gained by using nosql. 
 
 I will focus here on some of the important aspects which can help you to decide if you really need Cassandra. The list is not exhaustive, just some of the points which I have at top of my mind- 
 
 Don't consider Cassandra as the first choice when you have a strict requirement on the relationship (across your dataset).  
 Cassandra by default is AP system (of CAP). But, it supports tunable consistency which means it can be configured to support as CP as well.  **So don't ignore it just because you read somewhere that it's AP and you are looking for CP systems.**
 Cassandra is more accurately termed “tuneably consistent,” which means it allows you to easily decide the level of consistency you require, in balance with the level of availability. 
 Don't use Cassandra if your scale is not much or if you can deal with a non-distributed DB.  
 Think harder if your team thinks that all your problems will be solved if you use distributed DBs like Cassandra. To start with these DBs is very simple as it comes with many defaults but optimizing and mastering it for solving a specific problem would require a good (if not a lot) amount of engineering effort.  
 Cassandra is column-oriented but at the same time each row also has a unique key. So, it might be helpful to think of it as an indexed, row-oriented store.  **You can even use it as a document store.**
  
 Cassandra doesn't force you to define the fields beforehand. So, if you are in a startup mode or your features are evolving (as in agile) - Cassandra embraces it. So better,  **first think about queries and then think about data to answer them.**
  
 Cassandra is optimized for really high throughput on writes.  **If your use case is read-heavy (like cache) then Cassandra might not be an ideal choice.**
  
 
 
 If you need a fully consistent database with SQL semantics, Cassandra is NOT the solution for you. Cassandra supports key-value lookups. It does not support SQL queries. Data in Cassandra is "eventually consistent". Concurrent lookups of data may be inconsistent, but eventually lookups are consistent.  
 If you need strict semantics and need support for SQL queries, choose another solution such as MySQL, PostGres, or combine use of Cassandra with Solr.  
 
 Cassandra is a good choice if: 
 
 You don't require the ACID properties from your DB. 
 There would be massive and huge number of writes on the DB. 
 There is a requirement to integrate with Big Data, Hadoop, Hive and Spark. 
 There is a need of real time data analytics and report generations. 
 There is a requirement of impressive fault tolerant mechanism. 
 There is a requirement of homogenous system.  
 There is a requirement of lots of customisation for tuning. 
 
 
 Mongodb has very powerful aggregate functions and an expressive aggregate framework. It has many of the features developers are accustomed to using from the relational database world. It's document data/storage structure allows for more complex data models than Cassandra, for example. 
 All this comes with trade-offs of course. So when you select your database (NoSQL, NewSQL, or RDBMS) look at what problem you are trying to solve and at your scalability needs. No one database does it all. 
 
 According to DataStax, Cassandra is not the best use case when there is a need for 
 1- High end hardware devices.
2- ACID compliant with no roll back (bank transaction) 
 
 
 It does not support complete transaction management across the
tables.  
 Secondary Index not supported. 
 Have to rely on Elastic search /Solr for Secondary index and the custom sync component has to be written. 
 Not  ACID compliant system. 
 Query support is    limited. 
 
 
 Apache cassandra is a distributed database for managing large amounts of structured data across many commodity servers, while providing highly available service and no single point of failure. 
 The archichecture is purely based on the cap theorem, which is availability , and partition tolerance, and interestingly eventual consistently. 
 
 Dont Use it, if your not storing volumes of data across racks of clusters,
  Dont use if you are not storing Time series data,
  Dont Use if you not patitioning your servers, 
  Dont use if you require strong Consistency. 
 
 