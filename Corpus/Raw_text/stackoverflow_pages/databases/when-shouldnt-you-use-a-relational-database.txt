*** when-shouldnt-you-use-a-relational-database ***

 
 
 
 
 
 Closed . This question is  opinion-based . It is not currently accepting answers.
                            
                         
 
 
 
 
 
 
 
 
 
 
 Want to improve this question?  Update the question so it can be answered with facts and citations by  editing this post .
                         
 Closed  6 years ago . 
 
 
 
 Apart from the google/bigtable scenario, when shouldn't you use a relational database? Why not, and what should you use? (did you learn 'the hard way'?)  
 
 In my experience, you shouldn't use a relational database when any one of these criteria are true: 
 
 your data is structured as a hierarchy or a graph (network) of arbitrary depth, 
 the typical access pattern emphasizes reading over writing, or 
 there’s no requirement for ad-hoc queries. 
 
 Deep hierarchies and graphs do not translate well to relational tables. Even with the assistance of proprietary extensions like Oracle's  , chasing down trees is a mighty pain using SQL. 
 Relational databases add a lot of overhead for simple read access. Transactional and referential integrity are powerful, but overkill for some applications. So for read-mostly applications, a file metaphor is good enough. 
 Finally, you simply don’t need a relational database with its full-blown query language if there are no unexpected queries anticipated. If there are no suits asking questions like "how many 5%-discounted blue widgets did we sell in on the east coast grouped by salesperson?", and there never will be, then you, sir, can live free of DB. 
 
 The relational database paradigm makes some assumptions about usage of data. 
 
 A relation consists of an unordered set of rows. 
 All rows in a relation have the same set of columns. 
 Each column has a fixed name and data type and semantic meaning on all rows. 
 Rows in a relation are identified by unique values in primary key column(s). 
 etc. 
 
 These assumptions support simplicity and structure, at the cost of some flexibility.  Not all data management tasks fit into this kind of structure.  Entities with complex attributes or variable attributes do not, for instance.  If you need flexibility in areas where a relational database solution doesn't support it, you need to use a different kind of solution. 
 There are other solutions for managing data with different requirements.  Semantic Web technology, for example, allows each entity to define its own attributes and to be self-describing, by treating metadata as attributes just like data.  This is more flexible than the structure imposed by a relational database, but that flexibility comes with a cost of its own. 
 Overall, you should use the right tool for each job. 
 See also my other answer to " The Next-gen databases ." 
 
 There are three main data models (C.J.Date, E.F.Codd) and I am adding a flat file to this: 
 
 flat file(s) (structure varies - from 'stupid' flat text to files conforming to grammars which coupled with clever tools do very clever things, think compilers and what they can do, narrow application in modelling new things) 
 hierarchical  (trees, nested sets - examples: xml and other markup languages, registry, organizational charts, etc; anything can be modelled, but integrity rules are not easy to express and retrieval is hard to optimize automatically, some retrieval is fast and some is very slow ) 
 network  (networks, graphs - examples: navigational databases, hyperlinks, semantic web, again almost anything can be modelled but automatic optimizing of retrieval is a problem) 
 relational  (first order predicate logic - example: relational databases, automatic optimization of retrieval) 
 
 Both hierarchical and network can be represented in relational and relational can be expressed in the other two. 
 The reason that relational is considered 'better' is the declarative nature and standardization on not only the data retrieval language but also on the data definition language, including the strong declarative data integrity, backed up with  stable , scalable, multi-user management system. 
 Benefits come at a cost, which most projects find to be a good ratio for systems (multi application) that store long term data in a from that will be usable in foreseeable future. 
 If you are not building a system, but a single application, perhaps for a single user, and you are fairly certain that you will not want multiple applications using your data, nor multiple users, any time soon then you'll probably find faster approaches. 
 Also if you don't know what kind of data you want to store and how to model it then relational model strengths are wasted on it.  
 Or if you simply don't care about integrity of your data that much (which can be fine). 
 All data structures are optimized for a certain kind of use, only relational if properly modelled tries to represent the 'reality' in semantically unbiased way. People who had bad experience with relational databases usually don't realize that their experience would have been much worse with other types of data models. Horrible implementations are possible, and especially with relational databases, where it is relatively easy to build complex models, you could end up with quite a monster on your hands. Still I always feel better when I try to imagine the same monster in xml. 
 One example of how good relational model is, IMO, is ratio of complexity vs shortness of the questions that you will find that involve SQL. 
 
 I suggest you visit the  High Scalability blog , which discusses this topic almost on a daily basis and has many articles about projects that chose distributed hashes, etc. over RDMBS. 
 The quick (but very incomplete answer) is that not all data translates well to tables in efficient ways. For example, if your data is essentially one big dictionary, there are probably much faster alternatives that plain old RDBMS. Having said that, it mostly a matter of performance, and if performance isn't a huge concern in a project, and stability, consistency and reliability, for example, are, then I don't see much point in delving into these technologies when RDBMS is a much more mature and well developed scheme, with support in all languages and platforms and a huge set of solutions to choose from. 
 
 Fifteen years ago I was working on a credit risk system (basically a big tree walking system). We were using Sybase on HPUX & solaris and performnce was killing us. We hired in consultants direct from Sybase who said it couldn't be done. Then we switched to an OO database (Object store in this case) and got a about a 100x performance increase (and the code was about 100x easier to write too) 
 But such situations are quite rare - a relational database is a good first choice. 
 
 When you schema varies a lot you will have a hard time with relational databases. This is where XML databases or key-value pair databases work best. or you could use IBM DB2 and have both relational data and XML data managed by a single database engine. 
 
 
About 7-8 years ago I worked on a web site that grew in popularity beyond our initial expectations and it got us in trouble performance-wise. Since we were all relatively inexperienced in web based projects it posed a significant strain on us about what to do beyond usual database separation onto separate server, load balancing etc.
 
 One day I've thought of something pretty simple. Since site was based on users, their profiles were stored in a database table the usual way someone would do it - user id, lots of info variables and stuff like that - which would show up as a users profile page which other users could look up. I've flushed all that data into a simple html file, already prepared as a users profile page and got a significant boost - basically a cache. I even made a system that when user edited their profile info, it would parse original html file, put it up for edit, and then flush out html back to the file system - got even more boost.
 
I made something simillar with messages users sent to each other. Basically wherever I could make a system bypass a database altogether, avoiding a INSERT or UPDATE, I got a significant boost. It may sound like a common sense, but it was an enlightening moment. It is not an avoidance of relational setup per se, but it is an avoidance of the database altogether - KISS. 
 
 