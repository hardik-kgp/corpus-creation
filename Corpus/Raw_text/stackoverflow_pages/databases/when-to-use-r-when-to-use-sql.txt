*** when-to-use-r-when-to-use-sql ***

 I have a moderate sized database with many joins and lookup tables. 
 I am more familiar with R than with SQL, and I am using MySQL.  
 **My Question:**

 At what point is it beneficial to stop increasing the complexity of an SQL statement in favor of the data subsetting functionality in R (e.g.,  ,  ,  ,  , etc.)in R. 
 On one hand, SQL's join is easier than selecting all contents of each table and using the R   function to join them. Also, doing the conditional selects in SQL would reduce the amount of data that has to be imported to R; but the speed difference is not significant.  
 On the other hand, a big join with a complex where clause becomes less easy to understand than the R syntax. 
 Below I have some  untested  code for illustrative purposes: I am asking this question at before having working code, and the answer to my question doesn't require working code (although this is always appreciated) - the "most elegant approach", "fewest lines", or "amazing implementation of X" are always appreciated, but what I am particularly interested in is the "most sensible / practical / canonical / based on first principles" rationale.  
 I am interested in the general answer of which steps should use a SQL   clause and which steps would be easier to accomplish using R. 
 **Illustration:**

 **Database description**

 there are three tables:  ,  , and  . Tables   and   each have a primary key  . They have a many-many relationship that is represented by a lookup table,  , which contains fields   and   that join to   and  , respectively. Both tables have a   field, and a has a   field. 
 **Goal:**

 Here is a minimal example of the join and subsetting that I want to do; 
 (MySQL naming of elements, e.g.   is equivalent to   in R) 
 
 Join tables   and   using  , appending multiple values of   associated with each   as a new column; 
 
 I don't need repeated values of b.time, I only need a value of  : for repeated values of   joined to each  ,   is the value of   closest to but not greater than  
 
 append the value   to the table, for example, in R,  
 for each distinct value in  ,   select which(min(x.dt))) 
 
 
 
 I usually do the data manipulations in SQL 
until the data I want is in a single table, 
and then, I do the rest in R.
Only when there is a performance issue
do I start to move some of the computations to the database.
This is already what you are doing. 
 Computations involving timestamps often 
become unreadable in SQL
(the " analytic functions ", similar to  , 
are supposed to simplify this,
but I think they are not available in MySQL). 
 However, your example can probably be written entirely in SQL as follows (not tested). 
 
 
 Why not  both  SQL and R â€” within R using the  sqldf  package? These   examples  show how you can either use the   function with either R data frames or through a connection to an existing database. That way, you have the flexibility to do either as the idiom sees fit. 
 