*** when-to-use-singleton-in-a-jersey-resource ***

 I have a Jersey resource that access the database. Basically it opens a database connection in the initialization of the resource. Performs queries on the resource's methods. 
 I have observed that when I do not use @Singleton, the database is being open at each request. And we know opening a connection is really expensive right? 
 So my question is, should I specify that the resource be singleton or is it really better to keep it at per request especially when the resource is connecting to the database? 
 My resource code looks like this: 
 
 And I connect to the database using a code similar to this: 
 
 Some comments on best practices for the code will also be helpful. 
 
 Rather than thinking about making the resource a singleton, focus more on managing backend, service type objects like your   class as singletons, which obviously shouldn't be instantiated every request. 
 Making the resource a singleton as well is one way of managing   as a singleton, but it's not the only or necessarily the best way, see  Access external objects in Jersey Resource class  and  How to wire in a collaborator into a Jersey resource?  for ways to inject this into non-singleton resources. 
 Note that your   class would need work before it would function as a singleton, whether injected into a per-request resource or instantiated in a singleton resource. It's not thread safe, and you would open a single connection on startup and reuse it across requests, which won't work, you should use a connection pool to do the heavy lifting of efficiently + safely reusing connections across requests. 
 
 Some comments on best practices for the code will also be helpful. 
 
 You'll get better responses on  http://codereview.stackexchange.com ,
   but:  
 
  is a poor name for a class (just about everything in a web application is a response generator). 
 don't use String as the return type of your service and object, use proper typed objects (eg it sounds like you're returning a   of something). 
 Don't swallow your SQLException, bubble it up to allow Jersey to generate a 5xx series response code in your resource. 
 Use final member variables. 
 Your log object should be static. 
 
 
 You best option is to use a framework like Spring with Jersey which I outlined in a similar  post . The only difference is that instead of injecting a service bean you would inject a pooled DataSource and this can easily be configured using  c3p0 . 
 Example applicationContext.xml, notice the "scope" is set to prototype which is equivalent to a singleton in Spring parlance. 
 
 In your MyResource.java you would simply add the following and Spring would inject it appropriately. 
 
 Then you could change your ResponseGenerator to accept the DataSource and use this to query the database. 
 