*** when-to-use-sql-table-alias ***

 I'm curious to know how people are using table aliases.  The other developers where I work always use table aliases, and always use the alias of a, b, c, etc. 
 Here's an example: 
 
 I disagree with them, and think table aliases should be use more sparingly.   
 I think they should be used when including the same table twice in a query, or when the table name is very long and using a shorter name in the query will make the query easier to read.   
 I also think the alias should be a descriptive name rather than just a letter.  In the above example, if I felt I needed to use 1 letter table alias I would use t for the Trip table and s for the segment table. 
 
 There are two reasons for using table aliases. 
 The first is cosmetic.  The statements are easier to write, and perhaps also easier to read when table aliases are used.   
 The second is more substantive.  If a table appears more than once in the FROM clause, you need table aliases in order to keep them distinct.  Self joins are common in cases where a table contains a foreign key that references the primary key of the same table. 
 Two examples:  an employees table that contains a supervisorID column that references the employeeID of the supervisor. 
 The second is a parts explosion.  Often, this is implemented in a separate table with three columns:  ComponentPartID, AssemblyPartID, and Quantity.  In this case, there won't be any self joins,  but there will often be a three way join between this table and two different references to the table of Parts. 
 It's a good habit to get into.   
 
 I use them to save typing. However, I always use letters similar to the function.  So, in your example, I would type: 
 
 That just makes it easier to read, for me. 
 
 As a general rule  **I always use them**
, as there are usually multiple joins going on in my stored procedures.  It also makes it easier when using code generation tools like CodeSmith to have it generate the alias name automatically for you.   
 I try to stay away from single letters like a & b, as I may have multiple tables that start with the letter a or b.  I go with a longer approach, the concatenation of the referenced foreign key with the alias table, for example CustomerContact ... this would be the alias for the Customer table when joining to a Contact table. 
 The other reason I don't mind  **longer**
 name, is due to most of my stored procedures are being generated via code CodeSmith.  I don't mind hand typing the  **few**
 that I may have to build myself. 
 Using the current example, I would do something like: 
 
 
 Can I add to a debate that is already several years old? 
 There is another reason that no one has mentioned.  The SQL parser in certain databases works better with an alias.  I cannot recall if Oracle changed this in later versions, but when it came to an alias, it looked up the columns in the database and remembered them.  When it came to a table name, even if it was already encountered in the statement, it re-checked the database for the columns.  So using an alias allowed for faster parsing, especially of long SQL statements.  I am sure someone knows if this is still the case, if other databases do this at parse time, and if it changed,  **when**
 it changed. 
 
 I use it always, reasons: 
 
 leaving full tables names in statements makes them hard to read, plus you cannot have a same table twice 
 not using anything is a very bad idea, because later you could add some field to one of the tables that is already present in some other table 
 
 Consider this example: 
 
 Now, imagine a few months later, you decide to add column named 'col1' to tab2. Database will silently allow you to do that, but applications would break when executing the above query because of ambiguity between tab1.col1 and tab2.col1.  
 But, I agree with you on the naming: a, b, c is fine, but  **t**
 and  **s**
 would be much better in your example. And when I have the same table more than once, I would use t1, t2, ... or s1, s2, s3...  
 
 In simple queries I do not use aliases. In queries whit multiple tables I always use them because: 
 
 they make queries more readable (my
aliases are 2 or more capital letters that is a shortcut for the table name and if possible
a relationship to other
tables)  
 they allow faster developing and
rewriting (my table names are long and have prefixes depending on role they pose) 
 
 so instead of for example: 
 
 I write: 
 
 
 I feel that you should use them as often as possible but I do agree that t & s represent the entities better than a & b. 
 This boils down to, like everything else, preferences.  I like that you can depend on your stored procedures following the same conventions when each developer uses the alias in the same manner. 
 Go convince your coworkers to get on the same page as you or this is all worthless.  The alternative is you could have a table Zebra as first table and alias it as a.  That would just be cute. 
 
 i only use them when they are necessary to distinguish which table a field is coming from 
 
 In the example above both tables have an InventoryTypeId field, but the other field names are unique. 
 Always use an abbreviation for the table as the name so that the code makes more sense - ask your other developers if they name their local variables A, B, C, etc! 
 The only exception is in the rare cases where the SQL syntax requires a table alias but it isn't referenced, e.g. 
 
 In the above, SQL syntax requires the table alias for the subselect, but it isn't referenced anywhere so I get lazy and use X or something like that. 
 
 I find it nothing more than a preference.  As mentioned above, aliases save typing, especially with long table/view names. 
 
 Using the full name makes it harder to read, especially for larger queries or the Order/Product/OrderProduct scenari0 
 I'd use t and s. Or o/p/op 
 If you use SCHEMABINDING then columns must be qualified anyway 
 If you add a column to a base table, then the qualification reduces the chance of a duplicate in the query (for example a "Comment" column) 
 Because of this qualification, it makes sense to always use aliases. 
 Using a and b is blind obedience to a bizarre standard. 
 
 One thing I've learned is that especially with complex queries; it is far simpler to troubleshoot six months later if you use the alias as a qualifier for every field reference. Then you aren't trying to remember which table that field came from. 
 We tend to have some ridiculously long table names, so I find it easier to read if the tables are aliased. And of course you must do it if you are using a derived table or a self join, so being in the habit is a good idea. I find most of our developers end up using the same alias for each table in all their sps,so most of the time anyone reading it will immediately know what pug is the alias for or mmh. 
 
 I always use them. I formerly only used them in queries involving just one table but then I realized a) queries involving just one table are rare, and b) queries involving just one table rarely stay that way for long. So I always put them in from the start so that I (or someone else) won't have to retro fit them later. Oh and BTW: I call them "correlation names", as per the SQL-92 Standard :) 
 
 Tables aliases should be four things: 
 
 Short 
 Meaningful 
 Always used 
 Used consistently 
 
 For example if you had tables named service_request, service_provider, user, and affiliate (among many others) a good practice would be to alias those tables as "sr", "sp", "u", and "a", and do so in every query possible.  This is especially convenient if, as is often the case, these aliases coincide with acronyms used by your organization.  So if "SR" and "SP" are the accepted terms for Service Request and Service Provider respectively, the aliases above carry a double payload of intuitively standing in for both the table and the business object it represents. 
 The obvious flaws with this system are first that it can be awkward for table names with lots of "words" e.g. a_long_multi_word_table_name which would alias to almwtn or something, and that it's likely you'll end up with tables named such that they abbreviate the same.  The first flaw can be dealt with however you like, such as by taking the last 3 or 4 letters, or whichever subset you feel is most representative, most unique, or easiest to type.  The second I've found in practice isn't as troublesome as it might seem, perhaps just by luck.  You can also do things like take the second letter of a "word" in the table as well, such as aliasing account_transaction to "atr" instead of "at" to avoid conflicting with account_type. 
 Of course whether you use the above approach or not, aliases should be short because you'll be typing them very very frequently, and they should always be used because once you've written a query against a single table and omitted the alias, it's inevitable that you'll later need to edit in a second table with duplicate column names. 
 
 There are many good ideas in the posts above about when and why to alias table names.  What no one else has mentioned is that it is also beneficial in helping a maintainer understand the scope of tables.  At our company we are not allowed to create views. (Thank the DBA.) So, some of our queries become large, even exceeding the 50,000 character limit of a SQL command in Crystal Reports.  When a query aliases its tables as a, b, c,  and a subquery of that does the same, and multiple subqueries in that one each use the same aliases, it is easy for one to mistake what level of the query is being read. This can even confuse the original developer when enough time has passed.  Using unique aliases within each level of a query makes it easier to read because the scope remains clear. 
 
 Because I always fully qualify my tables, I use aliases to provide a shorter name for the fields being SELECTed when JOINed tables are involved. I think it makes my code easier to follow. 
 If the query deals with only one source - no JOINs - then I don't use an alias. 
 Just a matter of personal preference. 
 
 Always. Make it a habit. 
 