*** where-to-store-database-credentials-in-a-web-app ***

 I'm wondering what techniques you use to store the database credentials for your application.  I'm specifically concerned with java webapps, but I don't think there's any need to limit the questions to that.   
 things to consider: 
Do you use property files,xml configs, other? 
Is it bundled into your application(ie in a jar file) or stored seperately on the file system somewhere? 
Is the password encrypted?  If so, what encryption scheme do you use?     
 
 Since you're leaving the question open to platform, I'll add that database credentials for .NET apps are stored in the web.config file. From version 2.0 and above, there is a specific ConnectionStrings section that allows for easier programmatic access to the connection string. 
 In addition to having IIS automatically block direct requests to the web.config file by default, you can also use an IIS command to encrypt the ConnectionString section of the web.config file. This encryption is machine specific, adding to its strengths, and the .NET runtime will also decrypt the connection string on the fly when you access it, so there is no need for additional coding in your application to work with it. 
 
 With Java, database connection pools should be passed into webapps by the container. This is in the standard declarable in WEB-INF/web.xml as resources. The same applies to mail sessions and other external resources that may vary from installation to installation. Look up JNDI for more information on this) 
 The nice part with this is that the application doesn't care about how to actually connect to anything outside. It will not see any passwords, because the container itself will use them. 
 In tomcat this is configured either from context files (e.g.) in conf/Catalina/localhost/ , conf/server.xml or - preferably only for dev environments, from the webapps META-INF/context.xml. Other environments have their own configuration location or application. 
 The encryption of passwords actually depends on the container. Tomcat stores them in plaintext, but the application itself won't see it. I don't know about the mechanics in other environments. 
 
 On the Microsoft stack, things can be very nice. 
 You create a network user account in Active Directory with almost no permissions. You configure IIS to run your webapp as that user. You grant that user read access to the web folders and files on the disk. You configure SQL Server to grant that user read/write permissions on the tables you want. And in the connection string, you instruct the db client to connect as the user account which the webapp is currently being run as. 
 There is only one actual user account, although it is visible in multiple places. This user account has extremely limited permissions. There is no storing passwords anywhere, even if encrypted. There is no configuration that has to be done in code for this to work (it's all in setting up the permissions). 
 
 Depends on the app server. 
 I usually use JNDI lookups for the data source, so credentials are stored on the app server that handles the connection pool.  No need to put anything other than the JNDI name in configuration that way.   
 Yes, the password is encrypted on WebLogic.   
 On Tomcat things can be dicey.  Connection info is in META-INF/context.xml, which means plain text for the password.  I only do that for development, never in production. 
 
 In Django, the credentials are in your   configuration file.  Since this is not generally kept in your   directory tree, it's very safe. 
 Also, a single Django application may be used (and reused) for many web sites or web servers on the same host, each with it's own distinct settings.  So the   configuration is not bundled with the app, but is part of a single deployment of the app. 
 
 For asp.net: 
 I store global parameters such as the connection string and repository paths in the Registry and then a reference to the registry entry in the web.config. 
 The main reason being that I often find I have to write a stand alone executable to run background tasks and other automated features that require access to the same parameters. Therefore keeping everything that is truly global in one easily accessible place makes for an easier life. 
 
 Which of these are good places to keep your web appâ€™s database credentials?
  In a separate file in your source code
   In a separate file on your web server host
   In your database
   None. The database credentials should never be stored 
 