*** which-is-faster-multiple-delete-statements-or-a-single-delete-statement-using ***

 Just wondering which is faster: 
 
 or 
 
 Any ideas, hints, or references where to read? 
 Thank you all! 
 
 The single delete will be faster for a few reasons: 
 
 Only one plan will need to be
generated 
 Only one transaction will be
involved (if you are using them) 
 If you are running these from code,
then there is less overhead with
ODBC calls and network traffic 
 Any indexes will need to be
refreshed just once, not many times. 
 
 
 A single delete is faster, there is only one plan to create and execute. 
 
 The single statement is faster for reasons already stated. 
 In the example given  
 
 will be even faster, especially if you have a clustered index on X. 
 
 Profile it in your DB with your indexes and your data. I'm inclined to agree with using a single statement, though, I can think of a few quick instances were the 3 statements would be much faster. If it really matters, profile it. 
 
 A single delete is generally faster for the reasons kogus mentioned.  
 But ... keep in mind that if you have to wipe out 50% of a 2 million row table and there is a lot of activity against the table, deleting in small batches or selecting into a new table and swapping that table in may be better approaches.  
 
 The single statement: 
 
 ...would be faster.  I'm not sure what database you're using, but I'd recommend looking into the  execution plan  of your queries.  If you're using MySQL, you can use the EXPLAIN command like: 
 
 Also as you've wrote in the comments if you're looking to dynamically fill you IN() clause you can use a subquery like: 
 
 (or whatever) 
 
 There is a third option that I think you may want to consider.  I think it may be better then your first example, but not as good as your second. 
 If your database supports using  **prepared statements**
 then you could do a prepare on the statement. 
 
 Then simply calling that with value of 1, 2, and 3. 
 Generally my experience has been that you get the best performance when you use a set-based operation like your second example. 
 