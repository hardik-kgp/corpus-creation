*** which-nosql-db-is-best-fitted-for-oltp-financial-systems ***

 We're designing an OLTP financial system. it should be able to support 10.000 transactions per second and have reporting features. 
 So we have come to the idea of using: 
 
 a NoSQL DB as our main storage 
 a MySQL DB (Percona server actually) making some ETLs from the NoSQL DB for store reporting data 
 
 We're considering MongoDB and Riak for the NoSQL job. we have read that Riak scales more smoothly than MongoDB. And we would like to listen your opinion. 
 
 **Which NoSQL DB would you use for a
OLTP financial system?**

 **How has been
your experience scaling MongoDB/Riak?**

 
 
 There is no conceivable circumstance where I would use a NOSQl database for anything to do with finance. You simply don't have the data integrity needed or the internal controls.  Dow Jones uses SQL Server to do its transactions and if they can properly design a high performance, high transaction Relational datbase so can you. You will have to invest in some people who know what they are doing though. 
 
 One has to think about the problem differently.  The notion of transaction consistency stems from the UD (update) in CRUD  (Create, Read, Update, Delete).  noSQL DBs are CRAP (Create, Replicate, Append, Process) oriented, working  by accretion of time-stamped data. With the right domain model, there is no reason that auditability and the equivalent of referential integrity can't be achieved.  
 
 The global-storage based NoSQL databases - Cache from InterSystems and GT.M from FIS - are used extensively in financial services and have been for many years.  Cache in particular is used for both the core database and for OLTP. 
 
 I can answer regarding my experience with scaling Riak. 
 Riak scales smoothly to the extreme. Scaling is as easy as adding nodes to the cluster, which is a very simple operation in itself. You can achieve near linear scalability by simply adding nodes. Our experience with Riak as far as scaling is concerned has been amazing. 
 The flip side is that it is lacking in many respects. Some examples: 
 
 You can't do something like   or   on a production cluster. That would require a work around if you want to do ETL from Riak into MySQL - or how would you know what to (E)xtract?
(One possible work around would be to maintain a bucket with a known key sequence that map to values that contain the keys you inserted into your other buckets). 
 The free version of Riak comes with no management console that lets you know what's going on, and the one that's included in the Enterprise version isn't much of an improvement. 
 You'll need the Enterprise version of you're looking to replicate your data over WAN (e.g. for DR / high availability). That's alright if you don't mind paying, but keep in mind that Basho pricing is very high. 
 
 
 I work with the Starcounter (so Iâ€™m biased), but I think I can safely say that for a system processing financial transactions you have to worry about transaction consistency. Unfortunately, this is what the engines used for Facebook and Twitter had to give up allow their scale-out strategy to offer performance. This is not because engines such as MongoDb or Cassandra are poorly designed; rather, it follows naturally from the CAP theorem (http://en.wikipedia.org/wiki/CAP_theorem). Simply put, changes you make in your database will overwrite other changes if they occur close in time. Ok for status updates and new tweets, but disastrous if you deal with money or other quantities. The amounts will simply end up wrong when many reads and writes are being done in parallel. So for the throughput you need, a memory centric NoSQL database with ACID support is probably the way to go. 
 
 You can use some NoSQL databases (Cassandra, EventStore) as a storage for financial service if you implement your app using event sourcing and concepts from DDD. I recommend you to read this minibook  http://www.oreilly.com/programming/free/reactive-microservices-architecture.html 
 
 OLTP can be achieved using NoSQL with a custom implementation, 
 there are two things, 
1. How are you going to achieve ACID properties that an RDBMS gives.
2. Provide a custom blocking or non blocking concurrency and transaction handling mechanism. 
 To take you closer to solution,
Apache Phoenix,apache trafodion or Splice machine. 
 
 Trafodion has full ACID support over HBase, you should take a look. 
 
 Cassandra can be used for both OLTP and OLAP. Good replication and eventual data consistency gives you the choice in your hand. Need to design the system properly. And after all it's free of cost but not free of developer, give it a try 
 