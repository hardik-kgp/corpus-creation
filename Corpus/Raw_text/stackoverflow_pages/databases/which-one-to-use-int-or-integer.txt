*** which-one-to-use-int-or-integer ***

 I need to create a data transfer object, which I will use for storing the records retrieved from database. In this data transfer object, I need to declare a numeric field. For that which one is better -  **int**
 or  **Integer**

 If I am defining the field as Integer, will there be any performance impact because of 'Integer' type if I am going to retrieve more than 2000 records from DB!? 
 Thanks in advance. 
 
  is a better option, as it can handle  ; for  ,   would become  , silently, if   is used. Otherwise, it might throw some exception, something like, "Unable to set   to a primitive property". 
 Performance is of little concern here. 
 
 if you choose  , you will end-up adding extra handling code; and that wouldn't benefit you much. Your code will not be clean and straight-forward, lot of boiler-plate code, and you wouldn't even gain performance. 
 let me make it clear, for databases, null is not same as zero. Sometimes you end-up entering  , where   was intended. Imagine the case where user submitted a form, and doesn't supply any value for  . You will end up getting   by default. It makes sense, or does that really, when that field is   in the database. 
 
 
 You should really make your decision based on- what you need your object to do, rather than the performance costs. Deciding based on performance should be done, once a speed issue has been identified with a profiler - the root of all evil and all that. 
 Look at some of the features of both and use that for your decision, e.g. 
 
  can be  ,   cannot. So is the   in the  DB  a   field? 
 Do you need access to the   class methods? 
 Are you doing arithmetic? 
 
 Personally, I always opt for the primitive over the wrapper. But that's just a preference thing, rather than based on any technical merit. 
 
 To my mind, the choice between declaring something as int or Integer simply comes down to whether null is a valid value for it or not.  Autoboxing (and autounboxing) will take care of any conversion issues where the number simply must be one type or another.  Performance (as has been pointed out) is also unlikely to be noticable in almost all cases. 
 Besides, int should be the natural choice, and is likely to be the most performant should that be an issue anyway.  If you need to be able to store nulls, then you  **have**
 to use Integer (and also ensure that no null references are auto-unboxed for a method that takes simply ints as this will result in a NullPointerException). 
 
  is theoretically slower than  , however the performance impact should be minimal unless you are crunching numbers. Also JIT optimizations will reduce the performance loss. 
 Use the one that better suits your situation in terms of primitive or reference type. 
 
 int is 10x faster than integer 
 we test this code with jetm performance library 
 
 and the results: 
test:objects 10.184 
test:primitives 1.151 
 
 To give you an idea, 2000 Integer would add about 0.5 ms to you query.  If you have to serialize this data it could add quite a bit more. 
 However, correctness should come first.  There is no point being very fast but wrong.  You have to consider null values and how you handle them. (Unless the column is NOT NULL)  You could use Integer.MIN___VALUE or you could use a  long  field instead of int and use Long.MIN_VALUE for null.  Even though it is larger than int, it would still be many times smaller and more efficient than Integer. 
 
 I guess it depends among other things on what you are using for accessing the database. With plain old JDBC you could do with  s, while an ORM could silently convert them to   anyway. And Integer would allow you to handle  nulls . 
 
  is used by java for most all calculations.    is used in all forms of Collections except for primitive arrays.  
 Using lots of temporary Integers with thrash the garbage collector and use unprofilable CPU in the background that will cause general slowdowns in everything. Too many temporaries being trashed per second will cause the CG to enter emergency "I need memory now" mode that can cause stalls in latency critical applications (ie: real time interactive graphics, physical device controllers or communications) 
 So for me if I have a lot of nested calls that do no math but access a lot of collections such as using keys for maps I use Integer so as to avoid tons of auto boxing when arguments are passed. 
 If the operations are math intensive or used as loop counters or other math oriented operations and not stored in collections (other than primitive arrays) I use the primitive.  The same goes for all the other primitives except String which is a full fledged object. 
 
  can't be cast to the   with using the   or  . 
  can cast to   with   or   and it can handle  . 
 
 If you want to check for a   value then   is best but if you want to compare the integer then int may be better. In the following example I am using integer c= 1000 and d= 1000 and compare it return false but in case of  int they will return true. 
 
 
 One scenario to cover would be validation. 
 Imagine we have the following class: 
 
 If the user doesn't provide a value for   in the request, we will get a nasty  . 
 If   is replaced with  , we can use   and resolve this issue more gracefully. 
 