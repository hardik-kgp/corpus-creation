*** why-do-i-have-to-put-in-front-of-name-in-an-object-initializer ***

 Purely curiosity at this point since the   fixed the problem I was having, but why is   special? 
 I have an EF entity property called  …if I don't put the   in front of  , I don't get any kind of error, but the   property on the object doesn't get assigned. If I put   in the object initializer, it assigns   properly: 
 
 I checked the generated code, and it's just named  : 
 
 So,   isn't listed as a  keyword , so why is it special? 
 Edit 
 Okay, as @sergey suggested, it's definitely a little more complicated than I first thought. Something goofy about Entity Framework specifically. 
 This is manifesting inside a unit testing class, that may be relevant also. I'm unsure what's relevant and what's not now unfortunately, so here's the whole   method, and at the bottom of it you can see that the weirdness happens around  : 
 
 More coming, because now the    isn't  "fixing" it--that is now I'm still seeing null in the test method I was seeing it correct before…something in another   may have been making a difference, perhaps…unsure, still investigating. Still, why is the change around   occurring? 
 Edit 2 
 Uh, okay…somehow the   property on my   property was set to "Identity" in the modeling GUI. No idea how that happened. Changing it to "None" may have eliminated my problem. But…I know I hadn't changed that back when I thought the   symbol had fixed it…something still odd here. 
 Edit 3 
 One way or the other, the bad value for   was the cause of my assignment/saving problem. I'm unsure why I observed success one or more times with that setting, but the original question is no longer the correct question. 
 
 In C# the   is used if you want turn a keyword into an identifier. Since   is no keyword, it has no effect at all. 
 This is purely a C# rule, at the IL level the   won't be present anymore, even if the name of the identifier matches a C# keyword. So it is impossible for Entity Framework to detect the difference. 
 
 "Why do I have to put @ in front of   in an object initializer?"  - You don't, your problem is elsewhere as commenters have already suggested. 
 When performing a   the way that objects in the object graph get changed   is when there is a   associated with a given property mapping.   
 Check to see if a   is associated with your   mapping. 
 