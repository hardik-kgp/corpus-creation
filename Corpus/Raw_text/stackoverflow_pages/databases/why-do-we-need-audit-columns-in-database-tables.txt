*** why-do-we-need-audit-columns-in-database-tables ***

 I have seen many database designs having following audit columns on all the tables... 
 
 Created By 
 Create DateTime 
 Updated By 
 Upldated DateTime 
 
 From one perspective I see tables from the following view... 
 
 Entity Tables:

 
 Good candidate for Audit columns) 
 
 Reference Tables:

 
 Audit columns may or may not required. In some case last update information is not at all required because record is never going to be modified.) 
 
 Reference Data Tables

 
 Like Country Names, Entity State etc... Audit columns may not required because these information is created only during system installation time, and never going to be changed. 
 
 
 I have seen many designers blindly put all audit columns to all tables, is this practice good, if yes what could be the reason... 
 I just want to know because to me it seems illogical. It is difficult for me to figure out why do they design their db this way? I am not saying they are wrong or right, just want to know the WHY? 
 You can also suggest me, if there is an alternative auditing patter or solution available... 
 Thanks and Regards 
 
 Data auditing is a required internal control for many business systems (see Sarbanes Oxley for reasons why). It must be at the database level to assure that all changes are captured especially  **unauthorized**
 ones.  
 Even with lookup tables an unauthorized change could wreak havok in your system and thus it is important to know who made the change and when. When is especially important because it helps the dbas know how far back to grab a backup to restore information accidentally or maliciously changed.  
 We like to think all our employees are trustworthy, but many of the thefts of personal data and the malicious changes to destroy company data come from internal sources (this is why is is dangerous to have many disgruntled employees) as does almost all of the fraud. Yet most programmers seem to think that they only have to protect against outside threats. 
 Of course you are still going to have a few people who can make unauthorized changes, you can't prevent system admins from doing this. But with auditing at least you can limit the potential for data damage (and be especially careful when hiring dbas and allow no one else admin rights on your database servers). 
 
 These columns are for the benefit of the DBA and the database developers.  They just provide a quick mechanism to answer questions like "When did this record last change?"  "who changed it?"     They are not robust enough or fine-grained enough to satisfy compliance with SOX, HIPAA or whatever. 
 It is simply easier to have these columns on every table.  All data can change, so it is useful to know when changes happened, especially if that data isn't supposed to change.  It is possible to automate the process of adding them, by using the data dictionary to generate scripts. 
 It is good practice for these columns to be populated independently of the application, by triggers or some similar mechanism.  These columns are metadata, the application shouldn't really be aware of them. 
 Relying on a full-blown audit trail to provide this functionality is usually not an option.  Audit data which is collected for compliance purposes usually has restricted access, and indeed may be stored in a separate physical location.  
 
 Many applications are developed using some OOP language in which there is generally a class like  **BusinessObject**
 that contains what is perceived generally helpful information like such auditing fields. Not all subclassing entities may need it, but it's there if they do. Since the overhead of the db is small and the chances that the client may request another odd statistic based on the audit fields it's better to have them around than not to have them at all. If something represents a static list of information such as country names I generally wouldn't put it in the db at all - enumerated data type are created just for such purposes. 
 
 I come across this thread by chance, as the same question popped up in my mind this morning. Every answer has got the point and I definitely agree with all of you. It is undeniable to safeguard business data and transaction data. Instead of that, the author feels doubtful about audit fields for some configuration or static data. 
 This kind of configuration data are not updatable by users. Usually they can be placed in other places as well, like properties, config files or even hard-coded constants. Of course putting configuration data in these places might be bad designs or styles, but from the perspective of auditing, do they matter? In addition, if these data are updatable by users, then the only ones who can update it are either dba or hackers. Truly malicious dba or hackers will already know laws before they break the laws and they do find ways circumvent the laws. 
 To me, the question is more related to the environment in your company. Does your company have a culture of keeping track of every little bit of tiny information? Does your company constantly enforce strict discipline, monitoring or auditing? Having these auditing fields for non-user data are simply for their satisfaction, more than any other purposes. 
 