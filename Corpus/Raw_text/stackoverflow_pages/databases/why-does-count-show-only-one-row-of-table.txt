*** why-does-count-show-only-one-row-of-table ***

 I have the following table   in the database  : 
 
 Now If I run the following query:   
 
 I get the following output:   
 
 The output show all the values of  , and the value returned from   in each row. 
 Now if I run the following query:   
 
 I get the following output:   
 
 My question is what is the difference between   and   function which makes   to output the second    Diane  in the first example? 
 
  is an aggregation function which is usually combined with a   clause. 
  is a date function which outputs the current date. 
 Only MySQL (as far as I know of) allows this syntax without using the   clause. Since you didn't provide it,   will count the total amount of rows in the table , and the   column will be selected randomly/optimizer default/by indexes . 
 This should be your query : 
 
 Which tells the optimizer to count total rows, for  **each**
 owner. 
 When no group by clause mentioned - the aggregation functions are applied on the entire data of the table. 
 **EDIT:**
 A count that will be applied on each row can't be normally done with   and usually used with an analytic function ->   which unfortunately doesn't exist in MySQL. Your other option is to make a   for this additional column. 
 **Another Edit:**
 If you want to total count next to each owner, you can use a sub query: 
 
 
 This looks exactly like the scenario at the bottom of this page:  MySQL Documentation: 4.3.4.8 Counting Rows .  
 
 If ONLY_FULL_GROUP_BY is not enabled, the query is processed by
  treating all rows as a single group, but the value selected for each
  named column is indeterminate. The server is free to select the value
  from any row: 
 
 
 I guess in this case   is not set. 
 
 Only MySQL will let you make this kind of queries.  
 You should always specify all the the columns that are not combined with an aggregation function in the   clause . If not, the data will be combined into 1 row, with the aggregated columns set correctly, and all the other columns picked randomly or with the indexes. 
 So you need this : 
 
 Which will result : 
 
 Is this what you intended to achieve? 
 Or maybe you tried to do this: 
 
 Which will result in an additional column with the total count next to each owner. 
 
 Most DBMS systems won't allow a aggregate function like count() with additional columns without a group by; for a reason. The DBMS does not know which columns to group :-). 
 The solution is to group your query by the owner column, like this: 
 
 
 **Count(*)**
  aggregate function it returns only one value and i.e. total number of rows. And  **curdate()**
 function is just provide the system's current date. 
 
 The last query is invalid for Oracle: ORA-00937: not a single-group function. This means you need a GROUP BY clause. You found a loophole in the MySql implementation. Do not rely on such a query in a production system, in a next version of MySql this might not work. 
 
 Yes this usually happens with out using the group by clause. 
 http://www.w3schools.com/sql/sql_groupby.asp  You should read in the link all about the group by clause. 
 All the column should be mentioned either will aggregation or in group by 
 