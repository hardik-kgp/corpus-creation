*** why-does-no-database-fully-support-ansi-or-iso-sql-standards ***

 If I were designing a oil refinery, I wouldn't expect that materials from different vendors would not comply with published standards in subtle yet important ways.  Pipework, valves and other components from one supplier would come with flanges and wall thicknesses to ANSI standards, as would the same parts from any other supplier.  Interoperability and system safety is therefore assured. 
 Why then are the common databases so choosy about which parts of the standards they adhere to, and why have no 100% standards-compliant systems come to the fore?  Are the standards 'broken', lacking in scope or too difficult to design for? 
 Taking this to conclusion; what is the point of ANSI (or ISO) defining standards for SQL? 
 Edit:  List of implementation differences between common databases 
 
 In the software industry you have some standards that are really standards, i.e., products that don't comply with them just don't work. File specifications fall into that category. But then you also have "standards" that are more like guidelines: they may defined as standards with point-by-point definitions, but routinely implemented only partially or with significant differences. Web development is full of such "standards", like HTML, CSS and "ECMAScript" where different vendors (i.e. web browsers) implement the standards differently.  
 The variation causes headaches, but the standardization still provides benefits. Imagine if there were no HTML standard at all and each browser used its own markup language. Likewise, imagine if there were no SQL standard and each database vendor used its own completely proprietary querying language. There would be much more vendor lock-in, and developers would have a much harder time working with more than one product. 
 So, no, ANSI SQL doesn't serve the same purpose as ANSI standards do in other industries. But it does serve a useful purpose nonetheless. 
 
 Probably because standards conformance is of a low priority to database system purchasers. They are more interested in: 
 
 compatibility with what they've already got 
 performance 
 price 
 OS support 
 
 to name but a few factors.  
 The same is true of programming languages - very few (if any) compilers support every single feature of the current ANSI C and C++ standards. 
 As to why bother with standard, well most vendors do eventually bring standard support on board. For example, most vendors support more or less all of SQL89. This allows the vendor to tick a (relatively unimportant) check-box on their spec sheet and also allow people like me who are interested in writing portable code to do so, albeit having to forgo lots of bells and whistles. 
 
 See the article " IS SQL A REAL STANDARD ANYMORE?"  for a discussion about the current (2005) issues of the SQL standard.  
 
 Indeed, the ANSI SQL standard is not often followed. Just read SO: most SQL threads never refer to the standard while, for instance, discussions on network protocols often include the actual quote, chapter and verse of the relevant RFC. 
 I always suspected that one of the reasons is the fact that the SQL standard is not freely distributable. Simply getting it is not trivial. Various  unofficial copies  float around.) 
 Another reason is that it is a very complicated text and poorly organized. It uses a strange vocabulary (such as "authID" instead "user"). You need books just to understand the standard ("A guide to the SQL standard", C.J. Date, Hugh Darwen - 
Addison-Wesley). 
 
 I don't know the history of ANSI SQL specifically.  But it seems that many times in software development, standards are written after the major players have already implemented their own proprietary versions of things.  Once a company is invested in its own way of doing things, it's really hard to justify changing or removing features people have come to rely on just to adhere to a standard.  Web standards are a primary example of this phenomenon. 
 
 Mimer SQL  has great standards support, yet it is pretty unknown. It is in production in several large sites, mostly in Sweden. But I think a lot of sites are migrating to others.  
 Detailed support statments:  
 
 SQL-99   
 SQL-2003 
 PSM 
 Database triggers and functions according to SQL:1999 
 Binary and Character Large OBjects (BLOB/CLOB/NCLOB) support according to SQL:1999 
 Multi-database transactions (two-phase commit) conforming to Open Group's XA-standard 
 Support for Java ME CDC Foundation Profile and Java ME CLDC/MIDP 
 
 
 A few years ago, one of the worst industries as far as pipes and connectors being mutually compatible was firefighting equipment.  There were literally dozens of mutually incompatible hose to pump connections.  When mutual aid became commonplace among fire fighters,  they had to bring along dozens of adaptors to be able to interoperate their  equipment.   
 On September 11, both police and firefighters had private wireless networks for intercommunicating among their people.  But, guess what?  The two systems were not mutually compatible.  So there were needless delays in communicating information from one kind of public safety servant to another. 
 If you go back far enough, you can find a time in New York City where about half the electric grid was DC, favored by Edison,  and the other half was AC, favored by Westinghouse.   
 Standards sometimes come about by themselves, and are called de facto standards.  More commonly, standards have to be set forth by a body specifically empowered to make it happen.  As to the SQL standards, some of the largest vendors pre date the standard.  In order to comply with the standard, they would have to put in engineering expense that doesn't benefit their existing client base.  Worse yet,  they might end up being incompatible with their own prior product.   
 Full compliance with the SQL standard might yet happen, but it's unlikely.  Even if it does, there's a delay time between the evolution of a new SQL standard and compliance with it.    
 
 IMHO, the DB vendors push forward the ANSI SQL standards to include new features & constructs within their field much more than ANSI telling the DB vendors the "one true way". 
 The DB market is driven by features, scalability and cost.  It is not a commercial priority to forego and delay a technical advantage (i.e. partitioning, pivot, UPSERT, replication) by waiting for ANSI to ratify the syntax.  By the time that has been done, there is already a significant installation of the proprietary syntax. 
 That being said, most DB vendors have improved their core "ANSI SQL" support greatly in the last few years.  (SQL Server with the SELECT FROM INFORMATION_SCHEMA and Oracle's ANSI joins actually working as well as native joins under the CBO) 
 
 According to the HSQLDB manual,  it is the most standards compliant RDBMS . 
 
 Almost all syntactic features of SQL-92 up to Advanced Level are supported 
 SQL:2008 core and many optional features of this standard 
 
 
 The real reason:  most "developers" are client-centric coders, and therefore neither understand nor care about Dr. Codd's 12 rules.  This is also why MySql, which isn't a relational database in any significant manner, is frequently seen in webKiddie development.  Such developers only want rudimentary SELECT, UPDATE, DELETE parsing.  They eschew constraints of any kind, preferring to "do it in the application".  Reactionary 1960's applications are what you get.   
 
 Most of them are pretty compliant. But here's the bad news, IMO - standards breed mediocrity. Vendors want you to get locked into their extensions, and there's often good reason to do to nonstandard things. Realistically, how likely are you to dump Oracle for SQL Server, or vice-versa? Unless you build a product that your cusotmers may use against other databases, you as an enterprise are unlikely to swap out DB's. Too painful. 
 
 Companies usually tend to use one vendor to avoid having a jungle of different and possibly incompatible systems to support. It's also a lot cheaper to train your developers/system engineers in using one database vendor's tools than in 3 different sets of tools. Later on, this company may then grow large enough to buy some of its competitors. This would mean another entirely different set of tools that you'd have to manage, integrate, etc. 
 That's a lot of work. 
 Imagine that instead of that, you have a portability layer so that you really don't care what's beneath. That would be a lot better. 
 