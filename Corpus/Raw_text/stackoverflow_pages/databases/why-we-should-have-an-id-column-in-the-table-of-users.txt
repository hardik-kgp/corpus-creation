*** why-we-should-have-an-id-column-in-the-table-of-users ***

 It's obvious that we already have another unique information about each user, and that is username. Then, why we need another unique thing for each user? Why should we also have an id for each user? What would happen if we omit the id column? 
 
 Even if your username is unique, there are few advantages to having an extra id column instead of using the varchar as your primary key. 
 
 Some people prefer to use an integer column as the primary key, to serve as a surrogate key that never needs to change, even if other columns are subject to change.  Although there's nothing preventing a natural primary key from being changeable too, you'd have to use cascading foreign key constraints to ensure that the foreign keys in related tables are updated in sync with any such change. 
 The primary key being a 32-bit integer instead of a varchar can save space.  The choice between a int or a varchar foreign key column in every other table that references your user table can be a good reason. 
 Inserting to the primary key index is a little bit more efficient if you add new rows to the end of the index, compared to of wedging them into the middle of the index.  Indexes in MySQL tables are usually B+Tree data structures, and you can study these to understand how they perform. 
 Some application frameworks prefer the convention that every table in your database has a primary key column called  , instead of using natural keys or compound keys.  Following such conventions can make certain programming tasks simpler. 
 
 None of these issues are deal-breakers.  And there are also advantages to using natural keys: 
 
 If you look up rows by username more often than you search by id, it can be better to choose the username as the primary key, and take advantage of the index-organized storage of InnoDB.  Make your primary lookup column be the primary key, if possible, because primary key lookups are more efficient in InnoDB (you should be using InnoDB in MySQL). 
 As you noticed, if you already have a unique constraint on username, it seems a waste of storage to keep an extra id column you don't need. 
 Using a natural key means that foreign keys contain a human-readable value, instead of an arbitrary integer id.  This allows queries to use the foreign key value without having to join back to the parent table for the "real" value. 
 
 The point is that there's no rule that covers 100% of cases.  I often recommend that you should keep your options open, and use natural keys, compound keys, and surrogate keys even in a single database. 
 I cover some issues of surrogate keys in the chapter "ID Required" in my book  SQL Antipatterns: Avoiding the Pitfalls of Database Programming . 
 
 This identifier is known as a  Surrogate Key .  The page I linked lists both the advantages and disadvantages. 
 In practice, I have found them to be advantageous because even superkey data can change over time (i.e. a user's email address may change and thus any corresponding relations  must  change), but a surrogate key never needs to change for the data it identifies because its value is meaningless to the relation. 
 It's also nice from a   standpoint because it can be an integer with a smaller key length than a varchar. 
 I can say that in practice I prefer to use them.  I have been bitten too many times by having multiple-column primary keys or a data-representative superkey used across tables having to become non-unique later due to changing requirements during development, and that is not a situation you want to deal with. 
 
 im mysql we have. 
 
 in a table you may have lots of unique fields like 
 username or passport code or email. 
but you need a field like ID. that is both unique and index (=PK).which is first is always one thing and never changes and second is unique and third is simple (because is often number). 
 
 One reason to have a numeric id is that creating an index on it is leaner than on a text-field, reducing index size and processing time required to look up a specific user. Also it's less bytes to save when cross-referencing to a user (relational database) in a different table. 
 
 In my opinion, every table should have a unique, auto-incremented id. 
 Here are some practical reasons.  If you have duplicate rows, you can readily determine which row to delete.  If you want to know the order that rows were inserted, you have that information in the id.  As for users, there's more than on "John Smith" in the world.  An id provides a key for foreign references. 
 Finally, just about anything that might describe a user -- a name, an address, a telephone number, an email address -- could change over time. 
 