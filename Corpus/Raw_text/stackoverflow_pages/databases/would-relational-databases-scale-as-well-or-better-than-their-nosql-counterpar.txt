*** would-relational-databases-scale-as-well-or-better-than-their-nosql-counterpar ***

 Disclaimer: This is a broad question, so it could be moved to a different source (if the admins find it appropriate).  
 All the cool kids seem to be dropping relational databases in favor of their NoSQL counterparts. Everyone will have their reasons, from scaling issues to simply being on the bleeding edge of tech. And, I am not here to question their motives. 
 However, what I am interested in is whether any NoSQL transitions ever validated the performance (maintenance) gains over a traditional RDBMS when relationships were dropped. Why would we want to use a RDBMS when the core reason it exists is dropped? A few reasons come to mind 
 
 30+ years of academic and work research in developing these systems 
 A well-known language in Structured Query Language (SQL). 
 Stable and mature ORM support across technologies (Hibernate, ActiveRecord) 
 
 Clearly, in the modern world where horizontal scaling is important, there is a need to make sure that shards are fault tolerant, updated within the time intervals required by the app, etc. However, those needs shouldn't necessarily be the responsibility of a system that stores data (case in point: ZooKeeper). 
 Also, I acknowledge that research should be dedicated to NoSQL and that time spent in this arena will clearly lead to better more internet worthy technologies. However, a comparison of sorts between NoSQL and traditional RDBMS offerings (minus relationships) would be useful in making business decisions. 
 **UPDATE 1**
: When I refer to NoSQL databases, I am talking about data stores that may not require fixed table schemas and usually avoid join operations. Hence, the emphasis in the question on dropping the relationships in a traditional SQL RDBMS 
 
 I don't find that inter-table relationships are the main limiter for scalability.  I use queries with joins regularly and get good scalability if indexes are defined well. 
 The greater limiter for scalability is the cost of synchronous I/O.  The requirements of consistency and durability -- that the DBMS  actually  and reliably saves data when it tells you it saved data -- is expensive. 
 Several NoSQL products that are currently in vogue achieve great performance by weakening their consistency and durability guarantees in their default configuration.  There are many reports of CouchDB or MongoDB losing data. 
 There are ways you can configure those NoSQL products to be more strict about durability, but then you sacrifice their impressive performance numbers. 
 Likewise, you can make an SQL database achieve high performance like the NoSQL products, by disabling the default features that ensure data safety.  See  RunningWithScissorsDB . 
 PS: If you think document-oriented databases are "cutting edge", I invite you to read about  MUMPS .  Everything old is new again.  :-) 
 
 There seem to be at least two misconceptions that might be implied by this question. Firstly "NoSQL" does not mean "non-relational", it just means something other than SQL. So a RDBMS could be a NoSQL DBMS too. 
 Secondly, an RDBMS has nothing much to do with relationships* per se. Relationships are not part of the relational model and they can exist in non-relational databases as well (including No-SQL ones). The "relational" part of RDBMS refers specifically to  relations  - i.e. the data structure more commonly called a "table" (and never called a "relationship"). The question seems to be mixing up those two important and very different things: relation and relationship. 
 Since the existence of or absence of relationships has nothing to do with whether a database is relational or not, I'm not sure what the question is really asking. If I've misunderstood something then maybe you could clarify the question a bit. 
 *A relationship is an "association among things" - or sometimes a database constraint that enforces a rule about such associations. 
 
 SQL generally has scaling issues because the guarantees it gives are not only for one "row" at a time. They are spanning across rows. This makes the load hard to distribute. Here are examples of RDBMS's giving guarantees spanning more than one record: 
 
 Indexes: Atomic update of two underlying tables at once (the index internally is a table) 
 Foreign keys 
 Materialized views 
 
 The problem with those features is that they don't lend themselves well to partitioning. In all 3 cases, a particular write might span multiple partitions causing scaling issues. 
 NoSQL generally "solves" this by just disallowing those features ;-) 
 The next issue holding back SQL is that it provides ACID semantics by default. This is not inherent in the relational model - it is an implementation detail. 
 So if you turn off those features that are hard to distribute/partition and disable ACID you get NoSQL performance. In fact look at how HandlerSocket does this with MySQL. It has NoSQL speeds although it runs on InnoDB and provides a standard full-featured SQL-Interface (it really is just a featureless bypass on a standard MySQL server). 
 No magic in NoSQL, just less features. Which is ok. It is a different trade-off. 
 
 I think the pros/cons of using RDBMS or NoSQL really depends on the data and how you plan to use it. It is my understanding that transactions are actually represented quite well with a relational DB. My experience with NoSql is with Infinite Graph & Neo4J. Forensics is a good use case for NoSQL, each person is an node/vertex and an edge can represent different types of communication (email, phone, face to face meeting, carrier pigeon, etc...). You can then take a suspect/vertex and traverse the graph with specific criteria to find how two seemingly unconnected individuals are actually connected (probably with more efficiency than a traditional relational DB). Social graph data is another good example, every user is a node/vertex and the relationship(friend) is an edge connecting two nodes. In short, is your data best represented & retrieved with tables or nodes/edges. 
 
 Relationships is not a good criteria to compare performance between  **RDBMS**
 and  **NoSQL**
.  
 **NoSQL**
 has become very popular due to many factors  
 
 Horizontal scalability. 
 Support for unstructured & semi-structured data 
 Read/Write throughput 
 Cheap hardware cost etc. 
 
 Have a look at  RDBMS Overheads 
 **RDBMS**
 have challenges due to consistency requirements.  
 To support transactions, RDBMS has to support  **ACID properties : Atomicity, Consistency, Isolation, Durability**
). This can be achieved with  
 **Logging**
: Assembling log records and tracking down all changes in database structures slows performance. Logging may not be necessary if recoverability is not a requirement or if recoverability is provided through other means (e.g., other sites on the network). 
 **Locking**
: Traditional two-phase locking poses a sizeable overhead since all accesses to database structures are governed by a separate entity, the Lock Manager. 
 **Latching**
: In a multi-threaded database, many data structures have to be latched before they can be accessed. Removing this feature and going to a single-threaded approach has a noticeable performance impact. 
 **Buffer management**
: A main memory database system does not need to access pages through a buffer pool, eliminating a level of indirection on every record access. 
 In Summary,  **RDBMS**
 is not scaling due to above overheads, which are necessary  to support ACID transactions.Lack of relationships does not improve performance of RDBMS system. 
 