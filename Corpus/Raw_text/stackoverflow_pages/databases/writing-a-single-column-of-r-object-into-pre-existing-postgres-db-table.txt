*** writing-a-single-column-of-r-object-into-pre-existing-postgres-db-table ***

 I have a working knowledge of R but I haven't used it in conjunction with databases too much. My question seems very similar to this question:
 update table in postgresql database through r 
 But I can't get that code to work and the doMC package is not available for recent versions of R. 
 I'm able to connect to the geodatabase, read in data and manipulate it. I can also write an R object into the geodatabase as an entire table. I'm having trouble though, appending an existing geodatabase table with an R object. Unfortunately it's a secure database, so I can't give my connection information out. 
 -"wearing", "weekday", and "days" are blank columns in a pre-existing table in the geodatabase 
 -"participant_id", "date_id" and "gps_time" are populated columns in the pre-existing table that I would like to merge on. 
 -ucsd is the schema name and sage_choi is the existing table name 
 

####EDIT

 This is the final solution (connection info omitted) that works well. I had some issues with encoding and also including the right kinds of quotes (single). 
 
 
 I'm assuming here you are using the CRAN library RPostgreSQL and that your question is,  
 "How can I update an existing postgresql record using R?" 
 If I interpreted your question correctly, I have good news and I'll make minor mods to your existing code to get it working below. Now, the good news:  
 
 The error is in your SQL and  
 You do not need doMC (nor foreach, for that matter).  
 You're already connected to your database--that's usually the more onerous part! 
 
 If you really need parallelism you can see the basic format for initializing multiple workers with doSNOW. Either way, it is much easier to debug a single-threaded application so you should just straight up change your loop to a single-threaded loop by changing the %dopar% argument at the end of your foreach statement to %do% and then register your parallel backend AFTER you get the SQL working. 
 
 Then you might see that your SQL has a syntax error, notably in that "where" and your first "and" erroneously follow commas. I typically break large statements into more human readable form like below so it is easier to spot inconsistencies in form. I removed the inadvertent commas in this snippet below: 
 
 From a performance standpoint, you are going to do much better if you initialize your connection outside the for loop because you do not need to sink the time and cost to re-establish the connection for each record.  
 
 
 If I understood the question correctly, this is fairly easy using  's ability to connect to databases 
 
 Once you run the code, table   would contain the populated columns. 
 