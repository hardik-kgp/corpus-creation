*** zend-framework-why-should-i-use-data-mapper-db-table-row ***

 **Extended Question: Why should I use data mapper / Db_Table_Row, where as DbTable is capable of handling most of the basic tasks for data manipulation.**

 I am currently learning ZF v1.11 
 For Database manipulation, I created DbTable for each tables. For example, "users" table is represented by Application_Model_DbTable_Users with no additional codes in there. 
 When manipulating data, I can use: 
 
 My Question is, when would I need to define a row class (assuming Table_Row is referred as DataMapper in ZF-Tutorials) 
 
 What are the benefits of having a Row class for each entity? Can anyone point me to best practices for this. 
 
 You do not need to define your own Table_Row. However, it maybe useful in many cases, particularly if you want to define some specific methods or properties for a given user row. They can also improve readability of your code. 
 **For example**
 in your Users table case, you could define a method called getFullName() in a custom user row as: 
 
 Then when you obtain user row object, to get the full name of the user, you just do: 
 
 **Second example**
 is when you have some parent table to the Users table, such as Addresses. In this case you could define a method called getAddress in a user row: 
 
 In this scenario, you would get an Address row object for a current user as follows: 
 
 **Another example**
, would be when you want to create custom delete or instert methods. Lets assume that you want to make sure you do not want to delete an admin user using delete() method. Then you could overload delete method from Zend_Db_Table_Row as follows: 
 
 This way, you would not be able to delete an admin user just by calling delete() on a user row object: 
 
 These are just three basic examples showing usefulness of defining your own row classes. But of course they are not necessary. However, from my own experience they are quite handy.  
 
 In a nutshell: it's about isolation. 
  is an implementation of the Table Data Gateway. It channels CRUD access to a specific table view through one class. It is usually used with a  Table Module , e.g. a class that contains the business logic for the records handled by a gateway. 
  is an implementation of the  Row Data Gateway Pattern . Here, the returned objects look exactly like a database record and they contain the business logic to work with that data, but they don't contain the logic to CRUD with the table they are from (that would be an ActiveRecord) but aggregate them.  
 Row Data Gateways are fine as long as you don't have too much  object relational impedance mismatch . How an object is persisted in a relational database and how it should look like in an object world are often quite different things. When using a  Domain Model , your business objects are usually structured in a different way than they are stored in the database. Thus, you cannot easily CRUD them from the database. This is where  DataMapper  comes into play. 
 A DataMapper takes the responsibility of mapping Domain objects onto Recordsets and vice versa. This makes your application more maintainable because it decouples your Domain objects from the Database structure. It keeps them separated and gives you more flexibility in how to model both layers (persistence and domain). 
 