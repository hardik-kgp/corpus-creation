chapter member objects static members297 member objects298 member initializers300 constant member objects302 static data members304 accessing static data members306 enumeration308 exercises310 solutions314 chapter arrays321 defining arrays322 initializing arrays324 arrays326 class arrays328 multidimensional arrays330 member arrays332 exercises334 solutions338 chapter arrays pointers349 arrays pointers   arrays pointers   pointer arithmetic354 arrays arguments356 pointer versions functions358 read pointers360 returning pointers362 arrays pointers364 command arguments366 exercises368 solutions372 chapter fundamentals file input output379 files380 file streams382 creating file streams384 open modes386 closing files388 reading writing blocks390 object persistence392 exercises394 solutions398 contentsxv chapter overloading operators411 generals412 operator functions   operator functions   overloaded operators418 global operator functions420 friend functions422 friend classes424 overloading subscript operators426 overloading shift operators o428 exercises430 solutions432 chapter type conversion classes441 conversion constructors442 conversion functions444 ambiguities type conversions446 exercise448 solution450 chapter dynamic memory allocation453 operator new454 operator delete456 dynamic storage allocation classes458 dynamic storage allocation arrays460 application linked lists462 representing linked list464 exercises466 solutions468 chapter dynamic members477 members varying length478 classes dynamic member480 creating destroying objects482 implementing methods484 copy constructor486 assignment488 exercises490 solutions492 chapter inheritance499 concept inheritance500 derived classes502 xvicontents members derived classes504 member access506 redefining members508 constructing destroying derived classes510 objects derived classes512 protected members514 exercises516 solutions520 chapter type conversion class hierarchies529 converting base classes530 type conversions assignments532 converting references pointers534 explicit type conversions536 exercises538 solutions540 chapter polymorphism543 concept polymorphism544 virtual methods546 destroying dynamically allocated objects548 virtual method table550 dynamic casts552 exercises554 solutions558 chapter abstract classes565 pure virtual methods566 abstract concrete classes568 pointers references abstract classes570 virtual assignment572 application inhomogeneous lists574 implementing inhomogeneous list576 exercises578 solutions580 chapter multiple inheritance587 multiply derived classes588 multiple indirect base classes590 virtual base classes592 constructor calls594 initializing virtual base classes596 exercises598 solutions602 contentsxvii chapter exception handling607 traditional error handling608 exception handling610 exception handlers612 throwing catching exceptions614 nesting exception handling616 defining error classes618 standard exception classes620 exercises622 solutions626 chapter more files637 opening file random access638 positioning random access640 file state644 exception handling files646 persistence polymorphic objects648 application files652 implementing file654 exercises656 solutions660 chapter more pointers681 pointer pointers682 variable number arguments684 pointers functions688 complex declarations690 defining typenames692 application dynamic matrices694 exercises696 solutions698 chapter manipulating bits705 bitwise operators706 bitwise shift operators708 bit masks710 bit masks712 bit fields714 exercises716 solutions718 chapter templates721 function class templates722 defining templates724 xviiicontents template instantiation726 template parameters728 template arguments730 specialization732 default arguments templates734 explicit instantiation736 exercises738 solutions742 chapter containers749 container types750 sequences752 iterators754 declaring sequences756 inserting sequences758 accessing objects760 length capacity762 deleting sequences764 list operations766 associative containers768 sets multisets770 maps multimaps772 bitsets774 exercise778 solution780 appendix783 binary numbers784 preprocessor directives787 pre defined standard macros792 binding functions793 operators overview795 operator precedence table797 ascii code table798 screen control sequences800 literature801 index803 contentsxix intentionally left blank fundamentalsthis chapter describes fundamental characteristics object oriented programming language addition introduced steps creating fully functional program examples provided retrace steps demonstrate basic structure program chapter  chapter fundamentals development properties characteristicsc universal efficient close machine portableoop data abstraction data hiding inheritance polymorphismextensions exception handling templates development properties historical perspective programming language created bjarne stroustrup team belllaboratories usa implement simulation projects object ori ented efficient earliest versions originally referred classes  implies derived programming language increment operator early  ansi committee americannationalstandardsinstitute wasfounded standardize programming language aim compiler vendors software developers agree unified description language order avoid confusion caused variety dialects  iso internationalorganization standardization approved stan dard iso iec  characteristics purely object oriented language hybrid functionalityof programming language features avail universally usable modular programsefficient close machine programmingportable programs platforms large quantities existing source code programs supports concepts object oriented programming oop short data abstraction creation classes objectsdata encapsulationfor controlled access object datainheritanceby creating derived classes including multiple derived classes polymorphism greek multiform implementation instructionsthat varying effects program execution language elements references templates excep tion handling elements language strictly object ori ented programming features efficient program implementation chapter fundamentals function1data1data2function2function3object1propertiescapacitiesobject2propertiescapacitiesobject oriented programming traditional concept object oriented concept object oriented programming5traditional procedural programming traditional procedural programming data functions subroutines procedures arekept separate data process pro gram handles data programmer ensure data initialized suitable values suitable data passed function calledif data representation changed record extended correspon ding functions modified points lead errors support low program maintenancerequirements objectsobject oriented programming shifts focus attention objects theaspects problem centered program designed maintain bank accounts work data balances credit limits transfers calcula tions object representing account program properties capacities account management oop objects combine data properties functions capacities class defines acertain object type defining properties capacities objects type objects communicate sending messages turn acti vate object capacities advantages oop object oriented programming offers major advantages software development reduced susceptibility errors object controls access data morespecifically object reject erroneous access attemptseasy objects maintain buildingblocks programslow maintenance requirement object type modify internal datarepresentation requiring application chapter fundamentals editorcompilerlinkerexecutablefilesource fileheader file standardlibraryotherlibraries object filesobject filedeveloping program translating program source file syntax error compiler report error additional errormessages compiler attempts continue error troubleshooting program start error developing program7note steps required create translate program  text editor save program text file thesource codeis saved source file larger projects programmer mally modularprogramming source code stored inseveral source files edited translated separately  source file compilerfor translation works asplanned object file machine codeis created object file alsoreferred module  finally linkercombines object file modules form exe cutable file modules functions standard libraries orparts program compiled correct file extension source file althoughthe file extension depends compiler commonly file exten sions cppand prior compilation header files referred include files becopied source file header files text files needed var ious source files type definitions declarations variables functions header files file extension file extension thec standard library predefined standardized functions areavailable compiler modern compilers offer integrated software development environment whichcombines steps mentioned single task graphical user interface editing compiling linking running application addi tional tools debugger launched addition error messages compiler issue warnings warning doesnot syntax error draws attention error pro gram logic initialized variable chapter fundamentals include iostream namespace std int main cout enjoy endl return  beginner program sample program screen output enjoy structure function main function namewhat program satements type function functionbeginning offunctionfunction blockint main program statements beginner program9a program objects accompanying memberfunctions andglobal functions belong single class function fulfillsits task functions create functions ready functions standard library write global function main special role play fact themain program short programming opposite demonstrates mostimportant elements program program function main displays message number symbol isintended preprocessor preprocessor step translationphase object code created time type include filename preprocessor copy quoted file position source code program access contained header file header fileiostreamcomprises conventions input output streams word streamindicates involved treated flow data predefined names std standard namespace theusingdirective direct access names stdnamespace program execution instruction function main iswhy program main function structure function opposite fact changed function structure function function main statements statementcout enjoy endl outputs text string enjoy screen cout console output designates object responsible output symbols characters pushed stream finally endl feed statementreturn  terminates function main program returning as exitcode calling program standard practice exit code to thata program terminated correctly note statements semicolon shortest statementcomprises semicolon chapter fundamentals program functions comments include iostream namespace std void message prototypes int main cout program starts main endl message cout main endl return  void draw cout endl void message display message cout function message endl structure simple programs program functions screen output program starts main function message main structure simple programs11the opposite structure program containingmultiple functions functions defined fixed order define function message functionline finally main function common start main function function trols program flow main calls functions bedefined supplying compiler function prototypethatincludes compiler introduces comments strings enclosed start ing interpreted comments examples coverseveral lines cover linein single comments compiler ignores characters signs upto comments cover lines troubleshoot ing mask complete sections program comment types comment type layoutof source files compiler parses source file sequentially breaking contents tokens function names operators tokens separated number whitespace characters spaces tabs characters order source code adhere specific layout organizing code rows columns examplevoid message cout function message endl difficult read correct definition function message preprocessor directives exception layout rule occupy asingle number sign preceded space tab character improve legibility programs adopt consistent style indentation blank lines reflect structure program addition generous comments exercises chapter fundamentals include iostream namespace std void pause prototype int main cout endl dear reader endl pause cout endl return  void pause cout break exercisesprogramlisting exercise  exercises13exercise  write program outputs text screen whata happy day happy day manipulator endlwhere exercise2 program errors forget glasses include stream int main cout text cout appears display cout endl cout pat endl return  resolve errors program test exercise  program opposite output screen solutions chapter fundamentals solutionsexercise  include iostream namespace std int main cout endl cout happy day endl cout endl cout happy day endl return  exercise  corrected places underlined forget glasses include iostream namespace std int main cout text cout appears display cout endl cout pat endl return  exercise  screen output dear reader break fundamental types constants variables chapter introduces basic types objects programs chapter  chapter fundamental types constants variables type void introduced fundamental types overview boolcharwchar_tshortintlongfloatdoublelong doublefor integersfor floating pointvaluesfor boolean valuesfor characters fundamental types17a program data solve problem characters inte gers floating point numbers computer methods processing saving data data typemust type defines1 internal representation data  memory allocate number can stored   bytes accessing thepart memory number stored read correct number bytes memory content bit sequence read interpreted correctly signed integer compiler recognizes fundamentaltypes referred built types opposite types vectors pointers classes based type boolthe result comparison logical association booleanvalue true false booltype represent boolean values anexpression type boolcan trueorfalse internal fortruewill represented numerical  falseby thecharandwchar_ttypes types saving character codes character codeis integer associatedwith character letter ais represented code  charactersetdefines code represents character displaying characters onscreen applicable character codes transmitted receiver screen responsible correctly interpreting codes language stipulate characters set gen eral character set ascii code americanstandardcode informa tioninterchange  bit code definitions  control characters codes    printable characters codes   thechar character type store character codes byte  bits thisamount storage sufficient extended character sets ansi char acter set ascii codes additional characters german umlauts thewchar_t wide character type type comprises  bytes  bits isthus capable storing modern unicode characters unicodeis  bit code inwindows codes   characters  languages chapter fundamental types constants variables include iostream include climits definition int_min namespace std int main cout range types int unsigned int endl endl cout type minimum maximum endl endl cout int int_min int_max endl cout unsigned int  uint_max endl return  fundamental types continued integral types sample program typesizerange values charunsigned charsigned charshortunsigned shortlongunsigned longintunsigned int1 byte1 byte  byte2 byte resp  byte  byte resp  byte2 byte2 byte4 byte4 byte           resp     resp           fundamental types continued integral types types short int longare operations integers typesare distinguished ranges values table opposite integer types referred integral types typical storagerequirements ranges values theint integer type tailor computers adapts length reg ister computer  bit computers intis equivalent short whereasfor  bit computers intwill equivalent long treats character codes normal integers perform cal culations variables belonging charorwchar_ttypes sameway inttype variables charis integral type size byte therange values     depending piler interprets chartype signed unsigned vary thewchar_ttype integral type defined unsignedshort thesignedandunsignedmodifierstheshort int longtypes interpreted signed highest bitrepresenting sign integral types preceded keywordunsigned memory required remains unaltered range valueschanges highest bit longer required sign keywordunsignedcan abbreviation unsigned int thechartype interpreted signed conven tion mandatory signedkeyword types avail char signed char unsigned char current ranges climitsheader file file definesconstants char_min char_max int_min int_max represent smallest greatest values program opposite outputs constants intandunsigned inttypes ansi size integer types preset order applies char short int long shorttype comprises  bytes longtype  bytes note chapter fundamental types constants variables ieee format ieee institute electrical electronicengineers representfloating point types table representation note fundamental types continued floating point types arithmetic typesarithmetic operators defined arithmetic types perform calculations variables ofthis type note type sizerange ofvalues lowest positivevalue accuracy floatdoublelong double4 bytes8 bytes10 bytes  e   e   e  e  e  e  digits15 digits19 digitsboolchar signed char unsigned char wchar_tshort unsigned shortint unsigned int long unsigned longfloatdouble long doublefloating point typesintegral types fundamental types continued floating point types numbers fraction point referred toas floating point numbers contrast integers floating point numbers stored preset accuracy types calculations involving floating point numbers floatfor simple accuracydoublefor double accuracylong doublefor high accuracythe range accuracy type derived memory allocatedand internal representation type accuracyis expressed places places aprogrammer store floating point numbers differ places separate numbers reverse guarantee figures     distinguished working accuracy places remember question position point numerical sequence program display floating point numbers accuracysupported machine refer values defined cfloatheader file readers interested additional material subject refer appendix representation binary numbers computers integers floating point numbers thesizeofoperator memory needed store object type ascertainedusing sizeofoperator sizeof yields size object bytes parameter nameindicates object type orthe object sizeof int represents   depending onthe machine contrast sizeof float equal  classification fundamental types integer types floating point types voidtype types integers floating point numbers collectively referred arithmetic types arithmetic operators defined thevoidtype expressions represent function callcan voidtype chapter fundamental types constants variables table presented note constants examples integral constants sample program display hexadecimal integer literals integer literals include iostream namespace std int main cout outputs integers integers cout xff xff endl output  manipulator hexchanges output hexadecimal format decchanges format cout  hex  hexadecimal endl output b hexadecimalreturn  decimaloctaltype hexadecimal162553276732768u10000010l27ul214748364802003770777770100000u0303240012l033ul020000000000intintintunsigned intint  bit long  bit cpu longunsigned longunsigned long0x10oxff x7fff0x8000u0x186a00xal0x1bul0x80000000 constants23the boolean keywords trueandfalse number character character sequence string constants referred literals constants besubdivided intoboolean constantsnumerical constantscharacter constantsstring constants constant represents type expression thetype defined constant written boolean constantsa boolean expression values identified keywords trueandfalse constants booltype set flagsrepresenting states integral constants integral numerical constants represented simple numbers octals orhexadecimals adecimal constant base  number suchas  anoctal constant base  leading   ahexadecimal constant base  character pair x x forexample x2a0 x4b1c hexadecimal numbers capitalized capitalized integral constants type int constant largefor inttype type capable representing larger values applied rankingfor constants int long unsigned long designate type constant adding letter lorl forlong uoru forunsigned land12lcorrespond type long12uand12ucorrespond type unsigned int12uland12ulcorrespond type unsigned long chapter fundamental types constants variables    string literal stored byte sequence constants continued examples floating point constants examples character constantsinternal representation string literal   e10 e2519 oe    e e00   e e   e  e e constantcharacterconstant ascii code capital alowercase blank dot digit  terminating null character       constants continued floating point constants floating point numbers represented decimals point todistinguish fraction integer exponential notation permissible examples    eð2 type double  eð2represents   ð2 ecan written small lettere point distinguish floating point constantsfrom integer constants floating point constants type doubleby default add forfto designate floattype add lorlfor long doubletype character constantsa character constant character enclosed singlequotes character constants takethe type char type char numerical character code representing character constant in ascii code string constantsyou string constants introduced text output thecoutstream string constant consists sequence characters enclosed doublequotes today beautiful day string constant stored internally quotes terminated null char acter  represented byte numerical  bits thisbyte set  string occupies byte memory number ofcharacters string occupies single byte terminating null character is number differ ent character code stringexample  comprises bytes byte code character  asciicode  byte  terminating null character is escape sequence escapesequences chapter fundamental types constants variables include iostream namespace std int main cout nthis string escape sequences return  escape sequences overview sample program program output stringwith escape sequences single charactermeaningascii code alert bel backspace horizontal tab ht feed vertical tab form feed carriage return double quote single quote question mark backslash string terminating characternumerical character78   ooo octal  ooo  octal digits hexadecimal digits hexadecimal numerical character xhh escape sequences27using control special characters nongraphic characters expressed escape sequences represents tab escape sequence depend device concerned sequence depends setting tab width defaults blanksbut escape sequence backslash represents single charac ter table opposite standard escape sequences values effects octal hexadecimal escape sequences create character code letter  ascii code expressed  threeoctals x41 hexadecimals traditionally escape sequences torepresent printable characters special characters control sequences screen printer drivers initiated esc character  represented or x1b escape sequences character string constants examples thello tmike characters special significance preceded backslash represented octal numbers escape sequences strings digits and  helps avoid subsequent numbers eval uated escape sequence maximum number digits hexa escape sequence sequence hex numbers automatically terminates character valid hex number sample program opposite demonstrates escape sequences instrings fact string occupy lines feature string constants separated white spaces concatenated form singlestring continue string backslash lastcharacter press enter key continue typing string long string note leading spaces evaluated partof string generally preferable method terminate string reopen chapter fundamental types constants variables nameskeywords examples namesasmauto bool break case catch char class const const_cast continue default deletedodouble dynamic_cast enum explicit extern false float friend goto ifinlineint long mutable namespace operator private protected public register reinterpret_cast returnshortsigned sizeof static static_cast struct switch template throw true typedeftypeidtypename union unsigned virtual void volatile wchar_t whilevalid void_var settextcolor b12 top_of_window a_very_long_name123467890invalid goto _cpu object orientedus true names29valid names program namesare designate variables functions followingrules apply creating names identifiers series letters numbers underscore characters _ ger man umlauts accented letters invalid case sensitive upper lowercase letters character letter underscorethere restrictions length characters significantc keywords reserved names opposite keywords examples valid invalid names compiler internal names underscores fol lowed capital letter avoid confusion names avoid score normal circumstances linker evaluates set number characters forexample  characters reason names global objects functions chosen characters conventions standard practice small letters names variables func tions names variables tend specific examples chfor charactersi nfor integers indicesx zfor floating point numbersto improve readability programs choose longer explanatory names start_indexorstartindexfor rangeof values case software projects naming conventions apply exam ple prefixes type variable assigned naming vari ables chapter fundamental types constants variables strings values fundamental types output cout integers printed indecimal format default hintvariables sample program screen output gvar1  gvar2  character sum  definition variables include iostream namespace std int gvar1 global variables int gvar2  explicit initializationint main char local variable initialized char cout gvar1 gvar1 endl cout gvar2 gvar2 endl cout character endl int sum number  local variables initializationsum number  cout sum sum endl return  variables31data numbers characters complete records stored variablestoenable processing program variables referred objects particularlyif belong class defining variables variable defined program definea vari type memory reserved memory space addressed reference variable simple definition syntax syntax typ name1 name2 defines names variables list name1 name2 variablesof type type parentheses syntax description thispart optional variables stated single definition examples char int counter double size program variables defined program functions variable defined function global func tionsa variable defined function local func tion local variables defined brace atthe function defined statement mitted variables defined program initialization variable initialized assigned variable defini tion initialization achieved placing variable equals sign initial variable orround brackets variable examples char float   anyglobalvariables explicitly initialized default contrast initialvalue local variables fail initialize undefined initial chapter fundamental types constants variables circumference area circle radius   include iostream namespace std const double   int main double area circuit radius   area radius radius circuit  radius cout nto evaluate circle endl cout radius radius endl circumference circuit endl area area endl return  default coutoutputs floating point number maximum  places trailingzeros note keywords constandvolatilesample program screen output evaluate circleradius  circumference   area   keywords const volatile a type modified constandvolatilekeywords constant objectstheconstkeyword create read object object type isconstant modified stage initialized defini tion const double   picannot modified program statement thefollowing result error message   invalid volatile objects keyword volatile rarely creates variables modified notonly program programs external events events initi ated interrupts hardware clock volatile unsigned long clock_ticks program modify variable compiler assume variable changed accessed compiler creates machine code read variable accessed repeatedly read prior stage combine keywords constandvolatilewhen declaring avariable volatile const unsigned time_to_live based declaration variable time_to_livecannot modified pro gram external events exercises chapter fundamental types constants variables rush fro exercisesscreen output exercise  exercise  defining initializing variables int   const long large int char char  unsigned char  int big  unsigned size  double  e  float val   exercises35exercise  thesizeofoperator determine number bytes occupied memory variable type sizeof short isequivalent  write program displays memory space required fundamental type screen exercise  write program generate screen output opposite exercise  variable definitions opposite invalid sense exercise  write program defines variables floating point numbers initializes values123 and76 then display sum difference numbers screen solutions chapter fundamental types constants variables solutionsexercise  include iostream namespace std int main cout nsize fundamental types type number bytes endl cout char sizeof char endl cout short sizeof short endl cout int sizeof int endl cout long sizeof long endl cout float sizeof float endl cout double sizeof double endl cout long double sizeof long double endl return  exercise  usage escape sequences include iostream namespace std int main cout tabs rush send suited number blanks fro endl output return  solutions37exercise  incorrect int     integer valueconst long large initialization char   large fit byteint big  attention  bit systems int values double  e  character allowed namesfloat val   accuracy float  digits exercise  defining initializing variables include iostream namespace std int main float  f doubley  f sum sum cout total sum endl cout difference ñ ñ endl return  intentionally left blank using functions andclassesthis chapter describes declare standard functions anduse standard classes includes standard header files addition working string variables objects belonging standard class stringfor time functions classes define introduced book chapter  chapter using functions classes declaring functionsexample function prototype prototype yields compiler funcis function namethe function called arguments argument type int thesecond type doublethe return function type long mathematical standard functions function namefunction type type return valuetypes arguments long func int double double sin double double cos double double tan double double atan double double cosh double double sqrt double double pow double double double exp double double log double double log10 double sine cosine tangent arc tangent hyperbolic cosine square root power exponential function natural logarithm base logarithm declaring functions41declarations identifier occurring program compiler willcause error message names keywords declared introduced compiler time variable function defined declared conversely notevery declaration definition function introduced library declare function rede fine declaring functionsa function type variable function type defined byitsreturn function passes program addition type arguments required function function declared compiler provided onthe type function andthe type argument referred function prototype examples int toupper int double pow double double informs compiler function toupper type int returnvalue type int expects argument type int functionpow type doubleand arguments type doublemust passed thefunction called types arguments names names viewed comment examples int toupper int double pow double base double exponent compiler point view prototypes equivalent prototypesin previous junctions standard junctions standard function prototypes declared theyhave declared standard header files header file included program source code includedirective function usedimmediately include cmath directive mathematical standard functions sin cos andpow additional details header files thischapter chapter using functions classes calculating powers standard function pow include iostream declaration cout include cmath prototype pow double pow double double namespace std int main double   prototype compiler generates correct error message computes raised power  pow   error string numbery pow   error argument pow   pow  compiler converts int  double cout   raised  yields endl calculating pow cout   raised power   yields   pow   endl return  function calls sample program screen output   raised power  yields    raised power   yields   function callsafunction expression type function corre sponds return return commonly passed suitable variable pow   function pow called arguments xand3  result power assigned function represents operations thefunctionpow perform calculations doublevalues cout   pow   expression adds number  to return pow   outputs result cout expression passed function argument constant anarithmetical expression types arguments corre spond expected function compiler refers prototype check function called cor rectly argument type match type defined prototype compiler performs type conversion pow   type intis passed function argument thefunction expects doublevalue compiler perform type conversion inttodouble function called wrong number arguments type conversionproves impossible compiler generates error message recognize correct errors caused calling functions development stage causing runtime errors float pow     error compiler recognizes number arguments incorrect addition compiler issue warning double return pow assignedto floattype variable function calls43 chapter using functions classes typevoidfor functionssample program outputs random numbers include iostream declaration cin cout include cstdlib prototypes srand rand void srand unsigned int seed int rand void namespace std int main unsigned int seed int z1 z2 z3 cout random numbers endl cout initialize random number generator enter integer cin seed input integersrand seed argument sequence random numbers z1 rand compute random numbers z2 rand z3 rand cout nthree random numbers z1 z2 z3 endl return  statement cin seed reads integer keyboard seedis theunsignedint type note sample screen output random numbers initialize random number generator enter integer three random numbers    type void functions45functions return write functions perform action return tothe function called type voidis functions type referred procedures programming languages void srand unsigned int seed standard function srand initializes algorithm generates random num bers function return type void unsignedvalueis passed function argument seed random number generator create series random numbers functions arguments function expect argument function prototype declared asvoidor braces function left int rand void int rand standard function rand called arguments returns randomnumber   series random numbers generated repeating function usage srand andrand function prototypes srand andrand cstdlibandstdlib hheader files calling function rand called srand creates thesame sequence numbers statement proceeded srand  avoid generating sequence random numbers program executed srand argumentwhenever program common current time initialize random number generator seechapter  technique chapter using functions classes header filesusing header filesiostreamheader filecopycopymyheader hheader fileapplication cppsource file declaration cin cout include iostream include myheader int main int cin cout myfunc return  declaration defined functions classeslong myfunc int header files47using header filesheader files text files declarations macros includedirective declarations macros source file header files pay attention points header files header files generally included start program declarationsyou oneheader file includedirectivethe file enclosed angled brackets double quotes searching header files header files accompany compiler tend stored folder theirown called include header file enclosed angledbrackets common search header files includefolder current directory searched increase speed searching header files programmers commonly write header files store cur rent project folder enable compiler header files includedirective state header files double quotes include project compiler search current folder file suffix usedfor user defined header files standard class definitions addition standard function prototypes header files standard classdefinitions header file included classes defined objects declared file program include iostream namespace std directives classes istreamandostreamcan cinandcoutstreams cinis object istreamclass coutan object theostreamclass chapter using functions classes ide fashioned iostream handiomanip hheader files disposal withinthese header files identifiers iostreamandiomanipare contained stdnamespacebut declared globally note standard header files header files standard library header files standard library algorithmiosmapstack bitsetiosfwdmemorystdexcept complexiostreamnewstreambuf dequeueistreamnumericstring exceptioniteratorostreamtypeinfo fstreamlimitsqueueutility functionallistsetvalarray iomaniplocalesstreamvector assert hlimits hstdarg htime ctype hlocale hstddef hwchar errno hmath hstdio hwctype float hsetjmp hstdlib iso646 hsignal hstring standard header files49the standard library header files opposite notindicated thefile extension hand declarations namespace std spaces introduced chapter sufficient identi fiers namespaces referred directly stipulate directiveexample include iostream compiler aware cinandcoutstreams order iden tifiers stdnamespace globally add usingdirective include iostream include string namespace std cinandcoutwithout additional syntax header filestringhas included stringclass user friendly string manipulations details topic header files programming language header files standardized programming language adopted standard complete functionality standard libraries programs include math mathematical functions statement identifiers declared header files globally visible nameconflicts large programs reason header file isaccompanied header file cname declares identifiersin stdnamespace including file math equivalent toexample include cmath namespace std thestring horcstringfiles included programs standard func tions manipulate strings header files grant access functionality string library distinguished stringheader file defines thestringclass compiler offers additional header files platform dependent functionalities graphics libraries database interfaces chapter using functions classes strings include iostream declaration cin cout include string declaration class string namespace std int main defines strings string prompt emptyline  string  total cout prompt request input getline cin inputs linetotal total concatenates assigns strings cout endl outputs total endl cout outputs length length characters long endl cout endl return  operators concatenation relational operators defined objects class string strings printed coutand operator class stringwill introduced note standard classes sample program class stringsample screen output rose summer rose summer  characters long standard classes51several classes defined standard library include stream classes forinput output classes representing strings handling error conditions class type properties capacities mentioned properties class defined datamembers class capacities aredefined methods methods functions belong class cooperate withthe members perform operations methods referred memberfunc tions creating objects anobjectis variable class type referred instanceof class anobject created memory allocated data members initialized suitable values string string object instance standard class string simply astring defined initialized string constant objects thestringclass manage memory space required string general ways initializing object class string thusbe initialized number identical characters oppo site illustrates calling methodsall methods defined publicwithin class called anobject contrast calling global function method called particularobject object precedes method separated method bya period length object method method length supplies length string number characters astring  string sdefined classes global functionsglobally defined functionsexist standard classes functions perform certainoperations objects passed arguments global function getline exam ple stores keyboard input string getline cin keyboard input terminated pressing return key create charac ter stored string exercises chapter using functions classes numbersquare root       exercisesscreen output exercise  listing exercise  program errors include iostream string include stdlib void srand seed int main string message nlearn mistakes cout message endl int len length message cout length string len endl random number addition int srand   rand cout nrandom number endl return  exercises53exercise  create program calculate square roots numbers    output opposite read number keyboard output square root number calculate square root function sqrt defined prototype math orcmath header file double sqrt double return sqrt function square root exercise  program opposite errors correct errors ensure program executed exercise  create program defines string character sequence learned displays length string screen read lines text keyboard concatenate strings separate parts string output string screen solutions chapter using functions classes solutionsexercise  compute square roots include iostream include cmath namespace std int main double       cout number square root endl cout sqrt sqrt sqrt endl cout ntype number square root computed cin cout number square root endl cout sqrt endl return  exercise  corrected program include iostream header file include string include cstdlib prototypes functions void srand unsigned int seed int rand void include stdlib namespace std introduces names namespace std global scope int main string message nlearn mistakes cout message endl solutions55int len message length length message cout length string len endl random number int variable needed srand  srand   rand rand cout nrandom number endl return  exercise  include iostream declaration cin cout include string declaration class string namespace std int main string message learned prompt input lines text str1 str2 sum cout message endl outputs message cout prompt endl request inputgetline cin str1 reads firstgetline cin str2 textsum str1 str2 concatenates assignscout sum endl outputs strings return  intentionally left blank input output withstreamsthis chapter describes streams input output focusing formatting techniques chapter  chapter input output streams iosistreamostream iostreamstreamsstream classes input output standard streams cinobject class istreamto control standard inputcoutobject class ostreamto control standard outputcerrobject class ostreamto control unbuffered error outputclogobject class ostreamto control buffered error output streams59i stream classes development class based input output imple mented rise stream classes library oftheir called iostream library diagram opposite called class hierarchy develops dueto inheritance class iosis base class stream classes theattributes abilities common streams effectively iosclassmanages connection physical data stream writes program data file outputs data screencontains basic functions needed formatting data number flags determine character input interpreted defined purpose theistreamandostreamclasses derived iosform user friendly interfacefor stream manipulation istreamclass reading streams theostreamclass writing streams operator defined istreamand defined ostream theiostreamclass derived multiple inheritance istreamandostreamand offers functionality classes stream classes file management class derived theclasses mentioned developer techniques file manipulation classes methods opening closing files discussed chapter standard streams streams cinandcout mentioned earlier instances istreamorostreamclasses program launched objects automati cally created read standard inputor write standard output standard input keyboard standard output screen standard input output redirected files case data read keyboard file data displayed screen written file standard streams cerrandclogare display messages whenerrors occur error messages displayed screen standard output redirected file chapter input output streams manipulator showposis called cout showpos  output the statement equivalent tocout setf ios showpos cout  positive numbers printed sign cout  output the output positive sign canceled manipulatornoshowpos cout noshowpos  output the statement equivalent tocout unsetf ios showpos cout  operators format input output flags base classiosare setthe manipulator showposis function calls method cout setf ios showpos ios showposbeing flag showposbelonging iosclassusing manipulators easier directly accessing flags reason manipulators inthe methods setf andunsetf exceptionalcircumstances compilers supply manipulators case methods setf andunsetf hintsformatting manipulators calling manipulator formatting manipulators61formatting reading keyboard input valid input format determine inputis interpreted screen output adheres set rules governing floating point numbers displayed stream classes istreamandostreamoffer options performing thesetasks display table numeric values simple previous chapters looked cinandcoutstreams statements suchas cout enter number cin sections systematically abilities stream classes thisincludes operators formatted input output operators aredefined expressions fundamental types characters boolean values numbers strings manipulators inserted input output stream manipula tors generate formats subsequent input output manipula tor familiar endl generates feed theend methods determining modifying state stream unformat ted input output flags manipulators formatting flagsdefined parent class iosdetermine characters input oroutput general flags represented individual bits special integral vari depending bit set positive number output sign flag defaultsetting integral numbers output decimals bydefault positive numbers output sign modify individual formatting flags methods setf andunsetf purpose achieved sim ply calledmanipulators defined flags manipula tors functions inserted input output stream called chapter input output streams reads integral values generates octal hexadecimal output include iostream declarations cin cout andusing namespace std manipulators oct hex int main int number cout enter integer cin number cout uppercase hex digits octal hexadecimal oct number dec number hex number endl return  formatted output integers manipulators formatting integers sample program manipulatoreffects octal basehexadecimal basedecimal base default generates sign negative numericoutput generates capital letters hexadecimaloutput generates negative numeric outputwithout sign default generates lowercase letters hexadecimaloutput default octhexdecshowposnoshowposuppercase nouppercase formatted output integers63formatting options operator output values type short int longor correspondingunsignedtype formatting options define numeric display number octal orhexadecimaluse capitals small letters hexadecimalsdisplay sign positive numbers addition field width defined types field width canalso defined characters strings floating point numbers discussed sections numeric systemintegral numbers displayed decimals default manipulators oct hex deccan switching display mode cout hex  output bhexadecimals displayed small letters default themanipulatoruppercaseallows capitals cout hex uppercase  output bthe manipulator nouppercasereturns output format small letters negative numbers negative numbers output decimals output include sign showposmanipulator output signed positive numbers cout dec showpos  output you noshowposto revert original display mode whenoctalorhexadecimalnumbers output bits number output arealways interpreted unsigned output bit pattern number octal hexadecimal format cout dec  hex  statement output  bit  ffffffff chapter input output streams include iostream namespace std int main double   cout precision  precision cout default endl cout showpoint showpoint endl cout fixed fixed endl cout scientific scientific endl return  key word constwithin prototype precision signifies method performs onlyread operations note formatted output floating point numbers manipulators formatting floating point numbers methods precision sample program manipulatoreffects sets precision returns precision int precision int int precision const manipulatoreffects generates point charactershown floating point output number digits point corresponds precision output fixed point notationoutput scientific notationsets precision trailing zeroes point printed digits point point printed default showpointnoshowpointfixedscientificsetprecision int formatted output floating point numbers65standard settings floating points displayed digits default decimals separated theintegral number point trailing zeroes point printed digits point point printed default examples cout   output cout   output   cout   output  the statement seventh digit simply truncated rounded large small numbers displayed exponential notation cout   output  e  formatting standard settings modified ways canchange precision number digits outputforce output point trailing zeroesstipulate display mode fixed point exponential manipulator setprecision method precision toredefine precision cout setprecision  precision  cout precision  cout   output  note header file iomanipmust included manipulator set precision applies standard manipulators called oneargument manipulator showpointoutputs point trailing zeroes thenumber digits output  equals current precision cout showpoint   output  however fixed pointoutput predetermined number places moreuseful case fixedmanipulator precision defining thenumber places default  assumed cout fixed   output  in contrast scientificmanipulator floating pointnumbers output exponential expressions chapter input output streams manipulators setw andsetfill declared header file iomanip note output fieldselement functions output fieldsmanipulators output fields examples include iostream obligatory include iomanip declarations namespace std st cout setw  output field width nd cout fixed setprecision  setw    endl  endl output   field width methodeffects returns minimum field width usedsets minimum field width nreturns character sets character chint width const int width int int const int int manipulatoreffects sets minimum field width nsets character chleft aligns output fieldsright aligns output fieldsleft aligns output sign andright aligns output numeric valuesetw int setfill int leftrightinternal output fields67the operator generate formatted output fields canspecify field widthset alignment output left justifiedspecify characterwith field field widththe field width number characters written field outputstring larger field width output truncated field extended output number digits field width width method setw manipulator define fieldwidth cout width  cout setw  special attribute field width fact permanent field width applies output illustrated examples opposite outputs character field widthof  output character default field width  width method currentfield width width arguments int fieldwidth cout width characters alignment field larger string output blanks default thefield method setfill manipulator specifyanother character cout setfill setw   output the character applies character defined previous output fields aligned otheroptions left aligned internal set manipula torsleftandinternal manipulator internalleft justifies sign justifies number field cout width  cout  cout internal  output  chapter input output streams enters character outputs octal hexadecimal code include iostream declaration cin cout include iomanip manipulators called arguments include string namespace std int main int number cout white space code number endl char string prompt nplease enter character return cout prompt cin read characternumber cout character code number endl cout uppercase hex digits octal hexadecimal oct setw  number dec setw  number hex setw  number endl return  output characters strings boolean values sample program output characters strings boolean values69outputting characters character codesthe operator interprets number type charas character code outputs thecorresponding character char  cout outputs characters  ait output character code character case charactercode stored intvariable variable output int code  cout code output the  character represented ascii code  program opposite pagecontains examples outputting stringsyou operator output string literals stringvariables illustrated previous examples case types strings positioned output fields string spring flowers cout left left aligned setfill character setw  field width this outputs string spring flowers manipulatorrightcan justify output field outputting boolean values default operator outputs boolean values integers represent ingfalseand1true output strings trueorfalseinstead theflagios boolalphamust set setf method themanipulatorboolalpha bool true cout endl  boolalpha endl trueyou revert setting noboolalphamanipulator chapter input output streams inputs article label price include iostream declarations cin cout include iomanip manipulator setw include string namespace std int main string label double price cout nplease enter article label input label  characters maximum cin setw  cin width  cin label cin sync clears buffer resetscin clear error flags setcout nenter price article cin price input price controlling output cout fixed setprecision  narticle label label price price endl program continuedreturn  input buffer cleared error flags reset calling sync andclear methods thisensures program wait input price  characters entered label note formatted input sample program formatted input71the operator belongs istreamclass takes current number baseand field width flags account reading input number base specifies integer read octal hexadecimalthe field width specifies maximum number characters read string reading standard input cinis buffered lines keyboard input thusnot read confirmed pressing return key user press backspace key correct input errors provided return key pressed input displayed screen default input fieldsthe operator read inputfield convert input reference tothe type supplied variable write result variable white space characters blanks tabs lines default char cin enter characterwhen keys pressed return tab blank return character stored variable input field terminated white space character characterthat processed int cin typing123ff return stores in variable thecharacters follow ffand newline character remain input buffer willbe read read operation reading strings word read white space character willbegin input field string city cin city read word iflao kaiis input laowill written citystring number charac ters read limited field width field width ofn maximum nð1characters read byte required null charac ter initial white space program opposite illustrates point clear input buffer chapter input output streams enter hexadecimal digits floating point number include iostream include iomanip namespace std int main int number  cout nenter hexadecimal number endl cin hex number input hex numbercout input number endl invalid input occurred cin sync clears buffer cin clear reset error flagsdouble     cout nnow enter floating point values endl cout  number cin read numbercout  number cin read numbercout fixed setprecision  nthe sum numbers setw  endl cout nthe product numbers setw  endl return  formatted input numbers sample program formatted input numbers73inputting integers hex oct decmanipulators stipulate charactersequence input processed hexadecimal octal number int cin oct input will interpreted octal corresponds decimalvalue  cin hex input interpreted hexadecimal enabling input f0aor f7 inputting floating point numbers operator interprets input floating point number variable isa floating point type float double long double floating point num ber entered fixed point exponential notation double cin character input converted doublevalue case input    e10is valid input errors input match type variable defined int cin input a5the digit will stored variable input fieldbegins input type required input sequence beprocessed letter type conversion performed thevariable written internal error flag raised sense read numerical values individually clear theinput buffer error flags set entry chapter  control flow chapter  exception handling pro gram react input errors chapter input output streams reads text operator function getline include iostream include string namespace std string header demonstrates unformatted input int main string word rest cout header npress return endl cin read saving cout nplease enter sentence nend return endl cin word read wordgetline cin rest remaining text character cout nthe word word nremaining text rest endl return   text entered  sample program requires word white space entered note unformatted input output sample program unformatted input output75unformatted input output fields formatting flags havebeen set bytes read stream passed program aware white space characters preceding input processed reading writing charactersyou methods andput read write single characters theget method reads character stream stores charvariable char cin character white space character newline stored thechvariable prevent happening usecin read white space character theget method called arguments case returns character code type int int cin theput method unformatted output character character tobe output passed argument cout statement equivalent cout field width undefined orhas set  reading linethe operator read word string read awhole text global function getline introducedearlier chapter getline cin text statement reads characters cinand stores string variable textuntil character occurs delimiting charac ter passing character getline function argument getline cin delimiting character read stored string characters subsequent period remain input buffer stream exercises chapter input output streams program resistant mistakes include iostream namespace std int main char string word cin press return key cout enter word containingthree characters cin setprecision  word cout input endl return  exercisesscreen output exercise  article number number pieces price piece dollar program listing exercise  exercises77the variable type defines character number read output tipexercise  output generated program entitled formatted output floating point numbers chapter exercise  formulate statements perform left justify number   output field width  output number   fixed point number rounded dec imal places justifying output field width  output number   exponential spaces field width  exercise  write program reads article number quantity unit price keyboard outputs data screen displayed opposite exercise  write program reads character code positive integer keyboard displays character character code octal hexadecimal screen character output number  entered exercise  correct mistakes program opposite solutions chapter input output streams solutionsexercise  output sample program formatting floating point numbers default showpoint  fixed   scientific  e  exercise  include iostream include iomanip setw setprecision namespace std int main double       cout left setw  endl cout fixed setprecision  setw  endl cout scientific setprecision  endl output  e  field width  convenient return  exercise  input formatted output article characteristics include iostream include iomanip namespace std int main long number  int count  double price   input cout nplease enter article characteristics cout article number cin number solutions79cout number pieces cin count cout price piece cin price output cout tarticle number quantity price piece cout setw  number setw  count fixed setprecision  setw  price dollar endl return  exercise  include iostream include iomanip manipulator setw namespace std int main unsigned char  unsigned int code  cout nplease enter character code cin code code save output cout nthe character endl code character code input  cout ncharacter codes setw  dec code octal setw  oct code hexadecimal setw  hex code endl return  chapter input output streams entering   stored low byte variable code    assignment variable ccontains  representing character exercise  corrected program corrections commented include iostream include iomanip manipulator setw include string class string namespace std int main string word read word char needed cout cin cout press return key cin input newline charactercout enter word characters cin setw  word setw  setprecision  cout input word endl chreturn  operators forfundamental types chapter operators needed calculations selections introduced overloading operators needed bit manipulations introduced chapters chapter  chapter operators fundamental types include iostream namespace std int main double cout nenter floating point values cin cout average numbers   endl return  binary arithmetic operators binary operator operands binary arithmetic operators sample program sample output program enter floating point values    the average numbers   operatorleft operandright operand operatorsignificance additionsubraction multiplication division remainder binary arithmetic operators83if program process data input receives define opera tions performed data operations executed depend type data add multiply compare numbers sense multiply strings sections introduce operators beused arithmetic types distinction unaryandbinaryoperators aunary operator operand binary operator binary arithmetic operators arithmetic operatorsare perform calculations opposite anoverview aware divisionsperformed integral operands produce integral exam ple  computes  operands floating point number result floating point number division   producesan exact result   remainder divisionis applicable integral operands returns remain der integral division  computes  expressions simplest form expression consists constant variable onefunction expressions operands operators form complex expressions expression generally tend combination operators operands expression voidtype returns case arithmeticexpressions operands define type expression examples int  double    type int   sin type double ð  type double operand type doublean expression operand expression    adds  normalmathematical rules multiplication addition apply evaluating anexpression operators higher precedence exam ple  is calculated adding  parentheses apply adifferent precedence order    multiplies   chapter operators fundamental types include iostream namespace std int main int   cout endl output cout endl output cout endl output  cout endl output return  unary arithmetic operators unary arithmetic operators precedence arithmetic operators effects prefix postfix notation operatorsignificance unary sign operatorsincrement operator decrement operatorprecedenceoperator groupinghighlow postfix left left rightleft rightright left prefix sign addition subtraction unary arithmetic operators85there unary arithmetic operators sign operators incrementoperator decrement operator sign operators thesign operator ðreturns operand inverts sign int ð5 cout output thesign operator performs operation simply returning itsoperand increment decrement operators increment operator modifies operand adding  beused constants reason iis variable postfix notation prefix notation raisethe iby1 cases operation is performed prefix postfix operators differencebecomes apparent expression imeans thevalue ihas incremented  expression retains theoriginal difference iori forms morecomplex expression incremented iis applied original iis applied iis incremented decrement operator modifies operand reducing theoperand  sample program opposite prefix postfix notation beused precedence expression multiple operators evaluated float val   cout val ð     operator precedence determines order evaluation operators andoperands grouped table opposite highest prece dence higher precedence evaluated val     result   valis incremented operators equal precedence expression evaluated incolumn table   is equivalent    chapter operators fundamental types demonstration compound assignments include iostream include iomanip namespace std int main float cout enter starting cin cout enter increment cin cout multiplication cout enter factor cin cout finally division cout supply divisor cin cout current lucky number digits point fixed setprecision  endl return  assignmentssample program assignments87simple assignmentsasimpleassignment assignment operator assign variable anexpression expressions type variable left assigned assignment operator examples       assignment operator low precedence case rightside expression evaluated result assigned variable left assignment expression assigned sin   assignment number  is assigned xand passed function anargument multipleassignments evaluated left  case is assigned jand compound assignmentsin addition simple assignment operators compound assignment opera tors simultaneously perform arithmetic operation assignment exam ple examples  equivalent toi   equivalent toi  compound assignments implicitly paren theses demonstrated fact precedence compound assignment low simple assignment compound assignment operators composed binary arithmetic opera tor bit operators compound operators modify variable evaluating complex expression anassignment operators technique referred avoiduse effects lead errors impair readability programs chapter operators fundamental types relational operators relational operators precedence relational operators examples comparisons operatorsignificance thanless equal togreater thangeater equal toequalunequal arithmetic operators assignment operatorsprecedenceoperator highlow5 false truefalsetrue1       comparisonresult relational operators89the result comparisonseach comparison booltype expression trueorfalse wheretruemeans comparison correct falsemeans compari son incorrect length circuit false true variables lengthandcircuitcontain number comparison istrueand relational expression true expressions containdifferent values expression false individual characters compared character codes compared theresult depends character set expression truewhen ascii code true   precedence relational operators relational operators lower precedence arithmetic operators higher prece dence assignment operators bool flag max ð  max is evaluated result compared relational expression falseortrue assigned flagvariable followingexample int result result length  limit length  evaluated result compared limit ofthe relational expression assigned resultvariable resultis inttype numerical assigned falseortrue forfalseand1fortrue common assign performing comparison parenthesesmust case result length  limitour stores result length  variable resultand comparesthis expression limit assignment operator compare expressions compiler generatean error message left variable mistake caused headaches lots beginners troubleshooting programs note chapter operators fundamental types numeric xorx  interpreted false   isinterpreted true note logical operators truth table logical operators examples logical expressions truetruetrue falsefalsetruefalsefalsefalsetruetruefalsefalsetruetruefalseaba truefalsetrue falsea   falsetruetruefalsex x  x   xyresult logical expression logical operators91the logical operators comprise boolean operators create compound conditions perform conditional execution program depending multiple conditions logical expression falseortrue depending log ical expression correct incorrect relational expression operands order evaluation operands boolean type operators booltype operands anytype converted boolcan including arithmetic types inthis case operand interpreted false converted false of0 is interpreted true theoroperator return trueonly operand true valueof expressionexample length   length   istrueiflengthis  or greater   theandoperator return trueonly operands true logicalexpressionexample max cin number istrue provided indexis maxand number input ditionindex max met program attempt read number oneimportant feature logical operators fact fixed orderof evaluation left operand evaluated result ascer tained operand evaluated thenotoperator return trueonly operand false variable flagcontains false  flagreturns boolean true precedence boolean operators operator higher precedence precedence operatorsis higher precedence assignment operator lower precedence operators permissible omit parentheses examples earlier chapter operator unary operator higher precedence refer tableof precedence appendix details exercises chapter operators fundamental types evaluating operands logical expressions include iostream namespace std int main cout boolalpha outputs boolean values true falsebool res false int  res   cout result   res endl cout endl int  res cout res res endl  res cout res res endl return  exercisesprogram listing exercise  exercises93exercise  values arithmetic expressions  b  c   d   e   f   exercise  operands operators expression ð4 ð   insert parentheses form equivalent expressions assigned variable xif variable ihas avalue ð2 exercise  theintvariablexcontains number  calculate logical expressions  ð1b c  exercise  screen output program opposite generate solutions chapter operators fundamental types solutionsexercise  b c  d e f exercise  ð4 ð   will assigned variable exercise  trueb falsec falseexercise  result   truevalue res true   res true    control flow chapter introduces statements needed control flow program loops forselections switch conditional operator jumps goto continue break chapter  chapter control flow average cpp computing average numbers include iostream namespace std int main int count  float sum   cout enter integers break letter endl cin sum count cout average numbers sum count endl return  long expression true statementthewhilestatement structogram whilesample program sample output program enter integers break letter   q average numbers   statement97loops perform set instructions repeatedly set instructions beiterated called loop body offers language elements formulate iterationstatements number times loop repeated isdefined controlling expression case whileandforstatements expres sion verified loop body executed whileloop performedonce testing thewhilestatement takes format syntax expression statement loop bodywhen entering loop controlling expression verified expressionisevaluated true loop body executed controllingexpression evaluated controlling expression false expressionevaluates false pro gram execute statement whileloop common practice place loop body source code toindent statement improve readability program int count  count  cout count endl illustrates controlling expression boolean expression controlling expression expression converted thebooltype including arithmetic expressions learned tion boolean operators converts falseand values convert totrue building blocksif repeat statement program loop place thestatements blockmarked parentheses block syntactically equivalent astatement block syntax requires statement program opposite calculates average sequence integersinput keyboard loops statements statements block controlling expression cin xis true provided user inputs integer result converting expression cin xto booltype truefor anyvalid input falsein case invalid input user types letter insteadof integer terminates loop executes statement chapter control flow euro1 cpp include iostream include iomanip namespace std int main double rate   exchange rate euro dollarcout fixed setprecision  cout teuro tdollar int euro  euro  euro cout euro euro rate endl return  theforstatement structogram forsample program screen output euro dollar1             expression1statementexpression3as long expression2 true statement99initializing reinitializinga typical loop counterthat initialized tested controlling expression andreinitialized loop int count  initialization count  controlling expression cout count loop endl count reinitialization case forstatement elements control loop theloop header expressed forloop int count count  count  count cout count loop endl expression initialize reinitialize loop forloop hasthe form syntax expression1 expression2 expression3 statementexpression1is executed initialize loop expression2isthe controlling expression evaluated prior executing loop body ifexpression2isfalse loop terminatedifexpression2istrue loop body executed subsequently loop isreinitialized executing expression3andexpression2is tested define loop counter expression1 thecounter loop leaving loop int   cout illustrates loop body statement thecase loop header statements improve readabil ity statement occupy chapter control flow eurodoll cpp outputs table exchange euro include iostream include iomanip namespace std int main long euro maxeuro eurosdouble rate exchange rate euro cout table exchange euro ð cout nplease rate exchange euro cin rate cout nplease enter maximum euro cin maxeuro outputs table titles columns cout setw  euro setw  trate rate endl formatting cout fixed setprecision  endl long lower upper lower upper limitstep step width outer loop determines actual lower limit step width lower  step  lower maxeuro step  lower  step loop outputs block euro lower upper step  euro upper euro maxeuro euro step cout setw  euro setw  euro rate endl return  theforstatement continued sample program statement continued any expressions forstatement typeat semicolons shortest loop header statement infinite loop controlling expression assumed true expression2is missing followingexample expression loop header equivalent expression loop body executed aslong test expression true comma operator comma operator include expressions single expressionis syntactically correct variables initialized loop header forstatement syntax applies comma operatorsyntax expression1 expression2 expression3 expressions separated commas evaluated left int limit  limit  limit  cout setw  comma operator separates assignments variables iandlimitand isthen calculate output xin singlestatement comma operator lowest precedence operators lower thanthe assignment operators leave parentheses expression expression comma operator avalue belongs type type defined expression statement separated commas   statements brackets executed product ofa bis assigned chapter control flow long expression true statement tone cpp include iostream namespace std const long delay l int main int tic cout nhow tone output cin tic long  delay cout tone endl tic  cout acoustic interlude return  thedo whilestatement structogram whilesample program statement103in contrast whileandforloops controlled headers whileloop controlled footer controlling expression evaluated afterexecuting loop loop body performed syntax dostatementwhile expression whileloop executed loop body processed thecontrollingexpressionevaluated loop body iterated result istrue loop terminated thedo whileloop semicolon note nesting loopsloops nested loop body loop ansi standardstipulates maximum depth  nested loops program opposite outputs number tones number beingdefined user input program loops nested time theouterdo whileloop repeated short break occurs break caused innerforloop variable iis incremented to delay text tone subsequently output tone generated outputting thecontrol character bell ascii code  represented escape sequence whilestatement program outputs tone usertypes0or negative number chapter control flow truefalse statement1statement2 expression if_else cpp demonstrates statements include iostream namespace std int main float min cout enter numbers cin cin inputs valid computeif lesser min elsemin cout nthe smaller number min endl elsecout ninvalid input endl return  selections elsestructogram elsestatement sample program sample output program enter numbers     smaller number   selections theif elsestatement choose conditional statements syntax expression statement1 elsestatement2 program expressionis evaluated program controlbranches result true statement1is executed statement2is executed cases provided elsebranch exists elseandexpressionisfalse control jumps statement ifstatement nestedif elsestatements program opposite illustrates multiple elsestatements nested butnot ifstatement elsebranch solve problem elsebranch nearest preceding ifstatement haveanelsebranch    cout positive odd number elsecout positive number elsebranch belongs factthat statement indented code block redefine association elsebranch    cout positive odd number elsecout negative number defining variables ifstatements define initialize variable ifstatement expression true ifconverting variable booltype yields true case variable isavailable ifstatement int func work return function func initialize variable thisvalue  statements block executed variable xno longerexists leaving ifstatement chapter control flow expression expression expression truefalse truetruefalse falsestatement1statement statement  statement2 speed cpp output fine driving fast include iostream namespace std int main float limit speed toofast cout nspeed limit cin limit cout nspeed cin speed toofast speed ð limit  cout lucky endl toofast  cout fine payable  dollars endl toofast  cout fine payable  dollars endl elsecout hand driver license endl return  ifchainsstructogram ifchainsample program chains107layout program flow ifchain selectively execute options ifchain implies series embedded elsestatements layout asfollows expression1 statement1else expression2 statement2 expression statement statement  ifchain executed expression1 expression2 areevaluated order occur expressions proves true statement executed terminates ifchain expressions true elsebranch ifstatement exe cuted elsebranch program executes statement theelse ifchain sample program program opposite ifchain evaluate penalty driving fastand outputs fine screen speed limit actual speed read keyboard user types as speed limit   actual speed expressions true elsebranch executed outputs message hand yourdriver license chapter control flow truefalse expression1expression2 expression greater cpp include iostream namespace std int main float cout type numbers cin cin input invalid cout ninvalid input endl cout nthe greater endl return  conditional expressionsstructogram conditional expression sample program sample output program type numbers     greater   conditional expressions109conditional operator conditional operator form expression produces twovalues depending condition produced expression depends condition called conditional expression contrast elsestatement selection mechanism based expres sions expressions selected conditional expression concise alternative elsestatement syntax expression expression1 expression2expressionis evaluated result true expression1is evaluated notexpression2is executed conditional expression eitherthe expression1orexpression2  statement assigns absolute ato variable ahas positive valueof12 number is assigned ahas negative ð8 thenumber8is assigned sample program stores conditional expression vari ablez statement equivalent toif  elsez precedence conditional operator operator operands precedence ishigher comma assignment operators lower opera tors omit brackets result conditional evaluation assigning sampleprogram opposite xis printed screen xisgreater yis printed assign result complex expressions variable explicitlyto improve readability program chapter control flow case const1 case const2 statementsbreakstatementsbreakstatementsbreakdefault switch expression evaluates input int command menu function menu reads command switch command evaluate command case case action1 carry st action break case case action2 carry nd action break default cout flush beep invalid input selecting switchstructogram switchstatement selecting switch theswitchstatement ifchain switchstatement choose mul tiple alternatives switchstatement compares oneexpression withmultiple constants switch expression case const1 statement break case const2 statement break default statement expressionin switchstatement evaluated integraltype result compared constants const1 const2 caselabels constants integral types boolean values character constants integral types expression matches caseconstants programbranches case label program continues caselabelslose significance breakto leave switchstatement unconditionally statement isnecessary avoid executing statements contained caselabels follow expression match caseconstants programbranches defaultlabel define defaultlabel noth ing defaultdoes label addi tionalcaselabels differences switchandelse ifchainstheelse ifchain versatile switchstatement selection canbe programmed ifchain frequently compare thevalue integral expression series values case case switchstatement opposite switchstatement easily read anequivalentelse ifchain switchstatement chapter control flow long expression true break statement loop ascii cpp output ascii code table include iostream include iomanip namespace std int main int  ascii code  control characters true cout ncharacter hexadecimal int upper upper  upper  cout char character setw  dec setw  hex endl upper  break cout ngo return return char answer cin answer answer answer break cin sync clear input buffer return  expression char acyields acof type char note jumps break continue gotostructogram breakwithin whilestatement sample program breakstatement jumps break continue goto breakthebreakstatement exits switchor loop breakkeyword jump statement switchor loop program opposite outputs group  ascii characters andtheir codes breakkeyword places breakexitsfrom infinite true loop maximum  beenreached user opt continue terminate program secondbreakstatement terminate whileloop program continuethecontinuestatement loops opposite break loop begun case whileordo whileloopthe program jumps test expression forloop reinitialized int   processes integers   continue process numbers gotoand labelsc offers gotostatement labels jump pointmarked label function exit deeply embedded loop construction error goto errorcheck errorcheck error handlingalabelis colon labels precede statement program gotostatements gotostatement exit code block avoid entering code blocks method exercises chapter control flow           multiplication table exercisesscreen output exercise  note exercise  function time initialize random number generator include time prototype time include stdlib prototypes srand rand long time number seconds srand unsigned initialize exercises115use time seed random number generator opposite time functionreturns number seconds      longvalue secvariable converted tounsignedbyunsigned passed srand function note exercise  rewrite eurodoll cppprogram chapter replace forloops whileloops exercise  write program outputs complete multiplication table opposite screen exercise  write program reads integer   keyboard seed random number generator output  random numbers   screen exercise  write program numerical game computer stores random number   player user attempts guess player total attempts wrong guess computer tells user number high low attempt wrong number output screen player wins guess number attempts player allowed repeat game solutions chapter control flow solutionsexercise  theforloops program eurodoll cppare equivalent whileloops outer loop sets lower limit step width lower  step  lower maxeuro loop outputs block euro lower upper step  euro upper euro maxeuro cout setw  euro setw  euro rate endl euro step step  lower  step exercise  multtable cpp outputs multiplication table include iostream include iomanip namespace std int main int factor1 factor2 cout multiplication table endl outputs cout  factor2  factor2  factor2 cout setw  factor2 cout  endl solutions117 outputs remaining lines table factor1  factor1  factor1 cout setw  factor1 factor2  factor2  factor2 cout setw  factor1 factor2 cout endl cout shift tablereturn  exercise  random cpp outputs  random numbers   include stdlib prototypes srand rand include iostream include iomanip namespace std int main unsigned int seed cout nplease type integer   cin seed reads integer srand seed seeds random number generator cout random numbers   cout setw  random number setw  rand   endl return  chapter control flow exercise  numgame cpp numerical game computer include cstdlib prototypes srand rand include ctime prototype time include iostream namespace std int main int number attempt char wb repeat finish long time time seconds srand unsigned seeds random number generatorcout numerical game endl cout nrules game endl wb cout number   mind chances guess correctly endl number rand   bool false int count  count  cin sync clear input buffer cin clear cout count attempt cin attempt attempt number cout small endl attempt number cout big endl true cout number question number endl elsecout ncongratulations endl cout repeat ñ finish ñ docin wb wb wb return  symbolic constants andmacrosthis chapter introduces definition symbolic constants macros illustrating significance addition standard macros character handling introduced chapter  chapter symbolic constants macros sintab cpp creates sine function table include iostream include iomanip include cmath namespace std define   define start   lower limit define   upper limit define step   step width define header cout sine function table int main header title table head cout setw  setw  sin fixed endl double start step  step cout setw  setw  sin endl cout endl endl return  macros sample program screen output table sine function sin             macros121c simple mechanism naming constants sequences commands fordefiningmacros simply preprocessor definedirective syntax define substitutetextthis defines macro called preprocessor replaces namewithsubstitute textthroughout subsequent program program oppositepage piis replaced number  throughout programin phase compilation exception general rule substitution place withinstrings statementcout outputs piand numerical symbolic constantsmacros replaced constants pimacro symbolicconstants note equals sign semicolon thesewould substitute text macros defined subsequent definedirec tives program opposite symbolic constant pito define constants working macros preprocessor directive includes definedirective aline substitute text longer terminate backslash continue substitute text illustrated bythe macro headeron opposite rules apply naming variables apply naming macros isstandard practice capitalize symbolic constants distinguish names variables program macros program transparent flexible twomain advantages  good readability macro macro2 easy modify change constant pro gram simply change symbolic constant definedirective chapter symbolic constants macros ball1 cpp simulates bouncing ball include iostream include string namespace std define delay l output delay define cls cout  j clear screen define locate cout  position cursor row column svoid main int    speed  string floor  header jumping ball cls locate   cout header locate   cout floor true ball bounce terminate interrupt key locate cout endl ballfor long wait  wait delay wait   bounce wall  floor speed speed speed  speed  restart speed  acceleration locate cout clear outputy speed position macros parameters sample program macros parameters1231these escape sequences valid standard unix terminals driver ansi sysmust beloaded dos dos box win95 win98 win win  functions based calls offered download macros arguments supply appropriateparameters defining macro parameters replaced valid arguments time define square defines macro called square parameter macro mustbe left bracket macro called exampleexample square  preprocessor inserts substitute text current arguments beexpandedas casez   careful brackets param eters macros omitting brackets previous square causethe expression expanded   outer brackets definition ensure macro acomplex expression square calculated result calculations macros screen control program opposite macros change appearance screen peripheraldevices screen printers controlled special character sequences esc character  octal  knownasescape sequences number ansi standard escape sequences exists screen trol see appendix escape sequences screen control overview themost sequences clsis macro parameters escape sequence  jtoclear screen locateis macro parameters locateuses escape sequence  shto place cursor position nextscreen output values zfor sfor column require input withz  representing left corner screen window ball thrown coordinates  and bounces floor walls direction horizontally ball constant speed or  direction vertically ball subject constant acceleration  expressed speed  chapter symbolic constants macros include proj include proj include proj header file proj hmacrosclassesand typedefinitionsprototypes ofglobal functionssourcefile sourcefile sourcefile nworking definedirectiveusing macros source files working define directive125you place definedirective program long priorto macro recommended place definitions source file ease location modification macros source files sense create aheader file include header file source files method lends large scale software projects programmers working project access set macro definitions declarations cept illustrated opposite header file proj macros parameters called functions note follow ing differences macros macro definition visibleto compiler substitute text isinserted compiled time macro called reason macro statements avoid inflating object file time macro called speed program execution improve program branch routines contrast normal func tion calls apparent macros loops effects macros substitute text multipleinstances parameter statement square expands variable xis incremented productdoes represent square incremented number functions functions compiled independently linker links theminto executable file program branchesto function iscalled reduce speed execution comparison macro executable file shorter instance function code compiler checks argument types effects withmacros occur inlinefunctions introduced chapter functions alterna tive macros chapter symbolic constants macros header filebasis hsource fileapplication cppheader filestatist hheader filegraph include iostream include basis ifndef_basis_h_ define_basis_h_ define bsize  endif content basis include iostream include basis include statist include graph int main return  conditional inclusionmultiple inclusions header files conditional inclusion127redefining macros macro simply redefined macro definition valid removed byusing undefdirective supply parameter list amacro parameters define min min called undef minthe macro mincannot point defined witha meaning definedirective conditional inclusionyou preprocessor directives ifdefand ifndefto compiler tocheck macro defined syntax ifdef block compiled defined endifin case ifndefdirective code block compiled endifonly macro namehasnotbeen defined conditional inclusion elsebranching nesting permissible pre processor directivesin appendix macro definition include substitute text valid define myheadera symbol substitute text identify header files avoid multi ple inclusion header file named article identify header defin ing symbol _article_ file ifndef _article_ define _article_ content header file endifif included header _article_will defined thecontents header file compiled technique employed standard header files chapter symbolic constants macros toupper cpp filter converts capitals include iostream include cctype namespace std int main char long nchar  counts charactersnconv  converted characterswhile cin long character nchar read increment islower lowercase letter toupper converts character nconv counts cout outputs character clog ntotal characters nchar ntotal converted characters nconv endl return  program reads characters file file reading keyboard input file issimulated ctrl dos ctrl unix note standard macros character manipulation sample program macros character classification isalpha islower isupper isdigit isalnum isspace isprint cis lettercis small lettercis capital lettercis digitcis letter digitcis space lettercis printable lettermacroreturn true standard macros character manipulation129the introduces macros classify convert single characters themacros defined header files ctype handcctype case conversion macro toupperto convert lowercase letters uppercase c1andc2are variables type charorintwherec1contains code lowercase letter youcan statementexample toupper assign uppercase letter variable c1is alowercase letter toupper returns character sample program opposite reads standard input converts lettersfrom lower uppercase displays letters toupperonly converts lettersof english alphabet default national characters accentuated charac ters languages dealt individually program type filterand applied files refer details macro toloweris converting uppercase letters lowercase testing characters number macros classifying charac ters macro islower checks ccontains lowercase letterreturning true case falsein cases char cin reads classifiesif isdigit character cout character digit usage islower definition toupper macro define toupper islower fact codes lower uppercase letters differby constant case commonly character sets ascii ebcdic opposite overview macros commonly classify char acters chapter symbolic constants macros lines cpp filter numbers lines include iostream include iomanip include string namespace std int main string int number  getline cin long read cout setw  number endl return  redirecting standard input output sample program program  redirecting standard input lines text dat morethis outputs text file text datwith numbers addition datastream standard filter pauses screen output pageis  redirecting standard output lines dat program reads keyboard adds output filenew dat note file exists overwritten uselines text dat toappendprogram output file text dat file text datdoes notalready exist created type ctrl dos ctrl unix terminate keyboard input redirecting standard input output131these examples assume compiled program lines exeis current directory ina directory defined path variable note filter programs previous program toupper cpp reads characters standard input processesthem sends standard output programs type filters program toupper cpp loopwhile cin repeated test expression cin yields true longas valid character read variable loop terminated fileor error occurs test expression cin false program opposite lines cpp filter reads text andoutputs text numbers case standard input read getline cin test expression getline cin istruewhile read filter programs filter programs extremely operating systems dos win winnt unix capable redirecting standard input output easy data manipulation output text datwith numbers screen canexecute program linesby typing command lines text datthis syntax program read data file keyboard standard input redirected opposite additional examples redirect input outputsimultaneously lines text dat datin contents text datand numbers stored dat program generate screen output exercises chapter symbolic constants macros function key f1 ins del pressed functiongetch initially returns  yields key number note exerciseshints exercise  function kbhit test user pressed key function getch read character avoids interrupting program reading keyboard functions standardized ansi functions operating routines declared header file conio function kbhit prototype int kbhit returns  key pressed  key pressed character read getch function getch prototype int getch returns character code special return reaching file error occurs contrast cin getch input buffer reading characters character entered passed directly program printed screen additionally control characters return  ctrl  esc  passed program int kbhit  key pressed getch character  character esc exercises133since program output single character control character willneed store predecessor character counters count thenumber characters control characters current string note exercise  writea macro abs returns absolute number macro max determines greater numbers cases conditional operator add macros macros chapter header file mymacros hand test macros supports screen control macros add screen control macros header write macro named color define foreground background colors output exercise  modify program ball1 cpptoa display white ball blue background terminate program esc key pressed increase speed ball key decrease speed key functions kbhit andgetch opposite solve parts problem exercise  write filter program display text contained file program filter control characters input exception characters tabulator treated normal characters purpose exercise control characters defined codes to31 sequence control characters represented single space character single character character appearing control characters output solutions chapter symbolic constants macros solutionsexercise  mymacros header file macros abs min max cls locate color normal invers symbolic constants colors ifndef _mymacros_ define _mymacros_ include iostream namespace std macro abs abs val returns absolute val define abs  macro min min returns minimum define min macro max max returns maximum define max macros controlling screen macro cls cls clears screen define cls cout  j macro locate locate row column positions cursor row column   upper left corner define locate cout  solutions135 macro color color foreground background sets foreground background color output define color cout     flush  light foreground x foreground x background color values macro color color white blue define black  define red  define green  define yellow  define blue  define magenta  define cyan  define white  macro invers invers output inverted define invers cout  m macro normal normal sets screen attributes default values define normal cout  m endif _mymacros_ exercise  ball2 cpp simulates bouncing ball include iostream include string namespace std include conio kbhit getch include mymacros chapter symbolic constants macros define esc  esc terminates programunsigned long delay  delay outputint main int    speed  bool false string floor  header bouncing ball commands esc terminate speed slow color white blue cls locate   cout header locate   cout floor locate   cout commands long flag set locate cout ballfor long wait  wait delay wait   bounce wall  floor speed speed speed  speed  kick speed  speed locate cout clear screeny speed positionif kbhit  key pressed switch getch case delay delay  speed upbreak case delay delay  slow downbreak case esc true terminate normal cls return  solutions137exercise  noctrl cpp filter ignore control characters noctrl file include iostream namespace std define isctrl   int main char prec  character predecessor long nctrl  nchar  number control characters characterswhile cin isctrl control characters nctrl nchar  normal character nctrl  cout nctrl  switch nchar case  break case  cout prec predecessor default cout current character prec return  intentionally left blank converting arithmetic types chapter introduces implicit type conversions performed arithmetic types occur expressions additionally operator explicit type conversion introduced chapter  chapter converting arithmetic types implicit type conversions integer promotions boolshortchar signed char unsigned charintintunsigned intunsigned shortifint equals longifint equals shorttype hierarchy exampleshort size  double res   res size  short int doubleintlong doubledoublefloatunsigned longlongunsigned intintnot existent intequalslong implicit type conversions141c mix arithmetic types single expression theoperands operator belong types compiler automatically formsimplicit type conversion common type operation ques tion performed assigned values operands generally assume smaller type converted larger type assignment operator exception rule discussed separately result arithmetic operation belongs common type performthe calculation comparison expressions booltypes matter whattype operands involved integer promotion integer promotionis performed expression bool char signed char unsigned char shortare converted tointunsigned shortis converted intif inttype greater thanshort unsigned intin cases type conversion performed preserve original values booleanvaluefalseis converted andtrueis converted  inttype values greater performing calculations char variablec values cand expressionexample converted intbefore compared usual arithmetic type conversions operands arithmetic types occur integer promotion furtherimplicit type conversions lines hierarchy opposite case type operand highest rank hierarchy applied type conversions integer promotions collectively usualarithmetic type conversions size  sizeis promoted intbefore aninteger division size is performed interim result is converted dou bleand multiplied usual arithmetic type conversions performed binary operators ditional operator provided operands belong arithmetic type excep tions assignment operator logical operators chapter converting arithmetic types sign bit  negative sign bit  negative  extension int  bit  preserved     binary representaion integer as type signed char  bits sign bit  negative sign bit  negative  extension int  bit  preserved     binary representaion integer as type signed char  bits negative number bit pattern interpreted unsigned bit pattern1111   corresponds unsigned charvalue246                note performing usual arithmetic type conversions converting signed integers converting positive number converting negative number bit pattern is computed starting bit pattern and generat ing binary complement binary representation numbersin appendix performing usual arithmetic type conversions143usual arithmetic type conversions retain number provided repre sented type procedure type conversion depends types involved  conversion unsigned type larger integral typeexamples unsigned char tointorunsigned intzero extension performed process bit pattern num ber converted expanded match length type adding zeros left  conversion signed type larger integral typethe type signedexamples chartoint shorttolongsigned integers represented generating binary complement thevalue retained performing sign extension theopposite original bit pattern expanded match length type padding sign bit left type unsignedexamples chartounsigned int longtounsigned longin case negative numbers retained type length bit pattern retained bit pattern beinterpreted differently sign bit loses significance note oppo site type longer sign extension performed bitpattern interpreted unsigned  conversion integral type floating point typeexamples inttodouble unsigned longtofloatthe number converted exponential floating point type valueretained converting longorunsigned longtofloat rounding occur  conversion floating point type larger floating point typeexamples floattodouble doubletolong doublethe retained type conversion chapter converting arithmetic types implicit type conversions assignments  int  long lg  result type int converted long  long lg x654321 short lg x4321 assigned  int ð2 unsigned int  contained converted unsigned int preserving bit pattern multiplied  overflow assigning bit pattern result interpreted int ð4 stored  double db ð4  int unsigned int db assigning ð4 db ð   assigning ð5 db ð4 incompatible  double   float   assigned implicit type conversions assignments145arithmetic types mixed assignments compiler adjusts type thevalue assignment operator match type variable left case compoundassignments calculations normal arithmetic type versions performed type conversion performed rule simple assignments cases occur type conversion assignments  type variable larger type assigned type promoted rules usual arithmetic type conver sions applied case   type assigned larger type demoted procedures depending individual circumstances conversion integral type smaller type type converted smaller type removing significantbyte bit pattern remains interpreted unsigned type unsigned signed cases retained represented type  converting unsignedtype signedtype scale bit pattern retained interpreted signed  conversion floating point type integral typethe floating point number removed  converts integer  rounding achieved adding  to posi tive floating point number subtracting  from negative floating pointnumber converting     to2 integer large small type resultis unpredictable applies converting negative floating point numbers unsignedintegers  conversion floating point type smaller typeif floating point number falls range type valuewill retained accuracy compromised large represented type result unpredictable  chapter converting arithmetic types ellipse cpp program draws ellipse points ellipse center   axes satisfy cos sint   include iostream include cmath prototypes sin cos namespace std define cls cout  j define locate cout  define dot locate define   define mx  point mx define  center ellipse define  length main axis define  length subsidiary axisint main int screen coordinates cls     circle double      int cos   int sin   dot mx dot mx dot mx dot mx locate   return  type conversions sample program type conversions147implicit type conversions function calls case function calls arguments arithmetic types converted types ofthe parameters conversions assignments void func short double prototypeint size  func size  callthe function func parameters belonging shortanddoubletypes function called intarguments leads implicit conver sion sizetoshortand integer todouble intis converted shortthe compiler issues warning dataloss occur explicit type conversion avoid warnings type version explicit type conversion convert type expression explicitly cast operator type syntax type expressionthis converts expression type explicit type conversion isalso casting cast operator type unary operator higher precedence thanthe arithmetic operators int   double double ais explicitly converted double ventions usual implicit type conversion bis converted doubleand floating point division performed exact result   assigned variable casting integer division result would occurred additional operators explicit type conversion cast operatordynamic_cast operators chapters required special circumstances perform type checking runtime converting classes exercises chapter converting arithmetic types convert cpp ñ demonstrates type conversions include iostream include iomanip namespace std int main char v_char cout v_char setw  v_char setw  int v_char endl short v_short ð2 cout v_short dec setw  v_short hex setw  v_short endl unsigned short v_ushort v_short cout v_ushort dec setw  v_ushort hex setw  v_ushort endl unsigned long v_ulong v_short cout v_ulong hex setw  v_ulong endl float v_float ð1 f cout v_float setw  v_float endl cout int v_float setw  dec int v_float endl return  exercisesprogram listing exercise  graphic exercise  thesinefunction sin  pix  exercises1491 plot point curve columns      leads step    extended ascii code characters draw axes cout  arrowheadnote characterdecimaloctal    exercise  function prototype void func unsigned int function called ð1as argument exercise  loop executed unsigned int limit  int ð1 limit exercise  output program opposite executed exercise  write program output sine curve screen graphic opposite solutions chapter converting arithmetic types solutionsexercise  called ð1is converted parameter unsigned int pattern ð1is interpreted unsigned yields greatest unsignedvalue  bit ð1has bit pattern xffffffff interpreted unsigned corresponds     exercise  statement loop executed expression limit variable ð1 implicitly converted unsigned intand itrepresents greatest unsignedvalue exercise  exercise  screen output program v_char v_short  fffe v_ushort  fffe v_ulong fffffffe v_float   int v_float  exercise  sincurve cpp outputs sine curve include iostream include cmath prototypes sin namespace std define cls cout  j define locate cout  define   define start   lower limit define   upper limit solutions151 define pnt  number points curve define step start pnt define xa  row axis define ya  column axisint main int row column cls locate   cout sine function draws coordinate locate xa  axisfor column  column  column cout column ya    cout  toplocate xa  ya  cout pi row  row  row axis locate row ya cout  locate  ya cout  sin toplocate xa  ya  cout  locate xa  ya  cout  displays sine function int begpt ya endpt begpt pnt column begpt column endpt column double column ya step row int xa  sin   locate row column cout locate   cursor rowreturn  intentionally left blank the standard classstringthis chapter introduces standard class string represent strings defining strings methods string manipulation include inserting erasing searching replacing comparing concatenating strings chapter  chapter the standard class string stringliteral length string message memory string1 cpp strings include iostream include string namespace std string prompt enter text globalline  stringsint main string text string cout endl prompt endl getline cin text reads textcout endl text text size characters long endl strings string copy text copy thestart text    characters starting position  cout text copy endl text  assignment cout endl  characters start endl text endl return  defining assigning strings initializingstring message good morning sample program objects class stringdo string terminating character  casewith strings note defining assigning strings155c standard class stringto represent manipulate strings allowing forcomfortable safe string handling string operations required memory space automatically reserved modified programmer concern internal memory allocation thestringclass defined stringheader file mentioned chap ter  classes operators overloaded strings defined stringclass easy copying catenation comparison additionally methods string manipulation insertion erasing searching replacing initializing stringsa string object belonging stringclass initialized youdefine usinga predefined string constanta number charactersa predefined string string string initialized explicitly string length is created length string current number characters string stored internally accessed length method equivalent size string message good morning cout message length output string assignmentswhen assign string current contents replaced charactersequence assign stringobject stringa string constant ora single character memory space required adjusted automatically program opposite function getline intro duced earlier chapter store text keyboard string trast operator reads word ignoring leading white space bothcases original content string lost chapter the standard class string string2 cpp reads lines text outputs reverse order include iostream include string namespace std string prompt enter text  int main prompt terminate input cout prompt endl string text stringswhile true getline cin reads textif length  break looptext text inserts output cout lines text reverse order endl cout text endl return  concatenating strings sample program sample output program enter text terminate input babara bobby susan movies today lines text reverse order movies today babara bobby susan concatenating strings157at operand stringclass object expression good morning mister invalid note stringclass operators defined concatenating theoperators defined comparing strings theseoperators applied strings rules apply precedenceover comparative operators turn higher precedence assignment operators concatenate strings operator concatenate strings join strings string sum s1 sun flower sum s3 concatenates strings s1ands2 result sunflower thenassigned sum strings concatenated operator form expression stringtype expression turn operand complex expression string s1 sun flower s3 seed cout s1 s3 operator precedence operator strings concatenatedbefore sum output concatenation takes place left string constants single characters valid operands expressions strings string good morning cout mister concatenate strings strings concatenated performing concatenation assigningthe result string s1 good luck s1 s1 concatenate s1this creates temporary object result s1 s2and assigns theresult s1 result assignment operator efficient s1 concatenate s1 s1 luck possiblethis adds content string directly s1 operator prefer combination operators chapter the standard class string string3 cpp inputs compares lines text include iostream include string namespace std string prompt enter lines text  int main string line1 line2 key key key cout prompt endl getline cin line1 read firstgetline cin line2 line1 line2 cout lines endl cout smaller cout line1 line2 line1 line2 endl int len1 line1 length len2 line2 length len1 len2 cout lines length cout shorter cout len1 len2 line1 line2 endl cout nrepeat dogetline cin key key key key key return  relational operators yield desired result strings operand object ofclassstring chapter  pointers arrays note comparing strings sample program comparing strings159the comparative operators overloaded stringclass easy comparison strings alsoallows strings formulate conditions branches loops str1 str2 objects type stringif str1 str2 str1 str2 comparisonsstrings compared lexicographically character character thefirst character decide single character smaller greater identical character character codes character set compared ascii character set letter ascii code  smaller letter ascii code  comparison booltype strings s1ands2 s1 s2istrueonly strings identical requires stringsare length s1 s2istrueonly character s1that differs correspon ding character s2is smaller character s2is simply extension s1 comparative operations deduced rules theexpressions1 s2istrueonly s1is true expression comparing strings operand string constant asingle character key compares string keywith single character alterna tive method expressing comparison key string comparisons combined form complex expressions key key controlling expression valid string keycontains letter higher precedence comparative operator versus operator noparentheses required chapter the standard class string position string s1012345678910 position string sbeforestring safterwards012345678910  inserting erasing strings inserting string string s1 summer s1 insert  ashley insert position  statement erasing substringstring summer time erase   start position  quantity  statement inserting erasing strings161thestringclass numerous methods performing string manipulations amethod exists operation inserting erasing searching replacing methods generally passing string constant string sin gle character insertion method insert inserts string position string posi tion passed argument defines character insert string character string occupies position  character position  string s1 summer s1 insert  ashley string ashley inserted string s1at position  character summer string ashley summer isassigned s1 insert string string pass addi tional arguments insert method starting position length thestring string s1 ashley devil sweetheart s1 insert    inserts  characters string s2at position  string s1 strings1then string ashley sweetheart erasingyou erase method delete number characters string starting position supplied argument number characters erased argument string summer time erase   result time statement deletes  characters string sstarting position  erase method called length delete charac ters string string string winter story erase  winter erase arguments delete characters astring chapter the standard class string searching replacing strings replacing substringsa bob string s1 bob s1 replace   statement love string s1 mike love s1 replace     statement  s1s2  s1s2 searching replacing strings163searching search strings instance substring string tains required substring position substring search returned pseudo position npos ð1 returned nposconstant defined inthestringclass reference string npos thefind method returns position substring thestring method requires substring located argument string youth young young int youth young variable firsthas in method rfind locate occurrence string string initializes variable lastwith in int youth rfind young replacingwhen replacing strings string overwrites substring string lengths beidentical replace method perform operation argu ments supply starting position length substring replaced argument replacement string string s1 bob int pos s1 pos  pos string npos s1 replace pos  string s2to replace  characters starting position  ins1 operation s1contains string bob goagain insert string fourth argument definethe starting position define length substring string s1 mike love s1 replace     string s1is changed love chapter the standard class string string4 cpp program counts white space characters word maximum sequence characters white space characters include iostream include string include cctype macro isspace namespace std int main string header counts prompt enter text terminate period return  text stringcout header endl prompt endl endl getline cin text reads text counts white space charactersint indexnspace  number white spacesnword  number wordsbool fspace true flag white spacefor  text length isspace text white space nspace fspace true fspace word nword fspace false cout outputs result nyour text periods characters text length nword white spaces nspace endl return  accessing characters stringssample program accessing characters strings165when manipulating strings access individual characters thatform string operator method purpose anindividual character identified referred subscript position string character  thesecond  subscript operator easiest access single character string subscript operator define string string individual characters string    character string length ð  usethe subscript operator read character string overwrite character provided string defined constant char  statement copies character sto variable contrastexample length ð1 overwrites character string swill string leg invalid indices integral expression error message occurs theboundaries valid overstepped cout  error program reaction invalid undefined requires careful atten tion programmer method perform rangechecks theat methodyou method access single character equivalent tos contrast subscript operator method performs range checking aninvalid exceptionoccurs program terminated atthis point program react exception exercises chapter the standard class string timestr cpp demonstrates operations string time include iostream include string include ctime time ctime namespace std int main long time reads time seconds string ctime converts seconds string cout time endl string   substring starting position   characters long string greeting wonderful  compares stringsgreeting morning  greeting day elsegreeting evening cout greeting endl return  exercisesfor exercise  exercises167the function time returns current time number seconds      thenumber seconds stored variable address supplied secwhen thefunction called function ctime converts number seconds string time returnsthis string string comprises  characters including null character and thefollowing format weekday month day min year example jan      note exercise  write program initialize string s1with string time secondstrings2with string insert string s2in string s1 erase remainder string s1after substring replace substring time ins1with case program determine position substring output string s1on screen program modification exercise  write program reads word keyboard stores string checks word palindrome palindrome reads left left examples palindromes otto deed level subscript operator modify program continually read check exercise  write screen output program opposite solutions chapter the standard class string solutionsexercise  strdemo cpp insert search replace strings include iostream include string namespace std string header demonstrating strings s1 time int main int pos  cout header endl cout s1 s1 endl insert cout ninserting string endl pos s1 pos string npos s1 insert pos cout s1 s1 endl result erase cout nto erase remaining characters endl pos s1 pos string npos s1 erase pos  cout s1 s1 endl result replace cout nto replace time endl pos s1 time pos string npos s1 replace pos  cout s1 s1 endl result return  solutions169exercise  palindrome cpp reads compares lines text include iostream include string namespace std string header testing palindromes prompt enter word  int main string word stringchar key cout header endl key key cout prompt cin word compares character int  word length  word word break characters equal cout nthe word word endl elsecout nthe word word palindrome endl cout nrepeat docin key key key key key cin sync return  chapter the standard class string exercise  program outputs time greeting printed time day time thu nov     have wonderful morning functionsthis chapter describes write functions basic rules topics discussed passing arguments definition inlinefunctionsoverloading functions default arguments principle recursion chapter  chapter functions programcore elements ofc built types operators control structures functions andclasses thestandard libraryself definedfunctions andclasses andother librariessignificance functions elements program significance functions c supports efficient software development lines principle ifyou provide solution complex problem divide problem smaller units identifying objects define classes objects classes functions addi tion inheritance create specialized classes needing change existing classes implementing class define capacities objects member functions program function member func tion functions defined globally function main func tions type belong class represent algorithms general nature search sort functions standard library librariesyou program building block global func tions classes standard library addition libraries special purposes compiler package offer commercial class libraries graphical user interfaces program oflanguage elements coreglobal functions classes standard libraryfunctions classes programmed libraries classes functions belong compounded form separatesource files compiled tested independently software compo nents tested programming complex solution easier improves reliability programs enhance reusability source code compiling libraries include comments ease readability compiled source files modules compounded linker anexecutable file reference libraries include modify source file recompile files large scale projects recommended themakeutility module management integrated developer environment willoffer functionality utility create project includes source files libraries compiler linker settings program pilation chapter functions func1 cpp include iostream namespace std void test int double prototypeint main cout nnow function test called test    callcout nand main endl return  void test int arg1 double arg2 definition cout nin function test  argument arg1  argument arg2 endl type declaration_list function header function block defining functionsexample function definitiongeneral form function defining functions175the describes program global functions chapter  definingclasses describes steps defining member functions definitionfunctions defined order function main program easier understand start reading point wherethe program starts execute function test opposite generalform function read typeis function type type return nameis function formed variable purpose function declaration_listcontains names parameters declares types list function main list declarations wordvoidis equivalent list theparametersdeclared list local variables createdwhen function called initialized values arguments whentest    called parameterarg1is initialized andarg2with   left curved bracket start function block state ments defining function prototype definition function definition function header form prototype func tion difference function defined declaration list arenotfollowed semicolon function code block prototype declaration function describes formalinterface function omit parameter names proto type compiling function definition produce machine code chapter functions area cpp simple function returning include iostream include iomanip namespace std double area double double prototype int main double     res res area  output places cout fixed setprecision  cout area rectangle width setw  length setw   setw  res endl return  defining function area computes area rectangle double area double width double len return width len returns result return functions defining calling function area screen output area rectanglewith width  and length  is   return functions177the program opposite function area defined called previ ously mentioned declare function calling prototypeprovidesthe compiler perform actions function called check number type arguments correctly process return function function declaration function defined samesource file called simple examples define function single source file exception compiler function definition stored source file function called argument type parameter bepassed function parameter arguments kind expressions opposite argument shows expression isalways copied parameter return statement program flow reaches return statementor function code block itbranches function called function type void thereturnstatement function return function thatcalled syntax return expression ifexpressionis supplied expression return thetype correspond function type function type verted functions written returnvalue matching function type function area fact returnstatement containany expression returnexpression parentheses containsoperators expression returnstatement returnstatement ing return function undefined function type void functions voidtype standard function srand perform anaction return chapter functions push return pop stackfurther local objectsreturn addressfirst parameterlast parameter passing arguments calling function called functionstack content calling functionlong func2 int double prototype void func1 int   double long func2 func2 pass long func2 int double definition double   long result result computed return result passing arguments179passing passing values function function called referred passing called function change values arguments calling function copies arguments function arguments passed reference case functionis passed reference object argument access object directly modify passing reference provided func tiontime time sek called address variable sekis passedas argument allowing function store result variable create functions type passing offer advantages function arguments kind expression constants examplethe called function accidental modifications arguments calling functionthe parameters suitable variables functions additional indirect memory access unnecessary fact copying larger objects difficult major disadvantage reason vectors passed reference starting address local objectsthe scope function parameters objects defined function applies onlyto function block valid function objects parameters functions program structure opposite variable functionfunc1 function func2 variables collide refer ence memory addresses applies variables xinfunc1 andfunc2 function local objects stack parameters function areplaced reverse order stack area memory managed accord ing lifo principle stack plates good analogy lastplate stack lifo principle ensures local object created destroyed chapter functions programfunction branching st nd callfunc void func func programinline function st nd callfunc inline void func func copythe executable file instance function machine code hintthe machine code function stored executable file function called hintinline functionscall function defined inlinecall inline function inline functions181jumping routineswhen function called program jumps routine executed fol lows function parameters stack initialized argumentsthe called return address place function called isstored stack program flow branches functionafter executing function program return address stored previ ously return calling function stack occupied function released jumping affect time program thefunction instructions called time branch small function greater time needed execute function define inlinefunctions avoid problem inline definitionthe compiler inserts code inline function address function iscalled avoids jumping routine definitionof inline function isintroduced inlinekeyword function header inline int max int int return program code expand time inlinefunction called whyinlinefunctions instructions inlinefunction instructions compiler ignore inlinekeywordand issue warning aninlinefunction defined source file called simply supply prototype function code instructions compiler sense define inlinefunctions inheader files contrast normal functions function source files inline functions macros inline functions alternative macros parameters macro called preprocessor simply replaces block text contrast inlinefunctionbehaves normal function program flow interrupted function branching compiler performs type check chapter functions computes final capital compound formula capital k0    k0 start capital rate time include math double capital double k0 double double return k0 pow    function capital default arguments prototype double capital double k0 double   double   double endcap endcap capital       okendcap capital     okendcap capital   okendcap capital argument default endcap capital     gap endcap capital   gap function defined default arguments called number arguments forreasons efficiency define versions function note default arguments defining function capital calls default arguments183so calleddefault argumentscan defined functions omit somearguments calling function compiler simply default values missing arguments defining default arguments default values function arguments function called supply declare function void moveto int  int  parameter names usual void moveto int  int  function moveto called arguments moveto moveto  moveto   calls equivalent moveto   ormoveto   define default arguments parameters fol lowing general rules apply default arguments defined function prototype supplied function defined definition occurs source file function calledif define default argument parameter parameters default argumentsdefault arguments redefined prototype scope chapter details topic calls calling function default arguments pay attention follow ing points supply arguments default valuesyou supply arguments replace defaultsif omit argument omit arguments default arguments function number argumentswithout write version function chapter functions random cpp generate output random numbers include iostream include iomanip include cstdlib rand srand include ctime time namespace std bool setrand false inline void init_random initializes random number generator time setrand srand unsigned int time null setrand true inline double myrandom returns random number    init_random return double rand double rand_max inline int myrandom int start int returns random number withinit_random start return rand  start start testing myrandom myrandom int int int main int cout  random numbers     endl   cout setw  myrandom cout endl cout nand  integer random numbers   endl   cout setw  myrandom   cout endl return  overloading functions sample program overloading functions185functions traditional programming languages perform taskbut arguments names define function cal culated maximum integers floating point numbers program functions names int int_max int int double dbl_max double double detrimental efficient naming readability program luckily restriction apply overloading overload functions functions samename int max int int double max double double function share max function max overloaded intanddoubletypes compiler function signature todifferentiate overloaded functions function signatures function signature comprises number type parameters function iscalled compiler compares arguments signature overloaded functions simply calls function double maxvalue   maxvalue max   case doubleversion function max called overloaded functions called implicit type conversion takes place lead ambiguities turn compiler error issued maxvalue max  error signature function type deduce type calling function impossible differentiate overloaded func tions type int search string key string search string functions signature overloaded chapter functions recursive cpp demonstrates principle recursion function reads keyboard outputs reverse order include iostream namespace std void getput void int main cout enter text getput cout nbye bye endl return  void getput char cin getput cout recursive functionsusing recursive function program flow typing return st execution nd execution rd execution main getput getput getput getput getput getput getput cout cout cout recursive functions187recursiona function calls recursive process performed indi rectly function calls function multiple functions called break criterion avoid function infinitely concept local objects define recursive functions recursion requires local objects created time function called objects access local objects function calls effectively local objects stack object created destroyed sample program principle recursion referring sample program opposite theprogram recursive function getput reads text thekeyboard outputs reverse order function getput called main reads character key board storing local variable character function calls reads character keyboard beforestoring local variable chain recursive function calls terminated user pressing returnkey character read feed output program flowbranches previous getput instance outputs character character read finally output pro gram flow handed main practical usagethe logic solutions common problems recursive structure forexample browsing directory trees binary trees data management sort ing algorithms quick sort algorithm recursive functions formu late kind logic efficient elegant manner sufficient memory stack exercises chapter functions exerciseshint exercise  working source files integrated development environment project source files program created ensures source files compiled linked automatically calling compiler linker command sufficient declare source files sum_t cpp sum cppscreen output exercise  nfactorial        exercises189exercise  write function sum parameters calculates argu ments provided returns sum parameters variables type long returns sum type long default argument  declare parameter functionsum test function sum calling methods random integers arguments restructure program store functions main andsum individual source files sum_t cppandsum cpp exercise  write inlinefunction max double double returns maximum xandy maxinstead maxto avoid colli sion definitions max test function reading values keyboard function max called arguments typeschar int long overload max adding inlinefunctionmax char char arguments type char function max called arguments type int exercise  thefactorial positive integer nis defined asn     nwhere  write function calculate factorial number argument number nof type unsigned int returns factorial type long double formulate versions function factorial calculated loop calculated recursively test functions outputting factorials numbers   opposite screen chapter functions  power x0is defined  for number  power xnis defined  nfor negative exponent  power nwhere  yield   power nis defined  case function return valuehuge_val constant defined math hand represents large doublevalue mathematical functions return huge_valwhen result large double note exercise  write function pow double base int exp calculate integral powers floating point numbers arguments base type doubleand exponent type int returns power baseexpof type double calling pow    returns          this definition function pow overloading standard function pow called doublevalues test function reading base exponent keyboard compare result function result standard function solutions solutions191solutionsexercise  sum_t cpp calls function sum default arguments include iostream include iomanip include ctime include cstdlib namespace std long sum long long long  long  int main calls function sum cout computing sums endl srand unsigned int time null initializes random number generator long res rand  rand  rand  rand  res sum cout res endl res sum cout res endl res sum cout res endl return  sum cpp defines function sum long sum long long long long return chapter functions exercise  max cpp defines calls overloaded functions max long function max defined called arguments converted double values type char int long overloading clear conversion include iostream include string namespace std inline double max double double return inline char max char char return string header overloaded function max  int main calls function max double     cout header endl cout enter floating point numbers endl cin cin cout greater number max endl elsecout invalid input endl cin sync cin clear invalid input entered solutions193cout characters endl cout enter characters endl char cin cin cout greater character max endl elsecout invalid input endl cout testing int arguments endl int   cout max endl error function max return  exercise  factorial cpp computes factorial integer iteratively loop recursively include iostream include iomanip namespace std define n_max long double fact1 unsigned int iterative solutionlong double fact2 unsigned int recursive solutionint main unsigned int outputs floating point values places cout fixed setprecision  chapter functions iterative computation factorial cout setw  setw  factorial iterative solution endl  n_max cout setw  setw  fact1 endl cout ngo return cin recursive computation factorial cout setw  setw  factorial recursive solution endl  n_max cout setw  setw  fact2 endl cout endl return  long double fact1 unsigned int iterative solution long double result   unsigned int  result return result long double fact2 unsigned int recursive solution  return   elsereturn fact2  solutions195exercise  power cpp defines calls function pow compute integer powers floating point number overloads standard function pow include iostream include cmath namespace std double pow double base int exp int main tests defined function pow double base   int exponent  cout computing integer powers endl cout enter test values base floating point cin base cout exponent integer cin exponent cout result base power exponent pow base exponent endl cout computing standard function pow base double exponent endl return  double pow double base int exp exp  return   base   exp  return   return huge_val exp  base   base exp exp double power   int  exp power base return power intentionally left blank storage classes andnamespacesthis chapter describing storage classes objects functions storage class responsible defining parts program object function namespaces avoid conflicts naming global identifiers chapter  chapter st0rage classes namespaces file scopeblock scopeprogram scopefunctionmodule module file scopeblock scopefunctionblock scopefunctionstorage classes objects availability objects program storage class specifiersthe storage class object determined bythe position declaration source filethe storage class specifier supplied optionally storage class specifiers usedexternstaticautoregister storage classes objects199when object declared object type defined itsstorage class storage class specifies lifetimeof object period oftime construction object destruction addition storage class delimits program object accessed directly called object scope essentially object declared translationunit translation unit referred module comprises source file piling header files included programmer define object block scopethe object code block defined object longer visible left code block file scopethe object singlemodule thefunctions module reference object modules access object directly program scopethe object program providing common space memory referenced pro gram function reason objects referred global access object defined object storage class independent anyaccess controls elements class namespaces subdivide program scope classes introduced stage lifetimeobjects block scope created automatically code block thatdefines objects accessed statements block calledlocalto block memory objects freed leaving thecode block case lifetime objects automatic define objects block scope runtime program lifetime objects static theprogram flow enters code block pre existing conditions apply objects program file scope static objects created whena program launched program terminated storage classes creating objects scope lifetime youneed storage classes discussed individually sections chapter st0rage classes namespaces cutline1 cpp filter remove white space characters ends lines include iostream include string namespace std void cutline void prototypestring global stringint main getline cin long read cutline shorten cout endl output return  cutline2 cpp function cutline removes tabulator characters string string globally defined source file include string namespace std extern string extern declarationvoid cutline int size position character  blank tab break loop resize length storage class externsource file  source file  storage class extern201defining global objectsif object defined function belongs externstorage class objects storage class program scope read provided defined const modified place program external objects thusallow exchange functions passing argu ments demonstrate point program opposite divided separate source files string global definition toexchange data global objects explicitly initialized definition receive initialvalue  bits  default applies objects belonging classtypes stipulated class global objectsan object belonging externstorage class initially sourcefile defined object defining module declare object declare object compiler issues message stating object unknown declaration type object compiler contrast definition storage class identifier externprecedes objectname declaration extern long position declarationthis statement declares positionas external object type long externdeclaration import object source file global object defined program canbe declared needed position program declare object function source file header file include needed object functions file remember declare object code block object block anexterndeclaration refers object toinitialize object initialize object defining object global objects affect program sparingly large programs particularshould central objects defined extern note chapter st0rage classes namespaces passw1 cpp functions getpassword timediff read examine password include iostream include iomanip include string include ctime namespace std long timediff void prototypestatic string secret isus passwordstatic long maxcount  maxtime  limitsbool getpassword enters checks password return true password bool ok_flag false return valuestring word inputint count  time  timediff start watchwhile ok_flag true count maxcount number attempts cout ninput password cin sync clear input buffercin setw  word time timediff time maxtime time limit break word secret cout invalid password endl elseok_flag true permission return ok_flag result long timediff returns number seconds static long  time long oldsec saves previous time time reads time return oldsec returns difference storage class static storage class static203in contrast objects externdefinition external static object unknown tothe linker retains private nature module note static objects object definition preceded statickeyword object belongs thestatic storage class static int count characteristic static objects static permanent lifetime static objects stack stored data area program external objects contrast external objects access static objects restricted twoconditions apply depending object defined  definition external program functionsin case object external static object designated usingits module collide objects modules  definition code blockthis object internal static object visiblewithin single block object created destroyed leaving block entering block continue work original object rules apply initializing static objects external objects theobject initialized explicitly default applies notes sample programs opposite function getpassword checks password entered permission refusedfollowing unsuccessful attempts  seconds elapsed instructions function source file getpassword cout authorization exit  string secretand thresholds maxcountandmaxtimeare external static variable secin function timediff internal static zeroonly function called sense add function source files providing passwordchanges chapter st0rage classes namespaces strtol cpp function strtolong converts string leading integer integer type long argument string return integer type long digits interpreted base  white spaces sign precede sequence digits conversion terminates string reached character converted reached include string type string include cctype isspace isdigit namespace std long strtolong string str register int  indexlong vz  num  sign number ignore leading white spaces  str size isspace str sign str size str vz  str vz  sequence digits convert integerfor str size isdigit str num num  str  return vz num specifiers autoandregistersample function register variable specifiers autoandregister205autoobjectsthe storage class auto automatic includes objects defined functionbut statickeyword parameters function autoobjects youcanuse autokeyword definition auto float radius equivalent float radius program flow reaches definition object created stack incontrast statictype object object destroyed leaving block autoobjects specific initial initialized explicitly objects belonging class type initialized default values class definition cpu registers increase speed program commonly autovariables stored incpuregistersinstead stack case registerkeyword todeclare object register size intvariable senseto define registervariables variable large case types suchaschar short intor pointers omit type defining register variable anintis assumed compiler ignore registerkeyword number registersavailable register variables depends hardware registers mally program defines registervariables code block thesuperfluous variables autostorage class sample functionthe function strtolong illustrates algorithm converts sequence digitsto binary number perform calculations number tained string algorithm string  longvariablenum step  num  step  st character  number    num num   step  nd character  number    num num    pattern number longer string chapter st0rage classes namespaces extern bool getpassword void prototypeint main function permission function timediff called static long timediff void prototypebool getpassword void definition timediff called static long timediff void definition storage classes functions program structure source file  source file  storage classes functions207only storage classes functions externandstatic functionswith block scope invalid define function function storage class function defines access function object external functions program scope static functions file scope external functions keyword staticis defining function function belongto externstorage class manner external objects external functions positionin program function defining source file declare function extern bool getpassword void prototypeas omit externkeyword functions belong theexternstorage class default static functions define static function simply place keyword staticbefore functionheader static long timediff functions staticstorage class private character file scope external static objects called source file defines staticfunction collide objects functions thesame modules staticfunction defining declare thefunction source file static long timediff void program structure opposite takes functionsgetpassword andtimediff function timediff aux iliary function designed called externally function declared asstaticfor reason chapter st0rage classes namespaces namesp1 cpp defines tests namespaces include string class string defined namespace stdnamespace myspace std string mess namespace myspace int count  definition myspace count double double prototype myspace namespace yourspace std string mess namespace yourspace void definition yourspace mess namespace myspace myspace int void prototype myspace double double definition myspace return   int myspace separate definition myspace return count include iostream cout namespace stdint main std cout testing namespaces myspace mess std endl myspace std cout nreturn myspace nreturn myspace   std endl yourspace std cout yourspace mess std endl return  namespaces defining namespaces namespaces209using global names large scale software projects lead conflicts whenmultiple class libraries operation namespaces order avoid naming conflicts globalidentifiers namespace identifiers needing check defined area namespace global scope subdivided isolated parts normal namespace identified preceded namespacekeyword elements belong namespace declared braces namespace mylib int count double calculate double int defines namespace mylibthat variable countand thefunctioncalculate elements belonging namespace referenced directly withinthenamespace reference element outsideof namespace mustadditionally supply namespace place scope resolution operator element mylib count  mylibthis distinguish identical names namespaces scope resolution operator reference global names namesdeclared namespaces simply omit namespace technique access global hidden identical defined current namespace demo belonging namespacebe aware namespaces namespaces defined contiguously reopen expand namespace defined point programnamespaces nested define namespace namespace global identifiers belonging standard library automatically belong thestandard namespacestd chapter st0rage classes namespaces namesp2 cpp demonstrates declarations directives include iostream namespace stdvoid message global function message std cout function message namespace namespace std names std visible void message function message cout function message namespace std cout declaring cout std void message void function message void message void defining message cout function message int main namespace std names namespace std message function braces cout testing namespaces cout ncall message endl message cout ncall message endl message message hidden declaration cout ncall message endl message global functionreturn  keyword usingsample program keyword using211you simplify access elements namespace declarationorusing directive case repeatedly quote namespace likenormal declarations usingdeclarations usingdirectives occur ofthe program usingdeclarations ausingdeclaration identifier namespace visible current scope mylib calculate declarationyou function calculate mylibnamespace double erg calculate    assumes calculatein samescope usingdirective theusing directiveallows import allthe identifiers namespace namespace mylib statement reference identifiers mylibnamespace directly ifmylibcontains additional namespace usingdirective namespace isalso imported identical identifiers occur current namespace imported namespace theusingdirective automatically result conflict referencing anidentifier lead ambiguities case scope resolution opera tor resolve situation header files file extensions declare global identifiers inthe standard namespace std usingdirective previous examples toimport required identifiers global scope include string namespace std developing large scale programs libraries declare elements ofany proprietary namespaces header files normal source files define elements exercises chapter st0rage classes namespaces scope cpp accessing objects equal names include iostream include iomanip namespace std int var  namespace special int var  int main int var  cout setw  var  int var  cout setw  var endl  var cout setw  var  cout setw  var  cout setw  special var   endl cout setw  var var  cout setw  var endl  return  exercisesprogram listing exercise  exercises213exercise  general names objects define object code block valid object reference object code block declaration hides object block leave code block original object visible program opposite identical variable names blocks program output screen exercise  developing large scale program intend commercial libraries tool1andtool2 names types functions macros declared header files tool1 handtool2 hfor users libraries libraries global names order libraries define namespaces write program simulate situation define inline function called calculate returns sum numbers header file tool1 function interface double calculate double num1 double num2 define inline function called calculate returns product numbers header file tool2 function interface function tool1 write source file mainfunction calls func tions test values outputs resolve potential naming conflicts define namespaces tool1andtool2that include relevant header files chapter st0rage classes namespaces static cpp tests internal static variable include iostream include iomanip namespace std double   fun void int main   fun cout main setw  endl return  double fun static double  cout fun setw  return program listing exercise  exercises215the modified password runtime stored permanently note exercise  test knowledge external static variables reference program opposite screen output program generate exercise  function getpassword checks password input intro duced static variables modify source file passw1 cpp function getpassword adding function changepassword function user change password save modified source file passw2 cpp large scale program users perform bookings authorized users users access password allowed perform bookings initial stages program development test functionality source file passw2 cpp create source file mainfunction menu items main loop bookinge program whenbis typed password checked user enters correct password change password program perform real bookings solutions chapter st0rage classes namespaces solutionsexercise  screen output program       exercise  tool1 defining function calculate inline ifndef _tool1_h_ define _tool1_h_inline double calculate double num1 double num2 return num1 num2 endif _tool1_h_ tool2 defining function calculate inline ifndef _tool2_h_ define _tool2_h_inline double calculate double num1 double num2 return num1 num2 endif _tool2_h_ solutions217 tool_1_2 cpp libraries tests lookup conflicts include iostream namespace tool1 include tool1 namespace tool2 include tool2 include iostream int main namespace std double     res   cout calling function tool1 endl res tool1 calculate cout result res endl cout calling function tool2 endl res tool2 calculate cout result res endl return  exercise  screen output program fun  main   fun  main   fun  main  in fun  main   chapter st0rage classes namespaces exercise  passw2 cpp defines functions getpassword timediff changepassword examine change password include iostream include iomanip include string include ctime namespace std static long timediff void prototypestatic string secret guest password static long maxcount  maxtime  limitsbool getpassword read verify password auxiliary function timediff defining staticstatic long timediff returns number seconds bool changepassword password returns true password changedstring word1 word2 input read passwordcout nenter password   characters cin sync discards input cin setw  word1 solutions219if word1 size  cout nenter password cin setw  word2 word1 word2 password confirmed secret word1 return true return false password password cpp testing functions getpassword changepassword entering password correctly max attempts  seconds user change include iostream include iomanip include string include cctype namespace std bool getpassword void read password bool changepassword void change password inline functions inline void cls cout  j inline void go_on cout ngo return cin sync cin clear input cin inline char getyesorno read character char  cin sync cin clear inputdo cin toupper permitting lower case letters return chapter st0rage classes namespaces static string header test password handling static string menu booking program choice int main char choice  choice cls cout header menu header menucin choice choice toupper choice cls cout header endl headerswitch choice case bookingif getpassword cout access denied endl go_on cout change password getyesorno changepassword cout password changed endl elsecout password unchanged endl go_on place statements booking break case cls cout bye bye endl break whilereturn  references pointers chapter describes define references pointers parameters return values functions context passing reference read access arguments introduced chapter  chapter references pointers ref1 cpp demonstrates definition references include iostream include string namespace std float  f global int main float rx local reference double error type rx  cout endl   rx rx endl rx  const float cref read referencecout cref cref endl cref error read const string str constant string str work error str constant string text str error str constant const string text str cout text endl reading return  object names object memory10 x rx defining referencesexamplefloat   rx sample program defining references223a reference alias object exists defining refer ence occupy additional memory operations defined reference performed object refers references parame ters return values functions definitionthe ampersand character define reference tis type denotes reference float   float rx float rx rxis expressing variable xand belongs type referencetofloat operations rx asexample rx equivalent automatically affect variable character reference occurs declarations address operator addressoperator returns address object apply operator reference returns address referenced object rx address equal xa reference initializedwhen declared modified subse quently reference address variable stage read references reference addresses constant object constant bedefined constkeyword avoid modifying object reference conversely reference constantto address constant object int const int cref reference crefcan read access variable aread identifier read identifier initialized constant contrast normal refer ence const double   constant memory space compiler creates atemporary object referenced chapter references pointers ref2 cpp demonstrating functions parameters reference type include iostream include string namespace std prototypes bool getclient string long void putclient const string const long int main string clientname long clientnr cout nto input output client data endl getclient clientname clientnr callsputclient clientname clientnr elsecout invalid input endl return  bool getclient string long definition cout nto input client data getline cin return false cout number cin return false return true definitionvoid putclient const string const long read cout client data cout number cout endl references parameters sample program references parameters225passing reference apass referencecan programmed references pointers function parame ters syntactically simpler references permissible parameter reference type alias argument function called reference parameter initialized object supplied argument function directly manipulate argument passed void test int based definition statementtest var int variable var increments variable var function access reference aauto matically accesses supplied variable var object passed argument passing reference object notcopied address object passed function internally allowing function access object called comparison passing contrast normal pass valuean expression anargument argument address memory correct type references parameters offers benefits arguments copied contrast passing time pro gram improve arguments occupy large amounts mem orya function reference parameter return multiplevalues callingfunction passing result return global variables read arguments copy define read referenceas parameter void display const string str function display string argument gener ate string argument string copied stris simply refer ence argument caller rest assured argument modified function stris declared const chapter references pointers ref3 cpp demonstrates return values reference type include iostream include string namespace std returns adouble refmin double double reference minimum int main double     refmin assigns minimum cout endl cout minimum endl refmin minimalcout   endl   refmin minimum cout   endl  refmin     minimum cout   endl  refmin     minimum cout   endl  return  double refmin double double returns reference toreturn minimum expression refmin represents object x1or object objectcontaining smaller note references return sample program references return value227returning references return type function reference type function repre sents object object string message reference static string str today cold cuts return str function returns reference staticstring str pay attention followingpoint returning references pointers object referenced return exist leaving function critical error declare string stras normal autovariable thefunctionmessage destroy string leaving function erence point object longer existed calling reference type function function message mentioned earlier type reference tostring calling message represents stringtype object statements valid message beer garden message cheers cout length message length examples assigned object referenced functioncall string appended length referenced string output statement avoid modifying referenced object define function typeas read reference const string message read references commonly return types overloading operators oper ations operator perform user defined type implemented function refer chapters overloading operators book details examples operators standard classes pro vided point chapter references pointers reference coutcout good morning ref4 cpp expressions reference type exemplified string assignments include iostream include string include cctype toupper namespace std void strtoupper string prototypeint main string text test assignments strtoupper text cout text endl strtoupper text flowers cout text endl strtoupper text cheer cout text endl return  void strtoupper string str converts content str uppercase int len str length int  len str toupper str expressions reference type operator class ostreamcout good morning sample assignments class string expressions reference type229every expression belongs type type notvoid reference types valid expressions stream class shift operators operators stream input output examples expressionsthat return reference object cout good morning expression voidtype reference object cout repre sents object cout repeatedly expression cout good morning expression equivalent cout good morning expressions operator composed left fromthe table precedence contained appendix expression cin variablerepresents stream cin allowsrepeated operator int double cin cin reference type operators commonly reference type operators include simple assignment operator compound assignments operators return reference theoperand left expression asa bora bamust object turn expression represents object thisalso applies operators refer objects belonging class types class definition stipulates operators assignment operators standard class string string jonny depp reference namesince expression type represents object expression passed asan argument function called reference point illustrated opposite chapter references pointers fd4ptrvar456fd0456fd4address hexadecimal variablevalue variable pointer1 cpp prints values addresses variables include iostream namespace std int var ptr definition variables var ptrint main outputs values addresses variables var ptr var  ptr var cout var var address var var endl cout ptr ptr address ptr ptr endl return  defining pointerssample program sample screen output var  address var fd4value ptr fd4 address ptr fd0the variables varandptrin memory defining pointers231efficient program logic requires access memory addresses program sdata manipulation data linked lists trees elements generated dynamically runtime typical examples pointers apointeris expression represents addressandtypeof object address operator object creates pointer object giventhatvaris intvariable var address object varis address intobject memory pointer var pointer pointsto memory address simultaneously type memory address read written depending type refer pointers char point ers int abbreviation char pointer int pointer pointer variables expression varis constant pointer definepointer variables variables store address object int ptr int ptr statement defines variable ptr int type pointerto int ptrcan store address intvariable declaration star char acter pointer pointer typesare derived types general form tcan type tis inttype objects base type tcan declared int definition rafter declaring pointer variable point pointer memory address theprogram opposite statementptr var references pointers references pointers refer object memory pointeris alias individual object identity separate object references pointer memory address manipulated pointing memory address referencing object chapter references pointers addressofpxaddress pxvalue xpx px pxx pxxdouble px px px point px   assign   px   increment   sin px assign sine indirection operator indirection operator address variables xandpxnotes addresses program pointer variable occupies space independent thetype object references occupies space store address  bit computer bytes addresses visible program logic addresses allocated mapped physical addresses efficient storage management swapping unused memory blocks hard disk guarantees valid address equal  special  error pointers symbolic constant null defined  standard header files pointer null called null pointer indirection operator233using pointers access objects theindirection operator access object referenced pointer pointer ptr ptris object referenced ptr programmer distinguish pointer ptrand theaddressed object ptr long  definition ptr pointer ptr ptr ptr point ptr assigns atob ptrpoints assignment wouldreturn result expression ptrrepresents object usedwhereveracould star character defining pointer variables operator merelyimitates pointer expressions definitionlong ptr meaning ptris long pointer long type ptris longtype indirection operator high precedence address operator bothoperators unary operand helps distinguish redirection operator binary multiplication operator takes twooperands values expression identifies object memory valuein theterm occurs commonly compiler error messages derived assign ment leftoperand operator designate memory address expressions referred values variable simplest constant anexpression  indirection operator operator yields values pointer variable pand pare values pdesignates object ppoints chapter references pointers pointers parameters sample function pointer2 cpp definition function swap demonstrates pointers parameters include iostream namespace std void swap float float prototype swap int main float  f float  f swap xvoid swap float float float temp temporary variable temp points temp pointers parameters235objects arguments object passed argument function situations occur parameter question type object passed func tion called passed copy object passing parameter question reference parameter alias argument function called manipulates object passed calling function passing reference case argument passed function manipulated thefunction true passing reference pass ing reference passing pointers function pointers arguments declare function parameter address passed functionas argument answer simple parameter declared pointervariable function func requires address intvalue argu ment statementexample long func int iptr function block declare parameter iptras intpointer function address anobject indirection operator access manipulate object program opposite function swap swaps values thevariablesxandyin calling function function swap access vari ables addresses variables xand passed argu ments parameters p1andp2inswap declared floatpointers thestatementswap initializes pointers p1andp2with addresses xory functionmanipulates expressions p1and accesses variables xandyin thecalling function exchanges values exercises chapter references pointers version swap incorrect logic error void swap float float float temp temporary variabletemp temp exerciseslisting exercise  solutions quadratic equations quadratic equation has real solutions x12 ac aif discriminant satisfies ac if ac negative real solution exists test values quadratic equationsolutions2x2 x   x     x2 x  x     x2  none exercises237given circle radius area circumference   note exercise  parameter sample function strtoupper isdeclared string string exercise  write voidtype function called circle calculate circumference area circle radius variables passed function parameters parameters read reference doublefor radius references doublethat function store area circumference circle test function circle outputting table radius circumference area radii         exercise  version function swap opposite compiled withoutproducing error messages function swap values xandywhenswap called wrong test correct pointer version function swap chapter write test version function swap usesreferences pointers exercise  create function quadequation calculates solutions quadraticequations formula calculating quadratic equations opposite arguments coefficients cand pointers solutions returns false real solution true test function outputting quadratic equations opposite solutions solutions chapter references pointers solutionsexercise  function strtoupper left unchanged passing reference passing occurs function manipulates local copy local copy string changed function string calling function remains unchanged exercise  circle cpp defines calls function circle include iostream include iomanip include string namespace std prototype circle void circle const double rad double double const double startradius   start andendradius   step width ofstep   tablestring header computing circles  int main double rad circuit plane cout header endl cout setw  radius setw  circumference setw  area endl cout fixed floating point presentationfor rad startradius rad endradius step  rad step circle rad circuit plane cout setprecision  setw  rad setprecision  setw  circuit setw  plane endl return  solutions239 function circle compute circumference area void circle const double double double const double    exercise  swap cpp definition function swap  version parameters pointer type  version parameters reference type include iostream namespace std void swap float float prototypes swap void swap float float int main float  f float  f cout swapping endl swap pointer version cout  swapping endl swap reference version cout  swapping endl return  void swap float float pointer version float temp temporary variabletemp points temp chapter references pointers void swap float float reference version float temp temporary variabletemp calla equals equals yb temp exercise  quadequ cpp defines calls function quadequation computes solutions quadratic equations  equation solutions printed function printquadequation include iostream include iomanip include string include cmath square root sqrt namespace std string header solutions quadratic equations  prototypes computing solutions bool quadequation double double double double x1ptr double x2ptr printing equation solutions void printquadequation double double double int main cout header endl printquadequation       printquadequation       printquadequation       return  solutions241 prints equation solutions void printquadequation double double double double     solutionscout nthe quadratic equation  endl quadequation cout real solutions endl elsecout real solutions endl cout ngo return cin bool quadequation double double double double x1ptr double x2ptr computes solutions quadratic equation  stores solutions variables x1ptr x2ptr point returns true solution exists false bool return_flag false double   real solutions sqrt x1ptr  x2ptr  return_flag true return return_flag intentionally left blank defining classesthis chapter describes classes defined instances classes objects addition structs unions introduced examples special classes chapter  chapter defining classes real car abstractioninstantiationclass carobjectsproperties data members built capacity serial number properties built  capacity  chassis number  methods methods member functions brake park turn car1properties built  capacity  chassis number  methods car2 class concept class concept245classes language element support object orientedprogramming oop class defines properties capacities object data abstraction humans abstractionin order manage complex situations objects processes arereduced basics referred generic terms classes direct type abstraction software development step solving problem analysis object oriented programming analysis comprises identifying describing objects recognizing mutual rela tionships object descriptions building blocks classes class user defined type data members theproperties class member functions methods capacities ofthe objects classes simply patterns instantiate create objects class type object variable class data encapsulation define class private members members thatare external access public members class applica tion program accesses objects public methods class activat ing capacities access object data rarely direct object data declared pri vate read modified methods public declarations ensure correct access data aspect technique fact application programs notbe aware internal structure data needed internal structure pro gram data modified provided interfaces public methods remain unchanged affect application program enhance application programming improved class version changing single byte application object encapsulate private structure protecting exter nal influences managing methods describes concept data encapsulation concisely chapter defining classes classdemo private private data members methods herepublic public data members methods account defining class account ifndef _account_ avoid multiple inclusions define _account_ include iostream include string namespace std class account private sheltered members string account holder unsigned long account numberdouble balance account balancepublic public interface bool init const string unsigned long double void display endif _account_defining classesdefinition schemeexample class defining classes247a class definition specifies class names types classmembers definition keyword classfollowed class datamembers methods declared subsequent code block data members member functions belong valid type defined class time class members divided privatemembers accessed externallypublicmembers external access thepublicmembers form called public interface class opposite schematic definition class privatesection gen erally data members publicsection access methods forthe data data encapsulation includes class named accountused represent bankaccount data members account holder account num ber account balance declared private addition publicmethods init initialization purposes display display data screen labels private ndpublic programmer discretionwithin class labels needed order tion marked private orpublic valid public orpri vate label occursthe default member access private omit privateandpubliclabels class members assumed private namingevery piece software set naming rules rules reflect targetplatform class libraries purposes book decided standard naming conventions distinguishing classes class members class names uppercase letter member names lowercase letter members classes share member classcould named display chapter defining classes account cpp defines methods init display include account class definition include iostream include iomanip namespace std method init copies arguments private members class boolaccount init const string i_name unsigned long i_nr double i_balance i_name size  namereturn false i_name i_nr balance i_balance return true method display outputs private data voidaccount display cout fixed setprecision  account holder account number account balance balance endl defining methodsmethods class account defining methods249a class definition complete method definitions objectsof class syntaxwhen define method supply class separating thefunction scope resolution operator syntax typeclass_name function_name parameter_list failure supply class global function definition method allthe members class designated directly theirnames class membership automatically assumed methods belonging class directly access private members methods belonging sameclass privatemembers completely controlled class defining class automatically allocate memory data members thatclass allocate memory define object method called object method manipulate data object modular programming class defined source files case place theclass definition header file place definition class accountin thefileaccount source file including header file class account methods defined source file defining themethods class accountin source file named account cpp source code application program code thefunctionmain independent class stored separate source files sep arating classes application programs facilitates classes integrated development environment programmer define projectto helpmanage program modules inserting source files project project compiled linked modified source files automatically piled linked application program chapter defining classes cheers mary   dylan bob   currentnamenrbalancesavingsnamenrbalancedefining objectsthe objects currentandsavingsin memory defining objects251defining class defines type variables objects bedefined object referred instanceof class defining objectsan object defined usual supplying type object syntax class_name object_name1 object_name2 statement defines object currentof type account account current class account memory allocated data members currentobject currentobject members balance objects memory multiple objects class type declared inexample account current savings object data members object savingscontains membersname balance data members occupy position inmemory data members belonging current methods called objects instance machine codefor method exists memory applies objects defined class method called instance manipulates datamembers thisobject memory content oppositepage method init called object values initializing objectsthe objects belonging accountclass originally defined initialized member object defined explicitly initialized string isempty defined class string initial values members nrandbalanceare unknown case variables data mem bers default if object declared global static define object created destroyed tasks formed constructorsanddestructors constructors responsible initial izing objects details chapter defining classes account_t cpp objects class account include account int main account current1 current2 current1 init cheers mary    current1 display current1 balance  error private membercurrent2 current1 assignment objects current2 display values current2current2 init jones tom    current2 display reference account mtr current1 mtr alias object current1 mtr display mtr object current1 return  objectssample program objects253class member access operator application program manipulates objects class access pub licmembers objects class member access operator short dot operator syntax object memberwherememberis data member method account current current init jones tom    expression current initrepresents publicmethodinitof accountclass method called arguments current theinit replaced direct assignments current dylan bob error current  private current balance   membersaccess privatemembers object permissible class istherefore impossible display single members accountclass screen cout current balance errorcurrent display okthe method display displays data members current method asdisplay called object statementdisplay result error message global function called display data function display assigning objectsthe assignment operator operator defined classes default source target objects belong class assign ment performed assign individual data members source object cor responding members target object account current1 current2 current2 init marley bob    current1 current2 copies data members current2to members ofcurrent1 chapter defining classes ptrobj cpp pointers objects class account include account includes iostream string bool getaccount account paccount prototypeint main account current1 current2 ptr current1 ptr init cheer mary current1 init    ptr display current1 display ptr current2 ptr point current2if getaccount ptr input output newptr display account elsecout invalid input endl return  getaccount reads data account adds argument bool getaccount account paccount string  local variables unsigned long double startcapital cout enter data account account holder getline cin size  return false cout account number cin return false cout starting capital cin startcapital return false input okpaccount init startcapital return true pointers objects sample program pointers objects255an object class memory address object assign thisaddress suitable pointer account savings mac rita    account ptraccount savings defines object savingsand pointer variable called ptraccount thepointerptraccountis initialized points object savings ptraccountthe object savingsitself statementexample ptraccount display method display object savings parentheses inthis case operator higher precedence operator arrow operator class member access operator short arrow operator acombination syntax objectpointer memberthis expression equivalent objectpointer memberthe operator minus sign greater sign ptraccount display statement calls method display object referenced ptraccount object savings statement equivalent statement pre vious difference class member access operators leftoperand dot operator object left operand arrow operator pointer object sample program pointers objects function parameters function theaddress object argument manipulate referenced object directly opposite illustrates point function getaccount read data account called address account passed getaccount ptr getaccount current1 function pointer ptrand init method write datato referenced object chapter defining classes structs cpp defines struct include iostream include iomanip include string namespace std struct representative defining struct representative string representative double sales sales month inline void print const representative cout fixed setprecision  left setw  setw  sales endl int main representative rita john rita strom rita rita sales   john quick john john sales   rita sales   salescout representative sales endl print rita print john cout ntotal sales rita sales john sales endl representative ptr john pointer ptr theif john sales rita sales sales ptr rita cout nsalesman month ptr endl representative pointed ptr return  structssample program structs257records classical procedural language multiple data belong logically areput form record extensive data data articles auto mobile manufacturer stocks organized ease viewing stored files viewpoint object oriented language record class ing public data members methods classkeyword todefine structure record class public short month day year common practice keyword struct availablein programming language define records definition datewiththe members day month yearis equivalent struct short month day year keywords classandstructyou keyword structto define class class account struct account private public keywords classandstructonly vary respect data encapsulation thedefault access members class defined structispublic contrast aclass defined classkeyword class members publicunless pri vatelabel programmer retain compatibility future future year  public datarecords true sense word objects class pub licmembers initialized list definition birthday    element list initializes data member object chapter defining classes  bit word low byteb  high byteb  unions cpp defines union include iostream namespace std union wordbyte private unsigned short  bits unsigned char  bytes   public word byte access unsigned short word return unsigned char lowbyte return  unsigned char highbyte return  int main wordbyte wb wb word  cout nword int wb word cout nlow byte int wb lowbyte nhigh byte int wb highbyte endl return  unionsan object union wordbytein memory defining union wordbytescreen output program word low byte  high byte  unions259memory usage normal classes data member belonging object separate memoryspace unionis class members stored memory space data member starting address memory union store data members address simultaneously union doesprovide versatile usage memory space definitionsyntactically speaking union distinguished class defined classorstructonly keyword union union number long double number number1 number2 defines union numberand objects type unionnumbercan store integral floating point numbers privatelabel union members assumed public thisis default setting structures direct access members nandxin union number number1  storing integernumber1  multiply  number2   floating point numberthe programmer ensure current content union interpreted cor rectly achieved additional type field identifies current content size union type object derived longest data member datamembers memory address unionnumber size defined doublemember defaults  sizeof double byte opposite defines union wordbytethat read writeto  bit memory space byte byte unit exercise chapter defining classes struct int tm_sec    int tm_min   int tm_hour   int tm_mday day month   int tm_mon month   january  int tm_year years  year  int tm_wday weekday   sunday  int tm_yday day year   int tm_isdst flag summer time include iostream include ctime namespace std struct ptr pointer struct time_t seconds time time ptr localtime initialize struct type return pointer cout today ptr tm_yday  day year ptr tm_year endl exercisestruct tmin header file ctimesample calls functions time andlocaltime exercise261use functions declared ctimetime_t time time_t ptrsec struct localtime const time_t ptrsec note exercise program class represent define class datefor purpose integral data members day month year additionally declare methods void init int month int day int year void init void void print void store definition class datein header file implement methods class datein separate source file  method print outputs standard output format month day year  method init parameters copies values passed members range check required stage  method init parameters writes current thecorresponding members structure tmand sample calls function included oppo site type time_tis defined longinctime function time returns time expressed num ber seconds writes variable referenced ptr passed function localtime thatconverts number seconds local type tmdate returns pointer structure test class dateusing application program stored separate source file define objects class display current object assignments additional exercise references pointers objects solution chapter defining classes solution definition class ifndef _date_ avoid multiple inclusion define _date_class private sheltered members short month day year public public interface void init void void init int month int day int year void print void endif _date_ cpp implementing methods class include include iostream include ctime namespace std void init void assign data members struct ptr pointer struct time_t seconds time ptr localtime initialize struct type return pointer month short ptr tm_mon  day short ptr tm_mday year short ptr tm_year  solution263 void init int int int month short day short year short void print void output cout month day year endl date_t cpp objects class include include iostream namespace std int main today birthday adate today init birthday init    cout today today print cout felix birthday birthday print cout testing outputs endl adate today assignment okadate print pdate birthday pointer birthdaypdate print holiday adate reference adate holiday init    writing adate adate print holiday print return  intentionally left blank methodsthis chapter describes constructors destructors defined create destroy objects inlinemethods access methods read methods usedthe pointer methods pay attention passing objects arguments returning objects chapter  chapter methods account defining class account constructors ifndef _account_ define _account_ include string namespace std class account private sheltered members string account holderunsigned long account number double state state accountpublic public interface account const string unsigned long double account const string bool init const string unsigned long double void display endif _account_ file account cpp account account const string a_name unsigned long a_nr double a_state a_nr a_name state a_state account account const string a_name a_name  state   constructors classaccountwith constructors defining constructors constructors267the task constructor traditional programming languages allocate memory variable defined programmer ensure variable initialized suitable values object class account previous chapter possessany valid values method init called initialized objects lead toserious runtime errors programs avoid errors type performs implicit initialization object isdefined ensures objects valid data work initialization performed special methods constructors declaration constructors identified names contrast member functions applies constructor class namea constructor possess return type void constructors declared publicsection class tocreate objects class definition constructors overloaded functions constructors belonging aclass distinguishable signature number order type ofparameters methods object initialization opposite addition accountclass class constructors definitionsince constructor class definition constructor alwaysbegins withclass_name class_namein definition arguments passed checked validity copied data members number arguments smaller number data members remaining members initialized default val ues constructors perform complex initialization tasks opening files allocating memory configuring interfaces chapter methods account2_t cpp constructors class account include account int main account giro cheers mary    save lucky luke account depot error default constructor defined giro display outputsave display account temp funny susy    save temp assignment objects save display presently method init save init lucky luke    save display return  constructor calls sample program constructor calls269unlike methods constructors called existing objects reason constructor return type suitable constructor called object created initialization object defined initial values follow object parentheses syntax class object initializing_list initialization compiler constructor signature matches theinitialization list allocating sufficient memory object constructor called values initialization list passed arguments constructor account nomoney poor charles statement calls constructor parameter data members default standard values compiler unable locate constructor suitable signature notcreate object issue error message account somemoney li   error class accountdoes constructor parameters constructor oneparameter defined class statement bewritten equals sign account nomoney poor charles statement equivalent definition initialization parentheses sign introduced fundamental types int  equivalent int  default constructor constructor withoutparameters referred default constructor default structor called object definition explicitly initialize object default constructor standard values data members class constructor definition compiler create minimalversion default constructor publicmember constructor willnot perform initialization contrast class leastone constructor adefault constructor defined explicitly needed definition theaccountclass default constructor account object becreated initialization chapter methods demo cpp outputs constructor destructor calls include iostream include string namespace std int count  number objects class demo private string public demo const string constructor demo destructor demo demo const string str count str cout constructor count object demo demo defining destructor cout destructor count object destroyed endl count initialize destroy objects class demo demo globalobject global object int main cout statement main endl demo firstlocalobject  local object demo seclocalobject  local object static demo staticobject static object cout nlast statement block endl cout statement main endl return  destructors sample program destructors271cleaning objectsobjects created constructor cleaned orderly manner tasks involved cleaning include releasing memory closing files objects cleaned special method called destructor upof class preceded tilde declaration definition destructors declared publicsection follow syntax syntax class_name void constructor destructor return type ithave parameters destructor impossible overload class hasonedestructor class define destructor compiler create minimal versionof destructor publicmember called default destructor define destructor actions performed constructorneed undone constructor opened file destructor close file destructor accountclass specific tasks perform theexplicit definition account account dothe individual data members object removed order opposite ofthe order created data member created cleaned data member class type object object destructor called calling destructors destructor called automatically object lifetime local objects objects belong staticstorage class theend code block defining objectfor global staticobjects program sample program opposite illustrates implicit calls constructorsand destructors chapter methods account definition class account inline methods ifndef _account_ define _account_ include iostream include iomanip include string namespace std class account private sheltered members string account holder unsigned long account numberdouble state state accountpublic public interface constructors implicit inlineaccount const string a_name unsigned long a_nr l double a_state   a_name a_nr state a_state account dummy destructor implicit inlinevoid display display outputs data class account inline void account display explicit inline cout fixed setprecision  account holder account number account state state endl endif _account_inline methodssample class account inline methods273a class typically multiple methods fulfill simple tasks reading orupdating data members ensure data encapsulation class func tionality continually calling short methods impact program runtime infact saving entry address jumping called function ing function time executing function avoid head define inlinemethods defining inlineglobalfunctions explicit implicit inlinemethodsmethods explicitly implicitly defined inline case methodis declared class method simply place theinlinekeyword method function header defining themethod inline void account display compiler access code block inlinefunction theinlinefunction defined header class definition short methods defined class methods type asimplicitinlinemethods inlinekeyword class account bool ispositive return state  constructors destructors inlinedefinitionsconstructors destructors special methods belonging class canbe defined inline point illustrated definition accountclass opposite constructor destructor implicit inline structor default argument default constructor define objects supplying initialization list account temp explicitly supply values object tempwas correctly initial ized default constructor defined chapter methods account class account set methods ifndef _account_ define _account_ include iostream include iomanip include string namespace std class account private sheltered members string account holder unsigned long account numberdouble state state accountpublic public interface constructors destructor account const string a_name unsigned long a_nr l double a_state   a_name a_nr state a_state account access methods const string getname return bool setname const string size  namereturn false return true unsigned long getnr return void setnr unsigned long double getstate return state void setstate double state void display inline definition display endif _account_access methodsaccess methods accountclass access methods275accessing private data members object data members privatesection class toallow access data place data members publicsection theclass undermine attempt data encapsulation access methods offer accessing private data members access methods data read manipulated controlled manner access methods defined inline access efficient direct access thepublicmembers opposite access methods accountclass thegetname getnr getstate methods read individual data members illustrated getname referencesshould read return values direct access write operations manipulate data members methods setname setnr setstate define balance save setstate   access method benefitsdefining access methods reading writing data member alot work typing reams source code programmer remember names tasks performed methods benefit access methods aretwo issues access methods prevent invalid access attempts onset performing sanity checks class member designed represent positive num bers access method prevent processing negative numbers access methods hide actual implementation class pos sible modify internal structure data stage detect data structure efficient data handling add modification version class provided public interface class remains unchanged application program leveraged modification needing modify application simply compile application program chapter methods account account class read methods ifndef _account_ define _account_ include iostream include iomanip include string namespace std class account private sheltered members data members beforepublic public interface constructors destructor methods const string getname const return unsigned long getnr const return double getstate const return state set methods additional methods void display const display outputs data class account inline void account display const cout fixed setprecision  account holder account number account state state endl endif _account_constobjects methods read methods accountclass constobjects methods277accessingconstobjectsif define object const program read object mentionedearlier object initialized define reason const account inv ymca    object invcannot modified stage methods suchassetname called object methods getnameordisplay unavailable perform read access withthe data members reason compiler decide method performswrite operations read operations data members additional informa tion supplied read methodsmethods perform read operations constant objectsmust identified read identify method read append constkeyword method declaration function header method defini tion unsigned long getnr const declares getnr method read method constantobjects cout account number inv getnr prevent calling read method constant object compiler issues error message read method modify datamember occurs read method calls method defined const constand constversions method constkeyword method signature define versionsof method read version called constant objects default normal version called constobjects chapter methods stdmeth cpp standard methods include iostream include iomanip include string namespace std class private string interpret title long seconds time duration songpublic const string const string long l interpret title seconds const string getinterpret const return interpret const string gettitle const return title long getseconds const return seconds generate objects class output tabular formvoid printline row tableint main cd1 mister dance    cd2 guitars flamenco collection  cd3 cd1 copy constructor cd4 default constructor cd4 cd2 assignment string  cout left setw  interpreter setw  title length min endl printline cd3 printline cd4 copy constructor return  void printline cout left setw  getinterpret setw  gettitle setw  getseconds  setw  getseconds  endl standard methods sample program standard methods279every class automaticallycontains standard methods default constructorthe destructorthe copy constructor andthe assignment definitions replace standard methods illustrated bythe sample class account compiler pre defined default constructor ifno constructor default constructor implicit minimal version destructor intro duced earlier copy constructor copy constructor initializes object object type iscalled automatically existing object initialize object account myaccount li    account youraccount myaccount object youraccountis initialized calling copy constructorwith myaccountobject member copied individually followinginitialization process takes place youraccount myaccount youraccount myaccount youraccount state myaccount state copy constructor called object passed function function called parameter created initialized object argument assignmentassignment previous examples object assigned toanother object type hisaccount youraccount data members youraccountobject copied mem bers hisaccountin case contrast initialization copy structor assignment requires existingobjects book introduced situations define thecopy constructor assignment techniques dis cussed chapter methods daytime class daytime represents time hours minutes seconds ifndef _daytime_ define _daytime_class daytime private short hour minute bool overflow public daytime int  int  int  overflow false settime settime hour minute  houris equivalent houretc bool settime int hour int minute int  hour  hour  minute  minute    hour short hour minute short minute short return true elsereturn false int gethour const return hour int getminute const return minute int getsecond const return int asseconds const daytime seconds return   hour  minute bool isless daytime const compare return asseconds asseconds asseconds asseconds endif _daytime_thispointersample class daytime thispointer281accessing current object method access member object object suppliedin case method reference object called method object working amethod called passed hidden argument address current object address current object method constant pointerthis actobjis current object type class_id methodwas called pointer thishas declaration class_id const actobj thisis keyword thisis constant pointer redirected pointer thisallows access current object thispointer thispointer method address object member data data member datathis func calling member functionthe compiler implicitly creates expression type member currentobject supplied data  corresponds data  write operations type permissible pointer thisis constant butthe referenced object statement invalid read method thethispointer explicitly distinguish method local variables fromclass members point illustrated sample methodsettime opposite thethispointer access current object collec tively situation occurs current object returned copy reference return statement return chapter methods include daytime daytime depart1    depart2 depart2 settime    depart1 isless depart2 cout nthe st plane takes earlier endl include daytime definesthe global function swap void swap daytime daytime parameters daytime temp temp swap function main daytime arrival1   arrival2   swap arrival1 arrival2 swap definesthe method swap class daytime method swap public void swap daytime parameter swap daytime temp temp function main include daytime daytime arrival1   arrival2   arrival1 swap arrival2 passing objects arguments calling methods settime andisless global function swap implementingswap method passing objects arguments283passing passing copies object passed argument tothe parameter function called parameter declared object class question bool isless daytime const method isless called copy constructor executes initializes thecreated object argument depart1 isless depart2 copy constructorthe function copy object depart2 copy cleaned leavingthe function destructor called passing reference overhead caused creating cleaning objects avoided passing argu ments reference case parameter declared reference pointer bool isless const daytime const declaration isless method preferable previous declaration formal difference method called isless nolonger creates internal copy accesses directly object passed object changed parameter declared read methods versus global functions write global function expects oneobject argument rarely sense expect object function ality defined class define method class method perform task hand case object passed argument method manipulate members cur rent object situation occurs operations twoobjects formed comparing swapping method isless bedefined global function parameters function access public interface objects function swap opposite pageadditionally illustrates point major advantage globally defined function symmetry objectsinvolved peers passed arguments conversion rules applied arguments function called chapter methods include daytime include ctime functions time localtime namespace std const daytime currenttime returns time static daytime curtime time_t time time initializes structstruct time localtime curtime settime time tm_hour time tm_min time tm_sec return curtime daytim_t cpp tests class daytime function currenttime include daytime class definition include iostream namespace std const daytime currenttime current time int main daytime cinema   cout nthe movie starts cinema print daytime currenttime copy constructorcout nthe current time print cout nthe movie cinema isless cout begun endl elsecout begun endl return  returning objectsglobal function currenttime sample program returning objects285a function ways return object return createa copy object return reference pointer object returning copy returning copy object time consuming sense small scaleobjects daytime startmeeting daytime start time   start settime   return start exiting function local object startis destroyed forces compiler tocreate temporary copy local object return copy calling function returning reference efficient return reference object aware thelifetime referenced object local case object destroyed exiting function returned erence invalid define object function astaticdeclaration global function currenttime opposite exploits option byreturning reference current time reads time function called sample program current time initialize object nowand outputs time order output time anadditional method print class pointers return values returning reference function return pointer object thiscase ensure object exists exiting function const daytime currenttime read pointer current time unchanged return curtime exercises chapter methods private members type article number longarticle stringsales price doublepublic members article long const string double article void print formatted outputset methods data memberan object type article created article object type article destroyed articles exercisesclass article output constructor output destructor exercises287exercise  warehouse management program class represent articles stock define class called articlefor purpose data members methods opposite store class definition articlein aseparate header file declare constructor default arguments parameter ensure default constructor exists class access methods data members defined inline neg ative prices exist negative price passed argument price stored   implement constructor destructor method print aseparate source file define global variable number articletype objects constructor arguments passed initialize data members additionally increment global counter issue message opposite destructor issues message decrements global counter method print displays formatted object screen outputting article program waits return key pressed application program separate source file tests arti cleclass define objects belonging articleclass type  global object local object mainfunction  local objects function test called main object static definition function test displays objects outputs message terminated articles choice initialize objects additionally access methods modify individual data members display objects screen test program note order constructors destruc tors called supplementary question suppose modify program declaring function calledtest parameter type articleand calling function withan article type object counter number objects negative running program chapter methods public methods int month int day int year void setdate bool setdate int int int int getmonth const int getday const int getyear const bool isequal const const bool isless const const const string asstring const void print const converting number string include sstream class stringstream include iomanip manipulatorsdouble   numberstring str destination stringstringstream iostream conversion number string iostream setw  add stream iostream str read stream methods class dateconverting number string class stringstreamoffers functionality reading writing character buffer classes istreamandostreamdo operators manipulators notices exercise  year leap year divisible   addition multiples  leap years february  days leap year switchstatement examine number days months taining  days exercises289exercise  exercises chapter  initial version dateclass containingmembers day month year defined extend class add additional functionality methods opposite constructors method setdate replace initmethodused version default constructor default values    initialize objects question setdate method parameters writes current object constructor setdate method parameters perform range checking functionality exercise methods isequal andisless enable comparisons datepassed method asstring returns reference string format mm year    convert numerical values strings operation performed automatically operatorto output number standard output cout addition cinandcoutstreams familiar called string streams functionality exist string stream read keyboard input output data screen tar source buffer main memory perform matting conversion main memory application program calls methods defined class test dateclass exercise  thedateclass ensure object represents valid avoid issue add range checking functionality class range checking performed constructor setdate method parameters write function called isleapyear belongs booltype checks year passed leap year define function global inlinefunction store header file modify setdate method range checking passed constructor setdate test version dateclass test set read keyboard solutions chapter methods solutionsexercise  article defines simple class article ifndef _article_ define _article_ include string namespace std class article private long article numberstring article double selling pricepublic article long  const string noname double   article void print const string getname const return long getnr const return double getsp const return bool setname const string size  namereturn false return true void setnr long void setsp double negative pricesp     endif _article_ solutions291 article cpp defines methods article defined inline screen output constructor destructor calls include article definition class include iostream include iomanip namespace std global counter objects int count  define constructor destructor article article long const string double setnr setname setsp count cout created object article count article article article cout cleaned object article count articles endl method print outputs article void article print long savedflags cout flags mark flags cout cout fixed setprecision  article data number sales price endl cout flags savedflags restore flags cout return cin chapter methods article_t cpp tests article class include article definition class include iostream include string namespace std void test creates destroys objects article class article article1  volley ball   int main cout nthe statement main endl article article2  gym shoes   article1 print article2 print article shoes article2 nameshoes setnr  shoes setname jogging shoes shoes setsp shoes getsp   cout nthe values shoes object shoes print cout nthe test endl test cout nthe test endl test cout nthe statement main endl return  void test article shirt  shirt   shirt print static article net  volley ball net   net print cout nlast statement function test endl solutions293answer supplementary question copy constructor called passing constructor defined explicitly implicitly defined copy constructor increment object counter explicitly defined destructor decrements counter called object exercises   defining class optimized functionality range check ifndef _date_ avoids multiple inclusions define _date_ include string namespace std class private short month day year public default constructor month day year  int month int day int year setdate month day year month day year  invalid void setdate sets current datebool setdate int month int day int year int getmonth const return month int getday const return day int getyear const return year bool isequal const const return month month day day year year bool isless const const const string asstring const void print void const chapter methods inline bool isless const const year year return year year month month return month month return day day inline bool isleapyear int year return year   year   year   endif _date_ cpp implements methods class defined inline include class definition include iostream include sstream include iomanip include string include ctime namespace std void setdate assign data members struct dur pointer struct time_t seconds time time dur localtime initialize struct type return pointer day short dur tm_mday month short dur tm_mon  year short dur tm_year  solutions295 bool setdate int int int   return false   return false switch month  days case  isleapyear  return false  return false break case  case  case  case   return false month short day short year short return true void print const output cout asstring endl const string asstring const return string static string datestring stringstream iostream conversion number stringiostream setfill  formatting setw  month setw  day year iostream datestring return datestring chapter methods date_t cpp objects class include include iostream namespace std int main today birthday    const d2010    cout brigit birthday birthday asstring endl today setdate cout ntoday today asstring endl today isless d2010 cout good luck decade endl elsecout decade endl holiday int month day year char cout nwhen vacation enter month day year format cin month day year cerr invalid input endl holiday setdate month day year cerr invalid endl cout nyour vacation holiday print today getyear holiday getyear cout vacation year endl elsecout nice trip endl return  member objects andstatic membersthe major topics discussed chapter aremember objects initialized data members created objects class addition chapter describes constant members enumerated types chapter  chapter member objects static members result class result represent measurement time measurement ifndef _result_ define _result_ include daytime class daytimeclass result private double val daytime time public result default constructorresult double const daytime currenttime result double int int min int double getval const return val void setval double val const daytime gettime const return time void settime const daytime time bool settime int int min int return time settime min void print const output result time endif _result_ include result result result val   result result double const daytime val time result result double int int min int val time daytime min assign temporary object type daytime time member objectsa class representing measurement implementation constructors member objects299 relationship data members belonging class objects class theaccountclass feature account holderis stored stringtype data member object accountclass astringtypemember object member object short class data member type class relationshipbetween classes referred relationship calling constructors object member objects initialized multiple constructor calls areto executed constructor complete object constructors member objects order constructor calls inthis case member objects created initialized structor create object stated default constructor called member object constructors sample class resultthe opposite defines sample class called result addition adoubletype measurement time measurement recorded ease read ing constructors defined separately inline default constructor sets measurement  initial ization complete default constructor called member object time result current default constructor member object timefirst sets hours minutes andseconds  constructor resultclass called  isassigned val constructors initialize object explicitly result temperature1   current timeresult temperature2      compiler relation initial values memberobjects calls default constructor member object time subsequentlythe instructions resultclass constructor executed values areassigned data members chapter member objects static members include result result result val   result result double const daytime val time result result double int int min int val time min replace comment statements needed case theresultclass note result_t cpp tests constructors class result include result include iostream namespace std int main air temperature measurements daytime morning   result default constructort2   morning      t4   current timecout default values print cout temperature time endl print print t4 print cout endl return  member initializersnew implementation constructors sample program member initializers301initializing member objectscalling default constructors create member objects raises issues member object initialized default values correct values areassigned additional action impact program performance constant objects references declared member objects impossible assign values classes default constructor definition types member objects defining constructor memberinitializers ensure general andefficient member objects syntax member initializers member initializer data member initial val ues parentheses time min member initializermultiple member initializers separated commas list member initializersdefined constructor header separated header colon result result parameters val time min function block ensures suitable constructor called data members member ini tializers avoids calls default constructor subsequent assignments member initializers data members belonging fun damental types argument names member initializers constructor parameters helps pass values create object memberobject member initializers stated constructor definition constructor declaration remainsunchanged note chapter member objects static members result2 class result constant data member ifndef _result_ define _result_ include daytime class daytimeclass result private double val const daytime time public result double const daytime currenttime result double int int min int double getval const return val void setval double val const daytime gettime const return time void print const endif _result_ result2_t cpp tests class result include result2 include iostream namespace std int main daytime start   result m1   start m1 copy constructor m3   current time m3 error standard assignment incorrect setval   corrected m2cout result time endl m1 print print m3 print return  constant member objects version class resultusing class result constant member objects303declaringconstmember objectsif class data members initial values definethese members const set time measurement onceand change time subsequently edit meas urement correct systematic errors case member object timecan bedeclared const daytime time const member object timecannot modified assignment cor rect constructor called initialize object define constructor class mustalso define member initializer const memberobject sample class resultif member object timeisconst version constructors invalidsince modify timeby assignment time daytime sk error versions constructors member initializer ensures desired initial values create member object time const member object fact settime methods longer applied compiler issue error message point statement current program attempts modify static member time programmer accidentally overwrite member declaredas const version resultclass longer default constructor adefault time measurement sense fundamental type data members fundamental types defined const class clientcontains number identify customers client numbernever sense define number const constructor forclientwould read client client member initializer initializes constdata member nrwith theglobal incremented prior chapter member objects static members result3 class result static data members ifndef _result_ define _result_ include daytime class daytimeclass result private double val const daytime time declaration static members static double min max minimum maximumstatic bool true void setminmax double private functionpublic result double const daytime currenttime result double int int min int member functions endif _result_ result3 cpp defining static data members methods defined inline include result3 double result min   double result max   bool result true void result setminmax double function min max false min min max max constructors member initializer result result double const daytime val time setminmax result result double int int min int val time min setminmax implements member functions static data members classresultwith static members implementation initialization static data members305class specific data object characteristics data members differ ent objects stored memory addresses common data accessed allthe objects belonging class figures exchange rates rates time limits objectstatus number objects current minimum maximum threshold values pointers objects pointer active window window class kind data stored matter objects exist programmer manage data class represented class globally static data memberscan thispurpose contrast normal data members static data members occur memory declaration static data members declared class keyword staticis todeclare members type opposite statementexample static double min max declarationdefines static data members called minandmaxthat record minimum maxi mum values measurements definition initialization static data members occupy memory space objects class questionhave created member functions occur static data mem bers defined initialized external source file range operator isthen relate data members class double result min   definitionas illustrates statickeyword definition staticdata members member functions belonging class defined source file chapter member objects static members class result private double val const daytime time static double min max minimum maximum static bool true resultstatic void setminmax double functionpublic member functions static double getmin return min static double getmax return max result3_t cpp class result include result3 include iostream namespace std int main air temperature measurements daytime morning   result temp1   morning temp2      double temp   cout nwhat air temperature cin temp result temp3 temp current time cout temperature time endl temp1 print temp2 print temp3 print cout minimum temperature result getmin maximum temperature result getmax endl return  accessing static data members classresultwith static methods application program accessing static data members307static data members encapsulation normal rules data encapsulation apply static data members static datamember declared publicis directly accessible object static data members minandmaxin resultclass declared publicrather private temperatureis object belonging class statementexample cout temperature max outputs maximum measured range operator cout result max syntax preferable previous static data member exists independently objects static member functions class methods access static data member privatedeclaration normal methods class objects staticdata members independent objects access independent objects static member functions purpose calla static member function class objects exist class thestatickeyword define static member functions static double getmin class resultclass modified include static member functionsgetmin setmin inlinedefinition permissible defini tions class repeat statickeyword static member function called object belonging class preferably range operator temperature setmax   equivalentresult setmax   calls calling static member function bind function class object thethispointer unavailable contrast normal member functions alsomeans static member functions access data members methods static chapter member objects static members enum cpp enum constants class include iostream namespace std class lights public enumeration class lightsenum state red green amber private state state public lights state state state getstate const return state void setstate state switch case cout break case red cout red break case green cout green break case amber cout amber break default return state int main cout statements objects type lights lights lights red lights state getstate lights red setstate lights red setstate lights amber cout endl return  enumeration sample program enumeration309definitionan enumeration user definable integral type enumeration defined theenumkeyword range values values defined thesame time enum shape rectangle ellipse statement defines enumerated type shape names quoted list iden tify integral constants values deduced list order constant  subsequent constant higher itspredecessor previous linethus represents  rectanglea  andellipsea  shapetype variable assume values shape shape rectangle variable shape switch shape evaluate shape case define values constants explicitly enum bound lower  upper  leave type define constants enum   statement defines constants offandout setting  stantsonandinwith  values offandonare implicit class specific constantsenumeration define integral symbolic constants simple trast definedirectives replace text strings enumconstants partof declaration valid range define constants visible namespace class opposite enumerated type state wasdefined lightsclass type enumconstant onlyavailable direct class enumeration declared public access class lights getstate lights red exercises chapter member objects static members article const article exercisescopy constructor class articlethe copy constructor creates copy existing object parameter read reference object copied copy constructor articleclass declared declaration copy constructor default copy constructor simply transfers data members object member classintstring const datemember numbername birthday address telephone number constructor parameter data memberaccess methods data member birthday read method formatted screen output data members private data memberspublic methodstype exercises311exercise  exercise chapter defined simple class called article involved global counter log object creation destruction improve extend articleclass static data member global variable count current number objects declare static access method called getcount articleclass method returns current number objects define copy constructor increments object counter  issues message ensures counter accu rate member initializers test version class function test bypassing article type object function exercise  sports club program manage members task define test class called memberfor purpose define memberclass data members opposite thedateclass defined chapter definition member birthday change data member birthdays defined const overload constructor entering object values day month year implement methods test memberclass creating objects data choice calling methods defined add static member called ptrbossto class pointer member appointed chairperson chairperson appointed pointer point null additionally define static access methods getboss andsetboss pointer set return object question test enhanced memberclass reading number existing member making member chairperson displaying chairperson getboss chapter member objects static members simulation traffic lights terminate program ctrl  light  light red ambergreen amberamber red green amber red ambergreen sample outputhints implementing function wait  function time declared header file ctime time null determines number seconds type time_tsince1     hours type time_tis defined long  calling function time loop function sleep windows function sleep unix calls standardized effective send process sleep waiting loop exercises313exercise  create program simulate signal positions sets traffic lights junction class lightsas defined chapter program set lights switched phases red amber green amber red ensure set lights amber green state set lights red lights operate infinite loop terminated interrupt ing program key combination ctrl dos windows interrupt key del key unix status lights constant number seconds green phase  seconds amber phase  values set lights define auxiliary function inline void wait int function returns stipulated number seconds standard function time loop forget read notes opposite solutions chapter member objects static members solutionsexercise  article defines simple class article ifndef _article_h_ define _article_h_ include string namespace std class article private long article numberstring article namedouble sales price static data member static int countobj number objectspublic article long  const string noname double   copy constructor article const article anarticle article void print access methods const string getname const return long getnr const return double getsp const return static int getcount return countobj bool setname const string size  namereturn false return true void setnr long void setsp double negative pricesp     endif _article_ solutions315 article cpp methods article defined inline constructor destructor output called include article definition class include iostream include iomanip namespace std defining static data member int article countobj  number objects defining constructor destructor article article long const string double setnr setname setsp countobj cout article created countobj article endl defining copy constructor article article const article art art art art countobj cout copy article generated countobj article endl article article cout article destroyed countobj articles endl method print outputs article void article print compare solutions chapter  chapter member objects static members article_t cpp tests class article including copy constructor include article definition class include iostream include string namespace std void test article prototypearticle article1  tent   globalint main cout nthe statement main endl article article2  jogging shoes   cout nthe test endl test article1 passing valuecout nthe test endl test article2 passing valuecout nthe statement main nthere article getcount objects endl return  void test article calls copy constructor cout nthe object endl print static article bike  bicycle   cout nthe static object function test endl bike print cout nthe statement function test endl solutions317exercise  thedateclass chapter files handdate cpp beleft unchanged sense define function isleapyear astatic member function class daterather globally files member defines member class constant static member ifndef _member_h_ define _member_h_ include include string namespace std class member private int member numberstring const birth birthday datastatic member ptrboss pointer boss null boss public member long m_nr const string m_name const m_birth m_nr birth m_birth setname m_name unknown member long m_nr const string m_name int day int month int year m_nr birth day month year setname m_name unknown int getnr const return const string getname const return const getbirthday const return birth void setnr int chapter member objects static members bool setname const string size  namereturn false return true void display const static methods static member getboss return ptrboss static void setboss member ptrmem ptrboss ptrmem endif _member_h_ member cpp members class member defined inline include member class definition include iostream namespace std pointer boss member member ptrboss null void member display const string  cout member number member birthday birth asstring endl solutions319 member_t cpp class member include member class definition include iostream include string namespace std int main today today setdate cout today asstring endl member fran  quick fran    kurt  rush kurt    franzi setnr  cout ntwo members sports club endl fran display kurt display cout nsomething changed endl fran setname rush quick fran display member benny  rush benny    cout youngest member sports club benny display boss int member ptr null cout nwho boss sports club enter member number cin fran getnr ptr fran kurt getnr ptr kurt member setboss ptr cout nthe boss sports club endl ptr member getboss ptr null ptr display elsecout boss existing endl return  chapter member objects static members exercise  definition class lights chapter remainsunchanged lights_t cpp simulates traffic lights include lights definition class lights include iostream include ctime standard function time namespace inline void wait int wait seconds time_t time null time null alternative windows include windows inline void wait int sleep  lights traffic lights andenum greentime1  ambertime1  time wait greentime2  ambertime2  int main cout simulating traffic lights terminate program ctrl endl cout  light  light endl true setstate lights red reda2 setstate lights amber cout endl wait ambertime2 cout setstate lights green cout endl wait greentime2 cout setstate lights amber cout endl wait ambertime2 setstate lights amber reda2 setstate lights red cout endl wait ambertime1 setstate lights green cout endl wait greentime1 setstate lights amber cout endl wait ambertime1 return  arrays chapter describes define arrays illustrating dimensional multidimensional arrays strings class arrays chapter  chapter arrays array cpp input numbers array output include iostream include iomanip namespace std int main const int maxcnt  constantfloat arr maxcnt array temp variableint cnt quantitycout enter  numbers quit letter endl  maxcnt cin arr cnt cout numbers endl  cnt cout setw  arr cout endl return  arr  arr  arr  arr  defining arrays array arrin memory sample program defining arrays323anarraycontains multiple objects identical types stored sequentially memory theindividual objects array referred array elements addressed num ber called indexorsubscript array referred vector defining arrays array defined object definition includes arraynameand typeandnumberofarray elements syntax type count array namein syntax description countis integral constant integral expressioncontaining constants float arr  array arrthis statement defines array arrwith10elements floattype object arritself derived type array floatelements floatarray array occupies contiguousmemory space case array arr space  sizeof float bytes array elements subscript operator access individual array elements indexalways elements belonging array arrare thusarr  arr  arr  arr  array element  lower number array elements anyintexpression subscript operator high prece dence class member operators error message issued exceeds valid range program mer careful avoid error define class perform range checking indices create array type exception special types suchasvoidand classes class arrays discussed short number  short arrayfor int   number short  defines array called numberwith  shortelements assigns thevalues0   to elements chapter arrays fibo cpp program computes  fibonacci numbers fibonacci quotients include iostream include iomanip include cmath prototype sqrt include string namespace std define count long fib count    string header fibonacci number fibonacci quotient deviation limit int main int double lim  count computing thefib  fib fib  fibonacci numberslim   sqrt     limit title fibonacci numbers cout header endl cout setw   setw  fib  endl cout setw   setw  fib  endl rest table  count quotient double fib double fib  cout setw  setw  fib setw  fixed setprecision  setw  scientific setprecision  lim endl return  initializing arrays sample program initializing arrays325initialization list arrays initialized define listcontaining values indi vidual array elements initialize array int num     is assigned num  tonum  tonum  initializean array define state length int num    case length array equal number initial values array length explicitly stated definition larger number initial values remaining array elements set contrast number initial values exceeds array length surplus values locally defined arrays created stack program runtime fore aware issues defining arrays arrays occupy large memory kbyte defined globalorstatic initialized elements local array havea definite values assigned loop assign vector vector overload assign ment operator class designed represent arrays topic discussed depth sample program opposite opposite fibonacci numbers theirquotients fibonacci numbers representing natural growth computer sci ence fibonacci numbers things memory management hashing definition fibonacci number  each subsequent fibonacci number sum predecessors sequence         quotient fibonacci number predecessor referred fibonacciquotient sequence fibonacci quotients       converges towardsthe threshold    chapter arrays string textindex   array texthas length  string eve occupies bytes note string cpp strings include iostream include iomanip include cstring namespace std char header strings int main char   message  cout header cin setw  enter word strcat append cout endl cin sync previous input cout nwhat message today endl cin getline message  enter max  characters strlen message  string length longer  int  message  cout message output withcout endl white spaces return  stringsinitializingchar text  eve string text memory sample program strings327chararrays arrays elements chartype data communication buffers char buffer    kbyte bufferhowever common string storage representing astring store string terminating null character  chararray define array string constant initialize array char hugo definition equivalent tochar  string nameoccupies bytes including additional byte thenull character allocate memory state size array explicitly opposite language strings represented charvectors terminatingnull character strings type referred stringsto distinguish themfrom objects stringclass strings stringclassc strings simple chararrays functionality stringclass assignments comparisons notdefined char str1  str2  string str1 str2 error strcpy str1 str2 standard functions language strlen strcpy strcmp strings global functions strpre program opposite streams overloaded chararrays input output easily achieved stringclass objects program overrun chararray read ing data array width method setw manipulatorfor purpose cin setw   charactersc strings preferable stringclass operations needed andyou avoid unnecessary overheads chapter arrays accounttab cpp array objects class account include account definition class account include iostream namespace std account giro lucky peter    account accounttab account tang sarah    account smith john  account default constructor li zhang account li zhang giro account giro int cnt sizeof accounttab sizeof account int main set values accounttab  setstate   assignment accounttab  account pit dave    cout accounts table endl int  cnt accounttab display   cout press return cin cout endl return  class arrays sample program class arrays329declaring class arrays array elements objects class type array class array inthis case declare array type state type array elements result temperaturetab  statement defines class array temperaturetabthat stores  objects typeresult class introduced chapter statement initialize array explicitly default constructor isautomatically called arrayelement previous valid version resultclass asthis class default constructor explicit initialization class array initialized usual initialization list list constructorcall array element result temperaturetab  result      result   time   result temp1 copy constructor temp2 array elements initialized constructor calls implicitly containedin statements constructor argument simply supply argument default constructor called remaining elements size array stated explicitly number values initializationlist defines size array public interface objects array usual temperaturetab  settime    additional parentheses needed statement subscript operator class member operator read left sameprecedence class arrays defined explicit initialization default constructor exists class note chapter arrays multidim cpp demonstrates multidimensional arrays include iostream include iomanip namespace std char representative   armstrong wendy beauty eve representative articles sold int articlecount             int main int   cout nrepresentative representative cout nnumber items sold int   cout setw  articlecount cout endl return  multidimensional arrays sample program screen output representative armstrong wendyitems sold     representative beauty eveitems sold      multidimensional arrays331defining multidimensional arrays define multidimensional arrays number dimensions theansi standard stipulates minimum  dimensions total number dimen sions fact limited memory common multidimensional array type dimensional array calledmatrix float number     matrixthis defines matrix called numberthat  rowsand  columns   elements floattype assignmentexample number     row  column stores  in element row arrays array elements special syntax define multidimensional arrays trary dimensional array array dimension elements  dimensional arrays array numberthus elements number  number  number  elements floatarray size  turn forms rows ofthe dimensional array number rules apply multidimensional arrays dimen sional arrays initialization list dimensional array values array elements dimensional rows examples int arr         int arr    definitions equivalent initialize array omitthe size dimension define dimensions define size array elements opposite program opposite defines dimensional arrays representativeandarticlecount rows representative rows arechararrays storing names representatives dimensionalstringarray string representative  chapter arrays tellist class tellist represent list names telephone numbers ifndef _tellist_ define _tellist_ include string namespace std define pseudo  pseudo position define max  maximal number elements type list element struct element string telnr class tellist private element max array currentint count number elementspublic tellist count  intgetcount const return count element retrieve int return  count null boolappend const element return append telnr boolappend const string const string telnr boolerase const string intsearch const string voidprint intprint const string intgetnewentries endif _tellist_member arrays classtellist member arrays333encapsulating arrays programmer handle objects type company employ ees bank accounts articles stock class designed perform task array ease data management array access individual objects directly perform searches class encapsulates array provide methods simple array operations inserting deleting objects design class type aim perform automatic range checking helps avoid overrunning array performing read write operations class fortable safe interface object data management class tellistthe class telliston opposite designed manage simple telephone list entry list dataset phone number theelementtype comprises strings defined purpose array vcan store maxentries elementtype data member countrecords thenumber elements stored array phone list created num ber initially  element inserted deleted number modified correspondingly thetellistclass single default constructor sets counter count tozero provide initial maxelements array vsince default constructor stringclass executed strings tasks performed methods easily deduced names theretrieve method returns pointer element pointer return null pointer invalid theappend methods add entry list data passed method iscopied free array element counter incremented space field case method returns falseinstead true exercises chapter details methods canimplement methods tellistyourself test exercises chapter arrays original array loop loop second largest elementlargest element0123456789 false array falsetruetruefalsetruefalsetruefalsefalse press interrupt key terminate output scrolling string performed cursor position screen control characters locate cursor independent current compiler appendix note exercisesexample bubble sort algorithm sieve eratosthenes task define array boolean values element initially true eliminate number nyou simply set nthelement array tofalse result screen shot exercise  exercises335use bubble sort algorithm sort array algorithm repeatedly accesses array comparingneighboring array elements swapping needed sorting algorithm terminates elements swapped flag elements swapped note exercise  write program reads maximum  integers keyboard stores longarray sorts integers ascending order displays sorted output input terminated invalid input letter exercise  chapter  introduced sample class daytimeand isless method define initialize array daytimeclass objects write mainfunction print method display elements finally largest smallest elements output screen exercise  write program outputs prime numbers  program count number prime numbers  integer  prime number divisible number  sieve eratosthenes primary numbers simply eliminate multiples primary numbers eliminate multiples     eliminate multiples     eliminate multiples      eliminated exercise  write program create screen output opposite banner displayed center window scrolled left scroll banner string output character handle string loop letter letter output continues starting position reached wait loop modify speed banner string output chapter arrays boolappend const string const string telnr boolerase const string intsearch const string voidprint intprint const string intgetnewentries telephone list display entriesf telephone numbera append entrye erase entry quit programyour choice exercise  methods implemented tellist class menu application program exercises337the phone list stored permanently file enhancements anotherwould variable length stage note exercise  sample class tellistwas introduced chapter methods implemented tested implement tellistclass methods opposite unambiguous key append method append entry provided nei ther blank method erase deletes array element position ele ment deleted located search method ele ment exist erase returns false case element array overwrite element deleted counter countis decremented thesearch method finds position array search search operation unsuccessful pseudoisreturned theprintmethod parameters outputs entries pass letter letters method output entries letters method pare stringclass task str1 compare   str2 this expression true characters subsequent position  strings str1andstr2are identical thegetnewentries method read phone list entries keyboard entry appended append method reading terminated user types string method returns number entries write application program creates phone list type tellistand displays menu opposite menu function return command input menu called main loop pro gram depending command input methods defined class tellistshould called menu item erase search chosen read letters keyboard solutions chapter arrays solutionsexercise  bubble cpp inputs integers array sorts ascending order outputs include iostream include iomanip namespace std define max  maximum numberlong number max int main int cnt quantitycout endl input integers cout enter  integers quit letter endl  max cin number cnt sort numbers bool sorted false sorted long swap int cnt loop sorted long sorted sorted true  compares adjacent integers number number  sorted false sorted number swap number number  number  solutions339 outputs numberscout sorted numbers endl  cnt cout setw  number cout endl return  exercise  daytime class daytime represents time hours minutes seconds ifndef _daytime_ define _daytime_ include iostream include iomanip namespace std class daytime private short hour minute bool overflow public daytime int  int  int  overflow false settime settime hour minute  bool settime int hour int minute int  hour  hour  minute  minute    hour short hour minute short minute short return true elsereturn false chapter arrays int gethour const return hour int getminute const return minute int getsecond const return int asseconds const daytime seconds return   hour  minute bool isless daytime const compares return asseconds asseconds sseconds asseconds void print const cout setfill  setw  hour setw  minute setw  uhr endl cout setfill void swap daytime parameter swaps daytime temp temp endif _daytime_ timetab cpp array objects class daytime include daytime definition class daytime include iostream namespace std char header table daytimes int main daytime timetab   daytime   daytime    int timetab  settime    element cout header endl solutions341 output   timetab print cout endl compute shortest longest time int i_min  i_max  indices shortest longest elements   timetab isless timetab i_min i_min timetab i_max isless timetab i_max cout nshortest time timetab i_min print cout nlongest time timetab i_max print return  chapter arrays exercise  sieve cpp identifies prime numbers sieve eratosthenes include iostream include iomanip namespace std define limit  upper limitbool flags limit false false array flagsint main register int indicesfor  limit flags true sets flags true sieving  limit  flags prime number delete multiples limit flags false count int count  counter  limit flags prime number count count output cout count prime numbers limit endl cout nto output prime numbers char reply cin reply reply reply  limit flags prime number output cout width  cout cout endl return  solutions343exercise  scroll cpp scrolling message include iostream include iomanip namespace std define delay l output delayinline void cls clear screen cout  j inline void locate int int cursor row column scout  char msg int main int start  len strlen msg cls locate   row  column cout press interrupt key terminate true locate   row  column i start output startdo cout msg len len  start cout endl outputs buffer screen wait shortfor int count  count delay count start output start len start start len cls return  chapter arrays exercise  tellist class tellist representing list names telephone numbers chapter tellist cpp implements methods class tellist include tellist definition class tellist include iostream include iomanip namespace std booltellist append const string const string telnr count max space length   characters search pseudo existing count count telnr telnr count return true return false booltellist erase const string key int search key pseudo copies lastv count  count element position ireturn true return false solutions345inttellist search const string key int  count searching key return foundreturn pseudo functions support output inline void tabheader title table cout telephone endl inline void printline const element cout left setw  c_str left setw  telnr c_str endl voidtellist print outputs entries count  cout nthe telephone list endl tabheader int  count printline inttellist print const string const entries int matches  len length int  count compare  len  matches  tabheader title output matches printline matches  cout entry endl return matches chapter arrays inttellist getnewentries input entries int inputcount  cout nenter names telephone numbers terminate input endl element true cout nnew cin sync getline cin break cout ntelephone number cin sync getline cin telnr append cout endl count max cout table endl break search pseudo cout exists endl inputcount cout element inserted endl return inputcount tellist_t cpp manages telephone list include tellist definition class tellist include iostream include string include cctype namespace std inline void cls cout  j output lines ansi control characters solutions347inline void go_on cout ngo return cin sync cin clear previous input cin int menu reads command char header telephone list tellist myfriends telephone list int main int action  command string reads namemyfriends append lucky peter   action action menu cls cout header endl switch action case allmyfriends print go_on break case searchcout search phone number nenter getline cin myfriends print go_on break case insertmyfriends getnewentries break chapter arrays case deletecout delete telephone entry nenter complete getline cin myfriends erase cout endl elsecout entry deleted endl go_on break case cls terminatebreak whilereturn  int menu static char menustr display entries telephone number append entry erase entry quit program choice cls cout header menustr char choice cin sync cin clear previous inputif cin choice choice elsechoice toupper choice cin sync clear input bufferreturn choice arrays pointers chapter describes relationship pointers arrays includes pointer arithmetic pointer version functions pointers return values read pointers pointer arrays operations strings illustrate pointers efficient programming string access command application program illustrate pointer arrays chapter  chapter arrays pointers textptr cpp arrays char pointers char include iostream namespace std int main cout demonstrating arrays char pointers char endl char text good morning char cptr cptr point cout cptr text endl cout text text starts address void text endl cout text  endl cptr cptr point cptr equivalent  cout cptr cptr endl cptr cout cptr endl return  arrays pointers  sample program sample output demonstrating arrays char pointers char good morning text good morning starts address e40 morning kill arrays pointers  name address array array starting address array pre cise array pointer array element char town beijing case townis charpointer town  pointer memoryaddress stores character expressions townand town  equiva lent cout town cout town  pointer character string townis passed characters forming thestring read displayed point onward terminating null character  reached pointer variables arrays array pointer variable constant modified assign constant pointer variable char cptr cptr town cptr town  cout cptr output beijing nowcptrpoints array element town  town contrast totown cptris variable moved cptr statement cptrpoints character string constants chararrays represent address array element typeless pointers display address string pass void typepointer charpointer cout void town casts charpointer void type pointer passes argument tothe operator turn outputs address hexadecimal format oper ator belongs ostreamclass overloaded void types purpose avoid pointer represents memory address establishing type void pointers referred typeless pointers reason atypeless pointer memory access type accessed explicitly type casting chapter arrays pointers arrarr  arr  arr  arr  arr arr arr  arrptr cpp outputs addresses values array elements include iostream namespace std int arr      int main cout naddress array elements endl int   cout address void arr arr arr arr endl return  arrays pointers  sample program interrelation pointers array elements arrays pointers  addressing array elements access individual array elements closely pointer arithmetic intarray illustrate point int arr      array arris intpointer arr  add subtract pointers integral values size theobject referenced pointer automatically consideration sincearris intpointer arr  arr points array elementarr  address sizeof int bytes higher memory memoryspace entries bytes depending size typeint applies number arr points array element arr arr array element arr technique address memory spaces array arr addresses word precedes arr  generally makemuch sense knowing stored memory address addressing pointer variables array elements addressed pointer variables int ptr arr ptr points arr  case ptrandarrare pointers array element arr  ptr  ptr  point array elements arr  arr  integer expressions equivalent arr arr ptr ithe represent equivalent values arr arr ptr ptr surprising array notation ptr pointers compiler translates arr arr start addressarr iobjects access object applies ptr chapter arrays pointers float              pv pv  pv point  pv   assign    pv  reset pv  pv pv point  pv assign  increment pv pv increment  pv point  pv reset pv  searches account number table accounts outputs account include account definition class account account accounttab  table accounts int main int cnt actual number accounts account aptr pointer account objects input data accounttab actualize cnt search account number  bool false aptr accounttab aptr accounttab cnt aptr aptr getnr  true break aptr display display continue pointer arithmeticexamples arithmetic pointersto step array classes pointer arithmetic355in perform arithmetic operations comparisons pointers providedthey sense pointer point ele ments array examples options pointer arith metic float  pv pv points  int  moving pointer array addition pv iresults pointer array elementv statement aspv pv store pointer vari ablepv moves pointer pv iobjects pvnow points operators pointer variables someexamples opposite note indirection operator oper ators precedence operators operands groupedfrom left pv equivalent pv operator increments pointer variable referenced pointer operations type pointer vsincevis constant subtracting pointers addition performed pointers return fore invalid sense perform subtractionwith pointers intvalue represents number array elements thepointers technique compute array element refer enced pointer simply subtract starting address array pvpoints array element  statementexample int pv assign to variable comparing pointers finally comparisonscan performed pointers type pv  pv pv cout setw  pv loop outputs numbers contained vin reverse order theopposite pointer aptrwalks cntelements arrayaccounttab long aptr accounttab cnt chapter arrays pointers reverse cpp defines calls function reverse reverse copies string string reverses order characters include iostream namespace std include string header file cstrings strlen void reverse char str char umstr prototypeint main read word output reversed order const int cnt  char word cnt revword cnt cout enter word cin width cnt maximal cnt  characterscin word reverse word revword callcout nthe reversed word revword endl return  void reverse char s1 char copies reversed string s1 s2int  int strlen s1   s1  terminating character arrays arguments sample program sample output enter word regalthe reversed word lager arrays arguments357if array passed argument calling function function actuallyreceives address array element called function perform read write operations element array declaring parameters argument array equivalent methods declaring parameters point illustrated strlen return length cstring calling strlen regal returns   declare parameter array int strlen char str compute length int str   str  return  declare parameter pointer int strlen char str cases parameter stris pointer stores starting address thearray array notation preferable intend access elements array calling strlen regal leads situation length string equal element containingthe terminating null character function reverse opposite copies characters string toa chararray reverse order copying character s1 thecharacter strlen s1   characters2  array length function array passed initially starting address thearray length case strings length derived implicitly position terminating null character cases length plied explicitly void sort account atab int len sort array atab length len str  str  str  str  str  str   chapter arrays pointers void strcpy char s1 char copies s1 int   copy s1 s1  append terminating character void strcpy char s1 char copies s1  s1 copy s1 s1  append terminating character void strcpy char s1 char copy s1 s1  copy append terminating character pointer versions functions functionstrcpythe standard function strcpy copies strings char dest  source string strcpy dest source string sourceis copied dest left assignment function strcpy simpler standard functionsince return version strcpy pointer version  strcpy pointer version  strcpy pointer versions functions359using pointers indices parameter array argument pointer thefirst array element declaring parameters type equivalent tot previous sample functions pointer fixed baseaddress array access individual array elements pointers indices version standard function strlen int strlen char str computes length str  char str str  search return str case difference pointers string length sample functions oppositethe version function strcpy string copy opposite versions produce string s2iscopied s1 function ensure chararray refer enced s1is large parameters s1ands2are pointer variables shifted pointer version strcpy opposite feature althoughthe function interface remains unchanged generally pointer versions preferable versions quicker anexpression s1 values variables s1andiare read tocompute address current object s1in pointer version alreadycontains required address multidimensional arrays parameters parameter declaration multidimensionalarrays state dimensionwith exception parameter declaration dimensional array number columns long func int num  long func int num  chapter arrays pointers accountfct cpp defines calls function outputs list overdrawn accounts include account definition class account account accounttab table account objects account twain mark    account crusoe robinson    account temple shirley    account valentin carl    int cnt sizeof accounttab sizeof account prototype int displayoverdraw const account atab int cnt double limit int main double limit   cout output overdrawn accounts accounts fell limit   endl cout limit cin limit cout listing overdrawn accounts endl displayoverdraw accounttab cnt limit  cout nno account endl return  int displayoverdraw const account atab int cnt double limit int count  const account aptr aptr atab aptr atab cnt aptr aptr getstate limit limit aptr display display count return count read pointers sample program read pointers361pointers constobjectsyou normal pointer read write access object justlike definition reference define read pointer apointer read operations fact read pointer obliga tory point constant object declaration keyword constto define read pointer const int   statement defines constants aandb pointer pto constant object oftypeint referenced object pcan read modified cout read  error pointer constant modified referenced object constant read onlypointer point constant object account depo twain mark    const account ptr depo ptr display prt setstate   error butptrcan read access constant object depo read pointers parameters read pointers commonly parameter lists guarantees thatarguments modified int strlen const char parameter sis read pointer pass constantc strings standard function strlen remove write protection assigning read pointer sto normal pointer char temp error declare read pointer constant object passed argu ment chapter arrays pointers search1 cpp filter output lines pattern function strstr called search1 text dat include iostream namespace std define maxl  maximum length linenamespace myscope defined version function strstr char strstr const char str const char patt char  text patt search pattern int main int linenr  long left cin getline maxl linenr myscope strstr patt null pattern cout width  cout linenr output endl number return  strstr cpp defined version function strstr include string strlen strncmp namespace myscope char strstr const char s1 const char search string s1 int len strlen s1  s1 strncmp s1 len  return char s1 return pointer position orreturn null null pointer returning pointerssample program returning pointers363a function return pointer object sense function thatsearches object function return pointer required object null pointer object standard library functions pointers return values thefunctionsstrcpy strcat strstr return pointer char acter string functions strcpy andstrcat contrast entitled pointer versions functions stan dard function strcpy return function returns argument thatis pointer target string leads prototype char strcpy char s1 const char parameter read pointer source string read standard function strcat concatenates strings adding stringpassed argument argument function chararray string large store strings thereturn argument implemen tation char strcat char s1 const char char s1 strlen s1 s1 strcpy return s1 notes sample program program opposite defined version standard functionstrstr version myscopenamespace distinguish fromthe standard function function strstr searches character sequence string thestandard function strncmp compare strings function returns zeroif ncharacters identical program strstr function display lines text ing letters numbers exercises chapter programcalledsearch cppwhere supply search pattern chapter arrays pointers accptr  novack  davis  accptr  accptr  accptr  accptr  arrayaccptraccount objects function displayerror outputs error message error number include iostream namespace std void displayerror int errornr staticchar errormsg invalid error number error  data error  memory error  data errornr  errornr  errornr  cerr errormsg errornr endl string literal error charpointer character string apointer initialize charpointer staticdeclaration array generated remains valid programends note arrays pointers pointers array accptrsample function pointers char arrays pointers365pointers offer possibilities simple efficient handling large amounts ofdata sorting objects sense define pointers objects simply place pointers order rearranging actual order objects memory defining arrays pointers large number pointers define array elementsare pointers array type referred pointer array account accptr  array accptrcontains accountpointersaccptr  accptr  accptr  individual pointers array assigned object addresses pointers null account save novack kim    account depo davis sammy   accptr  save accptr  depo int   accptr null initialization usual initialization list initialize array case pointer array list valid addresses null account accptr  depo save null null automatically assigned objects list tain produces result previous usagethe individual objects addressed pointers array occupy acontiguous memory space objects created destroyed dynamically runtime discussed chapter extremely flexible object handling order defined pointers int   accptr null accptr display outputthe function displayerror opposite displays error message correspon ding error number array charpointers error messages chapter arrays pointers exe vivi jeany argv  argvargv  argv  null cpp demonstrates command arguments name1 name2 include iostream namespace std int main int argc char argv argc  cerr name1 name2 endl return  cout argv  endl cout wishes tyours argv  endl return  command arguments sample program calling program jeany viviscreen output jeany wishesyours viviarray argvin memory command arguments367arguments program launch program command supply additional charac ter sequences program command arguments typicallyused govern program executed supply data program work copy file1 file2in case program copyis launched arguments file1andfile2 theindividual arguments separated spaces characters redirecting input output word evaluated operating notpassed program argument space redirection characters place double quotes parameters function main function main parameters youintend process command arguments define parameters main int main int argc char argv function block argccontains number arguments passed command programname argcwill  parameter argvis array charpointers argv  points program path argv  points real argument word pro gram nameargv  points argument argv argc  points argumentargv argc null pointerthe parameters traditionally named argcandargvalthough couldbe operating systems windows   unix youto declare parameter main parameter array pointers toenvironment strings exercises chapter program displays program environment exercises chapter arrays pointers strcmp compares strings lexicographically return  str1 str2  str1 str2  str1 str2 int strcmp const char str1 const char str2 int  str1 str2 str1  return str1 str2 original array loop loop smallest elementsecond smallest element10050303030401007050501007040 exercisesfor exercise  version standard function strcmp notes exercise  selection sort algorithm methodfirst smallest element array exchange element procedure repeated for remainder array array elements initial exercises369exercise  array vwith definition int     pv screen output caused statements pv pv  pv cout pv pv pv   cout pv pv pv  pv  pv cout pv pv pv  pv pv cout pv pv exercise  write program cinmethodget read character character stores chararray output reverse order pointer address array elements exercise  standard function strcmp performs lexicographical comparison strings opposite version strcmp return difference character codes write pointer version function strcmp function str_cmp distinguish standard function test function loop read lines text output comparison loop terminate strings exercise  define test function selectionsort sorts array intvalues ascending order principle selection sort algorithm opposite arguments anintarray length return values nonedevelop version pointer version test functions random numbers and  chapter arrays pointers comspec command compath windows windows command dos tools prompt gtemp temp blood pressureage          notes exercise  sample environment strings dos windows frequency table exercise  exercises371exercise  write program outputs command argu ments separate extend program output environment environ ment memory area strings format stringa parameter function main access environment parameter array pointers argv array elements charpointers environment strings element null pointer exercise  sample filter program called search1 outputs lines relevant numbers lines search pattern introduced chapter modify program produce tool called search pass search pattern command program issue error message terminate command search string standard function strstr sample search shanghai news txtexercise  frequency observed examination relationship age blood pressure  males write function calculates sums rows columns intmatrix rows columns store sums rows columns separately dimensional row column array arguments matrix row array column array return sum matrix elements test function output matrix graphic opposite computed sums mainfunction solutions chapter arrays pointers solutionsexercise  screen output pv  pv  pv  pv b pv  pv  pv c pv  pv d        exercise  reverse cpp exercise pointer arithmetic reads outputs reverse order include iostream namespace std define maxlen int main char maxlen cout enter text endl input maxlen cin output reverse order cout cout endl return  solutions373exercise  str_cmp cpp define test pointer version str_cmp standard function strcmp include iostream namespace std define maxlen  maximum length strings prototype int str_cmp const char str1 const char str2 int main test str_cmp char text1 maxlen text2 maxlen cout testing function str_cmp endl true cout enter lines text lines endl cout  cin sync cin clear cin text1 maxlen cout  cin sync cin clear cin text2 maxlen text1   text2   break lines int cmp str_cmp text1 text2 cmp  cout st string smaller cmp  cout strings equal elsecout st string greater cout endl return  function str_cmp pointer version standard function strcmp int str_cmp const char str1 const char str2 str1 str2 str1  str1 str2 return str1 str2 chapter arrays pointers exercise  selsort cpp implement selection sort algorithm int arrays include iostream include iomanip include cstdlib srand rand include ctime time namespace std prototype void selectionsort int arr int len const int len  int intarr len int arrayint main cout selection sort algorithm endl initialize int array random numbers srand unsigned int time null initialize random number generator int  len intarr rand   sort numbersselectionsort intarr len output numberscout sorted numbers endl int  len cout setw  intarr cout endl return  inline void swap int int int temp temp solutions375 version void selectionsort int arr int len register int mini indicesfor int  len  mini search minimumfor  len starting arr mini arr mini swap arr arr mini swap pointer version void selectionsort int arr int len register int minp pointer array elements int arr len  pointer elementfor arr arr minp arr search minimumfor arr  starting arrif minp minp swap arr minp swap chapter arrays pointers exercise  args cpp program outputs program including path command arguments environment include iostream namespace std int main int argc char argv char env cout program argv  endl cout ncommand arguments endl int  argc argumentscout argv endl cout type return cin cout nenvironment strings endl  env null environmentcout env endl return  exercise  search cpp filter outputs lines pattern standard function strstr called search pattern text dat file passed input read keyboard case input ctrl include iostream include cstring standard functions stringsusing namespace std define maxl  maximum length char  text solutions377int main int argc char argv argc  cerr search pattern text dat endl return  int linenr  long exists cin getline maxl linenr strstr argv  null pattern cout width  cout linenr output endl number return  exercise  matrix cpp compute sums rows columns matrix include iostream include iomanip namespace std define initiate dimensional array int matrix                  int rowsum  sums rowsint colsum  sums columns prototype function matrixsum int matrixsum int arr2d  int vlen int rsum int csum chapter arrays pointers int main cout testing function matrixsum endl compute sums int totalsum matrixsum matrix  rowsum colsum output matrix sums cout matrix sums rows columns endl int   output rows matrix row sums   cout setw  matrix cout setw  rowsum endl cout endl   cout setw  colsum cout setw  totalsum endl return  int matrixsum int  int len int rsum int csum int row column indexfor  len compute row sums rsum    rsum   compute column sums csum   len csum return rsum  rsum  rsum  total sum sum row sums fundamentals file input outputthis chapter describes sequential file access file streams file streams provide simple portable file handling techniques chapter  chapter fundamentals file input output main memoryexternal memory write readfilefile buffer filesfile operations files381when program terminated program data stored main memory lost storedata permanently write data file external storage medium file operations single characters character strings written text files screen common practice store records files record data forms logical unit human resource person write operation stores record file existing record file updated ora record reada record record file andcopied data structure program objects permanent storage techniques thisnormally involves storing object data ensure object correctly reconstructed read turn involves stor ing type references objects external mass storage media hard disks block oriented data transferred blocks size multiple  bytes efficient easy file management implies putting data store temporary storage main memory called file buffer file positions viewpoint program file simply long byte array structure ofthe file records programmer responsibility allowing maximum degree flexibility character file occupies byte position byte occupies position  byte position  current file position position bytethat read written byte transferred automatically increases current file position  case sequential access data read written byte byte fixed order read operation starts file access piece file read file content start finish write operations create file overwrite existing file append data existing file easy access data file implies set current file position asrequired technique random file access discussed thefollowing chapters chapter fundamentals file input output iosistreamostreamiostreamofstreamifstreamfstreamfile streamsstream classes file access file streams383c standard classes file management called file streamclassesallow easy file handling programmer concern file buffer management specifics file stream classes standardized developportable programs program process files windows unix platform simply recompile program platform file stream classes iostreamlibrary class hierarchy opposite file stream classes thestream classes familiar base classes theifstreamclass derives istreamclass file readingtheofstreamclass derives ostreamstream class supports writingto filesthefstreamclass derives iostreamstream class wouldexpect supports read write operations files file stream classes declared fstreamheader file object thatbelongs file stream class file stream functionalitythe file stream classes inherit functionality base classes methods operators manipulators cinandcoutare availablehere file stream methods formatted writing reading single characters data blocksthe operators formatted reading writing filesmethods manipulators formatting character sequencesmethods state queries file handling methods methods opening closing files round thepackage chapter fundamentals file input output showfile cpp reads text file outputs  lines showfile filename include iostream include fstream namespace std int main int argc char argv argc  file declared cerr showfile filename endl return  ifstream file argv  create file stream open reading file status cerr error occurred opening file argv  endl return  char  int cnt  file getline  copy file standardcout endl output cnt  cnt  cout return continue endl cin sync cin file eof file occurred cerr error reading file argv  endl return  return  creating file streams sample program creating file streams385opening fileyou open file manipulate canstate file pathdefine called file access mode path explicitly stated file current directory fileaccess mode defines read write access file permitted files open program terminates automatically closed file stream definition open file create file stream simply state file doso case default values file access mode ifstream myfile test fle file test fleis passed constructor ifstreamclass whichopens file reading path stated file current directory file opened current file position file create file stream write access file state exist inthis case file created ofstream yourfile fle statement creates file called fleand opens file writing becareful file exists truncated length bytes deleted create file stream reference specific file theopen method open file ofstream yourfile yourfile open fle previous open default values file access opening file default constructorfor class rarely sense fixed file names case sample program theopposite state file command launch pro gram file supplied program issues error message terminates interactive user input define file chapter fundamentals file input output ios inios outios appios trunc ios ateios binaryflageffects opens existing file input opens file output file perform input output binary mode existing file truncated length open seek opening flag starting position opening file opens file output flag implies ios trunc combined theflagsios ios app ios ate ifstreamofstreamfstreamios inios ios truncios ios outclassflags  flags defined baseclass ios common stream classes ios openmodetype  default file opened text file called text mode read write text file control characters newlines file inter preted separately adapted current platform called cooked mode file opened binary mode file contents left unchanged called raw mode note open modesflags open mode filedefault settings opening filethe constructor method open stream classes defaultvalues open modes387to open file default mode supply file theopen mode open existing file write access deleting file open mode flagsin addition file pass argument open mode theconstructors open method open mode determined flags aflagrepresents single bit computer word flag raised bit question willcontain   representing cases bit operator combine flags flag ios inorios outmust stated cases flag ios inis raised file alreadyexist flag ios inis file created exist fstream addresses address fle ios ios app opens file writing file file created exist file automatically grow write operation default mode fstreamclass ios ios open existing file reading writing called update mode updating file conjunction random file access error handling errors occur opening file user required access privileges file read exist state flag failbitof iosbase classis raised case flag queried directly fail method indirectly querying status file stream ifcondition myfile myfile fail thefailbit set read write error occurs read operation fails endof current file reached distinguish normal behavior read error eof method eof file query eofbit myfile eof file theeofbit set carry reading file sample programon previous illustrates potential issues chapter fundamentals file input output fcopy1 cpp copies files fcopy1 source destination include iostream include fstream namespace std inline void openerror const char file cerr error opening file file endl exit  ends program closing opened files void copy istream ostream prototypeint main int argc char argv argc  argc  cerr fcopy1 source destination endl return  exit  ifstream infile argv  open st fileif infile is_open openerror argv  argc  sourcefile copy infile cout source destination ofstream outfile argv  open nd fileif outfile is_open openerror argv  copy infile outfile outfile close unnecessary infile close unnecessary return  void copy istream ostream copy char closing filessample program closing files389motivation completed file manipulation file closed fol lowing reasons data lost reason program terminated correctlythere limit number files program open simultaneously program terminates correctly automatically close open files exit ing file stream destructor close file referenced stream file longer point close file explicitly methodsclose andis_open file stream classes definition voidtype method calledclose close file belonging stream myfile close file stream continues exist streamto open manipulate file file stream accessing file alwaysperform test is_open method case myfilefile stream thetest myfile is_open file opentheexit functionopen files closed global function exit actual reasonfor function terminate program orderly manner return error code calling process prototype void exit int status calling process statuserror code passed evaluation willoften command interpreter unix shell successful program execu tion produces error code  statement return equivalentto statement exit main function program opposite copies file stated command userforgets state target file source file copied standard output case source file text file chapter fundamentals file input output pizza_w cpp demonstrating output records block block include iostream include fstream namespace std char header record structure struct pizza char  float price const int maxcnt  pizza pizzamenu maxcnt pepperoni  f white pizza  f ham pizza  f calzone  f int cnt  char pizzafile  pizza fle int main write records cout header endl write data file int exitcode  ofstream outfile pizzafile ios ios binary outfile cerr error opening file endl exitcode  int  cnt outfile write char pizzamenu sizeof pizza cerr error writing endl exitcode  exitcode  cout ndata file pizzafile endl return exitcode reading writing blocks sample program reading writing blocks391the file stream classes publicoperations defined base classes write formatted unformatted data file read data file block block character character formatted unformatted input output previous sample programs illustrated methods getline andput read write data text files formatted input output ofnumerical values requires operators manip ulators formatting methods double price   ofstream textfile test txt textfile price price dollar endl file test txtwill text price exactlymatches screen output converting binary data legible text practicable dealing largeamounts data sense write data series measurements binary file order occur program simply open file binary mode write data file read file block block transferring data blocks theostreammethodwrite transfers number bytes main memory afile prototype ostream write const char buf int sincewrite returns reference stream check ensure writeoperation successful filestream write  cerr error writing endl warning issued error occurs writing characters theread method read data blocks file method transfers data blockfrom file program buffer prototype istream read char buf int methods read andwrite files fixed length records block transferred records buffer main memory structure variable array elements belonging structure type cast address memory area char shownin opposite chapter fundamentals file input output class account methods read write class account private string account holderunsigned long account numberdouble balance balance accountpublic constructors destructor access methods ostream account write ostream const istream account read istream write outputs account stream returns stream ostream account write ostream const  write stringos write char sizeof write char balance sizeof balance return read opposite function write read inputs account stream writes members current objectistream account read istream getline  read stringis read char sizeof read char balance sizeof balance return object persistenceclass accountimplementing methods read andwrite object persistence393storing objectsobjects created program runtime cleaned program termi nates avoid volatility object persistent storethe object file ensure object reconstructed read dealing issues objects objects generally store member object objects references objects sense store pointer values file memory addresses change time launch program class accounton opposite member objectname stringtype stringtype objects handle variablelength strings object reference string sense save memory content size sizeof occupied object namein file write string file solution issue store data passed aconstructor class read solution involves providing methods objects write data members files read files technique preferable class handle data storage ing write internal status data simultaneously preventing external access data storing account class objects opposite accountclass familiar fileinput output methods class file stream references file opened binary mode passed argument methods read andwrite return stream cases status queriedwhen function called anaccount write outfile cerr error writing endl read account simultaneously create object theread method access anaccount read infile cerr error reading endl member object nameis saved string string terminated nullcharacter  operator function getline thistask exercises chapter fundamentals file input output fcopy file1 file2a file file1 copied file2 file2already exists overwritten fcopy file1a file file1 copied standard output screen standard output redirected fcopyfor calls arguments source destination files entered user dialog ifisis file stream references file opened reading char buf  read buf  transfers  bytes file buffer buf provided error occurs  bytes copied file reached case failandeofbits set block bytes read written destination file method gcount returns number bytes transferred read operation int nread gcount number bytes read exercisesfor exercise  calls program fcopy details istream class method read exercises395exercise  sample program fcopy1 copies file screen file introduced chapter write program named fcopyto enhancefcopy1as program launched arguments issue error message terminate requests user input names source target files string tar file return key pressed source file displayed screen command user dialog valid source target file names binary copy operation performed copy data block block read andwrite methods default block size  bytes thecopy function returns falseif error occurs copying truein cases refer notes opposite exercise  modify sample program pizza_w cppin chapter user add pizza records standard pizzas store records file write program called pizza_r cpp displays pizza menu outputs contents pizza file exercise  test methods read andwrite accountclass write program called account_rw cppthatinitializes array account objects stores array file reads contents file array displays accounts array check binary mode read write access file chapter fundamentals file input output data members stringfilename file namebooldirty true data stored methods const string getfilename const boolsetfilename const string boolisdirty const boolload read data fileboolsave save data boolsaveas save data telephone list entriesf telephone numbera append entryd delete entry open file save fileu save quit programyour choice exercise  members class tellistextended menu application program exercises397exercise  program tellist written exercise chapter  modified telephone lists saved file add data members methods detailed opposite tellist string filenameis store file dirty flag raised phone list changed saved modify existing methods append anderase provide functionality strings phone list saved strings binary file allowing entries lines add items application program menu open fileread phone list stored file savesave current phone list file save save current phone list file choosing menu items calls methods applicable load save orsaveas methods return truefor successful action falseotherwise user supply file save method list read file phone list modified saved user prompted save current phone list opening file terminating program solutions chapter fundamentals file input output solutionsexercise  fcopy cpp copy files fcopy source destination include iostream include fstream namespace std char usage fcopy source destination inline void openerror const char file cerr error opening file file endl exit  bool copy istream ostream prototype true flag int main int argc char argv char source  dest  switch argc case  file declared input file cout copying source file destination file source file cin getline source  strlen source  cerr source file declared endl return  cin sync previous input cout destination file cin getline dest  break case  file declared strcpy source argv  break case  source destination files declared strcpy source argv  strcpy dest argv  break solutions399default invalid program cerr usage endl return  exit  strlen dest  source file output cout ifstream infile source infile openerror source copy infile cout file closed ifstream destructor copy source destination file binary mode ifstream infile source ios ios binary infile openerror source ofstream outfile dest ios ios binary outfile openerror dest copy infile outfile cerr file source file dest copied endl cerr error copying endl return  return  bool copy istream ostream copy const int bufsize  char buf bufsize read buf bufsize gcount  write buf gcount eof fail fail eof return false return true chapter fundamentals file input output exercise  pizza header file pizza_w cpp pizza_r cpp include iostream include iomanip include fstream namespace std structure record struct pizza char  float price define maxcnt  maximum number pizzas define filename pizza fle inline void header cout endl pizza_w cpp demonstrating blockwise writing records include pizza pizza pizzamenu maxcnt pepperoni  f white pizza  f ham pizza  f calzone  f int cnt  char pizzafile  filename int main write records int header cout nour standard offer endl cout fixed setprecision   cnt cout setw  pizzamenu setw  pizzamenu price endl cout endl solutions401 input pizzas keyboard cnt maxcnt cin sync cin clear cout pizza menu cin getline pizzamenu cnt  pizzamenu cnt   break cout price cin pizzamenu cnt price cin cerr invalid input endl cnt cnt maxcnt cout pizza return add data file int exitcode  ofstream outfile pizzafile ios ios binary outfile cerr error opening file endl exitcode  int  cnt outfile write char pizzamenu sizeof pizza cerr error writing file endl exitcode  exitcode  cout ndata file pizzafile endl return exitcode chapter fundamentals file input output pizza_r cpp demonstrating block block reading records include pizza char pizzafile  filename int main read display records header ifstream infile pizzafile ios ios binary infile cerr pizza file exist endl return  pizza onepizza int cnt  cout nthe pizzas endl cout fixed setprecision  true infile read char onepizza sizeof pizza break cout setw  onepizza setw  onepizza price endl cnt cout endl infile eof cerr error reading file endl return  elsecerr cnt pizzas endl return  solutions403exercise  account_rw cpp writes array objects class account file feed array array include account definition class account include iostream include fstream namespace std account acctab1  account lucky luke    account mickey mouse    account snoopy dog string cell   account acctab2  calls default constructor int cnt  char file account fle int main int  write accounts file ofstream outfile file ios ios binary outfile cerr error opening file file endl return   cnt acctab1 write outfile cerr error writing file file endl return  outfile close chapter fundamentals file input output reads accounts file ifstream infile file ios ios binary infile cerr error opening file file endl return   cnt acctab2 read infile cerr error reading file file endl return  infile close displays accounts read cout file file accounts endl  cnt acctab2 display cout endl return  exercise  tellist class tellist represent list names telephone numbers methods load save saveas serve loading saving telephone list ifndef _tellist_ define _tellist_ include string namespace std define pseudo  pseudo position define max  maximum number elements solutions405 type list element struct element string telnr class tellist private element max array actualint count number elements string filename file namebool dirty true data changed saved public tellist count  filename dirty false int getcount return count element retrieve int return  count null bool append const element return append telnr bool append const string const string telnr bool erase const string int search const string const void print const int print const string const int getnewentries const string getfilename const return filename bool setfilename const string return false filename dirty true return true bool isdirty const return dirty bool load bool save bool saveas endif _tellist_ tellist cpp implements methods class tellist include tellist definition class tellist include iostream include iomanip include fstream namespace std chapter fundamentals file input output bool tellist append const string const string telnr count max space length  minimum  characters search pseudo exist count count telnr telnr count dirty true return true return false bool tellist erase const string key int search key pseudo count  copy elementv count  position count dirty true return true return false methods search print getnewentries unchanged refer solutions chapter  methods loading saving telephone list bool tellist load cout load telephone list file nfile string file input file cin sync cin clear previous input getline cin file file cerr filename declared endl return false solutions407 open file reading ifstream infile file c_str ios ios binary infile cerr file file opened endl return false int  max getline infile  getline infile telnr  infile break max cerr max capacity max reached endl infile eof cerr error reading file file endl return false count filename file dirty false return true bool tellist saveas cout save telephone list file nfile string file input file cin sync cin clear previous input getline cin file setfilename file cerr file declared endl return false elsereturn save chapter fundamentals file input output bool tellist save save telephone list filename return saveas dirty return true ofstream outfile filename c_str ios ios binary outfile cerr file filename opened endl return false int  count outfile  outfile telnr  outfile break count cerr error writing file filename endl return false dirty false return true tellist_ cpp organize telephone list class tellist include tellist definition class tellist include iostream include string include cctype namespace std inline void cls cout  j ansi control characters output lines solutions409inline void go_on cout ngo return cin sync cin clear previous inputwhile cin int menu enter command char askforsave prompt user save char header telephone list tellist myfriends telephone listint main int action  commandstring read namewhile action action menu cls cout header endl switch action case case case case unchanged refer solutions chapter  case open fileif myfriends isdirty askforsave myfriends save myfriends load cout telephone list read file myfriends getfilename endl elsecerr telephone list read endl go_on break case save myfriends saveas cout telephone list saved file myfriends getfilename endl elsecerr telephone list saved endl go_on break chapter fundamentals file input output case saveif myfriends save cout telephone list saved file myfriends getfilename endl elsecerr telephone list saved endl go_on break case quitif myfriends isdirty askforsave myfriends save cls break return  int menu static char menustr open file save save quit program choice unchanged solutions chapter  return choice char askforsave char cout save phone list cin toupper return overloading operators overloading operators apply existing operators objects class type stipulate operator objects class chapter describes overloaded operators arithmetic operators comparisons subscript operator shift operators input output overloaded illustrate techniques concept friend functions introduced context overloading operators chapter  chapter overloading operators assignment operator address operator comma operator predefinedmeaning built type meaning changed classes definition note generalsoverloadable operators rulesan operator overloaded conjunction class definition scope anoperator simply extended characteristics operator remain unchanged rules apply create operators overload existing oper ators redefine operators fundamental types change operands operator binary operator binary unary operator unary precedence order grouping operators precedence remains unchanged delete arithmetic operatorsrelational operatorslogical operatorsassignment operators binary arithmeticor binary bitwise operator bitwise operatorsfunction subscript operatorother operatorsoperatorsmeaning generals413overloading operator overloaded defined multiple types overloading operator making operator type operators overloaded fundamental types case theexpression bthe operand type determines machine code created compiler division operator operands integral types integral division performed cases floating point division occurs actions performed depend ing operand types involved operators classes addition defining methods offers interesting possibility defining thefunctionality class operators overload operatorinstead addition add method objects xandyin thisclass yis equivalent add overloaded operators class expressions type easily defined fundamental types expressions operators intuitive easier understand expressions function calls operators belonging standard library classes overloaded applies stringclass familiar string str1 str2 eve str1 str2 operator str2 alexa operator cout str1 operator str2  operators tables opposite operators overloaded someoperators overloaded cast operators sizeofoperator andthe operators member access scope resolution operators conditional operatorthese operators fixed significance classes defined overloading operator sense chapter overloading operators daytime class daytime operators ifndef _daytime_ define _daytime_class daytime private short hour minute bool overflow public daytime int  int  int  bool settime int hour int minute int  int gethour const return hour int getminute const return minute int getsecond const return int asseconds const daytime seconds return   hour  minute bool operator const daytime const compare treturn asseconds asseconds daytime operator increment seconds handle overflow return void print const endif _daytime_ include daytime daytime depart1    depart2    depart1 depart2 cout nthe st plane takes earlier endl operator functions  operators class daytimecalling operator operator functions  naming operator functions overload operator define operator function operatorfunction describes actions performed operator operator function operatorkeyword operator symbol operator operator function operator operator function defined global function class method gener ally operator functions defined methods case unary operators sense define operator function globally point illustrated operator functions methods define operator function binaryoperator method left operand willalways object class question operator function called object operand passed argument method method singleparameter bool operator const daytime const case lesser operator overloaded compare daytimeobjects itreplaces method isless defined class prefix operator overloaded opposite toillustrate overloading unary operators operator function class parameters function called object expression ais anobject class daytime calling operator function opposite compares times day depart1 depart2the compiler attempt locate applicable operator function expressionand function expression equivalent todepart1 operator depart2 uncommon operator function explicitly previ ous function technically correct programs operators easier encode read beaware fact operator function perform operation cor responding operator fundamental type lead confusion chapter overloading operators euro1 class euro arithmetic operators ifndef _euro_h_ define _euro_h_ include sstream class stringstream include iomanip namespace std class euro private long data euros  centspublic euro int euro  int cents  data l long euro cents euro double   rounding data long          longgetwholepart const return data  intgetcents const return int data  doubleasdouble const return double data   stringasstring const euro string voidprint ostream const output stream asstring euro endl operator functions eurooperator const negation unary minus euro temp temp data data return temp eurooperator const euro const addition euro temp temp data data data return temp eurooperator const euro const subtraction analog operator euro operator const euro add euros data data return euro operator const euro subtract euros operator continued double operator functions  classeuro operator functions  notes sample class eurothe opposite euroclass represents european currency member datastores euros integer format integer  cents thusdata returns number euros data the number cents thistechnique easy implementation arithmetic operations needed theeuroclass addition constructor passed euros cents arguments isa constructor process doublevalue euros standard copy constructor euro e1     e1 negation addition subtraction unary operator change operand previous e3is thusassigned  euro e1remains unchanged operator function isthus constmethod creates returns temporary object binary operators change operands operatorfunctions create temporary objects return correct values euro sum e1 expression e1 e2results e1 operator return toinitialize object sum operators operators overloaded euroclass auto matically operators overloaded distinct operatorsthat require separate definitions overload operators ensure statementsexample sum andsum sum produce binary operators change current object left operand atemporary object required expression sum e3represents currentobject modification operator function returns reference chapter overloading operators continues file euro1 inline string euro asstring const euro string stringstream strstream stream conversionlong temp data temp  strstream temp temp strstream temp  setfill  setw  temp  return strstream str endif _euro_h_ euro1_t cpp tests operators class euro include euro1 definition class include iostream namespace std int main cout testing class euro endl euro wholesale   retail retail wholesale standard assignment retail   euro  cout wholesale price wholesale print cout cout retail price retail print cout euro discount   double constructorretail discount cout nretail price including discount retail print cout wholesale   cout nnew wholesale price wholesale print cout euro profit retail wholesale subtraction copy constructorcout nthe profit profit print cout negative return  overloaded operators fileeuro1 hcontinuedsample program overloaded operators419calling operator functions expressions valid operators euroclass euro wholesale   retail profit   discount   retail wholesale profit wholesale operator profit retail discount retail operator discount retail euro   retail operator euro   expressions eurotype objects operator functions havebeen defined add subtract intordoubletypes madepossible euroconstructors create euroobjects intordoubletypes function expects eurovalue argument process intordoublevalues program opposite statementexample retail   valid compiler attempts locate operator function defined theeuroobject doubletype operator function withthese characteristics compiler converts doublevalue euroand calls theexisting operator function euros symmetry operands constructors operator functions withintordoubletype arguments retail wholesale  okwholesale retail   okthe statement equivalent toretail wholesale operator euro  statement invalid retail  wholesale wrong operator function defined method left operand classobject simply exchange operands operator ifyou convert operands global definitions operator functions chapter overloading operators assignment operatorfunction callsubscript operatorclass member accessoperatorsmeaning function operator represent operations objects function calls theoverloaded operator enables objects pointers note euro class euro represents euro global operator functions implemented ifndef _euro_h_ define _euro_h_ class euro operator functions unchanged regard operator functions implemented global operator functions inline addition inlineeuro operator const euro e1 const euro euro temp e1 temp return temp subtraction inlineeuro operator const euro e1 const euro euro temp e1 temp return temp endif _euro_h_global operator functions operators overloadable methods operator functions operators methods euroclass global operator functions421operator functions global method define operator function global function method fouroperators listed opposite exceptions operators require called valueas left operand theyrequire object address memory global operator functions generally preferable situationsapplies operator binary operands symmetrical arithmetic operators operator overloaded class changing class operator ostreamclass defining global operator functions operands global operator function passed arguments function operator function unary operator possesses singleparameter theoperator function binary operator theeuroclass modified provide global definition operator func tions operators euro operator const euro e1 const euro operands peers conversion intordoubletoeurois performed operands euroobjectnet expres sions valid equivalent net  and1  netthey function calls operator net   andoperator   net global function access private members class func tionoperator opposite operator operatorfunction defined method global operator function declared friend class accessto private members class chapter overloading operators euro class euro operator functions declared friend functions ifndef _euro_h_ define _euro_h_ class euro private long data euros  centspublic constructors methods operators unary divisioneuro double eurooperator double division  return   global friend functionsfriend euro operator const euro e1 const euro friend euro operator const euro e1 const euro friend euro operator const euro double euro temp double data   return temp friend euro operator double const euro return addition inline euro operator const euro e1 const euro euro temp temp data e1 data data return temp subtraction inline euro operator const euro e1 const euro euro temp temp data e1 data data return temp endif _euro_h_friend functionsclasseurowith friend functions friend functions423the friend concept functions individual classes conjunction class maywant grant access privatemembers class possibleby friend declaration eliminates data encapsulation cases imagine write global function accesses elements numericalarray class access methods class time methods perform range checking function runtime increase considerably special permission access private data members class dramatically improve function response declaring friend functions class grant function special permit direct access private members achieved declaring function friend friendkeyword pre cede function prototype class definition class friend void globfunc objptr friend int elfunc const objref global function globfunc method elfunc class baredeclared friendfunctions class direct access privatemembers class functions methods class thispointer isnot resolve issue generally pass object func tion process argument note class itselfdetermines friends werenot data encapsulation easily undermined overloading operators friend functions operator functions euroclass defined friendfunc tions allowing direct access private member data order compute multiply divide euros doublevalues expression euro numandnum euroare friendfunc tions implemented perform multiplications friendfunc tions defined inlinein class chapter overloading operators result class result represent measurement time measurement ifndef _result_ define _result_ include daytime class daytimeclass result private double val daytime time public constructor access methodsfriend class controlpoint methods controlpoint friends include result hclass controlpoint private string control pointresult measure  table public constructor methods compute static values measurement average deviation bool statistic access private members measure friend classesclassresultclasscontrolpoint friend classes425declaring friend classes addition declaring individual friendfunctions entire classes friends class methods friendly class automatically becomefriendfunctions class frienddeclaration technique class close conjunction classthatallthe methods class access private members class class controlpointuses objects resultclass calcula tions individual measurements performed repeatedly case sense declare controlpointclass friend resultclass class result friend class controlpoint note controlpointclass influence fact thatit friend resultclass resultclass decides friends andwho access private members matter frienddeclaration occurs privateorpublicsection class regard frienddeclaration extension thepublic interface reason preferable place frienddeclaration thepublicarea class friend functions classes usingfriendfunctions friendclasses helps create efficient programs utilize global friendfunctions methods suitedto task hand common global operator functions declared friend functions extensive friendtechniques diffuses concept data encapsula tion allowing external functions manipulate internal data lead inconsistency class modified extended version reason special care friendtechniques chapter overloading operators array_t cpp simple class represent array range checking include iostream include cstdlib exit namespace std define max class floatarr private float max arraypublic float operator int static int maxindex return max  float floatarr operator int  max cerr nfloatarr range endl exit  return reference element int main cout array range checking endl floatarr random create array int random euros  floatarr maxindex random rand rand_max   f cout nenter indices  floatarr maxindex quit entering invalid input endl cout nindex cin cout element random return  overloading subscript operators class representing arrays overloading subscript operators427subscript operator subscript operator access single array element binaryoperator operands expression array namevwill left operand iwill operand subscript operator arrays implies background pointer arithmetic equivalent restrictions apply overloadedindex operators operand pointer array examplethe operand integral expression usage classesthese restrictions apply operator overloaded class shouldnote operator function class method parameter operand applies left operand class objectthe operand valid typethe result type defined considerable flexibility overloading reflectthe normal arrays return reference object valid type possibilities unlimited easily define associative arrays arrays elements referenced bystrings notes sample program range checking performed access elements normal array aninvalid lead abnormal termination application program address issue defining array classes impact speed programs opposite simple array class definition floatvalues script operator overloaded return reference array element array accessed range checking performed ensure falls boundaries invalid program issues error message terminates class floatarrarray fixed length variable lengths pos sible dynamic memory allocation chapter overloading operators euro class euro represent euro ifndef _euro_h_ define _euro_h_ class euro class left unchanged print method superfluous declaration shift operators ostream operator ostream const euro istream operator istream euro endif _euro_h_ euro_io cpp overload shift operators input output euro type objects include euro include iostream namespace std output stream ostream operator ostream const euro asstring euro return input stream istream operator istream euro cout euro format int euro  cents  char  euro cents input return cents  error setstate ios failbit setelse fail bit euro euro cents acceptreturn overloading shift operators declaration operator functions definition operator functions overloading shift operators o429when outputting euroclass object price screen output statementcauses compiler error cout price coutcan send objects standard output output function defined forthetypein question case user defined classes compiler process previous statement locate suitableoperator function operator previous statement thereforeneed define function overloading operator previous left operand object cout belongs theostreamclass standard class ostreamshould modified necessaryto define global operator function parameters operand euroclass object prototype applies operator function prototype ostream operator ostream const euro return operator function reference ostream mal concatenation operators cout price endl overloading operator operator overloaded input statements cout enter price euros cin price statement operator cin price ascinis object standard istreamclass parameter operatorfunction declared reference istream parameter refer ence euro header file euro hcontains declarations thesefunctions access private members euroclass add frienddecla ration class current exercises chapter overloading operators expression obj represents copy objbefore incrementing prefix postfix decrement operators distinguished samemanner note optimized error handling fractionclass discussed chapter28 exception handling note additionsubtractionmultiplicationdivisiona cb cb cb db cexpressionoperator function obj prefix obj postfix obj operator obj operator  exercisesprefix postfix increment distinguish postfix increment operator prefix increment operator postfix operator function additional parameter type int exercise  calculating fractions exercises431exercise  operators sample class daytimewere overloaded chapter modify class overload relational operators shift operators input output global operator functions define inlinein theheader file overload prefix postfix versions operators operator functions methods class oper ator decrements time time decremented reaching    write main function executes overloaded operators dis plays exercise  develop class represents fractions performs typical arithmetic operations header file called fraction hto define fractionclass anumerator denominator type long constructor parameters type long parameter numerator default  parameter denominator  declare operator functions methods unary prefix operator functions binary operators input output operators declared friendfunctions fractionclass implement constructor fractionclass positive denominator times denominator assumes  issue error message terminate program write operator functions formulae arithmetic operations opposite write mainfunction calls operators fractionclass test application output operands solutions chapter overloading operators solutionsexercise  daytime class daytime relational operators operators prefix postfix operators input output ifndef _daytime_ define _daytime_ include iostream include iomanip namespace std class daytime private short hour minute bool overflow underflow void private function  handle overflow  minute minute  minute  hour hour  hour  overflow true void dec private function  handle underflow  minute minute  minute  hour hour  hour  underflow true public daytime int  int  int  overflow underflow false settime hour minute  solutions433bool settime int hour int minute int  hour  hour  minute  minute    hour short hour minute short minute short return true elsereturn false int gethour const return hour int getminute const return minute int getsecond const return int asseconds const daytime seconds return   hour  minute daytime operator seconds return daytimeoperator int seconds daytime temp return temp daytime operator seconds dec return daytimeoperator int seconds daytime temp dec return temp relational operators t2inline bool operator const daytime const daytime return asseconds asseconds chapter overloading operators t2inline bool operator const daytime const daytime return asseconds asseconds t2inline bool operator const daytime const daytime return asseconds asseconds t2inline bool operator const daytime const daytime return t2inline bool operator const daytime const daytime return t2inline bool operator const daytime const daytime return input output ostream operator ostream const daytime setfill  setw  gethour setw  getminute setw  getsecond time setfill return istream operator istream daytime cout enter daytime mm format int  min   char   min return settime min setstate ios failbit error set fail bit return endif _daytime_ solutions435 daytim_t cpp testing operators class daytime include daytime definition class include iostream namespace std int main daytime cinema   cout nthe movie starts cinema endl daytime cout time endl cin cerr invalid input endl elsecout nthe time endl cout nthe movie cinema cout begun endl elsecout begun endl cout endl cout  seconds endl daytime depart   cout depart endl depart cout ride endl elsecout room endl return  chapter overloading operators exercise  fraction numerical class represent fractions ifndef _fraction_ define _fraction_ include iostream include cstdlib namespace std class fraction private long numerator denominator public fraction long  long  fraction operator const return fraction numerator denominator fraction operator const fraction numerator numerator denominator numerator denominator denominator denominator return fraction operator const fraction return fraction operator numerator denominator return fraction operator numerator denominator return solutions437friend fraction operator const fraction const fraction friend fraction operator const fraction const fraction friend fraction operator const fraction const fraction friend fraction operator const fraction const fraction friend ostream operator ostream const fraction friend istream operator istream fraction endif fraction cpp defines methods friend functions include fraction constructor fraction fraction long long  cerr nerror division exit   numerator denominator fractionoperator const fraction const fraction fraction temp temp denominator denominator denominator temp numerator numerator denominator numerator denominator return temp fractionoperator const fraction const fraction fraction temp temp return temp fractionoperator const fraction const fraction fraction temp temp numerator numerator numerator temp denominator denominator denominator return temp chapter overloading operators fractionoperator const fraction const fraction numerator  cerr nerror division exit  multiply inverse fraction temp temp numerator numerator denominator temp denominator denominator numerator temp denominator  temp numerator temp numerator temp denominator temp denominator return temp ostream operator ostream const fraction numerator denominator return istream operator istream fraction cout enter fraction numerator numerator cout denominator  denominator return denominator  cout nerror denominator  denominator  denominator denominator  cerr nerror division exit  denominator  numerator numerator denominator denominator return solutions439 fract_t cpp testing class fraction modules fract_t cpp fraction cpp include fraction int main fraction    cout nsome test cout endl cout endl cout endl cout endl cout endl cout endl cout endl cout endl fraction   cout   endl fraction   cout   endl cout endl cout nand input cin cout nyour input endl return  intentionally left blank type conversion classesimplicit type conversion occurs expression compiled directly compiled applying conversion rule programmer stipulate compiler perform implicit type conversion classes defining conversion constructors functions finally discuss ambiguity occurring type conversion avoid chapter  chapter type conversion classes currentclassanothertype convertingconstructorconverting function class euro defined chapter conversion constructors euro euro int int euroeuro euro double double euro declarations conversion constructorseuro  int euro   double euro   implicit conversion double euroyour  implicit conversion int euroyour euro   explicit conversion constructor style euro   explicit conversion cast style conversionwhen copy constructor performs type conversion temporary object created thisobject assignment temporary object cleaned note conversion constructors conversions converting constructors class euro conversion constructors443possible type conversions implicit explicit type conversion performed classes program mer decide kind conversion permissible type conversion classes classes fundamental types type conversion involving class defined eitherby conversion constructor orby conversion function conversion constructor performs type conversion converting type thetype current class conversion function performs conversion opposite direction converts object current class type standard type conversion constructors constructor singleparameter determines form object classfrom argument passed reason constructor parameter referred conversion constructor copy constructor exception rule itcreates object class perform type conversion conversion constructor compiler list conver sions standard stringclass constructor creates stringobjectfrom string string string const char supply string argument stringobject isrequired calling conversion constructor conversion constructors examples theeuroclass compiler perform implicit explicit type conversion examples euro salary   salary euro   explicit salary   implicitthe statement initially type mismatch addition defined euroand doublevalue compiler activates conversion constructor cre ate temporary eurotype object doublevalue object tothe salaryobject chapter type conversion classes euro class euro represents euro class euro private long data euros  centspublic euro int euro  int cents  euro double conversion euro double operator double const return double data   methods euro_t cpp testing conversions class euro include euro definition class include iostream namespace std int main cout testing conversions endl euro salary   double   salary  implicit int eurosalary   implicit double eurox salary implicit euro doublex double salary explicit euro doublex salary operator double constructor style safe built types double salary inti salary euro double int output cout salary salary endl   euro cout endl  cout endl return  conversion functionsa converting function euroclasstesting conversions conversion functions445if convert object current class type define aconversion function operator function defines conversion isperformed conversion functions automatically compiler perform implicit explicit type conversion defining conversion functions conversion function implemented method current class nameis operatorkeyword target type convert operator int void const previous statement declares conversion function target type int youmay noticed declaration conversion function return type return type implicitly defined target type conversion function target type multiple keywords asunsigned shortorconst float conversion functions written construct target type object thecurrent object return target object theeuroshown opposite conversion function doubletarget type function converts eurotype object floating point number double oneeuro implicitconversion function versus conversion constructor target type conversion function class case decidewhether preferable conversion constructor target class modify target class standard class conversion function perform task standard type conversion addition user definable type conversions compiler performs standard typeconversions previous intvariable assigned euro object thismethod int wholepart oneeuro converts euroobject doubleand int cents trun cated chapter type conversion classes euro class euro represents euro class euro private long data euros  centspublic expliciteuro int euro  int cents  expliciteuro double converting euro double double asdouble const return double data   conversion function operator double euro_e_t cpp tests explicit conversion class euro include euro_ex class definition include iostream namespace std int main euro salary   double constructordouble   impossible salary  implicit int eurosalary   implicit double eurosalary   salary implicit euro doublex double salary method operator double conversions salary euro   explicit double eurosalary euro   salary asdouble explicit method euro doubleinti salary asdouble euro double intreturn  ambiguities type conversions explicit type conversion class eurotesting explicit conversions ambiguities type conversions447type conversion failure defining conversion function conversion constructor prevent compil ing program unchanged theeuroclass conversion constructor converts doublevalue toeuros statement valid objects wholesaleandretail eurotype retail wholesale   additionally implement conversion functionoperator double converts euro doublevalue previous statement longer piled conversion types double euroandeuro doublearedefined conversions performed prov2 euro   add eurosanddouble prov2   add values type doublehowever compiler perform implicit type conversion technique notambiguous choice compiler issues error message avoiding implicit type conversion prevent ambiguities stating desired conversions explicitly hasthe advantage highlighting type conversions source code undesir type conversion occur classes extended avoided order ensure kinds type conversion performed explicitly techniques explicitdeclaration conversion constructor theexample opposite explicit calls constructor case wholesale euro   okimplicit type conversions conversion functions prevented defin ing function method astype type conversion performed calling thisfunction explicitly exercise chapter type conversion classes fraction cpp simplify fractions void fraction simplify divide numerator denominator greatest common divisor numerator  denominator  return calculating greatest common divisor algorithm euclid long numerator  numerator numerator denominator  greatest common divisor numerator denominator exercisemethodsimplify class fraction exercise449exercise enhance numerical class fraction chapter convert doublevalues fractions fractions double addition fractions rounded arithmetic operations declare simplify method fractionclass insert definition opposite source code method computes largest common divisor numerator denominator numerator denominator divided add simplify function operator func tions add conversion constructor doubletype parameter theclass fraction   yields fraction  doublevalues converted fractions accuracy places technique suffice numbers multiply doublevalue and add  for rounding assign result numerator set denominator  proceed simplify fraction conversion constructor longanddoubletypes conversion intvalues fractions write conversion constructor int modify class conversion fraction doubletypenumber define conversion function inline function main test type conversions assignments arithmetic functions compute sum fraction floating point number output operands screen solution chapter type conversion classes solution fraction numerical class represent fractions class converts fraction double simplifies fractions ifndef _fraction_ define _fraction_ include iostream include stdlib class fraction private long numerator denominator public fraction long long fraction double double constructor default long int constructor fraction long  numerator denominator  fraction int numerator denominator  void simplify operator double fraction double return double numerator double denominator fraction operator const return fraction numerator denominator fraction operator const fraction numerator numerator denominator numerator denominator denominator denominator simplify return fraction operator const fraction simplify return rest class including methods operator operator friend declarations unchanged endif solution451 fraction cpp defines methods friend functions inline include iostream include stdlib include fraction constructors fraction fraction long long unchanged chapter  fraction fraction double         round th digit numerator long denominator  simplify fraction operator const fraction const fraction fraction temp temp denominator denominator denominator temp numerator numerator denominator numerator denominator temp simplify return temp functions operator operator operator left unchanged functions operator operator completed temp simplify function operator code method fraction simplify exercise chapter type conversion classes fract_t cpp tests class fraction type conversions include iostream include fraction int main fraction     double   double fraction cout nsome test endl cout endl cout endl cout endl cout nthe fractions double values endl fraction double cout double endl cout double endl cout double endl cout nand calculate endl cout endl cout endl cout endl cout endl cin enter fraction cout nyour input endl simplify cout nsimplified endl cout nas double double endl cout nenter floating point cin cout nthis fraction form fraction endl calculate sum cout endl cout endl error ambiguous fraction compute fractions double compute doubles cout fraction endl cout double endl return  dynamic memory allocationthis chapter describes program allocate release memory dynamically current memory requirements dynamic memory allocation factor programs chapters additional case studies review subject chapter  chapter dynamic memory allocation heapptr_longptr_double12345671  dynamic objects type long double long ptr_long ptr_long long initialization long object ptr_long  assign valuedouble ptr_double double   ptr_double double initialization ptr_double increment ptr_double ptr_long add long valueptr_long double   error ptr_long pointing double operator newsample calls newon heap operator new455dynamic memory allocation program compiled size data program handle isoften unknown factor estimate memory require ments program cases allocate memory dynamically program running dynamically allocated memory released continually optimize memory usagewith respect current requirements turn high level flexibility allowing programmer represent dynamic data structures trees linked lists programs access large space free memory heap depending onthe operating configured heap occupy large amounts unused space hard disk swappingmemory disk newanddeleteoperators allocate release memory thismeans objects type created destroyed scenario fundamental types callingnewfor fundamental types thenewoperator operator expects type object created argu ment simplest form newfollows syntaxsyntax ptr type whereptris pointer type newoperator creates object specifiedtype returns address object address assigned pointer variable pointer belongs wrong type compiler issue error message long double pld long double statement allocates memory longdouble type object sizeof longdouble bytes previous newdoes define initial object supply parentheses initializethe object pld long double   statement pldpoints memory address long doubletype   statementcout pld endl output chapter dynamic memory allocation dynstd cpp operators delete built types program errors save data starting include iostream namespace std int main cout ntesting dynamic storage allocation endl allocate storage double width   double ptrwidth width double ptrlength double   double ptrarea double work ptrwidth ptrlength ptrarea ptrarea ptrwidth ptrlength delete ptrlength error object cout nwidth ptrwidth nlength ptrlength narea ptrarea endl free storage delete ptrwidth error object dynamically reserveddelete ptrlength okdelete ptrarea okdelete ptrlength error pointer address object ptrlength double   dynamic object double length ptrlength referencecout nnew length length ncircumference  width length endl return  terminating program allocated storage freed operator deletesample program operator delete457a program careful memory release memory thatis longer needed failure impact performance computer sys tem memory released calls callingdeletememory allocated newcan released deleteoper ator deletefollows syntaxsyntax delete ptr operand ptraddresses memory space released thismemory space dynamically allocated long long  work delete delete dynamically allocated memory space released untilthe program terminates pass null pointer deletewhen operator casenothing deletejust returns check null point ers releasing memory adeleteexpression voidtype check memoryhas released sample program illustrates misuse deletecan disastrous specifi callydo deletetwice objectdo deleteto release statically allocated memory error handling newif memory called handleris called newhandler function designed central error handling design error handling routines time handler activated default throws exception exceptions becaught program allowing error condition remedied refer chapter  exception handling exception caught terminate program install handler working older compiler note newreturns nullpointer memory chapter dynamic memory allocation dynobj cpp operators delete classes include account include iostream namespace std account clone const account create copy dynamically int main cout dynamically created objects endl allocate storage account ptra1 ptra2 ptra3 ptra1 account default constructorptra1 display default values ptra1 setnr  set otherptra1 setname tang ming values accessptra1 setstand   methods ptra1 display values constructor arguments ptra2 account xiang zhang    ptra2 display display account ptra3 clone ptra1 pointer dyna mically created copy cout copy account endl ptra3 display display copy delete ptra1 release memorydelete ptra2 delete ptra3 return  account clone const account create copy dynamically returnnew account dynamic storage allocation classes sample program dynamic storage allocation classes459the operators newanddeletewere designed create destroy instances classdynamically case addition allocating memory suitable constructor called releasing memory destructor called perform cleaning tasks operators newanddeleteensure callingnewwith default constructor newfor class fundamental type unlessexplicitly initialized default constructor called object default constructor exists euro peuro euro statement allocates memory object euroclass memory isavailable default constructor eurois executed address objectreturned explicit initialization initialize object explicitly state initial values parentheses youcallnew syntax type ptr type initializing_list values initialization list passed arguments constructor compiler unable locate suitable constructor error message occurs euro euro   statement assigns address euroclass object pointer theobject initialized supplied values expression pethus represents theentire object  add  euros thepublicmembers referred member access operator cout getcents endl releasing memory object created dynamically destroyed deleteoperator makessure object cleaned destructor called memory space released discussed fundamental types deleteyou ensure pointer addressing dynamic object dealing null pointer chapter dynamic memory allocation dynarr cpp operators delete dynamic arrays include iostream include iomanip namespace std int main cout dynamic array endl int size  cnt  step  float parr null cout enter numbers character endl cin cnt size array small enlarge float float size step copy numbers  size parr delete parr release array parr size step parr cnt work numbers cnt  cout invalid input endl float sum   cout input endl  cnt output add cout setw  parr sum parr cout nthe average sum cnt endl delete parr free storagereturn  dynamic storage allocation arrays sample program dynamic storage allocation arrays461imagine compiling program store unknown quantity elements inan array option program create array dynamically array type dynamic array thenew operator thenew operator creating dynamic arrays opera tor supply type quantity array elements syntax vekptr type cnt pointer vekptrwill reference total cntarray elements vekptrhas pointer typefor reason typecan class account account  statement allocates memory  accounttype objects default structor initialize objects arepk    pointer notation   array elements class type class default constructor youcannot supply initialization list calling starting values array ele ments assigned thedelete operator good idea release memory space occupied dynamic array thearray longer needed simply delete operator braces compiler release array single array element delete operand delete pointer pkin case mustreference place inmemory allocated destructor belonging currentclass called array element big difference delete whichwould destructor array element program opposite stores numbers dynamic array size thearray adjusted required newer bigger array created data copied array memory occupied array released chapter dynamic memory allocation firstlast st element2nd element3rd element infoinfoinfo firstnew lastelementlast1st element2nd element3rd element infoinfo infoinfoapplication linked lists simple linked list appending list elementdeleting list elementfirstremovedelementnew firstelementnew secondelementinfoinfoinfo info application linked lists463dynamic data structures implement linked list sample application linked listis dynamic datastructure easy insertion deletion data data structure defines datacan organized units stored manipulated arrays lists trees type data structure choose reaching ofmemory speed access data involved complexity sim plicity algorithms data operations contract staticdata structure size program islaunched dynamicdata structure change size program running oneexample array size changed runtime defining linked list linked list stored main memory followingcharacteristics list element data store live data pointer element listeach list element elements predeces sor successor element list predecessor element successor someelementary operations defined linked lists inserting deleting listelements searching retrieving stored list element advantages storage list elements contiguous main advantage oflinked lists memory list elements allocated neededyou pointer inserting deleting list elements array element inserted deleted array elements movedto room gap array room left allo cate memory array copy data inserting element chapter dynamic memory allocation list defines classes listel list ifndef _liste_h_ define _liste_h_ include class chapter  include iostream include iomanip namespace std class listel list element private datedouble money listel pointer successorpublic listel    double   listel null access methods getdate setdate getamount setamount listel getnext const return friend class list defining class listclass list private listel public list null constructor list destructor access elements listel const return listel const return append element list void pushback const double delete element list void popfront endif _list_h_representing linked list classes header file list representing linked list465representing list elements recursive data structure represent linked list recursive data structureis data structure pointer data structure type data structure impossible pointer linked list represent transactions bank account atransaction characterized sum money reason transac tion list element needed represent transaction transac tion data data store pointer element list class opposite listel designed represent list ele ments things simple data store sum money thepublicdeclaration includes constructor access methods live data overloading operator order output list common practice pointer element list point null termination criterion nextpointer queried fornull representing list identify linked list point pointer element list canthen pointer successor element address element list pointer element list appending elements opposite class definition listclass private sectioncomprises pointers reference list elements constructorhas easy job simply points pointers null creating anempty list destructorhas complex task release memory occupiedby remaining list elements thepushback method appenda element list todo memory allocated dynamically element successor element lastpointer updated addition themethod deal special case list thepopfront method deletes element list involves turningthe pointer element element releasing memory occupied element special case list applies exercises chapter dynamic memory allocation exercisesnotes exercise  effects splice functioninsertpositionresult1st array nd array    exercises467exercise  write global function called splice splices intarrays allocating memory dynamic array room intarrays copying elements arrays array elements array inserted position array inserted remainder array appended arguments intarrays length position spliced return pointer array exercise  write global function called merge merges sorted intarrays allocating memory dynamic array room intarrays inserting elements arrays array sequence arguments intarrays length return pointer array test function modify program sort arrays exercise  chapter  exercise  complete test implementation linked list chapter define access methods opposite overload operator class listelto formatted output data list elements asstring class implement destructor listclass destructor release memory remaining elements read pointer successor element destroying implement methods pushback andpopfront append ing deleting list elements overload operator listclass output data stored list test listclass inserting deleting list elements repeatedly outputting list solutions chapter dynamic memory allocation solutionsexercise  splice cpp implements splice algorithm include iostream include iomanip include cstdlib srand rand include ctime time namespace std prototype int splice int v1 int len1 int v2 int len2 int pos int main cout testing splice function endl int len1  len2  int int len1 int len2 initialize random number generator current time srand unsigned time null  len1 initialize arrays rand positive andfor  len2 rand negative numbers output array cout  array endl  len1 cout setw  cout endl cout  array endl  len2 cout setw  cout endl cout position insert nd array st array positions   len1 int pos cin pos solutions469int len3 len1 len2 splice len1 len2 pos null cerr invalid position endl cout spliced array endl  len3 cout setw  cout endl delete delete delete return  function splice inserts array v2 v1 starting position pos int splice int v1 int len1 int v2 int len2 int pos pos  pos len1 return null int  i1   int int len1 len2  i1  i1 pos i1 st partv v1 i1  len2 nd partv v2 i1 len1 i1 rd partv v1 i1 return chapter dynamic memory allocation exercise  merge cpp implements merge algorithm include iostream include iomanip include cstdlib include ctime namespace std prototypes void selectionsort int arr int len int merge int v1 int len1 int v2 int len2 int main cout merge algorithm endl int len1  len2  int int len1 int len2 initialize random number generator current time srand unsigned time null  len1 initialized arrays rand  len2 rand selectionsort len1 sort array selectionsort len2 sort array output arrays cout sorted arrays endl cout st array endl  len1 cout setw  cout endl cout nd array endl  len2 cout setw  cout endl int len3 merge len1 len2 len3 len1 len2 solutions471cout merged array endl  len3 cout setw  cout endl delete delete delete return  function selectionsort inline void swap int int swap int temp temp void selectionsort int arr int len register int minp pointer array elements int arr len  pointer elementfor arr arr minp arr search minimumfor arr  starting atif minp position arr minp swap arr minp swap merge merges sorted arrays create sorted array int merge int v1 int len1 int v2 int len2 int  i1   int int len1 len2 int array  i1 len1 len2 v1 i1 v2 v1 i1 elsev v2 i1 len1 copy rest v1 v2 i1 len1 v1 i1 elsewhile len2 v2 return chapter dynamic memory allocation exercise  defines class cpp implements methods class inline defined files left unchanged chapter  solutions list defines classes listel list represent linked list ifndef _list_h_ define _list_h_ include include iostream include iomanip namespace std class listel private double money listel pointer successorpublic listel    double   listel null access methodsconst getdate const return void setdate sets current setdate bool setdate int day int month int year return setdate day month year solutions473double getamount const return void setamount double listel getnext const return friend class list output elementostream operator ostream const listel defines list class class list private listel public list null constructor list destructor access elements listel const return listel const return appends element list void pushback const double deletes element list void popfront outputs listostream operator ostream const list endif _list_h_ list cpp implements methods class list defined inline include list destructor list list list listel pel null pel null pel pel delete pel chapter dynamic memory allocation appends element list void list pushback const double listel pel listel null list pel elselast pel pel deletes element list void list popfront null listel pel save element element delete pel element null null global functions output outputs element ostream operator ostream const listel getdate asstring fixed setprecision  setw  getamount return outputs list ostream operator ostream const list list listel pel list pel null list endl pel null pel pel getnext pel endl return solutions475 list_t cpp tests list class include list int main cout testing class list endl list alist list cout alist endl list cout nenter account type invalid input quit int month day year char double true cout format month day year cin month day year setdate month day year break invalid cout account change cin break alist pushback cout ncontent list cout alist endl cout nremoving element list listel ptrel ptrel alist ptrel null cout deleting ptrel endl alist popfront cout ncontent list cout alist endl return  intentionally left blank dynamic membersthis chapter describes implement classes pointers dynamically allocated memory include copy constructor definition overloading assignment operator class designed represent arrays length sample application chapter  chapter dynamic members      objectfarrarrptrmax cnt  class representing dynamic arrays floats class floatarr private float arrptr dynamic memberint max maximum quantity reallocating storage int cnt number elementspublic public methods members varying length object class floatarrin memory data members class floatarr members varying length479dynamic membersyou exploit potential dynamic memory allocation leverage existing classesand create data members variable length depending data appli cation program handle memory allocated required applica tion running order class pointer dynamically allocated memory actual data data members kind dynamicmembers class compiling program arrays howmany elements array store class designed represent arrays point consideration dynamically defined variable length arrays requirements developing version floatarrclass tomeet requirements additionally manipulate arrays easy fun damental types simple assignment objects v1andv2in class v2 v1 object v2itself programmer ensure memory isavailable accommodate array v1 case fundamental types existingobject v2 initialize object v3 floatarr v3 v2 object v3ensures memory accommodate arrayelements v2 object floatarris declared user define theinitial length array statementexample floatarr farr  allocates memory maximum  array elements definition floatarrclass comprises member addresses adynamically allocated array addition intvariables required storethe maximum current number array elements chapter dynamic members floatarr dynamic array floats ifndef _floatarr_ define _floatarr_class floatarr private float arrptr dynamic memberint max maximum quantity reallocation storage int cnt number array elementspublic floatarr int  constructorfloatarr int float val floatarr destructorint length const return cnt float operator int subscript operator float operator int const bool append float val append val bool remove int pos delete position pos endif _floatarr_ include floatarr include iostream namespace std int main floatarr  array  float valuesfloatarr   f initialize array  float values   append  f cout current number elements length endl cout current number elements length endl return  classes dynamic member version class floatarrcreating objects dynamic members classes dynamic member481the question designing class represent arrays whatmethods enhance floatarrclass step step opti mizing existing methods adding methods version floatarrclass comprises basic methods areintroduced discussed constructors create object floatarrclass length andstore floatvalue object needed constructor expects intvalue asan argument declared purpose floatarr int  number is default argument length array adefault constructor creates array empty array elements additional constructorfloatarr int int val define array stored array element case state length array floatarr arr   f statement initializes  elements array   additional methods thelength method query number elements array arr length returns for array arr overload subscript operator access individual array elements arr  f imust lie range tocnt  theappend method append array number ofelements incremented remove method opposite append deleting element stated position reduces current count pro vided valid position stated chapter dynamic members objectfarrarrptrmax cnt  objectfarrarrptrmax cnt creating destroying objects effects declaration floatarr farr   f memory allocated data members storage allocated  array elements variables maxandcntare set to10 finally   initialize array elements            objectfarrarrptrmax cnt  creating destroying objects483the memory array elements contained floatarrobject beallocated dynamically constructor object occupies memory required data members arrptr max cnt sizeof floatarr aconstant defaults  bytes  bit computers additional dynamic memory allocation adjusted meet newrequirements assignment finally memory released explicitly object destroyed constructing object constructor floatarrclass defined floatarr floatarr int max cnt  arrptr float max allocates memory narray elements current number array elements setto0 constructor fills array supplied definedas floatarr floatarr int float val max cnt arrptr float max int  cnt arrptr val opposite memory allocated object farrand thisobject initialized destroying object object destroyed dynamic memory object occupies released classes dynamic members alwaysneed destructor perform task thefloatarrclass dynamic array memory released tothedelete operator floatarr floatarr delete arrptr chapter dynamic members floatarr cpp implementing methods class floatarr include floatarr include iostream namespace std constructors destructoras subscript operator objects const float floatarr operator int  cnt range checking cerr class floatarr range exit  return arrptr float floatarr operator int const bool floatarr append float val cnt max arrptr cnt val return true enlarge array return false bool floatarr remove int pos pos  pos cnt int pos cnt  arrptr arrptr  cnt return true elsereturn false implementing methodsnew version class floatarr implementing methods485read write access subscript operator subscript operator overloaded easy manipulation array elements floatarr   f   f int  length cout operator read write access array elements usedfor constant objects reason support read access constant objects thefloatarrclass versions operator function operator purpose version returns reference array element thussupports write access read version supports read access array elements automatically called compiler accessing constant objects implementation versions identical cases range checking isperformed lies valid boundaries array element simply case read version returned appending deleting arrays thefloatarrclass comprises methods append andremove appendingand deleting array elements version append works slot thearray exercises append extend array required alsoapplies method insert write exercise chapter remove method delete element elements followingthe deleted element place preserving original order current count decremented element array deleted overwritten element inserted technique copy element position elementthat deleted simply overwriting element technique quicker preferable cases order elements chapter dynamic members      objectaarrptrmax cnt objectbarrptrmax cnt  floatarr cpp implementing methods floatarr floatarr const floatarr src max src max cnt src cnt arrptr float max int  cnt arrptr src arrptr copy constructor standard copy constructor floatarr creates copy defined copy constructor class floatarr copy constructor487initializing objectthe step ensure existing object initialize object array statement valid floatarr array bshould length array aand array elements bshould values thefloatarrclass copy constructor perform task constructorhas reference constant array parameter prototype floatarr const floatarr standard copy constructor class copy constructor compiler automatically create aminimal version standard copy constructor constructor copies datamembers object passed data members object standard copy constructor sufficient class simply copy ing data members serve purpose objects dynamic members copy pointers meaning pointers dif ferent objects reference place memory diagram opposite illustrates situation floatarrclass objects scenario trouble imagine releasing memory allocated foran object dynamically pointer object reference memory area longer existed proprietary version copy constructor write copy constructor classes dynamic members ensuring live data pointers copied dynamically allocated memory opposite definition copy constructor forthefloatarrclass calling creates array array elements theobject passed method copied array chapter dynamic members floatarr dynamic arrays floats class floatarr private data members beforepublic methods floatarr const floatarr src copy constructorfloatarr operator const floatarr assignment file floatarr cpp operator function implementing floatarr floatarr operator const floatarr src src assignments max src max cnt src cnt delete arrptr release memory arrptr float max reallocate andfor int  cnt copy elements arrptr src arrptr return include floatarr int main floatarr default constructor floatarr   f array  float values initial   const floatarr kw copy constructor create object assignment assignmentnew declarations class floatarrdefining assignmentsample calls assignment489each class comprises implicitly defined default methods replace withyour definitions default constructor destructorthe copy constructor standard assignmentin contrast initialization copy constructor takes place anobject defined assignment requires existing object multiple assignments modify object default assignmentgiven v1andv2are floatarrclass objects assignment isvalid v1 v2 default assignment performed member member data members v2are copiedto data members v1just copy constructor copythem technique suitable classes dynamic members simply point pointers belonging objects dynamic allo cated memory addition memory addressed pointer target object unreferenced assignment overloading assignment operator overload default assignment classes containingdynamic members generally speaking define copy constructor define assignment operator function assignment perform tasks release memory referenced dynamic membersallocate sufficient memory copy source object data memory operator function implemented class method returns reference thetarget object allowing multiple assignments prototype operator function thefloatarrclass defined floatarr floatarr operator const floatarr src implementing operator function avoid assignment read memory areas released exercises chapter dynamic members copy constructor list list const list assignment list list operator const list methods append float array floats void append float val void append const floatarr floatarr operator float val floatarr operator const floatarr methods insert float array floats bool insert float val int pos bool insert const floatarr int pos case memory space allocated array current capacity insufficient exercisesnew methods class listnew methods class floatarr exercises491thewidth method ostreamclass returns current field width methodwithout arguments note exercise  complete definition listclass represents linked list test class modify test program create copy list default assignment objects listclass note program reacts trial program class incomplete class dynamic members tasks performed define copy constructor listclass overload assignment operator exercise  add methods opposite floatarrclass contrast existing methodbool append float val method allocate memory required methods write private auxiliary function purposevoid expand int newmax method copy existing data newly allocated memory overload operator calling functionappend theinsert method inserts floatvalue floatarrobject atpositionpos elements follow posmust pushed overload shift operator output array field width originally defined output array elements add calls methods test program output solutions chapter dynamic members solutionsexercise  list definition classes listel list representing linked list ifndef _list_h_ define _list_h_ include include iostream include iomanip namespace std class listel unchanged chapter  definition class list class list private listel public methods list const list copy constructorlist operator const list assignment unchanged chapter  endif _list_h_ list cpp implements methods class list defined inline include list copy constructor list list const list src appends elements src list null listel pel src pel null pel pel pushback pel pel solutions493 assignment list list operator const list src release memory elements listel pel null pel null pel pel delete pel null appends elements src list pel src pel null pel pel pushback pel pel return methods unchanged list_t cpp tests class list copy constructor assignment include list int main cout testing class list endl list list1 list cout list1 endl list    insert  elements double   list1 pushback setdate      list1 pushback setdate      list1 pushback chapter dynamic members cout nthree elements inserted ncontent list endl cout list1 endl cout npress return continue cin list list2 list1 cout copy st list created contents copy endl cout list2 endl cout nremove element list listel ptrel ptrel list1 ptrel null cout deleted ptrel endl list1 popfront cout ncontent list cout list1 endl list1 list2 reassign copy cout copy assigned st list contents assignment endl cout list1 endl return  solutions495exercise  floatarr dynamic arrays floating point numbers ifndef _floatarr_ define _floatarr_ include iostream namespace std class floatarr private float arrptr dynamic member int max maximum quantity reallocating storage int cnt number array elementsvoid expand int newmax helps enlarge arraypublic constructors destructor assignment subscript operator method length chapter methods append floating point number array floating point numbers void append float val void append const floatarr floatarr operator float val append val return floatarr operator const floatarr append return methods insert floating point number array floating point numbers bool insert float val int pos bool insert const floatarr int pos bool remove int pos delete position pos output array friend ostream operator ostream const floatarr endif _floatarr_ chapter dynamic members floatarr cpp implements methods floatarr include floatarr constructors destructor assignment subscript operator unchanged functions private auxiliary function enlarge array void floatarr expand int newmax max return max newmax newmax cnt cnt newmax float temp float newmax int  cnt temp arrptr delete arrptr arrptr temp append floating point number array floats void floatarr append float val cnt  max expand cnt  arrptr cnt val void floatarr append const floatarr cnt cnt max expand cnt cnt int count cnt thisfor int  count arrptr cnt arrptr solutions497 insert float array floatsbool floatarr insert float val int pos return insert floatarr  val pos bool floatarr insert const floatarr int pos pos  pos cnt return false invalid positionif max cnt cnt expand cnt cnt int cnt  pos shift uparrptr cnt arrptr starting posfor  cnt gap arrptr pos arrptr cnt cnt cnt return true deletebool floatarr remove int pos pos  pos cnt int pos cnt  arrptr arrptr  cnt return true elsereturn false output arrayostream operator ostream const floatarr int width save field width float arrptr arrptr cnt width return chapter dynamic members floatv_t cpp tests class floatarr include floatarr include iostream include iomanip namespace std int main floatarr  array  float values floatarr   f initialize array  float values   cout current total elements length endl cout current total elements length endl float  f append values   f append cout nthe array elements appending endl cout setw  endl const floatarr copy constructor creates const object cout nthe copy created cout nthe array elements copy setw  endl remove  erase element position  append  f add element append  f cout nassignment cout nthe elements assigning setw  endl insert  cout nthe elements inserting copy position  setw  endl return  inheritancethis chapter describes derived classes constructed existing classes inheritance defining derived classes discusshow members redefined objects constructed destroyed access control base classes realized chapter  chapter inheritance concept inheritance relation carpropertiesand capacitiesof classcarpropertiesand capacitiesof classcarpropertiesand capacitiesof classcaradditionalproperties andcapacities classpasscaradditionalproperties andcapacities classtruckpasscartruck concept inheritance501base classes derived classes inheritance classes constructed basis existing classes newderived class inherits data methods called base class addmore characteristics functionality class fleet management program car hire company handle kinds ofvehicles automobiles motorcycles trucks vehicles identification number vehicle manufacturer vehicle sta tus hired repair shop additionally operations modify status required class differentiate vehicle types classes derived base classcar passcar represent passenger carrying vehicles classhas additional attributes number seats type sunroof additional operations relationship object passcartypeisa special object carclass passenger vehicleis special kind car cases derived class establishes isrelationship base class distinguish close relationship called hasrelationship asalready mentioned hasrelationship occurs classes member ofone class class type accountobject stringobject representthe account holder data abstraction reusability inheritance number benefits software developers data abstraction general characteristics abilities handled generic base classes specializations organized hierarchical relationships derived classes easier manage complex situations relationships usability classes defined tested reused adapted toperform tasks base class implementation purpose public interfaces required chapter inheritance bbase class bcdb directbase classb indirectbase classclass public private declaration additional private data members member functionspublic declaration additional public data members member functions derived classesdefining derived class direct indirect derivation derived classes503when define derived class base class additional data members meth ods access control base class defined opposite schematic definition derived class cclassinherits bclass defined publicsection colon theprivateandpublicsections additional members cclass access public members base class access privileges base class bare designated publickeyword pre cedes publicmembers base class bare publicly derived classc kind inheritance ports public interface base class derivedclass extended additional declarations objects derived class publicmethods base class publicbase class imple ments isrelationship common common cases access members base classneeds restricted prohibited methods class ccan access thepublicmembers users class privateorpro tectedderivation achieve techniques discussed access private members base class theprivatemembers base class protected cases methods derived class access privatemembers baseclass imagine consequences hack access thebase class simply defining derived class undermining protection offered data encapsulation direct indirect base classes derived class ccan base class class classhierarchies class bthen indirect base class class graphic opposite arrow directly derived classdis direct derivation class cand indirect derivation chapter inheritance car definition baseclass car derived class passcar include iostream include string namespace std class car base class private long string producer public constructor car long l const string prod access methods long getnr void const return void setnr long const string getprod const return producer void setprod const string producer void display void const display car class passcar public car derived class private string passcartype bool sunroof public constructor passcar const string bool int  const string access methods const string gettype const return passcartype void settype const string passcartype bool getsunroof const return sunroof void setsunroof bool sunroof void display const members derived classesbase class carand derived class passcar members derived classes505let opposite illustrate derived classes aredefined carclass derived class passcarare defined data members methods base class carcontains data members nrandproducer torepresent identification number manufacturer derived classpasscarinherits data members object passcarclass tains data members nrandproducer object includes called basesub objectof type car thepasscarclass additionally data members passcartypeandsunroofto represent passenger vehicle sunroof passcartypeobject total data members sake simplicity fur ther data members number seats base class carcontains constructor access methods methoddisplay screen output methods inherited thederived class passcar passcarclass constructor additional access methods outputfunction called display declared derived class inherits methodcalleddisplay declares method display method redefined member function data member derived class redefined member assumes meaning derived class member inherited base class derived class retain original meaning point public interface carclass publicbase class passcarclass publicmem bers base class derived class thegetnr method object named cabrioin passcarclass cout car number cabrio getnr public interface derived class comprisesthepublicmembers base class andthepublicmembers additionally defined derived class chapter inheritance class carclass passcar public carvoid passcar display void constprivate private public public getnr getprod cout type passcartype cout type passcartypif sunroof cout elsecout cout endl cout ncar number string passcartype long string producer long getnr void bool sunroof cout nproducer okoknot okmember accessaccessing members base class car member access507access additional members methods derived classes access member additionally defined thederived class const string gettype const return passcartype thegettype method directly accesses private data member passcartypeinthepasscarclass access private members base class private member base class directly accessible methods ofthe derived class output function display derived class passcar forexample statement cout producer producer asproduceris private data member base class car compiler issuean error message point methods belonging derived classes indirect access private datamembers base class access methods publicdeclaration thebase class purpose opposite version display methodthat calls getmethods base class car access method state method base class base class identified thispointer passed implicitly argu ment getprod opposite equivalent getprod lookupthe rules apply searching method compiler method called derived class firstif compiler walks step tree looksfor publicmethod calls getprod base class car method isnot defined passcarclass chapter inheritance file car cpp version method passcar display calls method display base class void passcar display void const car display method base classcout type passcartype cout nsunroof sunroof cout endl elsecout endl redefining membersnew version method display redefining members509redefinitionthere options names data members methods derived classes  occur base class redefinition  exists base class redefinition case member continues exist unchanged thebase class redefining members derived class base class lookup rules compiler lead scenario member redefined derived class mask mem ber base class situation local global variables local variablewill mask defined global variable redefinition overloading methodsare redefined derived classes adopts methods newfeatures class method redefined signature return type method changed redefinition overload functions derived class scope redefining method mask method base class overload methods class repeatedly redefine base class method derived class access members base classif redefine method derived class alter fact base classmethod exists method declared publicsection base class redefine method range operator access baseclass method version display method opposite illustrates point thedisplay method defined base class output data members thebase class range operator base class display method derived class head intoan indefinite recursion chapter inheritance version constructor passcar passcar passcar const string bool int const string setnr initial values datasetprod members base class passcartype initial values data mem sunroof bers derived class version constructors passcar passcar passcar const string bool int const string car passcartype initial values data mem sunroof bers derived class version constructor passcar passcar passcar const string bool int const string car passcartype sunroof remains constructing destroying derived classes version constructor passcarsecond version base class initializer version base class member initializer constructing destroying derived classes511constructor calls constructor derived class required create object derived class type derived class members base class base object created initialized base class constructor called perform task defined default constructor order constructors called base class construc tor called derived class constructor object constructed core outwards version constructor passcar opposite sets initial val ues calling access methods base class implicit default structor base class occurs prior base object initialized default values process drawbacks technique creating objects member objects default constructor base class ini tialization incorrect values assigning live values impacts response program base initializer base class constructor parameters sense structor initializes data members correct values base initial izerfor constructor derived class defined purpose version constructor passcarcontains base initializer car syntax base initializer base objects member ini tializer member objects state base member initializer list separated commas version passcarcon structor illustrates point destroying objects object destroyed destructor derived class called bythe destructor base class reverse order constructor calls applies define destructor derived class actions performed structor reversed base class destructor called explicitly executed implicitly chapter inheritance car_t cpp testing base class car derived class passcar include car int main const passcar beetle beetle false  vw beetle display cout nand passenger car number beetle getnr endl passcar cabrio carrera true cabrio setnr  cabrio setprod porsche cabrio display cout nonly data base class cabrio car display return  objects derived classessample program screen output car number  producer vw type beetle sunroof noand passenger car number  car number  producer porsche type carrerasunroof yesonly data base class car number  producer porsche objects derived classes513declaring objectsthe program opposite illustrates objects derived classes objects beetleandcabrio derived class passcartype declared passcarclass default constructor objects initialized itis sufficient state passcartype sunroof default values exist forall data members object beetleis declared constjust getmethods thedisplay method called constant objects declared asread methods invalid beetle setnr  errorthis correctly define initial values object declare calling redefined methodswhen redefined method object type determines version themethod executed passcarclass method display rede fined statementexample cabrio display outputs additional data members passcartypeandsunroof inthe case vanobject carclass callingexample van display execute method base class calling methods base classyou wondering base class method called object derivedclass method redefined derived class scope resolution operator display basic data cabrioobject direct tothe base class method display cabrio car display method preceded base class scope resolu tion operator case chapter inheritance safe classes safe castle include iostream namespace std class safe private int topsecret protected int secret void settopsecret int topsecret int gettopsecret const return topsecret void setsecret int secret int getsecret const return secret public int nosecret safe topsecret  secret  nosecret  class castle public safe public castle topsecret  error privatesettopsecret  protectedsecret  protectednosecret  public void test secret  error privatesettopsecret  protectedsecret  protectednosecret  public protected members sample classes protected members515access sheltered members private members base class equally inaccessible methods friendfunctions derived class create class hierarchy require methods friendfunctions derived class communicate directly members base class base class contained members build ing blocks derived classes general purpose class represent window screen dimen sions characteristics general windows characteristics protecting methods derived classes direct access protected members methods friendfunctions access sheltered members base class introduce additional level access control privateandpublic achieved protected declarations member declared protectedis sheltered external access pri vatemember protectedmember inaccessible base class objectsand classes derived base class contrast privatemember methods friendfunctions derived classes access member classes defined opposite safeandcastle protectedmembers ofthe base class accessed directly derived class contrast protectedmembers inaccessible users classes castle treasure treasure topsecret  error private treasure secret  error protected treasure settopsecret  error protected treasure nosecret  okprotecteddeclarations caution change declaration aprotectedmember class derived class examined ascertainwhether additional modifications exercises chapter inheritance additional data members type number axlesintload capacity doubleadditional methods void setaxles int int getaxles const void setcapacity double void getcapacity const void display const exercisesfor exercise  classtruckbeing derived class car exercises517exercise  classes carandpasscarare modify objects created destroyed addition class truckis class hierarchy change classes carandpasscarto constructor issue message creating object type define destructor carandpasscarclasses destructor issue message destroying object type define class truck derived car data members opposite constructor destructor additional methods opposite implement constructor truckclass constructor shouldagain issue suitable message base initializer initialize data members car define destructor truck destructor issue suit message trucks test class create display trucktype object mainfunction required user enable program create dis play objects types passcarandcar observe objects member objects created destroyed exercise  derive classes depaccandsavacc accountclass defined chapter  titled const objects methods additionally define overdraft limit rate depaccclass thesavacccontains members base class rate classes define constructors provide default values parameters add access methods add display method screen output test classes initializing objects depaccandsavacctypes object declarations outputting modify savings deposit account interactively display values chapter inheritance productprepackedfoodfreshfood properties barcodenamemethods setcode getcode scanner printer properties price piecemethods getprice setprice scanner printer properties weight price poundmethods setwght getwght scanner printer exercise  exercises519exercise  supermarket chain asked develop automatic checkout products identifiable barcode product groceries sold packages weight packed goods fixed prices price groceries sold weight calculated multiplying weight current price kilo develop classes needed represent products organize hierarchically productclass generic products barcode base class theproductclass data members type longused storing barcodes product define constructor parameters data members add default values para meters provide default constructor class addition access methods setcode andgetcode define methods scanner andprinter test purposes methods simply output product data screen read data product keyboard step involves developing special cases productclass define classes derived product prepackedfood andfresh food addition product data prepackedfoodclass shouldcontain unit price freshfoodclass weight price kilo data members classes define constructor parameters providing default values data members base member ini tializer define access methods needed data members redefine methods scanner andprinter data members consideration test classes mainfunction creates objects types product prepackedfoodandfreshfood object type fully initialized object definition default structor create object test getandsetmethods andthescanner method display products screen solutions chapter inheritance solutionsexercise  car defines base class car derived classes passcar truck ifndef _car_h_ define _car_h_ include iostream include string namespace std class car previous definition chapter class passcar public car previous definition chapter class truck public car private int axles double tons public truck int double int const string truck void setaxles int axles int getaxles const return axles void setcapacity double tons double getcapacity const return tons void display const endif solutions521 car cpp implements methods car passcar truck include car methods base class car car car long const string prod cout creating object type car endl producer prod car car cout destroying object type car endl void car display const cout ncar number nproducer producer endl methods derived class passcar passcar passcar const string bool int const string car passcartyp sunroof cout create object type passcar endl passcar passcar cout ndestroying object type passcar endl void passcar display void const car display base class method cout type passcartype nsunroof sunroof cout endl elsecout endl chapter inheritance methods derived class truck truck truck int double int const string car axles tons cout creating object type truck endl truck truck cout ndestroying object type truck void truck display const car display cout axles axles ncapacity tons long tons car_t cpp tests base class car derived classes passcar truck include car int main truck toy     volvo toy display char cout ndo create object type passcar cin const passcar beetle beetle false  vw beetle display cout ndo create object type car cin const car oldy  rolls royce oldy display return  solutions523exercise  account defines classes account depacc savacc ifndef _account_h define _account_h include iostream include iomanip include string namespace std class account private string unsigned long double balance public account const string unsigned long l double   balance const string getname const return void setname const string unsigned long getnr const return void setnr unsigned long double getbalance const return balance void setbalance double balance void display cout fixed setprecision  account holder endl account number endl balance account balance endl class depacc public account private double limit overdraft limitdouble interestpublic depacc const string unsigned long l double   double li   double   account limit li chapter inheritance access methods double getlimit const return limit void setlimit double limit double getinterest const return void setinterest double void display account display cout fixed setprecision  overdraft limit limit endl rate endl endl endl class savacc public account private double compound interestpublic savacc const string unsigned long l double   double   account access methods double getinterest const return void setinterest double void display account display cout fixed setprecision  rate endl endl endl endif solutions525 account_t cpp tests classes depacc savacc derived class account include account int main string double db savacc mickey mickey mouse      mickey display cout getline cin cout rate cin db mickey setname mickey setinterest db mickey display depacc dag donald duck       dag display cout limit cin db dag setlimit db dag display return  chapter inheritance exercise  product defines classes product prepackedfood freshfood ifndef _product_h define _product_h include iostream include iomanip include string namespace std class product private long bar string public product long l const string bar void setcode long bar long getcode const return bar void setname const string const string getname const return void scanner cout nbarcode cin bar cout cin cin sync cin clear void printer const cout nbarcode bar nname endl class prepackedfood public product private double pce_price solutions527public prepackedfood double   long l const string product pce_price void setprice double pce_price double getprice const return pce_price void scanner product scanner cout price piece cin pce_price void printer const product printer cout fixed setprecision  price piece pce_price endl class freshfood public product private double wght double lbs_price public freshfood double   double   long l const string product wght lbs_price void setwght double wght double getwght const return wght void setprice double lbs_price double getprice const return lbs_price void scanner product scanner cout weight lbs cin wght cout price lbs cin lbs_price cin sync cin clear void printer const product printer cout fixed setprecision  price lbs lbs_price nweight wght ntotal lbs_price wght endl endif chapter inheritance product_t cpp tests classes product prepackedfood freshfood include product int main product l flour printer output productp2 setname sugar set data membersp2 setcode  printer output product prepacked products prepackedfood pf1    salt pf2 pf1 printer output prepacked productcout input data prepacked product pf2 scanner input output pf2 printer data nd productfreshfood pu1      grapes pu2 pu1 printer output item fresh foodcout input data prepacked product pu2 scanner input outputpu2 printer data nd product cout nagain fixed setprecision  nbarcode pu2 getcode nname pu2 getname nprice lbs pu2 getprice nweight pu2 getwght nend price pu2 getprice pu2 getwght endl return  type conversion class hierarchiesthis chapter describes implicit type conversion class hierarchies occurs context assignments function calls addition explicit type casting class hierarchies discussed upcasting downcasting chapter  chapter type conversion class hierarchies converting base classes implicit conversion include car bool compare car car int main passcar beetle beetle false  vw miata miata true  mazda bool res compare beetle miata implicit conversion base class car beetle car miata bool compare car car base beetle base miata inconvenient explicit type cast type passcar performed converting base classes531implicit conversion class derived class publicinheritance derived class assumesthe characteristics features base class objects derived class type becomespecialobjects base class automobile special type vehi cle utilize isrelationship handling objects assign anobject derived class object base class implicit type conver sionto base class type base class generic term multiple special cases theclassespasscarandtruckwere derived carclass objects passcarortrucktype managed objects cartype assignmentsimplicit type conversion class hierarchies occurs assignments tobase class objectspointers references base class function callsadditionally kind implicit type conversion takes place arguments offunction calls function compare prototypeexample bool compare car car objects derived passcarclass type beetleandmiata followingstatement validexample compare beetle miata compiler performs implicit type conversion arguments beetleandmiata converting parameter type reference base class car type conversion arguments function calls type conversionthat occurs assignments chapter type conversion class hierarchies autobmw producer bayer sunroof trueproducer bayer passcartype i type conversions assignments assignmentcar auto passcar bmw i true  bayerische motorenwerke auto bmw type conversions assignments533assignment base class objectan object belonging derived class type assigned object base class car auto passcar bmw i true  bayerische motorenwerke auto bmw object bmw belongs derived class passcar datamembers base class car vehicle number manufacturer duringan assignment object bmwis copied data members object autostep bystep statement equivalent auto bmw auto producer bmw producer data members additionally defined derived class copied statement outputs copied data members auto display fact assign object belonging derived class base class object assumes object assignment operator member object type left operator assignments derived class objects case attempt assign base class object object aderived class assignmentexample bmw auto error invalid values additional data members passcartypeandsunroofare unknown assignment reverse order defined assignment ofthis type copy constructor parameter type reference base class supply default values additional data members derived classes chapter type conversion class hierarchies carptrcabrio nrproducer1001 triumph cartype spitfire sunrooftrue converting references pointers pointer assignmentpasscar cabrio spitfire true  triumph car carptr cabrio carptr cabrio converting references pointers535converting base class pointers theisrelationship derived class base class apparent refer ences pointers pointer type pointer base class base classpointerfor short reference object derived class type car carptr cabrio case cabriois object class passcar rule applies access referenced object base class pointer access public interface base class additional members defined derived class inaccessible makethis clear carptr display calls display method base class car carptrpoints anobject passcarclass case impossible methods additionallydefined derived class carptr setsunroof false errorthe object carptrbelongs carclass represents generic ofcabrio assignment invalidexample passcar auto auto carptr error althoughcarptris pointing object passcartype case conversions references base classes situation arises working references reference type reference base class point object derived class reference address generic object case car carref cabrio okcarref display output base members carref setsunroof true error passcar auto auto carref erroralthough reference carrefpoints object passcartype impossi ble assign passcartype object autoto object chapter type conversion class hierarchies carpasscarcarptrstatic_cast passcar carptr pointer tobase classderivedclassdowncastcarpasscarstatic_cast car passcarptr passcarptrpointer tobase classderivedclassupcastexplicit type conversions downcast upcast explicit type conversions537upcasts downcasts type conversions walk class hierarchy upcasts safe upcasting performed implicitly reason type conversions involve walking tree downcasts formed explicitly cast construction cast operator type wasavailable static_cast operator task areequivalent case explicit cast constructions cabriois object derived class passcar state mentsexample car carptr cabrio passcar carptr display point base class pointer carptrto cabrioobject carptris cast apointer derived class access display method thederived class passcarvia pointer parentheses case themember access operator higher precedence cast operator type operator static_cast conforms followingsyntax static_cast type expression converts expression target type type previous equiv alent toexample static_cast passcar carptr display parentheses required operators static_cast equalprecedence read left downcasting pointer reference entire public interface derivedclass accessible downcast safety issues type conversions performed great care downcastingis safe object referenced base class pointer derived class type applies references base classes safe downcasting introduces concept dynamic casting tech nique polymorphic classes introduced chapter exercise chapter type conversion class hierarchies productprepackedfoodfreshfood exerciseclass hierarchy products supermarket exercise539exercise class hierarchy representing supermarket chain checkout comprises base class productand derived classes prepackedfoodandfreshfood job test cast techniques class exercise  chapter  define global function islowercode determines oftwo products lower barcode returns reference prod uct lower barcode define array pointers base class product dynami cally create object types product prepackedfood freshfood objects referenced array pointers additionally define pointer derived class freshfood initialize pointer address dynamically allocated object class method printer objects version printer executed perform downcasting execute correct version printer inevery case display pointer values downcasting pointer derived class freshfoodto base class ver sion printer perform upcast test function islowercode multiple calls function arguments output product lower barcode case solution chapter type conversion class hierarchies solution product defines classes product prepackedfood freshfood unchanged previous chapter solutions produc_t cpp tests casts classes product prepackedfood freshfood include product const product islowercode const product const product int main product pv  freshfood pv  product l flour pv  prepackedfood    salt pv  freshfood      grapes freshfood      peaches cout fresh product printer cout nthe generic data products int   pv printer cin cout nand downcast endl static_cast prepackedfood pv  printer static_cast freshfood pv  printer cin cout nand upcast endl static_cast product printer solution541cout nnow compare barcodes endl cout nis barcode flour salt smaller islowercode pv  pv  printer cout nis barcode salt grapes smaller islowercode pv  pv  printer return  const product islowercode const product const product getcode getcode return elsereturn intentionally left blank polymorphism chapter describes develop manage polymorphic classes addition defining virtual functions dynamic downcasting polymorphic class hierarchies introduced chapter  chapter polymorphism classes virtual methods base class pointer objects calling virtual methods base class virtual method display derived base redefinitionsof method display virtual method called version method isexecuted object referenced base derived1 derived2 base baseptr base class pointer derived1 angular objects calling derived1 display calling derived2 display derived2 round baseptr angular baseptr display baseptr round baseptr display concept polymorphism concept polymorphism545issuesif special features derived class objects insignificant simply concernyourself base members case dynamic allocated objects inserted data structure deleted structure sense pointers references base class case matterwhat type concrete object dealing access common base members objects activate special features derived class whenthe object accessed pointer reference base class andthe concrete object type program executed base class pointer carptr statementexample carptr display output allthe data members object referenced traditional approach traditional programming languages solved issue adding type field thebase class derived classes type field stored type current class function manages objects base class pointer query concrete type switch statement method solution disadvantage adding derived classes stage meantadding caselabel recompiling object oriented approach approach adopted object oriented languages polymorphism greek multi form virtual methods implement polymorphic classes calling vir tual method compiler execute version method suitablefor objectin question object accessed pointer reference base class chapter polymorphism virtual cpp tests virtual method display classes car passcar include car car class virtual method display class car virtual void display const int main car pcar  pointers base class int  pcar  car l mercedes pcar  passcar miata true  mazda pcar  truck     ford true cout nto output object type car passcar truck  car  passcar  truck nyour input break  cin   break pcar display return  virtual methods calling virtual method display virtual methods547declaring virtual methods thevirtualkeyword declare virtual method base class virtual void display const definition virtual method definition mem ber function virtual method redefined derived class derived classthen inherits virtual method base class redefinitionhowever common practice derived class define version vir tual method modified suit special features derived class creating proprietary version virtual method redefining method theredefinition derived class have1 signature  return type virtual method base class version virtual method automatically virtual youcan omit virtualkeyword declaration redefine virtual function aware return type pointer reference base class version virtual method return pointer reference derived class note compilers support option constructors virtual declarationa base class method virtual declared virtual derived class signature return type virtual base class method define amethod derived class simply creates method method virtual virtual method base class masked method thederived class virtual version method derived class object chapter polymorphism v_destr cpp base class virtual destructor include iostream include cstring strcpy namespace std class base public base cout constructor class base virtual base cout destructor class base class data private char public data const char cout constructor class data char strlen  strcpy data cout destructor class data object endl delete class derived public base private data data public derived const char data cout constructor class derived derived implicit virtual cout destructor class derived int main base bptr derived demo cout ncall virtual destructor delete bptr return  destroying dynamically allocated objects sample program destroying dynamically allocated objects549dynamically created objects class hierarchy handled base classpointer object reaches lifetime memory occupied object released deletestatement car carptr carptr passcar  false  geo delete carptr destructor calls memory released destructor object automatically called multipleconstructors called create object destructors called reverse order objects derived classes destructor derived class called destructor base class executed base class pointer manage object virtual methods ofthe derived class called virtual methods execute base class version previous base class destructor carwas executed thepasscardestructor called destructor called data memberpasscartype additionally defined derived class data memberpasscartypeis string occupies dynamically allocated memory memory released multiple objects created dynamically derived class dangerous situationoccurs unreferenced memory blocks clutter main memory reallocate impact program response lead external memory swapped virtual destructors issue solved simply declaring virtual destructors opposite showshow define virtual destructor carclass virtualmethod version destructor executed destructors direct indirect base class follow class base class classes virtual destructordefined base class destructor dummy destructor destructor function body chapter polymorphism vmt pointer object type caraddress car display address car car vmt carnrproducer12345audivmt pointer address ofobject type passcarvmt pass carnrproducer54321geopasscartypepasscar display address ofpasscar passcar sunrooftruevmt pointer object type passcarnrproducer98765vwpasscartypegtisunrooffalsevirtual method table vmt classes carandpasscar virtual method table551static binding virtual method called address function time ofcompilation address inserted directly machine code referred staticorearly binding virtual method called object version thismethod time compilation case early binding dynamic bindinghowever virtual method called pointer reference function beexecuted program unknown time compilation statementexample carptr display execute versions display method depending objectcurrently referenced pointer compiler forced create machine code form anassociation function program referred lateordynamic binding vmtdynamic binding supported internally virtual method tables vmt short avmt created class virtual method array addresses virtual methods current class object polymorphic class vmt pointer hidden pointerto vmt class dynamic binding virtual function executed steps  pointer vmt referenced object read  address virtual method read vmt comparison static binding dynamic binding disadvantage thatvmts occupy memory program response impacted indirect addressing virtual methods small price pay benefits dynamic binding toenhance compiled source code access source code particu larly commercial class libraries user derive classes virtual function versions chapter polymorphism cast_t cpp dynamic casts class hierarchies include car bool inspect passcar inspection ofinspect truck car types bool separate car separates cars inspection int main car carptr passcar i true  bmw truck truckptr truck     volvo test casts separate carptr separate truckptr return  bool separate car carptr passcar passcarptr dynamic_cast passcar carptr passcarptr null return inspect passcarptr truck truckptr dynamic_cast truck carptr truckptr null return inspect truckptr return false bool inspect passcar passcarptr cout inspect passenger car endl cout nhere passcarptr display return true bool inspect truck truckptr cout inspect truck endl cout nhere truckptr display return true compiler option time type rtti activated underproject settings gnu compiler activates options automatically note dynamic casts dynamic casts dynamic casts553safety issues downcasting downcasts class hierarchies unsafe cast static cast operator ifthe referenced object correspond type derived class fatal runtime errors occur carptris pointer base class car pointing apasscartype statementexample truck truckptr static_cast truck carptr compiler error statement truckptr setaxles  program crash thedynamic_cast operator cast operator dynamic_cast perform safe downcasting poly morphic classes runtime operator checks required conversion valid syntax dynamic_cast type expression expression expressionis converted target type type target typemust pointer reference polymorphic class voidpointer pointertype expressionmust pointer type target type reference expressionmust identify object memory examplesgiven pointer carptrto base class car statementexample truck truckptr dynamic_cast truck carptr performs downcast derived truckclass provided pointer carptrreallyidentifies trucktype object dynamic_cast truck operatorwill return null pointer cabriois passcartype object statementsexample car r_car cabrio passcar r_passcar dynamic_cast passcar r_car perform dynamic cast reference passcar type case ifthe reference r_cardoes identify passcartype object exception thebad_casttype thrown dynamic cast upcasting classes involved tobe polymorphic case type checking performed runtime erroneous upcast recognized reported compiler exercises chapter polymorphism car rental management add passenger cart add truck display carsq quityour choice bool insert const string bool long const string prod add passenger car bool insert int double long const string prod add truck exercisesmenu optionsdifferent versions method insert exercises555exercise  modify vehicle management program automobile rental company manage fleet automobiles define class called citycarthatcontains array pointers  objects carclass store pointers objects derived class types passcarandtruck objects created dynamically runtime define class citycarwith array pointers carclass anintvariable current number elements array constructor set current number array elements  destructor release memory allocated dynamically remaining objects virtual destructor definition base class carto correct releasing memory trucks passenger vehicles implement versions insert method prototype opposite version allocate memory object type passcarortruckclass thearguments passed initialization method return falseif impossible enter automobile array andtruein cases thedisplay method outputs data vehicles screen perform task calls existing display method object create function called menu store function source file function display menu opposite read return user choice additionally write functions getpasscar andgettruck read data car truck keyboard write data arguments create object citycartype mainfunction insert car truck vehicles company fleet user chooses add car add truck program read data supplied version insert chapter polymorphism type article  articles1 fresh food  prepacked article customer recorddialog receptionist function record loop main exercises557exercise  automatic checkout supermarket chain completed declare virtual methods scanner andprinter base classproduct define virtual destructor write record function registers lists products pur chased store program loop function creates array  pointers base class product checkout assistant prompted state prepacked fresh food item scanned memory product scanned allocated dynamically referenced pointer array scanning items sequential list displayed prices items total output create application program simulate supermarket checkout checkout assistant prompted loop state define customer record function called program terminates solutions chapter polymorphism solutionsexercise  car defines base class car derived classes passcar truck ifndef _car_h_ define _car_h_ include iostream include string namespace std class car private long string producer public car long l const string prod virtual car virtual destructor access methods long getnr void const return void setnr long const string getprod const return producer void setprod const string producer virtual void display const display car derived classes passcar truck unchanged chapter  endif car cpp implements methods car passcar truck unchanged chapter  solutions559 city defines citycar class ifndef _city_h_ define _city_h_ include car class citycar private car vp  int cnt public citycar cnt  citycar bool insert const string bool long const string prod bool insert int double long const string prod void display const endif _city_h city cpp methods class citycar include city citycar citycar int  cnt delete vp insert passenger car bool citycar insert const string bool long const string prod cnt  vp cnt passcar prod return true elsereturn false chapter polymorphism insert truck bool citycar insert int double long const string prod cnt  vp cnt truck prod return true elsereturn false void citycar display const cin sync cin clear previous inputfor int  cnt vp display    cin city_t cpp test citycar class include city char menu void void getpasscar string bool long string void gettruck int double long string int main citycar carexpress string prod bool int long double cars carexpress insert     ford carexpress insert class true  mercedes char choice choice menu switch choice case case cout bye bye endl break solutions561case case getpasscar prod carexpress insert prod break case case gettruck prod carexpress insert prod break case case carexpress display cin break default cout beepbreak choice choice return  char menu input command cout car rental management char cout add passenger car add truck display cars quit program nyour choice cin return void getpasscar string bool long string prod char cin sync cin clear cout nenter data passenger car endl cout car type getline cin cout sun roof cin true elsesr false cout car number cin cin sync cout producer getline cin prod cin sync cin clear chapter polymorphism void gettruck int double long string prod cout ninput data truck endl cout number axles cin cout weight tons cin cout car number cin cin sync cout producer getline cin prod cin sync exercise  product defining classes product prepackedfood freshfood class product private long bar string public product long l const string bar access methods virtualvoid scanner virtual virtualvoid printer const classes prepackedfood freshfood unchanged refer solutions chapter  solutions563 counter cpp simulates checkout desk include product void record int main cout nhere checkout desk endl char true cin sync cout nanother customer cin record elsebreak return  record records articles bought customer total price void record product  int cnt  double sum     cin sync cout nwhat article endl cout  article  fresh food  prepacked article cin   break chapter polymorphism switch case  prepackedfood scanner sum prepackedfood getprice break case  freshfood scanner sum freshfood getprice freshfood getwght break cnt  cnt outputv printer cout fixed setprecision  ntotal price sum endl abstract classesthis chapter describes abstract classes created defining pure virtual methods abstract classes polymorphic interface derived classes illustrate implementing inhomogeneous list linked list elements class types chapter  chapter abstract classes coworker defining abstract class coworker ifndef _coworker_h define _coworker_h include string include iostream namespace std class coworker private string informationpublic coworker const string virtual coworker destructorconst string getname const return void setname const string virtual void display const virtual double income const  virtual coworker operator const coworker endifthe virtual operator function assignment virtualassignments note pure virtual methods base class coworker pure virtual methods567motivation virtual methods declared base class ensure anyderived classes common class interface happen rarely perform tasks base class destructor base class perform explicit cleaning operations case define virtual dummy method address isentered vmt base class creates code function called sense define function steps opportunity declaring pure virtual methods declaration pure virtual method declared method identified adding expres sion  virtual void demo  pure virtualthis informs compiler definition demo method class null pointer entered virtual method table pure virtual method base class coworkerthe opposite definition coworkerclass designed rep resent human resources data company class base class employees blue collar white collar freelancers things simple coworkerclass data member address employee division employee works thecoworkerclass comprise data members represent employee ssalary sense store data derived classes hourly wage number hours worked blue collar worker monthly salary white collar worker defined income method defined forthe base class declared pure virtual method chapter abstract classes coworker extending headerfile class laborer public coworker private double wages pay hourint public laborer const string double   int  coworker wages double getwages const return wages void setwages double wages int gethr const return void sethr int void display const double income const laborer operator const coworker laborer operator const laborer operator functions assignments discussed virtual assignments note abstract concrete classes derived class laborer abstract concrete classes569concrete abstract class comprises pure virtual methods create objects class type coworker worker black michael compiler issue error message coworkerclass thepure virtual method income avoids calling method workerthat stillneeds defined class youto create objects referred abstract class contrast class create objects referred concrete class deriving abstract classes class derived abstract class inherits methods base classcontains pure virtual methods pure virtual methods implemented derived class create object derivedclass type implement income method laborerclassshown opposite hourly wage number hours worked defined blue collar workers implement method double laborer income return wages class derived concrete class pure virtual methods toadditional definitions derived class abstract class derived concrete class abstract class pure virtual functions theclass protectedconstructor objects class type created constructor called methods derived classes constructor type acts base initializer object derived class type cre ated class pure virtual methods abstract class note class derived class pure virtual methods concrete class definitionfor pure virtual function note chapter abstract classes coworker extending headerfile class employee public coworker private double salary pay monthpublic employee const string double   coworker salary double getsalary const return salary void setsalary double salary void display const double income const return salary employee operator const coworker employee operator const employee coworker_t cpp coworker classes include coworker int main coworker felptr  felptr  laborer young neil   felptr  employee smith eve   int   felptr display cout nthe income felptr getname felptr income endl delete felptr  delete felptr  return  pointers references abstract classes derived class employeesample program pointers references abstract classes571although define objects abstract classes declare pointers erences abstract classes coworker felptr coref pointer felptris base class pointer address objects belonging derivedconcrete classes reference corefcan address objects type references abstract base classes references base classes parameters functions copy construc tor coworkerclass coworker const coworker copy constructor expects object belonging derived class base class abstract assignment coworkerclass reference parameter returns areference abstract class pointers abstract base classes pointers base classes generally address dynamically allocated objects thebase class abstract allocate memory objects belonging derived crete classes coworker felptr felptr laborer young neil   cout felptr income income method virtual function derivedclasslaboreris executed polymorphic interface defining pure virtual methods determines interfaces general operations althoughthe interfaces implemented derived classes derived class definition virtual method version executed object referenced base class pointer reference abstract classes referred polymorphic interfacesto derived classes opposite definition employeeclass alsoderived abstract class coworker operator functions assignmentsare discussed implemented chapter abstract classes virtual assignment base classcoworker operator const coworker assignmentname return redefining virtual operator function operator returns reference derived class supported compilers case return type reference base class coworker note redefinition virtualemployee operator const coworker assignment coworker operator salary   return standard assignment virtualemployee operator const employee coworker operator salary salary return virtual assignment assignment class coworkerassignments class employee virtual assignment573virtual operator functions operator functions implemented methods virtual case canensure version operator function executed pointer reference base class address derived class object operator function assignment function decla ration virtual function called base class pointer base data object overwritten additional data members derived class remain unchanged virtual assignments assignment declared virtual coworkerbase class derived classeslaborerandemployeeboth versions followingexample void cpy coworker const coworker assignment employeeclass executed object class type thefirst argument passed object laborertype assignment thelaborerclass performed case cpy function assign objects class including classes derived stage modify function define version assignment derived class redefining standard assignment define version virtual method derived class implies usingthe signature original method standard assignment derived class signature notvirtual standard assignment laborerclasshas prototype laborer operator const laborer type const laborer const coworker type theparameter virtual operator function base class standard assignment masks virtual assignment base class rise issues virtual operator function assignment defined derived classto ensure standard assignment standard assignment redefined derived class chapter abstract classes cell defining classes cell baseel derivedel ifndef _cell_ define _cell_ include string include iostream namespace std class cell private cell protected cell cell suc null suc public virtual cell access methods declared virtual void display const  class baseel public cell private string public baseel cell suc null const string cell suc access methods declared void display const class derivedel public baseel private string rem public derivedel cell suc null const string const string baseel suc rem access methods declared void display const endifapplication inhomogeneous lists abstract base class celland derived classes application inhomogeneous lists5751st list elementinfoinfo pointer nd list element3rd list element info pointerpointer terminology implementing application inhomogeneous list inho mogeneous list linear list elements types data store consists objects class hierarchy list element object belonging base class object derived class implicit type conversions class hierarchies base class point ers manage list elements manage elements linked list graphic illustrates scenario representing list elements separate management list elements contained list defined abstract class called cellas base class list elements theclass pointer type cell data member link list elements sincecelltype objects created constructor cellclass aprotecteddeclaration thecellclass data output class derived cellcontains data displayed reason cellcontains declaration pure virtual method display mod ified multiple derivations classes baseelandderivedel derived cell represent listelements storing things simple baseelclass containsonly derivedelclass additionally comment publicdeclaration constructor access method declarations addition suitable version display method defined classes concreteclasses chapter abstract classes infoinfo pointernewelement infopointerpointer info list defining class inhomlist ifndef _list_h define _list_h include cell class inhomlist private cell protected cell getprev const string void insertafter const string cell prev void insertafter const string const string cell prev public constructor destructor void insert const string void insert const string const string void displayall const endifvoid inhomlist insertafter const string cell prev prev null insert baseel middle cell baseel prev getnext prev setnext implementing inhomogeneous list defining class inhomlistinserting list element middle definition insertafter version implementing inhomogeneous list577theinhomlistclassthe inhomogeneous list sorted insertion list elements longer suffi cient append elements list list insertion point pointer element list task pointer list element access list element definition inhomlistclass opposite pointer cellhasbeen declared data member constructor simply sets base class pointer null creating list list sorted inserting element list inser tion point position element precede element located locate lexicographical predeces sor getprev method opposite performs search returns eitherthe position predecessor null predecessor case list element inserted element list inserting list element finding insertion position insertafter method allo cates memory list element inserts element list cases looked  element inserted start list originally element element element firstpointer updating  element inserted position list firstpointeris modify pointers pointer pre ceding list element pointed element pointer element pointed successor preceding element situation applies cases successor null pointer element appended list list objects baseelandderivedeltypes theinsertafter method overloaded versions differ indifferent calls newoperator theinsert method overloaded reason versions callthegetprev method version insertafter method exercise chapter abstract classes class inhomlist private cell protected cell getprev const string cell getpos const string void insertafter const string cell prev void insertafter const string const string cell prev void erasepos cell pos public inhomlist null inhomlist const inhomlist src inhomlist inhomlist operator const inhomlist src void insert const string void insert const string const string void erase const string void displayall const exercisethe complete class inhomlist exercise579exercise modify complete definition class inhomlist represents inhomogeneous list write destructor inhomlistclass destructor releases memory occupied remaining list elements implement getprev method versions insert andinsertafter methods algorithm needed inserting list ele ments implementing inhomogeneous list implement displayall method walks list sequentially outputting element test insertion output list elements check comments objects output define getpos method locates position element deleted element list address returned wise null pointer returned write erasepos method deletes list element position pay attention element deleted element list destructor cellwasdeclared virtual version deletepos method neces sary define erase method deletes list element list test deletion list elements continually display remaining elements list implement copy constructor assignment insert construct list calling applicable version method typeid operator ascertain type list element inserted operator declared header file typeinfo typeid ptr typeid derivedel expression true ptrreferences derivedeltype object test copy constructor assignment solution chapter abstract classes solution cell defines classes cell baseel derivedel ifndef _cell_ define _cell_ include string include iostream namespace std class cell private cell protected cell cell suc null suc public virtual cell cell getnext const return void setnext cell suc suc virtual void display const  class baseel public cell private string public baseel cell suc null const string cell suc access methods void setname const string const string getname const return void display const cout nname endl solution581class derivedel public baseel private string rem public derivedel cell suc null const string const string baseel suc rem access methods void setrem const string rem const string getrem const return rem void display const baseel display cout remark rem endl endif list defines class inhomlist ifndef _list_h_ define _list_h_ include cell class inhomlist private cell protected cell getprev const string cell getpos const string void insertafter const string cell prev void insertafter const string const string cell prev void erasepos cell pos public inhomlist null inhomlist const inhomlist src inhomlist inhomlist operator const inhomlist src void insert const string void insert const string const string void erase const string void displayall const endif chapter abstract classes list cpp methods class inhomlist include list include typeinfo copy constructor inhomlist inhomlist const inhomlist src append elements src list null cell pel src pel null pel pel getnext typeid pel typeid derivedel insert dynamic_cast derivedel pel getname dynamic_cast derivedel pel getrem elseinsert dynamic_cast baseel pel getname assignment inhomlist inhomlist operator const inhomlist src free storage elements cell pel null pel null pel getnext delete pel pel null list copy elements src list pel src pel null pel pel getnext typeid pel typeid derivedel insert dynamic_cast derivedel pel getname dynamic_cast derivedel pel getrem elseinsert dynamic_cast baseel pel getname return solution583 destructor inhomlist inhomlist cell pel null pel null pel getnext delete pel pel cell inhomlist getprev const string cell pel prev null pel null dynamic_cast baseel pel getname prev pel pel pel getnext elsereturn prev return prev cell inhomlist getpos const string cell pel pel null dynamic_cast baseel pel getname pel pel getnext pel null dynamic_cast baseel pel getname return pel elsereturn null void inhomlist insertafter const string cell prev prev null insert baseel middle cell baseel prev getnext prev setnext chapter abstract classes void inhomlist insertafter const string const string cell prev prev null insert derivedel middle cell derivedel prev getnext prev setnext void inhomlist insert const string cell pel getprev insertafter pel void inhomlist insert const string const string cell pel getprev insertafter pel void inhomlist erasepos cell pos cell temp pos null pos delete element temp getnext delete temp delete middle predecessortemp getprev dynamic_cast baseel pos getname temp null bend pointer temp setnext pos getnext delete pos void inhomlist erase const string erasepos getpos solution585void inhomlist displayall const cell pel pel null pel display pel pel getnext list_t cpp tests sorted inhomogeneous list include list int main inhomlist liste1 cout nto test inserting endl liste1 insert bully max liste1 insert cheers rita merry liste1 insert quick john topfit liste1 insert banderas antonio liste1 displayall cin cout nto test deleting endl liste1 erase banderas antonio liste1 erase quick john liste1 erase cheers rita liste1 displayall cin cout ngenerate copy insert element endl inhomlist liste2 liste1 copy constructorliste3 list liste2 insert chipper peter good temper liste3 liste2 assignment cout nafter assignment endl liste3 displayall return  intentionally left blank multiple inheritancethis chapter describes classes created multiple inheritance explains introducing creating destroying objects multiply derived classes virtual base classes depicted avoid ambiguity multiple inheritance chapter  chapter multiple inheritance class motorhome public car public private additional private members hereprotected additional protected members herepublic additional public members carhomemotorhomemultiply derived classes multiply derived class motorhomedefinition scheme class motorhome multiply derived classes589a class base classes case class isderived multiple base classes process multiple inheritance multiply derived class motorhomethis class caris represent vehicles class homecontains characteristicvalues apartment floor space number type rooms typical oper ations building selling renting classes derive motorhomeclass opposite pageshows inheritance definition schemes class object themotorhomeclass members carand members morespecifically object base objects type carandhome accessibility base classessince motorhomeclass publicbase classes assumes publicinter faces classes motorhometype object access additionalpublicmembers publicmembers base classes carandhome defining multiply derived class accessibility private protected orpublic defined separately base class motorhomeclass couldhave publicbase class carand protectedbase class class motorhome public car protected keyword base class default private class motorhome public car statement defines publicbase class carand privatebase class publicmembers homeprivate members derived class multiple inheritance publicbase class establishes relationship issimilar simple inheritance motorhomeclass inherits publicbase classes motor homeisa special kind motor vehicle special kind chapter multiple inheritance carcarpasscarvansuvclass suv public passcar public van additional methods data members multiple indirect base classes multiple indirect base class cardefinition scheme class suv multiple indirect base classes591multiple identical base classeswhen multiply derived classes defined direct base class inherited morethan statementexample class public public error compiler issue error message class derived classes common base class class referred multiple indirect base class inheritance graph opposite multiply derived class suv derived classes passcarandvan base classes derived carclass cara multiple indirect base class thesuvclass ambiguityan object suvclass members cartwice access membersof carclass ambiguity suv mysuv cout mysuv getprod errorboth base classes passcarandvancontain method called getprod whichthey inherited carclass case compiler decide whichmethod meant ambiguity context multiple inheritance severalbaseclasses members identical names homeclass carclasscontain method called getnr getnr method correctly identifiedin statement motorhome motorhome motorhome getnr resolve ambiguity kind scope resolution operator determinewhich base class meant cout motorhome getnr cout mysuv passcar getprod thegetnr method homeclass called getprod method inherited passcarfrom carclass chapter multiple inheritance carpasscarvansuvclass passcar public virtual car additional members class passcar class van public virtual car additional members class van virtual base classes virtual base class cardefinition scheme virtual base classes593issuesyou class created multiple inheritance multipleinstances indirect base class station wagon versions manufacturer chassis number define multiply derived classes instance indirect base class virtual base classes object multiply derived class containsonly instance members virtual base class inheritance graph opposite suvclass illustrate situation declaration direct base class declared virtual derived class defined thevirtualkeyword directly precedes base class definition scheme opposite carclass virtual base classofpasscarandvan fact base class caris virtual signifi cance point virtual base class takes cases multiple inheritance defi nitionexample class suv public passcar public van ensures suvclass instance virtual base class car anobjectmyof suvclass sufficient memory carclass object statementexample cout producer mysuv getprod ambiguity items respect virtual base classes virtual base class stays virtual derivations built class derived passcaralso carclass virtual base class change declaration indirect base class virtual decide classes declared virtual design theclass hierarchy modifications require modifications source code derived classes chapter multiple inheritance base1base2base3 multiderivedclass multiderived public base1 public base2 public base3 additional data members methods constructor calls building inheritance graphclass definitioninheritance graph constructor calls595initialization object created simply derived class objects base classesare created levels class hierarchy object class nearer inheritance graph created order constructor calls inheritance graph activation order constructors simple inheritance generalized multiple inheritance inheritance graphagain inheritance graph called object lattice job derived class defined rules apply cases multiple inheritance base classes entered inheritance graph left order stated class defined graph opposite illustrates point class hierarchy virtual base classes applies tothe activation order constructors base class constructors executed left level finally constructor belonging current class inheritance graph executed opposite objects thebase classes base1 base2 base3are created order constructorofmultiderivedis executed base initializers constructor class inheritance graph base initial izers pass values direct indirect base classes base initializer defini tion missing constructor definition default constructor base class automatically executed initial values passed base class constructors chapter multiple inheritance class suv public passcar public van private public suv car initialize additional data members void display const passcar display van display output additional data members initializing virtual base classes classsuv initializing virtual base classes597constructor calls virtual base classes object created multiply derived class constructors baseclasses called virtual base class class hierarchy virtual base class constructor executed beforea constructor virtual baseclass called constructors virtual base classes called constructors virtualbase classes order defined inheritance graph note constructor virtual base class called arguments stated base initializer lastclass derived class inheritance graph note constructor virtual base class nearest inheritance graph isexecuted level class hierarchy virtual base class derived virtual base class multiply derived class suv sport utility vehicle structor virtual base class caris called direct base classespasscarandvan constructor suvclass base initializers wondering arguments constructor virtual baseclass base initializer directly derived class derivation responsible applies opposite suvcontaining constructor onebase initializer arguments passed constructor virtual base class car purpose initialization matter class derived directlyfromcarcontains base initializer base initializers virtual indirect baseclasses defined constructor direct base class base classespasscarandvanalso contained base initializers virtual base class car thesewould constructor derived class base initializer thedefault constructor executed virtual base class default constructor exist virtual base class base initializers happen exist base classes exercises chapter multiple inheritance data member type catcategory methods motorhome category long const string int double void setcategory category category getcategory const void display const carhomemotorhomeexercisesthe multiply derived class motorhomeadditional members class motorhome exercises599exercise  multiply derived class motorhomeneeds fully implemented tested define enumeration type categorythat represents categories luxury class middle class economy develop class called homewith data members store number rooms size square meters supply default values constructor definition create default constructor addition access methods define method display outputs data members apartment define class derived carandhomeclasses called motorhome represent motorhomes inheritance publicbaseclasses motorhomeclass data member store categorytype addition defining construc tor default values define access methods display method output place definitions homeandmotorhomeclasses separateheader file includes existing header file car write mainfunction fully initializes motorhometype objectand outputs object create instance motorhometype initial val ues display object screen set methods motorhomeclass base classes set values objects output object chapter multiple inheritance class hierarchy multiply derived class suvcardata members car numberproducersuvdata members number seatspasscardata members car typesun roof vandata members capacity lbs exercises601exercise  fully define suvclass testing virtual base classes change definition passcarclass car hheader file tomake cara virtual base class passcarclass define vanclass carclass virtual base class class additional data member represent payload van kilograms maximum  applies vans constructor default values initialize data members defaults providing default constructor class maxi mum  applies payload addition access methoddisplay define methods screen output create class suv derived passcarandvan repre station wagon store number seats station wagon data member constructor suvclass base initializer set allthe values station wagon default values data member additionally define access methods display define output mainfunction test suvclass function create sta tion wagons default values display screen solutions chapter multiple inheritance solutionsexercise  car definition base class car derived classes passcar truck car cpp implementing methods car passcar truck files left unchanged chapters   motorhome definition class multiply derived class motorhome ifndef _motorhome_h_ define _motorhome_h_ include car include iomanip include iostream namespace std enum category luxury firstclass secondclass economy class private int room double ft2 public int  double   room ft2 void setroom int room int getroom const return room void setsquarefeet double ft2 double getsquarefeet const return ft2 void display const cout number rooms room nsquare feet fixed setprecision  ft2 endl solutions603class motorhome public car public private category cat public motorhome long l const string prod int  double   category economy car prod cat void setcategory category cat category getcategory const return cat void display const cout nmotorhome car display display cout category switch cat case luxury cout luxury break case firstclass cout class break case secondclass cout class break case economy cout economy break cout endl endif motorhome_t cpp testing multiply derived class motorhome include motorhome int main motorhome l texaco    luxury display motorhome holiday holiday display default values cin chapter multiple inheritance holiday setnr  holiday setprod vw holiday setroom  holiday setsquarefeet   holiday setcategory secondclass holiday display return  exercise  car definition base class car derived classes passcar truck car cpp implementing methods car passcar truck files carried chapter   class car virtual base class class passcar public virtual car class truck public virtual car suv defines class van multiply derived class suv ifndef _suv_h define _suv_h include car class van public virtual car private double capacity solutions605public van long l const string prod double   car prod   capacity void setcapacity double  capacity  elsecapacity double getcapacity const return capacity void display const cout capacity capacity endl class suv public passcar public van private int cnt number seatspublic suv const string type bool sb false long l const string prod double   int  passcar sb car prod van prod cnt void display const passcar display van display cout number seats cnt endl endif chapter multiple inheritance suv_t cpp tests class suv include suv int main suv mobil bravada true  oldsmobile   mobil display suv trucky trucky display trucky setnr  trucky setprod renault trucky setcapacity  trucky display return  exception handlingthis chapter describes program error handling techniques resolve error conditions addition throwing catching exceptions examine exception specifications declared exception classes defined additionally standard exception classes chapter  chapter exception handling traditional error handling error checking leaving function callingfunctionsecond callingfunctionthird callingfunctioncalled function func  thing elseexit  func  errors handled func   error   error int func void dilemma return  catastrophe return  traditional error handling609error conditions errors occur program runtime interrupt normal flow pro gram common errors aredivision  values large small typeno memory dynamic allocationerrors file access file foundattempt access invalid address main memoryinvalid user inputanomalies lead incorrect computer crash ofthese cases fatal effects application programmer tasks predict handle errors youcan judge program quality error handling techniques counteract potential error easy achieve traditional error handling traditional structured programming languages normal syntax handle errors errors function calls special return valuesglobal error variables flags set errors occur checked againlater function return errors return examinedwhenever function called error occurred func  return positive treat errorserror variables flags checked everycorresponding action continually check errors program executing happen forget check errors consequences fatal chapter exception handling calc_err cpp defining function calc throws exceptions class error infos error double calc int int  throw string denominator negative  error errorobj throw errorobj return double exception handlingusing throwstatement exception handling611exception handling conceptc introduces approach error handling exception handlingis based keepingthe normal functionality program separate error handling basic idea errors occurring program reported program calling environment calling environment performs centralerror handling application program longer continually check errors inthe case error control automatically transferred calling environment reporting error specific error evaluated error handling routines calling environment thethrowstatement exception occurs recorded calling environment throwstatement exception thrown syntax throw fault expression faultis exception objectthat thrownto calling environment belong type void throw exception object string thrown calling environ ment exception classesnormally define exception classes categorize exceptions caseyou throwstatement throw object belonging specific exception class exception class data members methods type calling environment identify error generally exception class members provide specific error sample program opposite calc function throws exceptionsin cases numerator negative  case theexception thrown string case exception errorexceptionclass object creating local exception object errorobj temporary objectcan created throw error shorter chapter exception handling exceptions thrown block caught exception handlers defined catch type1 exc1 type1 exceptions handled catch type2 exc2 type2 exceptions handled catch exceptions handled brackets syntax description enclosed optional note exception handlerssyntax tryandcatchblocks exception handlers613how exception handling works program performs central error handling calling environment isreferred exception handler exception handler catches exception objectthrown performs error handling exception object type determines handler catch executed things implementing exception han dling program throw exceptionsthe exception handlers process exception types language elements task keywords tryandcatch key word precedes code block referred tryandcatchblocks syntactically speaking tryandcatchblock statement tryandcatchblocksatry blockcontains program code errors occur exceptions bethrown tryblock consist group functions produce simi lar errors eachcatch blockdefines exception handler exception declaration isenclosed parentheses defines type exceptions handler catch thecatchblocks follow tryblock minimum catchblock isrequired exception handlers defined catchblocks catch exceptions thrownwithin tryblock handler defined exception type theprogram simply enter undefined state orderly terminated standard function terminate common practice define specific handlers types errors onegeneric handler errors functionality provided special syntax thecatchstatement exception declaration consisting dots syntax catch general handler exceptions application program decides reaction applicable error condi tions tryandcatchblocks formulated application chapter exception handling calc_err cpp tests function calc throws exceptions include iostream include string namespace std double calc int int int main int double res bool flag false block cout enter positive integers cin res calc cout res endl flag true leave loop catch string st catch block cerr endl catch error nd catch block cerr division  endl catch rd catch block cerr unexpected exception exit  flag continued return  errorclass data members catchblock declares typeof exception parameters avoids compiler warning parameter note throwing catching exceptions demonstration program throwing catching exceptions615backing error condition throwstatement executed exception object thrown tem porary object type content throwexpression created throw cyclone creates string exception object copies string cyclone throwexpression class type copy constructor executed exception object thrown program control leaves tryblock stack place entering tryblock unwound involves destroying local static objects unwinding stackallow normal program flow orderly manner searching handlers leaving tryblock program control transferred matching handlerin catchblocks follow search operation performed sequentiallybeginning catchblock exception declaration handlerdetermines handler executed handler called type exception declaration isidentical exception type thrown ora base class exception type ora base class pointer exception pointer derived class general exception handler catch defined suitable handler executed exception thrown caught general handler handler defined general handler called continuing program executing handler program continues statement thecatchblocks handler throws exception terminates program completing exception handling exception object thrown destroyed catchblocks handle exceptions calc function canthrow cases message displayed program carries prompting input computing values unexpected exception occurs message dis played case program terminates chapter exception handling type1 exceptions thrown type1 type2 exceptions thrown catch type2 type2 exceptions pre handled herethrow thrown type1 exceptions thrown catch type1 e1 type1 exceptions handled catch remaining exceptions handled type2 exceptions scenario assumes error classes type1andtype2are derived ifclasstype2is derived class type1 type2exceptions thrown caught handlerfor base class type1 note nesting exception handlingnestedtryandcatchblocks nesting exception handling617nestedtryandcatchblocksa program multiple tryblocks exception han dlers error handling parts program tryblock additional tryblocks thehandlers nested tryblock special purpose error handling leaving handlers inthe surrounding tryblock deal remaining errors handlers nested tryblockcan pre handle specific errors pass control tryblock wrapper forfinal handling throwing exceptions cases exception thrown nested tryblock passedto tryblock wrapper achieved throwstatement notexpect exception object throw catch blockthis throws pre handled exception processed handler surrounding tryblock statement valid nested catchblockfor reason exception specifications exceptions function throw features function applicationprogrammer knowledge function prototype exceptions function throw ensure capable programming correct func tion calls action case errors exceptions function throw stated called exception specifica tion list declare function int func int throw badindex outofrange list badindex outofrangestates exceptions function func canthrow list list throw statement noexceptions thrown throwstatement missing specific infor mation exceptions exception thrown chapter exception handling calc_new cpp version function calc throws exceptions type matherror include string include iostream namespace std class matherror private string message public matherror const string message const string getmessage const return message double calc int int throw matherror int main int bool flag false block cout enter positive integers cin cout calc flag true leave loop catch matherror err catch block cerr err getmessage endl flag continued return  double calc int int throw matherror  throw matherror denominator negative  throw matherror division  return double defining error classes exception handling numeric operations defining error classes619exception class memberswhen exception thrown exception object type determines exceptionhandler executed reason exception class members exception class data members methods anyother class sense locally defined static objects destroyed exception thrown stack unwound exception handler longer access existing objects data members error classes rescue data threatened errorcondition store data exception handling exception object exception class matherrorthe exception class matherroris defined opposite calc function throws anexception number input user negative  exception thrown throw matherror division  error message stored exception object exception handler thegetmessage method evaluate message exception hierarchies exception classes derived existing exception classes base class willnormally represent general error type specific errors represented derived classes exception class matherrorcould defined represent general errors inmathematical computations sense define derived exception classes special cases division  arithmetic overflow classesdivisionbyzeroandoverflowerror aware rules exception handlers context derived exception class special errors type handled exception handlerif base class handler catch exception objects thrown derived classes providing handling generic specific errors chapter exception handling invalid_argumentout_of_range length_errordomain_errorinvalid argumentargument expected range length exceeds maximum capacity domain error reported implementationrange_errorunderflow_error overflow_errorrange error internal computationarithmetic underflow error arithmetic overflow error subscript operator class floatarr throws exceptions type standard class out_of_range include stdexcept include iostream namespace std double floatarr operator int throw out_of_range  anz throw out_of_range invalid return arrptr test program int main arrays type floatarr catch out_of_range err cerr err endl program continues standard exception classes exception classes derived logic_errorexception classes derived runtime_errorusing standard exception classes standard exception classes621hierarchy standard exception classes standard library exception classes stringand container libraries standard exception classes exception classes definitions header file stdexcept standard exception classes organized hierarchy common base classbeing exceptionclass addition default constructor copy constructor andan assignment class virtual publicmethod returns amessage error string representing logic errors runtime errors exception classes derived exceptionclass logic_errorused represent logic errors caused anomalies program slogic errors avoided runtime_errorused represent runtime errors overflows occur ring internal computations errors unpredictable opposite overview exception classes derived thelogic_errorandruntime_errorclasses method thestringclass throws out_of_rangetype exception invalid string positionis passed string displayed exceptional length excep tion invalid_argumenttype thrown exception overflow_errororunderflow_errortype thrown thevalue displayed large small type range_errorclass range errors occur internal computations constructor string parameter defined class derived fromexception initialize exceptions types error messages thewhat method returns error message string exercises chapter exception handling error reading invalid error writing invalid exercisesexercise  error messages exception handlerthe exception handler message exception handler message exercises623exercise  thefloatarrclass exception handling cases invalid stated accessing array member define exception class badindexfor purpose store class header file floatarr exception class data member store invalid constructor expects copy data member constaccess method getbadindex returns data member subscript operators throw badindextype excep tions add exception specification declaration subscript operators methods expect position argument insert andremove throw exceptions add exception specifications definitions change return types booltovoid change definitions methods operator functions badindextype exception thrown passed function valid range write mainfunction constant vector created initialized fixed values exception handling required scenar ios array elements displayed read invalid input catchhandler output opposite invalid create constant array add exception handling performed elements appended inserted tryblock include invalid element access attempt catchhan dler output opposite finally output array elements tryandcatchblocks chapter exception handling exercises exercise  error messages exception handlersmessages exception handlers exception object type divisionbyzero error initializing denominator  error division division error denominator  denominator  exercises625exercise  implement exception handling fractionclass represent fractions exercise  chapter  dividing  throws exception constructor fractionclass operatorfunctions define exception class diverror data members thefractionclass exception class type fraction diverroradd exception specification declarations constructor operator functions change definition constructor fractionclass denominator  divisionbyzerotype exception shouldbe thrown modify operator functions write mainfunction test exceptions arrange tryandcatchblocks sequentially catchblock tests constructor create fractions including numerator   denominator exception handler issue error message opposite catchblock tests divisions statement attempt divide  exception handler send error message opposite standard output catchblock reads numerators denominators fractions dialog denominator  denominator read  error message opposite output program terminates solutions chapter exception handling solutionsexercise  floatarr represents dynamic float arrays methods throw exceptions invalid ifndef _floatarr_ define _floatarr_ include iostream namespace std class badindex private int public badindex int int getbadindex const return class floatarr private float arrptr dynamic member int max maximum number reallocating memory int cnt current number elements void expand int newsize function enlarge array public floatarr int  constructors floatarr int float val floatarr const floatarr src floatarr destructor floatarr operator const floatarr assignmentint length const return cnt subscript operators float operator int throw badindex float operator int const throw badindex methods append float array floats void append float val void append const floatarr solutions627floatarr operator float val append val return floatarr operator const floatarr append return methods insert float array float values void insert float val int pos throw badindex void insert const floatarr int pos throw badindex void remove int pos throw badindex remove pos output arrayfriend ostream operator ostream const floatarr int width save field width float arrptr arrptr cnt width return endif _floatarr_ floatarr cpp implementing methods floatarr include floatarr constructors floatarr floatarr int max cnt  sets max cnt arrptr float max allocates memory floatarr floatarr int float val max cnt arrptr float max int  cnt arrptr val chapter exception handling floatarr floatarr const floatarr src max src max cnt src cnt arrptr float max int  cnt arrptr src arrptr destructor floatarr floatarr delete arrptr private functions enlarge array void floatarr expand int newsize newsize max return max newsize newsize cnt cnt newsize float temp float newsize int  cnt temp arrptr delete arrptr arrptr temp floatarr floatarr operator const floatarr src src assignment max src max cnt src cnt delete arrptr release memory arrptr float max reallocate int  cnt copy elements arrptr src arrptr return solutions629float floatarr operator int throw badindex  cnt throw badindex return arrptr float floatarr operator int const throw badindex  cnt throw badindex return arrptr append float array floats void floatarr append float val cnt  max expand cnt  arrptr cnt val void floatarr append const floatarr cnt cnt max expand cnt cnt int count cnt int  count arrptr cnt arrptr inserts float array floats void floatarr insert float val int pos throw badindex insert floatarr  val pos void floatarr insert const floatarr int pos throw badindex pos  pos cnt append throw badindex pos max cnt cnt expand cnt cnt int cnt  pos shift fromarrptr cnt arrptr position pos  cnt gap arrptr pos arrptr cnt cnt cnt chapter exception handling deletevoid floatarr remove int pos throw badindex pos  pos cnt int pos cnt  arrptr arrptr  cnt elsethrow badindex pos arr_h cpp tests exception handling float arrays include iostream include iomanip namespace std include floatarr int main const floatarr   f bool false cout constant array cout setw  endl int cout cin cout nthe read endl true catch badindex err cerr error reading ninvalid err getbadindex endl solutions631floatarr  array wtry insert  f  write insert  f  insert  f  error    error remove  error catch badindex err cerr nerror writing ninvalid err getbadindex endl cout nhere array cout setw  endl return  exercise  fraction numeric class represent fractions exception handling included ifndef _fraction_ define _fraction_ include iostream include cstdlib namespace std class fraction private long numerator denominator public class divisionbyzero data members fraction long  long  throw divisionbyzero fraction operator const return fraction numerator denominator chapter exception handling fraction operator const fraction numerator numerator denominator numerator denominator denominator denominator return fraction operator const fraction return fraction operator numerator denominator return fraction operator numerator denominator return friend fraction operator const fraction const fraction friend fraction operator const fraction const fraction friend fraction operator const fraction const fraction friend fraction operator const fraction const fraction throw fraction divisionbyzero friend ostream operator ostream const fraction friend istream operator istream fraction throw fraction divisionbyzero endif solutions633 fraction cpp defines methods friend functions include iostream include cstdlib namespace std include fraction constructor fraction fraction long long throw fraction divisionbyzero  throw divisionbyzero  numerator denominator fraction operator const fraction const fraction fraction temp temp denominator denominator denominator temp numerator numerator denominator numerator denominator return temp fraction operator const fraction const fraction fraction temp temp return temp fraction operator const fraction const fraction fraction temp temp numerator numerator numerator temp denominator denominator denominator return temp fraction operator const fraction const fraction throw fraction divisionbyzero numerator  throw fraction divisionbyzero multiply inverse fraction temp temp numerator numerator denominator temp denominator denominator numerator temp denominator  temp numerator temp numerator temp denominator temp denominator return temp chapter exception handling ostream operator ostream const fraction numerator denominator return istream operator istream fraction throw fraction divisionbyzero cout enter fraction numerator numerator cout denominator  denominator return denominator  cout nerror denominator  denominator  denominator denominator  throw fraction divisionbyzero denominator  numerator numerator denominator denominator return fract_t cpp testing class fraction modules fract_t cpp fraction cpp include iostream include fraction int main tests exception constructor fraction   catch fraction divisionbyzero cout nerror initializing nthe denominator  solutions635fraction    cout nsome test output cout endl cout endl cout endl cout endl cout endl  cout endl error catch fraction divisionbyzero cout nerror dividing nno division  cout endl cout endl fraction   cout   endl fraction   cout   endl cout endl cout nand input cin catch fraction divisionbyzero cerr nerror denominator  exit  cout nyour input endl return  intentionally left blank more files chapter describes random access files based file streams options querying file state exception handling files illustrate objects polymorphic classes persistent save files applications introduced chapter include simple files hash tables chapter  chapter more files open modeeffectsmust file exist open file input output opens file input andoutput file exists truncated opens file input andoutput file exist created writing access seek performed yesnonoios ios outios ios ios truncios ios ios app1 flag ios binaryis additionally set file opened binary mode  flag ios ate additionally set current seek position set file opening note opening file random access combined open modes read write access opening file random access639random file access looked sequential file access access specific infor mation file walk file tail records appended file random file access option reading writing directly apre defined position change current file position explicitly point putpointer byte manipu lated pointing pointer revert read write operations familiar open modesone prerequisite random file access position records file beprecisely identified implies opening file binary mode avoid transfer additional escape characters file ios openmode mode ios ios ios app ios binary fstream fstr account fle mode statement opens file account fle binary mode reading append ing file file created exist random read accessto file write operations records appended file enable random read write access file file opened ios openmode mode ios ios ios binary fstream fstr account fle mode technique existing files file exist youcan ios truncflag create file state discusses error handling options file account fle chapter more files access pointpositioning flagfile fileios begcurrent positionios curend fileios positioning random access access points file positioning random access641discovering changing current position file stream classes comprise methods discover change current position ina file tellp andtellg methods return current position putorgetpointers longvalue long rpos myfile tellg statement queries current position read pointer myfilestream current position returned byte offset relative file current file position modified seekp orseekg method position stated byte offset relative file relative current position file positioning flags threeios seekdirtype positioning flags defined iosclass pur pose ios beg ios cur ios imagine write object accto file account fle offset pos statements ofstream fstr account fle ios ios binary fstr seekp pos ios acc write fstr calls write method accountclass object writeits data members file chapter  positioning flag position assumed relative tothe file statement position write pointer formulated fstr seekp pos byte offset negative calls methods seekp andseekg position read write pointer file contrast place pointer position file andthen perform write operation create gap unknown content file sense slots file equal length overwritten option programming hash tables chapter more files defines class indexentry ifndef _index_h define _index_h include fstream include iostream namespace std class indexentry private long key key long recnr offsetpublic indexentry long l long l key recnr access methods int recordsize const return sizeof key sizeof recnr fstream write fstream ind const fstream read fstream ind fstream write_at fstream ind long pos const fstream read_at fstream ind long pos endif cpp implements methods include fstream indexentry write_at fstream ind long pos const ind seekp pos ind write char key sizeof key ind write char recnr sizeof recnr return ind fstream indexentry read_at fstream ind long pos ind seekg pos ind read char key sizeof key ind read char recnr sizeof recnr return ind positioning random access continued representing entry theread_at andwrite_at methods positioning random access continued using positioning methods statements commonly random positioningseekg l andseekp l ios set current position file aware thatthe argument lto longtype required determine length file point getpointer endof file query position pointer fstr seekg l ios unsigned long count fstr tellg thecountvariable number bytes occupied file positioning methods files opened binary mode itdoes sense text files devices text mode conversions prevent methods working correctly determining positions file position records files easy compute records file thesame length sizeis length record0l size  size positions records working variable length records compute theirpositions enable random access store positions records separate structure called stores pairs keys record positions called entriesin file akey social security number customer uniquely identify record sorted position correlates required key binary search algorithm theindexentryclasstheindexentryclass represent entry opposite classcomprises methods reading writing entry current file position position file stream passed argument method chapter more files continued adds definition include string class indexfile private fstream string filename indexpublic indexfile const string indexfile close void insert long key long pos long search long key void retrieve indexentry entry long pos cpp continued adds methods class indexfile indexfile indexfile const string file ios openmode mode ios ios ios binary open file c_str mode file exist clear mode ios trunc open file c_str mode return elsename file file state representing constructor class indexfile file state645state flags file stream assume states reaches file andcannot continue reading file operation fail file opened block transferred correctly theiosclass state flags define states file assume stateflag corresponds single bit status word represented iostatetype iosclass state flags exist ios eofbitend file reachedios failbitlast read write operation failedios badbitan irrecoverable error occurredios goodbitthe stream state flag set flag ios goodbitis exception rule represented asingle bit  flag set status word ios goodbitif fine discovering changing state multiple methods discovering modifying status stream amethod exists state flag eof fail bad good theyreturntruewhen flag raised discoverthe file statement fstr eof status word stream read rdstate method individual flagscan queried simple comparison myfile rdstate ios badbit theclear method clearing status word clear arguments state flags cleared argument iostatetypepassed clear automatically status word stream theindexfileclasstheindexfileclass file represent defined opposite theconstructor class clear method reset failbit invalidattempt open existent file file created theindexfileclass comprises methods inserting seeking retrieving indexentries implementing chapter chapter more files exceptio exception classes file access ifndef _exceptio_h define _exceptio_h include string include iostream namespace std class fileerror private string filename public fileerror const string file filename file string getname const return filename class openerror public fileerror public openerror const string file fileerror file class readerror public fileerror public readerror const string file fileerror file class writeerror public fileerror public writeerror const string file fileerror file endifexception handling filesdefining exception classes exception handling files647implementing exception handling exploit error tracking options state flags implement yourown exception handling files method reads records file throw exception state flag ios eofis raised ofthe file reached opposite typical exception classes organized hierarchy beused represent error conditions opening reading writing file case file saved evaluation exception handler standard exception handling streams standard exception handling streams excep tions method flags status word stream causeexceptions thrown theexceptions method defined iosstream base class methodexpects multiple state flags separated sign exception thrownfor flags ifstream ifstrm account fle fstrm exceptions ios failbit ios badbit accessing fstrmstream exception thrown flagsios failbitorios badbitis raised operation caused error thenterminated state flags cleared clear rdstate exception thrown standard exception class failure type isdefined publicelement iosbase class comprises virtual methodwhat returns string error exception handlerwill send string standard error output exceptions arguments discover state flags astatus word stream exception thrown bit set return exceptions method exception thrownwhenever error occurs iostate fstrm exceptions ios eofbit statement bitwise operator ascertain exception thrownwhen file reached chapter more files account defines classes account depacc savacc virtual read write methods enum typeid account dep_acc sav_acc class account private data members defined public constructor access methods virtual typeid gettypeid const return account virtual ostream write ostream const virtual istream read istream class depacc public account data members constructor typeid gettypeid const return dep_acc ostream write ostream const istream read istream class savacc public account data members constructor typeid gettypeid const return sav_acc ostream write ostream const istream read istream account cpp implements methods include account ostream depacc write ostream const account write return write char limit sizeof limit write char deb sizeof deb return istream depacc read istream account read return read char limit sizeof limit read char deb sizeof deb return persistence polymorphic objects methods read andwrite class depacc persistence polymorphic objects649storing polymorphic objects imagine objects polymorphic class hierarchy persistent store file ensure object reconstructed precisely read rise fact objects polymorphic class hierarchies virtual methods simply case making data members object records writing afile  write type data members object file  objects dynamic members save referenced objects object type note class assume control object storage methods allowthe object write data members file methods virtual defini tion class hierarchy pointers reference objects appro priate read write operation object called storing objects accounthierarchy opposite accountclass familiar virtual file methods implementation read andwrite methods discussed earlier chapter  fundamentals file input andoutput unchanged derived classes depaccandsavaccalso definitions read andwrite methods read objects write files imple mentation calls base class method errors occur simply question transferring additional data members derived class file type written file read file task willbe performed special class features file management follow ing details topic chapter more files account continued add definition accfile class include exceptio class accfile private fstream stream string filenamepublic accfile const string throw openerror accfile close long append account acc throw writeerror account retrieve long pos throw readerror account cpp continued implements methods class accfile long accfile append account acc throw writeerror seekp l ios seek long pos tellp save position throw writeerror typeid acc gettypeid write typeidf write char sizeof throw writeerror elseacc write write object file throw writeerror elsereturn pos persistence polymorphic objects continued theappend method persistence polymorphic objects continued a scenarioimagine save data account types including current sav ings accounts file objects save belong types save data members type object ensure object correctly reconstructed read methods class define throw exceptions errorsoccur exception type thrown method stated exception specification theaccfileclasstheaccfileclass random access file account data isdefined opposited data members fstreamtype file stream string usedfor storing file constructor saves file opens file reading appendingat file file opened constructor throws openerrorclassexception theappend method writes account passed argument fileand returns position account written file order current type argument virtual method gettypeid iscalled depending type append method write typefield file virtual method write allowing current objectto write file write error occurs method throw writeerrortype exception theretrieve method reads type identifier determines typeof object allocate memory data file transferred dynamically allocated object virtual method read anexception thrown stream access error occurs chapter more files cpp continued implements methods class indexfile void indexfile insert long long throw readerror writeerror indexentry entry int size entry recordsize length entry clear seekg  ios long tellg file length  file throw readerror size entry bool false  search position insertif entry read_at throw readerror entry getkey shift entry write_at size size true entry setkey entry setpos insertentry write_at size throw writeerror application files theinsert method class indexfile application files653indexprimary file  sense organize data sequentially files walk therecords regularly true files store salary data phone bills applications provide quick access specific data exam ple user prefer locate account reference account number searching file files real performance boost cases files anindex file comprises called primary filecontaining live data theindexconsists pairs keys record positions primary file key stored theindex identify record primary file situation easily explained graphic sorted reference keys speed access allowing perform abinary search locate position record inserting indexfileclass definition represent insert method correctly inserts record sorted defined opposite read pointer set file insertions current position  file entry inserted offset  cases entrieswhose keys greater key shifted room entry chapter more files defines class indexfile class indexfilesystem public accfile public indexfile private string public indexfilesystem const string accfile prim indexfile ind void insert account acc account retrieve long key cpp implementing methods void indexfilesystem insert account acc multiple entries search acc getnr  long pos append acc insert primary fileif pos  insert inindexfile insert acc getnr pos file account indexfilesystem retrieve long key long pos search key record address pos  account number return null indexentry entry read entry indexfile retrieve entry pos read primary file return accfile retrieve entry getpos implementing file representing file methodsinsert andretrieve class indexfilesystem implementing file655index file account management file consists primary file sense derive theclass represent file classes primary file file sample file managing bank accounts theindexfilesystemclass derived definedclassesaccfileandindexfile defined opposite data mem ber string file constructor expects file argument composes names primary file adding suitable suffix base ini tializers open files define destructor files automatically closed thebase class destructors called inserting retrieving records theinsert method defined insert records calls search method check account number exists newrecord appended primary file append method thekey address record inserted theindexfilesystemclass retrieve method usedto retrieve records primary file key key passed method isused search method address required record theindex record retrieved primary file accfileclassretrieve method retrieve methods indexfileandaccfileclasses thesearch method performs binary search needed plete file implementation job implement methods exercise sorted file implement disadvantage records tobe shifted room insert records shifting time consuming represented tree reorganization exercises chapter more files class indexfile private fstream string filename indexpublic indexfile const string throw openerror indexfile close void insert long key long pos throw readerror writeerror long search long key throw readerror void retrieve indexentry entry long pos throw readerror enum typeid account deposit savings class accfile private fstream string filename primary filepublic accfile const string throw openerror accfile close long append account acc throw writeerror account retrieve long pos throw readerror exercisesexercise  classindexfileclassaccfile exercises657exercise  complete test implementation indexfilesystemclass methods throw exceptions fileerrortype error occurs complete constructor indexfileclass order throw exception type openerrorif file opened write retrieve method indexfileclass method retrieves record position define search method entry account number passed argument base method binary search algorithm return position record  account number define retrieve method accfileclass evaluates type field position account file dynamically allocates memory object type finally reads data account file write main function tryblock create filesystemtype object insert accounts types file subsequent user dialog reads key displays record screen write exception handler han dle errors occur file error output case error chapter more files hash filehash functionkey4713123434hash fileshash files profit random file access localizing file records directly file record length identified unique key called hash key idea hashing provide function hash function applied hash key record yields address file record file records numerated hash key equals record number simple hash function identical function hash keys account insurance numbers consist fixed number digits start  frequently hash function hash key key hash function transforms hash keyinto record number andb  number is record number is record number address space hash file large prime number function hash yields good distribution file records address space hash function maps hash key values key key key  record number case collisionsmay occur record inserted hashes address record solve conflict record inserted position process finding position insert record called collision resolution linear solutionis common collision resolution technique starting occupied position subsequent positions checked sequentially position file record inserted position exercises659exercise  hash file required speed access customer data concept hash files explained opposite things simple record hash file customer customer key hash function opposite compute address record linear solution collision resolution technique note linear solution adequate access times address space large distribute record numbers yielded hash function evenly address space hash function opposite guarantee good distribution bis asufficiently large prime number develop hashentryclass represent customer data store customer unsigned longvalue ofthe customer chararray length  supply default values constructor declaration additionally declare read_at andwrite_at methods read customer position stream write position methods expect position stream arguments define hashfileclass represent hash file privatemem bers class comprise fstreamtype file stream string store file intvariable store number hash function opposite method publicmembers prise constructor expects file number bas argu ments opens file read write access destructor closes file additionally declare methods insert andretrieve insert retrieve single records methods hash function compute record number hash file collision occurs methods perform sequential search locate free slot address space mod address space size desired cus tomer data test hashfileby writing mainfunction creates hash file small address space  add customer records hash file retrieve data deliberately provoke collisions customer ids    solutions chapter more files solutionsexercise  exceptio error classes file processing unchanged earlier chapter account defines classes account depacc savacc virtual read write methods class accfile represent account files ifndef _account_h define _account_h include fstream include iostream include iomanip include string namespace std include exceptio enum typeid account dep_acc sav_acc class account private data elements string unsigned long double balance public constructor account const string c_name unsigned long c_nr l double c_balance   c_name c_nr balance c_balance virtual account virtual destructor solutions661 access methods long getnr const return void setnr unsigned long methods virtual typeid gettypeid const return account virtual ostream write ostream const virtual istream read istream virtual void display const cout fixed setprecision  account holder endl account number endl balance account balance endl endl class depacc public account private double limit overdrawn limitdouble ratepublic depacc const string unsigned long l double bal   double li   double   account bal limit li access methods methods implicit virtual typeid gettypeid const return dep_acc ostream write ostream const istream read istream chapter more files void display const account display cout overdrawn limit limit endl competitive endl class savacc public account private double compound interestpublic methods class depacc definition class accfileclass accfile private fstream string filenamepublic accfile const string throw openerror accfile close long append account acc throw writeerror account retrieve long pos throw readerror void display throw readerror endif solutions663 account cpp implement methods classes account depacc savacc accfile include account include typeinfo ostream account write ostream const  write char sizeof write char balance sizeof balance return istream account read istream getline  read char sizeof read char balance sizeof balance return ostream depacc write ostream const account write return write char limit sizeof limit write char sizeof return istream depacc read istream account read return read char limit sizeof limit read char sizeof return ostream savacc write ostream const istream savacc read istream class depacc chapter more files methods class accfile accfile accfile const string throw openerror ios openmode mode ios ios ios app ios binary open c_str mode throw openerror elsename void accfile display throw readerror account acc pacc null depacc depacc savacc savacc typeid seekg l throw readerror cout nthe account file endl read char sizeof typeid switch case account pacc acc break case dep_acc pacc depacc break case sav_acc pacc savacc break default cerr invalid flag account file endl exit  pacc read break pacc display cin return solutions665if eof throw readerror clear long accfile append account acc throw writeerror seekp l ios seek long pos tellp save position throw writeerror typeid acc gettypeid write char sizeof write typeidif throw writeerror elseacc write add object file throw writeerror elsereturn pos account accfile retrieve long pos throw readerror clear seekg pos set pointerif throw readerror typeid read char sizeof typeidif throw readerror account buf switch case account buf account break case sav_acc buf savacc break chapter more files case dep_acc buf depacc break buf read datathrow readerror return buf definitions classes indexentry representing entry representing indexfile representing file ifndef _index_h define _index_h include fstream include iostream include string include account namespace std class indexentry private long key keylong recpos offsetpublic indexentry long l long l key recpos void setkey long key long getkey const return key void setpos long recpos long getpos const return recpos int recordsize const return sizeof key sizeof recpos fstream write fstream ind const fstream read fstream ind fstream write_at fstream ind long pos const fstream read_at fstream ind long pos solutions667void display const cout account key position recpos endl class indexfile private fstream string filename indexpublic indexfile const string throw openerror indexfile close void insert long key long pos throw readerror writeerror long search long key throw readerror void retrieve indexentry entry long pos throw readerror void display throw readerror class indexfilesystem public accfile public indexfile private string filename suffixpublic indexfilesystem const string accfile prim indexfile ind bool insert account acc account retrieve long key endif chapter more files cpp methods classes indexentry indexfile include fstream indexentry write_at fstream ind long pos const ind seekp pos ind write char key sizeof key ind write char recpos sizeof recpos return ind fstream indexentry read_at fstream ind long pos ind seekg pos ind read char key sizeof key ind read char recpos sizeof recpos return ind fstream indexentry write fstream ind const ind write char key sizeof key ind write char recpos sizeof recpos return ind fstream indexentry read fstream ind ind read char key sizeof key ind read char recpos sizeof recpos return ind methods class indexfileindexfile indexfile const string file throw openerror ios openmode mode ios ios ios binary open file exists open file c_str mode file exist clear mode ios trunc open file c_str mode throw openerror file solutions669void indexfile display throw readerror indexentry entry seekg l throw readerror indexfile setting pointer cout endl endl true entry read break entry display eof throw readerror clear long indexfile search long throw readerror indexentry entry long key long mid  number file records int size entry recordsize length entry clear seekg l ios tellg size throw readerror  return   position entrywhile mid   entry read_at mid size throw readerror key entry getkey key mid  elsebegin mid chapter more files entry read_at size throw readerror entry getkey key return size return  void indexfile insert long long throw readerror writeerror indexentry entry int size entry recordsize length entry clear seekg  ios long tellg file length  file throw readerror size entry bool false  search position insertif entry read_at throw readerror entry getkey shift entry write_at size size true entry setkey entry setpos insertentry write_at size throw writeerror solutions671void indexfile retrieve indexentry entry long pos throw readerror clear entry read_at pos throw readerror implementing methods class indexfilesystem bool indexfilesystem insert account acc throw readerror writeerror search acc getnr  multiple entries long pos append acc add primary file indexfile insert acc getnr pos add indexreturn true elsereturn false account indexfilesystem retrieve long key record address long pos search key byte offset entry pos  account number exist return null account number exist indexentry entry read eintryindexfile retrieve entry pos primary file return accfile retrieve entry getpos index_t cpp testing file include iostream include string namespace std include include account chapter more files int main indexfilesystem database accounttest account acc1 vivi ul   database insert acc1 savacc acc2 ulla ul     database insert acc2 depacc acc3 jeany ul       database insert acc3 database indexfile display cin database accfile display unsigned long key cout key cin key database search key  cout key key endl elsecout key key endl account pacc database retrieve key pacc null pacc display delete pacc pacc null cout retrieving failed endl catch openerror err cerr error opening file err getname endl exit  catch writeerror err cerr error writing file err getname endl exit  solutions673catch readerror err cerr error reading file err getname endl exit  catch cerr unhandled exception endl exit  return  exercise  exceptio error classes file processing chapter hashfile defines classes hashentryrepresenting record hash file hashfilerepresenting hash file ifndef _hash_h_ define _hash_h_ include fstream include iostream include iomanip include string include string namespace std include exceptio class hashentry private unsigned long char  chapter more files public hashentry unsigned long l const string strncpy c_str    long getnr const return void setnr unsigned long string getname const return void setname const string strncpy c_str    int getsize const return sizeof long sizeof fstream write fstream fstream read fstream fstream write_at fstream unsigned long pos fstream read_at fstream unsigned long pos virtual void display cout fixed setprecision  client number endl client endl endl cin class hashfile private fstream string filename unsigned long size address spaceprotected unsigned long hash_func unsigned long key return key public hashfile const string unsigned long throw openerror solutions675void insert hashentry rec throw readerror writeerror hashentry retrieve unsigned long key throw readerror void display endif hashfile cpp methods classes hashentry hashfile include hashfile fstream hashentry write fstream write char sizeof write sizeof return fstream hashentry read fstream read char sizeof read sizeof return fstream hashentry write_at fstream unsigned long pos seekp pos write char sizeof write sizeof return fstream hashentry read_at fstream unsigned long pos seekg pos read char sizeof read sizeof return chapter more files hashfile hashfile const string file unsigned long throw openerror ios openmode mode ios ios ios binary open file c_str mode open file exists file exist clear mode ios trunc open file c_str mode throw openerror file hashentry rec l seekp l unsigned long  initialize address spacerec write throw writeerror void hashfile insert hashentry rec throw readerror writeerror hashentry temp int size temp getsize hash wert unsigned long pos hash_func rec getnr temp read_at pos size read slot throw readerror temp getnr l slot free rec write_at pos size add file search free slot bool false unsigned long pos size size size solutions677while pos size temp read_at throw readerror elseif temp getnr l free slotfound true proceed slot size size pos size address space throw writeerror true add file rec write_at throw writeerror hashentry hashfile retrieve unsigned long key throw readerror static hashentry temp int size temp getsize unsigned long pos hash_func key hash temp read_at pos size read slot throw readerror temp getnr key return temp finishelse search unsigned long pos size size size pos size temp read_at throw readerror chapter more files elseif temp getnr key record return temp elsep size size proceed slot temp setnr l temp setname key exist return temp void hashfile display hashentry temp seekg l unsigned int  temp read throw readerror temp display clear hash_t cpp tests hash files include iostream include string include hashfile namespace std int main hashfile hash client fle  address space length cout ninsert endl hashentry kde l vivi hash insert kde solutions679kde setnr l kde setname peter hash insert kde kde setnr l kde setname alexa hash insert kde kde setnr l kde setname peter hash insert kde kde setnr l kde setname jeany hash insert kde cout ninsertion complete endl hash display unsigned long key cout key cin key hashentry temp hash retrieve key temp getnr l temp display elsecout key key endl catch openerror err cerr error opening file err getname endl exit  catch writeerror err cerr error writing file err getname endl exit  catch readerror err cerr error reading file err getname endl exit  return  intentionally left blank more pointers chapter describes advanced pointers include pointers pointers functions variable number arguments pointers functions application defines class represent dynamic matrices introduced chapter  chapter more pointers accsort cpp sorts array pointers accounts account numbers include account void ptrswap account account void accsort account kptr int account temp minp lastp lastp kptr  pointer pointer array kptr lastp kptr minp kptr temp kptr  temp lastp temp temp getnr minp getnr minp temp ptrswap kptr minp void ptrswap account account account pointer pointers function accsort pointer pointers683motivation pointer variables objects address memory usepointers address create pointers pointers necessaryifan array pointers dynamically allocated ora function expects array pointers argument cases declare pointer variable access element inthe array element array pointer pointer variable pointer pointer generating pointer arrays dynamically creating dynamic array pointers accountclass objects account ptr account  pointer ptris pointing pointer array total account type pointers array elements addressed ptrandptr  pointer  ptr andptr pointer access objects managed array achieved ptrand ptr  object addressed pointer  ptr ptr object addressed pointer pointer arrays arguments define function expects array pointers argument mustdefine parameters match void accsort account kptr int len kptrparameter manipulate pointer array length stored inthe parameter len callingexample accsort ptr  kptrpoints pointer ptr  pointer array ptr account kptryou equivalent form account kptr opposite implementation function accsort func tion selection sort algorithm worked sorting case sort accounts sort pointers saves time consuming copying chapter more pointers fixed argumentsfirst varyingargumentvarying arguments varyingargumentva_start argp max char bufferint max include stdarg int func char buffer int max va_list argptr declares argument pointer long arg3 va_start argptr max initialization arg3 va_arg argptr long read arguments argument arg3 va_end argptr set argument pointer null variable number arguments fixed varying arguments stack scheme function varying arguments variable number arguments685c define functions variable number arguments oneexample function type standard function printf requiresat argument format string printf function conversionspecifiers format string compute number type arguments follow obligatory optional arguments functions variable number arguments expect fixed number obliga toryarguments variable number optionalarguments obligatory argu ment required expect define parameter obligatoryargument define function type optional arguments repre sented dots parameter list function opposite func expects arguments prototype followsprototype int func char buffer int max functions variable number arguments defined pushes argument stack calling sample function func stacklooks diagram opposite optional arguments accessed pointer called argument pointer designated argptrhere header files cstdargorstdarg hcontainmacros conform ansi standard manage pointer assure source code portable access arguments steps required read optional arguments  va_listtype argument pointer argptrmust declared addition toother local variables type va_listis defined header file stdarg typeless charpointer  macro va_start called point argument pointer argptrto optional argument va_start expects arguments ofthe argument pointer obligatory parameter va_start argptr max chapter more pointers input cpp function input reads characters keyboard appends  input corrected backspace arguments  pointer input buffer  maximum number characters read  optional arguments characters terminate input list returns character breaks input include stdarg include conio getch putch int input char buffer int max int breakc current character character break int  number characters read va_list argp pointer arguments true buffer  getch  read character getch  special keys extended code  va_start argp max initialize argp compare break characters breakc va_arg argp int return breakc breakc va_end argp  backspace buffer putch putch putch   max place character buffer buffer putch output max buffer reached putch beep variable number arguments continued function input variable number arguments continued  macro va_arg called optional argument pointed byargptris read stack arguments va_arg theargument pointer type optional argument arg3 va_arg argptr long macro va_arg sets argument pointer optionalargument result va_arg type stated beidentical type optional argument special terminating condition optional argument spe cific null orcr current number argu ments defined obligatory argument  evaluating arguments argument pointer set nullby theva_end macro va_end argptr optional arguments read procedure isrepeated step  macro va_start notes oppositethe sample function input opposite getch function readcharacter input keyboard store buffer addressed argu ment argument defines maximum number characters read arguments characters terminate keyboard input argument mustbe return character define esc  esc key define f1   f1 key input  esc f1 input reads  characters stores array inputcan terminated pressing space esc f1 return keys return thecorresponding character code printable characters stated optional arguments special keys function keys return for togetch extended codefor function keys code withinthe range ð68 distinguish extended codes normal ascii codes ð255 is extended code table extended codes inthe appendix chapter more pointers funcptr cpp demonstrates array pointers functions include iostream include cstdlib prototype atoi include cctype macros toupper tolower namespace std void error_message char message char message_up char message_low char void functab char error_message message message_up message_low char input    int main int  cout functions    cin   functab  functab return  void error_message char cerr endl void message char cout endl void message_up char int  toupper cout void message_low char int  tolower cout pointers functions jump table pointers functions689using pointers functions function constant pointer function addresses themachine code function situation arrays array constant pointer array element pointers functions save array form ajump table individual functions accessible pointer function passed argument function thismakes sense function calling work functions depending current situation standard function qsort qsort quick sortalgorithmto sort array depending type array elements sort crite ria qsort function expect argument comparison function declaring pointers functions pointer function declared syntax type funcptr parameter_list defines variable funcptr store address function func tion type typeand parameter list stated pair parentheses alsoimportant declaration statement type funcptr parameter_list declare function funcptrthat returned pointer point funcptrto function compare compare thepointer bool compare double double prototypebool funcptr double double funcptr compare funcptr     calling funcptr equivalent calling compare declaration ofcompare compiler compareis func tion program opposite functabis array pointers functionsof voidtype expects string argument functabis initial ized functions stated definition functab  points toerror_message functab  tomessage program exe cuted function called chapter more pointers complex declarations st   strptr pointer  array  elements type  char    char strptr  nd          func function return type  pointer  array elements type  pointer  long  funcptr pointer  function return type  pointer  array elements type  pointer  char     long func rd char funcptr  complex declarations operatorsignificance array elements typefunction return type pointer reference operators complex declarations declaration definition function variable operators youfind expressions addition base type operators acomplex declaration operators char strptr  declares strptras array pointers char declaration combination ofthe operators permissible exceptions apply elements array functionsa function return function array return pointer function array operators precedence declarations expressions useparentheses redefine order precedence ruleswhen complex declaration evaluated rules applied  start identifier declared repeat steps operators resolved  parentheses brackets interpreted  bracket asterisk leftisinterpreted exists base type interpreted proceeding demonstrated opposite rules apply toboth function arguments chapter more pointers st typedef daytime freetime freetime timearr  nd typedef struct double complex complex z1 z2 zp rd typedef enum tu workday workday day th typedef enum diamonds hearts spades clubs color typedef enum jack queen king ace typedef struct color card typedef card  hand hand player1 player2 player3 defining typenames defining typenames thetypedefkeyword types keyword typedef typedef unsigned char byte defines type byte abbreviation theunsigned chartype statementexample byte array  define array arraywith  elements unsigned chartype typenames uppercase mandatory examples typedef int intptr typedef enum red amber green lights intptridentifies type pointer int lightsis enumerated type type assumes position variable typedefdefinition omitting typedefprefix define variable typename type definitions allocate memory create type simplyintroduce existing type typedef char ptr_to_func type ptr_to_funcis abbreviation type pointer function thatreturns pointer char declarationexample ptr_to_func search equivalent tochar search advantages major advantage typedefis improves readability pro grams complex types named additional advantage isolate platform dependent types aprogram ported platform change platform dependent type typedefdefinition chapter more pointers matrix representing dynamic matrices include stdexcept include iostream namespace std class row double int size public row int size double row delete double operator int throw out_of_range  size throw out_of_range column range elsereturn class matrix row mat pointer array rowsint lines cols number rows columnspublic matrix int int lines cols mat row lines int  lines mat row cols matrix int  lines delete mat delete mat int getlines const return lines int getcols const return cols row operator int throw out_of_range  cols throw out_of_range row range elsereturn mat application dynamic matrices class matrix application dynamic matrices695now develop application class represent dynamic matrices matri ces computing vectors needed rotate zoom images graphics programming thematrixclassmemory allocated dynamically matrix mat runtime additionally shouldbe operator access elements matrix element row column jthe class dynamic member reference matrix matrix single dimensional array elements single dimensional arrays class row represent single dimensional arrays doublevalues defined opposite operator overloaded rowclass allowan exception out_of_rangetype thrown invalid indices thematrixclass dynamic member mat address array ofpointers rowobjects matis pointer pointer constructor destructor subscript operator constructor matrixclass creates array linespointers objects therowtype loop allocate memory rows dynamically contrast destructor releases memory occupied arrays beforereleasing space occupied pointer array mat subscript operator matrixclass returns array ifor indexi expression evaluatedexample   subscript operator matrixclass returns array toindex  subscript operator rowclass called array itreturns reference doublevalue  enhancing matrixclass exercises chapter overload ing copy constructor assignment exercises chapter more pointers include iostream namespace std char color white pink blue green int main cout color  color color   color   color   endl return  comparison function comparewill called function shouldbe declared defined asextern int compare refer appendix binding functions note exerciseslisting exercise  exercise  standard function qsort include cstdlib void qsort void array size_t size_t size int compare const void const void function qsort quick sort sorts array nelements firstelement pointed array size element size comparison function pointed compareis sort content array ascending order qsort calls function arguments point elements compared define comparison function function return integer equal greater argument equal greater exercises697you selectionsort function defined exercise  chapter  algorithm forsorting intvalues exercise standard function qsort prototype defined opposite quick sort algorithmfor exercise note exercise  program opposite output screen exercise  write function min computes returns minimum positive numbers function expects variable number unsigned intvalues asarguments argument number  exercise  write program compares speed quick sort selection sort algorithms sort identical sequences random numbers type intto test thesort algorithms read maximum number random numbers keyboard allocate needed memory dynamically display time seconds required sort operation screen sort operation exercise  write additional methods complete matrixclass add constversion subscript operator rowandmatrixclasses inlineimplementation define constructor matrixclass constructor dynamically allocates matrix number rows columns initial izes matrix elements write copy construc tor overload assignment operator compound assignment oper ator additionis defined nnmatrices aandb equal num bers rows columns sum cis nnmatrix elementsare computed adding elements  test matrixwith suitable mainfunction calls methods display calculations screen solutions chapter more pointers solutionsexercise  screen output white lue kexercise  minivar cpp defines tests function min computes returns minimum positive integers function expects variable number arguments unsigned int types argument  include stdarg unsigned int min unsigned int unsigned int minarg arg va_list argptr pointer optional argumentsif  return  va_start argptr minarg arg va_arg argptr unsigned int  arg minarg minarg arg va_end argptr return minarg small function main testing include iostream namespace std int main cout nthe minimum      min       endl return  solutions699exercise  sort_t cpp compares performances sorting algorithms quick sort selection sort purpose identical arrays dynamically generated initialized random numbers times needed sorting displayed include iostream include iomanip include cstdlib include ctime namespace std void isort int int lenv qsort extern int intcmp const void const void main unsigned int size int numbers1 numbers2 long time1 time2 cout performance sorting algorithms quick sort selection sort compared nhow numbers sorted cin size numbers1 int size numbers2 int size cout nthere size random numbers generated srand unsigned time null initialize random number generator  size numbers1 numbers2 rand random numberscout nsorting starts wait time time1 length time quick sort qsort numbers1 size sizeof int intcmp time time2 cout ntime quick sort algorithm time2 time1 seconds chapter more pointers cout sorting wait time time1 length timeisort numbers2 size selection sorttime time2 cout ntime insertion sort algorithm time2 time1 seconds noutput sorted numbers char cin  size cout setw  numbers1 cout endl return  extern int intcmp const void const void return int int isort sorts array int values selection sort algorithm void isort int int len sort array length len ascendingregister int minp order int len  points elementfor search smallest element starting minp minp points current smallest array element  search theif minp minimum minp minp minp swap solutions701exercise  matrix represents dynamic matrices ifndef _matrix_h_ define _matrix_h_ include stdexcept include iostream namespace std class row double int size public row int size double row delete double operator int  size throw out_of_range row range return const double operator int const  size throw out_of_range row range return class matrix private row mat pointer array rows int lines cols number rows columnspublic matrix int int lines cols mat row lines int  lines mat row cols matrix matrix int int double val chapter more pointers matrix const matrix matrix int  lines delete mat delete mat int getlines const return lines int getcols const return cols row operator int  cols throw out_of_range row range return mat const row operator int const  cols throw out_of_range row range return mat assignments matrix operator const matrix matrix operator const matrix endif matrix cpp defines methods class matrix include matrix matrix matrix int int double val lines cols mat row lines array pointers arrays rowsint  lines arrays rows mat row cols allocate memoryfor  cols val copy values solutions703matrix matrix const matrix lines lines cols cols rows columnsmat row lines array pointers arrays rowsint  lines arrays rows mat row cols allocate storagefor  cols copy values matrix matrix operator const matrix int free storage  lines delete mat delete mat lines lines cols cols rows columns mat row lines array pointers arrays rowsfor  lines array rows mat row cols allocate spacefor  cols copy values return matrix matrix operator const matrix int cols cols lines lines  lines  cols return chapter more pointers matrix_t cpp tests dynamic matrices include matrix void display matrix output matrix int main matrix   int  getlines  getcols double   cout matrix created endl display matrix cop cout copy generated endl display cop cop cout compute sum endl display cop matrix m1     cout initializing matrix  endl display m1 m1 cout matrix assigned endl display catch out_of_range err cerr err endl exit  return  void display matrix int  getlines int  getcols cout cout endl cin manipulating bitsthis chapter describes bitwise operators bit masks applications included demonstrate calculations parity bits conversion lowercase capital letters converting binary numbers finally definition bit fields introduced chapter  chapter manipulating bits bitwise andbitwise inclusive resultresult            ˆ  ˆ  ˆ   ˆ    a   ˆ unsigned int                                     bit patternbitwise operators true false table bitwise operators examples bitwise operators707bit coding data cases conservative memory imperative data bit coded technique represent individual bits examples bit coded data file access rights status word stream access bit coded data read modify individual bits bitwise operators perform tasks logical bitwise operators inclusive exclusive notbitwise shift operators left shift shiftoperands bitwise operators integral types operands belonging floatordoubletypes invalid boolean tables opposite logicalbitwise opera tors individual bits bit set  interpreted true bit set  interpreted false exam ples bitwise operator follow result type bitwise operation integral type defined operandtype operands inttypes result inttype arithmetic type conversions precedence operands bitwise operator types normal arithmetic type version occur operand type intand long intvaluewill converted longbefore operation performed logical bitwise operators confused logical operators affect individual bits interpret oftheir operands boolean returning boolean expression  returnsthe true  has  theprecedenceof bitwise operator high unary operator asyou table precedence appendix binary operators low precedence precedence higher logicaloperators chapter manipulating bits    unsigned int                            bit pattern getbin_t cpp defines function getbin reads binary number  standard input returns type unsigned int include iostream namespace std unsigned int getbin char unsigned int val  cin ignore leading blanks tabswhile   read convert binary numberval val   cin return val bitwise shift operators left shiftusing shift operators bitwise shift operators709left shiftthe shift operators shift bit pattern left operand numberof bit positions number positions defined operand examples opposite illustrate point case left shift bits padded bits dropped left lost short xff00  result xf000in case shift bits padded left left operand anunsignedtype positive cases compiler determineswhether pad expression bits logical shift sign bit arithmeticshift arithmetic shift occurs short xff00  result xfff0to ensure portable source code shifts positive values integral promotion integral promotion performed operands shift operator charisextended int result type shift operation type theleft operand integral promotion result shift operation unpredictable operand neg ative larger length left operand expressed bits char xff  undefined resultapplications shift operators perform efficient multiplication division n shift ing number places left equivalent multiplication division n examples unsigned res number  res number    res number     chapter manipulating bits bit pattern bit positionhigher bitslower bits    current bit patterns         x41         mask x20         x61bit masksbit positionsexample define mask x20char mask bit masks711deleting bitsthebitwiseand operator delete specific bits called maskis usedto determine bits delete x7f mask x7fthe bits set  bits areset  bits exception bits deleted bits left unchanged variable ccan integral type variable occupies onebyte bits mask x7f padded bits integral promo tion performed setting inverting bits bitwiseor operator set specific bits oppositepage change case letter ascii code difference lowercase uppercase letter bit finally bitwise exclusive operator invert specific bits  bit set and  bit deleted bit mask avalue  xaa bit pattern xaais10101010 bit eightbits cis inverted worthy note perform double inversion mask torestore original bit pattern mask maskrestores overview demonstrates statement integral expres sionxand mask mask maskdeletes bits  maskx masksets bits  maskx maskinverts bits  mask bits left unchanged chapter manipulating bits parity_t cpp defines function parity computes parity unsigned returns  number  bits  cases inline unsigned int bit0 unsigned int return  int parity unsigned int unsigned int    bit0 return bit maskscomputing parity integer bit masks713creating masks bitwise operators create bit masks  bit pattern  bits positions and1are set mask thereforecontains bunch  bits bits  aboveexpression delete bits mask is independent word length computer preferableto mask xfffc masks address bit word cre ated left shifting  examples     expression sets sixth bit bit deleted sixthbit mask    masks  wherenis variable containingthe bit position int setbit int unsigned int sizeof int return  bitwise operators compound assignments binary bitwise operators compound assignments examples   statements equivalent tox  the function parity opposite includes compound assignments bitwiseoperators parity bit computation perform error recognition data communi cations chapter manipulating bits bytegeneral flowcontrolheader errorcontrolvirtual path identifiervirtual channel identifiervirtual channel identifiervirtual channel identifierpayloadtype clpvirtual path identifiergeneral flow controlvirtual path channel identifier payload type controls data streamaddress virtual path channel distinguish payload control data mark cells high priority check sum headerclp cell loss priority header error control12  struct atm_cell unsigned gfc  general flow controlunsigned vpi  virtual path identifier unsigned vci  virtual channel identifierunsigned  payload typeunsigned clp  cell loss priority unsigned hec  header error controlchar payload  payload bit fields header atm cells representing atm cell bit fields715c divide computer word bit fieldsand bit fields bit fields offer major advantages uncluttered structure preferable error prone masks bitwise operators manipulate individual bits defining bit fieldsbit fields defined data members class bit field unsigned inttypewith optional nameandwidth width defined number bits bit fieldoccupies computer word separated bit field colon struct unsigned bit0_4  unsigned  unsigned bit15  word member word bit0_4designates least bits computer wordand store values range to31 data member aname create gap bits member word bit15contains thevalue bit position  reference nameless bit fields align subsequent bit fields specific bit positions width bit field greater computer word width0has special significance subsequent bit field positioned wordboundary computer word bit field fit computer word bit field positioned word boundary special cases dealing bit fields address operator bit fields create arrays bit fields restriction applies class bit field members order bit fields positioned depends machine computer architectures position bit fields reverse order true dec alpha workstations sample program opposite opposite class designed represent atm cells cells datatransportation atm asynchronoustransfermode networks cell comprises byte header addresses checksum error checking byte data sectionorpayload header connect computer network theuser network interface exercises chapter manipulating bits bitwise operators enter integers st number nd number the bit pattern     the bit pattern     the bit pattern    the bit pattern     bit pattern    how bit positions shifted count the bit pattern     the bit pattern     repeat exercisessample screen output exercise  exercises717exercise  write function putbits outputs bit pattern number unsigned inttype  bits output matter size computer word number passed argument function return write tutorial demonstrate bitwise operators read integers keyboard store vari ablesxandy function putbits output bit pat terns demonstrate shift operators shift xa number bit positions left read number bit positions key board input  case invalid input opposite sample output program exercise  task encrypt data prevent spying data communications sender filter encrypt data question receiver filter decrypt transmission define function swapbits swaps bits intvalue intvalue positions bits swapped passed argu ments function return intvalue positions passed function invalid intvalue bereturned unchanged write filter swaps bits bit positions       characters control characters defined ascii code  test filter writing encrypted output file filter output file output comprise original unencrypted data solutions chapter manipulating bits solutionsexercise  bits_t cpp demonstrates bitwise operators include iostream include iomanip namespace std void putbits unsigned int prototype putbits int main learning bitwise operations int count char yn cout bitwise operations cout nplease enter integers st number cin cout nd number cin cout nthe bit pattern setw  putbits cout nthe bit pattern setw  putbits cout nthe bit pattern putbits cout nthe bit pattern putbits cout nthe bit pattern putbits cout nhow bit positions shifted nnumber cin count solutions719if count  count  cout invalid input shifting bit position count  cout nthe bit pattern setw  count putbits count cout nthe bit pattern setw  count putbits count cout nrepeat cin yn yn x20 yn yn return  output bit pattern  lower bits void putbits unsigned int int   cout char   bit     bitscout blank exercise  hide_t cpp filter encrypt data swap bits bit positions       characters control characters modules hide_t cpp swapbits cpp hide_t sourcefile destfile chapter manipulating bits include iostream namespace std int swapbits int int bitnr1 int bitnr2 prototypeint main encrypt data int cin eof  control character swapbits   swap bitsc swapbits   swapbits   cout return  swapbits cpp function swapbits swaps bits integer arguments integer bit positions returns int swapbits int int bitnr1 int bitnr2 swap bits int newx mask1 mask2 int msb  sizeof int  highest bit positionif bitnr1  bitnr1 msb bitnr2  bitnr2 msb return return bit position invalidmask1  bitnr1 shift  position bitnr1mask2  bitnr2 shift  position bitnr2newx mask1 mask2 delete bitsif mask1 newx mask2 swap bits mask2 newx mask1 return newx templates templates construct functions classes based types stated templates powerful tool automating program code generation chapter describes define function class templates addition special options default arguments specialization explicit instantiation discussed chapter  chapter templates function class templates template instantiation template instantiation type longtype inttype char function class templates723motivation programmer faced implementing multiple versions similarfunctions classes needed types class represent array intvalues class representingan array doublevalues implementation varies type ofelements represent operations performed elements search sort algorithms defined separately type define templates parameterized families functions orclasses afunction templatedefines group statements function parameterinstead concrete typeaclass templatespecifies class definition parameter concretetype class template provide generic definition represent varioustypes arrays instantiation concrete type defined individual class created based template definition advantages templates templates powerful programming tools template coded individual functions classes automat ically generated needed template offers uniform solution problems allowing type inde pendent code tested early development phase errors caused multiple encoding avoided templates standard library standard library numerous class template definitions thestream classes input output string container classes classes string istream ostream iostream instantiations chartype standard library includes algorithm library comprises searchand sort algorithms algorithms implemented global function tem plates set objects chapter templates stack class template stack methods push pop template class class stack private baseptr pointer array int stack int max maximum number elementspublic stack int baseptr max  stack const stack stack delete baseptr stack operator const stack bool return  bool push const bool pop template class bool stack push const max  space baseptr return true return false template class bool stack pop  stack baseptr return true return false defining templates class template stack defining templates725defining function templates definition template prefixed bytemplate class parameter tis type definition youmust state classkeyword tcan type intordouble template class void exchange defines function template exchange parameter trepresents typeof variables interchange tis common mandatory defining class templates template class class demo elem defines class template demo uanddemo treated normaltypes class definition simply state template demo class scope methods class template parameterized future type eachmethod class template function template definition external class template function template syntax method prefixed class template type scope resolution operator opposite illustrates point defining stacktemplate stack managed principle lifo principlefor short thelast element pushed stack removed popped stack methods class template defined header file thisensures definition visible compiler requires definition generate machine code concrete template arguments chapter templates stack_t cpp testing stack include iostream include iomanip namespace std include stack typedef stack unsigned ustack stack elements type unsigned void ustack stk void clear ustack stk int main ustack ustk  create fillfill ustk original stack ustack ostk ustk copy cout copy endl clear ostk output clear copy cout original endl clear ustk output clear original return  void ustack stk unsigned cout enter positive integers quit  cin  stk push cerr stack break void clear ustack stk stk cerr stack endl unsigned stk pop cout setw  cout endl template instantiation sample program template instantiation727defining template creates concrete function class machine codefor functions methods generated instantiation instantiating template functions atemplate functionis instantiated called compiler determines theparameter type tby function arguments short   exchange template generate exchange function machine code theshorttype template functions called step generate exchange template function type giventhatxandyare doublevariables statementexample exchange creates template function doubletype instantiation template classes instantiation template classis performed implicitlywhen class thefirst time object template class defined stack int istack  implicit statement creates template class stack int generating machinecode methods inttype step completed istackobject stack int type constructed template class stack float created machine code gen erated methods template class machine code thestack int methods developing templates reduce machine coderequired program spare programmer extra work required develop multiple versions functions classes templates double checked errorsby compiler templatedefinition compiled instantiation check recognizes errors independent template parameters errors parameterization detected instantiation operator template argument type defined chapter templates stackn class template stack template class int class stack private arr arrayint stack int max maximum number elementspublic stack max  bool return  bool push const bool pop template class int bool stack push const max  arr return true return false template class int bool stack pop  arr return true return false template parameters thestacktemplate template parameters template parameters729multiple template parameters define templates multiple parameters class template template class class class demo parameters uandv class demo defined pair vtypes template parameter type normal function parametersare permissible pointers references template class int class stack defines class template stack parameterized type tandan integer opposite parameter nto size arrayused represent stack major advantage number array elements object template class instantiated objects created allocating dynamic storage simplifies definition stack template copy constructor assign ment operator destructor longer defined restrictionstwo restrictions apply template parameters type parameters modifiedthey floating point types expression invalid definition opposite error changing template parametereven doubletype template parameters permissible template class double error class demo pointers references floating point types template class double class demo chapter templates mini_t cpp passing arguments function templates include iostream namespace std template class min return int main short   cout endl cout smaller min endl double z1   float z2  f cout nthe smaller min z1 z2 endl double z3   cout nz1 z1 z3 z3 endl cout smaller min z1 z3 endl return  template arguments sample program template arguments731passing arguments template instantiated template argument passed argument typesmust match types template parameters implicit type conversions floattodouble performed thecase template function min arguments thesame type callexample float   double   min lead error message template function defined theprototype void min float double restrictionsthere restrictions template arguments type names template parameter reference global static object bepassed template argumentif template parameter pointer address object function global scope statedif template parameter reference pointer constant expressions template arguments int cnt  error typedef stack short cnt shortstack intconstant permitted template argument statement provokesan error strings oktoberfest invalid template arguments theirscope static global template class char class demo globally defined strings instantiation examplechar str oktoberfest globaldemo double str income chapter templates template class min return include cstring const char min const char s1 const char return strcmp s1  s1 include cstring template const char min const char s1 const char return strcmp s1  s1 specialization function template min specializing function template strings ansi specialization ansi standard differ template functions normal functions definition function template function generated function template compiler output error message duplicate definition ansi standard syntax defining specializations specialization733motivation template function instantiated statements contained func tion executed template function exchange objects ofthe class copy constructor assignment defined class operators template function defined thecurrent argument type function template min determines lesserof arguments instantiated operator defined argument type executable instructions reasons prevent functiontemplate instantiated type generic approach defined template return typethere efficient approaches types statementexample minstr min vivian vivian returns lower addresses strings stored defining specialization cases sense specialize template function definition function separate definition overload template function technique demonstrated opposite function template min specialization defined char type older moremodern compilers support current ansi standard template function replaced specialization version beexecuted function order compiler function guarantees function template specialization defined specific type specialization called applies methods class template function templates ofcourse template class created methods function template instantiated error chapter templates quadmat defines template quadmatrix represent quadratic matrices include iostream include stdexcept namespace std template class int cnt  class quadmatrix private mat cnt cnt public int dim const return cnt operator int throw out_of_range  cnt throw out_of_range matrix range elsereturn mat const operator int constthrow out_of_range  cnt throw out_of_range matrix range elsereturn mat friend quadmatrix operator const quadmatrix const quadmatrix default arguments templates class template representing quadratic matrices default arguments templates735setting defaultsyou define default arguments template parameters function parame ters argument required instantiate template missing default default values template definition declare tem plate module class template quadmatrix class template defined opposite quadmatrix represents quadratic matri ces subscript operator overloaded access matrix elementm matrix iis valid range standardout_of_rangetype exception thrown default values chosen create matrix mforintvalues  rows columns definition typedef quadmatrix intmat intmat omit angled brackets quadmatrixtype exist quadmatrixis template definitionexample typedef quadmatrix double doublemat doublemat dm defines matrix dmofdoublevalues  rows  columns rulesthe rules apply default arguments templates default arguments offunctions declare default argument parameter define default values remaining parametersif template argument default argument declared dur ing instantiation remaining template arguments chapter templates expins_t cpp tests explicit instantiation include iostream include iomanip namespace std include quadmat explicit instantiation template class quadmatrix long double  int main quadmatrix long double  int  dim int  dim cout setw  cout endl catch out_of_range err cerr err endl return  explicit instantiation sample program class template quadmatrix explicit instantiation737in addition implicit instantiation templates occurs template func tion called explicit instantiation design libraries template functions classes application programs syntaxexplicit instantiation achieved followingsyntax template declaration wheredeclarationcontains template template arguments explicit instantiation class template stackwould performed template class stack long double  declaration creates template class stack long double  maxi mum  long doubletype elements function templates instantiated explicitly template short min short short creates template function shorttype function template min ansi instantiation ansi standard additional technique explicit instantiation offunction templates template arguments stated angled brackets follow function function called min long case template function min longtype generated advancedsyntax function templates supported compilers explicit instantiation function templates extends usage function templates parameterized types derived function arguments function templates defined function parametersfunction templates defined function parameters template parameters exercises chapter templates left sorted originally consists element arrayelement note exercisesinterpolation search elements numerical array assumed unique sorted ascending order compared array element position expected searched thirds lowest highest subarray element probe thirds lowest highest subarray required lesser array element expected position search continued left subarray binary search search continues subarray expected position expin array vcan calculated keyis required beginis lowest endis highest thecorresponding subarray applies double temp double key vp temp vp vp temp temp   exp int temp insertion sort algorithm technique divide array left sorted unsorted subsequent element unsorted array selected array long greater array element starting left subarray element shifted position smaller array element selected element inserted vacant position   outgraphic exercises739exercise  define function template interpolsearch ele ment sorted numeric array array elements type template parameter function template parameters searched typet pointer array element number array ele ments function template returns element array corresponds searched  array implement function template technique opposite algorithm interpolation search store function tem plate definition header file search define function template insertionsort sorts numeric array ascending order array elements type tem plate parameter function template parameters pointer array element number array elements return define function template display display numeric array screen function template parameters pointer array element number array elements return function templates interpolsearch insertionsort display define template functions doubleandshorttypes define array doublevalues array shortvalues write mainfunction creates calls template function insertionsort intanddoubletypes display sorted arrays add template function search mainfunction callsearch passing values exist exist array chapter templates class floatarr conversion functions private float arrptr dynamic member int max maximum number reallocate storage int cnt current number elementsvoid expand int size function enlarge array public floatarr int  floatarr int float val floatarr const floatarr src floatarr floatarr operator const floatarr int length const return cnt float operator int throw badindex float operator int const throw badindex void append float val void append const floatarr floatarr operator float val append val return floatarr operator const floatarr append return void insert float val int pos throw badindex void insert const floatarr int pos throw badindex void remove int pos throw badindex friend ostream operator ostream const floatarr exercises class floatarr defined chap   exercises741exercise  define class template array represent array maximum nelements type attempting address array element invalid lead exception badindex defined error class thrown space left insert element array exception outofrangetype thrown define error class outofrangewithout data members error class badindex defined exercise  chapter  change existing floatarrclass class template array use255as default parameter nof class template allocates memory array statically define default structor constructor initializes number array ele ments define copy constructor destructor assignment operator access methods define size length methods size method returns maximum number array elements length method returns current number elements array define methods inserting deleting elements defined floatarrclass methods voidreturn type throw exceptions type badindexand oroutofrange additionally overload shift operators subscript operator throws badindextype exceptions test class template array doubleandinttypes define arrays types insert delete elements arrays output elements array modify test program adding array objects class type daytimeclass exercise  chapter  purpose test array template defining array  daytimeclass objectsand inserting objects display objects screen solutions chapter templates solutionsexercise  interpol cpp template function interpolsearch include iostream namespace std template class longinterpolsearch const key vp int len int expect  len  double temp  array key vp key key vp rangereturn  key vp key vp key notreturn  range temp double key vp vp vp temp temp   expect int temp vp expect key key return expect vp expect key expect  expect  return  template class voidinsertionsort vp int len temp int  len temp vp element int shift greater elements   vp temp vp  vp vp  temp insert solutions743template class voiddisplay vp int len cout nthe array endl int  len cout vp    cout endl cout endl cin arrays testing short sv       double dv            int main cout ninstantiation type short endl display sv  insertionsort sv  cout nafter sorting display sv  short key cout narray element cin key cin sync int pos interpolsearch key sv  pos  cout nfound endl cin elsecout nnot endl cin cout ninstantiation type double endl display dv  insertionsort dv  cout nafter sorting display dv  double dkey cout narray element cin dkey cin sync pos interpolsearch dkey dv  pos  cout nfound endl cin elsecout nnot endl cin return  chapter templates exercise  array class templates represent arrays ifndef _array_h_ define _array_h_ include iostream include iomanip namespace std class badindex private int public badindex int int getbadindex const return class outofrange data members template class int  class array private arr array int cnt current number elementspublic array cnt  array int const val int length const return cnt int size const return operator int throw badindex  cnt throw badindex return arr const operator int const throw badindex  cnt throw badindex return arr solutions745array operator float val throw outofrange append val return array operator const array throw outofrange append return void append val throw outofrange void append const array throw outofrange void insert val int pos throw badindex outofrange void insert const array int pos throw badindex outofrange void remove int pos throw badindex template class int array array int const val cnt int  cnt arr val template class int void array append val throw outofrange cnt arr cnt val elsethrow outofrange template class int void array append const array throw outofrange cnt cnt space throw outofrange int count cnt thisfor int  count arr cnt arr chapter templates template class int void array insert val int pos throw badindex outofrange insert array  val pos template class int void array insert const array int pos throw badindex outofrange pos  pos cnt throw badindex invalid position cnt cnt throw outofrange int cnt  pos shift uparr cnt arr starting pos  cnt gap arr pos arr cnt cnt cnt template class int void array remove int pos throw badindex pos  pos cnt int pos cnt  arr arr  cnt throw badindex pos template class int ostream operator ostream const array int width save field widthfor int  cnt width arr endl return endif solutions747 daytime class daytime relational operators operators prefix postfix operators chapter  array_t cpp testing class templates array include array include daytime include cstdlib include iostream include iomanip namespace std typedef array int  intarr typedef array double doublearr typedef array daytime  daytimearr int main const doublearr    doublearr kd cout nthis constant array doubles cout setw  kd cout nan array doubles assignment endl cout setw  kd kd remove  delete element position  kd append   add element kd append   repeat cout nthis modified array endl cout setw  kd chapter templates intarr vi int   vi append rand  cout nthis array int values cout setw  vi vi vi cout nand append cout setw  vi intarr ki vi cout nthis copy array cout setw  ki daytimearr array daytime objects daytime temp   cin temp break append temp cout nthe array objects type daytime   cout setw  endl catch badindex err cerr nindex err getbadindex invalid exit  catch outofrange cerr narray exit  return  containersthis chapter describes standard class templates represent containers efficient management object collections includesequences lists double ended queues container adapters stacks queues priority queues associative containers sets maps bitsets discussing manage containers sample applications bitmaps raster images routing techniques chapter  chapter containers container types sequences associative containers arraysstacksqueues sets mapsbitsets sequencesassociative containerscontainers container types751what container containers store objects type provide operations whichthese objects managed operations include object insertion deletion retrieval memory allocated containers dynamically runtime containers provide safe easy manage collections objects standard library class templates container managementin containers library classes categorized sequential containers orsequences objects arranged sequentiallyand access object direct sequentialassociative containers objects generally organized managed ina tree structure referenced keys sequencessequential containers distinguished operations defined areeither generic restricted restricted operations appending tainer constant runtimes runtime proportional fixed period time depend number objects container sequential containers arrays provide operations arrays increase decreasein size dynamically contrast arraysqueues managed fifo principle firstelement inserted removed firststacks managed lifo principle lastelement inserted removed associative containers bitsets associative containers comprisesets quick access objects sortablekeys maps maintain efficient object key pairs called bitsets represent bit sequences length andprovide bitwise operators bits manipulated chapter containers sequencesoperations sequences class templatetime needed insert remove objectvector class class allocator allocator constant middle linear positions constant constant middle linearlist class class allocator allocator deque class class allocator allocator container adaptersclass templateinsertiondeletion stack class class container dequeue endat queue class class container dequeue endat beginningat beginningpriority_queue class class container vector compare prioritybasedsequences header filescontainerheader file vector allocator list allocator deque allocator stack container queue container priority_queue vector list deque stack queue queue container compare sequences753representing sequences containers library defines called container classesrepresenting containers theseare class templates parameterized type tof objects managed basic class templates defined sequences container class vector allocator supports standard array opera tions direct access individual objects subscript operator quick appending deletion container time insertion deletion middle container linear proportional number objects stored container container class list allocator functionality typi cal double linked lists includes quick insertion deletion position general list operations sorting merging defined container class deque allocator double ended queue pronounced deck direct access subscript operator normal array offers optimized insertion deletion tainer operations middle container linear runtime template parameter storage allocation performed thestorage management represented called allocator class parameterizedby object type enables dynamic memory allocation objects type thedefault template parameter standard allocator classallocator newanddeleteoperators allocate release memory adapter classesthe basic sequence classes construct called adapter classes adapter classexpects sequence template argument stores sequence protecteddata member opposite adapter classes priority_queuetemplaterepresents priority queues relationship keys manage priori ties defined comparator class compare default templateparameter predefined comparator class lesser oper ator type chapter containers outputs list integers include list include iostream namespace std typedef list int intlist int listint display const intlist int  counterlist int const_iterator pos iteratorfor pos pos pos cout pos endl cout endl return iterat_t cpp outputs array accounts include vector include iostream namespace std include account typedef vector account accvec account vectorvoid display const accvec accvec const_iterator pos iteratorfor pos pos pos pos display cout endl iterators iterating lists iterating vectors iterators755positioning iterating containers object container occupies specific position stored allowyou work objects container positions objects container accessible mechanism read write access object position andmoving position object position object container situation familiar experience working pointers giventhatiis element array address arrayelement address array element iterators introduced provide uniform model positioning iter ation containers iterator regarded abstraction pointer iterator types types iterators context bidirectional iterators shifted increment operator decrement operator operators toprovide write read access objectsrandom access iterators bidirectional iterators additionallyperform random positioning subscript operator overloaded thispurpose operations defined pointer arithmetic addition traction integers comparison iterators defined container classes vector anddeque random access iterators thecontainer class list bidirectional iterators iterator classes types iteratorandconst_iteratorare defined classes rep resent iterators iterator belonging classes reference constant constant objects methods andend defined method accessesthe position accesses position afterthe container object containers belong adapter classes offer restricted access beginningor iterators walk chapter containers sortvec class template sortvec representing sorted vector include vector class template vector include functional comparator class namespace std template class class compare class sortvec public vector public sortvec sortvec int const void insert const obj sorted orderint search const obj void merge const sortvec sortv_t cpp tests template sortvec include sortvec typedef sortvec int intsortvec int main intsortvec default constructorv insert  insert  insert  int search  insert  insert  merge return  array elements     declaring sequencesthe derived container class sortvec compare container class sortvec declaring sequences757constructors vector list deque container classes vector list dequedefine constructors copyconstructor sequences created functionality classes discussed vectorclass anexample statementexample vector account declares container vfor objects accounttype insertindividual objects container declare container predefined number ofobject copies fraction   vector fraction cont  defines container contwith  fractiontype objects fills theobjectx argument supplied  objects initialized bythe default constructor finally initialize container container youmust state range iterators vector double arguments firstandlastare iterators existing container tainer initialized objects range includes theobjects positions includingfirst excludinglast constructors adapter classes default constructor copy constructor defined adapter classes waitis predefined queue container class queue double fol lowing statementexample queue double wait creates queue object waitto initialize opposite derived container class sortvec rep resent sorted dynamic arrays class parameterized type tof array elements template parameter comparator class represents comparison cri terion sorting chapter containers methodeffect void push_back const addsx thesequence addsx firstelement sequence insertsx positionposand returns position ofthe newly inserted element insertsn copies afterpositionpos returns thenumber inserted elements inserts elements fromrange afterpositionpos thesequence void push_front const iterator insert iterator pos const size_type insert iterator pos size_type const void insert iterator pos inputiterator firstinputiterator method insert adds object vector reorganizes ascending order template class class compare void sortvec compare insert const obj sortvec iterator pos temp push_back obj add pos pos positionwhile pos sort obj pos swap temp pos temp pos pos obj break inserting sequences inserting methods methodinsert derived container class sortvec inserting sequences759insertion methods methods defined container classes vector deque andlistpush_back insert endinsert insert position additionally method listanddequeclassespush_front insert method defined vectorclass theinsert method overloaded versions allowing insert sin gle object multiple copies object object copies container containers vandwthe followingexample insert inserts objects container vin objects container canof assigned container type assignment operator overloaded containers operation runtime behavior thepush_back andpush_front methods preferable account theirconstant runtime insertion oneobject insert method stant runtime listclass linear vectoranddequeclasses time increases proportionally number objects tainer dissimilar runtime behavior methods ascribed implementationof container classes containers listtype represented bydouble linked lists element possesses pointer preceding fol lowing element extremely quick inserting position container classes vectoranddequeare represented arrays inserting themiddle shifting objects container place object runtime increase proportionally number objects tainer holds insertion adapter classes insertion method adapter classes push stacks queues push appends object constant runtime insertion objects priorityqueues depends priority object runtime linear chapter containers sortvec method search seeks object objin vector binary search algorithms object objis compared element middle vector objis smaller middle element belong left half half vector repeat process comparing objwith middle element repeatedly halving size interval interval consists single point obj belongs algorithm logarithmic time fast template class class compare int sortvec compare search const obj int   mid mid   search left half obj mid mid  mid half obj return return size accessing objectsmethodsearch container class sortvec accessing objects761thefront andback methodsaccess individual objects container classes vector deque listcan beperformed methodsfront access element andback access element methods return reference object question double   saves object container vin variable zand overwrites objectby1  access indicesthe subscript operator overloaded vectoranddequeclasses permit theuse indices access objects container positive integer type size_type    st objectgiven posis iterator references object container expres sionv  equivalent pos  subscript operator ensure exceedthe valid range access method throw exception indexis range    theat method throws exception standard error class out_of_rangeif anerror occurs subscript operator method defined listclass manipulate tenth object container walk container sequentially position access objects adapter classes method defined access element highest priority theelement stack adapter classes priority_queueandstack thequeueclass comprises method access firstelement chapter containers sortvec method merge merges argument vector vector template class class compare void sortvec compare merge const sortvec compare sortvec temp temporary vector sortvec iterator pos iteratorint n1   copy smaller object vector temp n1 size size pos n1 temp push_back pos n1 elsetemp push_back append rest n1 size temp push_back pos n1 size temp push_back temp length capacity methodmerge container class sortvec length capacity763the identifying features container areitslength number objects held container andthecapacity maximum number objects container store length container insertion deletion capacity doesnot length containerthe length container discovered size method methodreturns integer size_typetype fraction   vector fraction  vector fraction size_type size variable szcontains in case length container  methodto discover container method returns truein case cont methods size andempty defined container classes usetheresize method change length container cont resize length increased nprovidedn size true decreased size size length increased ð size copies object xare appended thecontainer argument case default constructorfor type tobject called capacitythe capacity container checked max_size method size_type cont max_size return depends memory object size size andempty methods defined adapter classes cannotdiscover capacity object resize change length chapter containers prior_t cpp testing priority queue include queue include string include iostream namespace std class parcel private unsigned int prio prioritystring info public parcel unsigned int const string prio info access methods overloaded operators friend bool operator const parcel const parcel return prio prio friend ostream operator ostream const parcel prio info endl return int main priority_queue parcel push parcel  bob insertpq push parcel  peter push parcel  susan cout endl output pop delete return  output  bob  susan  peterdeleting sequencesa priority queue deleting sequences765deletion methodsthe methods deleting objects container classes vec tor deque list pop_back deletes object containererase deletes object position deletes objects ina rangeclear deletes objects container method additionally defined dequeandlistclasses pop_front deletes object container method return pop_back method thepop_back andpop_front methods preferable account theirconstant runtimes erase method delete object orin middle container constant runtime container classlist runtime linear vectoranddequeclasses objectsmust shifted container gap left deletion deleting ranges objectswhen erase method delete objects range positionof element deleted position afterthe object deleted arerequired arguments cont erase cont  cont deletes remaining objects container starting position  theerase method returns position object range ofobjects deleted deletion adapter classes method deletion adapter classes pop thatwaitis queue queuetype statementexample wait pop deletes element queue case stack pop deletesthe element stack priority queues object highest priority runtime constant cases chapter containers list_t cpp tests list operations include list include cstdlib include iostream namespace std typedef list int intlist int display const intlist int main intlist sls int   push_back rand    ls push_back     reverse     sort    for   sls push_back rand     insert object sls intlist iterator pos splice pos sls sls     display sls   sort     sls sort   merge sls       ls unique     return  list operations sample program list operations767the container class listcomprises methods list operations defined inother container classes aresorting inverting listsmerging sorted listssplicing lists sorting inverting splicing lists container listtype list containerfor short sorted tosort assumes operator defined class sort sortsthe container ascending order reverse method invert list container reverse theorder objects container originally element tainer element themerge method merge list containers ls1andls2are sorted list containers callexample ls1 merge ls2 creates sorted list ls1 objects comprise original objects ls1andls2 thels2container operation splice operations splice operationsinsert objects list container position anotherlist container remove original container transfer container container ls1 splice pos ls2 inserts container ls2in ofpositionposinls1 ls2is emptiedby statement statementexample ls1 splice pos1 ls2 pos2 inserts element position pos2inls2beforethe element position pos1inls1and deletes ls2 transfer container fourtharguments starting position splice operation insert position afterend chapter containers container classrepresenting set class class compare class allocator allocator collections objects withunique keysmultiset class class compare class allocator allocator collections objects withequivalent keys multiple copies key valuemap class key class class compare class allocator allocator collections objects keypairs keys uniquemultimap class key class class compare class allocator allocator collections objects keypairs equivalent keyscontainer classheader file set compare allocator multiset compare allocator map key compare allocator multimap key compare allocator set set map map associative containers container classesassociative containers header files associative containers769sequences store objects linear order searching object require alinear runtime objects deal signifi delay major disadvantage large collections objects representing sets maps associative containers classes represent sets maps opti mize runtimes manage objects called heaps trees minimumheight operations performed sortable keys characteristics heap object smallest key stored heap insertion deletion search operations sets maps performed log arithmic runtimes response proportional log nis num ber objects container logarithmic function grows slowly response phenomenally quick unique ambiguous keys set object key refer embedded keys relation ship objects defined reference key sets unique keys define multisets multiple objects key maps manage key object pairs key embedded inthe object stored separately type key key andtis objecttype relationship objects defined keys maps unique keys define multimaps whereseveral objects exist single key associative container classes opposite classes represent sets multisets maps mul timaps template parameter compareis comparator class allocatoris anallocator class parameters default values context sequences methods andend defined access positions asso ciative container classes return position element position element chapter containers set_t cpp tests sets multisets include set include cstdlib include ctime include iostream namespace std typedef set int intset define type andtypedef intset iterator setiter iterator typetypedef multiset int intmultiset multiset andtypedef intmultiset iterator multisetiter iteratorint main intset lotto create set setiter pos bidirectional iteratorsrand unsigned time null lotto size  insertlotto insert rand  cout lotto numbers endl pos lotto pos lotto pos cout pos cout endl endl intmultiset create multiset multisetiter mpos bidirectional iteratorfor int   insertms insert rand  cout  random numbers   endl mpos mpos mpos cout mpos cout endl return  sets multisets sample sets multisets sets multisets771sets multisets efficient management object collections sortablekeys insertion deletion search operations performed logarith mic runtimes keys parts objects keys data members rela tionships defined class lesser relationship defined purpose operator loaded class declaring sets multisetsthe container classes setandmultisethave constructors creating tainers default constructor create sets multisets length of0 constructor inserts objects range iterators set ormultiset typedef set account accountset accountset myset range iterators existing container objects areofaccounttype copy constructor defined existing containerof type initialize container inserting deleting theinsert method insertions insertion individualobjects multiple objects range iterators myset insert account  tom  contrast multisets object inserted set exist container erase method delete objects specifythe object position container myset erase myset deletes element accountsetset delete objects container statement myset erase myset myset erasing container clear method calling container size method returns number ofobjects container chapter containers mulmap_t cpp testing multimaps include map include string include iostream namespace std typedef multimap int string multi_map typedef multi_map iterator iterator int main multi_map create multimap iterator pos iterator insert insert pair int string  bob insert pair int string  sarah insert pair int string  diana insert pair int string  lisa cout multimap endl pos pos pos cout pos pos endl cout endl pos  search pair key if pos output pair cout pos pos endl int key  determine quantity pairs key  cout count key pairs key key endl return  maps multimaps multimaps maps multimaps773representing pairs keys objects maps multimaps store pairs sorted keys objects key iden tify object stored separately object comparison criterion applied keys standard library class template pair const key withtwopublicdata members firstandsecond default constructor copy structor represent key object pairs template parameter key key typeand object type data member firstis store keys andsecondstores object posis position object map multimap referencethe key pos object pos maps multimapsthe container classes mapandmultimapcontain constructors function ality setandmultisetclasses create container lengthof0 objects existing container initialize container copyconstructor defined methods insert insertion erase andclear deletion havethe interfaces container classes setandmultiset methodssize discover length container ascertains container defined thefind method key object pairs expects key argu ment mapandmultimapclasses return position thecontainer case multimaps objects key returns position key search fails returned asa pseudo position count method discover number key object pairs agiven key container method expects key argument method returns0or1for maps depending pair exists case multi maps return greater  chapter containers bitmap defines template bitmap representing raster images ifndef _bitmap_ define _bitmap_ include bitset include stdexcept namespace std template int class bitmap public bitset private int lines cols number rows columns int current cursor positionint ai current bitsetpublic bitmap int int void int int void draw int int template int bitmap bitmap int int reset set bits lines cols rows columnsax   ai  current position throw invalid_argument invalid argument template int void bitmap int int  lines  cols ai cols throw invalid_argument invalid argument continuedbitsetsrepresenting raster images bitmaps bitsets775declaring bitsetsa bitset stores bit sequence length storage mass bit codeddata raster images minimum memory container class bitset functionality needed manage bitsets template parameter nis length bitset maximum number bitsstored default constructor create bitset initial values bit pattern initialize bitset bit pattern defined unsigned longvalue string string  bitset  string scan   characters character stringwill bit   bit position  character string bit position  remaining bits padded up length applies unsigned longvalue initial ization purposes notes sample program opposite container class bitmap defined opposite representsimple monochrome raster images pixel picture element represented bit abitset bit set pixel screen illuminated white turned black number pixels represented horizontally vertically defined bythe resolution   typical screen resolution   typical res olution laser printers  dpi   size nis theproduct number pixels horizontal vertical direction container class bitmap derived bitset bypublicinheri tance class comprises bitset publicbitset management methodsit inherits additional data members store number rows columns pixels current cursor position current bitset methodmoves cursor position coordinates draw method drawsa straight current cursor position point coordinates chapter containers bitmap addition bresenham algorithm template int void bitmap draw int int  lines  cols int savex savey draw ascending direction swap int temp temp temp temp int int xinc  yinc incrementif  gradient  yinc  decrement yelse yinc  increment int count number pixels setint  measurement deviation count  ai cols bitsetset ai set bitif  pixel yinc directionelse xinc direction savex savey current cursor positionai cols current bitset throw invalid_argument invalid argument endifbitsets continued bresenham algorithm bitsets continued manipulating bits container class bitset andset methods readingand writing individual bits methods expect bit position argument additionally pass or1to setmethod writes bitposition stated default  set method arguments allthe bits bitset setto  contrast reset method deletes bits bits inverted callto flip method  bit bitset set and  bit set to0 bits specific coordinates referenced subscript operator abit position number andn  expect bitwise operators bit manipulation bitoperators globally overloaded bitsets operator functions thenot operator shift operators operators compound assign ments implemented methods container class bresenham algorithm opposite draw method draws current cursorposition pixel pixel coordinates bresenham algorithm applies incremental techniques starting current cursor position sets neigh boring pixel direction increment decre ment coordinate  avoids time consuming floating point arithmetic required solve linear equation drawing place positive axis starting target pointsof straight swapped difference coordinates starting target points aythen determines increment ordecrement  direction drawing neighboring pixels creates staircase deviates thestraight variable represents deviation ofdis negative growing direction pixel drawnalong direction deviation corrected adding dbecomes positive pixel drawn direction deviation cor rected exercise chapter containers  queues created queues filledusing hot potato algorithm elements randomly selectedqueues removed output queues  queue      queue      queue            queue    queue         queue    queue         queue     queue        routerexits  queue2 queue3 queue4 queueentranceexercisehot potato algorithm test output exercise779exercise data communications remote computers messages transmitted viamultiple subnets route target computers called routersstore messagesin queues transmitting target routers assume responsibility route discovery generally referring complex address tables routing techniques including simple algorithm address tables called hot potato algorithm router simply disposeof incoming messages sending incoming message outgoing shortest queue define container class vecqueue parameterized messagetypetto represent scenario class comprises array queues typevector queue data member store current number ofqueues array constructor creates number queues passed argumentfor array additionally declare methodssize push andpop overload size method versions argument passedto method returns current number messages queues argu mentiof type inthas passed method returns current number ofmessages queue additionally overload andempty int methods return true queues queue areempty thepush method hot potato algorithm append message passedto shortest queue thepop andpop int methods simulate assignment ofmessages lines retrieval removal messages queues exercise method pop retrieves message randomlyselected queue deletes returning message method pop int retrieves message queue deletes returning message test class declare container type vecqueue int yourmainfunction message represented number loop insert dom numbers   container relay lines display remaining messages screen opposite calling pop int method solution chapter containers solution vecqueue defining class template vecqueue represent vector queues ifndef _vecqueue_h define _vecqueue_h include vector include queue include cstdlib srand rand include ctime time namespace std template class class vecqueue private vector queue size_t number queuespublic vecqueue size_t size_t size const current number elements size_t size int const number elements return size queue bool const return size  bool int const return size  void push const hot potato algorithmconst pop removes element randomly choosen queue const pop int removes element queuetemplate class vecqueue vecqueue size_t constructor  resize srand time null solution781template class current number elements size_t vecqueue size const size_t count  int  count size return count template class insert argument thevoid vecqueue push const shortest queue int small  determine int  shortest queue size small size small small push insert template class retrieve deleteconst vecqueue pop element randomly choosen queue static temp int i0 i0 rand queue retrieve delete thetemp element pop break  queue i0 return temp template class retrieve delete const vecqueue pop int element queue static temp  retrieve elementtemp andv pop delete return temp endif _vecqueue_h chapter containers solutions continued hotpot_t cpp simulates hot potato algorithm vector queues include cstdlib srand rand include ctime time include iostream include iomanip namespace std include òvecqueue hó int main const int nqueues  vecqueue int  vector  queuescout nqueues ò queues created ó endl srand time null cout ò nthe queues filled ò òusing hot potato algorithm ó endl int   insert  elementsvq push rand  cout ò nsome elements randomly selected òòqueues removed ó endl   remove  elementsvq pop cout ò nto output queues ó endl retrieve removefor  nqueues display remaining elements cout ò nó  ò queue ò size  cout setw  pop cout endl return  this appendix containsbinary number representation preprocessor directives pre defined standard macros binding functionsoperator precedence table ascii code table screen control characters appendix appendixbinary numbers numbers program divided groups depending type integersof char signed char unsigned char short unsignedshort int unsigned int long unsignedlong types andfloating pointnumbers float double longdouble types integral floating point numbers represented internally binary numbers sequences   values formats representing integral floating point numbers differ bit pattern integer interpreted dif ferently floating point number computer representing signed unsigned integers binary format integers basically char short int andlongtypes differs number bytes type andwhether number interpreted signed unsigned bit pattern positive integer represented base  power series signbit0additionally number positive case signedtypes number can represented power series           binary representation number assigned chartype  bits thusas complementis represent negative number   complement  iscomputed bits inverted number  producing bit pattern      sign bit complement compute absolute negative num ber complement yields  sign bits required unsignedtypes bit representfurther positive numbers doubling range positive numbers repre sented table binary formats signed unsigned integral  bitvalues bit pattern negative number interpreted unsignednumber valueof number bit pattern1111 of number  yieldthe unsignedvalue                that number  representing floating point numbers represent floating point number number broken asign mantissa power exp base  exp0000                binarysigned decimalunsigned            binary numbers785 memory values expis assigned ieee institute elec tronics electronical engineers format type float  bit organ ized normalized form floating point numbers unambiguous mantissa hasa greater equal   exception  mantissa       the digit mantissa  stored power storedalong bias bias applies floattypes power eof floating point number represented internally  memory reserved mantissa defines accuracy memory reservedfor power defines range values floating point number platform dependent ranges length mantissa smallest orlargest represented programs discover ranges cfloatorclimitsheader files instantiation numeric_limitsclass template type inquestion query platform dependent ranges method calls bit position signbit  vexpm appendix preprocessor directives define directive definedirective define symbolic constants macros syntax define parameterlist substitutetext preprocessor replaces nameorname parameterlist withsubstitutetextthroughout program substitutetextis stated preprocessor willdelete symbolic constant macro program code chapter  symbolic constants macros define bufsiz  symbolic constant define cls cout  j macro define max macro operator macro parameter substitute text preceded operator stringizingtoken macro called argument set quotes string constantis formed characters current argument define title callcout title catalog preprocessor expand string catalog concatenated catalog characters represented argument define path logid subdir user logid bin cmdwith path smith games string user smith bin games produced operator macro defined character sequences concatenated substitutetext token operator macro called parameter preceding token isreplaced argument token leading trailing white space character removed preprocessor directives787 define debug cout ncallingdebug  generate statementcout arguments macro parsed symbolic constants macros ifthe result concatenation symbolic constant macro text replacement performed undef directive change definition symbolic constant macro program runtime remove original definition undefdirective syntax undef namedo supply parameter list parameterized macros definedirective redefine macro define bufsize  undef bufsize define bufsize the include directive includedirective copies file program includedirective replacedby content file syntax include filename include filename file surrounded file looked directo ries defined environment variable include file stated quotes file looked current direc tory namefilenamecan include path case file looked inthe directory stated supply file symbolic constant substitute text bein quotes square brackets case appendix include iostream include project version  define myproj_h version1 define myproj_h version2 endif include myproj_hthe elif endif directives elif endifdirectives compile parts sourcefile ignore directives conditional compilation directivesforthis reason syntax expression1 text1 elif expression2text2 elif expression text elsetext  endifeach ifdirective terminated endifdirective multiple elifdirec tives occur elsedirective occur preprocessor evaluatesexpression1 expression2 sequence ifan expression yields true  codefor expression processed expressions true elsedirective executed directive isomitted code processed expression1 expression1 constant expressions integral typesand cast operator compilers thesizeofoperator text source text comprises preprocessor directives statements programs text processed preprocessor execute directivesbefore passing expanded source code compiler compilation code preprocessor processed removed source preprocessor directives789 defined operator thedefinedoperator check symbolic constant macro hasbeen defined syntax defined operator returns than0if valid definition nameexists thevalue0in cases definition created definedirective remains valid removed byan undefdirective substitute text namein definedirective ismissing definition valid thedefinedoperator ifor elifdirectives exampleexample defined version definedoperator return preprocessor expres sion ifdef ifndef directives perform check ifdefand ifndefdirectives syntax ifdef ifndef namethe ifdefdirective returns than0ifnameis defined  contrast ifndefdirective ensures defined thatis thatnameis undefined returning ifnamehas defined valuein case defined state defined cond directive compiler numbers source file display errors discoveredon compilation linedirective change numbers thefile syntax new_number filename position count new_number filenameis stated willbecome file compiler refers issuing error messages file quotes new_numbermust integral constant  genprog1 cpp number file stated symbolic constants appendix version  define newnumber  define newnumber  newnumberthe linedirective program generators compiling code produce program case error messages message refer file original code current number file accessed standard macros__line__and__file__ cout current number __line__ endl file __file__ endl error directive errordirective preprocessor errors syntax error errortext message errortextis issued compilation terminated defined version version  error version error version  needed endif include version symbolic constant versionis defined  followingerror message output version version  needed pragma directive pragmadirective compiler dependentand define pre processor commands specific compiler syntax pragma commandany compiler supports pragmadirective support mand pragmasimply ignores command pragma pack  directive microsoft compiler align components class bytewise avoiding gaps options pack  andpack  preprocessor directives791 pre defined standard macros ansi standard pre defined standard macros names andend underscores __line__returns number __line__macro thefirst source code  numbering modified linedirective __file__returns source file __file__macro modified linedirective __date__returns mmm yyyyformat mmmis anabbreviation month ddis day month yyyyisthe year jul   __date__refers point time preprocessor startedprocessing source macro returns result position source code __time__returns time string format mm hhrefersto hours mmto minutes ssto seconds    __time__refers point time preprocessor startedprocessing source macro returns result position source code __stdc__is defined source code ansi keywords __cplusplusis defined source code compiled compiler appendix binding functionscalling functions programs functions libraries called program function calls areinterpreted differently compiler expect compiler supply additional binding accessible anextern declaration extern void oldfunc int size informs compiler compiler compile oldfunc function declare multiple functions declare prototypes afterextern curved brackets declared functions aheader file include header file extern block extern include graphic common practise declare extern code header files theninclude header programs defined _cplusplusextern endif prototypes functions defined __cplusplus endifthe symbolic constant __cplusplusis evaluated discover currentcompiler compiler __cplusplusis defined compiler isactive extern block inserted defining functions programs define functions program function expects function argument standardqsort andbsearch functions definition function program encased extern block instructs compiler compile function function binding functions793 include string include iostream include cstdlib namespace std static char city paris london barcelona hollywood static char key york extern int scmp const void const void int main sort cities qsort city  sizeof char scmp city bsearch key city  sizeof char scmp null cout city string key extern int scmp const void s1 const void return strcmp const char s1 const char function scmp passed standard functions bsearch binarysearching qsort sorting quick sort algorithm appendix operators overview operatormeaning arithmetical operators relational operators logical operators assignment operators bit wise operators addition subtraction multiplication division modulus division unary minus operator increment decrement operator equal unequal equal greater greater equal exclusive left shift shift simple assignmentcompound assignment binary arithmetical binary bit wise operator operators overview795 operators overview continued operatormeaning access operators cast operators operators storage allocation operators scope resolution operatorsubscript operator indirection operator class member access operators pointer member operators cast operatordynamic cast operator static cast operator const cast operator reinterpret cast operatorconditional expression commaoperatoraddress operator function namecreate temporary object typetypesizeof operator size type typeid operator type informations allocate storage dynamically object array resp free dynamically allocated storage object array resp type dynamic_cast static_cast const_cast reinterpret_cast newdeletenew delete type sizeof typeid appendix operator precedence table operatorprecedencegrouping                  left rightfrom left rightfrom left rightfrom left rightfrom left rightfrom left rightfrom left rightfrom left rightfrom left rightfrom left rightfrom left rightfrom left rightfrom left rightfrom left rightfrom leftfrom leftfrom left postfix unary binary binary bit wise unary prefix prefix address indirection postfix typeid type dynamic_cast static_cast const_cast reinterpret_cast delete delete type sizeof operator precedence table797 ascii code table decimaloctalhexcharacterdecimaloctalhexcharacter                                                                  a b2c d2e2f30         a b3c d3e3f blank                                                                                a def101112       a b1c d1e1f nul soh stx etx eot enq ack bel ht dle dc1 dc2 dc3 dc4 dc5 syn etb esc appendix ascii code table continued decimaloctalhexcharacterdecimaloctalhexcharacter                                                                    a b6c d6e6f70         a b7c d7e7f bcd efg jklmn qrstuvwx del                                                                       a b4c d4e4f50         a b5c d5e5f defghijklmnopqrstuvwx yz _ascii code table799 screen control sequencesthe escape sequences reflect ansi standard screen control replacethe sign number cases esc acursor lines upesc bcursor lines downesc ccursor characters rightesc dcursor characters leftesc shor esc sfput cursor linezand column sesc ssave cursor position esc uload saved cursor position esc  delete cursor position  delete start cursor position  delete lineesc jclear screenesc opm  attributes normal  switch double intensity  underline monochrome screens  blink  inverse x foreground color x background colorx  blackx  blue  redx  magenta  greenx  cyan  yellowx  white esc c2pchange key assignments key code c1willthen return code enable escape sequences load screen devicedriver windows x place config sys filedevice windows command ansi sys win win  supply ansi screen control characters correspond ing functions based calls offered download appendix literature international standard iso iec  programming languages published byamerican national standards institute york  international standard iso iec   programming languages published byiso copyright office case postale   geneva   stroustrup bjarne programming language addison wesley  josuttis nicolai standard library addison wesley  literature801 intentionally left blank note italicized locators figures symbols                                                            ô nõ   aabstract classes  concrete classes versus deriving  inhomogeneous lists   pointers references pure virtual methods virtual assignment   abstraction access methods  accfileclass append method  accountclass   access methods with constructors defining methods read methods sample class account management file accptrarraypointers accsort function  accuracy   adapter classes access objects  constructors  deletion  insertion addition    addresses array  address operator   address space hash file  algorithm librarywithin standard library alignmentand characters  setting ambiguity  ambiguous keys  american national standards institute ansi ampersand character    analysis andoperator angled bracketsand header files  template arguments stated appendingin arrays  file  list elements  append method    for class accfile applicationsdynamic matrices  index files  inhomogeneous lists  area functiondefining calling  argument pointer  arguments access  arrays command  functions  macros called  objects  objects passed passing pointer arrays  pointers  template  variable number   argvarrayin memory arithmetic operators  binary precedence unary  arithmetic shifts  arithmetic type conversionsand precedence arithmetic types  in assignments arrarrayin memory array elements addressing  arrays   pointers interrelated arraysappending deleting  arguments as array elements classfloatarr class representing  defining  dynamic index dynamic storage allocation  encapsulating  initializing  length  member multidimensional  name address  parameters declared  pointers pointers moved  pointer variables  sample program  as sequential containers  subscript operator arrow operator articleclass  copy constructor ascii code american standard code informa tion interchange  assignment operator   overloading assignments   implicit type conversions   type conversions   virtual   alsocompound assignmentsassociative arrays  associative container classes  associative containers    and bitsets atm asynchronous transfer mode cellsheader  representing at method  autokeyword automatic lifetime  auto objects autospecifier bback methodand container classes vector deque list backslashes bad_cast badbit base classes  accessibility access members  calling methods  conversions references  converting  multiple indirect  virtual  with virtual destructors  base class object assignment  base class pointer conversion basee1class defining base initializers     base subobject begin method  bell laboratories  bias  bidirectional iterators  binary arithmetic operators  binary bitwise operators  binary complement  binary modefile opened binary operator  and operands binary search algorithm  binary trees  binding  bit coded data  bit fields defining bitmapcontainer class  bitmapsraster images represented  bit masks  creating  bit patternsretaining bitsdeleting manipulating bitsets    associative containers  declaring bitwiseandoperator bitwise exclusive oroperator index805 bitwise operators    for bit manipulation  compound assignments  creating bit masks bitwiseoroperator bitwise shift operators   blocks building  block scopeobject defined boolean constants  boolean operator precedence  boolean values output   types booltype   bracesand functions arguments  variables bracketsand parameters macros  syntax descriptions branches breakstatement sample program bresenham algorithm  bubble sort algorithm built types ccprogramming language    standard library header files c characteristics  conventions  developing translating programs  historical perspective  keywords programming language  sample program  standard library        calc function  calling environment  capacities  capital functiondefining carclass accessing members virtual method table case conversionand macros case labels  casting castleclass  cast operator catchblock nested  syntax  catching exceptions cctypeheader file cell base classand derived classes cerrstream  cfloatheader file character character string comparison  character codes   character constants  examples character manipulationstandard macros characters output  reading writing  testing  types character set chararrays char_max char_min charpointers array  sample function chartype    charvectors cin cinstream    class arraysdeclaring  sample program class  abstract   adapter index associative container base  container  defining  derived  dynamic members  dynamic storage allocation example exception  friend  and friend functions  global functions  stream  iterator  multiply derived  naming  operators  alsoabstract classes adapter classes base classes derived classes type conversion classesclasskeyword  class member access operator  class specific constants  class template defining  sequences clear method  for deleting objects container classes  erasing containers  maps multimaps client class climitsheader file clogstream  close method closing files  cls macro cmathheader file collision resolution  collisions  colonsafter labels command arguments sample program comma operator syntax commasfor separating member initializers commentsc program examples comparative operators    comparator class compare function comparisonsresults   compiler  complex declarations operators  rules evaluating complexheader file compound assignments bitwise operators  demonstration operators compound conditions  concatenation operators   concrete classesabstract classes versus conditional expressions compilation  structogram conditional inclusion  conditional operator precedence conio hheader file constants  class specific const_iteratortype constkeyword    constmember object declaration constobjects methodsaccessing  pointers constructor calls  and initialization  sample program in virtual base classes constructors  accountclass for adapter classes  calling   conversion  copy  declaring index807 constructors continued default   defining  initializing  inline definitions  task  vector list deque  alsodestructorscontainer adapters container classes  deleting objects containers  description  length capacity  positioning iterating  types  containers library   contiguous memory space continuestatement control  controlling expression controlpointclass  conversion constructors  conversion functions conversion constructor versus defining  cooked mode  copy constructor effect standard forfloatarrclass  proprietary version cos function counterinitializing count methodand maps multimaps count variable cout   coutstream    coworker class  assignment  cpu registers cstdlibheader file c stringsinitializing specializing function template and string class ctime function ctype hheader file current file position currenttime global function  ddataabstraction    bit coding  class specific  encapsulation    structures data blockstransferring data handlingwith traditional procedural programming data members  and methods  static  dateclass methods daytimeclass operators daytimesample class debuggers  dec alpha workstationsand bit fields decimal constant  decimalsfloating point numbers represented declarations within header files declaring sequences  decmanipulator  decrement operator and bidirectional iterators default arguments  defining  rules setting  templates  defaultconstructors    default destructors defaultlabel default settings flags  definedirective  enumconstants contrasted working  deleteoperator    index delete operator  deletingin arrays  list elements   objects container classes  sequences  depaccclassread andwrite methods  dequecontainer class  constructors derived classes  constructing destroying  defining members standard assignment derived class object assignment derivede1class defining derived type  destructors    calling   declaring  default  defined  inline definitions  matrix class  sample program  alsoconstructorsdirect base class  direct derivation displayerror function display function display method   calling  new version division  dot operators  double ended queue  double quotesand header files  string constant doubletype  do whileloop syntax do whilestatementstructogram downcasting  safety issues  draw methodandbitmapcontainer class and bresenham algorithm dynamically allocated objectsdestroying  dynamic arrays  dynamic binding  dynamic casting dynamic_castoperator dynamic castsusing dynamic data structures  dynamic matrices  dynamic members  classes description  objects created of varying length dynamic memory allocation  for containers dynamic storage allocationfor arrays  for classes eearly binding elementary operations  element functionsfor output fields elsebranch  else ifchainsstructogram switchstatement contrasted embedded keys employeeclass assignment  empty lists  empty method and container classes empty statements  strings  encapsulation   of arrays  static data members index809 method and associative container classes endlmanipulator  enumerationdefinition  sample program enumkeyword eofbit equals signand initialization erase method  for deleting objects container classes errno hheader file error classesdefining  error conditionbacking error handling and exception hierarchies  handler  traditional  errorsavoiding  common  input  messages   parity bit computation recognition  runtime  templates checked escape sequences    decimal values effects euroclass   converting constructors converting function explicit type conversion expressions valid operators  friend functions new testing conversions exception classes defining standard  exception class members  exception declaration  exception handlers  searching exception handling   concept  description  files implementing  nesting  exception hierarchies  exceptions catching re throwing  throwing   exceptions method exception specification list exchange template function executable file  exit code exit function exp function explicit cast constructions  explicit initialization of objects explicit inline methods  explicit instantiationof templates  syntax explicit type conversion    for euro class testing explicitkeyword exponential notation   expressions evaluating  reference type  in switch statement extended codes  external functions  external static object externstorage class   extern ffailbitstate flag iosbase class fail method falsekeyword fibonacci numbers  fibonacci quotients index fieldsinput  output field widthdefining  file accessmode  stream classes file managementand file buffer file operations  files buffers  closing  default settings opening  determining positions  error handling opening  exception handling extensions  names  opening closing    open mode positioning random access     alsoheader files recordsfile scopeobject defined file state  file stream classes  functionality  iniostreamlibrary file streams definition  sample program creating fill charactersspecifying field fill method filter programsusing filters find method and maps multimaps fixedmanipulator fixed point output  flags for open mode file open mode positioning  state  floatarrclass constructors  copy constructor  data members new declarations new methods  prototype operator function  versions     floating point constants examples floating point division  floating point numbers   formatted output inputting floating point types  conversion integral type  conversion larger floating point type  conversion smaller type floating point valuestypes floattype   forloopssyntax formatting options  standard settings formatting flags  formatting operator  forstatement sample program structogram fractionclass simplify method fractionscalculating friend classes  declaring  friend declaration  friend functions  declaring  overloading operators  index811 friendkeyword front method and container classes vector deque list fstreamclass  function blocks  function operator function callsdefined  implicit type conversions   sample program function prototype  example functions  c program calling called conversion  declaring     default arguments defined  defining error checking leaving external  general form  hash  inline  libraries  macros  operator   overloading  and passing  pointers  pointer versions  recursive  return sample  scheme varying arguments signatures  significance static  virtual operator  arguments  return function templates ansi instantiation  defining  explicit instantiation  passing arguments  fundamental types    example  operators  gget function getch function  getline function  getline method  get method  getpassword function  get pointer getput function get pointer gettypeid method global arrays  global functions  from standard library  methodsversus programming global objects defining  global operator functions  defining global variables  gotostatement graphical user interfaces  h relationship  hash files   hash function  hashing  hash key  hash tables  relationship  header files    and associative containers and macros multiple inclusions searching  sequences standard standard class definitions   index heap   hexadecimal constant  hexadecimalsdisplaying  outputting hexmanipulator  hot potato algorithm  iidentical types identifiers declaring  read ieee seeinstitute electrical electronic engi neers ifdefdirective if elsestatementstructogram syntax  ifndefdirective ifstatementsvariables defined ifstreamclass implicit conversion example implicit inline methods  implicit instantiation of template class implicit type conversions    in assignments  avoiding  base class type  function calls  includedirective include files  include folder income method  inconstant increment operator and bidirectional iterators indefinite recursion  indentation  entries representing indexentryclass  indexes     access for array elements  bit manipulation  invalid  representing index file implementing  indexfileclass constructor defined  insert method  indexfilesystemclassinsert andretrieve methods  index versionsof functions  indirect base class  indirect derivation indirection operator   infinite loops  inheritance    data abstraction reusability  derived classes is relation  member access   protected members  redefining members   alsomultipleinheritanceinheritance graphbuilding  inhomlistclasscomplete defining  inhomogeneous listsapplication implementing terminology init initialization and constructor calls  constructors  explicit  member objects  objects    references  virtual base classes  index813 initialization list  and arrays pointers init method  inline functions   definition  global  macros  inline keyword  inline methods  inputerrors  fields  formatted formatted numbers redirecting standard  stream classes streams input function  insertafter method insertion methodsin sequences in vector deque list container classes insertion sort algorithm insert method   of class indexfile  of class indexfilesystem  and maps multimaps  ofsortvecderived container class instances class   instantiationand template definition  template functions  templates  institute electrical electronic engineers  integer promotions  integers computing parity formatted output inputting  types integer types  integral constants examples integral numbersdisplaying integral promotion integral types  conversion floating point type  conversion smaller type  operands bitwise operators integrated software development environment internalmanipulator internal static object  international organization standardization  interpolation search int_max int_min inttype  invalid indexes invalid_argumentclass i input output formatted unformatted   overloading shift operators redirecting  iomanipheader file   iosbaseclassflags defined ios boolalphaflag iosclass ios seekdirtype positioning flags iostreamclass iostreamheader file iostreamlibrary file stream classes isless method islower macro iso seeinternational organization standardiza tionis_open method is relationship   istreamclass   iterating lists iterator classes  iterators types jjump table  kkbhit function index keysand adapter classes  associative containers  hash  representing pairs  sets multisets  unique ambiguous keyword llabelsandgotostatement laborerclass standard assignment layoutand program flow  source files left shift operators  leftmanipulator legibility  length container length_error class length method  less symbols  librariesfunctions lifetimeobject  static lifo principle   lightsclass limitsheader file linear solution  feed line function linked lists  advantages  defining  representing linker listclassclass definition  new methods  listcontainer class constructors  methods deleting objects list elementsappending deleting   inserting middle inhomogeneous list inserting  representing  list operations sample program listsrepresenting  sorting inverting splicing literals  local objects   local variables   locate macro  logarithmic runtimes  logical bitwise operators  logical expressionsexamples logical operators   logical shifts logic_errorexception classes derived  longdouble type  longtype loop body  loops   mmacro definitionvisibility macroscalling arguments  case conversion  character manipulation classification defining  source files within header files  inline functions   redefining  sample program for screen control  macros parameters sample program main function    parameters  structure make utility module management index815 manipulators calling floating point numbers formatting  integers formatting for output fields mapsand associative containers  representing  masks bit  mathematical rulesand expressions mathematical standard functions matherrorexception class math hheader file matrix  matrix class constructor destructor subscript operator member arrays member functions    member initializers  member objects  constant  initializing members redefining  member object  memoryallocating  objects  releasing  union usage memory addressfor object class merge methodfor merging list containers  ofsortveccontainer class message function methods  calling  class template  const const versions   data members  defining  global functions versus name lookup operator functions  operators overloadable positioning  pure virtual  standard  min function template min macro  modifierssigned unsigned modular programming   modules   motorhomemultiply derived class   move methodand bitmapn container class multidimensional arraysdefining  parameters  sample program multimaps using  multiple assignments  multiple indirect base classes  multiple inheritance  constructor calls initializing virtual base classes multiple identical base classes  multiple indirect base classes multiply derived classes  virtual base classes multiple template parameters  multiply derived classes  multisetcontainer class multisets declaring  sample nnames namingarrays  bit fields  constructors  declaring  file  macros  operator functions index source file valid  variables namespacekeyword namespacesdefining  n dimensional array  negation  negative numbersconverting outputting decimals nested statements  nested namespaces  nesting exception handling  nesting loops  handler  characters  newoperator calling fundamental types  calling default constructor new operator noboolalphamanipulator nongraphic characters noshowpoint noshowpos manipulator notoperator nouppercase manipulator  null    null character    null pointer    numbersformatted input number symbol   numerical constants  numeric operationsexception handling  numeric_limits oobject oriented programming    object persistence  objects  accessing   as arguments  assigning  cleaning creating destroying    creating dynamic members declaring  defining  of derived classes explicit initialization  initializing   lifetime  local  member in memory  passing arguments passing reference  passing  pointers  references returned  representing pairs  returning  static  storage classes storing  union wordbyte memory using  alsoclasses referencesobligatory arguments  octal constant  octal numbersoutputting octmanipulator  off constant ofstreamclass on constant  oop seeobject oriented programmingopen method  open mode flags  open modes file operandsand order evaluation  symmetry operationsfile  for sequences operator functions   calling  declaration defining global  definition index817 operator functions continued global method  methods  naming  negation addition subtraction operatorkeyword  operatorsbitwise  for classes  complex declarations  dot  indirection overloadable overloading  pointer variables  reference type  template functions  unary operators fundamental typesbinary arithmetic operators   increment decrement operators  logical operators relational operators  sign operators  unary arithmetic operators optional arguments   operator ostreamclass   outconstant out_of_range outputredirecting standard  stream classes streams overflow_error class overloaded operatorsrules   overloadingassignment operator  functions  operators   redefinition  shift operators  subscript operators   pparameters declaring  multidimensional arrays  pointers read pointers parenthesesin syntax description parity bit computation parity function passcarversions  passcarclassvirtual method table passcarderived class passing argumentsto function templates  passing reference    passing    persistenceobject  of polymorphic objects  pixels picture element  pointer arithmetic  pointer arraysgenerating dynamically pointer assignmenteffect pointers    to abstract classes  as arguments  array elements interrelated arrays comparing  const objects  defining defining arrays  functions  moving array  null  objects  as parameters parameters declared  read returning  index sample program  subtracting  typeless  indices pointers pointers  pointer types  pointer variables   addressing  arrays polymorphic interfaces  polymorphic objectspersistence  storing polymorphism   concept  destroying dynamically allocated objects  dynamic casts  virtual methods  virtual method table  pop_back methodfor deleting objects container classes popfront method  pop method positioning flags  positioning methods  positive numbersconverting postfix increment postfix notation effects precedenceof arithmetic operators and arithmetic type conversions  boolean operators  cast operator type  comma operator  indirection operator  operator  operators pointer variables  relational operators  precision method prefixes  prefix increment  prefix notation effects preprocessor preprocessor directives  primary file file  printf function priority queues testing priority_queuetemplate private data membersaccessing private members      procedures  program scopeobject defined projects  properties  protected constructors  protected declarations  protected members  prototype  publicbase classesis relationship established public interface class  public members  access base class public methods  pure virtual methods  pushback method  push_back method push_front method push method put method  qqsort function   quadmatrixtemplate  quadratic matricesclass template representing  queuesas sequential containers quick sort algorithm   quotientof fibonacci number rrand index819 random access iterators random file access  positioning    random number generatorinitializing  random positioning statements  random read write access  range checking  range operator base class method accessed range_errorclass raster imagesrepresenting bitmaps  rdstate method readabilityand complex expressions  statements  loop body  macros  andtypedef read accessopen mode read_at method readingblocks records characters  records read methodof classes depaccandsavacc  implementing  read methods  read pointers for constant objects read references   records inserting retrieving  position files  reading  reading writing blocks recursive data structures  recursive functions  redefined methodscalling redefinition references  to abstract classes  conversions base classes  defining as parameters and pointers  read   returning  return  sample program reference type functioncalling registerkeyword registerscpu register variables sample function relational operators  precedence  remove method  replace method reset methodand manipulating bits resistant mistakesprogram resize methodand container classes resultclass   constructors  new version with static members with static methods retrieve method ofindexfilesystemclass  return address returnstatement  return values   reusability  reverse function reverse method rfind method right shift operators  round brackets  routers index rowclassdefining  rtti seerun time type informationruntime behaviorof container classes runtime_error run time errors avoiding   exception classes derived  run time type  values ssafeclass  savaccclassdefining  scientificmanipulator scope  scope resolution operator    screen controlmacros   scrolling string output search method seekg method seekp method selectionsort function semicolon   sequencesand header files operations representing sequential containers sequences  sequential file access setcontainer class setfill manipulator setfill method setf method   set method setprecision manipulator setsassociative containers  declaring  representing  sample settime method setw manipulator shape type  sheltered membersaccess shift operators shorttype showposmanipulatorcalling side effectsavoiding  macros sieve eratosthenes signal hheader file signaturesconstructor   function signed chartype  signed integersconverting signedkeyword signed typeconversion larger integral type sign extension  sign operators  simple assignments  single charactersmeaning single quotescharacter constants size methodand length container  maps multimaps  number objects container sizeofoperator sort methodlist container sorted sortveccontainer classmerge method search method using source code  source files  layout  index821 spaces special characters  special objects base class splice function  splice operations sqrt function  srand function sstreamclass stackclass template explicit instantiation  template parameters stack contentafter calling function stacks fixed varying arguments and recursive functions  sequential containers  testing standard copy constructor  standard exception classeshierarchy  standard exception handlingfor streams standard input  standard methods sample program standard output  standard settings  star character  state flags   statements  static arrays  static binding  static data members  accessing declaring  definition initialization  encapsulation static data structures  static functions statickeyword static_cast static lifetime   static member functions  static objects staticstorage class   stdstandard namespace  storage classes of functions storage class specifiers strcat functionand return pointers strcmp function index version strcpy function pointer versions  return pointers stream access errors  stream classshift operators streambufclass streams discovering changing status  standard  standard exception handling string assignments  stringclass   c strings  defining  objects  sample assignments sample program  string constants   string literalinternal representation stringscharacters accessed comparing concatenating  escape sequences  initializing  inserting erasing  numbers converted output  searching replacing  stringstreamclass strlen function  stroustrup bjarne strstr function sample program  structkeyword structs sample program index style sub object lattice  subroutines   subscript  subscript operators  and access indices  bits referenced  matrix class  overloading  read write access substringserasing replacing subtraction  swap implementing method swap function swapping switchstatement else ifchains contrasted structogram symbolic constants sync method syntax brackets descriptions  defining variables  errors ttabs tan function tellg method tellistclass  methods implemented  tellp method template argumentsrestrictions template function definition  template functionsmotivation template parametersmultiple  restrictions templates   advantages arguments  in standard library default arguments  defining  defining multiple parameters  function class  instantiating    parameters  specialization  terminate function testing characters  textmode  nesting loops text editor thispointersample class daytime using throwing exceptions throwstatement using timediff function time function time_ttype tmstruct tokens  toneand nesting loops top method toupper macro traditional procedural programming  translation unit truekeyword truncopen mode truth tablefor logical operators tryblock nested  syntax  two dimensional arraysinitialization list  parameter declaration type casting  type conversion classes  ambiguities type conversions   conversion constructors   conversion functions  index823 type conversions  ambiguities  in assignments   explicit   failure  implicit    standard  usual arithmetic  typedefkeyword type hierarchy typeless pointers  typenamesdefining types platform dependent  pointer uunary arithmetic operators  unary operators  underflow_errorclass  undefdirective underscoresand internal names unicode  union  defined unique keys usetf method  unsigned chartype unsignedkeyword unsigned short  unsigned types  unsigned  unwinding stack  upcasting   user network interface usingdeclaration usingdirective usingkeyword   usual arithmetic type conversions  performing vva_arg macroarguments valarrayclass variablesdefining  defining statements  names  pointer  sample program variable type  vector vectorcontainer class constructors  methods deleting objects vectorsiterating virtual assignmentsusing virtual base classes  constructor calls  initializing  virtual destructorsdeclaring virtualkeyword virtual methods  calling  declaring  pure  redefining virtual method tables  virtual operator functions vmt seevirtual method tablesvoidtype for functions  void type pointer volatilekeyword  wwarnings wchar_ttype  what method index virtual method whilestatementstructogram structogram break syntax whitespace characters  widthbit fields width method  wordbyte uniondefining write accessopen mode write_at method writeerrortype exception write method   of classes depaccandsavacc  write operation  writingblocks records characters xxoroperator zzero extension index825