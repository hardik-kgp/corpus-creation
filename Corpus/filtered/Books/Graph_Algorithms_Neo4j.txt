database graph model applied productively effectively network analysis cases marketing attribution case person sees marketing campaign person talks social media person connected person seesthe comment subsequently person buys product marketing campaign manager perspective standard relational model fails identify attribution campaign respond campaign campaign failure actual success positive roi discov ered graph analytics algorithm transitive relationship marketing campaign final customer purchase intermediary entity middle anti money laundering aml analysis case persons suspected illicit trafficking interaction financial trans action financial database flagged authorities heavily scruti nized transact business conduct financial dealings safe respected unflagged financial authority pick transaction graph analytics algorithm graph engine discover transitive relationship intermediary internet searches major search engines hyperlinked network graph based algorithm central authoritative node entire internet set search directionality edge vital case theauthoritative node network nodes point literature based discovery lbd knowledge network graph based applica tion enabling discoveries knowledge base thousands millions journal articles ƒhidden knowledge discovered connection published degrees separation transitive relationships lbd applied cancer studies massive semantic medical knowledge base symptoms diagnoses treatments drug interactions markers short term long term consequences ƒhiding unknown cures beneficial treatments impenetrable cases knowledge network connect dots descriptions power graphing cases lis ted earlier examples network analysis graph algorithms case deeply involves entities people objects events actions concepts places relationships touch points causal simple associations power graphing mind powerful node graph model real cases ƒcontext context include time location events nearby entities incor xiv foreword porating context graph nodes edges yield impressive pre dictive analytics prescriptive analytics capabilities mark needham amy hodler graph algorithms aims broaden knowledgeand capabilities types graph analyses including algo rithms concepts practical machine learning applications algorithms basic concepts fundamental algorithms processing platforms practical cases authors compiled instructive illustrative guide derful graphs kirk borne phd principal data scientist executive advisor booz allen hamilton march  foreword chapter introductiongraphs unifying themes computer science abstract representation describes organization transportation systems human interactions telecommuni cation networks erent structures modeled single formalism source great power educated programmer algorithm design manual steven skiena springer distinguished teach ing professor computer science stony brook university today pressing data challenges center relationships tabulating discrete data graph technologies analytics provide powerful tools connected data social initiatives business solutions modeling dynamic environments financial markets services forecasting spread epidemics rippling service delays outages finding predictive features machine learning combat financial crimes uncovering patterns personalized experiences recommendations data increasingly interconnected systems increasingly sophisticated essential rich evolving relationships data chapter introduction graph analysis graph algorithms start refresher origin graphs introducing graph algo rithms explaining difference graph databases graph processing explore nature modern data contained connections sophisticated uncover basic statistical methods chapter conclude cases graph algorithms employed  graphs graphs ha history dating  leonhard euler solved ƒseven bridges nigsberg problem problem asked visit areas city connected bridges crossing bridgeonce insight connections relevant euler set groundwork graph theory mathematics figure   depicts euler progres sion original sketches paper ƒsolutio problematis geome triam situs pertinentis figure   origins graph theory city nigsberg included large islands connected mainland portions city bridges epuzzle create walk city crossing bridge graphs origina ted mathematics pragmatic high fidelity modeling analyzing data objects graph called nodes vertices links relationships links edges terms nodes relationships book nodesas nouns sentences relationships verbs context nodes avoid confusion graphs talk book graphing equations charts figure    chapter  introduction figure   graph representation network illustrated circles rep resent entities nodes lines represent relationships person graph figure   easily construct sentences person lives person owns car person drives car person owns modeling approach compelling maps easily real ƒwhiteboard friendly helps align data modeling analysis modeling graphs half story process reveal insight obvious domain graph algorithms graph analytics algorithms graph algorithms subset tools graph analytics graph analytics thing graph based approach analyze connected data methods query graph data basic statistics visually explore graphs incorporate graphs machine learn ing tasks graph pattern based querying local data analysis graph computational algorithms refer global iterative analysis overlap types analysis employed term graph algorithms refer computational analytics data science graph analytics algorithms  graph algorithms provide potent approaches analyzing connected data mathematical calculations built operate rela tionships steps process graph discover general qualities specific quantities based mathematics graph theory graph algo rithms relationships nodes infer organization dynamics complex systems network scientists algorithms uncover hidden infor mation test hypotheses predictions behavior network sciencenetwork science academic field rooted graph theory concerned mathematical models relationships objects network scientists rely graph algorithms database management systems size nectedness complexity data fantastic resources complexity network science references explore network science albert szl barab introductory ebook complexity explorer offers online courses england complex systems institute resources papers graph algorithms widespread potential preventing fraud optimizing routing predicting spread flu instance score nodes correspond overload conditions power discover groupings graph correspond congestion transport fact  air travel systems experienced events involving multi ple congested airports studied graph analytics network scien tists fleurquin ramasco egu luz graph algorithms confirm events systematic cascading delays correc tive advice paper ƒsystemic delay propagation air port network visualize network underpinning air transportation figure   created martin grandjean article ƒconnected untangling air traffic net work illustration highly connected structure air transpor tation clusters transportation systems exhibit concentrated distribution links clear hub spoke patterns influence delays  chapter  introduction figure   air transportation networks illustrate hub spoke structures evolve multiple scales ese structures contribute travel ƒows graphs uncover ver small interactions dynamics lead global mutations tie micro macro scales representing things interacting global structures associations forecast behavior determine missing links figure   foodweb grasslandspecies interactions graph analysis evaluate hierarchical organization species interactions predict missing relationships detailed paper clauset moore newman ƒhierarchical structure theprediction missing links network graph analytics algorithms  figure   foodweb grassland species graphs correlate small scale interac tions larger structure formation graph processing databases queries algorithmsgraph processing includes methods graph workloads tasks car ried graph queries specific parts graph starting node work focused surrounding subgraph term type work graph local implies declaratively querying graph structure explained book graph databases ian robinson jim webber emil eifrem reilly type graph local processing utilized real time transactions pattern based queries speaking graph algorithms typically global patterns structures input algorithm graph output enriched graph aggregate score categorize processing graph global implies processing graph structure compu tational algorithms iteratively approach sheds light nature network connections organizations tend graph algorithms model systems predict behavior based things disseminate components group identification robustness overlap definitions processing algorithm answer local query vice versa simplistically speaking graph operations processed computational algorithms subgraph operations queried databases traditionally transaction processing analysis siloed unnatural split based technology limitations view graph analytics  chapter  introduction drives smarter transactions creates data opportunities analysis trend integrate silos real time decision making oltp olaponline transaction processing oltp operations typically short activities booking ticket crediting account booking sale oltp implies voluminous low latency query processing high data integrity oltp involve small number records transaction systems process transactions concurrently online analytical processing olap facilitates complex queries analysis historical data analyses include multiple data sources formats types detecting trends conducting ƒwhat scenarios making predictions uncovering structural patterns typical olap cases compared oltp olap systems process fewer longer running transactions records olap systems biased faster reading expectation transac tional updates oltp batch oriented operation common oltp olap begun blur modern data intensive applications combine real time transactional operations ana lytics merging processing spurred advances software scalable transaction management incremental stream processing lower cost large memory hardware bringing analytics transactions enables continual analysis natural regular operations data gathered point sale pos machines manufacturing systems internet things iot devices analytics supports ability real time recommendations decisions processing trend observed years ago terms merging include translytics hybrid transactional analytical processing htap figure   illus trates read replicas bring types processing graph processing databases queries algorithms  figure   hybrid platform supports low latency query processing high data integrity required transactions integrating complex analytics large amounts data gartner htap redefine business processes executed real time advanced analytics planning forecasting analysis integral process separate activity performed fact enable forms real time business driven decision making process ultimately htap key enabling architecture intelli gent business operations oltp olap integrated support functionality pre viously offered silo longer data products systems workloads simplify architecture platform analytical queries advantage real time data streamline iterative process analysis care graph algorithms graph algorithms sense connected data relation ships real systems protein interactions social networks communication systems power grids retail experiences mars mission planning understanding networks connections offers incredible potential insight innovation graph algorithms uniquely suited understanding structures revealing pat terns datasets highly connected connectivity interac  chapter  introduction tivity apparent big data brought commingled dynamically updated impressive graph algorithms sense volumes data sophisticated ana lytics leverage relationships enhance artificial intelligence contextual infor mation data connected increasingly understand relationships interdependencies scientists study growth networks connectivity increases time uniformly preferential attachment theory dynamics growth impact structure idea illustrated figure   describes tendency node link nodes lot connections figure   preferential attachment phenomenon connected node receive links leads uneven concentrations book sync order emerges chaos universe nature daily life hachette steven strogatz examples explains ways real life systems organize underlying researchers care graph algorithms  networks grow inseparable shapes hierar chies highly dense groups lumpy data networks tend develop complex ity growing data size clustering relationships real networks today internet social networks gaming community figure   figure   gaming community analysis concentration connections   communities network analysis figure   created francesco orazio pul sar predict virality content inform distribution strategies orazio correlation concentration community distribution speed diffusion piece content average distribution model predict nodes number connections instance wide web average distribution connections number links coming average distribution mod els assert nodes equally connected types graphs real networks exhibit concentrations web common graphs travel social networks power law distribution nodes highly nected nodes modestly connected  chapter  introduction power lawa wer law called scaling law describes relationship quanti ties quantity varies power instance area cube length sides power  pareto distribution ƒ80  rule originally situation  population controlled  wealth power laws natural networks ƒaverage network generally work investigating relation ships forecasting real networks uneven distributions nodes relationships figure   average character istics data uneven lead incorrect figure   real networks uneven distributions nodes relationships represented extreme power law distribution average distribution assumes nodes number relationships random network highly connected data adhere average distribution network scientists graph analytics search interpret structures relationship distributions real data network nature random network model care graph algorithms  albert szl barab director center complex network north eastern university author numerous network science books challenge users densely unevenly connected data trouble analyze traditional analytical tools structure hard tempting averages approach messy data conceal patterns ensure representing real groups instance average demographic customers offer experience based solely averages guaranteed communi ties communities tend cluster factors age occupation marital status location dynamic behavior sudden events bursts snapshot illustrate imagine social group increasing relationships expect communications lead tipping point coordination subsequent coalition alternatively subgroup forma tion polarization elections sophisticated methods required forecast network evolution time infer behavior stand structures interactions data graph analytics pre dict group resiliency focus relationships graph analytics casesat abstract level graph analytics applied forecast behavior pre scribe action dynamic groups requires understanding relation ships structure group graph algorithms accomplish examining nature networks connections approach understand topology connected systems model processes general buckets questions graph analytics algorithms warranted figure    chapter  introduction figure   types questions graph analytics answer types challenges graph algorithms employed challenges investigate route disease cascading transport failure uncover vulnerable damaging components network attack identify costly fastest route resources predict missing links data locate direct indirect influence complex discover unseen hierarchies dependencies forecast groups merge break bottlenecks power deny provide resources reveal communities based behavior personalized recommendations reduce false positives fraud anomaly detection extract predictive features machine learning graph analytics cases  conclusionin chapter looked data today extremely connected impli cations robust scientific practices exist analysis group dynamics relationships tools commonplace businesses evalu ate advanced analytics techniques nature data understand community attributes predict complex behavior data represents network avoid temptation reduce factors average tools match data insights seek ing chapter cover graph concepts terminology  chapter  introduction chapter graph theory conceptsin chapter set framework cover terminology graph algorithms basics graph theory explained focus concepts relevant practitioner graphs represented explain types graphs attributes graph characteristics inform algorithm choices interpret finish chap ter overview types graph algorithms detailed book terminologythe labeled property graph popular ways modeling graph data label marks node group figure   groups nodes person car classic graph theory label applies single node commonly node group  figure   labeled property graph model ƒexible concise representing connected data relationships classified based relationship type includes rela tionship types drives owns lives_with married_to properties synonymous attributes variety data types numbers strings spatial temporal data figure   assigned theproperties pairs property thenits person node left property dan andthe married_to relationship property jan   subgraph graph larger graph subgraphs filters subset characteristics focused analysis path group nodes connecting relationships simple path based figure   nodes dan ann car drivesand owns relationships graphs vary type shape size kind attributes analysis kinds graphs suited graph algorithms mind explanations apply graphs subgraphs graph types structuresin classic graph theory term graph equated simple strict graph nodes relationship left figure   real graphs relationships nodes  chapter  graph theory concepts referencing relationships today term commonly graph types figure   term inclusively figure   book term graph include classic types aphs random small scale free structuresgraphs shapes figure   representative network types random networks small networks scale free networks figure   ree network structures distinctive graphs behaviors graph types structures  completely average distribution connections random network formedwith hierarchies type shapeless graph ƒflat discernible pat terns nodes probability attached node small network extremely common social networks local ized connections hub spoke pattern ƒsix degrees kevin bacon game small associate small group friends hops famous actor planet scale free network produced power law distributions hub spoke architecture preserved scale wide web network types produce graphs distinctive structures distributions behaviors work graph algorithms recognize pat terns flavors graphsto graph algorithms familiarize characteristic graphs encounter table   summarizes common graph attributes sections flavors table   common attributes graphs graph attributekey factor algorithm consideration connected versus disconnectedwhether path nodes graph irrespective distanceislands nodes unexpected behavior stuck failing process disconnected components weighted versus unweightedwhether domain speci values relationships nodes algorithms expect weights signi cantdi erences performance directed versus undirectedwhether relationships explicitly start node adds rich context infer additional meaning algorithms explicitly set direction cyclic versus acyclicwhether paths start nodecyclic graphs common algorithms careful typically storing traversal state cycles prevent termination acyclic graphs spanning trees basis graph algorithms sparse versus denserelationship node ratio extremely dense extremely sparsely connected graphs divergent data modeling assuming domain inherently dense sparse  chapter  graph theory concepts graph attributekey factor algorithm consideration monopartite bipartite partitewhether nodes connect node type users movies node types users users movies helpful creating relationships analyze projecting graphs connected versus disconnected graphsa graph connected path nodes islands graph disconnected nodes islands connected called components clusters figure   figure   islands graph disconnected graph algorithms struggle disconnected graphs produce misleading unexpected checking structure graph good step unweighted graphs versus weighted graphsunweighted graphs weight values assigned nodes relationships weighted graphs values represent variety measures cost time distance capacity domain specific prioritization figure   visualizes difference flavors graphs  figure   weighted graphs hold values relationships nodes basic graph algorithms weights processing representation strength relationships algorithms compute metrics weights follow processing algorithms update weight values proceed cumulative totals lowest values optimums classic weighted graphs pathfinding algorithms algorithms underpin mapping applications phones compute shortest cheap fastest transport routes locations figure   dif ferent methods computing shortest route figure   shortest paths vary identical unweighted weighted graphs  chapter  graph theory concepts weights shortest route calculated terms number relation ships commonly called hops hop shortest path node shortest weighted path takes weights represent physical distance kilometers total distance  case shortest path terms num ber hops equate longer physical route  undirected graphs versus directed graphsin undirected graph relationships considered bidirectional friendships directed graph relationships specific direction relationships pointing node referred links unsurprisingly links thoseoriginating node direction adds dimension relationships type opposing directions carry semantic meaning expressing dependency indicating flow indicator credibility group strength personal preferences social relations expressed direc tion assumed figure   directed graph network students relationships ƒlikes calculate popular figure   algorithms compute basis inbound bound connections directions direction flavors graphs  road networks illustrate types graphs exam ple highways cities traveled directions cities roads streets true flows running algorithms undirected fashion compared directed undirected graph highways friendships assume relationships ways reimagine figure   directed road network drive andd leave relationships dead road network process web acyclic graphs versus cyclic graphsin graph theory cycles paths relationships nodes start node acyclic graph cycles figure   bothdirected undirected graphs cycles directed paths follow relationship direction directed acyclic graph dag graph  defi nition dead ends called leaf nodes figure   acyclic graphs impossible start node retracing steps graphs   cycles start node repeating relationship remember chapter  repeating relationships nigsberg bridges problem started graph theory graph  figure   simple cycle repeated nodes graph  undirected cyclic graph ing adding node relationship closed cycle repeated node multiple cycles graph   chapter  graph theory concepts cycles common convert cyclic graphs acyclic graphs cutting relationships eliminate processing problems directed acyclic graphs naturally scheduling genealogy version histories treesin classic graph theory acyclic graph undirected called tree puter science trees directed inclusive definition graph nodes connected path trees standing graph structures algorithms play key role designing networks data structures search optimizations improve categorization organizational hierarchies written trees variations figure   illustrates common trees encounter figure   prototypical tree graphs spanning trees aph algorithms variations spanning trees relevant book spanning tree subgraph includes nodes larger acyclic graph relationships minimum spanning tree connects nodes graph number hops weighted paths sparse graphs versus dense graphsthe sparsity graph based number relationships compared maximum number relationships occur rela tionship pair nodes graph node relationship node called complete graph clique components instance friends knew clique flavors graphs  maximum density graph number relationships plete graph calculated formula maxd   numberof nodes measure actual density formula rnn  thenumber relationships figure   measures actual densityfor undirected graphs figure   checking density graph evaluate unexpected strict dividing graph actual density approaches maximum density considered dense graphs based real networks tend sparseness linear correlation total nodes total relationships case physical elements play practical limitations wires pipes roads friend ships join point algorithms return nonsensical executed extremely sparseor dense graphs graph sparse relationships algorithms compute alternatively densely connected nodes add additional highly connected high den sities skew add computational complexity situations filtering relevant subgraph practical approach monopartite bipartite partite graphsmost networks data multiple node relationship types graph algo rithms frequently node type relationship type graphs node type relationship type referred monopartite  chapter  graph theory concepts bipartite graph graph nodes divided sets rela tionships connect node set node set figure  shows graph sets nodes viewer set set relationships sets intraset connec tions graph  viewers viewers likewise directly linked viewers starting bipartite graph viewers created monopar tite projections graph  viewer connections based common graph  based viewers common filter based rela tionship type watched rated reviewed projecting monopartite graphs inferred connections graph analysis types projections uncover indirect relationships qualities graph  figure   bev ann watched common bev evan common graph  weighted relationships aggregated views viewers common metrics similarity infer meaning activities watching battlestar galactica fireƒy inform recommendation van figure   finished watching episode fireƒy partite graphs reference number node types data node types tripartite graph extends bipartite monopartite concepts account node types real graphs espe cially knowledge graphs large combine concepts types larger number node types creating recipes mapping recipe set ingredient set chemi cal compound deducing mixes connect popular preferences reduce number nodes types generalization treating forms node spinach collards ƒleafy greens reviewed types graphs work learn types graph algorithms execute graphs flavors graphs  figure   bipartite graphs projected monopartite graphs speci canalysis  chapter  graph theory concepts types graph algorithmslet areas analysis heart graph algorithms categories correspond chapters algorithms pathfinding search centrality computation community detection path ndingpaths fundamental graph analytics algorithms start chapters specific algorithm examples finding shortest paths frequent task performed graph algorithms precursor types analysis shortest path traversal route fewest hops lowest weight graph directed shortest path nodes allowed relationship directions path typesthe average shortest path efficiency resiliency ofnetworks understanding average distance subway stations understand longest optimized route situations determining subway stations farthest number stops route chosen case diameter graph longest shortest path node pairs centralitycentrality understanding nodes network types centrality algo rithms created measure things ability spread infor mation versus bridging distinct groups book focus nodes relationships structured community detectionconnectedness core concept graph theory enables sophisticated network analysis finding communities real networks exhibit substruc tures quasi fractal independent subgraphs connectivity communities quantify quality groupings eval uating types communities graph uncover structures hubs hierarchies tendencies groups attract repel tech niques study emergent phenomena lead echo cham bers filter bubble effects types graph algorithms  summarygraphs tuitive align draw systems pri mary tenets working graphs assimilated unraveled terminology layers chapter explained ideas expressions book flavors graphs graph theory referencesif excited learn graph theory introductory texts recommend introduction graph eory richard trudeau dover writ gentle troduction introduction graph eory robin wilson pearson solid introduction good illustra tions graph eory applications jonathan gross jay yellen mark anderson chapman hall assumes mathematics ground exercises graph processing types analysis diving graph algorithms apache spark neo4j  chapter  graph theory concepts chapter graph platforms processingin chapter cover methods graph processing common platform approaches closely platforms book apache spark neo4j requirements platform installation guidelines included prepare chapters graph platform processing considerationsgraph analytical processing unique qualities computation structure driven globally focused difficult parse general considerations graph platforms processing platform considerationsthere debate scale scale graph processing powerful multicore large memory machines focus efficient data structures multithreaded algorithms investments distributed pro cessing frameworks algorithms worthwhile evaluation approach guration outperforms single read cost paper ƒscalability cost mcsherry isard murray cost compare sys tem scalability overhead introduces core concept configured optimized algorithm data structure outper form current general purpose scale solutions method measuring perfor mance gains rewarding systems mask inefficiencies parallelization separating ideas scalability efficient resources build platform configured explicitly  approaches graph platforms include highly integrated solutions opti mize algorithms processing memory retrieval work tighter coordination processing considerationsthere approaches expressing data processing stream batch processing map reduce paradigm records based data graph data exist approaches incorporate data dependencies inherent graph structures processing node centric approach nodes processing units accumulate pute state communicate state messages neighbors model provided transformation functions straightforward implementations algorithm relationship centric approach similarities node centric model perform bet ter subgraph sequential analysis graph centric models process nodes subgraph independently subgraphs minimal communication subgraphs messaging traversal centric models accumulation data traverser navigating graph computation algorithm centric approaches methods optimize implementations algo rithm hybrid previous models pregel node centric fault tolerant parallel processing frame work created google performant analysis large graphs pregel based bulk synchronous parallel bsp model bsp simplifies parallel programming distinct computation communication phases pregel adds node centric abstraction atop bsp algo rithms compute values incoming messages node neighbors computations executed iteration update node values send messages nodes nodes combine messages transmission communication phase helpfully reduces net work chatter algorithm completes mes sages set limit reached  chapter  graph platforms processing graph specific approaches require presence entire graph efficient cross topological operations separating distributing graph data leads extensive data transfers reshuffling worker instances difficult algorithms iteratively process global graph structure representative platformsto address requirements graph processing platforms emerged traditionally separation graph compute engines graph data bases required users data depending process graph compute engines read nontransactional engines focus efficient execution iterative graph analytics queries graph graph compute engines support definition processing paradigms graph algorithms node centric pregel gather apply scatter mapreduce based approaches pact examples engines giraph graphlab graph engine apache spark graph databases transactional background focus fast writes reads usingsmaller queries generally touch small fraction graph strengths operational robustness high concurrent scalability users selecting platformchoosing production platform involves considersations type analysis performance existing environment team preferen ces apache spark neo4j showcase graph algorithms book offer unique advantages spark scale node centric graph compute engine popu lar computing framework libraries support variety data science workflows spark platform algorithms fundamentally parallelizable partitionable algorithm workflows ƒmultilingual operations multiple tools lan guages analysis offline batch mode graph analysis data transformed graph format team expertise code implement algorithms team graph algorithms infrequently representative platforms  team prefers data analysis hadoop ecosystem neo4j graph platform tightly integrated graph database algorithm centric processing optimized graphs popular building graph based applications includes graph algorithms library tuned native graph database neo4j platform algorithms iterative require good memory locality algorithms performance sensitive graph analysis complex graph data requires deep path traversal analysis integrated transactional workloads enrich existing graph team integrate graph based visualization tools team prefers prepackaged supported algorithms finally organiza tions neo4j spark graph processing spark high level filtering preprocessing massive datasets data integration neo4j specific processing integration graph based applica tions apache sparkapache spark henceforth spark analytics engine large scale data pro cessing table abstraction called dataframe represent process data rows named typed columns platform integrates diverse data sources supports languages scala python spark supports analyticslibraries figure   memory based operates effi ciently distributed compute graphs graphframes graph processing library spark succeeded graphx  separate core apache spark graphframes based graphx dataframes underlying data structure graphframes port scala python programming languages spring  ƒspark graph property graphs cypher queries algorithms proposal accepted ƒspark graph evolution  expect bring number graph features dataframe framework cypher query language core spark project book examples based python api pyspark current popularity spark data scientists  chapter  graph platforms processing figure   spark open source distributed general purpose clustercomputing framework includes modules workloads spark graph evolutionthe spark graph project joint initiative apache project contributors databricks neo4j bring support dataframes cypher dataframes based algorithms core apache spark project   release cypher started declarative graph query language implemented neo4j opencypher project multiple database vendors opensource project cypher apache spark caps future forward caps load project graph data integrated spark platform publish cypher examples spark graph project implemented development impact algorithms covered book add options procedures called underlying data model concepts computation graph algorithms remain nodes relationships represented dataframes unique node source destination node relationship nodes dataframe table   relationships dataframe table   agraphframe based dataframes nodes jfk sea andone relationship jfk sea table   nodes dataframe idcitystate jfknew yorkny seaseattlewa representative platforms  table   relationships dataframe srcdstdelaytripid jfksea451058923 nodes dataframe column column touniquely identify node relationships dataframe src dstcolumns values columns nodes connected andshould refer entries column nodes dataframe nodes relationships dataframes loaded dataframe data sources including parquet csv queries bination pyspark api spark sql graphframes users extension point implement algorithms box installing sparkyou download spark apache spark website downloaded install libraries execute spark jobs python pip install pyspark graphframesyou launch pyspark repl executing command export spark_version spark    bin hadoop2  spark_version bin pyspark driver memory g executor memory g packages graphframes graphframes    spark2  s_2 at time writing latest released version spark spark    bin hadoop2  changed time read change spark_version environment variable appropriately spark jobs executed cluster machines demonstration purposes execute jobs single machine learn running spark pro duction environments spark nitive guide chambers matei zaharia reilly ready learn graph algorithms spark neo4j graph platformthe neo4j graph platform supports transactional processing analytical process ing graph data includes graph storage compute data management  chapter  graph platforms processing analytics tooling set integrated tools sits common protocol api query language cypher provide effective access shownin figure   figure   neo4j graph platform built native graph database ports transactional applications graph analytics book neo4j graph algorithms library library installed plug alongside database set user defined proce dures executed cypher query language graph algorithm library includes parallel versions algorithms supporting graph analytics machine learning workflows algorithms executed task based parallel computation framework optimized neo4j platform graph sizes internal implementations scale tens billions nodes relationships streamed client tuples stream tabular driving table processing optionally writtenback database efficiently node properties relationship types book neo4j awesome procedures cypher apoc library apoc consists  proce dures functions common tasks data inte gration data conversion model refactoring representative platforms  installing neo4jneo4j desktop venient developers work local neo4j databases downloaded neo4j website graph algorithms apoc libraries installed plug ins installed launched neo4j desktop lefthand menu create project select click manage database install plug ins plugins tab options plug ins click install button graph algorithms apoc figures     figure   installing graph algorithms library  chapter  graph platforms processing figure   installing apoc library jennifer reif explains installation process blog post ƒexplorenew worlds adding plugins neo4j ready learn graph algorithms neo4j summaryin previous chapters graph analytics studying real networks looked fundamental graph concepts analysis pro cessing puts solid footing understanding apply graph algo rithms chapters discover graph algorithms examples spark neo4j summary  chapter path nding graph search algorithmsgraph search algorithms explore graph general discovery explicit search algorithms carve paths graph expectation paths computationally optimal cover breadth search depth search fundamental traversing graph required step types analysis pathfinding algorithms build graph search algorithms explore routes nodes starting node traversing relationships destination reached algorithms identify optimal routes graph logistics planning cost routing gaming simulation pathfinding algorithms cover shortest path variations yen finding shortest path paths chosen nodes pairs shortest path single source shortest path finding shortest paths pairs chosen node minimum spanning tree finding connected tree structure smallest cost visiting nodes chosen node random walk preprocessing sampling step machine learning workflows graph algorithms chapter explain algorithms work examples spark neo4j cases algorithm platform pro vide illustrate customize implementation  figure   key differences types algorithms table  is quick reference algorithm computes figure   path nding search algorithms  chapter  path nding graph search algorithms table   overview path nding graph search algorithms algorithm typewhat sparkexampleneo4j examplebreadth search traverses tree structure fanning explore nearest neighbors sublevel neighbors locating neighbor nodes gps systems identify nearby places yesno depth search traverses tree structure exploring branch backtracking discovering optimal solution path gaming simulations hierarchical choices nono shortest path variations yen scalculates shortest path pair nodes finding driving directions locations yesyes pairs shortest path calculates shortest path pairs nodes graph evaluating alternate routes tra jam yesyes single source shortest path calculates shorest path single root node nodes cost routing phone callsyesyes minimum spanning tree calculates path connected tree structure smallest cost visiting nodes optimizing connected routing laying cable garbage collection noyes random walk returns list nodes path speci size randomly choosing relationships traverse augmenting training machine learning data graph algorithms noyes dataset examples walk import data apache spark neo4j algorithm start short description algorithm pertinent operates sections include guidance algorithms finally provide working sample code sample dataset algorithm started data transport graphall connected data paths nodes search pathfind ing starting points graph analytics transportation datasets illustrate relationships intuitive accessible examples chapter graph subset european road network download nodes relationships files book github repository table   transport nodes csv idlatitudelongitudepopulation amsterdam52   data transport graph  idlatitudelongitudepopulation utrecht52   den haag52   immingham53    doncaster53    hoek van holland51   felixstowe51   ipswich52   colchester51   london51    rotterdam51   gouda52   table   transport relationships csv srcdstrelationshipcost amsterdamutrechteroad46 amsterdamden haageroad59 den haagrotterdameroad26 amsterdamimminghameroad369 imminghamdoncastereroad74 doncasterlondoneroad277 hoek van hollandden haageroad27 felixstowehoek van hollanderoad207 ipswichfelixstoweeroad22 colchesteripswicheroad32 londoncolchestereroad106 goudarotterdameroad25 goudautrechteroad35 den haaggoudaeroad32 hoek van hollandrotterdameroad33 figure   target graph construct  chapter  path nding graph search algorithms figure   transport graph simplicity graph figure   undirected roads cities bidirectional evalu ated graph directed small number streets approach remains spark neo4j operate direc ted graphs cases work undirected graphs bidirectional roads easy accomplish spark create relationships row ansport relationships csv dst src src dst neo4j create single relationship ignore relationship direction algorithms understood modeling workarounds load ing graphs spark neo4j csv files importing data apache sparkstarting spark import packages spark graphframes package pyspark sql types import graphframes import data transport graph  function creates graphframe csv files def create_transport_graph node_fields structfield stringtype true structfield latitude floattype true structfield longitude floattype true structfield population integertype true nodes spark read csv data transport nodes csv header true schema structtype node_fields rels spark read csv data transport relationships csv header true reversed_rels rels withcolumn newsrc rels dst withcolumn newdst rels src drop dst src withcolumnrenamed newsrc src withcolumnrenamed newdst dst select src dst relationship cost relationships rels union reversed_rels return graphframe nodes relationships loading nodes easy relationships preprocess ing create relationship function create_transport_graph importing data neo4jnow neo4j start loading nodes https github neo4j graph analytics book raw master data basewith base transport nodes csv uri load csv headers uri row merge place place row set place latitude tofloat row latitude place longitude tofloat row latitude place population tointeger row population relationships https github neo4j graph analytics book raw master data base base transport relationships csv uri load csv headers uri row match origin place row src match destination place row dst merge origin eroad distance tointeger row cost destination storing directed relationships ignore direction exe cute algorithms chapter  chapter  path nding graph search algorithms breadth searchbreadth search bfs fundamental gra traversal algorithms starts chosen node explores neighbors hop visiting neighbors hops algorithm published  edward moore shortest path maze developed wire routing algorithm lee  ƒan algorithm path connections applications bfs commonly basis goal oriented algorithms shortest path connected components closeness centrality thebfs algorithm shortest path nodes figure   order visit nodes transport graph performing breadth search started dutch city den haag english hague numbers city order node visited breadth search  figure   breadth search starting den haag node numbers order traversed visit den haag direct neighbors visiting neighbors neighbors neighbors relationships traverse breadth search apache sparkspark implementation breadth search algorithm finds shortest path nodes number relationships hops explicitly target node add criteria met  chapter  path nding graph search algorithms bfs function medium sized euro pean standards city population     people check places population matching criteria vertices filter population  population  sort population output idlatitudelongitudepopulation colchester51   ipswich52   places matching criteria expect reach ipswich based breadth search code finds shortest path den aag medium sized city from_expr den haag to_expr population  population  den haag result bfs from_expr to_expr result columns nodes relationships cities code list columns returned print result columns output e0 v1 e1 v2 columns represent relationships edges columns represent nodes vertices interested nodes filter columns dataframe columns column column result columns column startswith result select columns code pyspark output fromv1v2to den haag   hoek van holland felixstowe   ipswich   expected bfs algorithm returns ipswich remember function satis fied finds match figure   ipswich evalu ated colchester breadth search  depth searchdepth search dfs fundamental gra traversal algorithm starts chosen node picks neighbors traverses path backtracking dfs originally invented french mathematician charles pierre maux strategy solving mazes tool simulate paths sce nario modeling figure   order visit nodes transport graph performing dfs started den haag figure   depth search starting den haag node numbers order traversed notice node order compared bfs dfs start traversing den haag amsterdam node graph needing backtrack search algorithms lay groundwork moving graphs pathfinding algorithms cheapest path terms number hops weight weights measured time dis tance capacity cost  chapter  path nding graph search algorithms special paths cyclesthere special paths graph analysis worth noting eulerian path relationship visited hamiltonian path node visited path eulerian hamiltonian start finish node considered cycle tour visual comparison figure   figure   eulerian hamiltonian cycles special historical signi cance nigsberg bridges problem chapter  searching eulerian cycle easy applies routing scenarios directing snowplows mail delivery eulerian paths algorithms process ing data tree structures simpler mathematically study cycles hamiltonian cycle relation traveling salesman prob lem tsp asks ƒwhat shortest route salesperson visit assigned cities return origin city seemingly simi lar eulerian tour tsp computationally intensive approxima tion alternatives wide variety planning logistics optimization problems shortest paththe shortest path algorithm calculates shortest weighted path pair nodes user interactions dynamic workflows works real time shortest path  pathfinding history dating th century considered classic graph problem gained prominence early s context alter nate routing finding shortest route shortest route blocked  edsger dijkstra created algorithms dijkstra shortest path algorithm operates finding lowest weight relation ship start node directly connected nodes track weights moves ƒclosest node performs calculation cumulative total start node algorithm continues evaluating ƒwave cumulative weights choosing lowest weighted cumulative path advance reaches destination node notice graph analytics terms weight cost distance hop describing relationships paths ƒweight numeric property relation ship ƒcost sidering total weight path ƒdistance algorithm relationship property cost traversing pair nodes required actual physical meas ure distance ƒhop commonly express number relationships nodes terms combined ƒit hop distance london ƒthat lowest cost distance shortest path shortest path optimal routes pair nodes based number hops weighted relationship provide real time answers degrees separation shortest distance points expensive route algorithm simply explore connec tions nodes cases include finding directions locations web mapping tools google maps shortest path algorithm close variant provide driving directions finding degrees separation people social networks exam ple view profile linkedin people separate graph listing mutual connections finding number degrees separation actor kevin bacon based movies ppeared bacon number oracle bacon website erd number project  chapter  path nding graph search algorithms graph analysis based collaboration paul erd prolific mathematicians twentieth century dijkstra algorithm support negative weights algo rithm assumes adding relationship path path shorter invariant violated negative weights shortest path neo4jthe neo4j graph algorithms library built procedure pute unweighted weighted shortest paths learn compute unweighted shortest paths neo4j shortest path algorithms assume underlying graph undirected override passing param eter direction outgoing direction incoming neo4j shortest path algorithm ignore weights pass null thethird parameter procedure weight property executing algorithm algorithm assume default weight   relationship match source place amsterdam destination place london algo shortestpath stream source destination null yield nodeid cost return algo getnodebyid nodeid place costthis query returns output placecost amsterdam0  immingham1  doncaster2  london3  cost cumulative total relationships hops path breadth search spark shortest path  work total distance path writing bit postprocessing cypher procedure calculates shortest unweighted path works actual cost path match source place amsterdam destination place london algo shortestpath stream source destination null yield nodeid costwith collect algo getnodebyid nodeid pathunwind range  size path  path current path  current current eroad distance  distancewith collect current current distance distance stopsunwind range  size stops  stops location stops return location current place reduce acc   distance stops  distance acc distance costif previous code feels bit unwieldy notice tricky figuring massage data include cost journey helpful mind cumulative path cost query returns result placecost amsterdam0  immingham369  doncaster443  london720  figure   unweighted shortest path amsterdam london routing fewest number cities total cost   chapter  path nding graph search algorithms figure   unweighted shortest path amsterdam london choosing route fewest number nodes visited sit uations subway systems stops highly desirable driving scenario interested total cost shortest weighted path shortest path weighted neo4jwe execute weighted shortest path algorithm shortest path amsterdam london match source place amsterdam destination place london algo shortestpath stream source destination distance yield nodeid cost return algo getnodebyid nodeid place costthe parameters passed algorithm sourcethe node shortest path search destinationthe node shortest path ends distancethe relationship property cost traversing pair nodesthe cost number kilometers locations query returns result placecost amsterdam0  shortest path  placecost den haag59  hoek van holland86  felixstowe293  ipswich315  colchester347  london453  quickest route takes den haag hoek van holland felixstowe ipswich colchester cost cumulative total progress thecities amsterdam den haag cost  den haag hoek van holland cumulative cost  finally arrive london colchester total cost  remember unweighted shortest path total cost  save  weights account computing shortest path shortest path weighted apache sparkin breadth search apache spark learned theshortest path nodes shortest path based hops shortest weighted path shortest total dis tance cities shortest weighted path case distance cost property types weighting option box graphframes write version weighted shortest path aggregatemessages framework algo rithm examples spark simpler process calling algorithms library option writing functions aggregatemessages ƒmessage passing aggregatemessages graphframes user guide recommend leveraging preexisting tested libraries writing functions compli cated algorithms requires deeper understanding data calculations treated reference implemen tation optimized running larger dataset interested writing functions skip  chapter  path nding graph search algorithms create function import libraries graphframes lib import aggregatemessages amfrom pyspark sql import functions fthe aggregate_messages module graphframes library helper functions write function create user defined function build paths source destination add_path_udf udf lambda path path arraytype stringtype main function calculates shortest path starting origin returns destination visited def shortest_path origin destination column_name cost vertices filter vertices destination count  return spark createdataframe emptyrdd vertices schema withcolumn path array vertices vertices withcolumn visited lit false withcolumn distance vertices origin  float inf withcolumn path array cached_vertices getcacheddataframe vertices g2 graphframe cached_vertices edges g2 vertices filter visited false current_node_id g2 vertices filter visited false sort distance msg_distance edge column_name src distance msg_path add_path_udf src path src msg_for_dst src current_node_id struct msg_distance msg_path new_distances g2 aggregatemessages min msg alias aggmess sendtodst msg_for_dst new_visited_col g2 vertices visited g2 vertices current_node_id true false new_distance_col new_distances aggmess isnotnull new_distances aggmess col1 g2 vertices distance new_distances aggmess col1 g2 vertices distance new_path_col new_distances aggmess isnotnull new_distances aggmess col1 g2 vertices distance new_distances aggmess col2 cast array string g2 vertices path new_vertices g2 vertices join new_distances shortest path  left_outer drop new_distances withcolumn visited new_visited_col withcolumn newdistance new_distance_col withcolumn newpath new_path_col drop aggmess distance path withcolumnrenamed newdistance distance withcolumnrenamed newpath path cached_new_vertices getcacheddataframe new_vertices g2 graphframe cached_new_vertices g2 edges g2 vertices filter g2 vertices destination visited return g2 vertices filter g2 vertices destination withcolumn newpath add_path_udf path drop visited path withcolumnrenamed newpath path return spark createdataframe emptyrdd vertices schema withcolumn path array store references taframes functions needto cache getcacheddataframe function encounter memory leak execution shortest_path function function cache vertices new_vertices dataframes wanted shortest path amsterdam colchester function result shortest_path amsterdam colchester cost result select distance path truncate false return result iddistancepath colchester347  amsterdam den haag hoek van holland felixstowe ipswich colchester total distance shortest path amsterdam colchester  takes den haag hoek van holland felixstowe ipswich contrast shortest path terms number relationships locations worked breadth search algorithm refer figure   wouldtake immingham doncaster london shortest path variation shortest path algorithm improves dijkstra finding shortest paths allowing inclusion extra algorithm heuristic function determining paths explore  chapter  path nding graph search algorithms algorithm invented peter hart nils nilsson bertram raphael  paper ƒa formal basis heuristic determination minimum cost paths algorithm operates determining partial paths expand iteration main loop based estimate cost heuristic left reach goal node thoughtful heuristic employed estimate path costs underestimating path costs unnecessarily include paths eliminated accu rate heuristic overestimates path costs skip actual shorter paths incorrectly estimated longer evaluated lead inaccurate selects path minimizes function cost path starting point node estimated cost path node destination node computed heuristic neo4j implementation geospatial distance heu ristic transportation dataset latitude longitude location heuristic function neo4jthe query executes algorithm shortest path den haag london match source place den haag destination place london algo shortestpath astar stream source destination distance latitude longitude yield nodeid cost return algo getnodebyid nodeid place costthe parameters passed algorithm sourcethe node shortest path search shortest path  destinationthe node shortest path search ends distancethe relationship property cost traversing pair nodes cost number kilometers loca tions latitudethe node property represent latitude node geospatial heuristic calculation longitudethe node property represent longitude node geospatial heuristic calculation running procedure result placecost den haag0  hoek van holland27  felixstowe234  ipswich256  colchester288  london394  result shortest path algorithm complex datasets algorithm faster evaluates fewer paths shortest path variation yen shortest pathsyen shortest paths algorithm shortest path algorithm finding shortest path pairs nodes calculates shortest path shortest path  deviations shortest paths jin yen invented algorithm  ƒfinding shortestloopless paths network algorithm alternative paths finding absolute shortest path goal ful backup plan yen neo4jthe query executes yen algorithm shortest paths gouda felixstowe  chapter  path nding graph search algorithms match start place gouda place felixstowe algo kshortestpaths stream start  distance yield nodeids path costs return node algo getnodesbyid nodeids   node reduce acc   cost costs acc cost totalcostthe parameters passed algorithm startthe node shortest path search endthe node shortest path search ends the maximum number shortest paths distancethe relationship property cost traversing pair nodes cost number kilometers loca tions shortest paths node node filter start nodes collection running procedure result indexvia totalcost0 rotterdam hoek van holland   den haag hoek van holland   rotterdam den haag hoek van holland    den haag rotterdam hoek van holland    utrecht amsterdam den haag hoek van holland   figure   shortest path gouda felixstowe figure   shortest path gouda felixstowe shortest path  shortest path figure   interesting comparison ordered bytotal cost illustrates shortest paths parameters shortest route  longer shortest prefer scenery choose longer route pairs shortest paththe pairs shortest path apsp algorithm calculates shortest weighted path pairs nodes efficient running single source shortest path algorithm pair nodes graph apsp optimizes operations keeping track distances calculated running nodes parallel distances reused calcu lating shortest path unseen node follow understanding algorithm works pairs nodes reachable shortest path nodes algo rithm return distances pairs nodes closer pairs shortest paththe calculation apsp easiest understand follow sequence operations diagram figure   walks steps node  chapter  path nding graph search algorithms figure   steps calculate shortest path node nodes updates shaded initially algorithm assumes infinite distance nodes start node isselected distance node set  calculation proceeds  start node evaluate cost moving nodes reach update values smallest ha choice cost of3 cost  selected phase traversal  node algorithm updates cumulative distances nodes reached directly alues updated lower cost      selected closest node visited relationships nodes algorithm works distance thosenodes summing distance distance ofthose nodes note lowest cost start node current node preserved sunk cost distance calculation   d      all pairs shortest path  step distance node  greater shortest distance computed  notupdated distances nodes   calculated distances values updated  selected cumulative total reaching  lower updated  finally evaluated minimum path weights updated algorithm termina tes pairs shortest path algorithm optimized calculations parallel node add large graph subgraph evaluate paths subcategory nodes pairs shortest path pairs shortest path commonly understanding alternate routing shortest route blocked suboptimal algorithm logical route planning ensure multiple paths diversity routing pairs shortest path routes nodes cases include optimizing location urban facilities distribution goods determining traffic load expected segments transportation grid larson odoni book urban operations prentice hall finding network maximum bandwidth minimal latency data center design algorithm details approach paper ƒrewire optimization based framework data center network design curtis pairs shortest path apache sparkspark shortestpaths function designed finding shortest paths nodes set nodes called landmarks wanted shortest path location colchester immingham hoek van holland write query  chapter  path nding graph search algorithms result shortestpaths colchester immingham hoek van holland result sort select distances truncate false code pyspark output iddistancesamsterdam immingham  hoek van holland  colchester  colchester colchester  hoek van holland  immingham  den haag hoek van holland  immingham  colchester  doncaster immingham  colchester  hoek van holland  felixstowe hoek van holland  colchester  immingham  gouda hoek van holland  immingham  colchester  hoek van holland hoek van holland  immingham  colchester  immingham immingham  colchester  hoek van holland  ipswich colchester  hoek van holland  immingham  london colchester  immingham  hoek van holland  rotterdam hoek van holland  immingham  colchester  utrecht immingham  hoek van holland  colchester  number location distances column number rela tionships roads cities traverse sourcenode colchester destination cities  nodes traverse  hops immingham hoek van holland planning trip maxi mize time chosen destinations pairs shortest path neo4jneo4j parallel implementation pairs shortest path algorithm returns distance pair nodes parameter procedure property work shortestweighted path set null algorithm calculate unweighted shortest paths pairs nodes query algo allshortestpaths stream null yield sourcenodeid targetnodeid distance sourcenodeid targetnodeid return algo getnodebyid sourcenodeid source algo getnodebyid targetnodeid target distance order distance desc limit all pairs shortest path  algorithm returns shortest path pair nodes nodes source node helpful evaluat ing directed graph streets path filter sourcenodeid targetnodeid predicate query returns sourcetargetdistance colchesterutrecht5  londonrotterdam5  londongouda5  ipswichutrecht5  colchestergouda5  colchesterden haag4  londonutrecht4  londonden haag4  colchesteramsterdam4  ipswichgouda4  output  pairs locations relationships asked descending order desc calculate shortest weighted paths passing null parameter pass property cost inthe shortest path calculation property evaluated work shortest weighted path pair nodes query algo allshortestpaths stream distance yield sourcenodeid targetnodeid distance sourcenodeid targetnodeid return algo getnodebyid sourcenodeid source algo getnodebyid targetnodeid target distance order distance desc limit the query returns result sourcetargetdistance doncasterhoek van holland529  rotterdamdoncaster528  goudadoncaster524   chapter  path nding graph search algorithms sourcetargetdistance felixstoweimmingham511  den haagdoncaster502  ipswichimmingham489  utrechtdoncaster489  londonutrecht460  colchesterimmingham457  imminghamhoek van holland455   pairs locations furthest terms total distance notice doncaster frequently cities netherlands long drive wanted road trip areas single source shortest paththe single source shortest path sssp algorithm prominence time dijkstra shortest path algorithm acts implementation problems sssp algorithm calculates shortest weighted path root node nodes graph demonstrated figure   single source shortest path  figure   steps single source shortest path algorithm proceeds  root node paths measured figure  we selected node root  relationship smallest weight coming root node selected tree connected node case   relationship smallest cumulative weight root node visited node selected tree choices figure     directly   route chosen tree  process continues nodes add sin gle source shortest path  chapter  path nding graph search algorithms single source shortest path single source shortest path evaluate optimal route fixed start point individual nodes route chosen based total path weight root finding path node nodes visited single trip sssp helpful identifying main routes emergency services visit location incident finding single route garbage collection visit house trip case minimum spanning tree algorithm covered cases include detecting topology link failures suggesting rout ing structure seconds dijkstra routing protocol autonomous systems local area network lan single source shortest path apache sparkwe adapt shortest_path function wrote calculate shortest path locations return shortest path location note spark aggregatemessages framework custom ize function import libraries graphframes lib import aggregatemessages amfrom pyspark sql import functions fand user defined function construct paths add_path_udf udf lambda path path arraytype stringtype main function calculates shortest path starting origin def sssp origin column_name cost vertices vertices withcolumn visited lit false withcolumn distance vertices origin  float inf withcolumn path array cached_vertices getcacheddataframe vertices g2 graphframe cached_vertices edges g2 vertices filter visited false current_node_id g2 vertices filter visited false sort distance idsingle source shortest path  msg_distance edge column_name src distance msg_path add_path_udf src path src msg_for_dst src current_node_id struct msg_distance msg_path new_distances g2 aggregatemessages min msg alias aggmess sendtodst msg_for_dst new_visited_col g2 vertices visited g2 vertices current_node_id true false new_distance_col new_distances aggmess isnotnull new_distances aggmess col1 g2 vertices distance new_distances aggmess col1 g2 vertices distance new_path_col new_distances aggmess isnotnull new_distances aggmess col1 g2 vertices distance new_distances aggmess col2 cast array string g2 vertices path new_vertices g2 vertices join new_distances left_outer drop new_distances withcolumn visited new_visited_col withcolumn newdistance new_distance_col withcolumn newpath new_path_col drop aggmess distance path withcolumnrenamed newdistance distance withcolumnrenamed newpath path cached_new_vertices getcacheddataframe new_vertices g2 graphframe cached_new_vertices g2 edges return g2 vertices withcolumn newpath add_path_udf path drop visited path withcolumnrenamed newpath path shortest pa amsterdam locations function via_udf udf lambda path path   arraytype stringtype result sssp amsterdam cost result withcolumn via_udf path select distance sort distance truncate false  chapter  path nding graph search algorithms define user defined function filter start nodes path code output iddistancevia amsterdam0  utrecht46  den haag59  gouda81  utrecht rotterdam85  den haag hoek van holland86  den haag felixstowe293  den haag hoek van holland ipswich315  den haag hoek van holland felixstowe colchester347  den haag hoek van holland felixstowe ipswich immingham369  doncaster443  immingham london453  den haag hoek van holland felixstowe ipswich colchester physical distances kilometers root node amsterdam cities graph ordered shortest distance single source shortest path neo4jneo4j implements variation sssp called delta stepping algorithm divides dijkstra algorithm number phases executed parallel query executes delta stepping algorithm match place london algo shortestpath deltastepping stream distance   yield nodeid distance algo isfinite distance return algo getnodebyid nodeid destination distance order distancethe query returns output destinationdistance london0  colchester106  ipswich138  felixstowe160  doncaster277  immingham351  single source shortest path  destinationdistance hoek van holland367  den haag394  rotterdam400  gouda425  amsterdam453  utrecht460  physical distances kilometers root node lon cities graph ordered shortest distance minimum spanning treethe minimum weight spanning tree algorithm starts node finds reachable nodes set relationships connect nodes minimum weight traverses unvisited node lowest weight visited node avoiding cycles minimum weight spanning tree algorithm developed czech scientist otakar bor vka  prim algorithm invented  simplest prim algorithm dijkstra shortest path algorithm mini mizing total length path relationship minimizes length relationship individually dijkstra algorithm tolerates negative weight relationships minimum spanning tree algorithm operates demonstrated figure   figure   steps minimum spanning tree algorithm steps  tree node figure   start nodea  relationship smallest weight coming node selected tree connected node case  chapter  path nding graph search algorithms  process repeated choosing minimal weight relationship joins node tree compare sssp figure   llnotice fourth graph paths sssp evaluates shortest path based cumulative totals root minimum spanning tree cost step  nodes add tree minimum spanning tree variants algorithm tha maximum weight spanning tree highest cost tree spanning tree tree size limited minimum spanning tree minimum spanning tree route visit nodes route chosen based cost step visit nodes single walk review previous ƒsingle source shortest path  path single trip algorithm optimizing paths connected systems water pipes circuit design employed approximate problems unknown compute times traveling salesman problem types rounding problems absolute optimal solution algorithm complicated compute intensive analysis approachable cases include minimizing travel cost exploring country ƒan application minimum spanning trees travel planning describes algorithm analyzed airlineand sea connections visualizing correlations currency returns ƒmini mum spanning tree application currency market tracing history infection transmission outbreak informa tion ƒuse minim spanning tree model molecular epidemiolog ical investigation nosocomial outbreak hepatitis virus infection minimum spanning tree algorithm meaningful graph relationships weights graph weights relationships weight spanning tree minimum spanning tree minimum spanning tree  minimum spanning tree neo4jlet minimum spanning tree algorithm action query finds spanning tree starting amsterdam match place amsterdam algo spanningtree minimum place eroad distance write true writeproperty minst yield loadmillis computemillis writemillis effectivenodecount return loadmillis computemillis writemillis effectivenodecountthe parameters passed algorithm placethe node labels computing spanning tree eroadthe relationship types computing spanning tree distancethe relationship property cost traversing pair nodesid internal node node spanning tree query stores graph return minimum weight spanning tree query match path place amsterdam minst relationships path rels unwind rels rel distinct rel rel return startnode rel source endnode rel destination rel distance costand output query sourcedestinationcost amsterdamutrecht46  utrechtgouda35  goudarotterdam25  rotterdamden haag26  den haaghoek van holland27  hoek van hollandfelixstowe207  felixstoweipswich22  ipswichcolchester32  colchesterlondon106   chapter  path nding graph search algorithms sourcedestinationcost londondoncaster277  doncasterimmingham74  figure   minimum weight spanning tree amsterdam amsterdam wanted visit place dataset trip figure   demonstrates shortest continuous route random walkthe random walk algorithm set nodes random path graph term mentioned karl pearson  letter nature magazinetitled ƒthe problem random walk concept fur ther random walks applied network science random walk  random walk general drunkperson traverses city direction point reach circuitous route algorithm starts node randomly relation ships forward backward neighbor node node reaches set path length randomly number relationships node neighbors influences proba bility node walked random walk random walk algorithm algorithms data pipelines generate random set connected nodes cases include node2vec graph2vec algorithms create node embeddings node embeddings input neural network walktrap infomap community detection random walk returns small set nodes repeatedly node set community structure training process machine learning models fur ther david ack article ƒreview prediction neo4j tensorflow read cases paper masuda porter lambiotte ƒrandom walks diffusion networks random walk neo4jneo4j implementation random walk algorithm supports modes choosing relationship follow stage algorithm randomrandomly chooses relationship follow node2vecchooses relationship follow based computing probability distribution previous neighborsthe query match source place london algo randomwalk stream source   yield nodeids unwind algo getnodesbyid nodeids place return place place74 chapter  path nding graph search algorithms parameters passed algorithm source internal node starting point random walk5the number hops random walk the number random walks compute returns result placelondondoncasterimmingham amsterdam utrecht amsterdamat stage random walk relationship chosen randomly rerun algorithm parameters result walk figure   amsterdam den haag figure   random walk starting london summarypathfinding algorithms understanding data connec ted chapter started fundamental breadth depth algorithms moving dijkstra shortest path algorithms looked variants shortest path algorithms optimized finding shortest path node nodes pairs nodes graph finished random walk algorithm arbitrary sets paths summary  learn centrality algorithms influential nodes graph algorithm resourcethere algorithm books stands coverage fundamental concepts graph algorithms algorithm design manual steven skiena springer highly recommend textbook seeking comprehensiveresource classic algorithms design techniques simply dig deeper algorithms operate  chapter  path nding graph search algorithms chapter centrality algorithmscentrality algorithms understand roles nodes graphand impact network identify nodes understand group dynamics credibility accessi bility speed things spread bridges groups algorithms invented social network analysis variety industries fields cover algorithms degree centrality baseline metric connectedness closeness centrality measuring central node group including variations disconnected groups betweenness centrality finding control points including alternative approximation pagerank understanding influence including popular option personalization centrality algorithms produce based created measure suboptimal answers check algorithm aligned intended purpose explain algorithms work examples spark neo4j algorithm unavailable platform differences unimportant provide platform  figure   differences types questions centrality algorithmscan answer table   quick reference algorithm calculates figure   representative centrality algorithms types questions answer table   overview centrality algorithms algorithm type sparkexampleneo4j exampledegree centrality measures number relationships node estimating person popularity degree degree estimate gregariousnessyesno closeness centrality variations wasserman faust harmonic centrality calculates nodes shortest paths nodes finding optimal location public services maximum accessibilityyesyes betweenness centrality variation randomized approximate brandes measures number shortest paths pass node improving drug targeting nding control genes speci diseases noyes pagerankvariation personalizedpagerankestimates current node linked neighbors neighbors popularized google finding uentialfeatures extraction machine learning ranking text entity relevance natural language processing yesyes centrality algorithms calculate shortest paths pair nodes works small medium sizedgraphs large graphs computationally prohibitive avoid long runtimes larger graphs algorithms exam ple betweenness centrality approximating versions  chapter  centrality algorithms dataset examples walk importing data apache spark neo4j algorithm covered order listed table   start short description algorithm warranted operates variations algorithms covered include sections include guidance algorithm demonstrate code sample dataset started graph data social graphcentrality algorithms relevant graphs social networks provide relatable dynamic influence flow examples chapter small twitter graph download nodes relationships files create graph book github repository table   social nodes csv idalicebridgetcharles doug mark michael david amy jamestable   social relationships csv srcdstrelationship alicebridgetfollows alicecharlesfollows markdougfollows bridgetmichaelfollows dougmarkfollows michaelalicefollows alicemichaelfollows bridgetalicefollows michaelbridgetfollows graph data social graph  srcdstrelationship charlesdougfollows bridgetdougfollows michaeldougfollows alicedougfollows markalicefollows davidamyfollows jamesdavidfollows figure   illustrates graph construct figure   graph model ha larger set users connections smaller set withno connections larger group create graphs spark neo4j based contents csv files importing data apache sparkfirst import required packages spark graphframes package graphframes import pyspark import sparkcontextwe write code create graphframe based contents csv files spark read csv data social nodes csv header true spark read csv data social relationships csv header true graphframe  chapter  centrality algorithms importing data neo4jnext load data neo4j query imports nodes https github neo4j graph analytics book raw master data basewith base social nodes csv uri load csv headers uri row merge user row query imports relationships https github neo4j graph analytics book raw master data base base social relationships csv uri load csv headers uri row match source user row src match destination user row dst merge source destination graphs loaded algorithms degree centralitydegree centrality simplest algorithms cover book counts number incoming outgoing relationships node popular nodes graph degree centrality proposed linton free man  paper ƒcentrality social networks conceptual clarification reachunderstanding reach node fair measure nodes touch degree node number direct relation ships calculated degree degree reach node person high degree active social network lot contacts catch cold circulating network average degree network simply total number relationships divided total number nodes heavily skewed high degree nodes degree distribution probability randomly selected node num ber relationships figure   illustrates difference actual distribution connections subreddit topics simply average assume topics  connections fact topics  connections degree centrality  figure   mapping subreddit degree distribution jacob silterrapa average reƒect actual distribution networks   measures categorize network types scale free small networks discussed chapter  provide quick measureto estimate potential things spread ripple network degree centrality degree centrality attempting analyze influence number incoming outgoing relationships ƒpopularity individ ual nodes works concerned connectedness term probabilities degree centrality applied global analysis evaluate minimum degree maximum degree degree standard deviation entire graph cases include identifying powerful individuals relationships connections people social network brandwatch ƒmost influential men women twitter   people category  followers separating fraudsters legitimate users online auction site weigh ted centrality fraudsters higher collusion aimed  chapter  centrality algorithms artificially increasing prices read paper bangcharoensap ƒtwo step graph based semi supervised learning online auction fraud detection degree centrality apache sparknow execute degree centrality algorithm code total_degree degreesin_degree indegrees out_degree outdegrees total_degree join in_degree left join out_degree left fillna  sort indegree ascending false calculate total degrees join dataframes left join retain nodes incoming outgoing relationships nodes relationships set  fillnafunction result running code pyspark iddegreeindegreeoutdegree doug651 alice734 michael523 bridget523 charles211 mark312 david211 amy110 james101 figure   doug popular user twitter graph followers links users graph follow person real twitter network celebrities high follower counts tend follow people doug celebrity degree centrality  figure   visualization degree centrality creating showing users wanted peo ple follow algorithm identify people data dense nodes lots relationships add additional skew add computational complexity filter dense notes subgraph projection sum marize relationships weights closeness centralitycloseness centrality detecting nodes spread efficiently subgraph measure node centrality average farness inverse distance nodes nodes high closeness score shortest distances nodes node closeness centrality algorithm calculates sum distances nodes based calculating shortest paths pairs nodes sum inverted determine closeness centrality score node closeness centrality node calculated formula   du v84 chapter  centrality algorithms node number nodes graph shortest path distance node common normalize score represents average length shortest paths sum adjustment comparisons closeness centrality nodes graphs sizes formula normalized closeness centrality cnormu  n  vwhen closeness centrality apply closeness centrality nodes disseminate things fastest weighted relationships helpful evaluating inter action speeds communication behavioral analyses cases include uncovering individuals favorable positions control acquire vital resources organization study ƒmapping networks terrorist cells krebs heuristic estimating arrival time telecommunications package delivery content flows shortest paths predefined target light propagation shortest paths simultane ously infections spreading local community details ƒcentrality network flow borgatti evaluating document based graph based key phrase extraction process process oudin ƒa compari son centrality measures graph based keyphrase extraction closeness centrality works connected graphs original formula applied unconnected graph infinite distance nodes path infinite close ness centrality score sum distances node avoid issue variation original formula closeness centrality  closeness centrality apache sparkapache spark built algorithm closeness centrality write aggregatemessages framework introduced ƒshortest path weighted apache spark  previous chapter create function import libraries graphframes lib import aggregatemessages amfrom pyspark sql import functions pyspark sql types import operator import itemgetterwe create user defined functions def collect_paths paths return collect_set paths collect_paths_udf udf collect_paths arraytype stringtype paths_type arraytype structtype structfield stringtype structfield distance integertype def flatten ids flat_list item sublist ids item sublist return list dict sorted flat_list key itemgetter  items flatten_udf udf flatten paths_type def new_paths paths paths col1 distance col2  col1 col2 paths col1 paths append distance  return pathsnew_paths_udf udf new_paths paths_type def merge_paths ids new_ids joined_ids ids new_ids new_ids merged_ids col1 col2 col1 col2 joined_ids col1 best_ids dict sorted merged_ids key itemgetter  reverse true return col1 distance col2 col1 col2 best_ids items merge_paths_udf udf merge_paths paths_type  chapter  centrality algorithms def calculate_closeness ids nodes len ids total_distance sum col2 col1 col2 ids return  total_distance  nodes   total_distancecloseness_udf udf calculate_closeness doubletype main body calcula tes closeness centrality node vertices vertices withcolumn ids array cached_vertices getcacheddataframe vertices g2 graphframe cached_vertices edges range  g2 vertices count msg_dst new_paths_udf src ids src msg_src new_paths_udf dst ids dst agg g2 aggregatemessages collect_set msg alias agg sendtosrc msg_src sendtodst msg_dst res agg withcolumn newids flatten_udf agg drop agg new_vertices g2 vertices join res left_outer withcolumn mergedids merge_paths_udf ids newids drop ids newids withcolumnrenamed mergedids ids cached_new_vertices getcacheddataframe new_vertices g2 graphframe cached_new_vertices g2 edges g2 vertices withcolumn closeness closeness_udf ids sort closeness ascending false truncate false output idids closenessdoug charles  mark  alice  bridget  michael    alice charles  mark  bridget  doug  michael    david james  amy   bridget charles  mark  alice  doug  michael    michael charles  mark  alice  doug  bridget    james amy  david   amy james  david   mark bridget  charles  michael  doug  alice    charles bridget  mark  michael  doug  alice    alice doug david closely connected nodes graph   score directly connects nodes graph figure   illustrates david connections closeness centrality  group friends score represents closeness user subgraph entire graph figure   visualization closeness centrality closeness centrality neo4jneo4j implementation closeness centrality formula  n  vwhere node number nodes component subgraph group shortest path distance node procedure calculate closeness centrality nodes graph algo closeness stream user yield nodeid centrality return algo getnodebyid nodeid centrality order centrality descrunning procedure output usercentrality alice1  doug1   chapter  centrality algorithms usercentrality david1  bridget0  michael0  amy0  james0  charles0  mark0  spark algorithm score repre sents closeness subgraph entire graph strict interpretation closeness centrality algorithm nodes graph score node node unable reach implement score component ideally indication closeness graph sections learn variations closeness centrality algo rithm closeness centrality variation wasserman fauststanley wasserman katherine faust improved formula cal culating closeness graphs multiple subgraphs connections groups details formula book social network analysis methods applications result formula ratio fraction nodes group reachable average distance reachable nodes formula cwfu n n  n  vwhere node total node count number nodes component shortest path distance node closeness centrality  closeness centrality procedure formula passing parameter improved true query executes closeness centrality wasserman faust formula algo closeness stream user improved true yield nodeid centrality return algo getnodebyid nodeid user centrality order centrality descthe procedure result usercentrality alice0  doug0  bridget0  michael0  charles0  mark0  david0  amy0  james0  figure   representative closeness ofnodes entire graph scores members smaller subgraph david amy james dampened lowest scores users sense isolated nodes formula detecting node entire graph subgraph  chapter  centrality algorithms figure   visualization closeness centrality learn harmonic centrality algorithm ach ieves formula calculate closeness closeness centrality variation harmonic centralityharmonic centrality valued centrality variant closeness cen trality invented solve original problem unconnected graphs ƒharmony small marchiori latora proposed concept practical representation average shortest path calculating closeness score node summing distan ces node nodes sums inverse distances infinite values irrelevant raw harmonic centrality node calculated formula n du vwhere node number nodes graph shortest path distance node closeness centrality calculate normalized harmonic centrality formula closeness centrality  hnorm n du vn in formula values handled cleanly harmonic centrality neo4jthe query executes harmonic centrality algorithm algo closeness harmonic stream user yield nodeid centrality return algo getnodebyid nodeid user centrality order centrality descrunning procedure result usercentrality alice0  doug0  bridget0  michael0  charles0  mark0  david0  amy0  james0  algorithm differ original closeness centrality algorithm wasserman faust improvement algorithm working graphs connec ted component betweenness centralitysometimes cog overt power highest status middlemen connect groups brokers control resources flow betweenness centrality detecting influence node flow resources graph typically nodes serve bridge graph betweenness centrality algorithm calculates shortest weighted path pair nodes connected graph node receives score based number shortest paths pass node shortest paths node lies higher score  chapter  centrality algorithms betweenness centrality considered ƒthree distinct intuitive concep tions centrality introduced linton freeman  paper ƒa set measures centrality based betweenness bridges control pointsa bridge network node relationship simple graph node relationship removed tion graph disconnected practical typical graph betweenness centrality algorithm measure ness cluster treating group node node considered pivotal nodes lies shortest path nodes figure   figure   pivotal nodes lie shortest path nodes creating shortest paths reduce number pivotal nodes risk mitigation pivotal nodes play role connecting nodes remove piv otal node shortest path original node pairs longer costly consideration evaluating single points vulnerability calculating betweenness centralitythe betweenness centrality node calculated adding follow ing formula shortest paths tpupwhere node total number shortest paths nodes betweenness centrality  number shortest paths nodes pass node figure   illustrates steps working betweenness centrality figure   basic concepts calculating betweenness centrality procedure  node shortest paths shortest paths assigned   shortest path step  calculate percentage total shortest paths tha pair  add values step  node betweenness centrality score table figure   illustrates steps   node  repeat process node betweenness centrality betweenness cen trality applies wide range problems real networks bottlenecks control points vulnerabilities cases include identifying influencers organizations powerful individuals management positions ƒbrokerage positions betweenness centrality removal influencers destabi lize organization considered disruption law enforcement organization criminal disaster business loses key staff underestimated details ƒbrokerage qualifica tions ringing operations morselli roy  chapter  centrality algorithms uncovering key transfer points networks electrical grids counterin tuitively removal specific bridges improve robustness byƒislanding disturbances details included ƒrobustness theeuropean power grids intentional attack sol helping microbloggers spread reach twitter recommendation engine targeting influencers approach pa wu ƒmaking recommendations microblog improve impact focal user betweenness centrality assumption communica tion nodes shortest path frequency case real life perfect view influential nodes graph good representation mark newman explains networks introduction oxford university press p186 betweenness centrality neo4jspark built algorithm betweenness centrality demon strate algorithm neo4j procedure calculate betweenness centrality nodes graph algo betweenness stream user yield nodeid centrality return algo getnodebyid nodeid user centrality order centrality descrunning procedure result usercentrality alice10  doug7  mark7  david1  bridget0  charles0  michael0  amy0  james0  betweenness centrality  figure   alice main broker network mark anddoug smaller subgraph shortest paths david flow nodes figure   visualization betweenness centrality large graphs exact centrality computation practical fastest algorithm computing betweenness nodes runtime proportional product number nodes number relationships filter subgraph works subset nodes join disconnected components introducing user called jason people groups users james michael alice doug amy existingusersmatch existing user existing existingusersmerge newuser user jason merge newuser existing merge newuser existing rerun algorithm output  chapter  centrality algorithms usercentrality jason44  doug18  alice16  amy8  james8  michael4  mark2  david0  bridget0  charles0  jason highest score communication sets users pass jason local bridge sets ofusers illustrated figure   figure   visualization betweenness centrality jason reset graph deleting jason relationships match user user jason detach delete user betweenness centrality  betweenness centrality variation randomized approximatebrandesrecall calculating exact betweenness centrality large graphs expensive choose approximation algorithm runs faster albeit imprecise randomized approximate brandes brandes short algorithm algorithm calculating approximate score betweenness central ity calculating shortest path pair nodes brandes algorithm considers subset nodes common strategies selecting subset nodes randomnodes selected uniformly random defined probability selection default probability log ne2 probability  algorithm works sameway normal betweenness centrality algorithm nodes loaded degreenodes selected randomly degree lower automatically excluded nodes lot relationships chance visited optimization limit depth shortest path algo rithm provide subset shortest paths approximation betweenness centrality neo4jthe query executes brandes algorithm random selection method algo betweenness sampled stream user strategy degree yield nodeid centrality return algo getnodebyid nodeid user centrality order centrality desc running procedure result usercentrality alice9  mark9  doug4   chapter  centrality algorithms usercentrality david2  bridget0  charles0  michael0  amy0  james0  influencers mark higher ranking doug random nature algorithm time larger graphs randomness impact small sample graph pagerankpagerank centrality algorithms measures transitive directional influence nodes centrality algorithms discuss meas ure direct influence node pagerank considers influence node neighbors neighbors powerful friends influential lot powerful friends pag erank computed iteratively distributing node rank neigh bors randomly traversing graph counting frequency node hit walks pagerank named google cofounder larry created rank web sites google search basic assumption incom ing influential incoming links credible source pagerank measures number quality incoming relationships node determine estimation node nodes sway network presumed incoming relationships influential nodes uencethe intuition influence relationships nodes contrib ute influence node question equivalent connections lessimportant nodes measuring influence involves scoring nodes weighted relationships updating scores iterations times nodes scored random selection representa tive distribution pagerank  mind centrality measures represent node comparison nodes centrality ranking thepotential impact nodes measure actual impact identify people highest cen trality network policies cultural norms play shift influence quantifying actual impact active area develop additional influence metrics pagerank formulapagerank defined original google paper  dpr t1ct1 ctn assume citations damping factor set   set   probability user continue clicking helps minimize rank sink explained  probability node reached directly rela tionships defined degree node figure   walks small agerank continue update rank node converges meets set number iterations  chapter  centrality algorithms figure   iteration pagerank calculation steps update node values update link values pagerank  iteration random surfers rank sinkspagerank iterative algorithm runs scores converge set number iterations reached conceptually pagerank assumes web surfer visiting links random damping factor _d _ defines probability click link probability surfer bored randomly switch pagerank score repre sents likelihood visited incoming link randomly node group nodes outgoing relationships called dangling node monopolize pagerank score refusing share rank sink imagine surfer stuck subset difficulty created nodes point group circular references increase ranks surfer bounces nodes situations portrayed figure   figure   rank sink caused node group nodes outgoing rela tionships strategies avoid rank sinks node reached outgoing relationships pagerank assumes outgoing relationships nodes traversing invisible links called teleportation damping factor opportunity avoid sinks introducing probability direct link versus random node visitation set   completely dom node visited  time  chapter  centrality algorithms original formula recommends damping factor   initial wide web power law distribution links links lowering damping factor decreases likelihood long relationship paths random jump turn increases contribution node predecessors score rank unexpected pagerank worth exploratory analysis graph problems read ian rogers article ƒthe google pagerank algorithm works learn pagerank pagerank domains web indexing algorithm broad influence network instance target gene highest impact biological function connected fact gene rela tionships functions cases include presenting users recommendations accounts follow twitter ersonalized pagerank algorithm graph shared interests common connections approach paper ƒwtf follow service twit ter gupta predicting traffic flow human movement public spaces streets algorithm graph road intersections pagerank score reflects tendency people park journey street ƒself organized natural roads predicting traf fic flow sensitivity study paper jiang zhao yin anomaly fraud detection systems healthcare insurance industries pager ank helps reveal doctors providers behaving unusual manner scores fed machine learning algorithm david gleich describes algorithm paper ƒpagerank web pagerank apache sparknow ready execute pagerank algorithm graphframes supports implementations pagerank pagerank  implementation runs pagerank fixed number iterations setting maxiter parameter implementation runs pagerank convergence setting tol parameter pagerank xed number iterationslet fixed iterations approach pagerank resetprobability   maxiter  vertices sort pagerank ascending false notice spark damping factor intuitively called reset probability inverse resetprobability   equivalent dampingfactor   neo4j code pyspark output idpagerank doug2  mark2  alice1  michael0  bridget0  charles0  amy0  david0  james0  expect doug highest pagerank users subgraph mark follower follower doug mark considered graph number followers followers relationships graph pagerank algo rithm weights relationship considered equal relationship weights weight column inthe relationships dataframe  chapter  centrality algorithms pagerank convergenceand convergence implementation pagerank closes solution set tolerance pagerank resetprobability   tol   vertices sort pagerank ascending false code pyspark output idpagerank doug2  mark2  alice1  michael0  bridget0  amy0  charles0  david0  james0  pagerank scores person fixed number iterations variant expect order remains convergence perfect solution sound ideal scenarios pagerank mathematically converge larger graphs pagerank execution prohibitively long tolerance limit helps set acceptable range converged result choose combine approach maxi mum iteration option maximum iteration setting generally provide performance consistency option choose test limits works dataset larger graphs typcially require iterations smaller tolerance medium sized graphs accuracy pagerank neo4jwe pagerank neo4j procedure calculate pagerank nodes graph algo pagerank stream user iterations  dampingfactor   yield nodeid score return algo getnodebyid nodeid score order score descpagerank  running procedure result pagescore doug1  mark1  alice1  bridget0  michael0  amy0  charles0  david0  james0  spark doug influential user mark closely user doug nodes relative figure   pagerank implementations vary produce scoring ordering neo4j initializes nodes  minus dampening factor spark  case relative rankings goal pag erank identical underlying score values reach figure   visualization pagerank  chapter  centrality algorithms spark relationships graph pagerank algorithm weights rela tionship considered equal relationship weights consid ered including weightproperty property configpassed pagerank procedure relationships property weight weights pass fol lowing config procedure weightproperty weight pagerank variation personalized pagerankpersonalized pagerank ppr variant pagerank algorithm calculates nodes graph perspective specific node ppr random jumps refer set starting nodes biases personalizes start node bias localization ppr highly targeted recommendations personalized pagerank apache sparkwe calculate personalized pagerank score node passing sourceid parameter code calculates ppr doug doug pagerank resetprobability   maxiter  sourceid people_to_follow vertices sort pagerank ascending false already_follows list edges filter src topandas dst people_to_exclude already_follows people_to_follow people_to_follow isin people_to_exclude query recommendations people doug follow notice making exclude people doug final result code pyspark output idpagerank alice0  michael0  bridget0  charles0  david0  james0  amy0  pagerank  alice suggestion doug follow sug gest michael bridget summarycentrality algorithms excellent tool identifying influencers network chapter learned prototypical centrality algorithms degree cen trality closeness centrality betweenness centrality pagerank cov ered variations deal issues long runtimes isolated components options alternative wide ranging centrality algorithms encourage exploration variety analyses apply learned locate opti mal touch points disseminating hidden brokers control flow resources uncover indirect power players lurking shadows turn community detection algorithms groups parti tions  chapter  centrality algorithms chapter community detection algorithmscommunity formation common types networks identifying essential evaluating group behavior emergent phenomena general prin ciple finding communities members relationships group nodes group identifying sets reveals clusters nodes isolated groups network structure helps infer behavior preferences peer groups estimate resiliency nested relationships prepare data analyses community detection algorithms commonly produce network visualization general inspection provide details representative community detection algorithms triangle count clustering coefficient relationship density connected components connected components finding nected clusters label propagation inferring groups based node labels louvain modularity grouping quality hierarchies explain algorithms work examples apache spark neo4j cases algorithm platform provide weighted relationships algorithms typically capture significance relationships figure   overview differences community detection algorithms covered table   quick reference algorithm calculates  figure   representative community detection algorithms terms set partition cluster group community inter changeably terms ways nodes grouped community detection algorithms called clustering partitioning algorithms terms prominent literature partic ular algorithm  chapter  community detection algorithms table   overview community detection algorithms algorithm typewhat sparkexampleneo4j exampletriangle count clustering coe cientmeasures nodes form triangles degree nodes tend cluster togetherestimating group stability network exhibit ƒsmall behaviors graphs tightly knit clustersyesyes connected componentsfinds groups node reachable node group direction relationships making product recommendations based group liation items yesyes connected components finds groups node reachable node group direction relationships performing fast grouping algorithms identify islandsyesyes label propagation infers clusters spreading labels based neighborhood majoritiesunderstanding consensus social communities ndingdangerous combinations prescribed drugs yesyes louvain modularity maximizes presumed accuracy groupings comparing relationship weights densities nedestimate average fraud analysis evaluating group discrete bad behaviors acting fraud ring noyes data examples walk importing data spark neo4j algorithms covered order listed table   short description advice sections include guidance algorithms demonstrate code sample data algorithm community detection algorithms conscious density relationships graph dense nodes congre gating clusters counteract fil tering degree relationship weights similarity metrics hand graph sparse connected nodes node cluster case incorporate additional relationship types carry relevant community detection algorithms  graph data software dependency graphdependency graphs suited demonstra ting sometimessubtle differences community detection algorithms tend connected hierarchical examples chapter graph dependencies python libraries dependency graphs fields software energy grids kind software dependency graph developers track transitive interdependencies conflicts software projects download nodes files book github repository table   sw nodes csv idsixpandasnumpy python dateutil pytz pyspark matplotlib spacy py4j jupyter jpy console nbconvert ipykernel jpy client jpy coretable   sw relationships csv srcdstrelationship pandasnumpydepends_on pandaspytzdepends_on pandaspython dateutildepends_on python dateutilsixdepends_on pysparkpy4jdepends_on matplotlibnumpydepends_on matplotlibpython dateutildepends_on matplotlibsixdepends_on  chapter  community detection algorithms srcdstrelationship matplotlibpytzdepends_on spacysixdepends_on spacynumpydepends_on jupyternbconvertdepends_on jupyteripykerneldepends_on jupyterjpy consoledepends_on jpy consolejpy clientdepends_on jpy consoleipykerneldepends_on jpy clientjpy coredepends_on nbconvertjpy coredepends_on figure   graph construct graph clusters libraries visualizations smaller datasets tool validate clusters derived community detection algorithms figure   graph model graph data software dependency graph  create graphs spark neo4j csv files importing data apache sparkwe import packages apache spark graphframes package graphframes import function creates graphframe csv files def create_software_graph nodes spark read csv data sw nodes csv header true relationships spark read csv data sw relationships csv header true return graphframe nodes relationships function create_software_graph importing data neo4jnext neo4j query imports nodes https github neo4j graph analytics book raw master data base base sw nodes csv uri load csv headers uri row merge library row imports relationships https github neo4j graph analytics book raw master data base base sw relationships csv uri load csv headers uri row match source library row src match destination library row dst merge source depends_on destination graphs loaded algorithms triangle count clustering coe cientthe triangle count clustering coefficient algorithms presented triangle count determines number tri angles passing node graph triangle set nodes node relationship nodes triangle count globally evaluating dataset  chapter  community detection algorithms networks high number triangles exhibit small structures behaviors goal clustering coefficient algorithm measure tightly group clustered compared tightly clustered algorithm triangle count calculations ratio existing triangles rela tionships maximum  clique node connected node types clustering coefficients local clustering global clustering local clustering coe cientthe local clustering coefficient node likelihood neighbors connected computation score involves triangle counting clustering coefficient node multiplying number trian gles passing node diving maximum number relationships group degree node minus examples triangles clustering coefficients node rela tionships portrayed figure   figure   triangle counts clustering coe cients node note figure   node relationships clustering coefficient equate  number triangles case alter number relationships change relationships triangles coef ficient   clustering coefficient node formula triangle count clustering coe cient  rukuku where node number relationships neighbors beobtained number triangles passing degree global clustering coe cientthe global clustering coefficient normalized sum local clustering coeffi cients clustering coefficients effective obvious groups cliques node relationship nodes thresholds set levels nodes  connected triangle count clustering coe cient triangle count determine stability group calculating network measures clustering coefficien triangle count ing popular social network analysis detect communities clustering coefficient provide probability randomly chosen nodes connected evaluate cohesiveness specific group network algorithms estimate resil iency network structures cases include identifying features classifying website spam content ƒefficient semi streaming algorithms local triangle counting massive graphs paper becchetti investigating community structure facebook social graph researchers dense neighborhoods users sparse global graph study paper ƒthe anatomy facebook social graph ugander exploring thematic structure web detecting communities common topics based reciprocal links infor mation ƒcurvature links uncovers hidden thematic layers wide web eckmann moses  chapter  community detection algorithms triangle count apache sparknow ready execute triangle count algorithm code result trianglecount result sort count ascending false filter count  code pyspark output countid jupyter python dateutil six ipykernel matplotlib jpy console triangle graph node neighbors neigh bors libraries participate triangles nodes triangles triangle stream neo4j triangles neo4jgetting stream triangles spark return neo4j algo triangle stream library depends_on yield nodea nodeb nodec return algo getnodebyid nodea nodea algo getnodebyid nodeb nodeb algo getnodebyid nodec nodecrunning procedure result nodeanodebnodec matplotlibsixpython dateutil jupyterjpy consoleipykernel libraries connec ted matplotlib python dateutil form triangle jupyter jpy console ipykernel form triangle count clustering coe cient  triangles visually figure   figure   triangles ware dependency graph local clustering coe cient neo4jwe work local clustering coefficient query calcu late node algo trianglecount stream library depends_on yield nodeid triangles coefficient coefficient  return algo getnodebyid nodeid library coefficient order coefficient descrunning procedure result librarycoe cientipykernel1  jupyter0  jpy console0  six0  python dateutil0   chapter  community detection algorithms librarycoe cientmatplotlib0  ipykernel score  ipykernel neighbors neighbors figure   tells community directly ipykernel cohesive filtered nodes coefficient score  code sample nodes low coefficients interesting low score indicator node structural hole node connected nodes munities connected method finding potential bridges discussed chapter  connected componentsthe connected components scc algorithm earliest graph algorithms scc finds sets connected nodes directed graph node reachable directions node set runtime opera tions scale proportional number nodes figure   nodes scc group neighbors directional paths nodes set figure   connected components connected components  decomposing directed graph connected compo nents classic application depth search algorithm neo4j dfs hood implementation scc algorithm connected components connected components early step graph analysis graph structured identify tight clusters warrant independent investi gation component connected profile behav ior inclinations group applications recommendation engines community detection algorithms scc collapse clusters single nodes intercluster analysis scc visualize cycles analyses finding processes deadlock subpro cess waiting member action cases include finding set firms member directly indirectly owns shares member ƒthe network global corporate control analysis powerful transnational corporations vitali glattfelder battiston computing connectivity network configurations measuring routing performance multihop wireless networks read ƒrouting formance presence unidirectional links multihop wireless net works marina das acting step graph algorithms work nected graphs social networks man connected groups inthese sets people preferences scc algorithm groups products purchase peoplein group algorithms strategies escaping infinite loops writing algorithms finding nonterminating pro cesses scc check cycles connected components apache sparkstarting apache spark import packages spark graphframes package  chapter  community detection algorithms graphframes import pyspark sql import functions fnow ready execute connected components algorithm work circular dependencies graph nodes connected component paths directions write code result stronglyconnectedcomponents maxiter  result sort component groupby component agg collect_list alias libraries truncate false code pyspark output componentlibraries  jpy core  spacy  numpy    nbconvert  ipykernel  jupyter  jpy client  pytz  python dateutil  pyspark  matplotlib  jpy console  py4j notice library node assigned unique component partition subgroup belongs expected node isin partition software project circular dependenciesamongst libraries connected components  connected components neo4jlet algorithm neo4j execute query algorithm algo scc stream library depends_on yield nodeid partition return partition collect algo getnodebyid nodeid libraries order size libraries descthe parameters passed algorithm librarythe node label load graph depends_onthe relationship type load graph output query partitionlibraries  ipykernel   matplotlib  jupyter  python dateutil  numpy  py4j  nbconvert  pyspark  jpy core  jpy client  spacy   jpy console  pytz spark node partition algorithm revealed python libraries behaved create circular dependency graph things interesting nodes partition query adds extra library creates circular dependency py4j pyspark  chapter  community detection algorithms match py4j library py4j match pyspark library pyspark merge extra library extra merge py4j depends_on extra merge extra depends_on pyspark circular dependency created figure   figure   circular dependency pyspark py4j extra scc algorithm result partitionlibraries  pyspark py4j extra  ipykernel   matplotlib  jupyter  numpy   nbconvert  jpy core  jpy client  spacy  python dateutil  jpy console  pytz pyspark py4j extra partition sccs helped findthe circular dependency connected components  algorithm delete extra library relation ships graph match extra library extra detach delete extraconnected componentsthe connected components algorithm called union weakly connected components finds sets connected nodes undirected graph node reachable node set differs scc algorithm path exist pairs nodes direc tion scc path exist directions bernard galler michael fischer algorithm  paper ƒan improved equivalence algorithm connected components scc connected components early analysis understand graph structure scales efficiently algorithm graphs requiring frequent updates nodes common groups analysis fraud detection habit connected components test graph connected preparatory step general graph analysis performing quick test avoid accidentally running algorithms disconnected component graph incorrect cases include keeping track clusters database records deduplication pro cess deduplication task master data management applica tions approach ƒan efficient domain independent algorithm detecting duplicate database records monge elkan analyzing citation networks study connected components work connected network connectivityremains ƒhub ƒauthority nodes moved graph case explained ƒcharacterizing mining citation graph computer science literature paper janssen milios  chapter  community detection algorithms connected components apache sparkstarting apache spark import packages spark graphframes package pyspark sql import functions fnow ready execute connected components algorithm nodes connected component path direction write code result connectedcomponents result sort component groupby component agg collect_list alias libraries truncate false code pyspark output componentlibraries  jpy core nbconvert ipykernel jupyter jpy client jpy console  spacy numpy pytz python dateutil matplotlib  pyspark py4j clusters nodes figure   connected components  figure   clusters connected components algorithm easy components visual inspection algorithm larger graphs visual inspection time consuming connected components neo4jwe execute algorithm neo4j running query algo unionfind stream library depends_on yield nodeid setid return setid collect algo getnodebyid nodeid libraries order size libraries descthe parameters passed algorithm librarythe node label load graph depends_onthe relationship type load graph output  chapter  community detection algorithms setidlibraries  pytz matplotlib spacy numpy python dateutil  jupyter jpy console nbconvert ipykernel jpy client jpy core  pyspark py4j expected spark community detection algorithms covered determinis tic return time algorithms areexamples nondeterministic algorithms multiple times data label propagationthe label propagation algorithm lpa fast algorithm finding communities graph lpa nodes select group based direct neighbors pro cess suited networks groupings clear weights node determine community place lends semisupervised learning seed process preassigned indicative node labels intuition algorithm single label domi nant densely connected group nodes trouble crossing sparsely connected region labels trapped inside densely connected group nodes nodes label algorithm finishes considered community algorithm resolves overlaps nodes multiple clusters assigning membership label neighborhood highest combined relationship node weight lpa algorithm proposed  raghavan albert kumara paper titled ƒnear linear time algorithm detect community structures large scale networks figure   depicts variations label propagation simple push method typical pull method relies relationship weights pull method lends parallelization label propagation  figure   variations label propagation steps label propagation pull method  node initialized unique label identifier optionally pre liminary ƒ seed labels  labels propagate network  propagation iteration node updates label match maximum weight calculated based weights neighbor nodes relationships ties broken uniformly randomly  lpa reaches convergence node majority label neighbors  chapter  community detection algorithms labels propagate densely connected groups nodes reach consensus unique label propagation labels remain nodesthat label belong community semi supervised learning seed labelsin contrast algorithms label propagation return community structures multiple times graph order lpa eval uates nodes influence final communities returns range solutions narrowed nodes preliminary labels seed labels unlabeled unlabeled nodes adopt preliminary labels label propagation considered semi supervised learning method communities semi supervised learning class machine learning tasks techniques operate small labeled data larger unlabeled data algorithm repeatedly graphs evolve finally lpa converge single solution situation community continually flip remarkably communi ties algorithm complete seed labels guide solu tion spark neo4j set maximum number iterations avoid execution test iteration setting data balance accuracy execution time label propagation label propagation large scale networks initial community detection espe cially weights algorithm parallelized extremely fast graph partitioning cases include assigning polarity tweets semantic analysis scenario posi tive negative seed labels classifier combination thetwitter follower graph ƒtwitter polarity classification label propagation lexical links follower graph sper iosu finding dangerous combinations prescribed drugs based chemical similarity profiles ƒlabel propagation prediction drug drug interactions based clinical effects paper zhang label propagation  inferring dialogue features user intention machine learning model ƒfeature inference based label propagation wiki data graph dst paper murase label propagation apache sparkstarting apache spark import packages spark graphframes package pyspark sql import functions fnow ready execute label propagation algorithm write code result labelpropagation maxiter  result sort label groupby label agg collect_list truncate false code pyspark output labelcollect_list  jpy core jpy console jupyter  matplotlib spacy  python dateutil numpy pytz   nbconvert ipykernel jpy client  pyspark  py4j compared connected components clusters libraries lpa strict connected components respect deter mines clusters neighbors directly connected nodes dif ferent clusters label propagation connected components node cluster neighbors algorithm bases grouping strictly relationships obvious difference jupyter libraries split communities core parts library client facing tools  chapter  community detection algorithms label propagation neo4jnow algorithm neo4j execute lpa running fol lowing query algo labelpropagation stream library depends_on iterations  yield nodeid label return label collect algo getnodebyid nodeid libraries order size libraries descthe parameters passed algorithm librarythe node label load graph depends_onthe relationship type load graph iterations the maximum number iterations labellibraries  matplotlib spacy python dateutil  jupyter jpy console nbconvert jpy client jpy core  pyspark py4j  ipykernel  numpy  pytz visually figure   fairly thosewe apache spark label propagation  figure   clusters label propagation algorithm algorithm assuming graph undirected nodes adopt labels libraries depend depend pass direction parameter algorithm algo labelpropagation stream library depends_on iterations  direction yield nodeid label return label collect algo getnodebyid nodeid libraries order size libraries descif output labellibraries  pytz matplotlib spacy numpy python dateutil  nbconvert jpy client jpy core  jupyter jpy console ipykernel  pyspark py4j  chapter  community detection algorithms number clusters reduced nodes matplot lib graph grouped infigure   figure   clusters label propagation algorithm ignoring relation ship direction running label propagation data undir ected directed calculation complicated graphs differences ignoring direction nodes adopt labels relationship source louvain modularitythe louvain modularity algorithm finds clusters comparing community density assigns nodes groups ƒwhat analysis groupings goal reaching global optimum proposed  louvain algorithm fastest modularity based algo rithms detecting communities reveals hierarchy communities louvain modularity  scales understanding structure network dif ferent levels granularity louvain quantifies node assigned group density connections cluster comparison average random sample measure community assignment called modularity quality based grouping modularitymodularity technique uncovering communities partitioning graph coarse grained modules clusters measuring strength thegroupings opposed concentration connections cluster method compares relationship densities clusters densities clusters measure quality groupings called modularity modularity algorithms optimize communities locally globally multi ple iterations test groupings increasing coarseness strategy identifies community hierarchies broad understanding structure modularity algorithms suffer drawbacks merge smaller communities larger plateau occur partition options modularity forming local maxima preven ting progress paper ƒthe performance modularity maximization practical contexts good montjoye clauset calculating modularitya simple calculation modularity based fraction relationships groups minus expected fraction relationships distributed dom nodes   positive values indicating relationship density expect chance negative values indicating density figure   illustrates modularity scores based node groupings  chapter  community detection algorithms figure   modularity scores based erent partitioning choices formula modularity group nclcl kc2l2where number relationships entire group number relationships partition kc total degree nodes partition calculation optimal partition figure   dark partition     light partition           louvain modularity  initially louvain modularity algorithm optimizes modularity locally nodes finds small communities small community grouped larger conglomerate node step repeated reach global optimum algorithm consists repeated application steps illustrated figure   figure   louvain algorithm process louvain algorithm steps include  ƒgreedy assignment nodes communities favoring local optimizations modularity  chapter  community detection algorithms  definition coarse grained network based communities step coarse grained network itera tion algorithm steps repeated modularity increasing reassignments communities optimization step evaluating modularity group louvain formula accomplish m vauv kukv2m cvwhere nodes total relationship weight entire graph m common malization modularity formulas auv kukv2m strength relationship compared whatwe expect random assignment averages nodes network auv weight relationship ku sum relationship weights kv sum relationship weights equal  assigned community  step evaluates change modularity node moved group louvain complicated variation formula determines group assignment louvain louvain modularity communities vast networks algorithm applies heuristic opposed exact modularity computationally expen sive louvain large graphs standard modularity algo rithms struggle louvain helpful evaluating structure complex networks ticular uncovering levels hierarchies crimi nal organization algorithm provide zoom levels granularity subcommunities subcommunities subcommunities louvain modularity  cases include detecting cyberattacks louvain algorithm  study shanbhaq fast community detection large scale cybernetworks cyberse curity applications communities detected detect cyberattacks extracting topics online social platforms twitter youtube based occurence terms documents topic modeling process approach paper kido igawa barbon ƒtopic modeling based louvain method online social networks finding hierarchical community structures brain functional network ƒhierarchical modularity uman brain functional networks meunier modularity optimization algorithms including louvain suffer issues algorithms overlook small commun ities large networks overcome problem reviewing intermediate consolidation steps large graphs overlapping communities modularity optimizers correctly determine global maxima case recommend modularity algorithm guide gross estimation complete accuracy louvain neo4jlet louvain algorithm action execute query algorithm graph algo louvain stream library depends_on yield nodeid communities return algo getnodebyid nodeid libraries communitiesthe parameters passed algorithm librarythe node label load graph depends_onthe relationship type load graph librariescommunities pytz    chapter  community detection algorithms librariescommunities pyspark   matplotlib   spacy   py4j   jupyter   jpy console   nbconvert   ipykernel   jpy client   jpy core       numpy   python dateutil   communities column describes community nodes fall levels array final community intermedi ate community numbers assigned intermediate final communities simply labels measurable meaning treat labels community nodes belong ƒbelongs community labeled  ƒa community labeled  matplotlib result   matplotlib final munity labeled  intermediate community labeled  easier works store communities write version algorithm query query lou vain algorithm store result communities property node algo louvain library depends_on store communities streaming version algorithm calling set clause store result query algo louvain stream library depends_on yield nodeid communities algo getnodebyid nodeid node communities set node communities communitiesonce queries write query final clusters louvain modularity  match library return communities  community collect libraries order size libraries descl communities  returns item underlying array tha propertystores running query yields output communitylibraries  pytz matplotlib spacy numpy python dateutil  jupyter jpy console nbconvert ipykernel jpy client jpy core  pyspark py4j clustering connected components algorithm matplotlib community pytz spacy numpy python dateutil figure    chapter  community detection algorithms figure   clusters louvain algorithm additional feature louvain algorithm intermediate clustering finer grained clusters final layer match library return communities  community collect libraries order size libraries descrunning query output communitylibraries  matplotlib spacy python dateutil  nbconvert jpy client jpy core louvain modularity  communitylibraries  jupyter jpy console ipykernel  pyspark py4j  pytz  numpy libraries matplotlib community broken smaller communities tplotlib spacy python dateutil pytz numpy breakdown visually figure   figure   intermediate clusters louvain algorithm  chapter  community detection algorithms graph layers hierarchy algorithm larger graph complex hierarchy intermediate clusters louvain reveals detecting fine grained communities detected community detection algorithms validating communitiescommunity detection algorithms generally goal identify groups algorithms assumptions uncover communities choosing algorithm partic ular problem challenging bit exploration community detection algorithms relationship density high groups compared surroundings real networks distinct validate accuracy communities paring benchmark based data communities benchmarks girvan newman gn lancichi netti fortunato radicchi lfr algorithms reference networks algo rithms generate gn generates random network homogeneous lfr creates heterogeneous graph node degrees community size distributed power law accuracy testing depends benchmark match benchmark dataset densities relationship distributions community definitions domains summarycommunity detection algorithms understanding nodes grouped graph chapter started learning triangle count clustering coef ficient algorithms moved deterministic community detection algorithms connected components connected components algorithms strict definitions constitutes community ful feel graph structure early graph analytics pipeline finished label propagation louvain nondeterministic algorithms detect finer grained communities louvain hierarchy communities scales chapter larger dataset learn combine algorithms gain insight connected data validating communities  chapter graph algorithms practicethe approach graph analysis evolves familiar thebehavior algorithms specific datasets chapter examples feeling tackle large scale graph data analysis datasets yelp department transportation walk yelp data analysis neo4j includes general overview data combining algorithms trip recommendations mining user business data consulting spark airline data understand traffic pat terns delays airports connected airlines pathfinding algorithms straightforward examples cen trality community detection algorithms pagerank influential yelp reviewers correlate ratings specific hotels betweenness centrality uncover reviewers connected multiple groups extract preferences label propagation projection create supercategories yelp businesses degree centrality identify airport hubs transport dataset connected components clusters airport routes analyzing yelp data neo4jyelp helps people local businesses based reviews preferences recommen dations  reviews written platform    yelp yelp dataset challenge competition encour ages people explore yelp open dataset round  conducted  challenge open dataset contained  reviews tips   users   pictures   businesses   attributes  metropolitan areas launch taset popular hundreds academic papers written material yelp dataset represents real data structured highly interconnected great showcase graph algorithms download explore yelp social networkas writing reading reviews businesses users yelp form social network users send friend requests users browsing yelp connect address books facebook graphs yelp dataset includes social network figure   screen capture friends mark yelp profile figure   mark yelp pro leapart fact mark friends ready start illus trate migh analyze yelp data neo4j scenario work travel business explore yelp data  chapter  graph algorithms practice people plan trips app walk finding good recom mendations places stay things major cities las vegas business scenario involve consulting travel destination businesses hotels identify influential visitors busi nesses target cross promotion programs data importthere methods importing data neo4j including import tool load csv command earlier chapters neo4j drivers yelp dataset import large data import tool choice ƒneo4j bulk data import yelp  details graph modelthe yelp data represented graph model figure   figure   yelp graph model graph user labeled nodes friends relationships users users write reviews tips businesses metadata stored properties nodes business categories represented separate category nodes location data extracted city area countryattributes subgraph cases sense extract attributes nodes dates collapse nodes relationships reviews yelp dataset includes user tips photos analyzing yelp data neo4j  quick overview yelp dataonce data loaded neo4j execute exploratory queries nodes category types relations exist feel yelp data cypher queries neo4j examples executing programming language python language data scientists neo4j python driver connect libraries python ecosystem result query cypher directly combine neo4j popular library effective data wrangling database tabulate library prettify create visual representa tions data matplotlib neo4j apoc library procedures write powerful cypher queries apoc ƒapoc neo4j tools  install python libraries pip install neo4j driver tabulate matplotlib import libraries neo4j v1 import graphdatabaseimport tabulate import tabulateimporting matplotlib fiddly macos lines trick import matplotlib matplotlib tkagg import matplotlib pyplot pltif running operating middle required create instance neo4j driver pointing local neo4j database driver graphdatabase driver bolt localhost neo4j neo update initialization driver host credentials started general numbers nodes relationships code calculates cardinalities node labels counts number nodes label database  chapter  graph algorithms practice result label count driver session session labels row label row session db labels label labels query match label return count count count session query single count result label append label result count append count dataframe data result print tabulate sort_values count headers keys tablefmt psql showindex false code nodes label labelcountcountry17area54city1093category1293business174567user1326101review5261669we create visual representation cardinalities code plt style fivethirtyeight plot kind bar label count legend xaxis set_label_text plt yscale log plt xticks rotation  plt tight_layout plt chart generated code figure   note chart log scale analyzing yelp data neo4j  figure   number nodes label category calculate cardinalities relationships result reltype count driver session session rel_types row relationshiptype row session db relationshiptypes rel_type rel_types query match rel_type return count count count session query single count result reltype append rel_type result count append count dataframe data result print tabulate sort_values count headers keys tablefmt psql showindex false code number type relationship reltypecountin_country54in_area1154in_city174566in_category667527wrote5261669reviews5261669friends10645356150 chapter  graph algorithms practice chart cardinalities figure   node cardinalitieschart chart log scale figure   number relationships relationship type queries reveal surprising feel data serves quick check data imported correctly assume yelp hotel reviews sense check focus sector hotel businesses data reviews running query match category category hotels return size category in_category businesses size review reviews business in_category category reviewshere result businessesreviews  businesses work lot reviews llexplore data business scenario analyzing yelp data neo4j  trip planning appto add recommendations app start finding rated hotels heuristic popular choices reservations add rated understand actual experience  reviewed hotels plot rating distributions code  hotels reviewsquery match review review reviews business business business in_category category category category business in_city city city return business business collect review stars allreviews order size allreviews desc limit  fig plt figure fig set_size_inches     fig subplots_adjust hspace   wspace   driver session session params city las vegas category hotels result session query params row enumerate result business row business stars series row allreviews total stars count average_stars stars round  calculate star distribution stars_histogram stars value_counts sort_index stars_histogram float stars_histogram sum plot bar chart showing distribution star ratings fig add_subplot    stars_histogram plot kind bar legend color darkblue title business nave average_stars total total plt tight_layout plt constrained city category focus las vegas hotels code chart figure   note axis represents hotel star rating axis represents percentage rating  chapter  graph algorithms practice figure    reviewed hotels number stars axis rating percentage axis analyzing yelp data neo4j  hotels lots reviews read users content relevant reviews prominent app analysis basic graph exploration graph algorithms finding uential hotel reviewersone decide reviews post ordering reviews based inƒuence reviewer yelp pagerank algorithm projected graph users reviewed hotels remember earlier chapters projection filter inessential add relationship data inferred yelp friend graph introduced ƒyelp social network  relationships users pagerank algorithm uncover reviewers sway users direct friends people yelp friends friends relationships friends friends relationship write query projects subgraph users reviews executes pagerank algorithm projected subgraph easier understand subgraph projection works small figure   graph mutual friends mark arya praveena mark praveena reviewed hotels projected graph arya hand reviewed hotel excluded projection  chapter  graph algorithms practice figure   sample yelp graph projected graph include mark praveena figure   figure   sample projected graph graph projections work forward query executes pagerank algorithm projected graph stores result hotelpagerank property node algo pagerank match user wrote reviews in_category category category count reviews reviews cutoff return match u1 user wrote reviews in_category category category match u1 friends u2 return u1 source u2 target analyzing yelp data neo4j  graph cypher write true writeproperty hotelpagerank params category hotels cutoff  noticed set damping factor maximum iteration limit discussed chapter  explicitly set neo4j defaults   damping factor maxiterations set ﬁ distribution pagerank values filter data match user exists hotelpagerank return count hotelpagerank count avg hotelpagerank ave percentiledisc hotelpagerank    percentiledisc hotelpagerank    percentiledisc hotelpagerank    percentiledisc hotelpagerank    percentiledisc hotelpagerank    percentiledisc hotelpagerank     percentiledisc hotelpagerank     percentiledisc hotelpagerank     percentiledisc hotelpagerank   query output countave50                       interpret percentile table     users lower pagerank score   reflects influence rank   reviewers  simply highest pagerank score interesting  users score   close average marginally   initialized pagerank algorithm data reflects power law distribution influential reviewers interested finding influential users write query finds users pagerank score   users follow ing query finds reviewers pagerank score higher   notice   group users hotelpagerank score   usersmatch user hotelpagerank    userswith order hotelpagerank desc156 chapter  graph algorithms practice limit return hotelpagerank pagerank size wrote reviews in_category category hotels hotelreviews size wrote totalreviews size friends friendsif query namepagerankhotelreviewstotalreviewsfriends phil17  philip16  carol12  misti12  joseph12  michael11  j11  abby11  erica10  randy10  phil credible reviewer reviewed hotels connected influential people wanted stream reviews profile selection philip lower score friends written times reviews phil written reviews reasonable number friends pagerank score highest  app choose highlight hotel reviews phil philip mix influencers number reviews improved app recommendations relevant reviews turn business consulting travel business consultingas consulting service hotels subscribe alerted influential visitor writes stay action ratings bellagio sorted influential reviewers query match business hotel match reviews review wrote user exists user hotelpagerank return user analyzing yelp data neo4j  user hotelpagerank pagerank review stars stars driver session session params hotel bellagio hotel dataframe dict record record session query params round  pagerank stars top_reviews sort_values pagerank ascending false head  print tabulate top_reviews headers keys tablefmt psql showindex false code output namepagerankstars misti12  michael11  j11  erica10  christine10  jeremy9  connie9  joyce7  henry7  flora6  note previous table hotel review ers reviewers rated bellagio things good hotel customer service team bellagio  influencers hotel good rankings encourage people visit share experiences influential guests good experience code guests highest pagerank rated expe rience fewer stars query match business hotel match reviews review wrote user exists user hotelpagerank review stars goodrating return user user hotelpagerank pagerank review stars stars  chapter  graph algorithms practice driver session session params hotel bellagio hotel goodrating  dataframe dict record record session query params round  pagerank stars top_reviews sort_values pagerank ascending false head  print tabulate top_reviews headers keys tablefmt psql showindex false code namepagerankstars chris5  lorrie4  dani3  victor3  francine2  rex2  jon2  rachel2  leslie2  benay2  highest ranked users bellagio lower ratings chris lorrie   influential users earlier query personal outreach warranted reviewers write dur ing stay real time alerts influencers facilitate positive interactions bellagio cross promotionafter helped influential reviewers bellagio asked identify businesses cross promotion connected cus tomers scenario recommend increase customer base attracting guests types communities greenfield opportu nity betweenness centrality algorithm discussed earlier work bellagio reviewers connected yelp network bridge groups interested finding influencers las vegas tag users match user exists wrote reviews in_city city las vegas set lasvegasanalyzing yelp data neo4j  long time betweenness centrality algorithm las vegas users brandes variant algorithm calculates betweenness score sampling nodes exploring shortest paths depth experimentation improved parameters set differ ently default values shortest paths  hops maxdepth  sample  nodes probability   note increasing number hops nodes generally increase accuracy cost time compute problem optimal parameters typically require testing identify point diminishing returns query execute algorithm store result betweenproperty algo betweenness sampled lasvegas friends write true writeproperty maxdepth  probability   scores queries write quick exploratory query scores distributed match user exists return count count avg ave tointeger percentiledisc    tointeger percentiledisc    tointeger percentiledisc    tointeger percentiledisc    tointeger percentiledisc    tointeger percentiledisc     tointeger percentiledisc     tointeger percentiledisc     tointeger percentiledisc  p100if query output countave50              half users score  meaning connected  percentile  column  shortest paths set   users considered users connected exert lot control classic behavior small networks superconnectors running query  chapter  graph algorithms practice match user wrote reviews business bellagio hotel exists return user tointeger betweenness hotelpagerank pagerank size wrote reviews in_category category hotels hotelreviews order desc limit the output userbetweennesspagerankhotelreviews misti84170756312  christine23626969310  erica23580684410  mike215534452null j19215523311  michael1613358165  jeremy1603124369  michael13996091011  chris1366977855  connie1333724189  people earlier pagerank query mike interesting exception excluded calculation reviewed hotels cutoff connected las vegas yelp users effort reach wider variety customers preferences ƒconnectors display promote users reviewed restaurants write query  users reviewed bellagiomatch user wrote reviews business bellagio hotel  order desc limit  restaurants users reviewed las vegasmatch wrote review reviews business business in_category category restaurants business in_city city las vegas include restaurants  reviews userswith business avg review stars averagereview count numberofreviewsanalyzing yelp data neo4j  numberofreviews return business business averagereview numberofreviewsorder averagereview desc numberofreviews desc limit this query finds  influential connectors finds  las vegas res taurants of rated restaurant output businessaveragereviewnumberofreviews jean georges steakhouse5  sushi house goyemon5  art flavors   jos andr   parma chef marc   yonaka modern japanese5  kabuto5  harvest roy ellamar5  porto chef michael laplaca5  montesano eateria   recommend bellagio joint promotion restau rants attract guests groups typically reach superconnec tors rate bellagio proxy estimating restaurants catch eye types target visitors helped bellagio reach groups community detection improve app finding categorieswhile users app hotels showcase busi nesses interested yelp dataset   cate gories categories similarity app recommendations businesses users interesting graph model relationships categories ideas ƒmonopartite bipartite partite graphs  tobuild category similarity graph based businesses categorize imagine business categorizes hotels historical tours figure    chapter  graph algorithms practice figure   business categories result projected graph link hotels historical tours weight  figure   figure   projected categories graph case create similarity graph community detection algorithm label propagation projected ity graph label propagation effectively cluster businesses supercategory common algo labelpropagation stream match category return match category in_category in_category category return source target count weight graph cypher yield nodeid label match category nodeid merge supercategory supercategory label merge in_super_category supercategories friendlier largest category works match supercategory in_super_category category category size category in_category size order size descanalyzing yelp data neo4j  collect category  biggestcategoryset friendlyname supercat biggestcategorywe sam ple categories supercategories figure   figure   categories supercategories query finds prevalent categories hotels las vegas match hotels category hotels lasvegas city las vegas hotels in_super_category in_super_category othercategory return othercategory othercategory size othercategory in_category business in_city lasvegas businesses order count desc limit if query output othercategorybusinesses tours189 car rental160  chapter  graph algorithms practice othercategorybusinesses limos84 resorts73 airport shuttles52 taxis35 vacation rentals29 airports25 airlines23 motorcycle rental19 odd taxis tours hotels remember based reported categorizations label propagation algo rithm showing similarity group adjacent businesses serv ices businesses average rating cate gories businesses las vegas supercategory hotelsmatch hotels category hotels hotels in_super_category in_super_category othercategory othercategory in_category business business in_city city las vegas select  random categories calculate th percentile star ratingwith othercategory count count collect business businesses percentiledisc business averagestars   p90stars order rand desc limit  select businesses categories average rating higher th percentile pattern comprehension othercategory businesses averagestars p90stars businesses select business categorywith othercategory businesses tointeger rand size businesses businessreturn othercategory othercategory business business business averagestars averagestarsin query pattern comprehension time pattern comprehension syntax construction creating list based pattern matching finds speci fied pattern match clause clause predicates yields analyzing yelp data neo4j  custom projection cypher feature based inspiration graphql query language apis query result othercategorybusiness averagestarsmotorcycle rentaladrenaline rush slingshot rentals5  snorkelingsin city scuba  guest houseshotel del kacvinsky  car rentalthe lead team  food tourstaste buzz food tours5  airportssignature flight support5  public transportationjetsuitex  ski resortstrikke las vegas  town car servicemw travel vegas  campgroundsmcwilliams campground3  real time recommendations based user app behavior users las vegas hotels high light variety adjacent las vegas businesses good ratings generalize approaches business category restaurants theaters location reader exercises plot reviews city hotels vary time hotel business trends seasonal popularity influential reviewers connect link influential reviewers analyzing airline flight data apache sparkin scenario illustrate analysis airport data spark imagine data scientist considerable travel schedule dig airline flights delays explore airport flight deeper delays specific airports community detection analyze routes frequent flyer points  chapter  graph algorithms practice bureau transportation statistics oftransportation analysis  air travel time performance data includes flights originating united states month add airports location load data separate source openflights load data spark case previous sections data csv files book github repository nodes spark read csv data airports csv header false cleaned_nodes nodes select _c1 _c3 _c4 _c6 _c7 filter _c3 united states withcolumnrenamed _c1 withcolumnrenamed _c4 withcolumnrenamed _c6 latitude withcolumnrenamed _c7 longitude drop _c3 cleaned_nodes cleaned_nodes cleaned_nodes relationships spark read csv data _t_ontime csv header true cleaned_relationships relationships select origin dest fl_date dep_delay arr_delay distance tail_num fl_num crs_dep_time crs_arr_time unique_carrier withcolumnrenamed origin src withcolumnrenamed dest dst withcolumnrenamed dep_delay deptdelay withcolumnrenamed arr_delay arrdelay withcolumnrenamed tail_num tailnumber withcolumnrenamed fl_num flightnumber withcolumnrenamed fl_date withcolumnrenamed crs_dep_time time withcolumnrenamed crs_arr_time arrivaltime withcolumnrenamed distance distance withcolumnrenamed unique_carrier airline withcolumn deptdelay col deptdelay cast floattype withcolumn arrdelay col arrdelay cast floattype withcolumn time col time cast integertype withcolumn arrivaltime col arrivaltime cast integertype graphframe cleaned_nodes cleaned_relationships cleanup nodes airports valid air port codes columns descriptive names convert items analyzing airline flight data apache spark  numeric types columns named dst src expected spark graphframes library create separate dataframe maps airline codes airline names chapter airlines_reference spark read csv data airlines csv select _c1 _c3 withcolumnrenamed _c1 withcolumnrenamed _c3 code airlines_reference airlines_reference airlines_reference code null exploratory analysislet start exploratory analysis data airports vertices count and connections airports edges count popular airportswhich airports departing flights work number flights airport degree centrality algorithm airports_degree outdegrees withcolumnrenamed oid full_airports_degree airports_degree join vertices airports_degree oid vertices sort outdegree ascending false select outdegree full_airports_degree  truncate false code output idname outdegreeatlharts eld jackson atlanta international airport33837 ordchicago hare international airport28338 dfwdallas fort worth international airport23765 cltcharlotte douglas international airport20251 dendenver international airport  chapter  graph algorithms practice idname outdegreelaxlos angeles international airport phxphoenix sky harbor international airport15103 sfosan francisco international airport14934 lgala guardia airport iahgeorge bush intercontinental houston airport14407 large cities list chicago atlanta angeles york popular airports create visual representation flights code plt style fivethirtyeight full_airports_degree topandas head  plot kind bar outdegree legend xaxis set_label_text plt xticks rotation  plt tight_layout plt chart figure   figure   outgoing ƒights airport analyzing airline flight data apache spark  striking suddenly number flights drops denver international airport den popular airport half outgoingfights hartsfield jackson atlanta international airport atl place delays ordin scenario frequently travel west east coasts delays midpoint hub chicago hare international airport dataset flight delay data dive code finds average delay flights departing grouped destination airport delayed_flights edges filter src deptdelay  groupby dst agg avg deptdelay count deptdelay withcolumn averagedelay round col avg deptdelay  withcolumn numberofdelays col count deptdelay delayed_flights join vertices delayed_flights dst vertices sort desc averagedelay select dst averagedelay numberofdelays  truncate false calculated average delay grouped destination join spark dataframe dataframe vertices print destination airport running code returns  destinations worst delays dstname averagedelaynumberofdelays ckbnorth central west virginia airport145  oggkahului airport   mqtsawyer international airport   mobmobile regional airport   ttntrenton mercer airport   avlasheville regional airport   isplong island mac arthur airport94  ancted stevens anchorage international airport83  btvburlington international airport83  cmxhoughton county memorial airport79   chapter  graph algorithms practice interesting data point stands  flights ckb delayed  hours average flights airports from_expr to_expr ckb ord_to_ckb bfs from_expr to_expr ord_to_ckb ord_to_ckb select col e0 col e0 time col e0 flightnumber col e0 deptdelay plot flights code ord_to_ckb sort topandas plot kind bar deptdelay legend xaxis set_label_text plt tight_layout plt code chart figure   analyzing airline flight data apache spark  figure   flights ckb half flights delayed delay  hours   massively skewed average delays coming coastal airport airports adverse weather conditions interesting delays bad day sfolet delays airport fog ƒlow ceiling issues san francisco international airport sfo method analysis motifs recurrent subgraphs patterns equivalent motifs neo4j graph patterns match clause pattern expressions cypher  chapter  graph algorithms practice graphframes search motifs structure flights ofa query motifs delayed flights sfo   code delays motifs filter sfo       arrdelay  deptdelay  flightnumber flightnumber airline airline time time motif finds flights coming airport filter pattern flights sequence flight arrives sfo flight departs sfo delays  minutes arriving departing sfo flight number airline result select columns interested result motifs withcolumn delta motifs deptdelay motifs arrdelay select delta sort delta ascending false result select col src alias col time alias a1depttime col arrdelay col dst alias col time alias a2depttime col deptdelay col dst alias col airline col flightnumber col delta calculating delta arriving departing flights delays attribute sfo execute code result airline ightnumbera1a1depttimearrdelaya2a2depttimedeptdelaya3delta wn1454pdx1130  sfo1350178 bur196  oo5700acv1755  sfo223564 rdm73  ua753bwi700  sfo112549 iad52  analyzing airline flight data apache spark  airline ightnumbera1a1depttimearrdelaya2a2depttimedeptdelaya3delta ua1900atl74040 sfo111077 san37  wn157bur140525 sfo160039 pdx14  dl745dtw83534 sfo113544 dtw10  wn1783den183025 sfo204533 bur8  wn5789pdx1855119 sfo2120117 den   wn1585bur202531 sfo223011 phx   worst offender wn  row arrived early departed hours late negative values arrdelay column flight sfo early notice flights wn  wn  time ground sfo negative delta interconnected airports airlinenow traveled lot frequent flyer points determined destinations efficiently expire start specific airport airports visit starting airport airline identify airlines work flights airlines edges groupby airline agg count airline alias flights sort flights ascending false full_name_airlines airlines_reference join airlines airlines airline airlines_reference code select code flights create bar chart showing airlines full_name_airlines topandas plot kind bar flights legend xaxis set_label_text plt tight_layout plt query output figure    chapter  graph algorithms practice figure   number ƒights airline write function connected components algorithm airport groupings airline airports flights airports group def find_scc_components airline create subgraph flights provided airline airline_relationships edges edges airline airline airline_graph graphframe vertices airline_relationships calculate connected components scc airline_graph stronglyconnectedcomponents maxiter  size biggest component return return scc groupby component agg count alias size sort size ascending false   size write code create dataframe airline number airports largest connected component analyzing airline flight data apache spark  calculate largest connected component airlineairline_scc airline find_scc_components airline airline airlines topandas airline tolist airline_scc_df spark createdataframe airline_scc scccount join scc dataframe airlines dataframe number flights airline alongside number airports reachable biggest component airline_reach airline_scc_df join full_name_airlines full_name_airlines code airline_scc_df select code flights scccount sort scccount ascending false create bar chart showing airlines airline_reach topandas plot kind bar scccount legend xaxis set_label_text plt tight_layout plt query output figure   figure   number reachable airports airline  chapter  graph algorithms practice skywest largest community  connected airports partially reflect business model affiliate airline operates aircraft flights partner airlines southwest hand highest number flights connects  airports frequent flyer points delta airlines airports form communities network airline carrier airline_relationships edges filter airline airline_graph graphframe vertices airline_relationships clusters airline_graph labelpropagation maxiter  clusters sort label groupby label agg collect_list alias airports count alias count sort count ascending false truncate   query output labelairports count1606317768706 ind orf atw ric tri xna ecp avl jax syr bhm gso mem   geg slc dtw las sea bos msn sna jfk tvc lih jac fll   rhv  cwt  cdw  knw  drt  fok  hvr  gtf most airports clustered groups drill airports airports biggest degree ingoing outgoing flights write code calculate airport degree all_flights degrees withcolumnrenamed aid combine airports belong largest cluster clusters filter label  join all_flights all_flights aid result analyzing airline flight data apache spark  sort degree ascending false select degree truncate false query output idname degreedfwdallas fort worth international airport cltcharlotte douglas international airport iahgeorge bush intercontinental houston airport ewrnewark liberty international airport phlphiladelphia international airport bwibaltimore washington international thurgood marshall airport18989 mdwchicago midway international airport bnanashville international airport daldallas love field iadwashington dulles international airport stllambert louis international airport houwilliam hobby airport indindianapolis international airport pitpittsburgh international airport clecleveland hopkins international airport cmhport columbus international airport satsan antonio international airport jaxjacksonville international airport bdlbradley international airport rswsouthwest florida international airport in figure   cluster focused east coast themidwest united states  chapter  graph algorithms practice figure   cluster  airports thing largest cluster clusters filter label  join all_flights all_flights aid result sort degree ascending false select degree truncate false query output idname degreeatlharts eld jackson atlanta international airport ordchicago hare international airport dendenver international airport laxlos angeles international airport phxphoenix sky harbor international airport sfosan francisco international airport lgala guardia airport lasmccarran international airport dtwdetroit metropolitan wayne county airport mspminneapolis paul international wold chamberlain airport27163 bosgeneral edward lawrence logan international airport26214 analyzing airline flight data apache spark  idname degreeseaseattle tacoma international airport mcoorlando international airport jfkjohn kennedy international airport dcaronald reagan washington national airport slcsalt lake city international airport fllfort lauderdale hollywood international airport16364 sansan diego international airport miamiami international airport tpatampa international airport in figure   cluster hub focused additional northwestern stops figure   cluster  airports code generate maps book github repository checking website frequent flyer programs notice free promotion points flights free  chapter  graph algorithms practice fly clusters time points stay cluster reader exercises shortest path algorithm evaluate number flights bozeman yellowstone international airport bzn differences relationship weights summaryin chapters provided details key graph algorithms path finding centrality community detection work apache spark neo4j chapter walked workflows included algorithms context tasks analysis travel business scenario analyze yelp data neo4j personal air travel scenario evaluate airline data spark graph algorithms increasingly graph enhanced machine learning analyzing airline flight data apache spark  chapter using graph algorithms enhancemachine learningwe covered algorithms learn update state iteration label propagation point emphasized graph algorithms general analytics increasing application graphs machine learning graph algorithms enhance workflows chapter focus practical start improving predictions graph algorithms connected feature extraction predicting rela tionships cover basic concepts contextual data predictions quick survey ways graph features applied including spammer fraud detection link prediction demonstrate create machine learning pipeline train eval uate model link prediction integrating neo4j spark workflow based citation network dataset authors papers author relationships citation relationships models predict authors collaborate future graph algorithms improve machine learning contextmachine learning artificial intelligence ai method achieving ai algorithms train software specific examples progressive improve ments based expected outcome explicit programming accom plish training involves providing lot data model enabling learn process incorporate  sense learning algorithms iterate continually making closer objective goal reducing classification errors comparison tothe training data dynamic ability modify optimize presented data place pre usage training batches online learning usage successes predictions accessibility large datasets parallel pute power practical developing probabilistic models ai applications machine learning widespread remember fundamental goal making choices humans forget goal version highly targeted rules based software order increase machine learning accuracy making solutions morebroadly applicable incorporate lot contextual people context decisions humans surrounding text direct data points figure essential situation estimate missing determine apply lessons situations context helps improve predictions graphs context accuracywithout peripheral solutions attempt predict behav ior recommendations varying circumstances require exhaustive training prescriptive rules partly ai good specific defined tasks struggles ambiguity graph enhanced missing contextual decisions graph theory real life relationships stron gest predictors behavior person votes increased lihood friends family coworkers vote figure   illustrates ripple based reported voting facebook friends  paper ƒa  person experiment social influence political mobiliza tion bond  chapter  graph algorithms enhance machine learning figure   people inƒuenced vote social networks friends hops total impact direct relationships authors friends reporting voting influenced additional   users claim voted interestingly friends friends   small percentages impact figure  that people hops total impact direct friends voting examples social networks impact covered book connected nicholas christakis james fowler brown pany adding graph features context improves predictions situations connections matter retail companies personalize product recom mendations historical data contextual data customer similarities online behavior amazon alexa layers contextual models demonstrate improved accuracy  amazon introduced ƒcon text carryover incorporate previous references conversation answering questions machine learning approaches today lot rich contextual stems reliance input data built tuples leaving lot predictive relationships network data contextual infor mation difficult access process finding connections hops challenge scale traditional methods graphs easily reach incorporate connec ted data connected feature extraction selectionfeature extraction selection helps raw data create suitable subset format training machine learning models foundational step connected feature extraction selection  executed leads produces consistently accurate predic tions feature extraction selectionfeature extraction distill large volumes data attributes set representative descriptive attributes process derives numerical values fea tures distinctive characteristics patterns input data differenti ate categories data data difficult model analyze directly size format incidental comparisons feature selection process determining subset extracted features influential target goal surface predictive impor tance efficiency  features  explain  predict eliminate  features model putting mix features increase accuracy fundamen tally influences models learn modest improvements difference focus chapter connected features connectedfeatures features extracted structure data features derived graph local queries based parts graph surrounding node graph global queries graph algorithms identify predictive elements data based relationships connected feature extraction combination features elimi nate unnecessary features reduce likelihood models hypertarge ted creating models work training data tting expands applicability graph algorithms evaluate features determine influential model connected feature selection map features nodes graph create relationships based features compute centrality features feature relationships defined ability preserve cluster densities data points method datasets high dimension low sample size ƒunsupervised graph based feature selection subspace pagerank centrality henniab mezghani gouin vallerand graph embeddinggraph embedding representation nodes relationships graph feature vectors collections features dimensional map pings coordinates figure    chapter  graph algorithms enhance machine learning figure   graph embedding maps graph data feature vectors visual ized multidimensional coordinates graph embedding graph data differently connected feature extraction enables represent entire graphs subsets graph data numerical format ready machine learning tasks unsu pervised learning data categorized pulls contex tual relationships graph embedding data exploration computing similarity entities reducing dimensionality aid statistical analysis evolving space options including node2vec struc2vec graphsage deepwalk deepgl types connected features graphy featuresgraphy features include number connection metrics graph number relationships nodes count potential triangles neighbors common start measures simple gather good test early hypotheses addition precisely feature engi neering instance people fraudulent account hops approach graph traversal efficiently deep paths relationships things labels attributes counts inferred relationships easily automate processes deliver predictive graphy fea tures existing pipeline abstract count fraudster connected feature extraction selection  relationships add number node attribute machine learning tasks graph algorithm featureswe graph algorithms features general struc ture exact pattern illustration types community groupings indicative fraud proto typical density hierarchy relationships case rigid feature exact organization flexible globally relevant structure community detection algorithms extract connected features centrality algorithms pagerank frequently applied approaches combine types connected features outperform sticking single method combine connected features predict fraud indicators based communities louvain algorithm influential nodes pagerank measure fraudsters hops combined approach demonstrated figure   authors combine graph algorithms pagerank coloring graphy measure degree degree diagram paper ƒcollective spammer detection evolving multi relational social networks fakhraei graph structure illustrates connected feature extraction graph algorithms interestingly authors extracting connected features multiple types relationships predictive simply adding fea tures report subgraph graph features converted fea tures model combining multiple methods graph enhanced workflow authors improve prior detection methods classify  spammers required manual labeling  accuracy extracted connected features improve training graph algorithms pagerank prioritize features influ ence enables adequately represent data eliminating noisy vari ables degrade slow processing type identify features high occurrence model tuning fea ture reduction method outlined paper ƒusing pagerank feature selection ienco meo botta  chapter  graph algorithms enhance machine learning figure   connected feature extraction combined predictive methods improve aupr refers area precision recall curve higher numbers preferred discussed connected features applied scenarios involving fraud spammer detection situations activities hidden multiple layers obfuscation network relationships traditional feature extraction selection methods unable detect behavior contextual graphs bring area connected features enhance machine learning focus rest chapter link prediction link prediction estimate relationship form future graph missing incomplete data networks dynamic grow fairly predict links broad applicability product recommendations drug retargeting inferring criminal relationships connected features graphs improve link prediction basic graphy features features extracted centrality community algo rithms link prediction based node proximity similarity standard thepaper ƒthe link prediction problem social networks liben nowell kleinberg network structure latent infor mation detect node proximity outperform direct measures looked ways connected features enhance machine learning dive link prediction apply graph algorithms improve predictions connected feature extraction selection  graphs machine learning practice link predictionthe rest chapter demonstra hands based citation network dataset dataset extracted dblp acm mag dataset paper ƒarnetminer extraction mining academic social networks tang latest version    papers    authors    author relationships    citation relation ships working subset focused articles appeared pub lications lecture notes computer science communications acm international conference ware engineering advances computing communications dataset   papers   authors   author relation ships   citation relationships create coauthors graph based authors collaborated papers predict future collaborations pairs authors interested collaborations authors collaborated concerned multiple collaborations pairs authors remainder chapter set required tools import data neo4j cover properly balance data split samples spark dataframes training testing explain hypothesis methods link prediction creating machine learning pipeline spark finally walk training evaluating prediction models starting basic graphy features adding graph algorithm features extracted neo4j tools datalet started setting tools data explore dataset create machine learning pipeline set libraries chapter py2neo neo4j python library integrates python data science ecosys tem190 chapter  graph algorithms enhance machine learning high performance library data wrangling database easy data structures data analysis tools spark mllib spark machine learning library mllib machine learning library approach chapter combination libraries scikit learn code pyspark repl launch repl running command export spark_version spark    bin hadoop2  spark_version bin pyspark driver memory g executor memory g packages julioasotodv spark tree plotting  this command launch repl chapter  insteadof graphframes loading spark tree plotting package time writing latest released version spark spark    bin hadoop2  changed time read change spark_versionenvironment variable appropriately launched import libraries py2neo import graphimport numpy random import randintfrom pyspark import pipelinefrom pyspark classification import randomforestclassifier pyspark feature import stringindexer vectorassembler pyspark evaluation import binaryclassificationevaluatorfrom pyspark sql types import pyspark sql import functions ffrom sklearn metrics import roc_curve aucfrom collections import counterfrom cycler import cyclerimport matplotlib matplotlib tkagg import matplotlib pyplot pltgraphs machine learning practice link prediction  create connection neo4j database graph graph bolt localhost  neo4j neo importing data neo4jnow ready load data neo4j create balanced split train ing testing download zip file version  dataset unzip place contents import folder files dblp  dblp  dblp  dblp  files import folder add property neo4j settings file process apoc library apoc import file enabled trueapoc import file use_neo4j_config truefirst create constraints ensure create duplicate articles authors create constraint article article assert article unique create constraint author author assert author unique query import data files apoc periodic iterate unwind dblp  dblp  dblp  dblp  file apoc load file file yield venue lecture notes computer science communications acm international conference software engineering advances computing communications return merge article create set apoc map clean authors references  authors authors unwind authors author merge author author merge author batchsize  iteratelist true graph schema figure    chapter  graph algorithms enhance machine learning figure   citation graph simple graph connects articles authors add informa tion infer relationships predictions coauthorship graphwe predict future collaborations authors start creating coauthorship graph neo4j cypher query create co_author rela tionship pair authors collaborated paper match author paper author author paper order paper year collect paper  year year count collaborations merge coauthor co_author year year set coauthor collaborations collaborations year property set co_author relationship query earli year authors collaborated interested time pair authors collaborated subsequent collaborations relevant figure   graph created interesting community structures graphs machine learning practice link prediction  figure   coauthor graph circle diagram represents author lines co_author relationships authors collaborated left examples authors colla borated data loaded basic graph create data sets training testing creating balanced training testing datasetswith link prediction problems predict future creation links dataset works dates articles split data work year define training test split train model year test links created start finding articles published write query count number articles grouped year query match article article return article year year count count order year by_year graph query to_data_frame  chapter  graph algorithms enhance machine learning visualize bar chart code plt style fivethirtyeight by_year plot kind bar year count legend figsize   xaxis set_label_text plt tight_layout plt chart generated executing code figure   figure   articles year articles published  lot publishedbetween   dip gradual climb  excluding2013  good year split data training model making predictions check papers published year write query compute match article article return article year  training count countthe result true paper published  trainingcount false21059 true30897 bad  papers published    fairly balanced split data training testing graphs machine learning practice link prediction  good split papers  split coauthor ship create co_author_early relationship pairs authors collaboration  match author paper author author paper order paper year collect paper  year year count collaborations year  merge coauthor co_author_early year year set coauthor collaborations collaborations create co_author_late relationship pairs authors collaboration  match author paper author author paper order paper year collect paper  year year count collaborations year  merge coauthor co_author_late year year set coauthor collaborations collaborations build training test sets check pairs nodes links query number co_author_early pairs match co_author_early return count countrunning query return result count81096and query number co_author_late pairs match co_author_late return count count running query returns result count74128now ready build training test datasets  chapter  graph algorithms enhance machine learning balancing splitting datathe pairs nodes co_author_early co_author_late relationships positive examples create negative examples real networks sparse concentrations rela tionships graph number examples nodes relationship larger number relationship query co_author_early data   authors type relationship   relationships authors sound imbalanced potential maximum number relationships graph        lot negative examples links negative examples train model severe class imbalance problem model achieve extremely high accuracy predicting pair nodes relationship paper ƒnew perspectives methods link prediction lichtenwalter lussier chawla methods address challenge approaches build negative examples finding nodes neighbor hood connected build negative examples finding pairs nodes mix hops excluding pairs relationship downsample pairs nodes equal number positive negative examples   pairs nodes relationship distance hops increase dis tance hops   pairs nodes function downsample negative examples def down_sample copy copy counter copy label values  counter copy label values  copy copy drop copy copy label  sample random_state  return copy sample frac  function works difference number positive negative examples samples negative examples equal numbers code build training set balanced positive negative examples graphs machine learning practice link prediction  train_existing_links graph match author author co_author_early author return author node1 node2  label to_data_frame train_missing_links graph match author author author co_author_early match author co_author_early   author co_author_early return author node1 node2  label to_data_frame train_missing_links train_missing_links drop_duplicates training_df train_missing_links append train_existing_links ignore_index true training_df label training_df label astype category training_df down_sample training_df training_data spark createdataframe training_df coerced label column category  link pair nodes  link data dataframe running code training_data  node1node2label      list node pairs coauthor relation ship nodes    label indicating collaboration execute code check summary contents data frame training_data groupby label count result labelcount    chapter  graph algorithms enhance machine learning created training set number positive negative sam ples test set code build testset balanced positive negative examples test_existing_links graph match author author co_author_late author return author node1 node2  label to_data_frame test_missing_links graph match author author author co_author_late match author co_author   author co_author return author node1 node2  label to_data_frame test_missing_links test_missing_links drop_duplicates test_df test_missing_links append test_existing_links ignore_index true test_df label test_df label astype category test_df down_sample test_df test_data spark createdataframe test_df execute code check contents dataframe test_data groupby label count result labelcount   balanced training test datasets methods predicting links predict missing linkswe start basic assumptions elements data predict authors coauthors hypothesis vary domain problem case predictive features communities assumption fol lowing elements increase probability authors coauthors coauthors common potential triadic relationships authors authors relationships graphs machine learning practice link prediction  authors community authors tighter community build graph features based assumptions train binary classifier binary classi cation type task predicting twopredefined groups element belongs based rule classifier task predicting pair authors link based classification rule examples  link coauthorship  link coauthorship implement binary classifier random forest spark random forest isan ensemble learning method classification regression tasks illus trated figure   figure   random forest builds collection decision trees aggregates sults majority vote classi cation average regression random forest classifier multiple decision trees train voting predict classification link coauthorship create workflow creating machine learning pipelinewe create machine learning pipeline based random forest classifier spark method suited dataset comprised mix strong weak features weak features helpful random forest method ensure create model fits training data  chapter  graph algorithms enhance machine learning create pipeline pass list features fields variable theseare features classifier classifier expects receive fea tures single column called features vectorassembler trans form data required format code creates machine learning pipeline sets parameters mllib def create_pipeline fields assembler vectorassembler inputcols fields outputcol features randomforestclassifier labelcol label featurescol features numtrees  maxdepth  return pipeline stages assembler randomforestclassifier parameters labelcolthe field variable predict pair nodes link featurescolthe field variables predict pair nodes link numtreesthe number decision trees form random forest maxdepththe maximum depth decision trees chose number decision trees depth based experimentation hyperparameters settings algorithm adjus ted optimize performance hyperparameters difficult deter ahead time tuning model requires trial error covered basics set pipeline dive creating model evaluating performs predicting links basic graph featureswe start creating simple model predict authors future collaboration based features extracted common authors pref erential attachment total union neighbors common authors finds number potential triangles authors captures idea authors coauthors common introduced collaborate future graphs machine learning practice link prediction  preferential attachment produces score pair authors multiplying number coauthors intuition authors collaborate coauthors lot papers total union neighbors finds total number coauthors author minus duplicates neo4j compute values cypher queries function compute measures training set def apply_graphy_training_features data query unwind pairs pair match pair node1 match pair node2 return pair node1 node1 pair node2 node2 size co_author_early co_author_early commonauthors size co_author_early size co_author_early prefattachment size apoc coll toset co_author_early co_author_early totalneighbors pairs node1 row node1 node2 row node2 row data collect features spark createdataframe graph query pairs pairs to_data_frame return data join features node1 node2 function compute test set def apply_graphy_test_features data query unwind pairs pair match pair node1 match pair node2 return pair node1 node1 pair node2 node2 size co_author co_author commonauthors size co_author size co_author prefattachment size apoc coll toset co_author co_author totalneighbors pairs node1 row node1 node2 row node2 row data collect features spark createdataframe graph query  chapter  graph algorithms enhance machine learning pairs pairs to_data_frame return data join features node1 node2 functions taframe pairs nodes col umns node1 node2 build array maps pairs compute measures pair nodes unwind clause chapter large collection node pairs returning features query apply functions spark training test dataframes code training_data apply_graphy_training_features training_data test_data apply_graphy_test_features test_data explore data training set code plot histogram frequency commonauthors plt style fivethirtyeight fig axs plt subplots   figsize   sharey true charts  collaborated  collaborated chart enumerate charts label title chart filtered training_data filter training_data label label common_authors filtered topandas commonauthors histogram common_authors value_counts sort_index histogram float histogram sum histogram plot kind bar common authors color darkblue axs title authors title label label axs xaxis set_label_text common authors plt tight_layout plt chart generated figure   graphs machine learning practice link prediction  figure   frequency commonauthors left frequency commonauthors authors collaborated frequency commonauthors collaborated maximum number common authors   values   surprising people collaborated paper coauthors common collaborated left  coauthors mon spike coauthors train model predict missing links function def train_model fields training_data pipeline create_pipeline fields model pipeline fit training_data return modelwe start creating basic model commonauthors create model running code basic_model train_model commonauthors training_data model trained check performs dummy data code evaluates code values commonauthors eval_df spark createdataframe      commonauthors basic_model transform eval_df select commonauthors probability prediction truncate false running code result  chapter  graph algorithms enhance machine learning commonauthorsprobability prediction0                            commonauthors   probability relationship authors model predicts  commonauthors   probability rela tionship authors model predicts  evaluate model test set ways evaluate model performs derived baseline predictive metrics outlined table   table   predictive metrics measureformula descriptionaccuracytruepositives truenegatives totalpredictions fraction predictions model total number correct predictions divided total number predictions note accuracy misleading data unbalanced dataset  cats  dogs model predicts image cat  accuracy score correctly identifying dogs precisiontruepositives truepositives falsepositives proportion positive identi cations correct low precision score false positives model produces false positives precision   recall true positive rate truepositives truepositives falsenegatives proportion actual positives identi correctly low recall score false negatives model produces false negatives recall   false positive ratefalsepositives falsepositives truenegatives proportion incorrect positives identi high score false positives receiver operating characteristic roc curvex chart roc curve plot recall true positive rate false positive rate erent classi cation thresholds area curve auc measures dimensional area underneath roc curve axis     accuracy precision recall roc curves evaluate models accu racy coarse measure focus increasing precision recallmeasures roc curves compare individual features change pre dictive rates graphs machine learning practice link prediction  depending goals favor measures eliminate false negatives dis ease indicators push predictions thing positive result multiple thresholds set models pass secon dary inspection likelihood false lowering classification thresholds positive increasing false positives true positives function compute predictive measures def evaluate_model model test_data execute model test set predictions model transform test_data compute true positive false positive false negative counts predictions predictions label  predictions prediction  count fp predictions predictions label  predictions prediction  count predictions predictions label  predictions prediction  count compute recall precision manually recall float precision float fp compute accuracy spark mllib binary classification evaluator accuracy binaryclassificationevaluator evaluate predictions compute false positive rate true positive rate sklearn functions labels row label row predictions select label collect preds row probability  row predictions select probability collect fpr tpr threshold roc_curve labels preds roc_auc auc fpr tpr return fpr fpr tpr tpr roc_auc roc_auc accuracy accuracy recall recall precision precision write function display easier consume format def display_results items fpr tpr roc_auc return dataframe measure list keys score list values function code display basic_results evaluate_model basic_model test_data display_results basic_results  chapter  graph algorithms enhance machine learning predictive measures common authors model measurescore accuracy0  recall0  precision0  bad start predicting future collaboration based number common authors pairs authors bigger pic ture measures context model precision   good predicting links exist recall   good predicting links exist plot roc curve correlation true positives false positives functions def create_roc_plot plt style classic fig plt figure figsize   plt xlim   plt ylim   plt ylabel true positive rate plt xlabel false positive rate plt axes prop_cycle cycler color plt plot     linestyle label random score auc   return plt figdef add_curve plt title fpr tpr roc plt plot fpr tpr label title auc roc   plt fig create_roc_plot add_curve plt common authors basic_results fpr basic_results tpr basic_results roc_auc plt legend loc lower plt roc curve basic model figure   graphs machine learning practice link prediction  figure   roc curve basic model common authors model   area curve auc score predictive measure chart othermeasures evaluate fits goal figure   close  true positive rate recall false positive rate reaches  problematic scenarios fraud detection false positives expensive chase graphy features improve predictions train model data distributed fol lowing code descriptive statistics graphy features training_data filter training_data label  select summary commonauthors prefattachment totalneighbors training_data filter training_data label  select summary commonauthors prefattachment totalneighbors running bits code tables summarycommonauthorsprefattachmenttotalneighbors count81096 mean3     chapter  graph algorithms enhance machine learning summarycommonauthorsprefattachmenttotalneighbors stddev4    min0 max44 summarycommonauthorsprefattachmenttotalneighbors count81096 mean0    stddev0    min0 max9 features larger differences links coauthorship link coau thorship predictive divide greater average prefattachment higher authors collaborated versus difference substantial commonauthors notice difference values totalneighbors meansthis feature predictive interesting large standard deviation minimum maximum values preferential attachment expect small networks concentrated hubs superconnec tors train model adding preferential attachment total union neigh bors running code fields commonauthors prefattachment totalneighbors graphy_model train_model fields training_data evaluate model display graphy_results evaluate_model graphy_model test_data display_results graphy_results predictive measures graphy model measurescore accuracy0  recall0  precision0  accuracy recall increased precision dropped bit misclassifying  links plot roc curve compare basic graphy models running code graphs machine learning practice link prediction  plt fig create_roc_plot add_curve plt common authors basic_results fpr basic_results tpr basic_results roc_auc add_curve plt graphy graphy_results fpr graphy_results tpr graphy_results roc_auc plt legend loc lower plt output figure   figure   roc curve graphy model headed direction helpful visualize comparisons feel models impact feature evaluate features making difference feature rank impact differ ent features model prediction enables evaluate influence algorithms statistics  chapter  graph algorithms enhance machine learning compute feature random forest algorithm spark averages reduction impurity trees impurity frequency randomly assigned labels incorrect feature rankings comparison group features evaluating normalized  rank feature fea ture    influence model function creates chart showing influential features def plot_feature_importance fields feature_importances dataframe feature fields feature_importances sort_values ascending false plot kind bar feature legend xaxis set_label_text plt tight_layout plt rf_model graphy_model stages  plot_feature_importance fields rf_model featureimportances running function figure   graphs machine learning practice link prediction  figure   feature graphy model features commonauthors feature large margin understand predictive models created visualize decision trees random forest spark tree plotting library follow ing code generates graphviz file spark_tree_plotting import export_graphvizdot_string export_graphviz rf_model trees  featurenames fields categorynames classnames true false filled true roundedcorners true roundleaves true open tmp dot file file write dot_string generate visual representation file running command terminal dot tpdf tmp dot tmp pdfthe output command figure    chapter  graph algorithms enhance machine learning figure   visualizing decision tree imagine decision tree predict pair nodes features linked commonauthorsprefattachmenttotalneighbors our random forest walks steps create prediction  start node    commonauthors followthe false branch node     commonauthors follow false branch tonode   score   prefattachment takes node   node  leaf node decision tree check conditions prediction true node isthe decision tree prediction  finally random forest evaluates item predicted collection decision trees prediction based popular adding graph features graphs machine learning practice link prediction  predicting links triangles clustering coe cientrecommendation solutions base predictions form triangle metric compute number tri angles node clustering coefficient executing query algo trianglecount author co_author_early write true writeproperty trianglestrain clusteringcoefficientproperty coefficienttrain algo trianglecount author co_author write true writeproperty trianglestest clusteringcoefficientproperty coefficienttest function add features dataframes def apply_triangles_features data triangles_prop coefficient_prop query unwind pairs pair match pair node1 match pair node2 return pair node1 node1 pair node2 node2 apoc coll min trianglesprop trianglesprop mintriangles apoc coll max trianglesprop trianglesprop maxtriangles apoc coll min coefficientprop coefficientprop mincoefficient apoc coll max coefficientprop coefficientprop maxcoefficient params pairs node1 row node1 node2 row node2 row data collect trianglesprop triangles_prop coefficientprop coefficient_prop features spark createdataframe graph query params to_data_frame return data join features node1 node2 notice min max prefixes triangle count clustering coefficient algorithms prevent model learning based order authors pairs passed undirected graph split features authors minimum maximum counts apply function training test dataframes code  chapter  graph algorithms enhance machine learning training_data apply_triangles_features training_data trianglestrain coefficienttrain test_data apply_triangles_features test_data trianglestest coefficienttest code descriptive statistics triangle features training_data filter training_data label  select summary mintriangles maxtriangles mincoefficient maxcoefficient training_data filter training_data label  select summary mintriangles maxtriangles mincoefficient maxcoefficient running bits code tables summarymintrianglesmaxtriangles mincoe cientmaxcoe cient count81096 mean19     stddev65     min0   max622   summarymintrianglesmaxtriangles mincoe cientmaxcoe cient count81096 mean5     stddev20     min0   max617   notice comparison great difference coauthor ship coauthorship data features predic tive train model running code fields commonauthors prefattachment totalneighbors mintriangles maxtriangles mincoefficient maxcoefficient triangle_model train_model fields training_data evaluate model display triangle_results evaluate_model triangle_model test_data display_results triangle_results graphs machine learning practice link prediction  predictive measures triangles model table measurescore accuracy0  recall0  precision0  predictive measures increased adding feature previ ous model add triangles model roc curve chart code plt fig create_roc_plot add_curve plt common authors basic_results fpr basic_results tpr basic_results roc_auc add_curve plt graphy graphy_results fpr graphy_results tpr graphy_results roc_auc add_curve plt triangles triangle_results fpr triangle_results tpr triangle_results roc_auc plt legend loc lower plt output figure    chapter  graph algorithms enhance machine learning figure   roc curve triangles model models generally improved high s predictive meas ures things difficult easiest gains room improvement features changed rf_model triangle_model stages  plot_feature_importance fields rf_model featureimportances running function figure   graphs machine learning practice link prediction  figure   feature triangles model common authors feature greatest single impact model haps areas add community predicting links community detectionwe hypothesize nodes community link tighter munity links compute coarse grained communities label propagation algorithm neo4j running query store community property partitiontrain training set partitiontestfor test set algo labelpropagation author co_author_early partitionproperty partitiontrain algo labelpropagation author co_author partitionproperty partitiontest  chapter  graph algorithms enhance machine learning compute finer grained groups louvain algorithm louvain algorithm returns intermediate clusters store smallest clusters property louvaintrain training set louvaintest test set algo louvain stream author co_author_early includeintermediatecommunities true yield nodeid community communities algo getnodebyid nodeid node communities  smallestcommunity set node louvaintrain smallestcommunity algo louvain stream author co_author includeintermediatecommunities true yield nodeid community communities algo getnodebyid nodeid node communities  smallestcommunity set node louvaintest smallestcommunity create function return values algorithms def apply_community_features data partition_prop louvain_prop query unwind pairs pair match pair node1 match pair node2 return pair node1 node1 pair node2 node2 case partitionprop partitionprop   samepartition case louvainprop louvainprop   samelouvain params pairs node1 row node1 node2 row node2 row data collect partitionprop partition_prop louvainprop louvain_prop features spark createdataframe graph query params to_data_frame return data join features node1 node2 apply function training test dataframes spark fol lowing code training_data apply_community_features training_data partitiontrain louvaintrain test_data apply_community_features test_data partitiontest louvaintest code pairs nodes belong partition plt style fivethirtyeight fig axs plt subplots   figsize   sharey true charts  collaborated  collaborated chart enumerate charts label title chartgraphs machine learning practice link prediction  filtered training_data filter training_data label label values filtered withcolumn samepartition col samepartition  false true groupby samepartition agg count label alias count select samepartition count topandas values set_index samepartition drop true inplace true values plot kind bar axs legend title authors title label label axs xaxis set_label_text partition plt tight_layout plt running tha code figure   figure   partitions feature predictive authors collaborated partition thing louvain clusters running code plt style fivethirtyeight fig axs plt subplots   figsize   sharey true charts  collaborated  collaborated chart enumerate charts label title chart filtered training_data filter training_data label label values filtered withcolumn samelouvain col samelouvain  false true groupby samelouvain agg count label alias count select samelouvain count topandas  chapter  graph algorithms enhance machine learning values set_index samelouvain drop true inplace true values plot kind bar axs legend title authors title label label axs xaxis set_label_text louvain plt tight_layout plt running tha code figure   figure   louvain clusters feature predictive authors collabo rated cluster cluster train model running code fields commonauthors prefattachment totalneighbors mintriangles maxtriangles mincoefficient maxcoefficient samepartition samelouvain community_model train_model fields training_data evaluate model display community_results evaluate_model community_model test_data display_results community_results predictive measures community model measurescore accuracy0  recall0  precision0  graphs machine learning practice link prediction  measures improved comparison plot roc curve models running code plt fig create_roc_plot add_curve plt common authors basic_results fpr basic_results tpr basic_results roc_auc add_curve plt graphy graphy_results fpr graphy_results tpr graphy_results roc_auc add_curve plt triangles triangle_results fpr triangle_results tpr triangle_results roc_auc add_curve plt community community_results fpr community_results tpr community_results roc_auc plt legend loc lower plt output figure   figure   roc curve community model improvements addition community model features  chapter  graph algorithms enhance machine learning rf_model community_model stages  plot_feature_importance fields rf_model featureimportances running function figure   figure   feature community model common authors model good avoid overly dominant element skew predictions data munity detection algorithms lot influence model fea tures included helps round predictive approach examples simple graph based features good start add graphy graph algorithm based features continue improve predictive measures good balanced model predict ing coauthorship links graphs connected feature extraction improve predic tions ideal graph features algorithms vary depending attributes data including network domain graph shape predictive elements data testing hypotheses types connected features fine tuning graphs machine learning practice link prediction  reader exercisesthere areas investigate ways build models ideas exploration predictive model conference data include testing data remove features splitting years differently training testing impact predic tions dataset citations papers data generate features predict future citations summaryin chapter looked graph features algorithms enhance machine learning covered preliminary concepts walked detailed integrating neo4j apache spark link prediction illustrated evaluate random forest classifier models incorporate types connec ted features improve wrapping things upin book covered graph concepts processing platforms analytics walked practical examples graph algorithms apache spark neo4j finished graphs enhance machine learning graph algorithms powerhouse analysis real systems preventing fraud optimizing routing predicting spread flu hope join develop unique solutions advantage today highly connected data  chapter  graph algorithms enhance machine learning appendix aadditional resourcesin cover additional helpful readers types algorithms import data neo4j procedure library resources finding data sets platform assistance training algorithmsmany algorithms graph data book focused representative classic graph algorithms application developers algorithms coloring heuristics academic cases easily derived algorithms edge based community detection interesting implemented neo4j apache spark expect list graph algo rithms platforms increase graph analytics grows categories algorithms graphs strictly graphy nature looked algorithms context machine learning chapter  area note similarity algorithms whichare applied recommendations link prediction similarity algorithms work nodes resemble methods pare items node attributes neo4j bulk data import yelpimporting data neo4j cypher query language transactional approach figure  illustrates high level overview process  figure  cypher based import method works incremental ta loading bulk loading to10 records neo4j import tool choice importing initial bulk datasets tool creates store files directly skipping transaction log figure  figure  neo4j import tool neo4j import tool processes csv files expects files specific headers figure  csv files processed tool  appendix additional resources figure  format csv neo4j import processes size yelp dataset neo4j import tool choice data neo4j data format convert format neo4j import tool expects figure  transform figure  transforming csv python create simple script convert data csv file transformed data format import neo4j detailed instructions explaining book book resources reposi tory additional resources  apoc neo4j toolsawesome procedures cypher apo library  procedures functions common tasks data integration data cleaning data conversion general functions apoc standard library neo4j neo4j tools conjunction graph algo rithms library algorithms ƒplayground app code free exploration developer site graph algorithms finding datasetsfinding graphy dataset aligns testing goals hypotheses challeng ing addition reviewing papers exploring indexes network datasets stanford network analysis project snap includes datasets alongwith papers usage guides colorado complex networks icon searchable ofresearch quality network datasets domains network science koblenz network collection konect includes large network datasets types order perform network science datasets require massaging transform mat assistance apache spark neo4j platformsthere online resources apache spark neo4j platforms specific questions encourage reach respective communities general spark questions subscribe users spark apache org sparkcommunity graphframes questions github issue tracker neo4j questions including graph algorithms visit neo4j munity online  appendix additional resources trainingthere number excellen resources started graph analytics search courses books graph algorithms network science analysis networks uncover options great examples online learning include coursera applied social network analysis python leonid zhukov social network analysis youtube series stanford analysis networks includes video lectures reading lists andother resources complexity explorer offers online courses complexity scienceadditional resources  indexaa algorithmshortest pa  with neo4j actual density acyclic graphs cyclic graphs   trees aggregatemessages    airline flight data analyzing apache spark   delays   exploratory analysis  fog delays sfo   interconnected airports airline   popular airports  alexa  algorithm centric processing  pairs shortest path apsp algorithm    sequence operations    apache spark  neo4j  amazon  anti money laundering aml analysis xiv apache spark   pairs shortest path algorithm  analyzing airline flight data   airline flight data breadth search  closeness centrality   connected components  degree centrality  importing social gra data importing software dependency graph data importing transport dataset  installing  label propagation  online resources  pagerank   personalized pagerank  shortest path algorithm weighted   single source shortest path algorithm  spark graph project  connected components  triangle count  approximate betweenness centrality  artificial intelligence ai  average degree  average shortest path  awesome procedures cypher apoc library    bbacon number  barab albert szl  betweenness centrality algorithm   bridges control points  calculating   neo4j   yelp dataset  binary classification  bipartite graphs  boruvka otakar breadth search bfs   bridges  bridges nigsberg problem   bulk data import neo4j import tool  bulk synchronous parallel bsp ccancer xiv centrality algorithms   betweenness centrality   closeness centrality   degree centrality   overview  randomized approximate brandes  social graph data  chicago oﬂhare international airport data delays  citation networks  clauset  clique  closeness centrality algorithm   harmonic centrality variation  wasserman faust variation    apache spark   neo4j clustering coefficient algorithm  triangle count clustering coefficient algorithms clusters defined  colorado complex networks icon community detection algorithms   connected components   link prediction   label propagation algorithm   louvain modularity   software dependency graph data  strongly connected components   triangle count clustering coefficient  validating communities complete graph  components defined configuration outperforms single thread cost connected componen algorithm     apache spark   neo4j connected graphs  context xiv  costs   cycles  cyclic graphs  cypher    cypher apache spark caps ddﬂorazio francesco  damping dampening factor   dataframe  datasets sources  deduplication  degree centrality algorithm   reach node   airport data   apache spark degree distribution  degree node  delta stepping algorithm  dense graphs   density relationships  depth search dfs    diameter graph  dijkstra edsger  dijkstra algorithm shortest path algo rithm directed acyclic graph dag  directed graphs   directional relationships xiii disconnected graphs  distance term eegu luz ctor  entity relationship diagram erd xiii erd paul  euler leonhard  eulerian path  ffacebook faust katherine feature extraction  feature  feature selection  feature vectors  features connected feature extraction selection  graph algorithm features  graphy fischer michael  fleurquin pablo  foodweb  freeman linton  ggaller bernard  girvan newman gn benchmark  global clustering coefficient  global patterns  googlepagerank  pregel grandjean martin  graph algorithms generally   centrality  community detection  defined  specific algorithms   practice   pathfinding  types graph analytics   defined  cases graph compute engines  graph databases  graph embedding defined  graph global   graph local   graph platforms apache spark   neo4j   platform considerations representative platforms   selecting platform graph processing    graph search algorithms  defined graph search algorithms breadth search   depth search   transport graph data  graph theory  about   origins  terminology  types structures graph traversal algorithms breadth search   depth search  graph centric processing  graphframes    graphs generally  acyclic cyclic    bipartite   common attributes  connected disconnected  flavors   partite   monopartite   sparse dense  undirected directed   unweighted weighted  graphy datasets  graphy features hhamiltonian path  harmonic centrality closeness algorithm  hart peter  hop term   hybrid transactional analytical processing htap iimpurity  links  influence  islands index  kk partite graphs  koblenz network collection konect k nigsberg bridges problem  llabel propagation algorithm lpa    pull method  push method  seed labels  semi supervised learning   apache spark  neo4j   yelp dataset  label defined  labeled property graph model  lancichinetti fortunato radicchi lfr benchmark landmarks  latora  leaf nodes  lee  link prediction  balancing splitting data training testing  basic graph features   coauthorship graph  community detection   creating balanced training testing data sets  creating machine learning pipeline  defined  importing data neo4j  predicting missing links  tools data   triangles clustering coefficient  literature based discovery lbd xiv local clustering coefficient   louvain modularity algorithm   for link prediction   quality based grouping modularity  when  neo4j  mmachine learning connected feature extraction selection  graph embeddings  graphs context accuracy  context  link prediction marchiori  marketing campaigns xiv matplotlib  maximum density  minimum spanning tree algorithm   when  neo4j modularity  louvain modularity algorithm calculating   quality based grouping  money laundering xiv monopartite graphs   moore  moore edward  multigraph nnegative weights  neo4j algorithm  pairs shortest path algorithm  analyzing yelp data   yelp dataset betweenness centrality   closeness centrality  connected components  importing citation network dataset importing social graph data  importing software dependency graph data importing transport dataset  label propagation   local clustering coefficient  louvain modularity   minimum spanning tree algorithm  online resources  pagerank   random walk algorithm  randomized approximate brandes shortest pa algorithm unweighted  shortest path algorithm weighted  single source shortest path algorithm strongly connected components  triangles   yenﬂs shortest paths algorithm neo4j algorithms library shortest path unweighted   shortest path weighted neo4j desktop  neo4j graph platform   neo4j import tool   network science  networksgraph representation  types structures newman  nilsson nils  node centric processing  nodescentrality  defined oonline analytical processing olap  online learning  online transaction processing oltp  links ppage larry  pagerank   and influence  convergence implementation  formula  iteration random surfers rank sinks  personalized pagerank variant   apache spark   fixed number iterations  neo4j   yelp dataset  pandas library  pareto distribution path defined  pa thfinding algorithms   all pairs shortest path   minimum spanning tree algorithm   random walk algorithm   shortest path   single source shortest path   transport graph data   weighted graphs pearson karl  personalized pagerank ppr   pivotal nodes  power law  preferential attachment  pregel  primﬂs algorithm  product recommendation engines  properties defined  pseudograph  pyspark repl qquality based grouping  rraghavan usha nandini ramasco jos  random forest   random network  random walk algorithm   when  neo4j randomized approximate brandes brandes centrality algorithm rank sink  raphael bertram  reach node  reif jennifer  relationship type  relationship centric processing  relationships term  ssan francisco international airport sfo data fog delays  scale free network  scaling law power law  search engines xivindex  seed labels semi supervised learning seven bridges nigsberg problem   shortest path algorithm   a algorithm    apache spark weighted   neo4j unweighted   neo4j weighted  yenﬂs shortest paths variation simple graph  single source shortest path sssp algorithm    apache spark   neo4j small network  social graph data centrality algorithms   importing apache spark  importing neo4j social network analysis  software dependency graph data  importing apache spark  importing neo4j spanning trees  spark graph project  sparse graphs   stanford network analysis project snap  strict graph  strogatz steven  connected components scc algo rithm     airport data   apache spark  neo4j  structural hole  subgraph defined tteleportation testing datasets   training datasets   training online resources  transitive relationships xiii translytics  transport datasets  importing apache spark  importing neo4j traveling salesman problem tsp  traversal cen tric processing trees  maux charles pierre  triangle count clustering coefficient algo rithms    link prediction machine learning exam ple  global clustering coefficient  local clustering coefficient  local clustering coefficient neo4j  triangle count apache spark  triangles neo4j  trip planning app   twitter label propagation  personalized pagerank uundirected graphs   union  unweighted graphs   unweighted shortest paths  vvertices  nodes wwasserman faust closeness algorithm   wasserman stanley  weakly connected components  weight term  weighted graphs   weighted shortest paths apache spark   neo4j weightproperty yyelp dataset analyzing neo4j   bellagio cross promotion   finding influential hotel reviewers   finding categories   graph model  importing neo4j  neo4j import tool  overview  social network  travel business consulting  trip planning app  yenﬂs shortest aths algorithm yen jin index  authorsmark needham graph advocate developer relations engineer neo4j works users embrace graphs neo4j building sophisticated solutions challenging data problems mark deep expertise graph data helped build neo4j causal clustering writes experiences graphista popular blog https markhneedham blog tweets markhneedham amy hodler network science devotee ai graph analytics program manager neo4j promotes graph analytics reveal structures real networks predict dynamic behavior amy helps teams apply approaches generate opportunities companies eds microsoft hewlett packard hp hitachi iot cray amy love science art fascination complexity studies graph theory tweets amyhodler colophonthe animal cover graph algorithms european garden spider araneus diadematus common spider europe north america inad vertently introduced european settlers european garden spider inch long mottled brown pale markings arranged form small cross spider common ƒcross spider spi ders common range noticed late summer grow largest size spinning webs european garden spiders orb weavers meaning spin circular web catch small insect prey web consumed respun night ensure maintain effectiveness spider remains sight legs rests ƒsignal connected web movement alerts spider presence struggling prey spider moves bite prey kill inject special enzymes enable consumption webs disturbed predators inadvertent disturbance european garden spiders legs shake web drop ground thread silk danger passes spider thread reascend web live year hatching spring spiders mature sum mer mate late year males approach females caution females kill consume males mating female spider weaves dense silk cocoon eggs dying fall common adapting human disturbed habitats spiders studied  female garden spiders named arabella anita werepart experiment aboard nasa skylab orbiter test gravity web construction initial period adapting weightless environ ment arabella built partial web fully formed circular web animals reilly covers endangered cover image color illustration karen montgomery based black white engraving meyers kleines lexicon cover fonts gilroy guard ian sans text font adobe minion pro heading font adobe myriad condensed code font dalton maag ubuntu mono