contentsinter file communication  communication source files  header files  namespaces  long number class  numbers strings  class specifier  member functions  application program  high rise elevator simulation  running elevprogram  designing  listings elev elevator strategy  state diagram elevprogram  summary  questions projects  templates exceptions681 function templates  simple function template  function templates multiple arguments  class templates  class depends context  linked list class templates  storing user defined data types  uml templates  exceptions  exceptions  exception syntax  simple exception  multiple exceptions exceptions distanceclass  exceptions arguments  thebad_allocclass  exception notes summary  questions exercises  xv00  fm      object orientedprogrammingin fourth editon15the standard template library725 introduction stl  containers  algorithms  iterators  potential problems stl  algorithms  thefind algorithm  thecount algorithm  thesort algorithm  thesearch algorithm  themerge algorithm  function objects  thefor_each algorithm  thetransform algorithm  sequence containers  vectors  lists  deques  iterators  iterators smart pointers  iterators interface  matching algorithms containers  iterators work  specialized iterators  iterator adapters  stream iterators  associative containers  sets multisets  maps multimaps  storing user defined objects  set personobjects  list personobjects  function objects  predefined function objects  writing function objects  function objects modify container behavior  summary  questions  exercises  xvi00  fm      xvi contents16object oriented software development801 evolution software development processes  seat pants process  waterfall process  object oriented programming  modern processes  case modeling  actors  cases  scenarios  case diagrams  case descriptions  cases classes  programming problem  hand written forms  assumptions  elaboration phase landlordprogram  actors  cases  case descriptions  scenarios  uml activity diagrams  cases classes  listing nouns  refining list  discovering attributes  verbs messages  class diagram  sequence diagrams  writing code  header file  cppfiles  simplifications  interacting program  final thoughts  summary  questions  projects  aascii chart849 precedence table keywords859 precedence table  keywords  xvii00  fm      xvii object orientedprogrammingin fourth editoncmicrosoft visual  screen elements  single file programs  building existing file  writing file  errors  time type rtti  multifile programs  projects workspaces  developing project  saving closing opening projects  compiling linking  building console graphics lite programs  debugging  single stepping  watching variables  stepping functions  breakpoints  dborland builder871 running programs builder cleaning screen  creating project  naming saving project  starting existing files  compiling linking executing  executing builder  executing dos  precompiled header files  closing opening projects  adding header file project  creating header file  editing existing header file  telling builder header file location  projects multiple source files  creating additional source files  adding existing source files project  project manager  console graphics lite programs  debugging  single stepping  watching variables  tracing functions  breakpoints  xviii00  fm      xviii contentseconsole graphics lite881 console graphics lite routines  console graphics lite functions  implementations console graphics lite functions  microsoft compilers  borland compilers source code listings  listing msoftcon listing msoftcon cpp listing borlacon listing borlacon cpp fstl algorithms member functions895 algorithms  member functions  iterators  ganswers questions exercises913 chapter   answers questions  chapter   answers questions  solutions exercises  chapter   answers questions  solutions exercises  chapter   answers questions  solutions exercises  chapter   answers questions  solutions exercises  chapter   answers questions  solutions exercises  chapter   answers questions  solutions exercises  chapter   answers questions  solutions exercises  chapter   answers questions  solutions exercises  xix00  fm      xix chapter   answers questions  solutions exercises  chapter   answers questions  solutions exercises  chapter   answers questions  solutions exercises  chapter   answers questions  chapter   answers questions  solutions exercises  chapter   answers questions  solutions exercises  chapter   answers questions  hbibliography977 advanced  defining documents  unified modeling language  history  topics  index981   fm      preface major fourth edition include earlier introduction uml inter file communication chapter  revised approach software develop ment chapter  introducing uml uml diagrams fit naturally topics text uml diagrams book inter file communication gathers concepts scattered book industry approach object oriented analysis design evolved edition modified chapter topic reflect developments changed edition revisions mentioned smaller clarify existing topics correct typos inaccuracies text   fm      xxi authorrobert lafore writing books computer programming  selling titles include assembly language programming ibm programming tur bo interactive data structures algorithms lafore holds degrees mathematics electrical engineering active programming days pdp  k main memory considered luxurious interests include hiking windsurfing recreational mathematics   fm      xxii dedicationthis book dedicated ggl indomitable spirit acknowledgments fourth editionmy readers mailed comments corrections indebted professors computer science offered suggestions corrections blomberg regis university denver richard daehler wilking college charleston south carolina frank hoffmann royal institute technology sweden david blockus san jose state university california special david topham ohlone college fremont california detailed ideas sharp eye problems sams publishing michael stephens provided expert friendly liaison details publishing reviewer robin rowe technical editor mark cashman attempted great care save lack success fault project manager christina smith amazingly short time angela boley helped moving smoothly matt wynalda provided expert proofread ing grateful acknowledgments edition entire team macmillan computer publishing tracy dunkelberger ably spearheaded entire project exhibited great patience turned lengthy schedule jeff durham handled myriad details involved inter facing editors skill good humor andrei kossorouko lent expertise ensure edition worse acknowledgments editionmy professors users book text respective colleges universities planning edition dave bridges frank cioch jack davidson terrence fries jimmie hattemer jack van luik kieran mathieson mccarty anita millspaugh ian moraes jorge prendes steve silva edward wright readers edition wrote corrections suggestions invaluable waite group press joanne miller ably ridden herd errant scheduling filled academic liaison scott calamar knew deirdre greene provided uncannily sharp eye copy editor   fm      xxiii mike radtke harry henderson expert technical reviews special edward wright western oregon state college reviewing experi menting exercises acknowledgments editionmy primary mitch waite poured inch manuscript painstaking attention semi infinite number helpful suggestions mccarty azusa pacific university reviewed content manuscript suit ability classroom suggested excellent improvements attempted correct dyslexic spelling george leach programs horror perform cor rectly circumstances trust problems fixed fault scott calamar waite group dealt myriad organizational aspects writing producing book competence unfailing good humor ingredient completion nan borreson borland supplying latest releases software tidbits harry henderson reviewing exercises louise orlando waite group ably shepherding book production merrill peterson matrix productions coordinating trouble free production involved juan vargas innovative design frances hasegawa uncanny ability decipher sketches produce beautiful effective art   fm      xxiv reader book youare critic commentator opinion areas publish wisdom pass executive editor sams publishing comments cane mailor write directly book books stronger note technical problems topic book high volume mail receive reply mes sage write include book title author phone fax number carefully review comments share author editors worked book mail feedback samspublishing commail sams publishing201 west rd street indianapolis  usa   fm      xxv introduction book teaches write programs programming language years major innovations software develop ment appeared scene book teaches context develop ments programming innovations days  years ago programmers starting project sit start writing code programming projects large complicated approach work problem plexity large programs complicated entities created humans complexity programs prone error software errors expensive life threatening air traffic control major innovations programming devised cope problem complexity object oriented programming oop unified modeling language uml improved software development processes book teaches language developments mind learn computer language ways conceptualizing software development object oriented programming object oriented programming preferred approach software pro jects oop offers powerful cope complexity viewing pro gram series steps carried views group objects properties actions sound obscure learn programs clearer reliable easily maintained major goal book teach object oriented programming introduce early cover major features majority programs object oriented unified modeling languagethe unified modeling language uml graphical language consisting kinds diagrams helps program analysts figure program helps program mers design understand program works uml powerful tool programming easier effective   intro       object orientedprogrammingin fourth editionwe overview uml chapter  discuss specific features uml book introduce uml feature clarify oop topic discussed learn uml painlessly time uml helps learn languages development platformsof object oriented programming languages addition field languages lacks features pointers tem plates multiple inheritance powerful versatile learn syntax learning head start languages introduced attained wide acceptance standards constant state evolution meant compiler vendor handled details differently november  ansi iso standards committee approved final draft standard ansi stands american national standards institute iso stands international standards institute standard adds features language standard template library stl book follow standard places note popular development environments manufactured microsoft borland inprise flavors microsoft windows book attempted ensure sample programs current versions borland microsoft compilers appendix microsoft visual appendix borland builder compilers book doesthis book teaches object oriented programming programming language microsoft borland compilers introduces uml software development processes suitable professional programmers students kitchen table enthusiasts conceptsoop involves concepts programmers traditional languages pascal basic ideas classes inheritance polymorphism lie heart object oriented programming easy lose sight concepts discussing specifics object oriented language books overwhelm reader details language features ignoring reason features exist book attempts eye big picture relate details larger concepts   intro       introductionthe gradual approach gradual approach book starting simple programming examples working fledged object oriented applications introduce concepts slowly time digest idea illustrations clarify ideas questions programming exercises chapters enhance book classroom answers questions starred exercises appendix exercises vary difficulty pose variety challenges student book book previous programming experience experience visual basic hurt language book books assume teaches ground hurt surprised overlap familiar basic operations microsoft windows starting appli cations copying files software hardware compiler programs book tested microsoft visual borland builder compilers low priced learning editions suitable students appendix detailed operating microsoft compiler appendix inprise borland product compilers adhere standard handle programs book written computer processor speed memory hard disk space compiler chosen check manufacturer specifications determine requirements console mode programs numerous programs book console mode programs character mode window compiler environment directly dos box avoids complexity scale graphics oriented windows programs   intro       object orientedprogrammingin fourth editionexample program source code source code programs sams publishing web site samspublishing comtype isbn book book title click search data book click source code download program examples console graphics litea programs draw pictures graphics library console graphics lite graphics rely console characters sophisticated interesting programs files library provided publisher web site source files programs compile graphics examples include header file pro gram msoftcon horborlacon depending compiler add eithermsoftcon cpporborlacon cppto project graphics appendix console graphics lite listings files tells appendixes explain work files projects specific compiler environment programming exercises chapter roughly  exercises requiring creation complete program solutions exercises chapter provided appendix remainder exercises readers teaching note teachers introduction easier heard difficult learn lan guages grand ideas thrown ideas fascinating fun learning programming culture bit evolution psychoanalysis hope book enjoy learning ideas time teaches details programming   intro       introductiona note teachers teachers interested details approach book organized standard programs book compatible standard minor exceptions needed accommodate compiler quirks devote chapter stl standard template library included standard unified modeling language uml previous edition introduced uml final chapter edition integrated uml body book introducing uml topics places uml class diagrams introduced classes municating generalization covered chapter inheritance chapter  big picture includes list showing uml topics intro duced software development processes formal software development processes increasingly aspect pro gramming students frequently mystified process designing object oriented program reasons include chapter software development processes emphasis object oriented programming edition focused crc cards emphasis software development shifted direction case analysis analyze programming projects institutions students learn learning view mistake separate languages true syntax subset similarity historical accident fact basic approach program radically program overtaken preferred language software development advantageous teach teaching students saved time trouble learning learning ineffi cient approach students skim parts chapters remarkable percentage material   intro       object orientedprogrammingin fourth editionoptimize organization oopwe begun book teaching procedural concepts common moved oop concepts procedural approach digested counterproductive goals true object oriented programming provide minimum procedural groundwork classes chapter  initial chapters heavily steeped opposed usage introduce concepts earlier traditional books structures key feature understanding classes syntactically extension struc tures reason introduce structures chapter  familiar discuss classes concepts pointers introduced traditional books nec essary understand pointers follow essentials oop pointers stum bling block students defer discussion pointers main concepts oop digested substitute superior features features superseded approaches instance printf andscanf functions input output workhorses seldom becausecoutandcindo job leave descriptions func tions defineconstants macros superseded constqualifier inline functions mentioned minimize irrelevant capabilities focus book object oriented programming leave fea tures seldom relevant oop instance understand bit wise operators operate individual bits learn object oriented programming features dropped discus sion mentioned loss understanding major features result book focuses fundamentals oop moving reader gently briskly understanding concepts application real programming problems   intro       introductionprogramming exercises answers unstarred exercises provided book qualified instructors suggested solutions sams publishing web site type isbn title click search book click downloads exercises vary considerably degree difficulty chapter early exercises fairly easy challenging instructors assign exercises suited level class   intro         intro       chapter1the big picture chapter object oriented programming  characteristics object oriented languages16 c22 laying groundwork23 unified modeling language uml    ch01       chapter this book teaches program computer language supports object oriented programming oop oop traditional lan guages pascal basic principles oop key concepts oop objectsandclasses terms relationship older language chapter explores questions overview features discussed balance book general mer cifully discussion abstract worry concepts men tion focus wedemonstrate subsequent chapters object oriented programming object oriented programmingwas developed limitations discovered earlier approaches programming oop stand limitations arose traditional programming languages procedural languages pascal fortran andsimilar languages procedural languages statement language tells computer input add numbers divide display output program procedural language list instructions small programs organizing principle called paradigm needed programmer creates list instructions computer carries division functionswhen programs larger single list instructions unwieldy programmers comprehend program statements broken smaller units reason functionwas adoptedas programs comprehensible human creators term function languages concept referred subroutine subprogram procedure procedural program divided functions ideally function defined purpose defined interface functions program   ch01       idea breaking program functions extended grouping number functions larger entity called module file princi ple grouping components execute lists instructions dividing program functions modules cornerstones structured pro gramming loosely defined discipline influenced programming organization decades advent object oriented programming problems structured programming programs growever larger complex structured programming approach signs strain heard involved horror stories program development project complex schedule slips programmers complexity increases costs skyrocket sched ule slips disaster ensues mythical man monthby frederick brooks addison wesley  vivid description process analyzing reasons failures reveals weaknesses procedural paradigm matter structured programming approach implemented large programs excessively complex reasons problems procedural languages thereare problems functions unrestricted access global data unrelated functions data basis procedural paradigm provide poor model realworld examine problems context inventory program global data item program collection items inventory functions access data input item display item modify item unrestricted access procedural program written kinds data local datais hidden inside function exclusively function inventory program display function local data remember item displaying local data closely function safe modifica tion functions functions access data true data program data madeglobal collection inven tory items global data accessed anyfunction program ignore issue grouping functions modules materially affect argument arrangement local global variables proceduralprogram figure   big picture1thebigpicture1102  ch01       figure1 global local variables large program functions global data items problem procedural paradigm leads larger number potential connections functions data figure   chapter figure1 the procedural paradigm large number connections problems ways program structure difficult conceptualize program difficult modify change global data item necessitate rewriting functions thataccess item   ch01       inventory program decide product codes inventory items changed  digits  digits necessitate change shortto longdata type functions operate data modified deal longinstead ofashort local supermarket moves bread aisle  aisle  patronizes supermarket figure bread adjust shopping habits data items modified large program easy functions access data figure modifications functions work incorrectly global data items modification reaching unintended consequences real modeling problem procedural paradigm arrangement separate data functions poor job modeling things real physical deal objects people cars objects data functions complex real objects attributes andbehavior attributesexamples attributes called characteristics people eye color job title cars horsepower number doors turns attributes real equivalent data program specific val ues blue eye color number doors behaviorbehavior real object response stimulus boss raise generally apply brakes car generally stopping examples behavior behavior function function display inventory data functions model real objects effectively object oriented approach fundamental idea object oriented languages combine singleunit dataand functions operate data unit called anobject big picture1thebigpicture1302  ch01       object functions called member functionsin typically provide access data read data item object member function object access data return access data directly data hidden safe accidental alteration data functions beencapsulatedinto single entity data encapsulationanddata hidingare key terms description object oriented languages tomodify data object functions interact member functions object functions access data simplifies writing debugging maintaining program program typically consists number objects communicate calling member functions organization program figure   chapter figure1 the object oriented paradigm   ch01       mention called member functions called methodsin someother object oriented languages smalltalk languages data items referred attributes orinstance variables calling object member func tion referred sending message object terms official termi nology increasing frequency especiallyin object oriented design analogyyou tothink objects departments sales accounting sonnel company departments provide approach cor porate organization companies small people work personnel problems day payroll field salespeople week department personnel assigned duties data accounting department payroll fig ures sales department sales figures personneldepartment records employee people department control operate department data dividing company departments easier comprehend control company activities helps maintain integrity company accounting department instance responsible payroll data sales manager total salaries paid southern region july walk accounting department start rummaging file cabinets send memo person department wait person access data send reply ensures data accessed accurately corrupted inept outsiders view corporate organization figure   objects provide approach program organization ing maintain integrity program data oop approach organization mind thatobject oriented programming concerned details program operation deals organization pro gram individual program statements statements proce dural languages identical statements entire member function program procedural function larger context determine statement function procedural program object oriented program big picture1thebigpicture1502  ch01       figure1 the corporateparadigm characteristics object oriented languageslet examine major elements object oriented languages general objectswhen approach aprogramming problem object oriented language longer problem divided functions divided objects thinking terms objects functions surprisingly helpful easily programs designed close match objects programming sense objects real process chapter  object oriented software development chapter sales department salesmanagersales datasecretary personnel department personnelmanagerpersonnel datapersonnel stafffinance department chief financialofficerfinancial datafinancialassistant02  ch01       kinds things objects object oriented programs answer lim ited imagination typicalcategories start thinking physical objectsautomobiles traffic flow simulation electrical components circuit design programcountries economics modelaircraft air traffic control elements computer userenvironment windows menus graphics objects lines rectangles circles mouse keyboard disk drives printer data storage constructs customized arrays stacks linked lists binarytrees human entities employees students customers salespeople collections data inventory personnel file dictionary table ofthe latitudes longitudes cities user defined data types time angles complex numbers points planethe big picture1thebigpicture1702  ch01       components computergames cars auto race positions board game chess checkers animals ecological simulation opponents friends adventure games match programming objects real objects happy result combin ing data functions objects offer revolution program design close match programming constructs items modeled exists procedural language classesin oop thatobjects members classes analogy computer languages built data types instance data type int meaning integer predefined chapter  loops decisions declare variables type intas inyour program int day int count int divisor int answer define objects class figure   class serves plan blueprint specifies data functions included objects class defining class create objects mere existence data type intdoesn create variables class description number objects fits technical standing word class prince sting madonna members rock musician class person called rock musician specific people specific names members class possess characteristics object called instance class inheritancethe idea classes leads idea inheritance daily lives cept classes divided subclasses animal class divided mammals amphibians insects birds vehicle class divided cars trucks buses motorcycles chapter   ch01       figure1 a class objects principle sort division subclass shares common characteristics class derived cars trucks buses motorcycles wheels motor defining characteristics vehicles addition characteristics shared members class subclass characteris tics buses instance seats people trucks space hauling heavy loads idea figure   notice figure features base class common derived classes derived class fea tures big picture1thebigpicture1902  ch01       figure1 inheritance oop class parent subclasses original class called base class classes defined share characteristics add called derived classes confuse relation objects classes hand relation base class derived classes objects exist computer memory embody exact characteristics class serves template derived classes inherit characteristics base class butadd inheritance analogous functions simplify traditional procedural pro gram sections procedural program thing recognize opportunity extract common elements tions single function sections program func tion execute common actions perform individual processing base class elements common group derived classes func tions procedural program inheritance shortens object oriented program clarifies therelationship program elements chapter   ch01       reusabilityonce classhas written created debugged distributed programmers programs called reusability tothe library functions procedural language incorporated dif ferent programs oop concept inheritance extension idea reusability programmer existing class modifying add additional features capabilities deriving class existing class inherit capabilities free add features written purchased class creates menu windows graphic user interfaces guis class works fine change add capability menu entries flash simply create class inherits capabilities theexisting adds flashing menu entries ease existing software reused benefit oop companies reuse classes project increased return original programming investment chapters creating data types benefits objects programmer convenient construct data types suppose work dimensional positions coordinates latitude longitude program express operations positional values normal arithmetic operations asposition1 position2 originwhere variables position1 position2 origineach represent pair inde pendent numerical quantities creating class incorporates values declaring position1 position2 originto objects class create data type features intended facilitate creation data types thismanner polymorphism overloadingnote thatthe equal operators position arithmetic operations built types int theobjectsposition1and predefined programmer defined big picture1thebigpicture2102  ch01       objects class position operators operate objects answer define behaviors operators operations member functions positionclass operators functions ways depending operating calledpolymorphism thing distinct forms existing operator capability operate data type overloaded overloadingis kind polymorphism featureof oop derived fromthe language strictly speaking superset correct statement correct statement reverse true elements create concern classes objects object oriented programming originally called classes features including improved approach input output write comments figure   relationship chapter figure1 the relationship   ch01       fact practical differences larger write program program pro grammers features emphasize traditional features proportions programmers head start learning bad habits unlearn material laying groundwork goal writing oop programs inherited structure program oop trenches fashioned procedural fundamentals chapters   deal traditional aspects learn variables control structures loops decisions functions learn structures syntax structures classes tempted skip chapters differences obvious subtle advice read chapters skimming concentrating ways differs specific discussion oop starts chapter  objects classes examples object oriented unified modeling language uml uml graphical language formodeling computer programs modeling create simplified representation blueprint models house uml pro vides visualize higher level organization programs mired details actual code uml began separate modeling languages created grady booch rationalsoftware james rumbaughat general electric ivar jacobsonat ericson eventually rumbaugh jacobson joined booch rational amigos late s unified modeling languages unified modeling language result adopted object management group omg consortium companies devoted industry standards big picture1thebigpicture2302  ch01       theuml reason large computer program hard understand simply code parts program relate object oriented programming vast improvement procedural programs figuring program supposed requires considerable study program listings trouble code detailed nice bigger picture depicts major parts program work uml answers uml set kinds diagrams class diagrams relationships classes object diagrams specific objects relate sequence diagrams communication objects time case diagrams program users interact program diagrams provide variety ways program operation uml plays roles helping understand program works chapter  initial design program fact uml phases software development initial specification documentation testing maintenance uml software development process processes exist stages development process uml simply software developed applied kind programming language uml espe cially attuned oop introduction introduce specific features uml stages book chapter  introduction uml chapter  class diagrams associations navigability chapter  generalization aggregation composition chapter  state diagrams multiplicity chapter  object diagrams chapter  complex state diagrams chapter  templates dependencies stereotypes chapter  cases case diagrams activity diagrams sequence diagrams chapter   ch01       summaryoop organizing programs emphasis programs designed coding details oop programs organized objects data functions data class tem plate number objects inheritance class derived existing class modifying derived class data functions parent class adds inheritance reusability class programs superset adds language capability implement oop adds variety features addition emphasis changed features common seldom frequently result surprisingly language unified modeling language uml standardized visualize program struc ture operation diagrams general concepts discussed chapter concrete learn moreabout details refer chapter progress book questionsanswers questions appendix note book multiple choice questions correct answer  pascal basic _____ languages _____ language  widget blueprint widget object member function class operator data item  major components object _____and functions that_____  function contained class called member function operator class function method big picture1thebigpicture2502  ch01        protecting data access unauthorized functions called _____  good reasons object oriented language define data types program statements simpler procedural languages program taught correct errors easier conceptualize program  _____ model entities real closely functions  true false program program details coding  bundling data functions called _____  language capability produce data types reprehensible encapsulated overloaded extensible  true false easily lines code pro gram written  ability function operator ways data types called __________  normal operator acts special ways newly defined data types glorified encapsulated classified overloaded  memorizing terms critically return key wealth success completely irrelevant chapter   ch01        unified modeling language program builds physical models organization program combination fortran helpful developing software systems big picture1thebigpicture2702  ch01         ch01       chapter2c programming basics chapter started30 basic program construction30 output cout33 direc tives35 comments36 integer variables38 character variables42 input cin45 floating point types48 type bool51 thesetwmanipulator52 variable type summary54 type conversion56 arithmetic operators60 library functions65   ch02       chapter in language fundamentals write elementary programs chapter introduces fundamentals basic program construction variables input output touches variety language features including comments arithmetic operators increment operator data conversion library functions topics conceptually difficult style austere compared basic pascal learn pro gram remind mathematics formula computer program worry gain familiarity starts forbidding languages unnecessarily fancy verbose startedas introduction eithera microsoft borland compiler book appendixes provide details operation compilers work compilerstake source code transform executable files computer programs sourcefiles text files extension cpp thatcor respond listings printed book executable files exeextension executed compiler familiar dos directly ados window programs modification microsoft compiler dos window borland compiler modify programs ning output remain screen long read appendix borland builder basic program construction verysimple program program called source file cpp simply prints sentence screen include iostream namespace std int main cout age language return  small size program demonstrates great deal constructionof programs examine   ch02       functionsfunctions oneof fundamental building blocks firstprogram consistsalmost single function called main parts program function lines start includeandusing lines moment chapter  big picture function class case called member function functions exist independently classes ready talk classes functions separate standalone entities main function namethe parenthesesfollowing word mainare distinguishing feature function parentheses compiler mainrefers variable pro gram element discuss functions text follow convention parentheses function parentheses hold function arguments val ues passed fromthe calling program function word intpreceding function function returnvalue type int worry learn data types chapter return values chapter  functions braces function bodythebodyof functionis surrounded braces called curly brackets thesebraces play role beginandendkeywords languages sur round delimita block program statements function pair braces function body statements function body starting cout starting return function body consist statements start main program statement executed func tion called main true console mode programs book pro gram consist functions classes program elements startup control main function called main program error reported program programs main calls member functions objects carry program real work main function calls stand functions isshown figure   programming basics2c programmingbasics3103  ch02       figure2 objects functions main program statements program statementis thefundamental unit programming statements firstprogram cout age language return statementreturn  statement tells computer display quoted phrase statements computer respect statements statements languages fact majority statements areidentical state ments semicolon signals statement crucial syntaxbut easy forget languages basic statement signaled true leave semicolon compiler signal error chapter   ch02       statement function body return  tells main return  called case operating compiler older versions main return type voidand dispense return statement considered correct standard learn returnin chapter  whitespacewe mentioned theend compiler compiler ignores whitespace completely whitespaceis defined spaces carriage returns feeds tabs vertical tabs formfeeds characters invisible compiler statements separated number spaces tabs statement lines compiler firstprogramcould written include iostream namespace std int main cout age language return  recommend syntax nonstandard hard read doescompile cor rectly exceptions rule whitespace invisible compiler program starting include preprocessor directive written string constants age language broken separate lines long string constant insert slash break divide string separate strings surrounded quotes output coutas statement cout age language phrase quotation marks displayed screen work complete description statement requires understanding objects operator overload ing topics discuss book preview programming basics2c programmingbasics3303  ch02       identifier cout pronounced object predefined corre spond standard output stream stream isan abstraction refers flow data standard output stream flows screen display redirected output devices discuss streams redirection chapter  streams files operator called insertionorput tooperator directs contents variable object left firstit directs string constant everyage language tocout sends display recognize left shiftbit wise operator direct output operators overloaded perform activities depending context learn overloading chapter  operator overloading concepts coutand obscure point easy program figure   result coutand insertionoperator chapter figure2 output withcout string constantsthe phrase quotation marks age language itsown string constant constant variable program runs set program written retains program existence situation strings complicated ways handling strings commonly string represented array characters represented object class learn kinds strings chapter  arrays strings   ch02       character string constant escape sequence itcauses text output displayed phrases press key continue inserted compilers displayafter program terminates discuss escape sequences chapter directives lines thatbegin firstprogram directives preprocessor directive usingdirective occupy sort gray area basic language preprocessor directives lineof firstprogram include iostream program statement function body semicolon program statements starts number sign called preprocessor directive recall program statements instructions puterto adding numbers printing sentence preprocessor directive hand instruction compiler compiler called preprocessor deals directives real compilation process preprocessor directive includetells compiler insert file source file includedirective replaced contents file includedirective insert file source file pasting block text document word processor includeis preprocessor directives identified ini tial sign preprocessor directives common additional examples type file usuallyincluded includeis calleda header file header filesin firstexample thepreprocessor directive includetells compiler add sourcefile iostreamto cppsource file compiling iostreamis exam ple headerfile called include file concerned basic input output operations declarations needed coutidentifier operator declarations compiler recognize coutand usedincorrectly include files newer standard header files file extension older header files left days language theextension programming basics2c programmingbasics3503  ch02       seewhat iostream includedirectory compilerand display source file edit window appendix hints wordpad notepad utilities contents sense point prove iostreamis asource file written normal ascii characters return topic header files chapter introduce library functions theusingdirective program canbe divided namespaces namespace pro gram names recognized namespace unknown directive namespace std program statements follow stdnamespace program components coutare declared namespace usingdirec tive add stdname program elements firstprogram std cout age language avoid adding std dozens times programs usingdirective discuss namespaces chapter  multifile programs commentscomments program person writing program read source file understand compiler ignores comments add file size execution time executableprogram comment syntaxlet rewrite firstprogram incorporating comments source file program comments comments cpp demonstrates comments include iostream preprocessor directive namespace std directivechapter   ch02       int main function main start function bodycout age language statement return  statement function bodycomments start double slash symbol terminate isone exceptions rule compiler ignores whitespace comment start program statement possibilities commentsexample commentscomments good thing programmers tempted leave comments remember smart explanation program smart month forgotten key details program operation today comments explain person listing details program statements comments concentrate big picture clarifying reasons statement group ofstatements alternative comment syntax secondcomment style style comment type comment comment originally charac ter pair ends symbols harder type lowercase uppercase space style generally advantages special situations write multi comment comment symbols thisis long multiline comment good approach making comment large text passage saves insert ing symbol programming basics2c programmingbasics3703  ch02       insert comment text programline func1 function body attempt style comment case closing brace visible compiler style comment runs code pile correctly integer variables variables arethe fundamental language variable symbolic variety values variables located places computer memory variable memory space assigned variable popular languages general variable types integers floating point numbers characters familiar ideas integer variables represent integer numbers     numbers counting discrete numbers objects  pencils  bottles beer floating point numbers integers fractional express idea fourusing integers half defining integer variables integer variablesexist sizes commonly type int memory occupied integer types dependent  bit windows intoccupies  bytes  bits memory intto holdnumbers range         figure   integer vari memory type intoccupies  bytes current windows computers occupied  bytes dos earlier versions windows ranges occupied types listed header file limits alsolook compiler program defines variables type int intvars cpp demonstrates integer variables include iostream namespace std int main int var1 define var1 int var2 define var2chapter   ch02       var1  assign var1var2 var1  assign var2 cout var1  output text cout var2 endl output var2 return  programming basics2c programmingbasics39figure2 variable type intin memory type program compiler edit screen load web site compile link examine outputwindow statements int var1 int var2 define integer variables var1andvar2 keyword intsignals type variable statements called declarations terminate semicolon program statements declare variable place variable declarations program declare variables executable statement readable commonly variablesare located program   ch02       declarations definitionslet digress moment note subtle distinction terms definition anddecla rationas applied variables adeclaration introduces variable var1 program specifies type int declaration sets memory variable called definition statements int var1 int var2 intvars program definitions declarations set memory forvar1andvar2 concerned declarations definitions kinds declarations definitions variable namesthe program intvars usesvariables named var1andvar2 names variables program features called identifiers rules writing identifiers upper lowercase letters digits   score _ character letter underscore identifiers long compilers recognize characters compiler dis tinguishes upper lowercaseletters varis varorvar keyword variable keyword predefined word spe cial meaning int class whileare examples keywords complete list key appendix precedence table keywords compiler documentation programmersfollow convention lowercase letters variable names programmers mixture upper lowercase intvarordatacount liberal underscores whichever approach good sistent program names uppercase reserved constants discussion constthat conventions apply naming pro gram elements classes functions variable clear reading listing variable purpose boilertemperatureis cryptic btort assignment statementsthe statementsvar1  var2 var1  chapter   ch02       assign values variables equal sign guess assigned variable left equivalent inpas cal basic var1  integer constantsthe number20 integer constant constants change pro gram integer constant consists numerical digits point integer constant lie range integers program sign adds var1and   constant result additionis assigned var2 output variations statementcout var1  displays string constant statement cout var2 endl displays variable var2 console output window program isvar1  note coutand operator treat integer string differently send string print text send integer print number obvious operator overloading key feature programmers remember functions printf told onlythe variable displayed type variable syntax intuitive output coutstatements appears outputscreen linefeed inserted automatically start insert linefeed escape sequence seeanother called manipulator theendlmanipulatorthe coutstatementin intvars program ends unfamiliar word endl thiscauses linefeed inserted stream subsequent text displayed sending character clearer programming basics2c programmingbasics4103  ch02       manipulator manipulators instructions output stream modify theoutput ways strictly speaking endl output buffer flushed invisibly pur posesthe equivalent integer types numerical integer types type int common types longandshort strictly speaking type charis integer type cover sepa rately size type intis dependent contrast types longandshorthave fixed sizes matter type longalways occupies bytes type inton  bit windows sys tems range         written aslong int long point type longon  bit sys tems int program  bit dos older versions windows type longwill guarantee afour bit integer type  bit systems type inthas range type short systems type shortoccupies bytes range     point type shorton modern windows systems save memory type int large accessed faster type short create constant type long letter lfollowing numerical inlongvar l assigns long constant  longvarmany compilers offer integertypes explicitly number bits remember  bits byte type names preceded underscores __int8 __int16 __int32 __int64 __int8type corresponds char in32 bit systems type __int16corresponds shortand__int32corresponds bothintandlong __int64type holds huge integers  digits type names advantage number bytes variable implementa tion dependent issue types seldom character variables type charstores integers range   variables type occupy  byte bits memory character variables store numbers confine limited range commonly store ascii characters chapter   ch02       ascii character set representing characters  numbers numbers range   windows systems extend range  accommodate foreign language graphics char acters appendix ascii table theascii character set complexities foreign languages programs transferred computer systems language characters range   standardized byte size type charis smallto accommodate number characters languages japanese standard larger character type called wchar_tto handle foreign languages writing programs international distribution book ignore typewchar_tand assume dealing ascii character set current ver sions windows character constantscharacter constantsuse single quotation marks character note thatthis differs stringconstants double quotation marks compiler encounters character constant translates ascii code constant appearing program translated  figure   programming basics2c programmingbasics43figure2 variable type charin memory   ch02       character variables assigned character constants values program examples character constants variables charvars cpp demonstrates character variables include iostream cout namespace std int main char charvar1 define char variable character char charvar2 define char variable tabcout charvar1 display charactercout charvar2 display character charvar1 set char variable char constant cout charvar1 display character cout display newline character return  initializationvariables initialized atthe time defined program variables typechar charvar1andcharvar2 initialized character constants escape sequencesthis characterconstant odd encountered earlier escape sequence reflects fact backslash escape normal characters interpreted case tis interpreted asthe character tab character tab printing continue tab console mode programs tab stops positioned spaces character stant directly coutin program escape sequences separate characters embedded string constants table   list common escapesequences table2 common escape sequencesescape sequencecharacter abell beep bbackspace fform feedchapter   ch02       nnewline rreturn ttab backslash single quotation mark double quotation marks xddhexadecimal notation backslash single quotation marks double quotation marks spe cialized meanings constants represented escape sequences display characters san quoted phrase string stant cout spot translates spot represent character constant keyboard graphics characters ascii code  xdd rep resentation dstands hexadecimal digit print solid rectangle character listed number  hexadecimal numberb2in ascii table character berepresented character constant xb2 examples thecharvars program prints charvar1 charvar2 tab itthen sets charvar1to prints finally prints thenewline output binput cinnow veseen variable types program accomplishes input program asks user temperature degrees fahrenheit converts celsius displays result integer variables programming basics2c programmingbasics45table2 continuedescape sequencecharacter   ch02       fahren cpp demonstrates cin newline include iostream namespace std int main int ftemp temperature fahrenheitcout enter temperature fahrenheit cin ftemp int ctemp ftemp    cout equivalent celsius ctemp return  statementcin ftemp program wait user type number number variable ftemp keyword cin pronounced object predefined correspond standard input stream stream represents data coming keyboard redirected extrac tionorget operator takes stream object left places variable sample interaction program enter temperature fahrenheit equivalent celsius figure   input cinand extraction operator chapter figure2 input cin   ch02       variables defined point usethefahrenprogram wrinkles input capability closely listing variable ctempdefined program store result arithmetic operation earlier define variables program lan guages including require variables defined executable statement defining variables listing easier understand refer repeatedly start listing variable definitions practice discretion variables places function defined start function cascading insertion operator isused repeatedly coutstatement fahren perfectly legal program sends phrase equivalent celsius tocout itsends ctemp finally newline character extraction operator cascaded cinin allowing user enter series values capability eliminates opportunity prompt user inputs expressions arrangement variables constants operators specifies computation called anexpression alpha and alpha  beta are expressions computa tions expression performed result alphais  expression  parts expressions expressions alpha andbeta areexpressions single variables constants alphaand37 considered beexpressions note expressions statements statements compiler thing terminate semicolon expressions computation expressions statement precedence note parentheses expression ftemp   c programming basics2c programmingbasics4703  ch02       parentheses multiplication carried higher prior ity parentheses subtraction multiplication operations inside parentheses carried precedence signs arithmetic operators precedence left exe cuted case multiplication carried division precedence parentheses applied algebra puter languages natural precedence impor tant topic return introduce kinds operators floating point types talkedabout type intand type char represent numbers integers numbers fractional examine storing numbers floating point variables floating point variables represent numbers place       integer left point fractional floating point variables represent mathematicians real numbers whichare measurable quantities distance area temperature typically fractional kinds floating point variables type float type double typelongdouble start smallest type float type floattype floatstores numbers range  x10 to  x1038 precision ofseven digits occupies  bytes  bits memory figure   program prompts user type floating point number represent ing radius circle calculates displaysthe circle area circarea cpp demonstrates floating point variables include iostream cout namespace std int main float rad variable type float const float  f type const floatcout enter radius circle promptcin rad radiuschapter   ch02       float area rad rad areacout area area endl display answer return  programming basics2c programmingbasics49figure2 variable type floatin memory sample interaction program enter radius circle  area  this area square feet  inch lp record radius   feet time quantity formanufacturers vinyl type doubleandlong doublethe larger floating point types doubleandlong double floatexce require memory space provide wider range values precision type doublerequires  bytes storage handles numbers range  x10 to1 x10308with precision  digits type long doubleis compiler dependent double type doubleis figure     ch02       figure2 variable oftype double floating point constantsthe number  f incircareais floating point constant point signals floating point constant integer specifies typefloat doubleorlong double number written normal notation suffix letter constants type double default typelong double letter write floating point constants exponential notation exponential notation isa writing large numbers write lot zeros     written  e9 exponential notation   written  e3   times  number called exponent places point moved change number ordinary notation exponent positive negative exponential number  e  equivalent   notation sameas   times   chapter   ch02       theconstqualifierbesides demonstratingvariables type float circareaexample introduces qual ifier const statement const float  f type const floatthe keyword const constant precedes data type variable specifies variable change program attempt alter variable defined qualifier elicit error message compiler qualifier constensures program inadvertently alter variable intended constant circarea reminds reading listing variable intended change constmodifier apply entities simple variables learnmore definedirective construction recommended constants preprocessor directive define directive sets equivalence identifier text phrase define  appearing program specifies identifier piwill replaced bythe text  throughout program construction long popular data type constant define lead pro gram bugs definehas superseded constused normal variables encounter construction older programs type boolfor completeness mention type boolhere discuss relational operators chapter variables type intcan billions values type charcan  variables type boolcan values trueandfalse theory booltype requires bit byte storage practice compilers store bytes byte accessed individual bit extracted byte requires additional time type boolis commonly hold comparisons alphaless beta boolval true false programming basics2c programmingbasics5103  ch02       type boolgets george boole th century english mathematician invented concept logical operators true false values true false val ues oftencalled booleanval ues thesetwmanipulatorwe mentioned manipulators operators insertion operator mod ify manipulate data displayed endlmanipulator setw field width output displayed coutas occupying field imaginary box width default field wide hold integer  occupy field characters wide string pajamas occupy field characters wide situations lead optimal width1program prints names cities column theirpopula tions width1 cpp demonstrates setw manipulator include iostream namespace std int main long pop1  pop2  pop3  cout location pop endl portcity pop1 endl hightown pop2 endl lowville pop3 endl return  output program location pop portcity  hightown  lowville unfortunately format hard compare numbers lined insert spaces names cities separate numbers inconvenience chapter   ch02       variation program width2 setwmanipulator eliminate theseproblems field widths names numbers width2 cpp demonstrates setw manipulator include iostream include iomanip setw namespace std int main long pop1  pop2  pop3  cout setw  location setw  population endl setw  portcity setw  pop1 endl setw  hightown setw  pop2 endl setw  lowville setw  pop3 endl return  thesetwmanipulator number string stream printed field ncharacters wide nis argument setw justified field figure   type longis populationfigures prevents potential overflow problem systems  byte integer types largest integer   programming basics2c programmingbasics53figure2 field widths setw   ch02       output width2 location populationportcity  hightown  lowville cascading insertion operatornote sonly coutstatement width1and width2 written mul tiple lines advantage fact compiler ignores whitespace insertion operator cascaded separate statements cout multiple definitionswe initializedthe variables pop1 pop2 pop3to specific values time defined initialized charvari ables charvars defined initialized variables longkeyword separating variable names commas saves space num ber variables type theiomanipheader filethe declarations manipulators endl usual iostreamheader file separate header file called iomanip manipulators includethis header file program width2example variable type summary program examplesso data types int char float long addition mentioned types bool short double long double pause summarize data types table   keyword define type numerical range type accommodate digits precision case floating point numbers bytes memory occupied  bit environment table2 basic variabletypes numerical rangedigits ofbytes keywordlowhighprecisionmemory boolfalsetruen char n short   n chapter   ch02       int       n long       n float3     double1      unsigneddata types eliminating thesign character integer types change range start  include positive numbers represent numbers big signed type table   unsigned versions table2 unsigned integer types numerical rangebytes keywordlowhighmemory unsigned char02551 unsigned short065  unsigned int04    unsigned long04    theunsignedtypes quantities represented positive representing count positive range signed types large change integer type unsigned type precede data type keyword key word unsigned unsigned variable type charwould defined unsigned char ucharvar exceeding range signed types lead obscure program bugs rare situations bugs eliminated unsigned types follow ing program stores constant       billion intinsignedvarand asanunsigned intinunsignvar signtest cpp tests signed unsigned integers include iostream programming basics2c programmingbasics55table2 continuednumerical rangedigits ofbytes keywordlowhighprecisionmemory   ch02       namespace std int main int signedvar  signed unsigned int unsignvar  unsignedsignedvar signedvar   calculation exceeds rangeunsignvar unsignvar   calculation rangecout signedvar signedvar endl wrongcout unsignvar unsignvar endl return  programmultiplies variables  divides  result smaller original number intermediate calculation larger original num ber common situation lead trouble signtestwe expect thirds original     restored variables signedvarthe multiplication created result     exceeded range intvariable         output signedvar   unsignvar    the signed variable displays incorrect answer unsigned variable large hold intermediate result multiplication records result correctly moral careful values generated program range variables hold differenton  bit  bit computers numbers bytes type int type conversionc forgiving languages treats expressions involving data types mixedprogram mixed cpp mixed expressions include iostream namespace std int main int count  float avgweight  f chapter   ch02       double totalweight count avgweight cout totalweight totalweight endl return  variable type intis multiplied variable type floatto yield result typedouble program compiles error compiler considers normal multiply perform arithmetic operation numbers differenttypes languages relaxed permit mixed expressions flag performs arithmetic mixedas error languages assume mix types making mistake save assume good reason carry intentions reason popularity freedom freedom opportunity mistake automatic conversionslet compiler confronts mixed type expressions mixed types considered higher lower based roughly order table   table2 order data types data typeorder long doublehighestdoublefloat long int shortcharlowest arithmeticoperators operate operands type operands types encountered expression lower type variable converted type higher type variable mixed intvalue ofcountis converted type floatand stored temporary variable multiplied thefloatvariable avgweight result type float converted doublesothat assigned doublevariable totalweight process figure   programming basics2c programmingbasics5703  ch02       figure2 data conversion conversions place invisibly ordinarily automatically compiler happy conversions moment start objects defining data types data types mixed expressions normal variables mixed expressions case careful create conversion routines change objects type objects compiler built data types castscastssounds social classes india term applies data conversions programmer opposed automatic data conversions casts called type casts casts program mer convert type situation compiler automatically complaining kinds casts standard static casts dynamic casts reinterpret casts andconstcasts concerned static casts learn specialized situations chapters chapter   ch02       casts forbidding appearance statement cast change variable type intinto variable type char acharvar static_cast char anintvar variable cast anintvar parentheses type changed char angle brackets result anintvaris changed type charbefore assigned acharvar case assignment statement carried cast situations cast essential recall signtestexample intermediate result exceeded capacity vari type erroneous result fixed problem unsigned intinstead int worked intermediate result     fit inthe range unsigned variable suppose intermediate result fit unsigned type case solve problem cast cast cpp tests signed unsigned integers include iostream namespace std int main int intvar      intvar intvar   result large cout intvar intvar endl wrong answerintvar  cast doubleintvar static_cast double intvar   cout intvar intvar endl answer return  multiply thevariable intvarby  result     large fit variable type intorunsigned int leads wrong answer output program redefine data type variables double plenty room type holds numbers  digits suppose reason keeping program small change variables type double casethere solution cast intvarto type doublebefore multiplying times called coercion data coerced type expression static_cast double intvar programming basics2c programmingbasics5903  ch02       castsintvarto type double generates temporary variable type doublewith sameval intvar temporary variable multiplied  type double result fits result divided  assigned normal intvari intvar program output intvar intvar the answer cast wrong answer cast produces correct result standard casts handled format acharvar static_cast char anintvar sayacharvar char anintvar alternatively acharvar char anintvar problem approaches hard syntax blends rest listing hard search operation source code editor format solves problem static_castis easy easy search casts work discouraged deprecated technicalterm casts absolutely controlled evading type safety making variables change types mistake lead trouble impossible compiler spot potential problems casts avoided examples situations casts arithmetic operatorsas probablygathered time normal arithmetic operators foraddition subtraction multiplication division operators work data types integer floating point languages closely analogous algebra arithmetic operators soobvious chapter   ch02       remainder operatorthere arithmeticoperator works integer variables types char short int long called remainder operator represented percent symbol operator called themodulus operator finds remainder number divided remaindprogram demonstrates remaind cpp demonstrates remainder operator include iostream namespace std int main cout   endl    endl    endl    endl    endl return  numbers   divided  remainder operator answers      remainders divisions remainder operator wide variety situations examples note precedence expression cout  the remainder operator evaluated higher precedence operator parentheses  to ensure evaluated actedon arithmetic assignment operatorsc offers ways shorten clarify code arithmeticassignment operator operator helps listings distinctive appearance kind statement common languages total total item adds item total situation add existing perform arithmetic operation syntax statement offends brevity totalappears offers condensed approach arithmetic assignment operator combines arithmetic operator assignment operator programming basics2c programmingbasics6103  ch02       eliminates repeated operand statement pre ceding total item adds item total figure   emphasizes equivalence forms chapter figure2 arithmetic assignment operator arithmetic assignment operators arithmetic operations operators arith metic assignment operators assign cpp demonstrates arithmetic assignment operators include iostream namespace std int main int ans  ans  ans ans  cout ans ans  ans ans  cout ans ans  ans ans  cout ans   ch02       ans  ans ans  cout ans ans  ans ans  cout ans endl return  output program     you arithmetic assignment operators code common feature language numerous examples book increment operators specialized operator add  existing variable normal count count  adds  count arithmetic assignment operator count  adds  count condensed approach count adds  count operatorincrements adds  argument prefix postfix tweird increment operator ways prefix meaning operator precedes variable postfix meaning operator fol lows variable difference variable incremented statement performs operation totalweight avgweight count question multiplication performed countis incremented case countis incremented prefix notation count postfix notation count multiplication formed countwould incremented infigure   programming basics2c programmingbasics6303  ch02       figure2 the increment operator prefix postfix versions increment operator increm cpp demonstrates increment operator include iostream namespace std int main int count  cout count count endl displays cout count count endl displays  prefix cout count count endl displays  cout count count endl displays  postfix cout count count endl displays  return  program output count  count chapter   ch02       count count  count the time countis incremented prefix operator increment happen statement evaluation output operation carried expression countis displayed incre mented sees  time countis incremented postfix opera tor expression count displayed retains unincremented  completion statement increment takes state ment program counthas acquired thevalue  decrement operatorthe decrementoperator behaves increment operator tracts  operand prefix postfix forms library functionsmany activities carried library functions functionsperform file access mathematical computations data conversion things dig deeply library functions explain functions work chapter  simple library functions understanding operation sqrt library functionsqrt calculate square root num ber entered user sqrt cpp demonstrates sqrt library function include iostream cout include cmath sqrt namespace std int main double number answer sqrt requires type doublecout enter number cin number number answer sqrt number square root cout square root answer endl display itreturn  programming basics2c programmingbasics6503  ch02       program obtains number user number argument thesqrt function statement answer sqrt number anargument input function inside parentheses func tion function processes argument returns output function case return square root original number returning function expression takes assigned variable case answer program displays output program enter number square root  multiplying   pocket calculator verify answer pretty close arguments function return values correct data type data types description library function piler file describes hundreds library functions sqrt description specifies argument return type double variables type program header filesas coutand othersuch objects includea header file decla ration library functions documentation sqrt function header file cmath sqrt preprocessor directive include cmath takes care incorporating header file source file include header file library function error message compiler sqrt unidentified identifier library fileswe mentioned earlier files library functions objects linked program create executable file files actual machine executable code functions library files extension lib sqrt function isfound file automatically extracted file linker proper connections called invoked accessed sqrt pro gram compiler takes care details ordinarily worry process understand files chapter   ch02       header files library filesthe relationshipbetween library files header files confusing review library function sqrt link library file pro gram functions library file connected program linker story functions source file names types functions elements library file header file header file group functions functions grouped library file scattered number header files iostreamheader file functions objects including cout cmath header file mathematics functions sqrt string func tions strcpy include string figure   relationship header files library files files program development header files common library function prede fined object operator header file thatcontains declara tions ways includeyou includein ways angle brackets surrounding filenames iostreamandcmath sqrt compiler searching files standard includedirectory directory traditionally called include holds header files supplied compiler manufacturer angle brackets filename quotation marks include myheader quotation marks instruct compiler search header file current directory directory source file quotation marks header files write situation explore chapter  multifile programs quotation marks angle brackets work case making choice speeds compilation process compiler hint file appendix microsoft visual appendix borland builder explain handle header files specific compilers programming basics2c programmingbasics6703  ch02       chapter compilerlinker source filemyprog1 cpp object filelibrary file myprog1 obj somelib lib myprog1 exe library header file somelib user header file include somelib include myprog myprog figure2 header library files summaryin chapter learned major building block programs function afunction named main executed program executed function composed statements computer state ment ends semicolon statement expressions aresequences variables operators evaluate specific output commonly handled coutobject insertion operator variables constants standard output device screen input handled cinand extraction operator values received standard input device keyboard   ch02       data types built char int long shortare integer types float double long doubleare floating point types types signed unsigned versions integer types signaled keyword unsigned hold negative numbers hold positive large type boolis boolean variables hold constants trueorfalse theconstkeyword stipulates variable change pro gram strictly speaking variable longer variable constant variable automatically converted type mixed expressions involving data types casting programmer version employs usual arithmetic operators addition remainder operator returns remainder integer division arithmetic assignment operators perform arithmetic operation anassignment simultaneously increment decrement operators increase ordecrease variable  preprocessor directives consist instructions compiler computer includedirective tells compiler insert file source file definedirective tells substitute thing usingdirective tells piler recognize names namespace library function program code function library file automatically linked program header file function declara tion inserted source file includestatement questionsanswers questions appendix  dividing program functions key object oriented programming program easier conceptualize reduce size program program faster  function ________  function body delimited ________  main function special  instruction tells computer called ________ programming basics2c programmingbasics6903  ch02        write normal comment fashioned comment  expression evaluates numerical emotional state program occurs function statement  bytes occupied data types  bit type intb type long doublec type floatd type long9 true false variable type charcan hold   kind program elements b   junglejime junglejim  write statements display screen character jimc number  true false assignment statement left equal sign equal  write statement displays variable georgein field  characters wide  header file includewith source file coutandcin  write statement numerical keyboard places vari abletemp  header file includewith program setw  exceptions rule compiler ignores whitespace ________ ________ chapter   ch02        true false perfectly variables data types arithmetic expression  expression  evaluates ________  arithmetic assignment operator combines operators  write statement arithmetic assignment operator increase variable tempby  write statement arithmetic assignment operator  increment operator increases variable  assuming var1starts  code fragment print cout var1 cout var1  examples header files purpose  actual code library functions contained ________ file exercises answers starred exercises appendix  assuming   gallons cubic foot write program asks user enter number gallons displays equivalent cubic feet  write program generates table       use single coutstatement output  write program generates output   use integer constant  arithmetic assignment operator generate  decrement operator generate   write program displays favorite poem escape sequence breaks favorite poem borrow ogden nash candy dandy liquor quicker programming basics2c programmingbasics7103  ch02        library function islower takes single character letter argument returns nonzero integer letter lowercase uppercase func tion requires header file ctype write program user enter ter displays nonzero depending lowercase uppercase letter entered sqrt program clues  day british pound equivalent   french franc   german deutschemark   japanese yen   write program user enter dollars displays converted monetary units  convert temperature degrees celsius degrees fahrenheit multiplying   adding  write program user enter floating point num ber representing degrees celsius displays degrees fahrenheit  smaller field setw unused locations default filled spaces manipulator setfill takes single character argument character substituted spaces parts field rewrite widthprogram characters locationname population number filled periods spaces portcity  fractions sum formula dfor                   write program encourages user enter fractions displays sum fractional form reduce lowest terms interaction user enter fraction  enter fraction  sum  you advantage fact extraction operator chained toread quantity cin dummychar chapter   ch02        heyday british empire great britain monetary based pounds shillings pence  shillings pound  pence shilling notation pound sign points    meant  pounds  shillings  pence penceis pluralofpenny monetary introduced s consists pounds pence  pence pound dollars cents systemdecimal pounds    notation   pounds actu ally   write program convert pounds shillings pence format pounds user interaction program enter pounds enter shillings  enter pence  pounds  in compilers number  hex character constant x9c represent pound sign compilers pound sign program directly pasting windows character map accessory  default output justified field left justify text output manipulatorsetiosflags ios left worry notation manipulator setw generate output street address town state jones bernard  pine lane littletown mi brian coleen  th ave bigcity wong harry  alabama lakeville il12 write inverse exercise  user enters great britain pounds notation pounds pence program converts pounds shillings pence notation interaction program enter pounds  equivalent notation    fact assign floating point   integer variable fraction   lost integer simply  cast avoid compiler warning statements float decpounds input user style pounds int pounds style integer pounds float decfrac fraction smaller   pounds static_cast int decpounds remove fractiondecfrac decpounds pounds regain fractionyou multiply decfracby  shillings operation obtains pence programming basics2c programmingbasics7303  ch02         ch02       chapter3loops decisionsin chapter relational operators76 loops78 decisions93 logical operators114 precedence summary118 control statements118   ch03       chapter not programs execute statements strict order programs humans decide response changing circumstances flow control jumps program depending calculations formed program program statements jumps calledcontrol statements major categories loops decisions times loop executed decision execution code depends expressions true false expressions typically involve kind operator called relational operator compares values operation loops decisions closely involved operators examine relational operatorsa relational operatorcompares values values built data type aschar int float user defined classes compar ison involves relationships equal greater result parison true false values equal true false program relat demonstrates relational operators comparison integer vari ablesand constants relat cpp demonstrates relational operators include iostream namespace std int main int numb cout enter number cin numb cout numb  numb  endl cout numb  numb  endl cout numb  numb  endl return  program performs kinds comparisons  number entered theuser output user enters  enter number numb   numb   numb    ch03       expression true numbis  expression true numbisgreater  true numbis equal  output compiler considers true expression  false expression val  mentioned chapter standard includes type bool hold oneof constant values trueorfalse relational expressions numb would type bool program print falseinstead andtrueinstead  fact schizophrenic point displaying relational operations values type boolvari ables cout yields0or1 notfalseortrue historically started booltype theadvent standard onlyway express false true and1 false represented boolval offalse integer  true canbe represented boolval trueor integer  simple situations difference apparent displaytrue false values usethem loops decisions influence program willdo complete list ofc relational operators operatormeaning greater greater equal equal greater equal equal tonow expressions relational operators alsolook expression lines assignment statements set values variables harryandjane hide comments jose canseco baseball card predict expressions evaluate true false jane  assignment statementharry  assignment statement jane harry false harry  true jane harry true jane  true harry  false  harry true  false definition  true  loops decisions3loopsand decisions7704  ch03       note equal operator equal signs common mistake single equal sign assignment operator relational operator nasty bug compiler notice wrong program lucky generates  true assumes    true  false expression list true operators typical situations examine loops decisions loopsloops causea program repeated number times repetition continues condition true condition false loop ends trol passes statements loop kinds loops forloop whileloop doloop theforlooptheforloop people easiest loop understand loop control elements gathered place loop constructions scat tered program harder unravel loops work theforloop executes code fixed number times entering loop times execute code fordemo displays squares numbers   fordemo cpp demonstrates simple loop include iostream namespace std int main int define loop variablefor   loop   cout displaying square jcout endl return  chapter   ch03       output               how work forstatement controls loop consists keyword fol lowed parentheses expressions separated semicolons   expressions initialization expression test expression increment expression figure   loops decisions3loopsand decisions79figure3 syntax forloop expressions involve variable loop variable fordemoexample loop variable defined statements loop body start execute thebodyof loop code executed time loop repeating code raison être loop loop body consists single state ment cout   ch03       statement prints square spaces square mul tiplyingjby loop executes jgoes sequence      squares numbers displayed      note forstatement semicolon forstatementand loop body considered program statement semicolon forstatement compiler loop body program things expect expressions forstatement control theloop initialization expression theinitialization expression executed loop starts loop variable initial fordemoexample sets jto  test expression test expressionusually involves relational operator evaluated time loop body loop executed determines loop exe cuted test expression true loop executed time false loop ends control passes statements loop fordemoexample thestatementcout endl executed completion loop increment expression increment expression loop variable incrementing executed loop loop body executed incre ment operator adds  jeach time loop figure   flowchart forloop soperation times loop inthe fordemoexample executes  times time jis  ensured initialization expression time loop jis  deter mined test expression  jbecomes  loop terminates loop body executed jhas arrangement commonly thing fixed number times start  test expression operator equal desired number iterations increment loop variable iter ation chapter   ch03       figure3 operation forloop forloop count  count  count loop bodyhow times loop body repeated  times countgoingfrom   multiple statements loop bodyof execute statement loop body multiple state ments delimited braces functions note semicolon final brace loop body semicolons individual state ments loop body cubelist statements loop body prints cubes numbers   column format cubelist cpp lists cubes   include iostream loops decisions3loopsand decisions8104  ch03       include iomanip setwusing namespace std int main int numb define loop variablefor numb  numb  numb loop   cout setw  numb display st column int cube numb numb numb calculate cube cout setw  cube endl display nd column return  output program                   we change program immutable mat loop variable initialized   ends   virtue equal operator loop body executed  times loop variable running     note braces single statement loopbody pre viously programmers feel improves clarity loop body consists single statement blocks variable visibility loop body consists braces delimiting statements called block ofcode aspect block variable defined inside block visible visiblemeans program statements access variable dis cuss visibility chapter  functions cubelistwe define variable cubeinside block statement int cube numb numb numb chapter   ch03       access variable block visible thebraces statementcube  loop body compiler signal error variable cubewould beundefined loop advantage restricting visibility variables variable blocks program defining variables inside block incubelist common popular indentation loop stylegood programmingstyle dictates loop body indented shifted relative loop statement rest program fordemoexample isindented cubelistthe entire block including braces indented indentation visual aid programmer easy loop body ends compiler care indent cares common variation style loops book braces aligned vertically programmers prefer place opening brace loop statement numb  numb  numb cout setw  numb int cube numb numb numb cout setw  cube endl saves listing difficult read opening brace harder harder match closing brace style indent body braces numb  numb  numb cout setw  numb int cube numb numb numb cout setw  cube endl common approach people harder eye nect braces loop body getused style choose consistently loops decisions3loopsand decisions8304  ch03       debugging animationyou debugging features built compiler create dramatic animated dis play loop operation key feature single stepping compiler easy start opening project program debugged window source file exact instructions launch debugger vary compilers sult appendix microsoft visual appendix borland builder appropri ate pressing function key program executed time sequence statements executed program proceeds loop statements loop executed control jump start loop cycle willbe repeated debugger watch values variables single step program powerful tool debugging pro gram experiment technique cubelistprogram putting numbandcubevari ables ina watch window debugger change program proceeds consult appendix instructions wat windows single steppingand watch window powerful debugging tools program behave features monitor values key variables step program thesource problem clear forloop variations increment expression increment loop variable perform oper ation likes decrements loop variable program fact asksthe user type number calculates factorial number factorial calculated multiplying original number positive integers smaller factorial        factor cpp calculates factorials demonstrates loop include iostream namespace std int main unsigned int numb unsigned long fact  long larger numberscout enter number cin numb numberchapter   ch03       int numb  multiply  byfact numb numb   cout factorial fact endl return  initialization expression sets jto entered user test expression loop execute long jis greater  increment expression decrementsjafter iteration type unsigned longfor factorial factorials small numbers large  bit systems windows intis long longgives capacity  bit systems output large factorials small input numbers enter number factorial the largest number input  error message larger inputs wrong capacity oftype longwill exceeded variables defined forstatementsthere wrinkle program loop variable jis defined inside forstate ment int numb  common construction cases approach loop vari ables defines variable closely point listing variables defined loop statement visible loop body microsoft piler visible point definition onward endof file standard multiple initialization test expressions expression initialization forstatement separating expressions commas increment expression test expression  alpha   beta body loop normal loop variable initializes variable alpha decrements beta variables alphaandbetadon multiple initialization expressions multiple increment expressions separated commas loops decisions3loopsand decisions8504  ch03       leave expressions expression whileloop test expression true whileloops avoid multiple missing expressions approaches listing concise tend decrease readability stand statements differentform loop achieve thewhilelooptheforloop fixed number times times start loop case kind loop whileloop endon0 asks user enter series numbers number entered  loop terminates notice program advance numbers typed  appears user endon0 cpp demonstrates loop include iostream namespace std int main int  initialized while  loop cin read number ncout endl return  sample output user enters numbers loop continues  entered point loop program terminate     thewhileloop simplified version forloop test expression initialization increment expressions figure   showsthe syntax whileloop chapter   ch03       figure3 syntax whileloop long test expression true loop continues executed endon0 thetext expressionn  nnot equal  true user enters  figure   operation whileloop simplicity whileloop bit illu sory initialization expression loop variable ninendon0 beinitialized loop loop body statement loop variable loop endon0it cin multiple statements whileloopthe while4 usesmultiple statements whileloop variation cubelistprogram earlier forloop calculates fourth power cube series integers assume program column digits wide ensure fit column width loop larger  prior calculation number generate result size program figure loops decisions3loopsand decisions8704  ch03       test expression whilestatement terminates program powers large chapter figure3 operation whileloop while4 cpp prints numbers raised fourth power include iostream include iomanip setw namespace std int main int pow  power initially  int numb  numb  pow  loop power  digits cout setw  numb display number cout setw  pow endl display fourth power numb ready power pow numb numb numb numb calculate fourth power cout endl return    ch03       thefourth power numb simply multiply times time throughthe loop increment numb numbin test expression powdetermines terminate loop output                 the number   wide digit column thistime loop terminated precedence arithmetic relational operators program touches question operator precedence generates famous sequence numbers called thefibonacci series terms series          each term adding previous             fibonacci series applications amazingly diverse fields sorting methods computer science number spirals sunflowers interesting aspects fibonacci series relation golden ratio golden ratio supposed ideal proportion architecture art design ancient greek temples fibonacci series carried ratio terms approaches closer closer golden ratio list ing fibo cpp fibo cpp demonstrates loops fibonacci series include iostream namespace std int main largest unsigned longconst unsigned long limit  unsigned long  term unsigned long  termloops decisions3loopsand decisions8904  ch03       limit  big cout display term long sum add terms variables forward sum series cout endl return  output                                                temple builders ratio terms approximation golden ratio   close governmentwork thefiboprogram type unsigned long type holds largest positive integers test expression whilestatement terminates loop numbers exceed limit type define limit consttype change whennextbecomes larger half limit sumwould exceed limit test expression operators limit  intention compare nextwith result limit  division performed comparison parentheses division ensure performed limit  parentheses arithmetic operators higher precedence relational operators guarantees limit will evaluated comparison parentheses summarize precedence situation chapter logical operators chapter   ch03       thedoloopin whileloop test expression evaluated loop test expres sion false loop entered loop body executed situa tions guarantee loop body executed matter initial state test expression case doloop places test expression endof loop divdo invites user enter numbers dividend number division divisor number calculates quotient answer theremainder operators prints result divdo cpp demonstrates loop include iostream namespace std int main long dividend divisor char start loop processingcout enter dividend cin dividend cout enter divisor cin divisor cout quotient dividend divisor cout remainder dividend divisor cout ndo cin loop condition return  program resides doloop keyword domarks loop loops braces delimit body loop finally whilestatement test expression terminates loop whilestatement looksmuch whileloop position loop fact ends semicolon easy forget syntax doloop figure   loops decisions3loopsand decisions9104  ch03       figure3 syntax doloop computation divdoasks user user enters character test expression remains true user enters test expression false loop terminates figure   charts operation loop divdo output enter dividend enter divisor  quotient  remainder  enter dividend  enter divisor  quotient  remainder  nchapter   ch03       figure3 operation doloop loopwe somegeneral statements loops forloop appropriatewhen advance times loop executed whileanddoloopsare advance loop terminate whileloop whenyou execute loop body doloop execute loop body criteria arbitrary loop type matter style hard fast rules loop types work situation choose type program clearest easiest follow decisionsthe decisions loop relate question loop body humans boring limited decision making processes decide work today continuing loop buy red shirt green shirt vacation mountains sea programs alsoneed time decisions program decision time jump program depending expression loops decisions3loopsand decisions9304  ch03       decisions ways elsestatement chooses alternatives statement simple ifstatement decision statement switch creates branches multi ple alternative sections code depending single variable finally condi tional operator specialized situations examine constructions theifstatementtheifstatement simplest decision statements program ifdemo pro vides ifdemo cpp demonstrates statement include iostream namespace std int main int cout enter number cin  cout number greater  return  theifkeyword test expression parentheses syntax ifstatementis figure   syntax ifis thedifference statements ifare executed test expression true statements whileare executed repeatedly test expression false figure   operation ifstatement ifdemoprogram output number entered user greater  enter number  number greater if number entered greater  program terminate printingthe chapter   ch03       figure3 operation ifstatement loops decisions3loopsand decisions95figure3 syntax ifstatement   ch03       multiple statements ifbodyas loops code ifbody consist single statement ifdemoexample block statements delimited braces variation ifdemo called if2 if2 cpp demonstrates multiline body include iostream namespace std int main int cout enter number cin  cout number cout greater  return  output if2 enter number  number  greater nestingifs inside loopsthe loop decision structures nested inside nestifs inside loops loops inside ifs ifs inside ifs prime nests ifwithin forloop tells number enter prime number prime numbers integers divisible  primes        prime cpp demonstrates statement prime numbers include iostream namespace std include process exit int main unsigned long chapter   ch03       cout enter number cin number test   divide integer fromif   remainder  divisible cout prime divisible endl exit  exit program cout prime return  user enters number assigned program forloop divide nby numbers up  divisor loop variable val jdivides evenly nis prime number divides evenly remainder  remainder operator ifstatement test thiscondition number prime user exit program output separate invocations program enter number it prime enter number  prime enter number  prime divisible notice braces loop body ifstatement statements body considered single statement insert braces readability compiler library function exit whenprimediscovers number prime exits proving number prime accomplished library func tionexit function program terminate matter listing return single argument  returned operating sys tem program exits batch files errorlevel query return provided exit  successfultermination numbers errors loops decisions3loopsand decisions9704  ch03       theif elsestatementtheifstatement condition true true suppose thing condition true false elsestatement consists ifstatement statement block statements keyword llowed anotherstate ment block statements syntax figure   chapter figure3 syntax elsestatement variation ifexample elseadded ifelse cpp demonstrates statememt include iostream namespace std   ch03       int main int cout nenter number cin  cout number greater  elsecout number greater  return  test expression ifstatement true program prints message prints output invocations program enter number that number greater  enter number  number greater the operation elsestatement figure   loops decisions3loopsand decisions99figure3 operation ofthe elsestatement   ch03       thegetche library functionour elsestatement embedded whileloop introducesa library function getche program chcount counts number number characters phrase typed user chcount cpp counts characters typed include iostream namespace std include conio getche int main int chcount  counts space characters int wdcount  counts spaces char ensure cout enter phrase loop enter typed getche read character space wdcount count word chcount count character display resultscout nwords wdcount endl letters chcount  endl return  cinand input approach requires user press enter key inform program input complete true single characters user type character press enter program process character typed user waiting enter getche library function performs service returns character soonas typed takes arguments requires conio hheader file chcountthe character returned getche assigned getche function echoes thecharacter screen eat getche function getch getche echo character screen theif elsestatement word count wdcountto incremented character isa space character count chcountto incremented character aspace space assumed count character note pro gram fairly naïve fooled multiple spaces betweenwords chapter   ch03       sample interaction chcount dowords  letters the test expression whilestatement checks chis character character received keyboard enter key ispressed loop program terminate assignment expressions thechcountprogram rewritten save code demonstrate points assignment expressions precedence result construction peculiar commonly rewritten version called chcnt2 chcnt2 cpp counts characters typed include iostream namespace std include conio getche int main int chcount  int wdcount  space char getche loop enter typed spacewdcount count wordelse chcount count character display resultscout nwords wdcount endl letters chcount endl return  returned getche assigned chas entire assignment expres sion moved inside test expression assignment expression pared loop terminate works entire assignment expression takes assignment getche returns chtake expression loops decisions3loopsand decisions10104  ch03       getche takes compared fact assignment expressions statements suchas  perfectly legal ztakes  takes  assigned expression likewise takes  assigned parentheses assignment expression getche assignment operator lower precedence relational operator parentheses expression evaluated getche wantwhich assign true false thewhilestatement chcnt2provi des lot power small space test expression checking chto character keyboard assigns noteasy unravel time nestedif elsestatementsyou tooyoung remember adventure games early character mode dos systems resurrect concept moved character imaginary landscape discovered castles sorcerers treasure text pictures input output program adifelse models small adventure game adifelse cpp demonstrates adventure program include iostream namespace std include conio getche int main char dir int   cout type enter quit dir enter typed cout nyour location cout npress direction key chapter   ch03       dir getche characterif dir northy elseif dir southy elseif dir eastx elseif dir westx whilereturn  mainwhen thegame starts barren moor unit north south east west program track reports position starts coordinates   exciting character matter moor stretches limitlessly directions figure   provide excitement game sampleinteraction adifelse location  press direction key location   press direction key location   press direction key press enter key exit program program sensation video arcades demonstrate handle multiple branches ifstatement nested inside elsestatement nested inside elsestatement nested inside elsestatement test condition false examined checked proves true action changing coordinate program exits nested decisions nestedgroup elsestatements called decision tree loops decisions3loopsand decisions10304  ch03       figure3 the barren moor matching elsethere potentialproblem nested elsestatements inadvertently match elsewith wrong badelseprovides badelse cpp demonstrates matched wrong include iostream namespace std int main int cout enter numbers cin chapter   ch03       cout elsecout return  multiple values single cin press enter eachvalue type values assigned enter    variable ais  bis  test expression false expect elseto invoked printing aand fact printed elseis matched withthe wrong indentation lead elseis matched fact rule elseis matched ifthat corrected version cout elsecout changed indentation phrase printed elsebody enter    printed entering   will outputb differentif pair elsewith earlier braces theinner cout elsecout elseis paired indentation braces ifwithin invisible loops decisions3loopsand decisions10504  ch03       theelse ifconstructionthe nested elsestatementsin adifelseprogram clumsy hard forhumans interpret nested deeply approach writing statements reformat program ing adelseif adelseif cpp demonstrates adventure program include iostream namespace std include conio getche int main char dir int   cout type enter quit dir enter typed cout nyour location cout npress direction key dir getche character dir northy dir southy dir eastx dir westx whilereturn  mainthe compilersees identical adifelse rearranged ifs directly follow elses result keyword program ladder ifs test expressions true executes fol lowing statement exits ladder format clearer easier follow elseapproach chapter   ch03       theswitchstatementif largedecision tree decisions depend vari switchstatement ladder elseorelse ifconstructions simple called platters appeal nostal gia buffs platters cpp demonstrates switch statement include iostream namespace std int main int speed turntable speedcout nenter    cin speed user enters speed switch speed selection based speed case  user entered cout lp album break case  user entered cout single selection break case  user entered cout obsolete format break return  program prints messages depending user inputs number33   timers recall long playing records lps contained songs turned  rpm smaller  held single song s format preceded lps s keyword switchisfollowed switch variable parentheses switch speed braces delimit number casestatements casekeyword constant parentheses colon case  data type case constants match switch variable figure   syntax switchstatement loops decisions3loopsand decisions10704  ch03       figure3 syntax switchstatement entering switch program assign switch variable match constant casestatements case pun intended statements keyword casewill executed breakis reached platter output enter    single selectionchapter   ch03       thebreakstatementplatters breakstatementat casesection breakkeywordcauses entireswitchstatement exit control statement switchconstruction platters program forget break control passes falls statements case whichis switch variable match caseconstants control passes switch operation switchstatement figure   breakkeyword escape loops discuss thissoon loops decisions3loopsand decisions109figure3 operation switchstatement   ch03       switchstatement character variables theplatters exampleshows switchstatement based variable type int type char adelseifprogram rewritten adswitch adswitch cpp demonstrates switch adventure program include iostream namespace std include conio getche int main char dir int   dir cout nyour location cout nenter direction dir getche character switch dir switch case break north case break south case break east case break west case cout exiting break enter key default cout unknown char switch whilereturn  maina character variable diris switch variable character constants andso case constants note integers characters switch variables examples floating point numbers short statements casekeyword written compact listing caseto print exit mes sage enter pressed thedefaultkeyword adswitchprogram whereyou expect caseat switchconstruction keyword default keyword switchconstruc tion action loop variable match caseconstants print againif user types unknown character breakis default switchanyway chapter   ch03       aswitchstatement common approach analyzing input entered user characters represented case good idea defaultstatement switchstatements construction default cout error incorrect input switch break alerts programmer user wrong operation pro gram brevity include defaultstatement programs switchversus elsewhen aseries orelse statements switchstatement ifconstruction series expressions involve unrelated variables complex steampressure factor  statementselse voltagein voltageout  statementselse day thursday statementselse statementsin switchstatement branches selected variable thing distinguishing branch variable case  somethingbreak case constant integer character constant or expression eval uates constant  conditions met switchstatement clean easy write understand especiallywhen decision tree possibilities conditional operatorhere strange sort decision operator exists common programming situa tion variable true false elsestatement variable minthe alphaor theval beta depending smaller loops decisions3loopsand decisions11104  ch03       alpha beta min alpha elsemin beta sort construction common designers designers long ago invented compressed express conditional operator operator consists symbols operate operands operator operators operate operands equivalent program fragment conditional operator min alpha beta alpha beta statement equal sign called conditional expression alpha beta alpha beta conditional expressionthe question mark colon conditional operator expression question mark alpha beta test expression alphaandbetaare operands test expression true entire conditional expression takes operand question mark alphain test expression false condi tional expression takes operand colon beta parentheses test expression needed compiler customary statement easier read figure   syntax conditional statement figure   operation chapter figure3 syntax theconditional operator   ch03       figure3 operation conditional operator conditional expression assigned variable assigned variable min statement conditional operator absolute variable absolute number number negative sign removed positive absvalue  ifnis  expression positive number nis  expression remains result absolute assigned absvalue program condi cpp conditional operator print xevery spacesin text tab stops screen condi cpp prints  columns demonstrates conditional operator include iostream namespace std int main loops decisions3loopsand decisions11304  ch03       int   column column ischar  multiple  cout space return  output lost width canprobably imagine xasjcycles numbers   remainder operator expression  false  jis multiple  conditional expression  space character jis multiple  whenit terse combined statements loop body eliminating chvari cout  hotshot programmers love sort thing lot bang lit tle code strive concise code obscure worth effort conditional operator optional anif elsestatement fewextra program lines accomplish thing logical operatorsso families operators oddball conditional operator arithmetic operators relational operators examine family operators called logical operators operators logically combine boolean variables variables type bool true false val ues today weekdayhas boolean true false boolean expression maria car connect expressions logically today weekday maria car bus logical nection word true false combination phrases bothtrue bus chapter   ch03       logicalandoperatorlet logical operators combine boolean expressions advenand logical operator spruce adventure game adswitchexample bury treasure coordinates   player advenand cpp demonstrates logical operator include iostream namespace std include process exit include conio getche int main char dir int   dir cout nyour location cout nenter direction dir getche direction switch dir case break update coordinates case break case break case break     cout nyou treasure exit  exit program switchreturn  mainthe key program ifstatementif   test expression true xis  andyis  logical andoperator joins thetwo relational expressions achieve result relational expression arelational operator loops decisions3loopsand decisions11504  ch03       notice parentheses relational expressions   parentheses necessarythis relational operators higher precedence logical operators interaction user arrives coordinates location  enter direction treasure logical operators operatoreffect logicaland logicalor logicalnotthere logical xor exclusive operator examples operators logicaloroperatorsuppose adventure game decide dragons user east west advenor logical oroperator implement thisfrightening impediment free adventuring variation advenand program advenor cpp demonstrates logical operator include iostream namespace std include process exit include conio getche int main char dir int   dir quit enter key cout nyour location   west  east cout nbeware dragons lurk chapter   ch03       cout nenter direction dir getche direction switch dir case break update coordinates case break case break case break switch whilereturn  main theexpression  is true xis  player west xis greater  theplayer east operator lower precedence relational opera tors parentheses needed expression logicalnotoperatorthe logical notoperator unaryoperator takes operand operators binaryoperators operands conditional operator ternaryoperatorin logical operand reversed true false false true nice life easily manipulated  true xis equal   true xis equal  thissituation relational equals operator  achieve sameeffect true false integer variable impression expression true false involve relational operator fact integer expression true false single variable expression xis true xis  false xis  applying operator situation xis true xis  reverses truth ideas work imagine adventure game place mush room locations xandyare multiple  mushrooms consumed player confer magical powers remainder xisdivided  calculated   xis multiple  specifythe mushroom locations write     cout mushroom loops decisions3loopsand decisions11704  ch03       remembering expressions true false involve relational operators operator provide concise format    this logical operators lower precedence relational oper ators parentheses andy  log ical operator unary operator higher precedence relational operators precedence summary summarize precedence situation operators operators higher list higher precedence lower operators higher prece dence evaluated lower precedence operators row equal precedence force expression evaluated placing parentheses complete precedence table appendix precedence table keyw ords operator typeoperatorsprecedence unary highestarithmeticmultiplicative additive relationalinequality equality logicaland conditional assignment lowest note possibility confusion relational expression involves multiple operators parentheses needed harm guarantee expression mistake precedence clear reading listing intended control statements control statements break inswitchstatements places statement continue loops goto avoided statements turn chapter   ch03       thebreakstatementthebreakstatement exit loop switchstatement thenext statement breakis executed statement loop figure   operation breakstatement loops decisions3loopsand decisions119figure3 operation breakstatement demonstrate break program showprim displays distribution prime numbers graphical form showprim cpp displays prime number distribution include iostream namespace std include conio getche int main const unsigned char white  solid color primes const unsigned char gray  gray primes unsigned char screen positionfor int count  count    count white assume prime04  ch03       int  count divide integer fromif count   remainder  gray prime break break loop cout display character getch freeze screen keypress return  position  column  console screen numbered      number position prime position colored white prime colored gray figure   display strictly speaking   considered prime white avoid complicating program columns numbered   notice primes  numbered columns divisible  pattern numbers mathematics excited pattern predict number prime chapter figure3 output showprim program   ch03       forloop determines number prime sets character chtogray executes breakto escape loop exit entire program primeexample series numbers work notice breakonly takes innermost loop true matter structions nested inside breakonly takes construction embedded switchwithin loop breakin switchwould switch loop coutstatement prints graphics character loop continues testing number primeness ascii extended character setthis program twocharacters extended ascii character set characters repre sented numbers   appendix ascii table  represents solid colored block white black white monitor  repre sents gray block theshowprim getch dos prompt scrolling screen program terminates freezes screen press key type unsigned charfor character variables showprim goesup  type charonly  thecontinuestatementthebreakstatement takes loop loop unexpected executing continuehasthis strictly speaking continuetakes closing brace loop body jump figure   operation continue variation divdoexample program earlier chapter division fatal flaw user inputs as divisor program undergoes catastrophic failure terminates runtime error message divide error revised version program divdo2 deals situation gracefully divdo2 cpp demonstrates continue statement include iostream namespace std int main long dividend divisor char loops decisions3loopsand decisions12104  ch03       cout enter dividend cin dividend cout enter divisor cin divisor divisor  attempt divide  cout illegal divisor display message continue loop cout quotient dividend divisor cout remainder dividend divisor cout ndo cin return  chapter figure3 operation continuestatement user inputs for divisor program prints error message continue returns loop issue prompts sample output enter dividend enter divisor  illegal divisor enter dividend abreakstatement situation exit doloop program unnecessarily harsh response   ch03       notice format doloop compact dois sameline opening brace whileis thesame closing brace thegotostatementwe mention gotostatementhere sake completeness good idea exposure structured programming principles gotos lead spaghetti code difficult understand debug goto demonstrated absence program exam ples book lecture syntax insert label code desired destination goto label terminated colon keyword goto label takes label code fragment demon strates approach goto systemcrash statements systemcrash control gotosummaryrelational operators compare values equal larger result logical boolean type bool true false false  true  number kinds loops forloop advance times execute loop whileloop doloops usedwhen condition causing loop terminate arises loop whileloopnot executing doloop executing loop body single statement block multiple statements delimited braces variable defined block visible block kinds decision making statements ifstatement testexpression true elsestatement thing test expression true thing ifconstruction rewriting ladder nested elsestatements readable switchstatement branches multiplesections code depending single variable conditional operator simpli fies returning test expression true false logical andandoroperators combine boolean expressions yield logical notoperator boolean true false false true loops decisions3loopsand decisions12304  ch03       thebreakstatement sends control innermost loop switch itoccurs continuestatement sends control loop occurs gotostatement sends control label precedence specifies kinds operations carried order unary arithmetic relational logical conditional assignment questionsanswers questions appendix  relational operator assigns operand yields boolean result compares operands logically combines operands  write expression relational operator return true variable georgeisnot equal sally   true false  usual purpose expressions forstatement  forloop multistatement loop body semicolons forstatement closing brace multistatement loop body statement loop body test expression  true false increment expression forloop decrement loop variable  write forloop displays numbers    block code delimited ________________  variable defined block visible point definition onward program point definition onward function point definition onward block function  write whileloop displays numbers    true false relational operators higher precedence arithmetic operators chapter   ch03        times loop body executed doloop  write doloop displays numbers    write ifstatement prints yesif variable ageis greater   library function exit exit loop occurs block occurs function occurs program occurs  write elsestatement displays yesif variable ageis greater  displaysnootherwise  getche library functiona returns character key pressed returns character enter pressed displays character screen key pressed display character screen  character cinwhen user presses enter key  elsealways matches _________ ifis _________  ifconstruction nested elseby________________  write switchstatement prints yesif variable chis prints noifchis prints unknown responseotherwise  write statement conditional operator set ticketto  speedis greaterthan    operatorsa compare numeric values combine numeric values compare boolean values combine boolean values  write expression involving logical operator true limitis  speedisgreater   arrange order precedence highest kinds operators logical unary arithmetic assignment relational conditional loops decisions3loopsand decisions12504  ch03        breakstatement exit innermost loop innermost switch loops switches innermost loop switch  executing continueoperator loop control ________  gotostatement control toa operator label variable function exercises answers starred exercises appendix  assume generate table multiples number write pro gram user enter number generates table formatting  columns  lines interaction program lines enter number                              write temperature conversion program user option converting fahrenheit celsius celsius fahrenheit carry conversion floating point numbers interaction program type  convert fahrenheit celsius  convert celsius fahrenheit enter temperature fahrenheit in celsius    operators read input keyboard convert series digits number write program thing user type digits display number type longinteger digits read individually characters getche constructing number involves multiplying existing  adding digit hint subtract   ascii numerical digit chapter   ch03       sample interaction enter number number   create equivalent function calculator program user enter number operator number floating point carry arithmetical operation adding subtracting multiplying divid ing numbers switchstatement select operation finally display result finishes calculation program user calculation response sample interaction theprogram enter number operator number  answer   enter number operator number   answer  n5 forloops construct program displays pyramid screen pyramid xxxxxxxxxxxxxxxxxxxxxxxxxexcept  lines high  lines nest loops print spaces print inside outer loop steps screen  modify fact orprogram chapter repeatedly asks number andcalculates factorial user enters  point terminates enclose relevant statements fact orin whileloop doloop achieve  write program calculates money invest money fixed rate compounded yearly user furnish initial number years yearly rate percent interac tion program enter initial enter number years  enter rate percent year    years   dollars loops decisions3loopsand decisions12704  ch03       year      year       times years forloop calculation easy  write program repeatedly asks user enter money amounts expressed style british currency pounds shillings pence exercises   chapter  programming basics program add amounts display answer pounds shillings pence doloop asks theuser program terminated typical interaction enter   enter    total    continue add amounts carry  shilling pence greater  carry  pound  shillings  suppose dinner party guests table seats ways guests arrange table guests sit chair remaining sit chair remaining sit chair remaining sit fourth chair stand number arrange ments guests chairs      write program calcu lates number arrangements number guests number chairs assume fewer guests chairs plicated simple forloop  write version program exercise  finding final investment program final figures years fixed rate compounded yearly reach sort loop problem worry fractional years integer year  create function calculator style english currency money amounts pounds shillings pence exercises   chapter  calculator user add subtract money amounts multi ply money floating point number sense multiply money amounts thing square money ignore division general style ordinary function calculator exercise  chapter chapter   ch03        create function calculator fractions exercise  chapter  exercise  chapter formulas arithmetic operations applied fractions addition subtraction multiplication division user type fraction operator fraction program display result user continue loops decisions3loopsand decisions12904  ch03         ch03       chapter4structures chapter str uctures132 enumerations148   ch04       chapter we variables simple data types float char int variables types represent item height count groceries organized bags employees departments sentences convenient organize simple variables complex entities construc tion called thestructure chapter devoted structures topic enumerations structures structure collection simple variables variables structure types int float array meet variables type data items structure called members structure books programming structures considered advanced feature intro duced book programmers structures building blocks understanding objects classes fact syntax structure identical class structure typically collection data class collection data functions learning structures paving understanding classes objects structures serve purpose records someother languages pascal simple structure start structure variables integers floating point number structure represents item widget company parts inventory structure kind blueprint single company kinds widgets widget model number member struc ture number member final member cost numbers unexciting open eyes romance commerce program parts defines structure defines structure variable type called part1 assigns values members displays values parts cpp parts inventory demonstrate structures include iostream namespace std   ch04       struct declare structure int modelnumber number widget int partnumber number widget float cost cost int main part1 define structure variablepart1 modelnumber  values structure memberspart1 partnumber  part1 cost  f display structure memberscout model part1 modelnumber cout part1 partnumber cout costs part1 cost endl return  program output model   costs  theparts program main aspects defining structure defining structure variable accessing members structure defining structure structuredefinition tells structure organized specifies members structure struct int modelnumber int partnumber float cost syntax structure definition keyword structintroduces structure definition structure ortag declarations structure members modelnumber partnumber andcost enclosed braces semicolon closing brace terminating entire structures4structures13305  ch04       structure note semicolon structures usage block code blocks code loops decisions functions delimited braces semicolon final brace figure   syntax structure declaration chapter keyword struct structure tag structure members semicolon terminates definition braces delimit structure members struct int modelnumber int partnumber float cost figure4 syntax structuredefinition structure definition structure definitiondefinition serves blueprint creation variables type create structure variables set space memory variables definition simple variable set memory structure definition specification structure vari ables defined figure   accidental description sounds distinction classes objects chapter  big picture object relationship class variable structure type structure definition defining structure variable statement main part1 defines variable called part1 type structure definition reserves space memory part1 space hold members part1 namelymodelnumber partnumber cost case  bytes ints assuming  bit  bytes float figure   part1looks inmemory figure  byte integers   ch04       figure4 structures andstructure variables ways partstructure specification data type clear notice format defining structure vari defining basic built data type int part1 int var1 similarity accidental aims syntax opera tion user defined data types built data types include keyword structin structure definitions asin struct part1 keyword structures4structures135structure definition foo variables type foo specifications structure foo foo foo foo    ch04       figure4 structure members memory accessing structure members structurevariable defined members accessed called thedot operator member part1 modelnumber  structure member written parts structure variable part1 thedot operator consists period member modelnumber themodelnumbermember part1 real dot operator member accessoperator lengthy term remember component expression involving dot operator specific structure variable part1in case structure definition variable distinguish variable part1 part2 figure   chapter   ch04       figure4 the dot operator structure members treated variables statement part1 modelnumber  member  normal assignment operator program members coutstatements ascout nmodel part1 modelnumber statements output values structure members structure features structures surprisingly versatile additional features structure syntax usage structures4structures13705  ch04       initializing structure members structure members initialized structure variable defined demonstrates variable structure type hope suspected listing partinit partinit cpp initialization structure variables include iostream namespace std struct structure int modelnumber number widget int partnumber number widget float cost cost int main initialize variable part1    f part2 define variable display variablecout model part1 modelnumber cout part1 partnumber cout costs part1 cost endl part2 part1 assign variable display variablecout model part2 modelnumber cout part2 partnumber cout costs part2 cost endl return  programdefines variables type part1andpart2 initializes part1 printsout values members assigns part1topart2 prints members output model   costs   model   costs  not surprisingly output repeated variable equal tothe thepart1structurevariable members initialized variable defined part1     chapter   ch04       values assigned structure members surrounded braces separated commas list assigned member member structure variables assignment statements seenin partinit structure variable assigned part2 part1 member part1is assigned member part2 sincea large structure dozens members assignment statement require computer considerable work note structure variable assigned structure type assign variable structure type variable type thecompiler complain measurement structure group kind looked architectural drawing united states distances measured feet inches  inches foot length living room   meaning  feet  inches hyphen negative sign separates feet inches english measurement judgment merits english versus metric figure   typical length measurements english suppose create drawing architectural program english convenient store distances numbers representing feet inches englstrc idea structure program measurements type distancecan englstrc cpp demonstrates structures english measurements include iostream namespace std struct distance english distance int feet float inches structures4structures13905  ch04       int main distance d1 d3 define lengths distance    define initialize length length d1 usercout nenter feet cin d1 feet cout enter inches cin d1 inches add lengths d1 d3d3 inches d1 inches inches add inches d3 feet  carry d3 inches   total exceeds   decrease inches   d3 inches   d3 feet increase feet  d3 feet d1 feet feet add feet display lengthscout d1 feet d1 inches cout feet inches cout d3 feet d3 inches return  chapter figure4 measurements english   ch04       structure distancehas members feetandinches inchesvari mayhave fractional type floatfor feet integers type intfor define distances d1andd3 initializing initialize    program asks user enter distance feet inches assigns distance d1 inches smaller   adds distance d1tod2 obtaining total distance d3 finally program displays initial distances newly calculated total distance output enter feet enter inches           notice add distances program statement d3 d1 englstrcwhy routine built add variables type distance operator works built types float types define distance benefits classes chapter  operator overloading ability add perform operations onuser defined data types structures structures neststructures structures variation englstrcprogramthat program create data structure stores dimensions typical room length width working english dis tances variables type distanceas length width variables struct room distance length distance width program englarea roomstructure represent room englarea cpp demonstrates nested structures include iostream namespace std struct distance english distance int feet structures4structures14105  ch04       float inches struct room rectangular area distance length length rectangle distance width width rectangle int main room dining define roomdining length feet  assign values roomdining length inches   dining width feet  dining width inches   convert length widthfloat dining length feet dining length inches  float dining width feet dining width inches  area display itcout dining room area square feet return  program defines single variable dining type room lineroom dining variable dining type roomit assignsvalues members structure accessing nested structure members structureis nested inside apply dot operator access structure members dining length feet  statement diningis structure variable lengthis ofa member outer structure room feetis member struc ture distance statement feetmember lengthmember thevari diningand assign  figure   works chapter   ch04       structuresstructures143figure4 dot operator nested structures values assigned members dining program calculates floor areaof room figure   area program converts length width variables type distancetovariables type float representing distances feet values landwarefound adding feetmember distanceto inchesmember divided  feetmember converted type floatautomatically addition performed result type float landwvariables multiplied thearea   ch04       figure4 area feet inches user defined type conversions note program converts distances type distanceto distances type float variables landw converts room area stored structure typeroom defined structures type distance single floating point number representing area square feet output dining room area   square feetconverting type aspect programs employ user defined data types initializing nested structures youinitialize structure variable structures state ment initializes variable diningto values englareaprogram room dining       structure type distance embedded room initialized separately remember involves surrounding values braces separating commas distanceis initialized    chapter   ch04          distancevalues initialize roomvariable surrounded braces separated commas depth nestingin theory structurescan nested depth program designs apartment buildings statements apartment1 laundry_room washing_machine width feeta card game examine kind structure model playing card program imitates game played cardsharps professional gamblers carnivals cardsharp cards places face table interchanges positions times guess correctly card win plain sight cardsharp switches cards rapidly confusingly player mark loses track card loses game played money structure program represent playingcard struct card int number int suit structure separate members hold number card suit numberruns       represent jack queen king ace respec tively order poker suitruns   numbers represent clubs diamonds hearts spades listing cards cards cpp demonstrates structures playing cards include iostream namespace std const int clubs  suitsconst int diamonds  const int hearts  const int spades  structures4structures14505  ch04       const int jack  face cardsconst int queen  const int king  const int ace  struct card int number   jack queen king ace int suit clubs diamonds hearts spades int main card temp chosen prize define cards int position card card1  clubs initialize card1cout card   clubs card card2 jack hearts initialize card2cout card  jack hearts card card3 ace spades initialize card3cout card  ace spades prize card3 copy card remember cout swapping card  card  temp card3 card3 card1 card1 temp cout swapping card  card  temp card3 card3 card2 card2 temp cout swapping card  card  temp card2 card2 card1 card1 temp cout    ace spades cin position switch position case  chosen card1 break case  chosen card2 break case  chosen card3 break chapter   ch04       chosen number prize number compare cardschosen suit prize suit cout win elsecout lose return  sample interaction program card   clubs card  jack hearts card  ace spades swapping card  card  swapping card  card  swapping card  card     ace spades  lose case hapless mark chose wrong card answer  program defining number variables type const intfor face card suit values variables program included complete ness cardstructure program defines uninitialized vari ables type card temp chosen prize defines cards card1 card2 card3 initializes arbitrary card values prints values cards user sets card variable prize card values remembering card location player asked guess game program rearranges cards swaps cards cards cards time tells user program easy add statements shuffle cards flashing statements screen alimited time increase challenge finally program asks player position card sets card variable chosen card position compares chosenwith prizecard match win player loss notice easyswapping cards temp card3 card3 card1 card1 temp cards represent structures moved naturally ability assignment operator work structures structures4structures14705  ch04       structures compared chosen prize legal yetbecause routine built operator cardstructure addition problem solved operator overloading structures classes confess misled capabilities structures true structures hold data classes hold data func tions structures fact hold data functions hold data syntactical distinction structures classes minimal theory interchangeably programmers structures chapter exclusively data classes hold data functions inchapter  objects classes enumerationsas structures looked provide user defined data types dif ferent approach defining data type enumeration feature crucial structures write perfectly good object oriented programs knowing enumerations spirit allowing define data types simplify clarify pro gramming days week enumerated types work advance finite short list values data type program dayenum enumeration thedays week dayenum cpp demonstrates enum types include iostream namespace std enum typeenum days_of_week sun mon tue thu fri sat int main days_of_week day1 day2 define variables type days_of_weekchapter   ch04       day1 mon values today2 thu variablesint diff day2 day1 integer arithmeticcout days diff endl day1 day2 comparisonscout day1 day2 return  anenumdeclaration defines set names permissible values type permissible values called enumerators enumtypedays_of_weekhas enumerators sun mon tue sat figure   syntax enumdeclaration structures4structures149figure4 syntax enumspecifier anenumeration list values specification int terms range values enumyou specific figure   difference intandan enum declared enumtypedays_of_weekas define variables type dayenumhas variables day1andday2 def ined statementdays_of_week day1 day2 mustuse keyword enumbeforethe type enum days_of_week day1 day2   ch04       figure4 usage ints enums variables enumerated type day1andday2 values listed theenumdeclaration values monandthu values listed declaration statements day1 halloween illegal standard arithmetic operators enumtypes program subtract values comparisonoperators program output days day1 day2chapter   ch04       arithmetic relational operators sense enumtypes declaration enum pets cat dog hamster canary ocelot clear expressions dog canaryor cat hamster enumerations treated internally integers explains perform arithmetic relational operations ordinarily list   dayenumexample values sunthroughsatare stored integer values   arithmetic operations enumtypes place integer values compiler enumvariables integers careful advantage fact day1  compiler issue warning compile forget thatenums reallyintegers thing anotherour examplecounts phrase typed user earlier chcountexample simply count spaces determine number counts places string nonspace characters space figure   structures4structures151figure4 operation wdcountprogram false count type multiple spaces handle tabs whitespace characters listing wdcount enumeration withonly enumerators   ch04       wdcount cpp demonstrates enums counts phrase include iostream namespace std include conio getche enum itsaword   int main itsaword isword word whitespacechar character read keyboard int wordcount  number readcout enter phrase getche character white space isword word word wordcount count word isword reset flag selse normal characterif isword start word isword set flag quit enter keycout word count wordcount return  program cycles doloop reading characters keyboard passes space characters finds space point counts word passes spaces finds character counts characters finds space requires program remember middle word middle string spaces remembers enumvari isword variable defined type itsaword type statement enum itsaword variables type itsawordhave values noandyes notice liststarts  false avariable type boolfor purpose chapter   ch04       theiswordvari set nowhen program starts program encounters nonspace character sets iswordtoyesto middle word space point set thescenes nohas  yeshas  avoid making fact isword isword isword ofif isword good style note extra set braces ifstatement program elsewill match thefirst approach situation wdcountis variable type bool straightforward depending situation organizing cards final enumtypes remember cardsprogram earlier thischapter defined group constants type const intto represent card suits const int clubs  const int diamonds  const int hearts  const int spades  sort list clumsy revise cardsprogram enumerationsinstead listing cardenum cardenum cpp demonstrates enumerations include iostream namespace std const int jack    unnamed integersconst int queen  const int king  const int ace  enum suit clubs diamonds hearts spades struct card int number   jack queen king ace suit suit clubs diamonds hearts spades int main structures4structures15305  ch04       card temp chosen prize define cardsint position card card1  clubs initialize card1cout card  clubs card card2 jack hearts initialize card2cout card  jack hearts card card3 ace spades initialize card3cout card  ace spades prize card3 copy card remember cout swapping card  card  temp card3 card3 card1 card1 temp cout swapping card  card  temp card3 card3 card2 card2 temp cout swapping card  card  temp card2 card2 card1 card1 temp cout    ace spades cin position switch position case  chosen card1 break case  chosen card2 break case  chosen card3 break chosen number prize number compare cardschosen suit prize suit cout win elsecout lose return  set definitions suits cardsprogram beenreplaced enumdeclaration enum suit clubs diamonds hearts spades chapter   ch04       cleaner approach constvariables val ues suitare attempts values card1 suit  result warnings compiler integer values anenumdeclaration enumerator integer  ond  ordering altered equal sign starting point  suits start   sayenum suit clubs  diamonds hearts spades subsequent names values starting point diamondsis  heartsis  spadesis  equal sign givea enumerator perfectone annoyingaspect enumtypes recognized input output statements code fragment displayed enum direction north south east west direction dir1 south cout dir1 guess output south nice treats variables enumtypes integers output  exampleshere examples enumerated data declarations feeling possi ble feature enum months jan feb mar apr jun jul aug sep oct nov dec enum switch enum meridian enum chess pawn knight bishop rook queen king enum coins penny nickel dime quarter half dollar dollar examplesin future programs structures4structures15505  ch04       summarywe covered topics chapter structures enumerations structures impor tant component syntax classes fact classes syntactically structures include functions structures typi cally group data items form single entity structure definition lists variables structure definitions set memory struc ture variables structure variables treated indivisible units situations setting structure variable equal situations members accessed individually dot operator anenumeration programmer defined type limited fixed list values decla ration type specifies permissible values called enumerators definitions create variables type internally compiler treats enumeration variables integers structures confused enumerations structures powerful flexible grouping diverse collection data single entity enumeration definition variables fixed set values listed enumerated type declaration questionsanswers questions appendix  structure brings group items data type lated data items integers user defined names variables  true false structure class syntax  closing brace structure __________  write structure specification includes variables type int calledhrs mins secs structure time  true false structure definition creates space memory variable chapter   ch04        accessing structure member identifier left dot operator ofa structure member structure tag structure variable keyword struct  write statement sets hrsmember time2structure variable equal   variables defined type structtime structure containsthreeintmembers bytes memory variables  write definition initializes members time1 variable type struct time defined question  hrs  mins  secs   true false assign structure variable provided type  write statement sets variable tempequal pawmember dogsmem ber fidovari  enumeration brings group items data types lated data variables integers user defined names constant values  write statement declares enumeration called playerswith values  assuming enumtypeplayersas declared question  define variables joeandtom assign values  assuming statements questions   state statements legal joe qb tom tom difference joe tom  enumerators enumtype represented values _________ _________ _________  write statement declares enumeration called speedswith enumeratorsobsolete single album names integer values    structures4structures15705  ch04        state reason enum isword thanenum isword exercises answers starred exercises appendix  phone number    thought parts area code  exchange  number  write program structure store parts phone number separately structure phone create structure variables type phone initialize user input number display numbers interchange enter area code exchange number   my number    number     point dimensional plane represented numbers xcoordi nate ycoordinate   represents point  units vertical axis  units horizontal axis sum points defined point xcoordinate sum xcoordinates points ycoordinate sum ycoordinates write program structure called pointto model point define points user input values set point equal sum display point interaction program enter coordinates  enter coordinates   coordinates    create structure called volumethat variables type distance theenglstrcexample model volume room initialize variable type volumeto specific dimensions calculate volume represents print result calculate volume convert dimension distancevari variable type floatrepresenting feet fractions foot multiply numbers  create structure called employeethat members employee number typeint employee compensation dollars type float user data employees store variables type struct employee andthen display employee chapter   ch04        create structure type datethat members month day month year type int day month year order prefer user enter format    store variable type struct retrieve values variable print format  earlier statements automatically understand data types enumerations operators variables simply inte gers overcome limitation switchstatements translate betweenthe user expressing enumerated variable actual values enumer ated variable imagine enumerated type values employee type organization enum etype laborer secretary manager accountant executive researcher write program user type entering letter stores type chosen variable type enum etype finally displays complete word type enter employee type letter laborer secretary manager accountant executive researcher aemployee type accountant switchstatements input output  add variable type enum etype exercise  variable type structdate exercise  employeeclass exercise  organize pro gram user enters items employees employee number employee compensation employee type employment program store variables type employee display contents  start fraction adding program exercise  chapter  programming basics program stores numerator denominator fractions adding store answer fraction modify pro gram fractions stored variables type struct fraction members fraction numerator denominator type int fraction data stored structures type  create structure called time members type int called hours minutes seconds write program prompts user enter time hours minutes seconds    format number entered separate prompt enter hours program store time variable type struct time finally print total number seconds represented time long totalsecs hours  minutes  secondsstructures4structures15905  ch04        create structure called sterlingthat stores money amounts style british discussed exercises   chapter  loops decisions mem bers called pounds shillings pence type int program user enter money style pounds type double vert style store variable type struct sterling thendisplay pounds shillings pence format  timestructure exercise  write program obtains timeval ues user    format stores struct timevari ables converts seconds type int adds quantities converts result hours minutes seconds stores result timestructure finally displays result    format  revise function fraction calculator program exercise  chapter  fraction stored internally variable type struct fraction iscussed inexercise  chapter chapter   ch04       chapter5functionsin chapter simple functions162 passing arguments functions167 returning values functions176 reference arguments182 overloaded functions188 recursion193 inline functions195 default arguments197 scope storage class199 returning reference206 constfunction arguments208   ch05       chapter a function groupsa number program statements unit unit invoked parts program importantreason functions aid conceptual organization pro gram dividing program functions discussed chapter  big picture major principles structured programming object oriented program ming additional powerful ways organize programs reason functions reason invented long ago reduce pro gram size sequence instructions appears program candi function function code stored place memory function executed times program figure   function invoked sections program figure5 flow control toa function functions subroutines procedures languages simple functionsour exampledemonstrates simple function purpose print  aster isks program generates table lines asterisks table readable listing table   ch05       table cpp demonstrates simple function include iostream namespace std void starline function declaration prototype int main starline function cout data type range endl starline function cout char   endl short     endl int dependent endl long         endl starline function return  starline function definition void starline function declarator int   function bodycout cout endl output program data type range char   short     int dependent long         program consists functions main andstarline programs main components add function program function declaration callsto function function definition functions163functions06  ch05       function declarationjust tuse variable telling compiler function telling compiler ways approach declare function called approach define itbefore called examine tableprogram function starline isdeclared inthe void starline declaration tells compiler point plan function called starline keyword voidspecifiesthat function return parentheses takes arguments keyword voidin paren theses function takes arguments leaving common practice arguments return values notice function declaration terminated semicolon acomplete statement function declarations calledprototypes provide model blueprint function compiler function coming pro gram references functionitself infor mation declaration return type number types arguments referred function signature calling functionthe function called orinvoked executed times main threecalls starline function function parentheses syn tax declaration return type terminated semicolon executing statement function exe cute control transferred function statements function definition examine moment executed control returns statement fol lowing function function definitionfinally function referred function definition defi nition actual code function definition starline chapter   ch05       void starline declarator int   function bodycout cout endl definition consists called declarator function body thefunction body composed statements function delimited braces declarator agree declaration function argument types order arguments return type notice declarator notterminated semicolon figure   syntax function declaration function function definition functions165functionsfigure5 functionsyntax   ch05       function called control transferred statement function body statements function body executed closing brace encountered control returns calling program table   summarizes function components table5 function componentscomponentpurposeexample declarationspecifies function argument void func prototype types return alerts compiler programmer afunction coming callcauses thefunction executed func definitionthe functionitself void func lines code constitute function lines code declaratorfirst lineof definition void func comparison library functionswe seensome library functions embedded calls library functions asch getche program code declaration definition library function declaration header file program conio getche definition compiled executable code library file linkedauto matically program build library function write declarationor definition write functions declaration definition source file inthe tableexample things complicated multifile programs dis cuss chapter  multifile programs eliminating declarationthe approach inserting function program eliminate function declara tion place function definition function listing function rewrite tableto produce table2 definition forstarline appears chapter   ch05       table2 cpp demonstrates function definition preceding function calls include iostream namespace std function declaration starline function definition void starline int   cout cout endl int main main function starline function cout data type range endl starline function cout char   endl short     endl int dependent endl long         endl starline function return  approach simpler short programs removes declaration flexible technique functions programmer considerable thought arranging functions appears called impossible programmers prefer place main listing execution general stick approach declarations starting listingwith main passing arguments functionsanargument piece data intvalue passed program func tion arguments function operate values things depending requirements program calling passing constantsas supposewe decide starline function rigid function prints  asterisks function print character number times functions167functions06  ch05       program tablearg incorporates function arguments pass character printed number times print tablearg cpp demonstrates function arguments include iostream namespace std void repchar char int function declarationint main repchar  function cout data type range endl repchar  function cout char   endl short     endl int dependent endl double         endl repchar  function return  repchar function definition void repchar char int function declarator int  function bodycout cout endl function called repchar declaration void repchar char int declaration specifies data typesthe items parentheses data types arguments willbe repchar charandint function specific values constants case inserted place parentheses repchar  function specifies actual valuesthis statement instructs repchar print  dashes values supplied types declaration argument character typechar argument number  type int types dec laration definition mustalso agree chapter   ch05       repchar repchar  tells print  equal signs prints  dashes output fromtablearg data type range char   short     int dependent long         calling program supplies arguments and43 thefunction variables function hold argument values arecalled parameters repchar arechandn note programmers terms argument parameter interchangeably declarator function definition specifies data types names parameters void repchar char int declarator specifies parameter names data typesthese parameter names chandn function normal variables placing declarator equivalentto defining statements char int function called parameters automatically initializedto values passed thecalling program passing variables tableargexample arguments constants  variables constants passed arguments program vararg incorporates repchar function tablearg user char acter number times repeated vararg cpp demonstrates variable arguments include iostream namespace std void repchar char int function declaration5functions169functions06  ch05       int main char chin int nin cout enter character cin chin cout enter number times repeat cin nin repchar chin nin return  repchar function definition void repchar char int function declarator int  function bodycout cout endl sample interaction vararg enter character enter number times repeat  herechinandnininmain arguments repchar repchar chin nin function callthe data types variables arguments match function dec laration definition constants chinmust char ninmust bean int passing invarargthe values possessed chinandninwhen function executed passed function constants passed function creates variables hold values variable arguments function variables names data types parameters declarator chof typecharandnof type int initializes parameters values passed accessed variables statements function body chapter   ch05       passing argumentsin function creates copies arguments passed called passing explore approach passing reference thischapter figure   variables created function arguments passed functions171functionsfigure5 passing byvalue structures arguments entire structures canbe passed arguments functions examples thedistancestructure structure representing graphics shape passing distance structure features function argument type distance samestructure type programs chapter  structures listing engldisp   ch05       engldisp cpp demonstrates passing structure argument include iostream namespace std struct distance english distance int feet float inches void engldisp distance declarationint main distance d1 define lengths length d1 usercout enter feet cin d1 feet cout enter inches cin d1 inches length usercout nenter feet cin feet cout enter inches cin inches cout nd1 engldisp d1 display length  cout nd2 engldisp display length  cout endl return  engldisp display structure type distance feet inches void engldisp distance parameter type distance cout feet inches themain program accepts distances feet inches format user places values structures d1andd2 calls function engldisp thattakes distancestructure variable argument purpose function display distance passed standard format    sample interac tionwith program enter feet  enter inches chapter   ch05       enter feet enter inches  d1      function declaration function calls main declarator functionbody treat structure variables variable argument type distance basic typelike charorint inmain calls function engldisp passes structure d1 thesecond passes function engldisp parameter structure typedistance names simple variables structure variable automatically initialized structure passed main statements engldisp thenaccess members ddin usual expressions feetanddd inches figure   structure passed argument function functions173functionsfigure5 structure passed argument   ch05       simple variables structure parameter ddinengldisp argu ments passed d1andd2 engldisp modify ddwithout d1andd2 engldisp contained statements feet  inches   noeffect d1ord2inmain passing circlestructure passing structure function console graphics lite functions source header files functions appendix console graphics lite downloaded publisher web site introduction include header file msoftcon horborlacon depending compiler add source file msoftcon cpporborlacon cpp yourproject console graphics lite functions appendix procedure adding files projects appendix microsoft visual appendix borland builder structure called circlerepresents circular shape circles positioned acertain place console screen radius color pattern values colors patterns appendix listing circstrc circstrc cpp circles graphics objects include msoftcon graphics functions struct circle graphics circle int xco yco coordinates center int radius color fillcolor color fstyle fillstyle pattern void circ_draw circle set_color fillcolor set color set_fill_style fillstyle set pattern draw_circle xco yco radius draw solid circle int main init_graphics initialize graphics create circleschapter   ch05       circle    cblue x_fill circle    cred o_fill circle    cgreen medium_fill circ_draw draw circlescirc_draw circ_draw set_cursor_pos   cursor lower left corner return  variables type circle initialized sets val ues circle    cblue x_fill assume console screen  columns  rows defini tion  column number coordinate  row number coordi nate starting screen center circle located  radius circle cblueis color x_fillconstant filled letter circles initialized circles created initialized draw calling circ_draw func tion times circle figure   output circstrcprogram admittedly circles bit ragged result limited number pixels inconsole mode graphics functions175functionsfigure5 output circstrcprogram   ch05       notice structure holds characteristics circles circ_draw func tion draw chapter  objects classes objects formed combining structures functions create enti ties possess characteristics performactions names declarationhere increasethe clarity function declarations idea insert ingful names declaration data types suppose function displayed point screen declaration data typesvoid display_point int int declarationbut approach isvoid display_point int horiz int vert declarationthese twodeclarations thing compiler approach int int hint argument vertical coordinate horizontal coordinate advantage approach clarity programmer declaration correct arguments calling function note names declaration names calling function perfectly free argument names display_point function callwe datatype approach listing clearer returning values functions function completesits execution return single calling program return consists answer problem function solved demonstrates function returns weight kilograms weight pounds listing convert convert cpp demonstrates return values converts pounds include iostream namespace std float lbstokg float declarationint main float lbs kgs chapter   ch05       cout nenter weight pounds cin lbs kgs lbstokg lbs cout weight kilograms kgs endl return  lbstokg converts pounds kilograms float lbstokg float pounds float kilograms   pounds return kilograms somesample interaction program enter weight pounds  weight kilograms  when function returns data type function declaration placing data type floatin case function declaration definition functions earlier program examples returned return type void convert program function lbstokg pounds kilo grams wherelbsmeans pounds returns type float declaration isfloat lbstokg float floatspecifies return type floatin parentheses specifies argument passed lbstokg type float function returns function lbstokg lbs considered expression takes returned function treat expression variable case assignment statement kgs lbstokg lbs variable kgsto assigned returnedby lbstokg thereturnstatementthe function lbstokg passed argument representing weight pounds stores parameter pounds calculates weight kilograms multi plying pounds constant result stored variable kilograms thevalue variable returned calling program return statement return kilograms functions177functions06  ch05       notice main andlbstokg place store kilogram variable kgsinmain kilogramsinlbstokg function returns kilogramsiscopied intokgs calling program access kilogramsvari function returned process figure   chapter figure5 returning arguments function argument returned limitation return approaches returning multiple variables functions pass arguments refer ence chapter return structure multiple values members include function return type function declaration function return keyword voidto fact return type declaration compiler assume function returnsan intval declaration somefunc declaration assumes return type inttells compiler somefunc return type int   ch05       reason historical based usage early versions practice advantage default type return type explicitly int listing consistent readable eliminating unnecessary variables theconvert program containsseveral variables clarity variation program convert  expressions functions place variables convert2 cpp eliminates unnecessary variables include iostream namespace std float lbstokg float declarationint main float lbs cout nenter weight pounds cin lbs cout weight kilograms lbstokg lbs endl return  lbstokg converts pounds kilograms float lbstokg float pounds return   pounds inmain variable kgsfrom convert program eliminated func tionlbstokg lbs inserted directly intothe coutstatement cout weight kilograms lbstokg lbs endl lbstokg function variable kilogramsis longer expression   poundsis inserted directly returnstatement return   pounds calculation carried returned calling program variable functions179functions06  ch05       clarity programmers parentheses expression returnstate ment return   pounds required compiler extra parentheses expression harm listing easier poor humans read experienced programmers prefer concise form convert to verbose convert convert is easy understand expert brevity versus clarity issue question style depending personal preference expectations bereading code returning structure variables structures arguments functions return values program retstrc incorporates function adds variables typedistanceand returns type retstrc cpp demonstrates returning structure include iostream namespace std struct distance english distance int feet float inches distance addengl distance distance declarations void engldisp distance int main distance d1 d3 define lengths length d1 usercout nenter feet cin d1 feet cout enter inches cin d1 inches length usercout nenter feet cin feet cout enter inches cin inches d3 addengl d1 d3 sum d1 d2cout endl engldisp d1 cout display lengthschapter   ch05       engldisp cout engldisp d3 cout endl return  addengl adds structures type distance returns sum distance addengl distance dd1 distance dd2 distance dd3 define structure sumdd3 inches dd1 inches dd2 inches add inchesdd3 feet  carry dd3 inches   inches   decrease inches dd3 inches     dd3 feet increase feet dd3 feet dd1 feet dd2 feet add feet return dd3 return structure engldisp display structure type distance feet inches void engldisp distance cout feet inches program asks user lengths feet inches format adds calling function addengl displays engldisp function intro duced theengldispprogram output program enter feet enter inches  enter feet enter inches          themain program adds lengths represented structure type distance calling function addengl d3 addengl d1 function returns sum d1andd2 form structure type distance inmain result assigned structure d3 functions181functions06  ch05       showing structures return values program func tions count main program arrange functions order rule function declarations listingbefore calls functions reference arguments areference alias variable references passing arguments functions examples function arguments passed arguments passed called function creates variable type argument copies argument function access original variable calling program copy created passing arguments function modify original variable calling program fact offers insurance function harm original variable passing arguments reference mechanism passed function reference original variable calling program passed thememory address variable passed advantage passing reference function access actual vari ables calling program benefits mechanism passing thefunction calling program passing simple data types reference simple variable passed reference cpp demonstrates passing reference include iostream namespace std int main void intfrac float float float declaration float number intpart fracpart float variablesdo cout nenter real number number usercin number intfrac number intpart fracpart int frac cout integer intpart print fraction fracpart endl chapter   ch05       number   exit loop  return  intfrac finds integer fractional parts real number void intfrac float float intp float fracp long temp static_cast long convert long intp static_cast float temp float fracp intp subtract integer themain partof program asks user enter number type float program separate number integer fractional user number   program report integer   fractional   values main calls function intfrac sample interac tion enter real number  integer  fractional  some compilers generate spurious digits fractional   error compiler conversion routine refer figure   fol lowing discussion theintfrac function finds integer converting number passed parameter variable type longwith cast expression long temp static_cast long effectively chops fractional number integer types store integer result converted type floatwith cast intp static_cast float temp fractional simply original number integer note library function fmod performs task type double theintfrac function integer fractional parts pass main return statement return problem solved referencearguments declarator function void intfrac float float intp float fracp functions183functions06  ch05       figure5 passing byreference refprogram reference arguments ampersand data type float intpthe intpis alias variable passed argument intpin intfrac function referring tointpartinmain reference float intpmeansintpis reference floatvariable passed fracpis alias reference fracpart function declaration echoes usage ampersand definition void intfrac float float float ampersandsas definition ampersand arguments passed reference chapter intfrac number intpart fracpart main numberintpartfracpartintfrac nintpfracpfracp intp long temp static_cast long statement main causesthis variable copied parameter sets aliases variables names statementsin intfrac operate variables intfrac   ch05       ampersand function intfrac number intpart fracpart ampersandsfrom function argumentwill passed erence whileintpartandfracpartare passed reference variable numberis passed intpandintpartare names place memory fracpandfracpart hand passed parameter ninintfrac aseparate variable numberis copied passed theintfrac function modify number programmers confuse ampersand reference towiththe symbol address usages discuss address meaning chapter  pointers complex pass reference complex passing simple arguments reference suppose pairs numbers program smaller precedes larger function order checks numbers passed reference swaps originals larger listing reforder reforder cpp orders arguments passed reference include iostream namespace std int main void order int int prototypeint n1   pair orderedint n3  n4  pair orderedorder n1 order pair numbersorder n3 n4 cout n1 n1 endl print numberscout endl cout n3 n3 endl cout n4 n4 endl return  functions185functions06  ch05       void order int numb1 int numb2 orders numbers numb1 numb2 st larger nd int temp numb1 swap numb1 numb2 numb2 temp inmain pairs numbers pair ordered pair ordered order function called pair numbers printed output reveals pair swapped pair n1 n2  n3  n4 in order function variable called numb1and numb2 numb1isgreater numb2the function stores numb1intemp puts numb2innumb1 finally puts tempback numb2 remember numb1andnumb2are simply names arguments passed case n1andn2on function n2andn3on check ordering original arguments calling program swap reference arguments sort remote control operation calling pro gram tells function variables calling program operate function modifies variables knowing real names called house painters left office sat watched dining room walls mysteriously changed color passing structures reference pass structures byreference simple data types program referst performs scale conversions values type distance scale conversion involves multiplying group distances factor distance   scale factor   distance   conversion applied dimensions building building shrink remain proportion referst cpp demonstrates passing structure reference include iostream chapter   ch05       namespace std struct distance english distance int feet float inches void scale distance float function void engldisp distance declarationsint main distance d1    initialize d1 distance    cout d1 engldisp d1 display d1 d2cout nd2 engldisp scale d1   scale d1 d2scale   cout nd1 engldisp d1 display d1 d2cout nd2 engldisp cout endl return  scale scales type distance factor void scale distance float factor float inches feet  inches factor feet static_cast int inches  inches inches feet  engldisp display structure type distance feet inches void engldisp distance parameter type distance cout feet inches functions187functions06  ch05       referstinitializes distancevari ables d1andd2 specific values displays calls scale function multiply d1by   d2by   finally displays values distances program soutput d1       d1       calls function scale scale d1   scale   d1to multiplied   d2to multiplied by0  notice place directly d1andd2 function return operation performed directly distanceargument passed reference scale changed calling program rewrite function pass argument return scaled calling function d1 scale d1   isunnecessarily verbose notes passing reference references exist pointers serve purpose conveniently reference arguments introduced provide flexibility variety situations involving objects simplevariables pass arguments functions reference pointers explore chapter  overloaded functionsan overloaded function appears perform activities depending kind data overloading joke famous scientist insisted thermos bottle greatest time miracle device hot things hot cold things cold equally mysterious overloaded function performs operation kind data operation kind clarify matters examples chapter   ch05       numbers arguments recall starline function tableexample repchar function thetableargexample earlier chapter starline function printed lineusing  asterisks repchar character length function called imagine function charline prints  characters calling program character printed functions starline repchar charline perform activities names programmers functions names remember places listed alphabetically application function reference documentation convenient functions arguments program overload overload cpp demonstrates function overloading include iostream namespace std void repchar declarationsvoid repchar char void repchar char int int main repchar repchar repchar  return  repchar displays  asterisks void repchar int   loops  timescout prints asteriskcout endl repchar displays  copies character void repchar char int   loops  timescout prints character5functions189functions06  ch05       cout endl repchar displays number copies character void repchar char int int  loops timescout prints charactercout endl program prints lines characters output lines  characters long  program functions declarations function calls function definitions compiler hope lessly confused function signature number arguments data types distinguish function declaration void repchar takes arguments describes function declaration void repchar char takesone argument type char declarationvoid repchar char int takes argument type charand type int compiler functions numbers argu ments decide programmer mistake tolerantly sets separate function definition functions called depends number ofarguments supplied figure   process chapter   ch05       figure5 overloadedfunctions kinds arguments overload created functions num bers arguments compiler distinguish overloaded functions number arguments provided type program overengl thatuses overloaded function display quantity feet inches format single argu ment function structure type distance engldispexam ple simple variable type float functions depending type argument overengl cpp demonstrates overloaded functions include iostream namespace std struct distance english distance int feet float inches functions191functions06  ch05       void engldisp distance declarationsvoid engldisp float int main distance d1 distance type distance float distance type float length d1 usercout nenter feet cin d1 feet cout enter inches cin d1 inches length usercout enter entire distance inches cin cout nd1 engldisp d1 display length  cout nd2 engldisp display length  cout endl return  engldisp display structure type distance feet inches void engldisp distance parameter type distance cout feet inches engldisp display variable type float feet inches void engldisp float parameter type float int feet static_cast int  float inches feet  cout feet inches user invited enter distances separate feet inches inputs ond single large number inches   inches    program calls overloaded function engldisp display type distancefor thefirst distance type floatfor sample interaction thepro gram enter feet enter inches   enter entire distance inches   d1       chapter   ch05       notice versions engldisp things code dif ferent version accepts inches input convert feet inches dis playing result overloaded functions simplify programmer life reducing number function names remembered complexity arises overloading library routines finding absolute number routines work overloading separate versions absolute routine data type abs type int cabs complex numbers fabs type double andlabs type long single abs suffice data types overloaded functions handling types objects recursionthe existence functions programming technique called recursion recursion involves function calling sounds improbable func tion calling bug correctly technique surpris ingly powerful recursion easier understand lengthy explanations apply program fact orprogram chapter  loops decisions program forloop calculate factorial number explanation factorials program fact or2 recursion loop factor2 cpp calculates factorials recursion include iostream namespace std unsigned long factfunc unsigned long declaration int main int number entered user unsigned long fact factorialcout enter integer cin fact factfunc cout factorial fact endl return  functions193functions06  ch05       factfunc calls calculate factorials unsigned long factfunc unsigned long  return factfunc  callelsereturn  output program fact orprogram chapter  themain fact or2looks reasonable calls function factfunc argu ment number entered user function returns factorial num ber main function factfunc story nis greater  function calls notice argument argument called suppose called main argument  version argument  function version argument  notice version function stores nwhile busycalling version afterfactfunc calls times version function called argu ment  discovers ifstatement calling previous ver sions returns  fourth version fourth version stored  multiplies stored  returned  returns  version version stored  multiplies  returned  returns  version version stored  multiplies returned  returns  version version stored  multiplies returned  returns  tomain thisexample function calls function returns summary process argument ver sionactionreturn call5 call4 call3 call2 chapter   ch05       call1 return1 return2 return6 return24 return120 recursive function provided recursion forever crash program ifstatement factfunc plays role ter minating recursion nis  true versions recursive function stored memory calling version variables stored copy func tion code deeply nested recursion create great stored variables pose problem space inline functionswe mentioned thatfunctions save memory space calls function code executed function body duplicated memory compiler sees function generates jump function function jumps instruction figure   earlier chapter sequence events save memory space takes extra time instruction jump function assembly language instruction instructions saving registers instructions pushing argu ments stack calling program removing stack function arguments instructions restoring registers instruction return calling program return dealt instructions slow program save execution time short functions elect code function body directly inline code calling program time function source file actual code function inserted jump function difference betweena function inline code figure   functions195functionsargument ver sionactionreturn   ch05       figure5 functions versus inline code long sections repeated code generally normal functions savings memory space worth comparatively small sacrifice execution speed making short code ordinary function result savings memory space imposing time penalty larger function fact function short instructions space instructions function body timepenalty space penalty cases simply repeat code program inserting group statements needed trouble repeatedly inserting code lose benefits program organization clarity functions program faster space listing longer complex solution quandary inline function kind function written mal function source file compiles inline code function source file remains organized easy read function separate entity program compiled function body inserted program function occurs chapter   ch05       functions short statements candidates inlined inline riation convert pr ogram inlines lbstokg function inliner cpp demonstrates inline functions include iostream namespace std lbstokg converts pounds kilograms inline float lbstokg float pounds return   pounds int main float lbs cout nenter weight pounds cin lbs cout weight kilograms lbstokg lbs endl return  easy function inline keyword inlinein function defini tion inline float lbstokg float pounds aware inline keyword requestto compiler compiler ignore request compile function normal function decide thefunction long inline instance programmers note inline functions place definemacros serve purpose provide type checking special care parentheses macros default argumentssurprisingly functioncan called arguments work function function declaration provide default values arguments functions197functions06  ch05       variation overload program demonstrates overload functions handle numbers arguments missarg achieves missarg cpp demonstrates missing default arguments include iostream namespace std void repchar char int  declaration default argumentsint main repchar prints  asterisks repchar prints  equal signs repchar  prints  signs return  repchar displays characters void repchar char int defaults supplied int  loops timescout prints chcout endl program function repchar takes arguments called times main time called arguments time time calls work called function default arguments calling program supply default argu ments declaration repchar void repchar char int  declarationthe default argument equal sign directly type variable names void repchar char reptchar int numberreps  argument missing function called assumed argument therepchar function assigns single argument chparameter usesthe default  nparameter arguments missing function assigns default tochand default val  calls function work number arguments chapter   ch05       remember missing arguments trailing arguments argument list leave arguments leave reasonable compiler argu ments meant left middle missing arguments commas commas notoriously subject misprints designers possibility surprisingly compiler flag error leave arguments function notprovide default values default arguments trouble writing arguments cases program written programmer decides increase capability function adding argument default arguments existing function calls continue number arguments function calls usemore scope storage classnow aboutfunctions explore features interaction variables functions scopeandstorage class scope variable deter mines parts program access storage class determines long stays existence summarize situation kinds scope local file class scope vari ables localscope visible block vari ables filescope visible file block basically code opening brace closing brace function body block storage classes automatic static variables storage class automaticexist lifetime function whichthey defined variables storage class staticexist lifetime program local variables almostall variables programs defined inside function definition occurs inside braces delimit function body functions199functions06  ch05       void somefunc int somevar variables defined float othervar function body statements variables defined inside main inside functions main function variables defined function body called local variablesbecause local scope called automatic variables becausethey automatic storage class characteristics variables defined functions storage classa local variable isnot created function defined called accu rately variables defined anyblock code created theblock executed variables defined loop body exist loop exe cuting program fragment variables somevarandothervardon exist somefunc function called place memory values stored undefined control transferred somefunc variables created memory space set somefunc returns control ispassed calling program variables destroyed values lost nameautomaticis variables automatically created function called automatically destroyed returns time period creation destruction variable called lifetime orsometimes duration lifetime local variable coincides time func tion defined executing idea limiting lifetime variables save memory space function executing variables execution needed removing frees memory functions scopea variable scope called visibility describes locations program itcan accessed referred statements parts program attempts access lead unknown variableerror message scope variable program variable visible variables defined function visible meaning accessed function defined suppose functions program chapter   ch05       void somefunc int somevar local variables float othervar somevar  okothervar  nextvar  illegal visible somefunc void otherfunc int nextvar local variablesomevar  illegal visible otherfunc othervar  illegal visible otherfunc nextvar  variable nextvaris invisible function somefunc variables somevarandothervarare invisible otherfunc limiting visibility variables helps organize modularize program confident variables function safe accidental alteration func tions functions structured pro gramming methodology organizing fashioned procedural programs limiting visibility object oriented programming case variables declared function storage class scope coincide variables exist function defined executing vis ible function kinds variables lifetime visibility arenot initializationwhen local variableis created compiler initialize start arbitrary  ini tialized initialize explicitly int  start functions201functions06  ch05       global variables kind ofvariable global local variables defined functions global variables defined function defined class global variable visible functions file files precisely visible functions follow variable definition listing global variables visible functions declarations listing global variables called exte rnalvariables defined external function aprogram extern functions access global variable extern cpp demonstrates global variables include iostream namespace std include conio getch char global variable void getachar function declarationsvoid putachar int main main accesses getachar putachar cout endl return  void getachar getachar accesses getch void putachar putachar accesses cout chapter   ch05       functionin extern getachar reads characters keyboard library functiongetch getche echo character typed screen absence final ein externfunction putachar displays character screen type displayed mal typing textthe thing program variable chis defined functions defined file function global external variable function definition chin listing canaccess case functions extern main getachar putachar thusthe visibility chis entire source file role global variables global variable accessible function program global variables variables procedural programs chapter  global variables create organizational problems accessed function wrong functions access functions access incorrectly object oriented program necessity forglobal vari ables initializationif global variable initialized int exvar  initialization takes place program loaded global variable initial ized explicitly program defined int exvar initialized automatically  created local variables initialized randomor garbage values created lifetime visibility global variables storage class static exist life program memory space set program continues exist program ends keyword staticwhen declaring global variables storage class automatically global variables visible file defined starting point defined chwere defined main getachar visible getachar andputachar main functions203functions06  ch05       static local variables atanother kind variable static local variable static global vari ables meaningful multifile programs examine chapter  static local variable visibility automatic local variable inside func tion lifetime global variable existence function remains existence life program static local variables function remember executed calls function function getavg calculates running average remembers total numbers averaged time receives number argument calling program adds number total adds  count returns average bydividing total count listing static static cpp demonstrates static variables include iostream namespace std float getavg float declarationint main float data  avg data  cout enter number cin data avg getavg data cout average avg endl return  getavg finds average data float getavg float newdata static float total  static variables initialized static int count  programchapter   ch05       count increment counttotal newdata add data total return total count return average sample interaction enter number  average total  count  enter number  average total  count  enter number  average total  count  static variables totalandcountingetavg retain values getavg returns time called initializationwhen static variables initialized totalandcountare getavg initializationtakes place time function called reinitialized sequent calls function ordinary local variables storageif familiar operating architecture interested local variables function arguments stored stack global static variables stored heap table   summarizes lifetime visibility aspects local static local global variables table5 storage types localstatic localglobal visibilityfunctionfunctionfile lifetimefunctionprogramprogram initialized valuenot initialized00 storagestackheapheap purposevariables bysame local butvariables single functionretains valueused functionseveral terminatesfunctions functions205functions06  ch05       returning reference global variables examine odd feature passing values reference return reference obscure reason avoid copying large object chapter  virtual functions reason function left equal sign bizarre concept retrefprogram mechanism retref cpp returning reference values include iostream namespace std int global variable int setx function declarationint main set usingsetx  function left cout endl display return  int setx return returns modified program function setx declared reference type int return type int setx function statementreturn wherexhas defined global variable strange function left equal sign setx  result variable returned function assigned equal sign xis  output program verifies assignment place chapter   ch05       function calls left equal signdoes sound obscure remember ordinary function returns squareroot squareroot instance   assigned function treated function returns reference hand treated variable returns aliasto variable variable function return statement retref cthe function setx returns reference variable whenthis function called treated variable left equal sign corollaries return constant function returns reference setx int setx return  compiler complain lvalue left equal sign variable constant subtly return reference local variable int setx int  return error wrong problem function local variables destroyed function returns sense return reference thing longer exists worry question remains function left equal sign procedural programming technique easier ways achieve result chapter  operator overloading returning reference indispensable technique mind functions207functions06  ch05       constfunction argumentswe passing argument reference function modify variable calling program reasons pass reference efficiency variables function arguments large large structure argument large passing reference efficient scenes address passed entire variable suppose pass argument reference efficiency function modify guarantee function cannotmodify guarantee apply constmodifier variable function declaration constarg program constarg cpp demonstrates constant function argumentsvoid afunc int const int declaration int main int alpha  int beta  afunc alpha beta return  void afunc int const int definition   error modify constant argument afunc modify variable beta care mod ifies alpha constmodifier betain function declaration defini tion void afunc int alpha const int beta attempt modify betainafunc flagged error compiler design philosophies compiler errors wait surface runtime constfunction arguments approach action pass constvariable function reference argument choice mustbe declared constin function declaration problem passing constargument function modify original variable chapter   ch05       library functions constant arguments examples summaryfunctions provide organize programs reduce program size block code allowing executed parts program function declarations prototypes function function callstransfer control tothe function function definitions statements function functiondeclarator definition arguments functions function works copy argument reference function works original argument ing program functions return functions ordinarily return return reference function left assignment statement arguments return values simple data types structures anoverloadedfunction group functions executed function called depends type number arguments supplied aninlinefunction normal function source file inserts function code directly calling program inline functions execute faster require memory normal functions small function default arguments calls include arguments declaration default values supplied function missing arguments variables possess characteristic calledthe storage class common storage class automatic local variables automatic storage class exist function defined executing visible function globalvariables static storage class exist life program visible entire file staticlocal variables exist life program visible function function modify arguments constmodifier variable defined constin calling program passed constargument chapter  examined major parts objects structures collec tions data chapter explored functions ready components create objects subject chapter  functions209functions06  ch05       questionsanswers questions appendix  function single role block code reduce program size accept arguments provide return organize program conceptual units  function called function d_________  write function called foo displays word foo  statement description function referred function d_________ p_________  statements carry work function constitute function _________  program statement invokes function function _________  function definition referred _________  function argument variable function receives calling program functions resist accepting calling program values function calling program returned function calling program  true false arguments passed function works original arguments calling program  purpose argument names function declaration  legitimately passed function constant riablec structure header file  significance parentheses function declaration  values returned function  true false function returns entire function equal sign assigned variable  function return type chapter   ch05        function return return type _________  function int times2 int return  write main program includes function  argument passed reference variable created function hold argument function access argument temporary variable created calling program hold argument function accesses argument original calling program  principal reason passing arguments reference  overloaded functions group functions number types arguments life simpler programmers fail unexpectedly stress  write declarations overloaded functions named bar return type int takes argument type char takes arguments typechar impossible  general inline function executes _________ normal function requires _________ memory  write declarator inline function named foobar takes argument typefloatand returns type float  default argument supplied calling program supplied function constant variable  write declaration function called blyth takes arguments returns typechar argument type int type floatwith default    scope storage class concerned _________ _________ variable functions211functions06  ch05        functions access global variable appears file  functions access local variable  static local variable variable visible functions variable visible function conserve memory function executing retain function executing  unusual place function function returns erence exercises answers starred exercises appendix  refer circareaprogram chapter  programming basics write func tion called circarea finds area circle argument type floatand return argument type write main func tion radius user calls circarea displays result  raising number nto power pis multiplying nby ptimes write function called power takes doubleval nand intval andreturns result doublevalue default argument  hat thisargument number nwill squared write main function val ues user test function  write function called zerosmaller passed intarguments reference sets smaller numbers  write main program exercise function  write function takes distancevalues arguments returns larger include main program accepts distancevalues user compares displays larger retstrcprogram hints  write function called hms_to_secs takes intvalues hours minutes seconds arguments returns equivalent time seconds type long create program exercises function repeatedly obtaining time hours minutes seconds user format    calling function displaying seconds returns  start program exercise  chapter  structures adds struct timevalues functionality modify program functions time_to_secs takes argument structure type chapter   ch05       time returns equivalent seconds type long function secs_to_time takes argument time seconds type long returns structure type time  start power function exercise  works type double create series overloaded functions addition double work types char int long float write main program exercises overloaded functions argument types  write function called swap interchanges intval ues passed ing program note function swaps values variables calling pro gram function decide pass arguments create amain program exercise function  repeat exercise  intvariables swap function inter change struct timeval ues exercise   write function displays message telling times called called  times instance write main program callsthis function  times implementing function ways global variable store count local staticvari whichis local variable  write program based sterlingstructure exercise  chapter  obtains user money amounts style british format    adds displays result style format functions pounds shillings pence user return structure type sterling arguments type sterling return type sum arguments sterling structure argument display  revise function fraction calculator exercise  chapter  functions arithmetic operations called fadd fsub fmul fdiv functions arguments type structfraction return argument type functions213functions06  ch05         ch05       chapter6objects classesin chapter mple class216 objects physical objects223 objects data types226 constructors227 objects function arguments233 default copy constructor238 returning objects functions240 card game example243 structures classes247 classes objects memory247 static class data249 constand classes252    ch06       chapter and topics waiting objects classes preliminaries learned structures provide group data elements examined functions organize program actions named entities chapter ideas create classes introduce classes starting simple working complicated examples focus details classes objects chapter wider view discussing gained oop approach read chapter refer concepts introduced chapter  big picture simple classour program class objects class simple program demonstrates syntax general features ofclasses listing smallobjprogram smallobj cpp demonstrates small simple object include iostream namespace std class smallobj define class private int somedata class datapublic void setdata int member function set data somedata void showdata member function display data cout data somedata endl int main smallobj s1 define objects class smallobjs1 setdata  member function set datas2 setdata  s1 showdata member function display datas2 showdata return    ch06       class smallobjdefined program data item member functions member functions provide access data item class member function sets data item displays sound greek terms placing data functions single entity central idea inobject oriented programming figure   objects classes6objectsand classes217figure6 classes data functions classes objectsrecall chapter that object relationship class variable data type object instance ofa class  chevrolet instance vehicle smallobj class smallobj defined program main define objects s1ands2 areinstances class objects displays output program data  object s1 displayed thisdata  object displayed this07  ch06       program definition class smallobj focus main objects class defining classhere definition called specifier class smallobj copied thesmallobjlisting class smallobj define class private int somedata class datapublic void setdata int member function set data somedata void showdata member function display data cout ndata somedata definition starts keyword class class smallobjin thisexample structure body class delimited braces terminated semicolon forget semicolon remember data constructs structures classes semicolon control constructs functions loops privateandpublicthe body class unfamiliar keywords privateandpublic purpose key feature object oriented programming data hiding term refer activities paranoid programmers data concealed class accessed mistakenly functions class primary mechanism hiding data class private private data functions accessed class public data functions hand accessible class figure   hidden confuse data hiding security techniques protect computer databases provide security measure require user supply password granting access database password meant unauthorized malevolent users altering reading data data hiding hand hiding data parts program access class data hidden classes data hiding designed protect intentioned programmers honest mistakes programmers figure access private data hard accident chapter   ch06       figure6 private andpublic class datathesmallobjclass data item somedata type int data items class called data members member data number data members class number data items structure data member somedatafollows keyword private accessed theclass member functionsmember functionsarefunctions included class object oriented languages smalltalk member functions called methods writers termin member functions smallobj setdata andshowdata function bodies functions written braces delimit traditional format function definitions void setdata int somedata andobjects classes6objectsand classes21907  ch06       void showdata cout ndata somedata member functions small common compress definitions save space becausesetdata andshowdata follow keyword public accessed class moment figure   syntax class definition functions public data private datawithin class private functions public result classes data hidden safe accidental manipulation functions operate data public accessed class rule data private functions public circum stances private functions public data chapter keyw ordkeyword public colon private functions data keyword private colon classpublic functions data semicolonbraces class foo private int data public void memfunc int data figure6 syntax classdefinition member functions class definitionthe member functions smallobjclass perform operations common inclasses setting retrieving data stored class setdata function accepts avalue parameter sets somedatavariable showdata functiondisplays stored somedata   ch06       note member functions setdata andshowdata aredefinitions actualcode function contained class definition functions definitions sense memory set function code happen object class created member functions defined inside class created inline functions default inline functions discussed chapter  functions declare function class define functions defined class inline classnow class defined main objects defined defined member functions accessed defining objectsthe statement main smallobj s1 defines objects s1ands2 ass smallobj remember definition class smallobjdoes create objects describes created structure definition describes structure create structure variables objects participate program operations defining object defining variable data type space set memory defining objects creating called instantiatingthem theterminstantiatingarises instanceof class created object instance specific class objects called instance variables calling member functionsthe statements main member function setdata s1 setdata  setdata  statements normal function calls object names s1ands2connected function names period strange syntax member function specific object setdata member function ofthesmallobjclass called connection object class sense setdata  objects classes6objectsand classes22107  ch06       member function called specific object class general attempting access class drive blueprint car statement sense compiler issue error message attempt member functions class accessed object class member function dot operator period connects object member function syntax refer structure members parentheses signal executing member function referring data item dot operator called class member accessoperator setdata s1 setdata  executes setdata member function s1object function sets variable somedatain object s1to  secondcall setdata  variable somedatains2to set  objects somedatavari ables values figure   chapter figure6 two objects class smallobj   ch06       calls showdata function objects display values s1 showdata showdata messagessome object oriented languages refer calls member functions messages s1 showdata thought sending message tos1telling data term message nota formal term idea mind discuss member functions talking messages emphasizes objects discrete entities communicatewith calling member functions referring analogy company organization chapter  sending message secretary sales department list products sold southwest distribution area objects physical objectsin programming situations objects programs represent physical objects things felt situations provide vivid examples correspondence program real situations widget parts graphics circles widget parts objectsthesmallobjclass data item ambitious class ambitious classes discussed political science courses create class based structure widget parts inventory examples parts chapter  structures listing objpart objpart cpp widget object include iostream namespace std class define class private int modelnumber number widget int partnumber number widget float cost cost partpublic void setpart int int float set data objects classes6objectsand classes22307  ch06       modelnumber partnumber cost void showpart display data cout model modelnumber cout partnumber cout costs cost endl int main part1 define object class partpart1 setpart    f member function part1 showpart member function return  program features class data item smallobjhad class modelnumber partnumber cost single member function setpart suppliesvalues data items function showpart displays values stored items object type created part1 member function setpart sets data items values     mem ber function showpart displays values output model   costs  this realistic smallobj designing inventory program create class object representing physical object real widgetpart circles objects examine object represent circle kind circle displayed computer screen image tangible object widget hold hand circle program runs object oriented version circstrcprogram chapter  thatprogram add console graphics lite files project chapter   ch06       files downloaded publisher web site introduction appendix console graphics lite describes files appendix compiler program creates circles characteristics displays listing circles circles cpp circles graphics objects include msoftcon graphics functions class circle graphics circle protected int xco yco coordinates center int radius color fillcolor color fstyle fillstyle patternpublic sets circle attributesvoid set int int int color fstyle xco yco radius fillcolor fillstyle void draw draws circle set_color fillcolor set color set_fill_style fillstyle set draw_circle xco yco radius draw solid circle int main init_graphics initialize graphics systemcircle create circlescircle circle set circle attributesc1 set    cblue x_fill set    cred o_fill set    cgreen medium_fill objects classes6objectsand classes22507  ch06       draw draw circlesc2 draw draw set_cursor_pos   lower left corner return  output program circstrcprogram chapter  figure   chapter interesting compare programs circles circle represented object combination structure variable unrelated circ_draw function circstrc notice circleshow connected circle attributes functions brought class definition incircles draw function circle class requires argument set function set attributes advantageous dispense function anduse constructor objects data types kindof entity objects represent variables user defined data type objects represent distances measured english discussed chapter  listing englobj englobj cpp objects english measurements include iostream namespace std class distance english distance class private int feet float inches public void setdist int float set distance args feet inches void getdist length user cout nenter feet cin feet cout enter inches cin inches void showdist display distance cout feet inches chapter   ch06       int main distance dist1 dist2 define lengthsdist1 setdist    set dist1dist2 getdist dist2 user display lengthscout ndist1 dist1 showdist cout ndist2 dist2 showdist cout endl return  program class distancecontains data items feetandinches distancestructure examples chapter  class distancealso hasthree member functions setdist arguments set feet inches getdist values feet inches user keyboard showdist whichdisplays distance feet inches format object class distancecan set ways main define objects class distance dist1anddist2 setdist member function arguments    supplied user sample interaction theprogram enter feet enter inches  dist1    provided arguments dist2    input userconstructorstheenglobjexampleshows ways member functions values data items object convenient object initialize created requiring separate member function automatic initial ization carried special member function called constructor constructor member function executed automatically object created term structoris abbreviated ctor comments program listings objects classes6objectsand classes22707  ch06       counter exampleas create class objects general purpose programming element counteris variable counts things counts file accesses number times user presses enter key number customers entering bank time event takes place counter incremented  counter accessed current count assume counter program accessed functions procedural languages counter implemented global variable chapter  global variables complicate program design modified accidentally counter counter variable modified member functions counter cpp object represents counter variable include iostream namespace std class counter private unsigned int count countpublic counter count  constructor body void inc_count increment count count int get_count return count return count int main counter define initializecout nc1 get_count displaycout nc2 get_count inc_count increment c1c2 inc_count increment inc_count increment c2cout nc1 get_count display againcout nc2 get_count chapter   ch06       cout endl return  thecounterclass data member count type unsigned int count isalways positive member functions constructor counter moment inc_count adds  count get_count returns cur rentvalue count automatic initializationwhen objectof type counteris created countto initialized  counts start  provide set_count function withan argument  provide zero_count function set countto  functions executed time created counterobject counter time zero_count toothis mistake prone programmer forget initialize object creating reliable convenient great objects class object initialize created counterclass constructorcounter function called automatically object type counteriscreated main statementcounter creates objects type counter created constructor counter executed function sets countvariable  single statement create objects initialize countvari ables  classthere unusualaspects constructor functions accident counterin class members compiler constructors return type constructors constructor called automatically program return return sense compiler areconstructors initializer listone common tasks constructor carries initializing data members thecounterclass constructor initialize countmember  constructor function body objects classes6objectsand classes22907  ch06       count count  preferred approach work initialize data member count count  initialization takes place member function declarator function body preceded colon isplaced parentheses member data multiple members initialized separated commas result initializerlist called names member initializationlist someclass m1    initializer list initialize members body constructor reasons complex fact members initialized initializer list constructor starts execute situations initializer list initialize constmember data references actions complicated simple initialization carried theconstructor body ordinary functions counter outputthemain program exercises counterclass creating counters c1andc2 counters display initial values arranged constructor  increments c1once c2twice counters display criminal behavior context output c2   if proof constructor operating advertised rewrite constructor print message executes counter count  cout constructor program output constructori constructorchapter   ch06       c2   as constructor executed c1and thestatementcounter executedin main data constructors pretty amazing writes language compilers vb execute equivalent constructor user defines variable define int constructor allocatingfour bytes memory write constructors start tasks compiler writer step path creating owndata types graphics examplelet rewrite earlier circlesexample constructor set function handle initialization attributes circles constructor arguments items initialization list listing circtor circtor cpp circles constructor initialization include msoftcon graphics functions class circle graphics circle protected int xco yco coordinates center int radius color fillcolor color fstyle fillstyle patternpublic constructorcircle int int int color fstyle xco yco radius fillcolor fillstyle void draw draws circle set_color fillcolor set colorobjects classes6objectsand classes23107  ch06       set_fill_style fillstyle set filldraw_circle xco yco radius draw solid circle int main init_graphics initialize graphics create circlescircle    cblue x_fill circle    cred o_fill circle    cgreen medium_fill draw draw circlesc2 draw draw set_cursor_pos   lower left corner return  program circles set replaced constructor note simplifies main separate statements object create set attributes statement creates object sets attributes time destructorswe aspecial member function constructor called automatically object created guess function called automatically object destroyed case function called destructor destructor constructor class preceded tilde class foo private int data public foo data  constructor class foo destructor tilde chapter   ch06       constructors destructors return arguments assumption destroy object common destructors deallocate memory allocated object constructor investigate activities chapter  pointers fordestructors objects function argumentsour program addssome embellishments englobjexample demonstratessome aspects classes constructor overloading defining member functions class importantly objects function arguments listing englcon englcon cpp constructors adds objects member function include iostream namespace std class distance english distance class private int feet float inches public constructor args distance feet  inches   constructor args distance int float feet inches void getdist length user cout nenter feet cin feet cout enter inches cin inches void showdist display distance cout feet inches void add_dist distance distance declaration add lengths d3void distance add_dist distance distance d3 objects classes6objectsand classes23307  ch06       inches inches d3 inches add inches feet  carry inches   total exceeds   decrease inches inches     feet increase feet feet feet d3 feet add feet int main distance dist1 dist3 define lengths distance dist2    define initialize dist2dist1 getdist dist1 userdist3 add_dist dist1 dist2 dist3 dist1 dist2 display lengthscout ndist1 dist1 showdist cout ndist2 dist2 showdist cout ndist3 dist3 showdist cout endl return  program starts distance dist2set initial adds distance dist1 supplied user sum distances displays distances enter feet enter inches  dist1    dist2    dist3   features program implemented overloaded constructorsit convenientto variables type distancea created definitions distance width    chapter   ch06       defines object width simultaneously initializes  feetand6  inches write constructor distance int float feet inches sets member data feetandinchesto values passed arguments constructor good define variables type distancewithout initializingthem englobj distance dist1 dist2 program constructor definitions worked fine work constructor implicit argument constructor built program automatically compiler constructor created objects define class argument constructor called default constructor itweren created automatically constructor create objects class constructor defined initialize data members default argument constructor default constructor values data members care values explicitly define constructor engleconwe distance feet  inches   default constructor function body anythingthe data members initialized constant values case integer  floatval   feetandinchesrespectively objects initialized argument constructor confident represent distance  feet   inches ratherthan arbitrary explicit constructors distance theconstructor overloaded constructors executed object created depends arguments definition distance length calls constructordistance width    calls constructorobjects classes6objectsand classes23507  ch06       member functions defined classso veseen member functions defined inside class definition case englconshows member function add_dist defined thedistanceclass definition declared inside class statement void add_dist distance distance tells compiler function member class defined class declaration someplace listing inenglcontheadd_dist function defined class definition adapted englstrcprogram chapter  add lengths d3void distance add_dist distance distance d3 inches inches d3 inches add inches feet  carry inches   total exceeds   decrease inches inches     feet increase feet feet feet d3 feet add feet declarator definition unfamiliar syntax function add_dist preceded class distance symbol double colon symbol iscalled scope resolution operator class situation distance add_dist add_dist memberfunction distanceclass figure   usage chapter figure6 the scope resolution operator   ch06       objects argumentsnow englconworks distances dist1anddist3are created default constructor takes arguments distance dist2is created constructorthat takes arguments initialized values passed arguments dist1by calling member function getdist obtains values user add dist1anddist2to dist3 function main dist3 add_dist dist1 dist2 distances dist1anddist2 supplied arguments add_dist syntax arguments objects arguments simple data types int object supplied argument add_dist member function distanceclass access private data object class distancesupplied argument names dist1 inchesanddist2 feet close examination add_dist emphasizes truths member functions member function access object called object connected dot operator access objects statement englcon objects add_dist access dist3 add_dist dist1 dist2 besidesdist3 object called access dist1anddist2 becausethey supplied arguments dist3as sort phantom argument member function access supplied argument statement execute add_dist member function dist3 thevari ables feetandinchesare referred function refer dist3 feetanddist3 inches notice result returned function return type add_dist isvoid result stored automatically dist3object figure   distances dist1anddist2being result stored dist3 summarize everycall member function object static function member names feetandinches function direct access members private public object indirect access object member connected dot operator dist1 inchesordist2 feet objects thesame class passed arguments objects classes6objectsand classes23707  ch06       figure6 result object default copy constructorwe ways initialize objects argument constructor initialize data members constant values multi argument constructor initialize data members values passed arguments mention initialize object initialize object type surprisingly create special constructor built classes called default copy constructor argument constructor argument object class constructor ecopyconprogram constructor ecopycon cpp initialize objects default copy constructor include iostream namespace std chapter dist3feetinchesfeetinchesdist1feetinchesdist1 feetdist1 inchesdist2 feetdist2 inchesdist2feetinchesdist3 add_dist dist1 dist2 member functions ofdist3 refer data directly data objects passed arguments referred dot operator   ch06       class distance english distance class private int feet float inches public constructor args distance feet  inches   note arg constructor constructor args distance int float feet inches void getdist length user cout nenter feet cin feet cout enter inches cin inches void showdist display distance cout feet inches int main distance dist1    arg constructor distance dist2 dist1 arg constructor distance dist3 dist1 arg constructor display lengthscout ndist1 dist1 showdist cout ndist2 dist2 showdist cout ndist3 dist3 showdist cout endl return  initialize dist1to    argument constructor define objects type distance dist2anddist3 initializing dist1 require define argument constructor initial izing object object type special case definitions default copy constructor object dist2is initialized statementdistance dist2 dist1 objects classes6objectsand classes23907  ch06       default copy constructor distanceclass perform member member copy dist1intodist2 surprisingly format causing dist1to copiedmember member dist3 distance dist3 dist1 assignment statement formats invoke default copy constructor interchangeably output program dist1    dist2    dist3    dist2anddist3objects initialized dist1 chapter  virtual functions discuss create custom copy construc torby overloading default returning objects functions englconexample objects passed arguments functions function returns object modify englconprogram produceenglret englret cpp function returns type distance include iostream namespace std class distance english distance class private int feet float inches public constructor args distance feet  inches   constructor args distance int float feet inches void getdist length user cout nenter feet cin feet cout enter inches cin inches void showdist display distance cout feet inches chapter   ch06       distance add_dist distance add add distance return sum distance distance add_dist distance distance temp temporary variable temp inches inches inches add inches temp inches   total exceeds   decrease inches temp inches     temp feet  increase feet temp feet feet feet add feet return temp int main distance dist1 dist3 define lengths distance dist2    define initialize dist2dist1 getdist dist1 userdist3 dist1 add_dist dist2 dist3 dist1 dist2 display lengthscout ndist1 dist1 showdist cout ndist2 dist2 showdist cout ndist3 dist3 showdist cout endl return  theenglretprogram englcon differences reveal aspects functions work objects arguments objectsinenglcon distances passed add_dist arguments result stored object add_dist member dist3 englret distance dist2 passed add_dist argument object dist1 whichadd_dist member result returned function main sult isassigned dist3in statementdist3 dist1 add_dist dist2 objects classes6objectsand classes24107  ch06       statement englcon natural assignment operator natural chapter  operator overloading arithmetic operator achieve evenmore natural expressiondist3 dist1 dist2 add_dist function englret add distance return sumdistance distance add_dist distance distance temp temporary variable temp inches inches inches add inches temp inches   total exceeds   decrease inches temp inches     temp feet  increase feet temp feet feet feet add feet return temp compare function englcon subtle differences englretversion temporary object class distanceis created object holds sum returned calling program sum calculated adding distances object add_dist member dist1 itsmember data accessed function feetandinches object passed argument dist2 member data accessed feetandd2 inches result stored tempand accessed temp feetandtemp inches tempobject returnedby function thestatement return temp statement main assigns dist3 notice dist1is modified simply supplies data add_dist figure   thislooks chapter   ch06       figure6 result returned temporary object card game larger objects modeling real variation cardsprogram chapter  program cardobj rewritten objects introduce concepts programming ideas discussed point cardsexample cardobjcreates cards fixed values switches attempt confuse user location cardobjeach card anobject class card listing cardobj cpp cards objects include iostream namespace std objects classes6objectsand classes24307  ch06       enum suit clubs diamonds hearts spades const int jack    const int queen  integers names const int king  const int ace  class card private int number   jack queen king ace suit suit clubs diamonds hearts spadespublic card constructor args constructor args card int suit number suit void display display card bool isequal card card void card display display card number  number  cout number elseswitch number case jack cout jack break case queen cout queen break case king cout king break case ace cout ace break switch suit case clubs cout clubs break case diamonds cout diamonds break case hearts cout hearts break case spades cout spades break bool card isequal card return true cards equal return number number suit suit true false chapter   ch06       int main card temp chosen prize define cards int position card card1  clubs define initialize card1cout ncard  card1 display display card1card card2 jack hearts define initialize card2cout ncard  card2 display display card2card card3 ace spades define initialize card3cout ncard  card3 display display card3prize card3 prize card guess cout swapping card  card  temp card3 card3 card1 card1 temp cout swapping card  card  temp card3 card3 card2 card2 temp cout swapping card  card  temp card2 card2 card1 card1 temp cout nnow    prize display display prize card cout cin position user guess positionswitch position set chosen user choicecase  chosen card1 break case  chosen card2 break case  chosen card3 break chosen isequal prize chosen card prize cout win elsecout lose cout chose chosen display display chosen cardobjects classes6objectsand classes24507  ch06       cout endl return  constructors class card takes arguments main create cards temp chosen prize initialized constructor takes arguments create card1 card2 card3and initialize tospecific values constructors cardhas member functions defined class thedisplay functiontakes arguments simply displays card object member number suit data items card statement main chosen display displays card chosen user theisequal function checks card equal card supplied argument conditional operator compare card member card suppliedas argument function written elsestatementif number number suit suit return true elsereturn false conditional operator compact inisequal argument called c2as reminder cards comparison card object isequal amember expression chosen isequal prize inmain compares card chosenwith card prize output user guesses incorrect card card   clubscard  jack hearts card  ace spades swapping card  card  swapping card  card  swapping card  card     ace spades  lose chose  clubschapter   ch06       structures classes examples inthis book portrayed structures group data classes group data functions fact structures classes formal difference classandstructis thatin class members private default structure public default format classes class foo private int data1 public void func private thedefault classes keyword unnecessary write class foo int data1 public void func data1will private programmers prefer style include privatekeyword offers increase clarity structure accomplish thing class dispense keyword public provided public members private struct foo void func private int data1 public default situations programmers structthisway structures group data classes togroup data functions classes objects memorywe impression object created class separate copies class data member functions good approximation objects classes6objectsand classes24707  ch06       emphasizes objects complete contained entities designed class definition mental image cars objects rolling assembly blueprint class definitions things simple true object separate data items hand contrary led objects class member functions member functions created memory defined class definition sense point duplicating member functions class time create object class functions object identical data items hold values separate instance data item object data memory object defined separate set data eachobject figure   chapter figure6 objects data functions andmemory   ch06       smallobjexample chapter objects type smallobj instances somedatain memory instance functionssetdata andshowdata functions shared objects class conflict single threaded function executed time situations member function entire class simpler visualize object data member functions situations estimating size executing program helpful happening thescenes static class datahaving object separate data amend data item class declared static item created entireclass matter objects static data item objects class share common item member variable defined statichas characteristics normal static variable visible class lifetime entire program continues exist objects class chapter  discussion static variables normal static variable retain calls function static class member data share objects class static class datawhy touse static member data suppose object needed objects class program road racing game race car cars race case static variable countcould included member class objects access variable variable count static class datahere statdata thatdemonstrates simple static data member statdata cpp static class data include iostream namespace std class foo objects classes6objectsand classes24907  ch06       private static int count data item objects note declaration public foo increments count object created count int getcount returns count return count int foo count  definition count int main foo f1 f3 create objectscout count f1 getcount endl objectcout count getcount endl sees cout count f3 getcount endl return  class fooin thisexample data item count type static int constructor class countto incremented main define objects classfoo constructor called times countis incremented times member function getcount ret urns count function objects expected prints output count  static datacount  count if ordinary automatic variable opposed static variable count constructor incremented private copy countonce output count  automatic datacount count static class variables ordinary static variables situations figure   static variables compare automatic variables chapter   ch06       figure6 static versus automatic member variables separate declaration definitionstatic member datarequires unusual format ordinary variables declared compiler told type defined compiler sets memory hold variable statement static member data hand requires separate statements variable declaration appears class definition variable defined class global variable approach static member data defined inside class early versions violate idea class definition blueprint set memory putting definition static member data class serves emphasize memory space data allocated objects classes6objectsand classes25107  ch06       program starts execute static member variable accessed entire class object version variable ordinary member data static membervariable global variable easy handle static data incorrectly compiler helpful errors include declaration static variable forget definition warning compiler fine linker reference undeclared global variable include definition forget class foo statdata constand classeswe examples constused normal variables prevent modified chapter  constcan function arguments function modifying variable passed reference classes introduce const member functions member function arguments objects concepts work provide surprising benefits constmember functionsaconstmemberfunction guarantees modify class member data theconstfuprogram works constfu cpp demonstrates const member functions class aclass private int alpha public void nonfunc const member function alpha  okvoid confunc const const member function alpha  error modify member constfunctionnonfunc modify member data alpha constant function confunc compiler errorresults function constant function placing keyword constafter declaratorbut function body separate function declaration constmust inboth declaration definition member functions acquire data object obvious candidates const modify data chapter   ch06       making function consthelps compiler flag errors tells listing intended function modify object creation constobjects discuss adistanceexampleto avoid raising subjects avoided constmemberfunctions programs places constmemberfunctions distanceclass programs showdist member function constbecause modify data object called simply display data englret add_dist function modify data object called object simply object passed argument sum returned modified englretprogram constant functions note constis declaration defi nition add_dist listingfor engconst engconst cpp const member functions const arguments member functions include iostream namespace std class distance english distance class private int feet float inches public constructor args distance feet  inches   constructor args distance int float feet inches void getdist length user cout nenter feet cin feet cout enter inches cin inches void showdist const display distance cout feet inches distance add_dist const distance const add add distance return sumobjects classes6objectsand classes25307  ch06       distance distance add_dist const distance const distance temp temporary variable feet  error modify feet  error modify d2temp inches inches inches add inches temp inches   total exceeds   decrease inches temp inches     temp feet  increase feet temp feet feet feet add feet return temp int main distance dist1 dist3 define lengths distance dist2    define initialize dist2dist1 getdist dist1 userdist3 dist1 add_dist dist2 dist3 dist1 dist2 display lengthscout ndist1 dist1 showdist cout ndist2 dist2 showdist cout ndist3 dist3 showdist cout endl return  showdist andadd_dist constant member functions add_dist weshow commented statement feet  compiler error generated youattempt modify data object constant function called constmember function argumentswe mentioned inchapter  argument passed ordinary function reference function modify argument constin func tion declaration definition true member functions engconsttheargument add_dist passed reference engconstwon modify variable dist2inmain argument d2toadd_dist const declaration definition commented statement compiler flag error attempt add_dist modify member data itsargument dist2 chapter   ch06       constobjectsin exampleprograms apply constto variables basic types intto modified apply constto objectsof classes object declared const modify constmember functions guarantee modify constobj program constobj cpp constant distance objects include iostream namespace std class distance english distance class private int feet float inches public  arg constructordistance int float feet inches void getdist user input const func cout nenter feet cin feet cout enter inches cin inches void showdist const display distance const func cout feet inches int main const distance football   football getdist error getdist constcout football football showdist cout endl return  footballfield american style football  feet long length football field program sense const changing represent football fans constobj program footballaconstvari constfunctions showdist called object constfunctions getdist object user illegal compiler enforces constval football objects classes6objectsand classes25507  ch06       designing classes good idea constany function modify data object user class create constobjects theseobjects constfunction constfunction remember consthelps compiler helpyou introduced classes objects benefit offer comparing programs chapter chapter  sorts things procedural approach objects benefit oop glimpsed close correspondence real things modeled bythe program objects inthe program widget object program represents widget real card object represents card circle object represents graphics circle wid included class description number data items func tions access operate data easy conceptualize programming problem figure parts problem repre sented objects data functions connected object class class represent playing card class data items represent card functions set retrieve display compare procedural program contrast global variables functions connected real object distributed listing form single easily grasped unit situations obvious parts real life situation objects writing program plays chess instance objects chessmen squares board entire board positions small programs book proceed trial error break problem objects write trial class definitions objects classes match reality continue start selecting entities classes experience oop easier break programming problem classes larger programs prove complex trial error approach field object oriented design ood increasingly applied analyzing programming problem figuring classes objects represent real situation called problem domain discuss methodology chapter  object oriented software development chapter   ch06       benefits object oriented programming apparent point remember oop devised cope complexity large programs smaller programs uch examples chapter theorganizational power oop larger program greater benefit small programs start thinking object oriented terms design approach natural surprisingly helpful advantage program compiler conceptual errors proceduralprogram summarya class specification blueprint number objects objects consist data functions operate data class definition members data functions private meaning accessed member functions class public meaning accessed function program member function function member class member functions access object private data member functions constructor member function class executed time object class created constructor return type arguments initial values object data members constructors overloaded object initialized ways destructor member function class preceded tilde called object destroyed destructor takes arguments return computer memory separate copy data members object created class copy class member functions restrict data item single instance objects class making static reason oop close correspondence real objects oop classes deciding objects classes program complicated small programs trial error sufficient large programs systematic approach needed questionsanswers questions appendix  purpose class definition  ________ relation ________ basic data type variable type objects classes6objectsand classes25707  ch06        class definition data functions designated privateare accessiblea function program password member functions class public members class  write class definition creates class called leveragewith private data member crowbar type intand public function declaration void pry  true false data items class private  write statement defines object called lever1of leverageclass inquestion   dot operator class member access operator connects entities reading left class member class object class object classc class member class class object member class  write statement executes pry function lever1object questions    member functions defined inside class definition ________by default  write member function called getcrow leverageclass question4 function return crowbardata assume function defined class definition  constructor executed automatically object ________  constructor _________  write constructor initializes  crowbardata member leverageclassdescribed question  assume constructor defined class defini tion  true false class constructor  member function access data object member class member object class member public class  assume member function getcrow question  defined class definition write declaration inside class definition chapter   ch06        write revised version getcrow member function question  isdefined class definition  technical difference structures classes _________  objects class defined copies class data items stored memory copies member functions  sending message object _________  classes removed memory permit data hidden classes bring aspects entity place closely model objects real  true false simple precise methodology dividing real programming problem classes  object called constmember functiona modify constand constmember data modify constmember data modify constmember data modify constnor constmember data  true false declare constobject constmemberfunctions  write declaration definition constvoid function called afunc takes oneconstargument called jerryof type float exercises answers starred exercises appendix  create class imitates functionality basic data type int theclassint note capitalization data class intvari include member functions initialize intto  initialize intval dis play int add intval ues write program exercises class creating uninitialized initialized intvalues adding initialized values placing response uninitialized displaying result  imagine tollbooth bridge cars passing booth expected pay  cent toll car paying tollbooth track number cars total money collected objects classes6objectsand classes25907  ch06       model tollbooth class called tollbooth data items type unsigned intto hold total number cars type doubleto hold total amountof money collected constructor initializes  member functioncalled payingcar increments car total adds   cash total function callednopaycar increments car total adds cash total finally member function called display displays totals member functionsconst include program test class program user push key count paying car count nonpaying car pushing esc key program print total cars total cash exit  create class called timethat separate intmember data hours minutes seconds constructor initialize data  initialize fixed values member function display    format final member function add objects type timepassed arguments amain program create initialized timeobjects const andone initialized add initialized values leaving result timevariable finally display variable member functions const  create employeeclass basing exercise  chapter  member data comprise intfor storing employee number floatfor storing employee compensation member functions user enter data display write main user enter data employees display  start datestructure exercise  chapter  transform dateclass member data consist ints month day year alsohave member functions getdate user enter    format showdate displays  extend employeeclass exercise  include dateclass exercise  etype enum exercise  chapter  object dateclass tohold employment employee hired etypevariable hold employee type laborer secretary manager items private member data employeedefinition employee number salary extend getemploy andputemploy functions user display functions switchstatements handle etypevariable write main program thatallows user enter data employeevariables displays data  ocean navigation locations measured degrees minutes latitude longi tude lying mouth papeete harbor tahiti location  degrees   minutes west longitude  degrees   minutes south latitude chapter   ch06       written        minutes degree older divided minute  seconds modern approach minutes longitude measured   degrees east west greenwich england international dateline pacific latitude measured   degrees north south equator poles create class anglethat includes member variables intfor degrees floatfor minutes charfor direction letter class hold latitude variable longitude variable write member function angle degrees minutes direction user display angle    format write argument constructor write main program displays angle initialized constructor loop user input angle displays hex character constant xf8 prints degree symbol  create class includes data member holds serial number object created class object created numbered   data member records count objects created member apply class individual objects keyword specifies object created constructor examine count member variable determine serial number object add member function permits object report serial number write main program creates objects queries serialnumber respond object number   transform fractionstructure exercise  chapter  fractionclass member data fraction numerator denominator member functions accept input user form   output fraction format member function add fraction values write main programthat user repeatedly input fractions displays sum operation user continue  create class called shipthat incorporates ship number location approach exercise  number shipobject created variables theangleclass exercise  represent ship latitude longitude member function shipclass position user store object report serial number position write main program cre ates ships asks user input position displays ship number position objects classes6objectsand classes26107  ch06        modify function fraction calculator exercise  chapter  fractionclass structure member functions input output arithmetical operations install capability reduce fractions lowest terms member function reduce fractionobject member lowest terms finds greatest common divisor gcd fraction numerator denominator gcd divide numbers void fraction lowterms change ourself lowest terms long tnum tden temp gcd tnum labs num negative copiestden labs den cmath tden  check  cout illegal fraction division  exit  tnum  check  num  den  return loop finds gcd tnum tden tnum  tnum tden ensure numerator larger temp tnum tnum tden tden temp swap themtnum tnum tden subtract gcd tden greatest common divisor num num gcd divide num den gcd den den gcd reduce frac lowest terms function arithmetic function form output usual member functions arithmetic operations input display argument constructor  note advantage oop approach entire class modification program fractionclass exercise  pro gram generates multiplication table fractions user input denominator generate combinations fractions   multiply output denominator                                                                       chapter   ch06       chapter7arrays stringsin chapter array fundamentals264 arrays class member data279 arrays objects283 trings290 standard stringclass302   ch07       chapter in everyday life commonly group objects units buy peas eggs carton computer languages group data items thesame type basic mechanism accomplishes array arrayscan hold data items tens thousands data items grouped array simple types asintorfloat user defined types structures objects arrays structures group number items larger unit structure groups items types array groups items type importantly items structure accessed array accessed indexnumber number item easy access large number items arrays exist almostevery computer language arrays languages identical thischapter arrays basic data types intandchar examine arrays data members classes arrays hold objects chapter intended introduce arrays increase understanding ofobject oriented programming standard array group elements type vector standard template library approach vectors chapter  standard template library chapter approaches tostrings store manipulate text kind string array type char member standard stringclass array fundamentalsa simple program serve introduce arrays program replay creates anarray integers representing ages people asks user enter values whichit places array finally displays values replay cpp ages user displays include iostream namespace std int main int age  array age  ints08  ch07       int    ages cout enter age cin age access array element   display  agescout entered age endl return  sample interaction program enter age  enter age  enter age  enter age you entered you entered  entered  entered the forloop ages user places array reads array displaysthem defining arrayslike othervariables array defined store definitions array definition specifies variable type includes feature size sizespecifies data items array surrounded square brackets figure   syntax array definition replay array type int array opening bracket array size closing bracket number brackets constant expression evaluates constant bean integer  array elementsthe items array called elements contrast items structure calledmembers elements array type values vary figure   elements array age arrays strings7arraysand strings26508  ch07       figure7 syntax arraydefinition chapter age  age  age  age  memory figure7 array elements conventional ways backward approach memory grows downward figure array elements elements extend downward definition array elements   ch07       notice array element numbered  elements number  confusing situation element elementarray number  accessing array elementsin replay access array element time insert array cin age time read cout nyou entered age cases expression array element age consists array brackets delimiting variable array elements expression depends age  refersto element age  age  age  fourth vari constant brackets called array sincejis loop variable forloops starts  incremented reaches  accessing arrayelements turn averaging array elementshere anotherexample array work sales invites user enter seriesof values representing widget sales day week excluding sunday calculates average values array type doubleso monetary values entered sales cpp averages weeks widget sales  days include iostream namespace std int main const int size  size array double sales size array  variablescout enter widget sales  days int  size figures arraycin sales arrays strings7arraysand strings26708  ch07       double total   size read figures arraytotal sales totaldouble average total size average cout average average endl return  sample interaction sales enter widget sales  days             average  a program constvariable array size loop limits variable defined start listing const int size  variable number  easier change array size program changed change array size loop limits array size appears uppercase reminds variable modified theprogram initializing arraysyou values toeach array element array defined days sets  array elements array days_per_monthto number days month days cpp days start year include iostream namespace std int main int month day total_days int days_per_month              cout nenter month   cin month cout enter day   chapter   ch07       cin day total_days day separate days int  month  add days monthtotal_days days_per_month cout total days start year total_days endl return  program calculates number days year user beware work forleap years sample interaction enter month   enter day    total days start year once month day values program assigns day total_daysvariable cycles loop adds values days_per_montharray tototal_days number values add number months instance user enters month  values array elements     total values days_per_monthis initialized surrounded braces separated bycommas connected array expression equal sign figure   syntax arrays strings7arraysand strings269figure7 syntax arrayinitialization array size initialize array elements compiler figure counting initializing variables write int days_per_month               ch07       explicit array size agree number initializers initializers missing elements set  erroris signaled multidimensional arraysso lookedat arrays dimension single variable specifies array element arrays higher dimensions program salemon dimensional array store sales figures districts months salemon cpp displays sales chart  array include iostream include iomanip setprecision namespace std const int districts  array dimensionsconst int months  int main int double sales districts months dimensional array definitioncout endl  districts array valuesfor  months cout enter sales district  cout month  cin sales number array cout cout month cout     districts cout ndistrict   months display array valuescout setiosflags ios fixed exponential setiosflags ios showpoint point setprecision  digits setw  field width sales number array chapter   ch07       cout endl return  mainthis program accepts sales figures user displays atable enter sales district  month    enter sales district  month    enter sales district  month    enter sales district  month    enter sales district  month    enter sales district  month    enter sales district  month    enter sales district  month    enter sales district  month    enter sales district  month    enter sales district  month    enter sales district  month   month1  district        district        district        district       defining multidimensional arraysthe array defined size specifiers enclosed brackets double sales districts months salesas dimensional array laid checkerboard salesis array arrays array districtselements array monthselements figure   thislooks arrays dimensions dimensional array array arrays arrays accessed indexes elem dimen3 analogous dimensional arrays accessing multidimensional array elementsarray elements dimensional arrays require indexes sales notice set brackets commas write sales works languages arrays strings7arraysand strings27108  ch07       figure7 two dimensional array formatting numbersthesalemonprogram displays table dollar values values formatted properly digress dollar values digits point points numbers column nice trailing zeros displayed     convincing streams requires work manipulatorsetw set output field width formatting numbers requires additional manipulators statement prints floating point number called fpnin field  characters wide digits point cout setiosflags ios fixed fixed exponential setiosflags ios showpoint pointchapter   ch07       setprecision  places setw  field width  fpn finally numbera group bit formatting flagsin longint iosclass determines formattingwill carried point iosclass reasons exact syntax class manipulators work concerned iosflags fixedandshowpoint set flags manipulatorsetiosflags flag argument preceded class ios scope resolution operator lines coutstatement set iosflags unset clear flags point program resetiosflagsmanipulator fixedflag preventsnumbers printed exponential format  e3 showpointflag specifies point number fractional    set precision digits place setprecisionmanipulator number digits argument set field width setwmanipulator manipulators cout youcan send number displayed desired format talk iosformatting flags chapter  streams files initializing multidimensional arraysas expect initialize multidimensional arrays prerequisite willingness type lot braces commas variation salemonprogramthat initialized array input user program called saleinit saleinit cpp displays sales chart initializes  array include iostream include iomanip setprecision namespace std const int districts  array dimensions const int months  int main int initialize array elementsdouble sales districts months arrays strings7arraysand strings27308  ch07                               cout cout month cout     districts cout ndistrict   months cout setw  setiosflags ios fixed setiosflags ios showpoint setprecision  sales access array element cout endl return  remember dimensional array array arrays format initializing array based fact initializing values subarray enclosed braces separated commas       subarrays element main array likewise enclosed braces separated commas seenin listing passing arrays functionsarrays arguments functions variation saleinitprogram passes array sales figures function purpose display data table listing salefunc salefunc cpp passes array argument include iostream include iomanip setprecision namespace std const int districts  array dimensions const int months  void display double districts months declaration int main initialize dimensional array double sales districts months chapter   ch07                               display sales function array argument cout endl return  main display function display  array passed argument void display double funsales districts months int cout cout month cout     districts cout ndistrict   months cout setiosflags ios fixed setw  setiosflags ios showpoint setprecision  funsales array element displayfunction declaration array argumentsin function declaration array arguments represented data type size array declaration display function void display float districts months declarationactually unnecessary piece statement works void display float months declarationwhy function size dimension remember dimensional array array arrays function thinks argument array districts districts big district element calculate element multiplying bytes element times size element months districts arrays strings7arraysand strings27508  ch07       declaring function dimensional array argument array size void somefunc int elem declarationfunction array argumentswhen function iscalled array argument display sales function callthis salesin case represents memory address array explore addresses chapter  pointers preliminary pointsabout address array argument reference argument values array elements duplicated copied function discussionof reference arguments chapter  functions function works original array refers arrays large duplicating entire array function called time consuming wasteful memory address reference ampersand arrayname function declaration discuss pointers faith arrays passed function accesses theoriginal array duplicate function definition array argumentsin function definition declarator void display double funsales districts months array argument data type sizes array dimensions array function funsalesin defines array sales refer array array dimensions cases function access array elements properly references array elements function function array funsales ways function access array elements arrayhad defined function chapter   ch07       arrays structures arrays cancontain structures simple data types based partstructure chapter  structures partaray cpp structure variables array elements include iostream namespace std const int size  number parts array struct structure int modelnumber number widget int partnumber number widget float cost cost int main int size define array structuresfor  size values members cout endl cout enter model number cin modelnumber model number cout enter number cin partnumber number cout enter cost cin cost cost cout endl  size values members cout model modelnumber cout partnumber cout cost cost endl return  user types model number number cost program records data structure structure element array structures arrays strings7arraysand strings27708  ch07       program asks data parts stores elements apartarray displays sample input enter model number enter number  enter cost  enter model number enter number  enter cost  enter model number enter number  enter cost  enter model number enter number  enter cost  model   cost  model   cost   model   cost   model   cost  the array structures defined statement size syntax arrays simple data types type array complex type accessinga data item member structure element array involves syntax modelnumberrefers modelnumbermember structure element nof apartarray figure   showshow arrays structures data type variety situations array car parts store array personnel data age salary array geographical data cities population elevation types ofdata chapter   ch07       figure7 array structures arrays class member dataarrays data items classes models common computer data structure stack stack works spring loaded devices hold trays cafeterias tray stack sinks tray pops tray stack tray removed stacks cornerstones architecture microprocessors mostmodern computers mentioned earlier functions pass arguments store return address stack kind stack implemented partly hardware conveniently accessed assembly language stacks created completely software software stacks offer storage device programming situations parsing analyzing algebraic expressions exampleprogram stakaray creates simple stack class stakaray cpp stack classarrays strings7arraysand strings27908  ch07       include iostream namespace std class stack private enum max  standard syntax int max stack array integers int number stackpublic stack constructor  void push int var number stack var int pop number stack return int main stack s1 s1 push  s1 push  cout  s1 pop endl  cout  s1 pop endl  s1 push  s1 push  s1 push  s1 push  cout  s1 pop endl  cout  s1 pop endl  cout  s1 pop endl  cout  s1 pop endl  return  member stack array intvari item stack location item topof stack size array stack max statementenum max  chapter   ch07       definition maxis unusual keeping philosophy encapsulation preferable define constants class maxis class global constvariables purpose nonoptimal standard mandatesthat declare maxwithin class asstatic const int max  maxis constant applies objects class compilers including current version microsoft visual newly approved construction workaround define constants enumerators chapter  enumeration enumerator enum max  defines maxas integer  definition contained class approach works awkward compiler supports static constapproach define constants class figure   stack memory grows downward figure stack figure item stack topis incrementedto point stack item removed topis decremented erase left memory item removed irrelevant place item stack processcalled pushingthe item push mem berfunction stored argument retrieve pop item thestack pop member function returns item themain program stakaray exer cises stackclass creating object s1 theclass pushes items stack pops displays pushes items stack pops displays output           arrays strings7arraysand strings28108  ch07       figure7 a stack items popped stack reverse order thing pushed thing popped notice subtle prefix postfix notation increment decrement operators statementst var push member functionfirst increments topso points array element element assigns varto element stack thestatement return returns finds stack decrements topso points thepreceding element chapter   ch07       thestackclass feature object oriented programming class implement containeror data storage mechanism chapter  stack number ways store data queues sets linked lists data storage scheme chosen matches specific requirements program preexisting class provide data storage programmer waste time duplicating details data storage mechanism arrays objectswe objectcan array reverse situation create array objects situations array english distances deck cards arrays english distancesin chapter  objects classes examples english distanceclass incorporated feet inches object representing data type program englaray demonstrates array objects englaray cpp objects english measurements include iostream namespace std class distance english distance class private int feet float inches public void getdist length user cout enter feet cin feet cout enter inches cin inches void showdist const display distance cout feet inches int main distance dist  array distances int  count entries char ans user response arrays strings7arraysand strings28308  ch07       cout endl distances usercout enter distance number  dist getdist store distance array cout enter cin ans ans quit user types int  display distances cout ndistance number  dist showdist cout endl return  program user types distances desired distance entered program asks user desires enter terminates displays distances entered sample interaction user enters distances enter distance number enter feet enter inches enter enter distance number enter feet  enter inches  enter enter distance number enter feet  enter inches  enter ndistance number    distance number     distance number     simply displaying distances entered program averaged written disk operated ways array boundsthis program doloop input user user input data structures type partas desirable max size array setto  chapter   ch07       hard imagine patience happen user entered  distances answer unpredictable bad bounds checking arrays program inserts array compiler runtime object renegade data written data program code bizarre effects crash completely moral programmer deal array bounds checking seemspossible user insert data array hold array larger warning user devised insert code doloopin englaray max cout nthe array break breakout loop prevents array overflowing accessing objects arraythe declaration distanceclass program previous programs main program define array objects distance dist max data type distarray distance maxelements figure   class member function array element accessed structure memberthat array element aray showdist memberfunction jth element array distis invoked dist showdist member function object array element accessed dot operator array brackets joined dot opera tor member function parentheses accessing struc ture class data member thatthe function parentheses data notice getdist member function distance array opportunity increment array dist getdist arrays strings7arraysand strings28508  ch07       figure7 array ofobjects group data user structure array element dist nvariable incremented manually doloop forloop forloop loop variable incremented automatically serve thearray arrays cards somewhatlonger array objects doubt remember thecardobjexample chapter  borrow cardclass group array  objects array creating deck cards listing cardaray cardaray cpp cards objects include iostream chapter   ch07       include cstdlib srand rand include ctime time srand namespace std enum suit clubs diamonds hearts spades   integers names const int jack  const int queen  const int king  const int ace  class card private int number   jack queen king ace suit suit clubs diamonds hearts spadespublic card constructor void set int suit set card suit number void display display card void card display display card number  number  cout number elseswitch number case jack cout break case queen cout break case king cout break case ace cout break switch suit case clubs cout static_cast char  break case diamonds cout static_cast char  break case hearts cout static_cast char  break case spades cout static_cast char  break arrays strings7arraysand strings28708  ch07       int main card deck  int cout endl   ordered deck int num   cycles    times suit su suit  cycles    times deck set num su set card cout nordered deck   display ordered deck deck display cout   newline  cardscout endl srand time null seed random numbers time   card deck int rand  pick card random card temp deck swap deck deck deck temp cout nshuffled deck   display shuffled deck deck display cout   newline  cardscout endl return  mainonce created deck hard resist temptation shuffle display cards deck shuffle display conserve space graphics characters club diamond heart spade figure   output program program incorporates ideas turn chapter   ch07       figure7 output cardaray program graphics charactersthere special graphics characters range ascii code  appendix ascii table list ascii codes display member function cardweuse codes     access characters club diamond heart spade casting numbers type char instatic_cast char  operatorto print characters numbers card deck array structures constitutes deck cards defined statement card deck  creates array called deck consisting  objects type card display jthcard deck display member function deck display random numbersit fun generate random numbers program shuffle deck steps random numbers random number generator seeded initialized srand libraryfunction function time seed requires header files cstdlibandctime generate random number rand library function function returns random integer number range   apply remainder operator  result rand int rand  arrays strings7arraysand strings28908  ch07       random number kis swap cards forloop swapping card points card   order card random number  cards exchanged random card deck considered shuffled program form basis card playing program leave details arrays objects programming examplesas stringswe chapter kinds strings commonly strings strings objects stringclass kind fits theme chapter strings arrays type char stringsc strings style strings kind strings language early days matter called char strings represented pointers type char pointer learn chapter  strings created stringclass examine superseded strings situations stringsare variety reasons library functions continue legacy code years students strings primitive easier understand fundamentallevel string variables data types strings variables constants entities examine complex string operations defines single string variable assume word stringrefers string asksthe user enter string places string string variable displays string listing stringin stringin cpp simple string variable include iostream namespace std int main const int max  max characters string char str max string variable strchapter   ch07       cout enter string cin str string str display string strcout entered str endl return  definition string variable strlooks definitionof array type char char str max extraction operator read string keyboard place string vari str operator deal strings understands arrays characters user enters string amanuensis employed copy manuscripts program array strwill figure   arrays strings7arraysand strings291figure7 string stored instring variable character occupies  byte memory aspect strings terminate byte  represented character constant  whichis character ascii  terminating called null character whenthe operator displays string displays characters encounters null character   ch07       avoiding buffer overflow thestringinprograminvites user type string user enters string longer array hold mentioned earlier built mechanism program inserting array elements array overly enthusiastic typist crashing operator limit number characters places anarray safetyinprogram demonstrates approach safetyin cpp avoids buffer overflow cin width include iostream include iomanip setw namespace std int main const int max  max characters string char str max string variable strcout nenter string cin setw max str string str max charscout entered str endl return  program usesthe setwmanipulator maximum number characters theinput buffer accept user type characters operator insert array character fewer number inserted room buffer terminating null character safetyin maximum of19 characters inserted string constantsyou initialize string constant define strinit shakespearean sonnet strinit cpp initialized string include iostream namespace std int main char str farewell art dear possessing chapter   ch07       cout str endl return  string constant written normal english phrase delimited quotes surprising string array type char examples arrays initialized series values delimited braces separated commas strinitialized fact sequence character constants char str fortunately designers pity provided shortcut approach strinit characters array strings character null reading embedded blanksif stringinprogram strings contained word unpleasant surprise enter string law bottomless pit entered lawwhere rest phrase quotation scottish writer john arbuthnot   turns extraction operator considers space terminatingcharacter read strings consisting single word typed space thrown readtext blanks function cin syntax mem ber function stream class cinis object blanksin sho ws blanksin cpp reads string embedded blanks include iostream namespace std int main const int max  max characters string char str max string variable strcout nenter string cin str max string str cout entered str endl return  arrays strings7arraysand strings29308  ch07       argument cin thearray address string input argument specifies maximum size array automatically avoi ding buffer overrun function input string stored entirety enter string law bottomless pit entered law bottomless pit potential problem mix cin withcinand theextraction operator discuss ignore member function cinto solve problem chapter  streams files reading multiple lineswe solved problem reading strings embedded blanks strings multiple lines turns cin function argument situation argument specifies character tells function reading default argument newline character function character argument default overridden character linesin function dollar sign argument linesin cpp reads multiple lines terminates character include iostream namespace std const int max  max characters stringchar str max string variable strint main cout nenter string cin str max terminate cout entered str endl return  cantype lines input function continue accept characters enter terminating character exceed size array remember press enter typing character sample interac tion poem thomas carew   chapter   ch07       enter string jove bestows june fading rose beauty orient deep flowers sleep entered jove bestows june fading rose beauty orient deep flowers sleep terminate enter program continues accept inputuntil enter copying string hard understandthe true nature strings deal character character program strcopy1 cpp copies string loop include iostream include cstring strlen namespace std int main initialized stringchar str1 captain captain fearful trip const int max  size str2 buffer char str2 max stringfor int  strlen str1 copy strlen charactersstr2 str1 str1 str2str2  insert null endcout str2 endl display str2 return  program creates string constant str1 string variable str2 forloop copy string constant string variable copying character time statement str2 str1 recall compiler concatenates adjacent string constants single write quotation lines arrays strings7arraysand strings29508  ch07       program introduces string library functions string operatorsbuilt strings manipulated library functions fortunately functions program strlen finds length string characters length limit forloop sothat number characters copied string functions header file cstring orstring beincluded include program copied version string terminated null string length returned strlen includethe null copy additional character safer insert null explicitly str2  insert character string printed program includes sorts weird characters string printing characters chance encountersa  copying string easy forloop copy string guessed library function revised version program strcopy2 thestrcpy function strcopy2 cpp copies string strcpy function include iostream include cstring strcpy namespace std int main char str1 tiger tiger burning bright forests night const int max  size str2 buffer char str2 max stringstrcpy str2 str1 copy str1 str2cout str2 endl display str2 return  note function destination strcpy destination source left order reminiscent format normal assignment statements variable theright copied variable left chapter   ch07       arrays stringsif arrays ofarrays arrays strings construction straray puts names days weekin array straray cpp array strings include iostream namespace std int main const int days  number strings array const int max  maximum size string array stringschar star days max sunday monday tuesday wednesday thursday friday saturday int  days display stringcout star endl return  program printsout string array sunday monday tuesday wednesday thursday friday saturdaysince string array true star array strings dimensional array dimension array days tells strings array dimension max specifies maximum length strings  characters wednesday terminating null  figure   notice bytes wasted strings maximum length learn remove inefficiency talk pointers arrays strings7arraysand strings29708  ch07       figure7 array strings syntax foraccessing string surprising star dealing dimensional array dimensional array array arrays access elements outer array array case string individually star string number jin array strings strings class membersstrings frequently members classes variation objpart program chapter  string hold widget strpart cpp string widget object include iostream include cstring strcpy namespace std class private char partname  widget int partnumber number widget double cost cost partchapter   ch07       public void setpart char pname int double strcpy partname pname partnumber cost void showpart display data cout nname partname cout number partnumber cout cost cost int main part1 part2 part1 setpart handle bolt    set partspart2 setpart start lever    cout nfirst part1 showpart parts cout nsecond part2 showpart cout endl return  program defines objects class partand values setpart member function displays showpart member function output handle bolt number  cost   start lever number  cost  to reduce size program dropped model number class members setpart member function strcpy string library function copy string argument pnameto class data member partname function serves purpose string variables assignment statement simple vari ables function strncpy takes argument maximum number characters copy prevent overrunning array library functions add string compare strings search specific characters strings perform actions descriptions functions compiler documentation arrays strings7arraysand strings29908  ch07       user defined string type problems strings thing perfectly reasonable expression strdest strsrc set string equal languages basic perfectly standard stringclass examine care problem moment object oriented technology solve problem creating string class insight representing strings objects class illuminate operation standard stringclass define string type class assignment statements string operations concatenation simplified wait chapter  operator overloading thestrobj program creates class called string confuse homemade class stringwith standard built class string lowercase listing strobj cpp string class include iostream include cstring strcpy strcat namespace std class string private enum  max size strings char str arraypublic string constructor args str   string char constructor arg strcpy str void display display string cout str void concat string add arg string string strlen str strlen str strcat str str elsecout nstring long chapter   ch07       int main string s1 merry christmas constructor  string season alternate form  string s3 constructor cout ns1 s1 display display allcout ns2 display cout ns3 s3 display s3 s1 assignmentcout ns3 s3 display display s3s3 concat concatenationcout ns3 s3 display display s3 cout endl return  thestringclass array type char newly defined class original definition string array type char wrapping array class achieved interesting benefits object assigned object class operator statements s3 s1 main set stringobject equal define member functions deal strings objects ofclass string strobj program strings length szcharacters set  constructors sets character strto null character  string length  constructor called statements string s3 constructor sets stringobject normal string string constant strcpy library function copy string constant object data called statements string s1 merry christmas alternative format calling constructor works argument constructor string s1 merry christmas whichever format constructor effectively converts string string normal string constant object class string member function display displaysthestring arrays strings7arraysand strings30108  ch07       member function stringclass concat concatenates adds stringtoanother original stringis object concat member stringwillbe stringpassed argument statement main s3 concat causess2to existing s3 s2has initialized season ands3has assigned s1 merry christmas s3is merry christmas season theconcat function thestrcat library function concatenation library function adds string argument string argument output program s1 merry christmas season s3 yets3 merry christmas set equal s1s3 merry christmas season concatenatedif strings concat function exceed maximum stringlength concatenation carried message user examined simple string class sophisticated versionof approach standard stringclassstandard includes class called string class improves traditional string ways thing longer worry creating array size hold string variables stringclass assumes responsibility memorymanagement stringclass overloaded operators concatenate string objects operator s3 s1 s2there benefits class efficient safer strings situations preferred approach earlier situations strings examine stringclass member functions operators defining assigning stringobjectsyou define stringobjectin ways constructor arguments creating string argument constructor argument chapter   ch07       string constant characters delimited double quotes homemade stringclass objects class stringcan assigned simple assignment operator thesstrassexample sstrass cpp defining assigning string objects include iostream include string namespace std int main string s1 man initialize string beast initialize string s3 s3 s1 assigncout s3 s3 endl s3 s1 concatenates3 concatenate cout s3 s3 endl s1 swap swap s1 s2cout s1 endl return  lines code ways define stringobjects initializestrings creates stringvariable simple assignment operator thestringclass number overloaded operators learn workings operator overloading chapter operators knowing constructed overloaded operator concatenates string object statement s3 s1 places string man variable s3 operator append string existingstring statement s3 appendss2 beast s3 producing string man norbeast assigning s3 arrays strings7arraysand strings30308  ch07       introduces stringclass member function swap whichexchanges values string objects called object argument apply s1 man beast display values thats1is beast ands2is man output sstrass s3 mans3 man beast beast maninput output stringobjectsinput output arehandled strings operators areoverloaded handle stringobjects function getline handles input containsembedded blanks multiple lines sstrioexample thislooks sstrio cpp string class input output include iostream include string string class namespace std int main objects string classstring full_name nickname address string greeting cout enter getline cin full_name reads embedded blanks cout full_name endl cout enter nickname cin nickname input string objectgreeting nickname append greetingcout greeting endl output jim cout enter address separate lines cout terminate getline cin address reads multiple lines cout address address endl return  chapter   ch07       program reads user embedded blanks getline function function strings member function argument stream object input cin stringobject text full_name variable displayed coutand program reads user nickname assumed word cinand operator finally program variation getline arguments read user address require multiple lines argument specifies character terminate input program character user input character pressing enter key argument plied getline delimiter assumed represents enter key interaction sstrio enter scott fitzgeraldyour scott fitzgerald enter nickname scotty scotty enter address separate lines terminate  zelda lane east egg york address  zelda lane east egg yorkfindingstringobjectsthestringclass includes variety member functions finding strings substrings stringobjects sstrfindexample sstrfind cpp finding substrings string objects include iostream include string namespace std int main string s1 xanadu kubla kahn stately pleasure dome decree int s1 kubla cout kubla endl arrays strings7arraysand strings30508  ch07       s1 find_first_of spde cout spde endl s1 find_first_not_of aeiouaeiou cout consonant endl return  thefind functionlooks string argument string called finds kubla ins1 holds poem kubla kahnbysamuel taylor coleridge finds position  strings leftmost character position numbered  thefind_first_of functionlooks group characters returns position finds group finds inxanadu position  function find_first_not_of findsthe character string notoneof group group consists vowels upper lowercase function finds consonant letter theoutput sstrfindisfound kubla first spde  consonent there variations functions demonstrate rfind scans string backward find_last_of finds character matching group characters find_last_not_of functions return  target modifyingstringobjectsthere ways modify stringobjects member functions erase replace insert work sstrchng cpp changing parts string objects include iostream include string namespace std int main string s1 quick send count graystone string lord string s3 chapter   ch07       s1 erase   remove quick s1 replace   replace count lord s1 replace   replace s1 insert  s3 insert s1 erase s1 size   remove s1 append  append int s1 spacewhile s1 size loop spaces remain s1 replace  replace slash s1 space cout s1 s1 endl return  theerase function removes substring string argument position character substring length substring removes quick string replace functionreplaces string string argument position replacement number characters original string replaced replacement string count replaced lord theinsert function inserts string argument location argument inserts s1 oferase employs size member function returns number characters thestringobject expression size is position character period erased append function installs exclamation points sentence version function argument number characters append character appended program idiom replace multiple instances substring string whileloop space character usingfind replace slash replace start s1containing string quick send count graystone thesechanges output sstrchngiss1 send lord graystone comparingstringobjectsyou overloaded operators compare function compare stringobjects thesediscover strings precede follow alphabet ically sstrcomprogram possibilities arrays strings7arraysand strings30708  ch07       sstrcom cpp comparing string objects include iostream include string namespace std int main string aname george string username cout enter cin username username aname operator cout george username aname operator cout george elsecout george compare functionint username compare   aname   cout letters  cout match  cout elsecout cout aname substr   endl return  program operators determine nametyped user equal precedes alphabetically george thesecond program compare function compares letters george letters typed user username arguments version compare starting position usernameand number characters compare string comparison aname starting position number characters aname interaction sstrcom enter alfred george letters gethe letters george substr member function returns asubstring string called argument position substring number characters chapter   ch07       accessing characters stringobjectsyou access individual characters stringobject ways access member function overloaded opera tor whi stringobject array operator warn attempt access character bounds string operator behaves real arrays efficient lead hard diagnose program bugs safer function program bounds throws exception discuss exceptions chapter  templates exceptions sstrchar cpp accessing characters string objects include iostream include string namespace std int main char charray  string word cout enter word cin word int wlen word length length string objectcout character time int  wlen cout word exception bounds cout word warning boundsword copy charray wlen  copy string object array charray wlen  terminate  cout narray charray endl return  program display characters stringobject character character argument location character string copy member function copy stringobject anarray type char effectively transforming string copy null character  inserted character array complete transformation aarrays strings7arraysand strings30908  ch07       string length member function stringreturns number assize output sstrchar enter word symbiosisone character time symbiosis array symbiosis convert stringobjects strings thec_str ordata memberfunctions functions pointers examine chapter  otherstringfunctionswe size andlength return number characters astringobject memory occupied string larger needed characters initialized  bytes characters capacity member function returns actual memory occupied add characters string causing expand memory limit reached themax_size memberfunction returns maximum size string object corresponds size intvariables  bytes  bit windows systems     bytes size memory restrict stringmember functions discussed numerous variations numbers types arguments consult compiler documentation details aware stringobjects terminated null stringsare length string member class stepping string rely finding null reached thestringclass string classes derived template class basic_string stringclass based type char common variant type wchar_tinstead basic_stringto foreign languages withmany characters english compiler file list stringmemberfunctions basic_string summaryarrays number data items type type simple data type structure class items array called elements elements accessed number number called elements initialized specific values array defined arrays multiple dimensions dimensional array array arrays address array argument function array copied chapter   ch07       arrays member data classes care prevent data memory array strings arrays type char character string null character  string constants special form written conveniently text surrounded double quotes variety library functions manipulate strings array strings array arrays type char creator string variable ensure array large hold text strings argu ments style library functions older programs recommended general programs preferred approach strings objects stringclass strings manipulated numerous overloaded operators member functions user worry memory management stringobjects questionsanswers questions appendix  array element accessed approach dot operator member number  elements array _________data type  write statement defines dimensional array called doublearrayof type doublethat holds  elements  elements  element array numbered ________to________  write statement takes element jof array doublearrayand writes coutwiththe insertion operator  element doublearray  element array sixth seventh eighth impossible tellarrays strings7arraysand strings31108  ch07        write statement defines array coinsof type intand initializes values penny nickel dime quarter half dollar dollar  multidimensional array accessed array separated commas surrounded brackets separated commas separated commas surrounded brackets surrounded brackets  write expression accesses element  subarray  dimensional array calledtwod  true false array dimensions  dimensional array type float called flarr write statement declaresthe array initializes subarray           array source file represents ________of array  array passed function function accesses array calling program accesses copy array passed program refers array calling program refers array calling program  statement defines employee emplist   write expression accesses structure member called salaryin structure variable th element array called emplist  stack data item stack number number  data item removed data item removed  write statement defines array called manybirdsthat holds  objects type bird  true false compiler complain access array element   element array  write statement executes member function cheep object class birdthat th element array manybirds chapter   ch07        string _________of type _________  write statement defines string variable called citythat hold string  characters tricky  write statement defines string constant called dextrose c6h12o6 h2o  true false extraction operator stops reading string encounters aspace  read input consists multiple lines text normal cout combination cin function argument cin function arguments cin function arguments  write statement string library function copy string nameto stringblank  write declaration class called dogthat data members string calledbreedand intcalledage include member functions  true false prefer strings standard stringclass programs  objects stringclassa terminated copied assignment operator require memory management member functions  write statement finds string cat occurs string s1  write statement inserts string cat string s1at position  exercises answers starred exercises appendix  write function called reversit reverses string array char forloop swaps characters characters string passed reversit argument write program exercise reversit program string user callreversit print result input method embedded blanks test program napoleon famous phrase ere elba arrays strings7arraysand strings31308  ch07        create class called employeethat object class string anemployee number type long include member function called getdata datafrom user insertion object function called putdata todisplay data assume embedded blanks write main program exercise class create array type employee invite user input data  employees finally print data employees  write program calculates average  english distances input user create array objects distanceclass englaray inthis chapter calculate average borrow add_dist member functionfrom englconexample chapter  member function divides adistancevalue integer possibility void distance div_dist distance int divisor float fltfeet feet inches   fltfeet divisor feet int fltfeet inches fltfeet feet    start program user input number integers stores intarray write function called maxint array element element largest function arguments address array number elements return number largest element program function display largest element number salesprogram chapter  start fractionclass exercises   chapter  write main program obtains arbitrary number fractions user stores array type fraction averages displays result  game contract bridge players dealt  cards exhausting entire deck modify cardaray program chapter shuffling deck deals hands  cards players hands displayed  weaknesses writing business programs built type monetary values     money type store number fixed point  digits precision handle national debt dollars cents fortunately built typelong doublehas  digits precision basis money class floating add capability input output money amounts preceded dollar sign divided commas chapter   ch07       groups digits easier read large numbers step developing class write function called mstold takes money string string representing money       argument returns equivalent long double treat money string array characters character character copying digits   point string ignore including dollar sign commas _atold library function note initial underscore header file stdlib hormath toconvert pure string long double assume money values negative write main program test mstold repeatedly obtaining money string user displaying long double  weakness automatically check array indexes bounds array operations faster safe class create safe array checks array accesses write class called safearaythat intarray fixed size limit itsonly data member member functions putel tak anindex number intvalue arguments inserts intvalue array atthe getel takes number argument returns intvalue element safearay sa1 define safearay objectint temp  define int sa1 putel  temp insert temp array  temp sa1 getel  array both functions check argument  greater limit  array fear writing parts memory functions access array elements eloquent operator chapter  overload operator safearayclass work built arrays  queue data storage device stack difference stack data item stored retrieved queue data item stored retrieved stack lifo approach queue fifo queue customers bank join queue served rewrite stakaray program chapter incorporate class called queueinstead class called stack constructor functions calledput data item queue called data thequeue equivalent push andpop stackclass arrays strings7arraysand strings31508  ch07       queue stack array hold data single intvari called stack variables queue called headto point head queue called tailto point tail items queue tail customer bank removed queue head tail follow head array items removed queue complexity tail head array wrap statement tail max  tail  wrap tail head array queue called circular buffer head tail circle data  matrix dimensional array create class matrixthat safety feature array class exercise  checks array bounds member data matrixclass   array constructor programmer actual dimensions matrix provided   member functions access data matrix numbers dimension array fragment amain program operates class matrix m1   define matrix objectint temp  define int m1 putel   temp insert temp matrix   temp m1 getel   matrix   refer discussion money strings exercise  write function called ldtoms convert number represented type long doubleto represented money string check original long double large convert number greater        convert long doubleto pure string dollar signor commas stored memory ostrstreamobject discussed earlier chapter formatted string buffer called ustring start string dollar sign copy digit ustringata time starting left inserting comma string digits suppress leading zeros display           forget terminate string  character write main program exercise function user repeatedly input numbers type long doubleformat printing result money string chapter   ch07        create class called bmoney store money amounts long doubles thefunctionmstold convert money string entered input long double andthe function ldtoms convert long doubleto money string display exercises   input output member functions getmoney andputmoney write member function adds bmoneyamounts cancall madd adding bmoneyobjects easy add long doublemember dataamountsin bmoneyobjects write main program repeatedly asks user toenter money strings displays sum money string classspecifiermight class bmoney private long double money public bmoney bmoney char void madd bmoney m1 bmoney void getmoney void putmoney arrays strings7arraysand strings31708  ch07         ch07       chapter8operator overloadingin chapter overloading unary operators320 overloading binary operators328 data conversion344 uml class diagrams357 pitfalls operator overloading andconversion358 keywords explicitandmutable36009  ch08       chapter operator overloading exciting features object oriented programming transform complex obscure program listings intuitively obvious statements d3 addobjects d1 equally obscure d3 d1 addobjects changed readabled3 d1 forbidding term operator overloading refers normal operators additional meanings applied user defined data types normallya works basic types intandfloat attempting apply care objects user defined class complaints compiler overloading statement legal care user defined types operator overloading opportunity redefine language limited operators work change classes create kinds variables operator overloading create definitions operators extendc ways language design kind operation data type conversion closely connected operator overloading handles conversion simple types intandfloat automatically conver sions involving user defined types require work programmer data conversions chapter overloaded operators beer skittles discuss someof dangers chapter overloading unary operatorslet start overloading unary operator recall chapter  unary operators operand operand simply variable acted operator examples unary operators increment decrement operators theunary minus    ch08       counterexample chapter  objects classes created class countertokeep track count objects class incremented calling member function inc_count job listing readable wecould increment operator dyed wool programmers guess expression incrementsc1 rewrite counterto listing countpp1 countpp1 cpp increment counter variable operator include iostream namespace std class counter private unsigned int count countpublic counter count  constructor unsigned int get_count return count return count void operator increment prefix count int main counter define initializecout nc1 get_count displaycout nc2 get_count increment increment increment c2operator overloading operator overloading32109  ch08       cout nc1 get_count display againcout nc2 get_count endl return  program create objects class counter c1andc2 counts objects displayed initially  overloaded operator increment c1once c2twice display values program output  counts initially c2   incremented oncec2  incremented twicethe statements responsible operations operator isapplied c1and prefix notation explore postfix theoperatorkeyword teach normal operator user defined operand keyword operatoris overload operator declarator void operator return type voidin case keyword operator llowed operator finally argument list enclosed parentheses declarator syntax tells compiler member function operator encountered provided operand variable operated oftypecounter sawin chapter  functions compiler distinguish overloaded functions data types number arguments distinguish overloaded operators data type operands operand basic type int intvar compiler built routine increment int operand acountervariable compiler user written operator chapter   ch08       operator argumentsinmain operator applied specific object expression operator takes arguments operator increment increments countdata object member member functions access object invoked operator requires arguments figure   operator overloading operator overloading323 countvoid operator statementcauses function increment count objectno arguments count figure8 overloaded unary operator arguments operator return values theoperator function countpp1program subtle defect discover statement main compiler complain defined operator return type voidin operator function assignment statement asked return variable type counter compiler asked return val c2has operated operator assign asdefined countpp1 increment counterobjects assignments mustalways stand operand normal operator applied basic data types int problem homemade operator assignment expressions provide return program countpp2   ch08       countpp2 cpp increment counter variable operator return include iostream namespace std class counter private unsigned int count countpublic counter count  constructor unsigned int get_count return count return count counter operator increment count count increment count counter temp temporary counter temp count count obj return temp return copy int main counter  cout nc1 get_count displaycout nc2 get_count c2  cout nc1 get_count display againcout nc2 get_count endl return  operator function creates object type counter called temp areturn increments countdata object creates tempobject assigns countin object object finally returns tempobject thishas desired expressions c1chapter   ch08       return expressions main returned assigned output program isc1 c2   nameless temporary objects incountpp2we created temporary object type counter named temp sole purposewas provide return operator required statements counter temp temporary counter object temp count count object return temp return itthere convenient ways return temporary objects functions overloaded operators examine approach program countpp3 countpp3 cpp increment counter variable operator unnamed temporary object include iostream namespace std class counter private unsigned int count countpublic counter count  constructor args counter int count constructor arg unsigned int get_count return count return count counter operator increment count count increment count return return counter count unnamed temporary object initialized count operator overloading operator overloading32509  ch08       int main counter  cout nc1 get_count displaycout nc2 get_count c2  cout nc1 get_count display againcout nc2 get_count endl return  program single statementreturn counter count statements countpp2 statement creates object type counter object long unnamed object initialized provided argument count wait require constructor takes argument statement work sneakily inserted constructor member function list countpp3 counter int count constructor arg unnamed object initialized count returned output program countpp2 approaches countpp2and countpp3involve making copy original object object function member andreturning copy approach chapter  virtual functions return original object thethispointer postfix notationso theincrement operator prefix form c1what postfix variable incremented expression chapter   ch08       versions increment operator work define overloaded operators postfixprogram postfix cpp overloaded operator prefix postfix include iostream namespace std class counter private unsigned int count countpublic counter count  constructor args counter int count constructor arg unsigned int get_count const return count return count counter operator increment count prefix increment count return return counter count unnamed temporary object initialized countcounter operator int increment count postfix return unnamed temporary return counter count object initialized count increment count int main counter  cout nc1 get_count displaycout nc2 get_count c2   prefix cout nc1 get_count displaycout nc2 get_count   postfix operator overloading operator overloading32709  ch08       cout nc1 get_count display againcout nc2 get_count endl return  declarators overloading operator prefix notation counter operator postfix notation counter operator int difference intin parentheses intisn argument integer simply signal compiler create postfix version operator designers fond recycling existing operators keywords play multiple roles intis chose postfix syntax output program c2     we output lines countpp2and countpp3 lines statementc2 c1is incremented  c2is assigned c1before incremented c2retains  approach decrement operator overloading binary operatorsbinary operators canbe overloaded easily unary operators examples overload arithmetic operators comparison operators arithmetic assignment operators arithmetic operatorsin englconprogram inchapter  english distanceobjects beadded member function add_dist chapter   ch08       dist3 add_dist dist1 dist2 overloading operator reduce dense expression dist3 dist1 dist2 listing englplus englplus cpp overloaded operator adds distances include iostream namespace std class distance english distance class private int feet float inches public constructor args distance feet  inches   constructor args distance int float feet inches void getdist length user cout nenter feet cin feet cout enter inches cin inches void showdist const display distance cout feet inches distance operator distance const add  distances add distance d2distance distance operator distance const return sum int feet feet add feet float inches inches add inches   total exceeds   decrease inches     increase feet  return temporary distancereturn distance initialized sum operator overloading operator overloading32909  ch08       int main distance dist1 dist3 dist4 define distances dist1 getdist dist1 userdistance dist2    define initialize dist2 dist3 dist1 dist2 single operator dist4 dist1 dist2 dist3 multiple operators display lengthscout dist1 dist1 showdist cout endl cout dist2 dist2 showdist cout endl cout dist3 dist3 showdist cout endl cout dist4 dist4 showdist cout endl return  result addition addition assignment addition performed main add dist1 dist2 dist3to dist4 double dist3 statement dist4 dist1 dist2 dist3 output program enter feet  enter inches  dist1    userdist2    initialized programdist3    dist1 dist2dist4    dist1 dist2 dist3in class distancethe declaration operator function distance operator distance function return type distance takes argument type distance expressions dist3 dist1 dist2 understand return arguments operator relate objects compiler sees expression argument types finding type distance realizes distancemember function operator butwhat function argument dist1ordist2 arguments numbers chapter   ch08       key argument left operator dist1in case objectof operator member object operator dist2 mustbe furnished argument operator operator returns assigned ways case isassigned dist3 figure   operator overloading operator overloading331figure8 overloaded binaryoperator argument operator function left operand accessed directly object operator member usingfeetandinches operand accessed function argument feetandd2 inches generalize overloaded operator requires argument number operands operand object operator member unary operators require arguments rule apply friend functions operators features discuss chapter  calculate return operator inenglplus add feetandinchesfrom operands adjusting carry values fandi initialize nameless distanceobject returned statement   ch08       return distance arrangement countpp3 constructor takes arguments statement dist3 dist1 dist2 inmain assigns nameless distanceobject dist3 compare intuitively obvious statement function perform task englconexample chapter  functions created overload operators distanceclass subtract multiply divide objects thisclass natural ways concatenating stringsthe operator cannotbe concatenate strings str3 str1 str2 wherestr1 str2 str3are string variables arrays type char cat bird equals catbird stringclass strobj program inchapter  overload operator perform concatenation standard stringclass easier works ambitious stringclass overloading operator strictly addition redefining language listingfor strplus strplus cpp overloaded operator concatenates strings include iostream namespace std include string strcpy strcat include stdlib exit class string user defined string type private enum  size string objects char str holds stringpublic string constructor args strcpy str string char constructor arg strcpy str void display const display string cout str string operator string const add stringschapter   ch08       string temp temporary string strlen str strlen str strcpy temp str str copy string temp strcat temp str str add argument string cout nstring overflow exit  return temp return temp string int main string s1 nmerry christmas constructor  string happy year constructor  string s3 constructor s1 display display stringss2 display s3 display s3 s1 add s1 assign s3s3 display display s3cout endl return  program displays strings separately point printed displays strings concatenated string displayed theoutput merry christmas happy year s1 s3 merry christmas happy year s3 concatenationby basics overloading operator familiar declarator string operator string operator takes argument type stringand returns object sametype concatenation process operator involves creating temporary object type string copying string stringobject concatenating argument string library function strcat returning temporary string notethat operator overloading operator overloading33309  ch08       return string string approach nameless temporary stringis created access temporarystringnot initialize concatenate argument string careful overflow fixed length strings stringclass prevent accidents operator function check combined length strings concatenated exceed maximum string length print error message carrying concatenation operation handle errors ways returning  error occurred throwing exception dis cussed chapter  templates exceptions remember enumto set constant szis temporary compilers comply standard change tostatic const int  multiple overloadingwe operator add english distances concatenatestrings classes program interpret operator selects correct function carry addition based type operand comparison operatorslet overload kind operator comparison operators comparing distancesin overload thanoperator distanceclass wecan compare distances listing engless engless cpp overloaded operator compares distances include iostream namespace std class distance english distance class private int feet float inches public constructor args distance feet  inches   constructor args chapter   ch08       distance int float feet inches void getdist length user cout nenter feet cin feet cout enter inches cin inches void showdist const display distance cout feet inches bool operator distance const compare distances compare distance d2bool distance operator distance const return sum float bf1 feet inches  float bf2 feet inches  return bf1 bf2 true false int main distance dist1 define distance dist1 dist1 getdist dist1 userdistance dist2    define initialize dist2 display distancescout ndist1 dist1 showdist cout ndist2 dist2 showdist dist1 dist2 overloaded operatorcout ndist1 dist2 elsecout ndist1 greater equal dist2 cout endl return  program compares distance entered user distance    initialized program depending result prints sentences typical output enter feet enter inches   dist1    dist2    dist1 dist2operator overloading operator overloading33509  ch08       approach operator function englessis overloading operator englplusprogram operator function return typeofbool return falseortrue depending comparison distances comparison converting distances floating point feet comparing normal operator remember conditionaloperator return bf1 bf2 true false asif bf1 bf2 return true elsereturn false comparing stringshere exampleof overloading operator time equal operator compare homemade stringobjects returning trueif falseif listing strequal strequal cpp overloaded operator compares strings include iostream namespace std include string strcmp class string user defined string type private enum  size string objects char str holds stringpublic string constructor args strcpy str string char constructor arg strcpy str void display const display string cout str void getstr read string cin str bool operator string const check equality return strcmp str str  true false chapter   ch08       int main string s1 string string s3 cout nenter s3 getstr string userif s3 s1 compare cout typed s3 compare cout typed elsecout follow instructions return  themain program operator string input user output user types enter typed yestheoperator function library function strcmp tocompare thetwo strings function returns  strings equal negative number positive number greater thanandgreater thanare lexicographical sense string appears alphabetized listing comparison operators compare lexicographical strings alternatively comparison operators redefined compare string lengths defining operators definition yoursituation arithmetic assignment operatorslet finish exploration overloaded binary operators arithmetic assignment operator operator recall operator combines assignment addition step operator add english distance leaving result englplusexample earlier subtle difference listing englpleq englpleq cpp overloaded assignment operatoroperator overloading operator overloading33709  ch08       include iostream namespace std class distance english distance class private int feet float inches public constructor args distance feet  inches   constructor args distance int float feet inches void getdist length user cout nenter feet cin feet cout enter inches cin inches void showdist const display distance cout feet inches void operator distance add distance onevoid distance operator distance feet feet add feet inches inches add inches inches   total exceeds   decrease inches inches     feet increase feet  int main distance dist1 define dist1 dist1 getdist dist1 user cout ndist1 dist1 showdist distance dist2    define initialize dist2cout ndist2 dist2 showdist dist1 dist2 dist1 dist1 dist2cout nafter addition chapter   ch08       cout ndist1 dist1 showdist cout endl return  program distance user add distance initialized    program sample interaction program enter feet enter inches   dist1    dist2    addition dist1   program addition carried main statementdist1 dist2 sum dist1anddist2to dist1 notice difference function operator englplus operator earlier operator function object type distancehad becreated returned function assigned distanceobject dist3 dist1 dist2 operator function englpleq object takes sum object function member feetandinchesthat values temporary variables return object operator function noreturn returns type void return arithmetic assignment operators result assignment operator assigned operator expressions program dist1 dist2 wanted operator complex expressions dist3 dist1 dist2 provide return operator function statement return distance feet inches nameless object initialized values object returned operator overloading operator overloading33909  ch08       subscript operator subscript operator whichis access array elements overloaded modify arrays work safe array automatically checks numbers access array ensure bounds vectorclass chapter  standard template library demonstrate overloaded subscript operator return topic mentioned chapter  returning values functions reference overloaded subscript operator return reference true programs implement safe array approach inserting reading array elements separateput andget functions ngle access function return reference overloaded operator return referenceall programs create class called safearay member data array intvalues check ensure array accesses bounds main program program tests class filling safe array values equal  times array displaying assure user workingas separateget andput functionsthe program providestwo functions access array elements putel insert avalue array getel array element functions check number supplied ensure bounds  larger array size minus  listing arrover  arrover1 cpp creates safe array values checked access separate functions include iostream namespace std include process exit const int limit  class safearay private int arr limit public chapter   ch08       void putel int int elvalue set element  limit cout nindex bounds exit  arr elvalue int getel int const element  limit cout nindex bounds exit  return arr int main safearay sa1 int  limit insert elementssa1 putel   limit display elements int temp sa1 getel cout element temp endl return  data inserted safe array putel member function displayed withgetel implements safe array receive error message attempt boundsindex format bit crude singleaccess function returning reference turns member function insert data safe array read secret return function reference place function left equal sign assigned variable returned function explained chapter  listing arrover  arrover2 cpp creates safe array values checked access access function include iostream namespace std operator overloading operator overloading34109  ch08       include process exit const int limit  array size class safearay private int arr limit public int access int note return reference  limit cout nindex bounds exit  return arr int main safearay sa1 int  limit insert elementssa1 access  left equal signfor  limit display elements int temp sa1 access equal sign cout element temp endl return  statementsa1 access  left equal signcauses to arr return function convenient function input output safe array separate functions remember names remember overloaded operator returning reference access safe array subscript operator normal arrays overload subscript operator safearayclass operator commonly left equal sign overloaded function return reference previous program listing arrover  chapter   ch08       arrover3 cpp creates safe array values checked access overloaded operator include iostream namespace std include process exit const int limit  array size class safearay private int arr limit public int operator int note return reference  limit cout nindex bounds exit  return arr int main safearay sa1 int  limit insert elementssa1  left equal signfor  limit display elements int temp sa1 equal sign cout element temp endl return  program natural subscript expressions sa1  andtemp sa1 input output tothe safe array operator overloading operator overloading34309  ch08       data conversionyou operator assign variable statements intvar1 intvar2 whereintvar1andintvar2are integer variables noticed assignsthe user defined object provided type statements dist3 dist1 dist2 result addition type distance assigned object typedistance dist3 object assigned type values member data items simply copied object compiler special instructions assignment user defined objects distanceobjects assignments types basic types user defined types handled compiler effort provided data type sides equal sign variables sides ofdifferent types thorny question devote balance chapter review compiler handles conversion basic types automatically explore situations compiler handle things automatically include conversions basic types user defined types conversions user defined types represents poor programming practice convert routinely type languages pascal considerable trouble conversions philosophy flexibility provided allowing conversions outweighs dangers controversial issue return chapter conversions basic types writea statement intvar floatvar whereintvaris type intandfloatvaris type float assuming compilerwill special routine convert floatvar expressed floating point format integer format assigned intvar conversions floattodouble chartofloat conversion chapter   ch08       routine built compiler called data types sides equal sign dictate conversionsare implicitbecause apparent listing force compiler convert type cast operator instance convert floattoint sayintvar static_cast int floatvar casting explicitconversion obvious listing static_cast int isintended convert floattoint explicit conversions built routines implicit conversions conversions objects basic types toconvert user defined data types basic types rely built conversion routines compiler user defined types write routines convert basic type user defined type user defined type surprise english distanceclass previous examples basic type float represent meters unit length metric measurement conversion distancetofloat floattodistance sthe listing englconv englconv cpp conversions distance meters meters distance include iostream namespace std class distance english distance class private const float mtf meters feet int feet float inches public constructor args distance feet  inches   mtf  f constructor arg distance float meters mtf  f convert meters distance float fltfeet mtf meters convert float feet feet int fltfeet feet integer inches  fltfeet feet inches left constructor args operator overloading operator overloading34509  ch08       distance int float feet inches mtf  f void getdist length user cout nenter feet cin feet cout enter inches cin inches void showdist const display distance cout feet inches operator float const conversion operator converts distance meters float fracfeet inches  convert inches fracfeet static_cast float feet add feet return fracfeet mtf convert meters int main float mtrs distance dist1  f  arg constructor convert meters distancecout ndist1 dist1 showdist mtrs static_cast float dist1 conversion operator distance meterscout ndist1 mtrs meters distance dist2     arg constructor mtrs dist2 conversion opcout ndist2 mtrs meters dist2 mtrs error convertreturn  inmain program converts fixed floatquantity   representing meters feet inches argument constructor distance dist1  f otherdirection converts distanceto meters statementsmtrs static_cast float dist2 chapter   ch08       andmtrs dist2 output dist1      metersdist1   meters    dist2   meters    conversions performed simple assignment statements main scenes distancemember functions converting user defined type basic type requires approach converting basic type user defined type types conversions carried englconv basic user defined basictype floatin case user defined type distance usea constructor argument called conversion constructors constructor englconv distance float meters float fltfeet mtf meters feet int fltfeet inches  fltfeet feet functionis called object type distanceis created single argument function assumes argument represents meters converts argument feet inches assigns values object conversion meters distanceis carried creation object statementdistance dist1   user defined basic theother user defined type basic type trick create called conversion operator englconv operator float float fracfeet inches  fracfeet float feet return fracfeet mtf operator takes distanceobject member converts floatvalue representing meters returns operator overloading operator overloading34709  ch08       operator called explicit cast mtrs static_cast float dist1 simple assignmentmtrs dist2 forms convert distanceobject equivalent floatval meters conversion strings stringobjectshere examplethat argument constructor conversion operator operates stringclass strplusexample earlier chapter strconv cpp convert ordinary strings class string include iostream namespace std include string strcpy class string user defined string type private enum  size string objects char str holds stringpublic string arg constructor str   string char  arg constructor strcpy str convert string stringvoid display const display string cout str operator char conversion operator return str convert string string int main string s1 arg constructor create initialize stringchar xstr joyeux noel s1 xstr  arg constructor convert string strings1 display display stringchapter   ch08       string bonne annee  arg constructor initialize stringcout static_cast char conversion operatorcout endl convert string string return  sending argument constructor converts normal string array char object classstring string char strcpy str string sis passed argument copied strdata member newly createdstringobject strcpy library function conversion applied stringis created string bonne annee applied assignment statements s1 xstr wheres1is type stringandxstris string conversion operator convert stringtype string operator char return str asterisk expression pointer explore pointers chapter  hard figure pointer char array type char char char string data type conversion operator compiler statement cout static_cast char s2variable argument supplied overloaded operator opera tor user defined stringtype compiler convert s2to type type convert thechar cast conversion stringto string finds operator char function generate string displayed theeffect calling string display function ease intuitive clarity displaying display function redundant removed operator overloading operator overloading34909  ch08       output strconv joyeux noel bonne annee thestrconvexample demonstrates conversions place automatically assignment statements places arguments operators functions supply operator function arguments wrong type converted arguments acceptable type provided defined conversion note explicit assignment statement convert stringto string xstr string xstris array assign arrays chapter  overload assignment operator sorts things conversions objects classes converting objects user defined classes methods conversions basic types user defined types apply conversions user defined types argument constructor conversion operator choice depends conversion routine class declaration source object destination object suppose sayobjecta objectb whereobjectais member class aandobjectbis member class conversion routine located class destination class objectareceives class source class cases kinds timeour programs convert ways measuring time  hour time  hour time methods telling time called civilian timeandmilitarytime time12class represent civilian time digital clocks airport flight departure displays assume context seconds time12uses hours   minutes designation time24class exacting applications air navigation hours   minutes seconds table   differences chapter   ch08       table8  hour  hour time  hour time24 hour time   midnight                 m11    noon               note  midnight civilian time  hours military time  hour civilian time routine source object program conversion routine located source class conversion routine source class commonly implemented conversion operator listing times1 times1 cpp converts time24 time12 operator time24 include iostream include string namespace std class time12 private bool true false int hrs   int mins  public arg constructortime12 true hrs  mins   arg constructortime12 bool int int hrs mins void display const format   cout hrs operator overloading operator overloading35109  ch08       mins  cout  extra  cout mins string am_pm cout am_pm class time24 private int hours   int minutes   int seconds  public arg constructortime24 hours  minutes  seconds  time24 int int int  arg constructorhours minutes seconds void display const format    hours  cout  cout hours minutes  cout  cout minutes seconds  cout  cout seconds operator time12 const conversion operator time24 operator time12 const conversion operator int hrs24 hours bool hours  false true round secsint roundmins seconds  minutes minutes  roundmins  carry mins roundmins  hrs24 hrs24  hrs24  carry hrs true false true toggle int hrs12 hrs24  hrs24 hrs24  chapter   ch08       hrs12    hrs12  false return time12 hrs12 roundmins int main int true  time usercout enter  hour time cout hours   cin  quit hours return  cout minutes cin cout seconds cin time24 t24 time24cout entered display time24 t24 display time12 t12 t24 convert time24 time12 cout n12 hour time display equivalent time12t12 display cout return  main times1we define object type time24 called t24 values hours minutes seconds user define object type time12 called t12 initialize t24in statementtime12 t12 t24 objects classes assignment involves conversion program conversion operator member time24class declarator time24 operator time12 const conversion operator function transforms object member time12object returns object main assigns t12 ssome interaction times1 operator overloading operator overloading35309  ch08       enter  hour time hours   minutes  seconds you entered     hour time   seconds rounded pushing  hour time     entering hours greater  program exit routine destination objectlet conversion carried conversion routine destination class situation common argument constructor things complicated fact constructor destination class access data source class perform conversion data time24 hours minutesandseconds private provide special member functions time24to direct access called gethrs getmins getsecs listing times2 times2 cpp converts time24 time12 constructor time12 include iostream include string namespace std class time24 private int hours   int minutes   int seconds  public arg constructortime24 hours  minutes  seconds  time24 int int int  arg constructorhours minutes seconds void display const format    hours  cout  cout hours minutes  cout  cout minutes seconds  cout  cout seconds chapter   ch08       int gethrs const return hours int getmins const return minutes int getsecs const return seconds class time12 private bool true false int hrs   int mins  public arg constructortime12 true hrs  mins  time12 time24  arg constructor  arg constructortime12 bool int int hrs mins void display const cout hrs mins  cout  extra  cout mins string am_pm cout am_pm time12 time12 time24 t24  arg constructor converts time24 time12 int hrs24 t24 gethrs hours pmpm t24 gethrs  false true mins t24 getsecs  round secst24 getmins t24 getmins  mins  carry mins mins  hrs24 hrs24  hrs24  carry hrs true false true toggle hrs hrs24  hrs24 hrs24  convert hrs hrs    operator overloading operator overloading35509  ch08       hrs  false int main int true  hour time usercout enter  hour time cout hours   cin  quit hours return  cout minutes cin cout seconds cin time24 t24 time24cout entered display time24 t24 display time12 t12 t24 convert time24 time12 cout n12 hour time display equivalent time12t12 display cout return  conversion routine argument constructor time12class function sets object member values correspond time24val ues theobject received argument works conversion operator times1 work harder access data time24object gethrs functions themain times2is times1 argument constructor time24 time12conversion place statement time12 t12 t24 output difference scenes conversion handled constructor destination object conversion operator source object chapter   ch08       conversions whatwhen argument constructor destination class opposed conversion operator source class pick choice purchased library classes access source code object class source conversion access destination class argument constructor library class object destination conversion operator source uml class diagramswe introducedthe uml chapter  big picture classes uml feature class diagram diagram offers object oriented programs throw additional light workings times1and times2pr ograms listing times1we classes time12andtime24 ina uml class diagram classes represented rectangles figure   operator overloading operator overloading357time12time24figure8 uml class diagram times1progr class rectangle divided sections horizontal lines class include sections member data called attrib utesin uml memberfunctions called operations associationsclasses kinds relationships classes times1are association connecting rectangles kind class relationship generalization chapter  inheritance constitutes association conceptually real entities represented classes program kind obvious relationship drivers cars books libraries race horses race tracks entities classes program association   ch08       times2 cppprogram class time12is associatd class time24becausewe converting objects class objects class association implies objects classes classes kind relationship typically classes object class calls member function operation object class association exist attribute class object class times1pr ogram object time12class called t12 calls conversion routine operator time12 object t24of time24class main statementtime12 t12 t24 convert time24 time12such represented association classes navigabilitywe add openarrowhead direction navigabilityof association aswe closed arrowheads meaning time12callstime24 arrow points time12totime24 called unidirectional association goesone classes called operation arrowheadson ends called bidirectional association things uml navigability arrows areoptional pitfalls operator overloading conversionoperator overloading type conversions opportunity create amounts language care objects user defined classes isoverloaded statement care variables basic data types ability redefine building blocks language blessing listing intuitive readable oppositeeffect making listing obscure hard understand guidelines meaningsuse overloaded operators perform operations performed basic data types overload sign perform subtraction listings comprehensible chapter   ch08       overloading operator assumes sense perform operation objects class overload operator class result ofadding objects class xshould meaning addition chapter overload operator english distanceclass adding distancesis meaningful overloaded stringclass interpret addition strings placing string form intuitively satisfying interpretation classes reasonable talk adding objects add objects class called employeethat held personal data syntaxuse overloaded operators basic types alphaandbetaare basic types assignment operator statement alpha beta setsalphato sum alphaandbeta overloaded version operator analogous thing asalpha alpha beta overloaded overload arithmetic operator consistency overload prevent confusion syntactical characteristics operators changed discovered overloada binary operator unary operator vice versa restraintremember overloaded operator unfamiliar listing considerable statement number overloaded operators grows large operators nonintuitive ways point lost reading listing harder easier overloaded operators sparingly usage obvious doubt function overloaded operator function state purpose write function left string calling getleft overload operator thing operator overloading operator overloading35909  ch08       avoid ambiguitysuppose argument constructor conversion operator perform conversion time24totime12 compiler conversion compiler situation signal error avoid conversion operators overloadedthe operators overloaded member access dot operator scope resolution operator conditional operator pointer member operator whichwe encountered overloaded case wondered create operators overload existing operators overloaded keywords explicitandmutablelet twounusual keywords explicitandmutable effects grouped modify class members explicitkeyword relates data conversion mutablehasa subtle purpose preventing conversions explicitthere somespecific conversions decided good thing steps installing conversion operators argument constructors time1and time2examples conversions happen actively discourage conversion prevents unpleasant surprises easy prevent conversion performed conversion operator define operator things easy constructors construct objects single type implicit conversions argument constructor situations standard includes keyword explicit solve problem declaration argument constructor explicitexample program based theenglconprogram showshow explicit cpp include iostream namespace std class distance english distance classchapter   ch08       private const float mtf meters feet int feet float inches public args constructordistance feet  inches   mtf  f explicit arg constructorexplicit distance float meters mtf  f float fltfeet mtf meters feet int fltfeet inches  fltfeet feet void showdist display distance cout feet inches int main void fancydist distance declaration distance dist1  f  arg constructor convert meters distance distance dist1  f error ctor explicitcout ndist1 dist1 showdist float mtrs  f cout ndist1 fancydist mtrs error ctor explicitreturn  void fancydist distance cout feet inches showdist cout endl program includes function fancydist embellishes output distanceobject printing phrase feet inches feet inches figures argument function distancevariable fancydist avari problem operator overloading operator overloading36109  ch08       tricky action prevent fancydist variable type floatas argument fancydist mtrs compiler realize wrong type conversion operator finding distanceconstructor takes type floatas argument arrange constructor convert floattodistanceand pass distanceval function implicitconversion intended makepossible constructor explicit prevent implicit conversions check removing comment symbol fancydist program compiler perform conversion explicit keyword perfectly legal explicit constructor note form object initialization equal signdistance dist1  f form parenthesesdistance dist1  f work alwayshas changingconstobject data mutableordinarily create constobject chapter  guarantee member data changed situation occasionally arises create constobjects specific member data item modified object constness imagine window kind windows programs commonly draw screen features window scrollbars menus ownedby window ownership common programming situations greater degree independence object attribute situation object remain unchanged owner change scrollbar retains size color orientation ownership transferred window bank sells mortgage bank terms ofthe mortgage owner chapter   ch08       create constscrollbars attributes remain unchanged ownership mutablekeyword mutable programshows mutable cpp include iostream include string namespace std class scrollbar private int size constness mutable string owner relevant constnesspublic scrollbar int string size owner void setsize int size size void setowner string const owner owner int getsize const returns size return size string getowner const returns owner return owner int main const scrollbar sbar  window1 sbar setsize  const objsbar setowner window2 toocout sbar getsize sbar getowner endl return  thesizeattribute represents scrollbar data modified constobjects theownerattribute change object const permit mutable main create constobjectsbar size modified owner setowner function constobject attributes modified situation sbaris logical constness theory modified practice limited operator overloading operator overloading36309  ch08       summaryin chapter normal operators meanings applied user defined data types keyword operatoris overload operator operator adopt meaning supplied programmer closely operator overloading issue type conversion conversions place user defined types basic types approaches conversions argument constructor basic type user defined type conversion operator converts user defined type basic type user defined type converted approach table   summarizes conversions table8 type conversionsroutine destinationroutine source basic basic built conversion operators basic classconstructorn class basicn aconversion operator class classconstructorconversion operator constructor keyword explicitcannot implicit data conversion situations data member keyword mutablecan changed object const uml class diagrams classes relationships classes association represents conceptual relationship real objects program classes represent associations direction class called navigability questionsanswers questions appendix  operator overloading making operators work objects operators handle meanings existing operators making operators  assuming class xdoes overloaded operators write statement subtracts object class object places result chapter   ch08        assuming class xincludes routine overload operator write statement perform task question   true false operator overloaded  write complete definition overloaded operator counterclass thecountpp1example incrementing count decrements  arguments required definition overloaded unary operator  assume class cwith objects obj1 obj2 obj3 statement obj3 obj1 obj2to work correctly overloaded operator musta arguments turn create named temporary object object member operand  write complete definition overloaded operator distanceclass fromtheenglplusexample add to feetmember data statements dist1  repeat question  statements dist2 dist1  prefix form overloaded operator differently postfix form  declarators ways add string objects void add string s1 string string operator string match declarator selection function add matches _________ return type void matches _________ argument s1 matches _________ argument matches _________ object function member matches _________ argument object operator memberc operator return type string match itemoperator overloading operator overloading36509  ch08        true false overloaded operator requires argument number operands  overload arithmetic assignment operator result object operator object left operator object operator member returned  write complete definition overloaded operator works stringclass strplusexample changing operand uppercase library function toupper header file cctype takes argument character changed returns changed character character change  convert user defined class basic type built conversion operator argument constructor overloaded operator conversion operator member class  true false statement obja objb compiler error objects ofdifferent classes  convert basic type user defined class built conversion operator argument constructor overloaded operator conversion operator member class  true false defined constructor handle definitions aclass obj intvar statements obj intvar  objais class objbis class obja objb youwant conversion routine class type conversion routine  true false compiler object overload operator perform divi sion  uml class diagram association arises classes program class descended classes global variable class calls member function class chapter   ch08        uml member data items called _________ member functions called ___________  true false rectangles symbolize classes rounded corners  navigability class class object class operation object class relationship class class objects class class messages class received class exercises answers starred exercises appendix  distanceclass englplusprogram chapter add overloaded operator subtracts distances statements dist3 dist1 dist2 assume operator subtract larger number smaller negative distances allowed  write program substitutes overloaded operator overloaded operatorin strplusprogram chapter operator statements s1 wheres2is concatenated s1and result left s1 operator permit operation calculations s3 s1  modify timeclass exercise  chapter  function add_time overloaded operator add times write program test class  create class intbased exercise  chapter  overload integer arithmetic operators operate objects type int result arithmetic operation exceeds normal range ints  bit environment         operator print warning terminate program data type mistakes caused arithmetic flow unacceptable hint facilitate checking overflow perform calculations type long double write program test class  augment timeclass referred exercise  include overloaded increment decrement operators operate prefix postfix notation return values add statements main test operators operator overloading operator overloading36709  ch08        add timeclass exercise  ability subtract time values overloaded operator multiply time number type float usingthe overloaded operator  modify fractionclass function fraction calculator exercise  chapter  overloaded operators addition subtraction multiplication division remember rules fraction arithmetic exercise  chapter  loops decisions overload comparison operators exit loop user enters     values input fractions modify lowterms function returns argument reduced lowest terms arithmetic functions applied answer returned  modify bmoneyclass exercise  chapter  arrays strings include arithmetic operations performed overloaded operators bmoney bmoney bmoneybmoney bmoney bmoney bmoney bmoney long double price widget times number widgets long double bmoney bmoney total price divided price widget bmoney bmoney long double total price divided number widgets notice operator overloaded compiler distinguish usages arguments remember easy perform arithmetic operations bmoneyobjects performing operation longdoubledata main program asks user enter money strings floating point number carry operations display happen loop user enter numbers desired money operations sense bmoney bmoneydoesn represent real thing square money add bmoneytolongdouble dollars widgets impossible compile illegal operations include conversion operators bmoneytolong doubleorlong doubletobmoney write expression bmon2 bmon1 widgets sensethen compiler automatically convert widgets bmoneyand carry addition compiler flag conversions errors making easier catch conceptual mistakes conversion constructors explicit plausible money operations perform overloaded operators require object operator left long double bmoney bmoney rightlong double bmoney bmoney rightwe learn handle situation discuss friend functions chapter  chapter   ch08        augment safearayclass arrover program chapter usercan upper lower bound array indexes running   overloaded subscript operator check time array accessed ensure bounds add argument constructor specifies upper lower bounds learned allocate memory dynamically member data array starts  runs  map indexes safearayintodifferent indexes real intarray client selects range   map range arr  toarr   math buffs create class polarthat represents points plain polarcoordinates radius angle create overloaded operatorfor addition polarquantities adding points plain accomplished adding coordinates adding coordinates coordinates answer convert sets polar coordinates rectangular coordinates add convert rectangular representation polar  remember sterlingstructure exercise  chapter  programming basics exercise  chapter  places turn class pounds type long shillings type int pence type int data items create member functions argument constructor argument constructor type double converting pounds argument constructor pounds shillings pence getsterling pounds shillings pence user format    putsterling display pounds shillings pence format    addition sterling sterling overloaded operator subtr action sterling sterling overloaded operator multiplication sterling double overloaded operator div ision sterling sterling overloaded operator div ision sterling double overloaded operator operatordouble convert double perform arithmetic add object data separately add pence carry add shillings carry easier conversion operator convert sterlingobjects type double perform arithmetic thedoubles convert sterling overloaded operator operator overloading operator overloading36909  ch08       sterling sterling operator sterling return sterling double sterling pounds shillings pence double creates temporary doublevariables derived object function member derived argument doublevari ables arethen result converted sterlingand returned notice philosophy sterlingclass bmoneyclass sterling conversion operators ability catch illegal math operations gaining simplicity writing overloaded math operators  write program incorporates bmoneyclass exercise  sterlingclass exercise  write conversion operators convert bmoneyandsterling assuming pound    equals fifty dollars   approximate exchange rate th century british empire height pounds shillings pence format write main program user enter currency converts currency displays result minimize modifications existing bmoneyandsterlingclasses chapter   ch08       chapter9inheritancein chapter derived class base class373 derived class constructors380 overriding member functions382 function  inheritance english distanceclass384 class hierarchies388 inheritance graphics shapes393 public private inheritance396 levels inheritance399 multiple inheritance403 privatederivation empmult  ambiguity multiple inheritance413 aggregation classes classes414 inheritance program development420   ch09       chapter inheritance powerful feature object oriented programming classes inheritance process creating classes called derived classes fro mexisting orbaseclasses derived class inherits capabilities base class add embellishments refinements base class unchanged process inheritance relationship figure9  figure9 inheritance arrow figure   opposite direction expect pointed label inheritance themore common approach point arrow derived class base class derived arrow   ch09       inheritance essential oop big payoff permits code reusability base class written debugged touched inheritance adapted work situations reusing existing code saves time money increases program reliability inheritance original conceptu alization programming problem design program result reusability ease distributing class libraries programmer class created person company modifying derive classes suited situations examine features inheritance specific instances inheritance work derived class base classremember countpp3example chapter  operator overloading program class counteras general purpose counter variable count initialized  number constructors incremented operator read get_count operator suppose worked long hard counterclass operate theway pleased thing decrement count counting people entering bank increment count decrement count represents number people inthe bank moment insert decrement routine directly source code counterclass reasons counterclass works undergone hours testing debugging exaggeration case true larger complex class start fooling source code counter testing process carried foul spend hours debugging code worked fine modified situations reason modifying counterclass access source code distributed class library discuss issue chapter  multifile programs avoid problems inheritance create class based counter withoutmodifyingcounteritself listing counten includes class countdn adds decrement operator counterclass inheritance9inheritance   ch09       counten cpp inheritance counter class include iostream namespace std class counter base class protected note privateunsigned int count countpublic counter count  arg constructor counter int count  arg constructor unsigned int get_count const return count return count counter operator incr count prefix return counter count class countdn public counter derived class public counter operator decr count prefix return counter count int main countdn class countdncout nc1 get_count display increment  timescout nc1 get_count display decrement twicecout nc1 get_count display cout endl return  listing starts counterclass small exception changed appearance countpp3 notice simplicity modeled program postfixprogram incorporated overloaded operator provide postfix notation chapter   ch09       derived classfollowing counterclass listing specification class countdn thisclass incorporates function operator decrements count key point countdnclass inherits features counterclass countdndoesn constructor get_count oroperator functions exist counter countdnspecifies derived counter class countdn public counterhere single colon double colon scope resolution operator keyword publicand base class counter sets relationship classes countdnis derived base class counter explore keyword publiclater generalization uml class diagramsin uml inheritance called generalization parent class general formof child class child specific version parent introduced uml chapter  big picture encountered class diagrams chapter  operator overloading generalization countenprogram figure   inheritance9inheritance countercountcounter counter int get_count operator countdnoperator figure9 uml class diagram counten   ch09       uml class diagrams generalization triangular arrowhead connecting parent child classes remember arrow inherited orderived oris specific version direction arrow emphasizes derived class refers tofunctions data base class base class hasno access derived class notice attributes member data operations member functions classes diagram area holds class title middle area holds attributes area operations accessing base class membersan topic ininheritance knowing member function base class objects derived class called accessibility compiler handles accessibility issue countenexample substituting base class constructorsin main countenwe create object class countdn countdn c1to created object class countdnand initialized  wait constructor countdnclass specifier entity carries initialization turns circumstances spec ify constructor derived class constructor base class countenthere constructor countdn compiler argument constructor fromcount flexibility compiler function appears regularly inheritance situations generally substitution itcan unnerving substituting base class member functionsthe object c1of countdnclass operator andget_count functionsfrom counterclass increment display count cout nc1 get_count compiler finding functions class c1is member member functions base class chapter   ch09       output counteninmain increment c1three times print decrement c1twice finally print output  initializationc1   operator constructors get_count function counterclass operator countdnclass work objects type countdn theprotectedaccess specifierwe increasedthefunctionality class modifying modifying single change counterclass data classes looked including countin counterclass earliercountpp3pr ogram privateaccessspecifier counterclass counten countis specifier protected whatdoes review access specifiers privateandpublic member function class access class members public private object declared externally invoke dot operator public members class allowed private members instance suppose object objais aninstance class function funca member function main function member statementobja funca legal funca public object objacannot invoke private members classa private members private thisisshown figure   inheritance inheritance raft additional possibilities question concerns moment member functions derived class access members base class operator incountdnaccesscountincounter answer member functions access members base class members public protected access privatemembers countpublic accessed function program eliminate advantages data hiding protectedmember otherhand accessed member functions class key class derived class accessed functions classes main situation infigure   inheritance9inheritance   ch09       figure9 access specifiers inheritance chapter class aobjaobject class accessonly public members member function class access private public members private allowed public figure9 access specifiers inheritance   ch09       table   summarizes situation table9 inheritance andaccessibility accessaccessible fromaccessible fromaccessible specifierown classderived classobjects class publicyesyesyes protectedyesyesno privateyesnono moral writing class suspect point future base class classes member data derived classes access protectedrather private ensures class inheritance ready dangers protectedyou disadvantage making class members protected written class library distributing public programmer buys library access protected members classes simply deriving classes protected members considerably secure private members avoid corrupted data safer force derived classes access data base class public functions base class ordinary main programs theprotectedspecifier leads simpler programming rely bit examples book weigh advantages protectedagainst disadvantages programs base class unchangedremember classes derived base class remains unchanged main counten define objects type counter counter object base classsuch objects behave countdndidn exist note inheritance work reverse base class objects classes derived base class objects class counter operator function countdn counter decrement class countdn counter inheritance9inheritance   ch09       terms languages base class called thesuperclass derived class called subclass writers refer base class theparent derived class asthe child derived class constructorsthere potential glitch countenprogram initialize countdnobject argument constructor counterbe answer counten compiler substitute argument constructor base class draws complex constructors definition work write set constructors derived class counten2program counten2 cpp constructors derived class include iostream namespace std class counter protected note privateunsigned int count countpublic counter count constructor args counter int count constructor arg unsigned int get_count const return count return count counter operator incr count prefix return counter count class countdn public counter public countdn counter constructor args countdn int counter constructor  arg countdn operator decr count prefix return countdn count int main chapter   ch09       countdn class countdncountdn  cout nc1 get_count displaycout nc2 get_count display increment c1cout nc1 get_count display decrement c2cout nc2 get_count display itcountdn create c2cout nc3 get_count display cout endl return  program constructors countdnclass theno argument constructor countdn counter constructor unfamiliar feature function colon construction countdn constructor counter constructor baseclass main saycountdn compiler create object type countdnand countdnconstructor initialize constructor turn counterconstructor carries work countdn constructor add additional statements case function body braces calling constructor initialization list odd sense initialize variables derived class base class statements derived base class constructors executed calling base class constructor derived class constructor starts execute accomplish statementcountdn  inmain argument constructor countdn constructor calls argument constructor base class countdn int counter argument passed counter inheritance9inheritance   ch09       construction argument cto passed countdn tocounter itis initialize object inmain initializing c1andc2objects increment decrement print argument constructor assignment statement countdn overriding member functionsyou member functions derived class override base class calls program work objects base derived classes based stakaray program chapter  arrays strings program modeled stack simple data storage device allowed push integers stack pop stakaray potential flaw push items stack program bomb data memory array pop items meaningless reading data memory locationsoutside array cure defects created class stack2 derived stack objects ofstack2behave stack warned attempt push items stack pop item stack listing staken staken cpp overloading functions base derived classes include iostream namespace std include process exit class stack protected note privateenum max  size stack array int max stack array integers int stackpublic stack constructor  void push int var number stack var int pop number stack return chapter   ch09       class stack2 public stack public void push int var number stack max  error stack cout nerror stack exit  stack push var push stack class int pop number stack  error stack cout nerror stack exit  return stack pop pop stack class int main stack2 s1 s1 push  push values stacks1 push  s1 push  cout endl s1 pop pop values stackcout endl s1 pop cout endl s1 pop cout endl s1 pop oops popped cout endl return  program stackclass stakaray program data members protected function thestack2class twofunctions push andpop functions names argument return types functions stack functions main statements s1 push  inheritance9inheritance   ch09       compiler push functions rule function exists base class derived class function derived class executed true objects derived class objects base class derived class base class functions derived class function overridesthe base class function preceding state ment s1is object class stack2 push function stack2will executed onein stack thepush function stack2checks stack displays error message program exit calls push function stack pop function stack2checks stack prints error message exits calls pop function stack inmain push items stack pop pop elicits anerror message3322  error stack emptyand terminates program scope resolution overridden functionshow push andpop instack2accesspush andpop instack scope resolution operator statementsstack push var andreturn stack pop statements push andpop functions stackare called scope resolution operator compiler push andpop functionsin stack2were calling case lead program failure scope resolution operator tospecify class function member inheritance english distanceclasshere morecomplex inheritance book programs english distanceclass assumed distances represented positive case architectural drawings chapter   ch09       measuring water level pacific ocean tides varied represent negative feet inches quantities tide levels lower low water called minus tides prompt clam diggers advantage larger area exposed beach derive class distance class add single data item feet inches measurements sign positive negative add sign modify member functions work signed distances listing englen englen cpp inheritance english distances include iostream namespace std enum posneg pos neg sign distsign class distance english distance class protected note privateint feet float inches public arg constructordistance feet  inches    arg constructor distance int float feet inches void getdist length user cout nenter feet cin feet cout enter inches cin inches void showdist const display distance cout feet inches class distsign public distance adds sign distance private posneg sign sign pos negpublic arg constructordistsign distance base constructor sign pos set sign inheritance9inheritance   ch09         arg constructordistsign int float posneg sg pos distance base constructor sign sg set signvoid getdist length user distance getdist base getdist char sign user cout enter sign cin sign pos neg void showdist const display distance cout sign pos sign distance showdist int main distsign alpha arg constructor alpha getdist alpha userdistsign beta     arg constructor distsign gamma    neg  arg constructor display distancescout nalpha alpha showdist cout nbeta beta showdist cout ngamma gamma showdist cout endl return  distsignclass adds functionality deal signed numbers distanceclass program previous programs data protected case private derived class functions accesses safer protected derived class function access chapter   ch09       operation englenthemain program declares signed distances alphafromthe user initializes betato    gammato    output useparentheses sign avoid confusion hyphen separating feet inches sample output enter feet enter inches   enter sign alpha    beta    gamma    thedistsignclass derived distance adds single variable sign typeposneg signvariable hold sign distance posnegtype defined enumstatement tohave values posandneg constructors distsigndistsignhas twoconstructors mirroring distance takes arguments takes arguments optional argument constructor sign posorneg default pos constructors define variables objects type distsignin ways constructors distsigncall constructors distanceto set feet inches values set signvariable argument constructor sets topos constructor sets posif argument provided posorneg argument arguments ftandin passed main constructor distsign simplyforwarded constructor distance member functions distsignadding sign distancehas consequences member functions getdist function distsignclass user sign feet inches values showdist function display sign feet inches functions functions distance linesdistance getdist anddistance showdist inheritance9inheritance   ch09       calls display feet inches values body getdist andshowdist indistsignthen deal sign abetting inheritancec designed efficient create derived class parts base class easy parts data constructors member functions add functionality create improved class notice englenwe duplicate code functions baseclass class hierarchies examples chapter inheritance add functionality existing class inheritance purpose original design program models database employees widget company simplified situation kinds employees represented managers manage scientists perform develop widgets laborers operate dangerous widget stamping presses database stores employee identification number employees matter category managers stores titles golf club dues scientists stores number scholarly articles published laborers additional data names numbers program starts base class employee class handles employee employee number class classes derived manager scientist andlaborer managerandscientistclasses additional thesecategories employee member functions tohandle figure   chapter   ch09       figure9 uml class diagram employ listing employ employ cpp models employee database inheritance include iostream namespace std const int len  maximum length names class employee employee class private char len employee unsigned long number employee numberpublic void getdata cout enter cin cout enter number cin number inheritance9inheritance employee namenumberscientistpublications managertitleclub dueslaborer10  ch09       void putdata const cout cout number number class manager public employee management class private char title len vice president double dues golf club duespublic void getdata employee getdata cout enter title cin title cout enter golf club dues cin dues void putdata const employee putdata cout title title cout golf club dues dues class scientist public employee scientist class private int pubs number publicationspublic void getdata employee getdata cout enter number pubs cin pubs void putdata const employee putdata cout number publications pubs class laborer public employee laborer class chapter   ch09       int main manager m1 scientist s1 laborer l1 cout endl data employeescout nenter data manager  m1 getdata cout nenter data manager  getdata cout nenter data scientist  s1 getdata cout nenter data laborer  l1 getdata display data employeescout ndata manager  m1 putdata cout ndata manager  putdata cout ndata scientist  s1 putdata cout ndata laborer  l1 putdata cout endl return  themain program declares objects classes managers scientist laborer employees type defined output large calls getdata member functions obtaininformation employee putdata function display sample interaction employ user supplies data enter data manager enter wainsworthenter number  enter title presidentinheritance9inheritance   ch09       enter golf club dues enter data manager enter bradleyenter number  enter title vice president enter golf club dues enter data scientist enter hauptman frenglish enter number  enter number pubs enter data laborer enter jones enter number the programthen plays data manager name wainsworth number  title president golf club dues data manager name bradley number  title vice president golf club dues data scientist name hauptman frenglishnumber  number publications data laborer name jones number a sophisticated program array container arrange data large number employee objects accommodated abstract base classnotice define objects base class employee general class sole purpose base classes derived thelaborerclass operates identically employeeclass additional data functions laborerclass unnecessary making separate class emphasize classes descended source employee future decided modify laborerclass change declaration foremployee chapter   ch09       classes deriving classes employeeis employ looselycalledabstract classes meaning actual instances objects class created term abstract precise definition atin chapter  virtual functions constructors member functionsthere constructors base derived classes compiler creates objects classes automatically encounters definitions manager m1 default constructor managercalling default constructor employee thegetdata andputdata functions employeeaccept number user display number functions called getdata andputdata themanagerandscientistclasses functions employee work inmanager getdata function asks user title golf club dues andputdata displays values scientist functions handle number ofpublications inheritance graphics shapesin circlesprogram chapter  objects classes program class represented graphics circles displayed screen kinds shapes circles squares triangles phrase kinds shapes implies inheritance relationship called shape specific kinds shapes circles squares relationship programthat robust easier understand program treats shapes unre lated shapeclass base class parent derived classes circleclass rect rectangle class tria triangle class pro grams console graphics lite functions read appendix console graphics lite appendix microsoft visual appendix borland builder specific compiler learn build graphics filesinto program listing multshap multshap cpp balls rects polygons include msoftcon graphics functions class shape base classinheritance9inheritance   ch09       protected int xco yco coordinates shape color fillcolor color fstyle fillstyle patternpublic arg constructorshape xco  yco  fillcolor cwhite fillstyle solid_fill  arg constructorshape int int color fstyle xco yco fillcolor fillstyle void draw const set color style set_color fillcolor set_fill_style fillstyle class circle public shape private int radius xco yco centerpublic circle shape arg constr  arg constructorcircle int int int color fstyle shape radius void draw const draw circle shape draw draw_circle xco yco radius class rect public shape private int width height xco yco upper left cornerpublic rect shape height  width  arg ctor  arg ctorrect int int int int color fstyle shape height width chapter   ch09       void draw const draw rectangle shape draw draw_rectangle xco yco xco width yco height set_color cwhite draw diagonal draw_line xco yco xco width yco height class tria public shape private int height xco yco pyramidpublic tria shape height  arg constructor  arg constructortria int int int color fstyle shape height void draw const draw triangle shape draw draw_pyramid xco yco height int main init_graphics initialize graphics systemcircle cir    cblue x_fill create circlerect rec     cred solid_fill create rectangle tria tri    cgreen medium_fill create trianglecir draw draw shapesrec draw tri draw set_cursor_pos   lower left corner return  executed program produces shapes blue circle red rectangle green triangle figure   output multshap inheritance9inheritance   ch09       figure9 output themultshap program characteristics common shapes location color pattern shapeclass individual shapes specific attributes circle radius rectangle height width draw routine shapehandlesthe tasks specific shapes setting color pattern overloaded draw functionsin circle rect triaclasses care drawing specific shapes color pattern determined base class shapeis abstract class meaning instantiating object class shape shapeobject display question sense specific shape display shapeclassexists repository ofattributes actions common shapes public private inheritancec wealth ways fine tune access class members access control mechanism derived classes declared examples publicly derived classes declarations class manager public employeewhich appeared employ publickeyword statement alternatives listen keyword publicspecifies objects derived class access public member functions base class alternative keyword private keyword objects derived class access public member functions base class objects access privateorprotectedmembers class result member base class accessible objects derived class chapter   ch09       access combinationsthere possibilitiesfor access instructive program works listing pubpriv pubpriv cpp tests publicly privately derived classes include iostream namespace std class base class private int privdataa functions accessprotected rules data int protdataa public int pubdataa class public publicly derived class public void funct int privdataa error accessible protdataa pubdataa class private privately derived class public void funct int privdataa error accessible protdataa pubdataa int main int inheritance9inheritance   ch09       objb objb privdataa error accessible objb protdataa error accessible objb pubdataa public objc objc privdataa error accessible objc protdataa error accessible objc pubdataa error accessible private return  program specifies base class private protected public data items classes bandc derived bis publicly derived cis privately derived functions derived classes access protected public data base class objects derived classes access private protected members base class difference publicly derived privately derived classes objects publicly derived class bcan access public members base class objects theprivately derived class ccannot access public members derived class figure   chapter figure9 public private derivation supply access specifier creating class privateis assumed   ch09       access specifiers whathow decide private opposed public inheritance cases derived class exists offer improved specialized version base class examples derived classes instance countdnclass adds thedecrement operator counterclass managerclass specialized ver sion employeeclass cases sense objects derived class access public functions base class perform basic operation access functions derived class perform specialized operations derived class cases public derivation situations derived class created completely modifying operation base class hiding disguising original interface imagine created nice arrayclass acts array protection bounds array indexes suppose arrayclassas basis stackclass basic array derive stackfromarray users stackobjects treat arrays operator access data items objects stackshould treated stacks push andpop disguise arrayclass stackclass situation private derivation conceal arrayclass functions objects derived stackclass levels inheritanceclasses derived classes derived miniprogram idea class class public class public herebis derived cis derived process extended arbitrary number levels dcould derived concrete suppose decided add special kind laborer called foreman employ program create program employ  incorporates objects class foreman foreman kind laborer foremanclass derived laborerclass figure   inheritance9inheritance   ch09       figure9 uml class diagram employ  foremen oversee widget stamping operation supervising groups laborers responsible widget production quota group foreman ability measured percentage production quotas met quotasdata item foremanclass represents percentage listing employ  employ2 cpp multiple levels inheritance include iostream namespace std const int len  maximum length names class employee private char len employee unsigned long number employee numberpublic void getdata chapter foremanemployee scientistmanagerlaborer10  ch09       cout enter cin cout enter number cin number void putdata const cout cout number number class manager public employee manager class private char title len vice president double dues golf club duespublic void getdata employee getdata cout enter title cin title cout enter golf club dues cin dues void putdata const employee putdata cout title title cout golf club dues dues class scientist public employee scientist class private int pubs number publicationspublic void getdata employee getdata cout enter number pubs cin pubs void putdata const employee putdata cout number publications pubs inheritance9inheritance   ch09       class laborer public employee laborer class class foreman public laborer foreman class private float quotas percent quotas met successfullypublic void getdata laborer getdata cout enter quotas cin quotas void putdata const laborer putdata cout quotas quotas int main laborer l1 foreman f1 cout endl cout nenter data laborer  l1 getdata cout nenter data foreman  f1 getdata cout endl cout ndata laborer  l1 putdata cout ndata foreman  f1 putdata cout endl return  chapter   ch09       notice class hierarchy organization chart organization chart lines command class hierarchy generalizing common characteristics general class higher chart laborer general foreman specialized kind laborer laboreris foremanin classhierarchy foreman paid alaborer multiple inheritancea class derived frommore base class called multiple inheritance figure   class cis derived base classes aandb inheritance9inheritance abcfigure9 uml class diagram multiple inheritance syntax multiple inheritance single inheritance situationshown figure   relationship expressed class base class class base class class public public derived base classes cis derived listed colonin specification separated commas   ch09       member functions multiple inheritanceas ofmultiple inheritance suppose record educational experience employees employ program suppose project developed class called studentthat models students withdifferent educational backgrounds decide modifying employeeclass toincorporate educational data add data multiple inheritance studentclass thestudentclass stores school university attended highest degree received data items stored strings member functions getedu andputedu askthe user display educational relevant class employee suppose undemocratically record educational experience laborers relevant managers scientists modify managerandscientistso inherit employeeandstudentclasses figure   chapter employee studentmanagerscientistlaborerfigure9 uml class diagram empmult   ch09       miniprogram relationships leaves class student class employee class manager private employee private student class scientist private employee private student class laborer public employee featuring considerably listing empmult empmult cpp multiple inheritance employees degrees include iostream namespace std const int len  maximum length names class student educational background private char school len school university char degree len highest degree earnedpublic void getedu cout enter school university cin school cout enter highest degree earned cout highschool bachelor master phd cin degree void putedu const cout school university school cout highest degree earned degree class employee private char len employee unsigned long number employee numberinheritance9inheritance   ch09       public void getdata cout enter cin cout enter number cin number void putdata const cout cout number number class manager private employee private student management private char title len vice president double dues golf club duespublic void getdata employee getdata cout enter title cin title cout enter golf club dues cin dues student getedu void putdata const employee putdata cout title title cout golf club dues dues student putedu class scientist private employee private student scientist private int pubs number publicationspublic void getdata employee getdata cout enter number pubs cin pubs student getedu chapter   ch09       void putdata const employee putdata cout number publications pubs student putedu class laborer public employee laborer int main manager m1 scientist s1 laborer l1 cout endl cout nenter data manager  data m1 getdata employeescout nenter data scientist  s1 getdata cout nenter data scientist  getdata cout nenter data laborer  l1 getdata cout ndata manager  display data form1 putdata employeescout ndata scientist  s1 putdata cout ndata scientist  putdata cout ndata laborer  l1 putdata cout endl return  inheritance9inheritance   ch09       thegetdata andputdata functions managerandscientistclasses incorporatecalls functions studentclass student getedu andstudent putedu routines accessible managerandscientistbecause classesare descended fromstudent sample interaction empmult enter data manager enter bradleyenter number  enter title vice president enter golf club dues  enter school university yale enter highest degree earned highschool bachelor master phd bachelor senter data scientist enter twilling enter number  enter number pubs  enter school university mit enter highest degree earned highschool bachelor master phd phdenter data scientist enter yang enter number  enter number pubs  enter school university stanford enter highest degree earned highschool bachelor master phd master senter data laborer enter jones enter number as employ andemploy  examples program displays roughly form chapter   ch09       privatederivation empmult themanagerandscientistclasses empmult privately derived employeeandstudentclasses public derivation objects managerandscientistnever routines employeeandstudentbase classes laborerclass publicly derived employer member functions relies thosein employee constructors multiple inheritanceempmult noconstructors constructors handled multiple inheritance imagine writing program building contractors program models lumber supply items class represents quantity lumber type   foot long construction grade  s class store kinds data lumber item length   store number pieces lumber unit cost store description lumber talking parts nominal dimensions cross lumber inches instance lumber  inches  inches metric folks   called written   grade lumber rough cut construction grade surfaced sides convenient create typeclassto hold data class incorporates member data nominal dimensions grade lumber expressed strings  andconstruction member functionsget informationfrom user display distanceclass previous examples store length finally create lumberclass inherits typeanddistanceclasses listing englmult englmult cpp multiple inheritance english distances include iostream include string namespace std class type type lumber private string dimensions string grade inheritance9inheritance   ch09       public arg constructortype dimensions grade  arg constructortype string string dimensions grade void gettype type user cout enter nominal dimensions x4 cin dimensions cout enter grade rough const cin grade void showtype const display type cout dimensions dimensions cout grade grade class distance english distance class private int feet float inches public arg constructordistance feet  inches   constructor args distance int float feet inches void getdist length user cout enter feet cin feet cout enter inches cin inches void showdist const display distance cout feet inches class lumber public type public distance private int quantity number pieces double price price piecepublic constructor args lumber type distance quantity  price   chapter   ch09       constructor  args lumber string string args typeint float args distanceint float prc args data type type ctor distance distance ctor quantity price prc initialize data void getlumber type gettype distance getdist cout enter quantity cin quantity cout enter price piece cin price void showlumber const type showtype cout length distance showdist cout price quantity pieces price quantity int main lumber siding constructor args cout nsiding data siding getlumber siding user constructor  args lumber studs x4 const      f display lumber datacout nsiding siding showlumber cout nstuds studs showlumber cout endl return  major feature program constructors derived class lumber constructors constructors typeanddistance inheritance9inheritance   ch09       argument constructorthe argument constructor typelooks type strcpy dimensions strcpy grade constructor fills dimensionsandgradevari ables theuser aware attempt display data uninitialized lumber object familiar argument constructor distanceclass distance feet  inches   argumentconstructor lumbercalls constructors lumber type distance quantity  price   names base class constructors follow colon separated commas thelumber constructor invoked base class constructors type anddistance executed quantityandpriceattributes alsoinitialized multi argument constructorshere argumentconstructor type type string string dimensions grade constructor copies string arguments dimensions grade member data items constructor distance familiar previous programs distance int float feet inches constructor lumbercalls constructors supply values arguments addition arguments quantity lumber unit price constructor arguments calls constructors takes arguments initializes data items lumber string string args typeint float args distanceint float prc args data type type ctor distance distance ctor quantity price prc initialize data chapter   ch09       ambiguity multiple inheritanceodd sorts problems surface situations involving multiple inheritance common base classes functions class derived base classes function objects derived class access correct base class function function insufficient compiler figure functions meant ambigu thatdemonstrates situation ambigu cpp demonstrates ambiguity multiple inheritance include iostream namespace std class public void cout class class public void cout class class public public int main objc object class objc ambiguous compileobjc objc return  problem resolved scope resolution operator class function lies objc refers version aclass objc inheritance9inheritance   ch09       refers function bclass stroustrup appendix bibliography calls dis ambiguation kind ambiguity arises derive class classes derived class creates diamond shaped inheritance tree diamondprogramshows thislooks diamond cpp investigates diamond shaped multiple inheritance include iostream namespace std class public void func class public class public class public public int main objd objd func ambiguous compile return  classesbandcare derived class class dis derived multiple inheritance bandc trouble starts access member function class afrom objectof class objdtries access func bandccontain copy func inherited compiler decide copy signals error advanced ways coping problem fact ambiguities experts recommend avoiding multiple inheritance altogether programs considerable experience aggregation classes classes discuss aggregation directly inheritance aggregation inheritance class relationships specialized associations instructive compare contrast chapter   ch09       class bis derived inheritance class bis kind ofa isbecausebhas characteristics addition starling kind bird starling characteristics shared birds wings feathers distinctive characteristics dark iridescent plumage reason inheritance called kind relationship aggregation called relationship library book invoice item aggregation called relationship book library object oriented programming aggregation occur object attribute case object class ais attribute class class class obja define obja object class uml aggregation considered special kind association hard association aggregation safe relationship association class acontains objects class organizationally superior class good candidate aggregation company aggregation employees stamp collection aggregation stamps aggregation association uml class diagrams association open diamond shaped arrowhead figure   inheritance9inheritance library publications stafffigure9 uml class diagram showing aggregation   ch09       aggregation empcontprogram rearrange empmult program aggregation inheritance empmult themanagerandscientistclasses derived employeeandstudentclasses theinheritance relationship program empcont managerandscientistclassescontain instances employeeandstudentclasses attributes aggregation relationship shownin figure   chapter managerscientistemployee studentlaborerfigure9 uml class diagram empcont miniprogram relationships class student class employee class manager student stu stu object class student employee emp emp object class employee class scientist student stu stu object class student employee emp emp object class employee class laborer employee emp emp object class employee   ch09       scale listing empcont empcont cpp containership employees degrees include iostream include string namespace std class student educational background private string school school university string degree highest degree earnedpublic void getedu cout enter school university cin school cout enter highest degree earned cout highschool bachelor master phd cin degree void putedu const cout school university school cout highest degree earned degree class employee private string employee unsigned long number employee numberpublic void getdata cout enter cin cout enter number cin number void putdata const cout cout number number class manager managementinheritance9inheritance   ch09       private string title vice president double dues golf club dues employee emp object class employee student stu object class studentpublic void getdata emp getdata cout enter title cin title cout enter golf club dues cin dues stu getedu void putdata const emp putdata cout title title cout golf club dues dues stu putedu class scientist scientist private int pubs number publications employee emp object class employee student stu object class studentpublic void getdata emp getdata cout enter number pubs cin pubs stu getedu void putdata const emp putdata cout number publications pubs stu putedu class laborer laborer chapter   ch09       private employee emp object class employeepublic void getdata emp getdata void putdata const emp putdata int main manager m1 scientist s1 laborer l1 cout endl cout nenter data manager  data m1 getdata employeescout nenter data scientist  s1 getdata cout nenter data scientist  getdata cout nenter data laborer  l1 getdata cout ndata manager  display data form1 putdata employeescout ndata scientist  s1 putdata cout ndata scientist  putdata cout ndata laborer  l1 putdata cout endl return  thestudentandemployeeclasses empcontas empmult managerandscientistclasses inheritance9inheritance   ch09       composition stronger aggregation composition stronger form aggregation characteristics aggregation belong lifetime lifetime car composed doors things doors belong car born die car room composed floor ceiling walls aggregation relationship composition consists relationship uml diagrams composition aggregation diamond shaped arrowhead solid open figure   chapter cardoorsenginefigure9 uml class diagram showing composition single object class composition car engine inheritance program development program development process practiced decades programmers fundamentally altered object oriented programming classes oop inheritance programmer creates class distanceclass complete set member functions arithmetic operations user defined data type   ch09       programmer likes distanceclass thinks improved signed distances solution create class distsignin englenexamp derived distancebut incorporates extensions implement signed distances programmers write applications distsignclass programmer access source code distancemember functions programmers access source code distsign software reusability feature modify extend work work notice distinction software tool developers application writers blurred programmer creates general purpose programming tool distanceclass programmer creates specialized version class distsignclass programmers cand create applications tool developer applications developers case oop making programming scene flexible time complex chapter  class divided client accessible distributed object form programmers distribution source code summarya class called derived class inherit features class called base class derived class add features specialized version base class inheritance powerful extend capabilities existing classes design programs hierarchical relationships accessibility base class members derived classes objects derived classes issue data functions base class prefaced keyword pro tectedcan accessed derived classes objects including objects derived classes classes publicly privately derived base classes objects publicly derived class access public members base class objects privately derived class class derived base class called multiple inheritance aclass contained class uml inheritance called generalization relationship represented class diagrams open triangle pointing base parent class inheritance9inheritance   ch09       aggregation relationship class objects class aggregation represented uml class diagrams open diamond pointing pair composition strong form aggregation arrowhead issolid open inheritance permits reusability software derived classes extend capabilities base classes modify access source code base class leads flexibility software development process wider range roles software developers questionsanswers questions appendix  inheritance general classes specific classes pass arguments objects classes add features existing classes rewriting improve data hiding encapsulation  child class _________from base class  advantages inheritance include providing class growth natural selection facilitating class libraries avoiding rewriting code providing conceptual framework  write specifier class bosworththat publicly derived classalphonso  true false adding derived class base class requires fundamental base class  accessed member function derived class data functions base class publicor_________  base class member function basefunc derived class function object derived class access basefunc  assume classes mentioned question  class alphonsocontain memberfunction called alfunc write statement object bosworthobjof classbosworthto access alfunc chapter   ch09        true false constructors derived class objects derived class constructors base class  base class derived class include member function member function called object derived class assuming scope resolution operator  write declarator argument constructor derived class bosworthofquestion  calls argument constructor base class alphonso  scope resolution operator limits visibility variables function tells base class class derived specifies class resolves ambiguities  true false class objects created  assume class dervthat derived base class base write declarator derived class constructor takes argument passes argu ment constructor base class  assume class dervthat privately derived class base object class dervlocated main accessa public members derv protected members derv private members derv public members base protected members base private members base  true false class dcan derived class derived class derived class  class hierarchy relationships organization chart describes relationships describes kind relationships relationships family tree  write specifier class tirethat derived class wheelandfrom class rubber inheritance9inheritance   ch09        assume class dervderived base class base classes memberfunctionfunc takes arguments write statement member function ofdervthat calls func base class  true false illegal objects class members class  uml inheritance called _____________  aggregation stronger form instantiation stronger form generalization stronger form composition relationship  true false arrow representing generalization points specific class  composition ___________ form ____________ exercises answers starred exercises appendix  imagine publishing company markets book audiocassette versions work create class publicationthat stores title string price type float publication class derive classes book adds count typeint tape adds playing time minutes type float threeclasses getdata function data user keyboard putdata function display data write main program test bookandtapeclasses creating instances user data getdata displaying data putdata  recall strconvexample chapter  stringclass flaw protect objects initialized characters theszconstant  definition string string surely exceed width screen constant represents strarray sto overflow unpredictable consequences crashing stringas base class derive class pstring protected string prevents buffer overflow long string constant definition constructor derived class copy characters strif string constant islonger copy entire constant shorter write main program test lengths strings chapter   ch09        start publication book tapeclasses exercise  add base class salesthat holds array floats record dollar sales publicationfor months include getdata function salesamounts user putdata function display sales figures alter bookandtapeclasses derived publicationandsales object class bookortapeshould input output sales data data write amain function create bookobject tapeobject exercise input output capabilities  assume publisher exercises   decides add distribute books computer disk reading laptop add diskclass bookandtape derived publication diskclass shouldincorporate member functions classes data item unique class disk type dvd enumtype store item user select type typing cord  derive class called employee2from employeeclass employ program thischapter class add type doubledata item called compensation andalso enumtype called periodto employee paid hourly weekly monthly simplicity change manager scientist laborerclassesso derived employee2instead employee note circumstances spirit oop create separate base class calledcompensationand classes manager2 scientist2 laborer2 multiple inheritance derive classes original manager scientist andlaborerclasses compensation original classes modified  start arrover  program chapter  safearayclass inthat program inheritance derive capability user upper lower bounds array constructor exercise  chapter  inheritance derive class safehilo modifying original class  start counten2 program chapter increment decrement counter prefix notation inheritance add ability postfix notation incrementing decrementing chapter  description postfix notation  operators computer languages visual basic select parts existing string assign strings standard stringclassoffers approach inheritance add capability pstringclass ofexercise  derived class pstring2 incorporate functions left mid inheritance9inheritance   ch09       left s1 assigned leftmost characters s1s2 mid s1 assigned middle characters s1 starting character number leftmost character  s1 assigned rightmost characters s1you forloops copy parts s1 character character temporarypstring2object returned extra credit functions return reference left equal sign change parts existing string  start publication book tapeclasses exercise  suppose add publication books tapes publicationclass derive class called publication2that includes member data change bookandtapeso derived publication2instead publication member functions user input output dates data dates dateclass exercise  chapter  stores ints month day year  kind manager empmult program chapter company executives managers managerclass derive class calledexecutive assume executive high kind manager addi tional data executiveclass size employee yearly bonus number shares company stock held stock option plan add member functions data items input displayed othermanagerdata  situations require pairs numbers treated unit screen coordinate horizontal component vertical component represent pair numbers structure called pairthat comprises intmember variables assume store pairvariables stack place pair integers stack single push function structure type pairas argument retrieve pair single pop function return structure type pair start thestack2class staken program chapter derive class called pairstack class members overloaded push andpop functions pairstack push function calls stack2 push store integers pair pairstack pop functionwill calls stack2 pop order chapter   ch09        amazing british pounds shillings pence money notation    exercise  chapter  structures story penny divided halfpennies farthings farthing worth   penny halfpenny coin farthing coin halffarthing coin fortunately expressed numerically eighths penny   penny halffarthing   penny farthing   penny farthing half   penny halfpenny pronounced ha penny   penny halfpenny halffarthing   penny halfpenny farthing   penny halfpenny farthing half assume add sterlingclass ability handle fractionalpennies format     or      thehyphen separates fraction pennies derive class called sterfracfromsterling perform fourarithmetic operations sterling quantities include eighths penny mem ber data intindicating number eighths eighths overload functions sterlingto handle eighths user type fraction lowest terms display fractions lowest terms scale fractionclass exercise  chapter  extra credit inheritance9inheritance   ch09         ch09       chapter10pointersin chapter addresses pointers430 address operator  pointers arrays440 pointers functions443 pointers type strings452 memory management newanddelete458 pointers objects464 linked list example469 pointers pointers474 parsing example479 simulation horse race484 uml state diagrams490 debugging pointers492   ch10       chapter pointers hobgoblin programming seldom simple ideainspired perplexity fear chapter demystify pointers practical programming pointersfor common accessing array elements passing arguments function function modify original argument passing arrays strings functions obtaining memory creating data structuressuch linked lists pointers feature languages visual basic pointers references sort watered pointers emphasis pointers lot absence preceding chapters demonstrates operations pointers carried ways array elements accessed array nota tion pointer notation difference function modify arguments passed reference passed pointers situations pointers provide essential tool increasing power notable creation data structures linked lists binary trees fact key features virtual functions newoperator thispointer discussed chapter  virtual functions require pointers lot programming pointers essential obtaining thelanguage chapter introduce pointers gradually starting fundamental concepts working complex pointer applications skim half chapter read sections half newanddeleteoperators accessing member functions pointers arrays pointers objects linked list objects addresses pointers ideas pointers complicated key concept byte computer memory address addresses numbers houses street numbers start     mb memory highest address    program loaded memory occupies range addresses variable function program starts address figure     ch10       figure10 memoryaddresses address operator address occupied variable address operator short program varaddr demonstrates varaddr cpp addresses variables include iostream namespace std int main int var1  define initialize int var2  variables int var3  pointers10pointers43111  ch10       cout var1 endl print addresses var2 endl variables var3 endl return  simple program defines integer variables initializes values    prints addresses ofthese variables actual addresses occupied variables program depend factors computer program running size operating programs memory reasons addresses program row output machine x8f4ffff4 address var1 x8f4ffff2 address var2 x8f4ffff0 address var3 remember address variable contents contents variables    figure   showsthe variables memory chapter figure10 addresses contentsof variables   ch10       insertion operator interprets addresses hexadecimal arithmetic prefix xbefore number usual memory addresses familiar hexadecimal number worry variable starts unique address note output address differs  bytes integers occupy  bytes memory  bit variables type char adjacent addresses charoccupies  byte type double theaddresses differed  bytes addresses descending order local variables stored stack grows downward memory global variables ascend ing addresses global variables stored heap grows upward worry considerations compiler track details confuse address operator precedes variable variable declara tion reference operator type function prototype def inition references discussed chapter  functions pointer variables addresses bythemselves limited nice things memory varaddr printing address values potential increasing programming power requires additional idea variables thathold address values variable types store characters integers floating point numbers addresses stored variable holds address called pointer variable simply pointer data type pointer variables variable address stored pointer intis type int pointer data type called pointerorptr things complicated program ptrvar sho ws syntax pointer variables ptrvar cpp pointers address variables include iostream namespace std int main int var1  integer variables int var2  pointers10pointers43311  ch10       cout var1 endl print addresses variables var2 endl endl int ptr pointer integersptr var1 pointer points var1cout ptr endl print pointer valueptr var2 pointer points var2cout ptr endl print pointer return  program defines integer variables var1andvar2 initializes values   prints addresses program defines pointer variablein lineint ptr uninitiated bizarre syntax asterisk pointer state ment defines variable ptras pointerto int vari hold addresses integer variables wrong idea general purpose pointer type holds pointers data type called type pointerwe writedeclarations pointer ptr problem compiler kind variable pointer points talk pointers arrays syntax point ers type declared char cptr pointer charint iptr pointer int float fptr pointer float distance distptr pointer user defined distance classand syntax quibbleswe note thatit common write pointer definitions asterisk closer variable type char charptr matter compiler placing asterisk type helps emphasize asterisk variable type pointer char chapter   ch10       define pointer type insert type pointed place anasterisk variable char ptr1 ptr2 ptr3 variables type char asterisk approach char ptr1 ptr2 ptr3 variables type char pointers address like0x8f4ffff4 thought pointer constant pointer ptrcan bethought pointer variable integer variable var1can assigned constantvalue  pointer variable ptrbe assigned constant x8f4ffff4 define variable holds initialize time hold garbage meaning case pointers garbage address memory pointer specific address ptrvar program ptris assigned address var1in lineptr var1 address var1 ptr program prints contained ptr sameaddress printed var1 pointer variable ptris assigned address var2 printed figure   operation ptrvar program output ptrvar x8f51fff4 address var1 x8f51fff2 address var2 x8f51fff4 ptr set address var1 x8f51fff2 ptr set address var2 summarize pointer hold address variable correct type recepta cle awaiting address point address point program code operating rogue pointer values result crashes difficult debug compiler warning moral pointer variablea valid address pointers10pointers43511  ch10       chapter figure10 changing valuesin ptr accessing variable pointed suppose variable address access contents variable mismanagement lose track variable names variables names special syntax access variable address program ptracc showshow ptracc cpp accessing variable pointed include iostream namespace std int main int var1  integer variables int var2    ch10       int ptr pointer integersptr var1 pointer points var1cout ptr endl print contents pointer  ptr var2 pointer points var2cout ptr endl print contents pointer  return  program ptrvar printing address values ptr print integer stored addressthat stored ptr output  the expression accesses variables var1andvar2is ptr occurs thetwo coutstatements asterisk variable ptrexpression called thedereference operator indirection operator thevariable pointed expression ptrrepresents variable pointed byptr ptris set address var1 expression ptrhas  var1is  ptris changed address var2 expression ptracquires  var2is  dereference operator contents ofoperator thing figure   pointer display variable perform operation perform variable directly program ptrto pointer toassign variable assign variable ptrto cpp access pointers include iostream namespace std int main int var1 var2 integer variables int ptr pointer integersptr var1 set pointer address var1 ptr  var1  var2 ptr var2 var1cout var2 endl verify var2 return  pointers10pointers43711  ch10       figure10 access pointer remember asterisk dereference operator meaning asterisk declare pointer variables dereference operator precedes variable meansvalue variable pointed asterisk declaration pointer int ptr declaration pointer int ptr  indirection variable pointed ptrusing dereference operator access stored address called indirect addressing dereferencing pointer capsulesummary learned int defines variable type int int defines pointer int assigns address variable pointer  assigns   assigns  vchapter   ch10       statements difference normal direct addressing refer variable pointer indirect addressing refer variable address programs chapter advantage pointer expression access variables access directly pointers evident access variable directly pointer voidbefore pointers work note peculiarity pointer data types ordinarily address pointer type pointer assign address floatvari pointer int ample float flovar   int ptrint flovar error assign float int exception sort general purpose pointer point data type called pointer void defined void ptr ptr point data typesuch pointers specialized passing pointers functions operate independently data type pointed pointer voidand void mustbe careful assign pointers address type pointer listing ptrvoid ptrvoid cpp pointers type void include iostream namespace std int main int intvar integer variable float flovar float variableint ptrint define pointer intfloat ptrflo define pointer float void ptrvoid define pointer voidptrint intvar int int ptrint flovar error float int ptrflo intvar error int float ptrflo flovar float float pointers10pointers43911  ch10       ptrvoid intvar int void ptrvoid flovar float void return  assign address intvartoptrintbecause type int assign address flovartoptrintbecause type float typeint ptrvoidcan pointer int pointer tovoid unusual reason assign kind pointer type reinterpret_cast lines commented ptrvoid ptrint reinterpret_cast int flovar ptrflo reinterpret_cast float intvar reinterpret_castin recommended occasionally difficult situation static casts work pointers style casts bad idea examples reinterpret_castin chapter12 streams files whereit alter data buffer interpreted pointers arraysthere closeassociation pointers arrays chapter  arrays strings array elements accessed program arrnote provi des areview arrnote cpp array accessed array notation include iostream namespace std int main arrayint intarray       int   element cout intarray endl print valuereturn  thecoutstatement prints array element turn instance jis  expression intarray takes intarray  accesses fourth array element inte ger  sthe output arrnote chapter   ch10          surprisingly array elements accessed pointer notation array notation ptrnote arrnote pointer notation ptrnote cpp array accessed pointer notation include iostream namespace std int main arrayint intarray       int   element cout intarray endl print valuereturn  expression intarray inptrnote intarray inarrnote output programs identical interpret expression intarray suppose jis  expression equivalent intarray  represent contents fourth element array  remember nameof array address expression intarray jis address addedto expect intarray would  bytes intarray thatdoesn produce result intarrayis array integers  bytes array middle element fourthinteger array fourth byte figure   figure assumes  byteintegers compiler smart size data account performs arithmetic data addresses intarrayis array type intbecause declared sees expression intarray  interprets address ofthe fourth integer inintarray fourth byte valueof fourth array element address dereference operator expression jis  intarray  isthe content fourth array element  pointers10pointers44111  ch10       figure10 counting integers pointer declaration include type variable pointed compiler pointer pointer intor pointer doubleso itcan perform correct arithmetic access elements array multiplies  case type int  case double pointer constants pointer variables suppose adding jtointarrayto step array addresses wanted increment operator write intarray answer reason increment constant change expression intarrayis address chosen place yourarray stay address program terminates intarrayis pointer stant intarray  multitasking variable addresses change program execution active program swapped disk reloaded memory location process invisible program increment address increment pointer holds address ptrinc sho ws chapter   ch10       ptrinc cpp array accessed pointer include iostream namespace std int main int intarray      array int ptrint pointer int ptrint intarray points intarrayfor int   element cout ptrint endl print valuereturn  define pointer int ptrint intarray address thearray access contents arrayelements expression ptrint variable ptrintstarts address intarray allowing array element intarray   accessed ptrintis variable constant incremented incremented points array element intarray  expression ptrint represents thecontents array element  loop expression access array element turn output ptrincis ptrnote pointers functionsin chapter  notedthat ways pass arguments function reference pointer function intended modify variables calling pro gram variables passed function obtains copy variable reference argument apointer situation passing simple variables review arguments passed reference compare passing pointer arguments passrefprogram passing reference passref cpp arguments passed reference include iostream namespace std int main pointers10pointers44311  ch10       void centimize double prototypedouble var   var  inchescout var var inches endl centimize var change var centimeterscout var var centimeters endl return  void centimize double   var convert variable varinmain inches centimeters pass vari reference function centimize remember data type doublein prototype function argument passed reference thecentimize function multiplies original variable   notice function refers variable simply argument vandvarare differentnames thing converted varto centimeters main displays result output passref var  inchesvar   centimetersthe passptr equivalent situation pointers passptr cpp arguments passed pointer include iostream namespace std int main void centimize double prototypedouble var   var  inchescout var var inches endl centimize var change var centimeterscout var var centimeters endl return  void centimize double ptrd chapter   ch10       ptrd   ptrd var output passptris passref function centimize declared argument pointer double void centimize double argument pointer doublewhenmain calls function supplies address variable argument centimize var remember variable passing reference thevariable address centimize function passed address dereference operator ptrd access stored address ptrd   multiply contents ptrd  of ptrd ptrd   multiply contents ptrd  where standalone asterisk multiplication operator sinceptrdcontains address var ptrdis var figure   changing ptrdin function varin calling program pointers10pointers445figure10 pointer passed function   ch10       passing pointer argument function ways passing reference permit variable calling program modified function mechanism reference alias original variable pointer address variable passing arrayswe numerousexamples starting chapter  arrays passed arguments func tions elements accessed function chapter learned pointers array notation common pointer notation array notation arrays passed functions passarrprogram passarr cpp array passed pointer include iostream namespace std const int max  number array elementsint main void centimize double prototypedouble varray max           centimize varray change elements varray int  max display array valuescout varray varray centimeters endl return  void centimize double ptrd int  max ptrd   ptrd points elements varray prototype function passptr function single argument pointer double array notation written asvoid centimize double double equivalent double pointer syntax monly chapter   ch10       array array address address operator function called centimize varray pass array addressincentimize array address variable ptrd point element array turn increment ptrd ptrd   figure   array accessed output passarr varray    centimetersvarray    centimeters varray    centimeters varray    centimeters varray    centimeterspointers10pointers447figure10 accessing array function syntax question expression ptrd increments pointerand pointer contents compiler interpret ptrd ptrd turns dereferenceoperator precedence operators precedence distinguished associativity associativity concerned compiler performs operations starting operator operator left   ch10       group operators associativity compiler performs operation expression works left unary operators associativity expression interpreted ptrd increments thepointer points pointer incremented dereference oper ator applied resultingaddress sorting array elementsas exampleof pointers access array elements sort tents array program examples lay groundwork expansion demonstrate sorting process ordering pointers program reforderprogram chapter  objects classes pointers references orders numbers passed argu ments exchanging smaller listing ptrorder ptrorder cpp orders arguments pointers include iostream namespace std int main void order int int prototypeint n1   pair ordered notint n3  n4  order n1 order pair numbersorder n3 n4 cout n1 n1 endl print numberscout endl cout n3 n3 endl cout n4 n4 endl return  void order int numb1 int numb2 orders numbers numb1 numb2 st larger nd int temp numb1 swap numb1 numb2 chapter   ch10       numb2 temp function order worksthe reforder passed theaddresses numbers ordered accesses numbers pointers numb1accesses number main passed argument numb2accesses thesecond output ptrorder n1 this andn2 this swapped order n3 this n4 this swapped order order function ptrorder program ptrsort whichsorts array integers ptrsort cpp sorts array pointers include iostream namespace std int main void bsort int int prototype const int  array size test arrayint arr           bsort arr sort array int  print sorted arraycout arr cout endl return  void bsort int ptr int void order int int prototype int indexes arrayfor   outer loopfor  loop starts outerorder ptr ptr order pointer contents pointers10pointers44911  ch10       void order int numb1 int numb2 orders numbers numb1 numb2 st larger nd int temp numb1 swap numb1 numb2 numb2 temp array arrof integers main initialized unsorted values address array number elements passed bsort function sorts array sorted values printed output ptrsort          the bubble sortthebsort function sorts array variation bubble sort simple notoriously slow approach sorting works assuming arrange numbers array ascending order element array arr  compared turn elements starting greater swapped element order smallest element element compared turn elements starting swapped bigger element smallest process continued elements time array assumed ordered figure   bubble sort action fewer items ptrsort inptrsort number position  compared element turn swapped  number position starts  compared element swapped   position swapped   swapped   swapped  number position  swapped   swapped      process continues array sorted thebsort function ptrsort consists nested loops controls pointer outer loop loop variable expressions ptr jandptr kpoint elements array determined loop variables expression ptr jmoves array starting element stepping integer integer short element position ptr jin outer loop expression ptr kin loop starts pointing onebelow ptr jand moves array time loop chapter   ch10       elements pointed ptr jandptr kare compared order function greater reswapped figure   process pointers10pointers451figure10 operation bubble sort theptrsort reveal power pointers provide consistent efficient operate array elements variables names function   ch10       figure10 operation ptrsort pointers type strings chapter  type strings simply arrays type char pointer notation applied characters strings elements array pointers string constantshere twostr strings defined array notation previous examples pointernotation twostr cpp strings defined array pointer notation include iostream namespace std int main char str1 defined array char str2 defined pointer cout str1 endl display stringscout str2 endl str1 str1 constantstr2 str2 pointercout str2 endl str2 starts efined return  chapter   ch10       ways types definition equivalent print strings function arguments subtle difference str1is address pointer constant str2is pointer variable str2canbe changed str1cannot program figure   kinds strings memory pointers10pointers453figure10 strings arrays pointers increment str2 pointer longer points character string output twostr defined arraydefined pointer efined pointer str2 string defined pointer considerably flexible defined array examples thisflexibility strings function argumentshere examplethat string function argument function simply prints string accessing character turn listing ptrstr ptrstr cpp displays string pointer notation include iostream namespace std   ch10       int main void dispstr char prototype char str idle people leisure dispstr str display stringreturn  void dispstr char null character cout print characterscout endl array address stris argument function dispstr address constant passed copy created dispstr copy pointer pointer changed function increments psto display string expression returns successive characters string loop cycles finds null character  string  repre sentsfalse whileloop terminates point copying string pointerswe examples pointers values array pointers insert values array copystr demonstrates function copiesone string copystr cpp copies string pointers include iostream namespace std int main void copystr char const char prototype char str1 conquest greatest victory char str2  stringcopystr str2 str1 copy str1 str2cout str2 endl display str2 return  chapter   ch10       void copystr char dest const char src src null character dest src copy chars src dest dest  terminate dest herethe main program calls function copystr copy str1tostr2 thisfunction expression dest src takes address pointed srcand places address pointed dest pointers incremented time loop character transferred loop terminates null character src point null isinserted destand function returns figure   pointers strings pointers10pointers455figure10 operation copystr   ch10       library string functionsmany library functions strings string arguments pointer notation description strcpy inyour compiler documentation string hheader file function copies string compare homemade copystr function copystrexam ple syntax strcpy library function char strcpy char dest const char src function takes arguments type char constmodifier pointers explains meaning constin context strcpy function returns apointer char address deststring respects function works homemade copystr function theconstmodifier pointersthe constmodifierwith pointer declarations confusing things depending statements pos sibilities const int cptrint cptrint pointer constant intint const ptrcint ptrcint constant pointer intfollowing declaration change cptrintpoints change cptrintitself declaration change whatptrcintpoints change ptrcintitself remember difference reading left comments constinboth positions pointer points constant declaration strcpy argument const char srcspecifies characters pointed srccannot changed strcpy imply srcpointer modified argument declaration needto char const src arrays pointers stringsjust arrays variables type intor type float arrays ofpointers common construction array pointers strings chapter  straray program demonstrated array char strings disadvantage array strings subarrays hold strings length space wasted strings shorter length subarrays figure   chapter  chapter   ch10       pointers solve problem modify straray create arrayof pointers strings array ofstrings listing ptrtostr ptrtostr cpp array pointers strings include iostream namespace std const int days  number pointers arrayint main array pointers charchar arrptrs days sunday monday tuesday wednesday thursday friday saturday int  days display stringcout arrptrs endl return  output program straray sunday monday tuesday wednesday thursday friday saturdaywhen strings array places contiguously memory wasted space strings array holds pointers string array type char array pointers strings array pointerstochar meaning definition arrptrsinptrtostr recall string represented single address address character string addresses stored array figure   pointers10pointers45711  ch10       figure10 array pointers strings memory management newanddeletewe examples arrays set memory statement int arr1  reserves memory  integers arrays approach data storage drawback time write program big array wait program running array size thefollowing approach work chapter   ch10       cin size size userint arr size error array size constantthe compiler requiresthe array size constant situations memory runtime store string typed user situation define array sized hold largest string expect wastes memory learn chapter  standard template library vector sort expandable array thenewoperatorc differentapproach obtaining blocks memory newoperator ver satile operator obtains memory operating returns pointer starting point newintro newis newintro cpp introduces operator include iostream include cstring strlen namespace std int main char str idle hands devil workshop int len strlen str length strchar ptr pointer charptr char len  set memory string  strcpy ptr str copy str memory area ptr cout ptr ptr endl ptr str delete ptr release ptr memoryreturn  expression ptr char len  returns pointer memory large hold string str lengthlenwe strlen library function extra byte null character  string figure   syntax statement newoperator remember brackets size compiler object mistakenly parentheses incorrect pointers10pointers45911  ch10       figure10 memory newoperator chapter figure10 syntax newoperator figure   memory newand pointer   ch10       innewintro strcpy copy string strto newly created memory area pointed byptr area equal size length str string fits output newintro isptr idle hands devil workshop programmers recognize newplays role malloc familyof library functions newapproach superior returns pointer data type whilemalloc pointer cast type advantages programmers equivalent realloc changing thesize memory reallocated renewin fall ploy creating larger smaller space copying yourdata area thedeleteoperatorif program reserves chunks memory eventually mem ory reserved crash ensure safe efficient memory newoperator matched deleteoperator returns memory oper ating newintro statementdelete ptr returns memory pointed ptr operator newintro memory automaticallyreturned program terminates suppose newin function thefunction local variable pointer memory pointer destroyed function terminates memory left orphan space inac cessible rest program good practice essential delete memory deleting memory delete pointer points strinnewintro change address pointer address longer valid memory points changed careful pointers memory deleted brackets deleteindicate deleting array create single object brackets whenyou delete ptr someclass allocate single object delete ptr brackets deletepointers10pointers46111  ch10       forget brackets deleting arrays objects ensures members array deleted destructor called string class newthenewoperator appears constructors modify stringclass examples strplusin chapter  operator overloading recall potential defect class stringobjects occupied fixed memory string shorter fixed length wasted memory longer string mistakenly generated crash extending array newto memory listing newstr newstr cpp memory strings include iostream include cstring strcpy namespace std class string user defined string type private char str pointer stringpublic string char constructor arg int length strlen length string argument str char length  memory strcpy str copy argument string destructor cout deleting str delete str release memory void display display string cout str endl int main  arg constructor string s1 doubts chapter   ch10       cout s1 display strings1 display return  output program iss1 doubts deleting str thestringclass data item pointer charcalledstr pointer point string held stringobject array object hold string string stored pointer member string constructor newstrthe constructor takes normal char string argument obtains space memory string strpoints newly memory constructor strcpy copy string space destructor newstrwe destructors examples allocating mem ory destructors allocate memory create object reasonable deallocate memory object longer needed recall chapter  destructor routine called automatically object destroyed destructor newstrlookslike string cout deleting str delete str destructor memory object created program output destructor executed program objects variables typically destroyed function defined terminates destructor ensures memory stringobject bereturned left limbo object destroyed note potential glitch destructors newstr copy stringobject statement s1 copying pointer actual char string objects point string memory delete string destructor delete char string leaving object invalid pointer subtle objects deleted obvious ways function local object created returns chapter  smarter destructor counts stringobjectsare pointing string pointers10pointers46311  ch10       pointers objectspointers point toobjects simple data types arrays examples objects defined statements distance dist object called distis defined distanceclass time write program objects create case newto create objects program isrunning newreturns pointer unnamed object short exam ple program englptr compares twoapproaches creating objects englptr cpp accessing member functions pointer include iostream namespace std class distance english distance class private int feet float inches public void getdist length user cout nenter feet cin feet cout enter inches cin inches void showdist display distance cout feet inches int main distance dist define named distance object dist getdist access object members dist showdist dot operatordistance distptr pointer distancedistptr distance points distance object distptr getdist access object members distptr showdist operator cout endl return  chapter   ch10       program variation english distanceclass previous chapters main function defines dist distancemember function getdist distancefrom user showdist display referring membersenglptrthen creates object type distanceusing newoperator returns pointer called distptr question refer member functions object pointed distptr guess dot membership access operator distptr getdist work distptr variablebut work dot operator requires identifier left variable distptris pointer variable syntax approach dereference getthe contents variable pointed pointer distptr getdist ineleganthowever cumbersome parentheses parentheses neces sary dot operator higher precedence dereference operator anequivalent concise approach furnished membership access operator consists hyphen greater thansign distptr getdist approachas englptr operator works pointers objects operator works objects output program enter feet this object dot operatorenter inches     enter feet  object operatorenter inches     approach newyou common approach newto memory forobjects sincenewcan return pointer area memory holds object refer original object dereferencing pointer englrefexample pointers10pointers46511  ch10       englref cpp dereferencing pointer returned include iostream namespace std class distance english distance class private int feet float inches public void getdist length user cout nenter feet cin feet cout enter inches cin inches void showdist display distance cout feet inches int main distance dist distance create distance object alias dist dist getdist access object members dist showdist dot operator cout endl return  expression distancereturns pointer memory area large distanceobject refer original object distance object pointed pointer reference define distto objectof type distance set equal newdistance refer members distusing dot membership operator approach common pointers objects simplydeclaring object works chapter   ch10       array pointers objectsa common programming construction array pointers objects arrangement easy access group objects flexible placing objects array instance persort chapter group objects sorted sorting array pointers sorting objects ptrobjs eates array pointers personclass sthe listing ptrobjs cpp array pointers objects include iostream namespace std class person class persons protected char  person namepublic void setname set cout enter cin void printname cout int main person persptr  array pointers persons int  number persons array char choice persons array persptr person object persptr setname set person count person cout enter enter cin choice person choice quit pointers10pointers46711  ch10       int  print names personscout nperson number  persptr printname cout endl return  main class personhas single data item holds string representing person member functions setname andprintname set dis played program operation themain function defines array persptr  pointers type person doloop itthen asks user enter creates personobject andstores pointer object array persptr demonstrate easy access objects pointers prints namedata personobject sample interaction program enter stroustrup user enters namesenter enter ritchie enter enter kernighan enter person number  program displays names storedname stroustrupperson number name ritchieperson number name kernighanaccessing member functionswe accessthe member functions setname andprintname personobjectspointed pointers array persptr elements array persptrisspecified array notation persptr equivalently pointer notation persptr elements pointers objects type person access member object pointer operator putting syntax getname persptr getname executes getname function personobject pointed element jof thepersptrarray good thing programusing english syntax chapter   ch10       linked list exampleour simple linked list linked list store data numerous examples data stored arrays data structure array pointers data members ptrtostrs andptrobjs examp arrayand array pointers suffer necessity declare fixed size array running program chain pointersthe linked list flexible storage arrays space data item needed item connected orlinked data item pointer individual items located contiguously memory array elements scattered entire linked list object class linklist individual data items links represented structures type link structure integer representing object single data item pointer link list stores pointer link head list arrangement figure10  pointers10pointers469figure10 a linked list listingfor linklist linklist cpp linked list include iostream namespace std   ch10       struct link element list int data data item link pointer link class linklist list links private link pointer linkpublic linklist argument constructor null linkvoid additem int add data item link void display display links void linklist additem int add data item link newlink link link newlink data data newlink points link newlink points void linklist display display links link current set ptr link current null quit link cout current data endl print data current current link int main linklist li linked listli additem  add items listli additem  li additem  li additem  chapter   ch10       li display display entire listreturn  thelinklistclass member data item pointer start list list created constructor initializes pointer called null thenullconstant defined  serves signal pointer hold valid address program link member nullis assumed tobe list adding item listtheadditem member function adds item linked list link inserted list write additem function insert items thelist complex program steps involved inserting link structure type linkis created linelink newlink link creates memory linkstructure newand saves pointer newlinkvari set members newly created structure values struc ture class referred pointer mem bers accessed member access operator lines set datavariable passed argument additem nextpointer point towhatever address holds pointer startof list newlink data newlink finally firstvari point link newlink uncouplethe connection firstand link insert link link position figure   process pointers10pointers47111  ch10       figure10 adding linkedlist displaying list contentsonce list created easy step members displaying perform ing operations follow nextpointer wefind nextthat null signaling list function display linecout endl current data prints data current current moves link current nullin whileexpression false output linklist   chapter   ch10       linked lists commonly data storage arrangements arrays avoid wasting memory space engendered arrays disadvantage finding item linked list requires chain links head list desired link reached time consuming array ele ment hand accessed provided advance linked lists data storage techniques chapter  standard template library classeswe notea pitfall referential classes structures linkstructure linklistcontained pointer kind structure classes class sampleclass sampleclass ptr fine class pointer object type objectof type class sampleclass sampleclass obj true structures classes augmentinglinklistthe general organization linklistcan serve complex situation data link integer link hold number data items hold pointer structure object additional member functions perform activities adding removing links arbitrary chain member function destructor men tioned delete blocks memory longer destructor performs task highly desirable addition linklistclass gothrough list deleteto freethe memory occupied link pointers10pointers47311  ch10       pointers pointersour demonstrates array pointers objects sort pointers based data object involves idea pointers pointers demonstrate people lose sleep pointers idea program create array pointers objects personclass ptrobjs add variations order andbsort functions ptrsort sort group personobjectsbased alphabetical order theirnames listing persort persort cpp sorts person objects array pointers include iostream include string string class namespace std class person class persons protected string person namepublic void setname set cout enter cin void printname display cout endl string getname return return int main void bsort person int prototype person persptr  array pointers persons int  number persons array char choice input chardo persons arraypersptr person objectpersptr setname set person count person cout enter enter cin choice person chapter   ch10       choice quit cout nunsorted list int  print unsorted list persptr printname bsort persptr sort pointerscout nsorted list  print sorted list persptr printname cout endl return  main void bsort person int sort pointers persons void order person person prototype int indexes arrayfor   outer loopfor  loop starts outerorder order pointer contents void order person pp1 person pp2 orders pointers st larger nd pp1 getname pp2 getname person tempptr pp1 swap pointers pp1 pp2 pp2 tempptr program executed asks user creates object type personand sets namedata object entered user program stores pointer object persptrarray user types nto names entered program calls bsort function sort personobjects based namemember variables sample interaction program enter washingtonenter enter adamspointers10pointers47511  ch10       enter yenter jefferson enter enter madison enter unsorted list washington adams jefferson madisonsorted list adams jefferson madison washingtonsorting pointersactually wesort personobjects objects pointers objects eliminates shuffle objects memory time consuming objects large wanted multiple sorts phone number memory time storing objects multiple times process figure   facilitate sorting activity getname member function personclass access names order decide swappointers theperson data type notice argument bsort function arguments order type person asterisks arguments pass address array persptr case order addresses ele ments array array type person address array type person array type pointers toperson person address typeperson address pointer pointer pointer figure   chapter   ch10       figure10 sorting array ofpointers pointers10pointers47711  ch10       figure10 pointer array pointers compare program ptrsort sorted array type int data types passed functions persort asterisk ptrsort array array pointers persptrarray pointers construction persptr printname executes printname function object pointed element jofpersptr comparing stringstheorder function persort modified order strings lexigraphically putting alphabetical order compares strings library functionstrcmp function takes strings s1ands2as arguments strcmp s1 returns values valuecondition s1comes s20s1is s1comes s2the strings accessed syntax pp1 getname chapter   ch10       argument pp1is pointer pointer pointed pointer points member access operator dereferences level dereference level asterisk preceding pp1 pointers pointers pointers pointers pointers fortunately complexities seldom encountered parsing exampleprogrammers frequently faced problem unravelling parsing string sym bols examples commands typed user keyboard sentences natural languages english statements programming language algebraic expressions learned pointers strings handle sort problem longer parse arithmetic expressions     the user entersthe expression program works character character figures arithmetic terms displays  exam ple expressions arithmetic operators simplify numbers programming easier restricting single digit llow parentheses program friend stackclass stakaray program inchapter  modified class stores data type char stack store numbers operators characters stack storage mechanism parsing expressions frequently access item stored stack lifo container stackclass class called express short expression representing entire arithmetic expression member functions class initialize object expression form string entered user parse expression return arithmeticvalue parsing arithmetic expressions parse anarithmetic expression start left character turn number single digit character   operator characters character number push stack push operator encounter trick handle subsequent operators note execute current operator read number finding operator pointers10pointers47911  ch10       signal execute previous operator stored stack sequence  is stack wait operatorbefore carrying addition current character operator pop previous number in preceding previous operator stack plac ing themin variables lastvalandlastop finally pop number  carryout arithmetic operation numbers obtaining  execute pre vious operator remember higher precedence theexpression    execute division expression and stack carried division hand current operator execute pre vious operator expression    execute in6   division table   possibilities table10 operatorsand parsing actions previouscurrent operatoroperatorexampleaction   push previous operator previous number    execute previous operator push result    execute previous operator push result    execute previous operator pushresult  theparse member function carries process throughthe input expression performing operations work stack tains single number sequences number operator number working stack execute sequences finally single number left stack original expression solve memberfunction carries task working stack single number left general parse putsthings stack solve takesthem chapter   ch10       theparseprogram typical interactionwith parsemight enter arithmetic expressionof form      number digit spaces parentheses expression   the numerical do enter note resu ltsof arithmetic operations digit limited numerical size type char   input stringis limited numbers   listing program parse cpp evaluates arithmetic expressions composed  digit numbers include iostream include cstring strlen namespace std const int len  length expressions characters const int max  size stack class stack private char max stack array chars int number stackpublic stack constructor  void push char var char stack var char pop char stack return int gettop stack return class express expression class private stack stack analysis char pstr pointer input string int len length input stringpointers10pointers48111  ch10       public express char ptr constructor pstr ptr set pointer string len strlen pstr set length void parse parse input string int solve evaluate stack void express parse add items stack char char input string char lastval char lastop operatorfor int  len input character pstr characterif   digit push  save numerical operatorelse gettop  operators push stackelse operator lastval pop previous digit lastop pop previous operator operator lastop lastop push lastop restore pops push lastval cases switch lastop operation push result stack case push pop lastval break case push pop lastval break case push pop lastval break case push pop lastval break default cout nunknown oper exit  chapter   ch10       switch casess push current stack operator operatorelse character cout nunknown input character exit  parse int express solve remove items stack char lastval previous valuewhile gettop  lastval pop previous switch pop previous operator operation push answer case push pop lastval break case push pop lastval break case push pop lastval break case push pop lastval break default cout nunknown operator exit  switch whilereturn int pop item stack ans solve int main char ans char string len input string usercout nenter arithmetic expression nof form      nno number digit ndon spaces parentheses cout nenter expresssion cin string input user express eptr express string expression eptr parse parse cout nthe numerical eptr solve solve itdelete eptr delete expressionpointers10pointers48311  ch10       cout ndo enter cin ans ans return  longish program designed class stack inhandy situation demonstrates pointers variety ways usefulit treat string array characters simulation horse raceas final chapter horse racing game game number horses screen starting left race finish program demonstrate pointers situation bit object oriented design horse speed determined randomly figure advance win program console graphics horses easily crudely displayed compile program msoftcon horborlacon hheader file depending compiler msoftcon cpporborlacon cppsource file appendix console graphics lite program horse started asks user supply race distance number horses classic unit distance horse racing english speaking countries furlong   mile typical races     furlongs enter   horses program draws vertical lines furlong start finish lines horse represented rectangle number middle figure   screen race progress chapter figure10 output thehorseprogram   ch10       designing horse racehow approach anoop design horse race question group entities model answer horses reasonable horse object class called horse containdata specific horse number distance display horse correct screen position data applies entire race track individual horses includes track length elapsed time minutes seconds   start race total number horses sense trackobject single member trackclass real objects horse racing riders saddles relevant program ways design program inheritance horses descendants track sense horses kind race track completely thing option track data static data horseclass generally kind thing problem domain real separate class program advantage easier classes contexts track race cars horses horseobjects trackobject communicate uml terms association consist array pointers horseobjects member thetrackclass track access horses pointers track create horses created pass pointer horse horse access track listing horse horse cpp models horse race include msoftcon console graphics include iostream include cstdlib random include ctime time namespace std const int cpf  columns furlong const int maxhorses  maximum number horses class track forward references class horse private const track ptrtrack pointer track const int horse_number horse numberpointers10pointers48511  ch10       float finish_time horse finish timefloat distance_run distance farpublic create horsehorse const int const track ptrt horse_number ptrtrack ptrt distance_run   moved horse destroy horse display horsevoid display_horse const float elapsed_time class horse class track private horse harray maxhorses array ptrs horses int total_horses total number horses int horse_count horses created const float track_length track length furlongs float elapsed_time time start racepublic track float lent int nh  arg constructor track destructor void display_track display track void race float get_track_len const return total track length class track void horse display_horse float elapsed_time horse display horse number set_cursor_pos  int distance_run cpf  horse_number  horse  blueset_color static_cast color cblue horse_number draw horsechar horse_char  static_cast char horse_number putch putch xdb putch horse_char putch xdb finish distance_run ptrtrack get_track_len   cpf rand  skip   ticksdistance_run  f advance   furlongsfinish_time elapsed_time update finish time chapter   ch10       display finish timeint mins int finish_time  int secs int finish_time mins  cout time mins secs display_horse track track float lent int nh track constructortrack_length lent total_horses nh horse_count  elapsed_time   init_graphics start graphics total_horses  horses total_horses maxhorses maxhorses total_horses int  total_horses horseharray horse horse_count time_t atime initialize random numbers srand static_cast unsigned time atime display_track track constructor track track track destructor int  total_horses delete horsedelete harray void track display_track clear_screen clear screen display trackfor int  track_length furlongfor int  total_horses   screen row set_cursor_pos cpf   track_length cout xde draw start finish lineelsecout xb3 draw furlong marker display_track void track pointers10pointers48711  ch10       kbhit elapsed_time   update time update horsefor int  total_horses harray display_horse elapsed_time wait  getch eat keystroke cout endl float track get_track_len const return track_length int main float length int total data usercout nenter track length furlongs   cin length cout nenter number horses   cin total track thetrack length total create track thetrack race return  main keeping timesimulation programsusually involve activity place period time model passage time programs typically energize fixed intervals horseprogram main program calls track function function series calls whileloop horse function display_horse thisfunction redraws horse position whileloop pauses  milliseconds console graphics wait function thing race user presses key deleting array pointers objectsat programthe destructor track delete horse objects newin constructor notice delete harray deletes pointers horseschapter   ch10       deletes array pointers pointers point array element element delete horse individually int  total_horses deletes horsesdelete harray theputch functionwe horse tobe color compilers coutto generate colors true current version borland builder functions generate colors reason putch displaying horses putch putch xdb putch horse_char putch xdb function requires conio hinclude file furnished compiler include file explicitly horse cppbecause alreadyincluded msoftcon horborlacon multiplicity umllet uml class diagram horseprogram figure   diagram introduce uml concept called multiplicity pointers10pointers489track  horsefigure10 uml class diagram horseprogram object class relates object class situa tions objects class specific number involved association number objects involved association called multiplicityof association inclass diagrams numbers symbolsare ends association multiplicity table   uml multiplicity symbols table10 the uml multiplicitysymbols symbolmeaning one  infinity  none   ch10         two  seven association  class class object class interacted unspecified number class objects horseprogram track  horses  trackend association   horseend assume horse arace happen time trials uml state diagramsin introduce kind uml diagram state diagram called thestatechart diagram uml class diagrams examined earlier chapters relationships classes class diagrams reflect organization program code staticdiagrams relationships association generalization change program runs examine dynamicbehavior class objects time object created events messages parts pro gram decisions things eventually deleted situation time state diagrams graphically isfamiliar concept statewhen applied devices everyday lives radio onstate offstate washing machine washing rinsing spinning stoppedstates television set state channel receiving channel  activestate states transitions result timer reached  minute point washing machine transition rinsestate spinstate result message remote control unit transition channel7 activestate channel  activestate figure   state diagram based horseprogram earlier chapter states horseobject program runs chapter table10 continuedsymbolmeaning   ch10       figure10 state diagram horseobject statesin uml state diagrams state represented rectangle roundedcorners state named rectangle state names capital letter activitiesthe object performs enters state state diagrams include special states black disk represents initial state ablack disk surrounded circle represents final state figure created horseobject major states reaches finish runningstate finishedstate classes class diagram program code corresponds states state diagram states include idea cir cumstances object result appropriatenames states transitionstransitions states represented directed arrows rectangle transition triggered event labeled event createdanddeletedtransitions figure transition names capitalized names closer english usage pointers10pointers491runningadvance   furlongs display timeafter  distance track length  distance track length createddeletedfinished11  ch10       event triggers transitions timing  millisecond timer keyword afteris transitions time parameter transitions labeled uml calls guard condition sat isfied transition occur guards written brackets transitionshave guards event names events guards determine transition occur note transitions transition returns state began racing state state time entersthe runningstate horseobject carries activity consists increasing distance   furlongs long reached finish distance track length guard true runningstate transitions toitself horse reaches finish distance track length true horsetransitions finishedstate displays total time race waits deleted idea state diagrams learn complexstate diagram describes elevatorobject chapter  multifile programs debugging pointerspointers source mysterious catastrophic program bugs common problem programmer failed place valid address pointer variable pointer pointing memory pointing program code operating programmer inserts memory pointer write program operating instructions puter crash evince uncharming behavior version scenario takes place pointer points address  callednull pointer variable defined global variable global variables automatically initialized  miniprogram thatdemon strates situation int intptr global variable initialized void main failure valid address intptr intptr  attempts  address  result errorchapter   ch10       whenintptris defined itis  global single program state ment attempt insert  address  fortunately runtime error checking unit built program compiler waiting attempts access address  display error message accessviolation null pointer assignment fault terminate program amessage possibility failed properly initialize pointer summarythis whirlwind tour land pointers learn topics covered provide basis examples balance book study pointers learned computer memory address addresses pointer constants addresses variables address operator pointers variables hold address values pointers defined asterisk tomeanpointer data type included pointer definitions void compiler pointed perform arithmetic correctly pointer access thing pointed asterisk dereference operator meaning contents variable pointed special type void pointer anytype difficult situations pointer hold addresses types array elements accessed array notation brackets pointer notation asterisk addresses address array constant assigned variable incremented changed ways address variable passed function function work original variable true arguments passed respect passing pointer offers benefits passing reference pointer arguments dereferenced accessed dereference operator pointers offer flexibil ity cases string constant defined array pointer pointer approach flexible danger pointer corrupted strings arrays typechar commonly passed functions accessed pointers thenewoperator obtains memory returns pointer memory operator create variables data structures program execution deleteoperator releases memory pointers10pointers49311  ch10       pointer points object members object class accessed access operator syntax access structure members classes structures data members pointers type mits creation complex data structures linked lists pointers pointers variables defined double asterisk int pptr multiplicity uml class diagrams number objects involved association uml state diagrams object situation time states rep resented rectangles rounded corners transitions states represented directed lines questionsanswers questions appendix  write statement displays address variable testvar  contents pointers point adjacent variables type floatdiffer _____________  pointer address variable indication variable accessed variable storing addresses data type address variable  write expressions address varb contents variable pointed varc variable varused reference argument data type pointer char5 address _____________ pointer ____________  write definition variable type pointer float  pointers referring memory address _______________  pointer testptrpoints variable testvar write statement represents thecontents testvarbut chapter   ch10        asterisk data type _________ asterisk variable __________  expression testcan toa pointer test refer contents test dereference test refer variable pointed test  code correct int intvar  int intptr cout intptr  pointer voidcan hold pointers _________  difference intarr  intarr   write code pointer notation display array intarr  elements  intarris array integers expression intarr legal  ways pass arguments functions passing __________ pass ing __________ function modify argument calling program  type variable pointer points pointer definition data types mixed arithmetic performed pointers access structure members religious conviction attacked compiler perform arithmetic correctly access array elements  pointer notation write prototype declaration function called func thatreturns type voidand takes single argument array type char  pointer notation write code transfer  characters string s1to string  element string string character string length string array holding string  pointer notation write prototype function called revstr returns astring takes argument represents string pointers10pointers49511  ch10        write definition array numptrsof pointers strings  newoperatora returns pointer variable eates variable called obtains memory variable tells memory  newmay result __________ memory array  deleteoperator returns ____________ operating  pointer pthat points object type upperclass write expression executes exclu member function object  object number  array objarr write expression executes theexclu member function object  linked list link pointer link array pointers points links link data pointer data links stored array  write definition array arrof  pointers point variables type float  wanted sort large objects structures efficient place array sort array place pointers array sort array place linked list sort linked list place references array sort array  express multiplicities association fewer  objects  objects  states state diagram correspond messages objects circumstances object finds objects program object situation chapter   ch10        true false transition states exists duration program  guard state diagram constraint transition occur kinds transitions kinds states restriction creation states exercises answers starred exercises appendix  write program reads group numbers user places array type float numbers stored array program average print result pointer notation  start stringclass newstrexample chapter add member function called upit converts string uppercase toupper library function takes single character argument returns character converted uppercase function cctypeheader file write code main test upit  start array pointers strings representing days week theptrtostr program chapter provide functions sort strings alphabeti cal order variations bsort andorder functions ptrsort pro gram chapter sort pointers strings actual strings  add destructor linklistprogram delete links linklistobject destroyed chain deleting link test destructor display message time deletes link delete number links list destructor called automatically existing objects program exits  suppose main local arrays size type float initialized values write function called addarrays accepts addresses arrays arguments adds tents arrays element element places array returning fourth argument function carry size arrays pointer notation place brackets defining arrays pointers10pointers49711  ch10        version library function strcmp s1 compares strings returns  s1comes alphabetically  s1ands2are  ifs2comes alphabetically function compstr char strings arguments compare character character return int write main program test function combinations strings pointer notation  modify personclass persort program chapter includes notonly salaryitem type floatrepresenting person salary change setname andprintname member functions setdata andprintdata include ability set display salary asthe getsalary function pointer notation write salsort function sorts pointers persptrarray salary byname sorting salsort calling function persort forget takes precedence sayif getsalary getsalary swap pointers  revise additem member function linklistprogram adds theitem list item inserted item displayed output program   to add item follow chain pointers list change link point link  store  integers easily accessible assume problem memory computer frag mented largest array holds  integers problems larger memory objects solve problem defining  separate intarrays  integers array  pointers arrays intarrays names a0 address arrays stored pointer array type int array pointers access individual integers expressions jsteps pointers apandksteps throughindividual integers array accessing dimensional array group dimensional arrays group arrays test data numbers     display data correct chapter   ch10        presented exercise  inelegant  intarrays declaredin program statement addresses separate statement simplify things whichallows allocate arrays loop assign pointers time  numarrays allocate numarrays arrays int maxsize maxsize ints longrewrite program exercise  approach access elements individual arrays expression mentioned exercise  pointer notation notations equivalent  create class treat  separate arrays exercise  single dimensional array array notation single statements main access elements expressions classmember functions access data step approach overload script operator chapter  inheritance achieve result arrays test data display array notation class interface main access array elements pointer notation oper ations implementation class member functions  pointers complicated operation standable impenetrable simulating operation class clarify operation homemade pointers model computer memory arrays array access understood access memory pointers single array type charto store types variables computer memory array bytes size type char address array talk ordinar ily store floator intin array type char unions story simulate memory separate array data type store exercise confine numerical type float array type fmemory pointer values addresses stored memory array store array indexes model addresses indexes largest arrays stored type int create array type pmemory hold pointers fmemory fmem_top points place floatvalue stored pmemory pmem_top worry running memory assume arrays big time store simply insert number array worry memory management pointers10pointers49911  ch10       create class called float model numbers type floatthat storedinfmemoryinstead real memory instance data floatis address floatvalu stored fmemory instance variable addr class floatalso member functions argument structor initialize floatwith floatval constructor stores floatvalue element fmemorypointed fmem_top stores fmem_topinaddr compiler linker arrange store ordi nary variable real memory member function overloaded operator simply returns pointer type int addr create class called ptrfloat instance data class holds address pmemorywhere address stored member function ini tializes pointer intindex member function loaded dereference contents operator operation tad complicated obtains address pmemory data address stored address fmemoryto float pointed address data float ptrfloat operator return fmemory pmemory addr models operation dereference operator notice needto return reference function left theequal sign classes floatandptrfloatare floatstoresfloats array rep resenting memory ptrfloatstoresints representing memory pointers array values array represents memory typical classes sample main float var1   define initialize floatsfloat var2   ptrfloat ptr1 var1 define pointers floats ptrfloat ptr2 var2 initialize addresses floatscout ptr1 ptr1 values floats indirectlycout ptr2 ptr2 display ptr1   assign values variables ptr2   pointed ptr1 ptr2chapter   ch10       cout ptr1 ptr1 values indirectlycout ptr2 ptr2 display themnotice names variable types operations real variables output program ptr1   ptr2   ptr1   ptr2  this roundabout implement pointers revealing workings pointer address operator provided perspective true nature pointers10pointers50111  ch10         ch10       chapter11virtual functionsin chapter virtual functions504 friend functions520 static functions529 assignment copy initialization532 thethispointer547 dynamic type information553   ch11       chapter now understand pointers delve advanced ics chapter covers loosely collection subjects virtual functions friend functions static functions overloaded operator overloaded copy constructor thispointer advanced features pro gram short essential size programs virtual functions essential polymorphism cornerstones object oriented programming virtual functionsvirt ualmeansexisting appearance reality virtual functions pro gram appears calling function class reality calling function class virtual functions needed suppose number objects classes array perform operation function suppose graphics program includes shapes triangle ball square multshap program chapter9 inheritance classes member function draw object tobe drawn screen suppose plan picture grouping number elements draw picture convenient approach create array holds pointers objects picture array bedefined shape ptrarr  array  pointers shapesif insert pointers shapes array draw entire picture simple loop int  ptrarr draw amazing capability completely functions executed func tion pointer ptrarrpoints ball function draws ball called points triangle triangle drawing function called called polymorphism whichmeansdifferent forms functions appearance draw expression dif ferent actual functions called depending contents ptrarr polymorphism isone key features object oriented programming classes inheritance polymorphic approach work conditions met classes shapes balls triangles descended single base class calledshapeinmultshap draw function declared bevirtualinthe base class   ch11       abstract start short programs parts situa tion normal member functions accessed pointersour exampleshows base class derived classes functions access functions pointers virtual functions listing notvirt notvirt cpp normal functions accessed pointer include iostream namespace std class base base class public void normal function cout base class derv1 public base derived class  public void cout derv1 class derv2 public base derived class  public void cout derv2 int main derv1 dv1 object derived class  derv2 dv2 object derived class  base ptr pointer base classptr dv1 address dv1 pointerptr execute virtual functions11virtual functions50512  ch11       ptr dv2 address dv2 pointerptr execute return  thederv1andderv2classes derived class base classes amember function main create objects class derv1andderv2 pointerto class base address derived class object base class pointer lineptr dv1 derived class address base class pointerbut wait compiler complain assigning address type derv1 pointer base contrary compiler perfectly happy type checking relaxed situation reasons apparent rule pointers objects derived class type compatible pointers objects base class question execute ptr function called base orderv1 lines notvirt address object class derv2in pointer execute ptr functions called output program answers questions basebaseas function base class executed compiler ignores contentsof pointer ptrand chooses member function matches typeof thepointer figure   solve problem posed accessing objects classes statement chapter   ch11       figure11 nonvirtual pointer access virtual member functions accessed pointerslet single change program place keyword virtualinfront declarator function base class listing pro gram virt virt cpp virtual functions accessed pointer include iostream namespace std class base base class public virtual void virtual function cout base class derv1 public base derived class  virtual functions11virtual functions50712  ch11       public void cout derv1 class derv2 public base derived class  public void cout derv2 int main derv1 dv1 object derived class  derv2 dv2 object derived class  base ptr pointer base classptr dv1 address dv1 pointerptr execute ptr dv2 address dv2 pointerptr execute return  output program isderv1 derv2now member functions derived classes base class exe cuted change contents ptrfrom address derv1to derv2 ticular instance executed function ptr executes functions depending contents ptr rule compiler selects function based contentsof pointer ptr typeof pointer innotvirt figure   chapter   ch11       figure11 virtualpointer access late bindingthe astute reader maywonder compiler function compile notvirt compiler problem expression ptr compiles function base class virt compilerdoesn class contents ptrmay address objectof derv1class derv2class version draw compiler infact compiler arranges decision deferred program running runtime class pointed ptr version drawwill called called late bindingordynamic binding choosing functions normal compilation called early bindingorstatic binding late binding requires overhead increased power flexibility ideas moment refinement idea virtual functions virtual functions11virtual functions50912  ch11       abstract classes pure virtual functions shapeclass multshapprogram chapter  object theshapeclass specific shapes circles triangles instantiate objectsof base class abstract class class exists parent derived classes instantiate objects provide interface class hierarchy clear family classes instantiate objects base class documentation count users class remember write classes instantiation impossible placing pure virtual functioninthe base class pure virtual function expression added thedeclaration virtpure virtpure cpp pure virtual function include iostream namespace std class base base class public virtual void  pure virtual function class derv1 public base derived class  public void cout derv1 class derv2 public base derived class  public void cout derv2 int main base bad object abstract classbase arr  array pointers base class derv1 dv1 object derived class chapter   ch11       derv2 dv2 object derived class arr  dv1 address dv1 arrayarr  dv2 address dv2 arrayarr  execute objectsarr  return  virtual function declared asvirtual void  pure virtual functionthe equal sign assignment  assigned syntax simply compiler virtual function pure main attempt create objects class base compiler complain ing instantiate object abstract class pure virtual function abstract class notice declaration write definition base class pure virtual function base class override derived classes instantiate objects class override pure virtual function abstract class instantiate objects classes derived consistency virtual functions base class pure unrelated change virtpure addresses themember functions stored array pointers accessed array elements works single pointer output virtpure asvirt derv1derv2virtual functions personclassnow understand mechanics virtual functions situation sense extension ptrobj andpersort examples chapter  pointers personclass adds derived classes studentandprofessor derived classes function called isoutstanding function easy school administrators create list outstanding students professors venerable awards day ceremony listing forvirtpers virtual functions11virtual functions51112  ch11       virtpers cpp virtual functions person class include iostream namespace std class person person class protected char  public void getname cout enter cin void putname cout endl virtual void getdata  pure virtual func virtual bool isoutstanding  pure virtual func class student public person student class private float gpa grade point averagepublic void getdata student data user person getname cout enter student gpa cin gpa bool isoutstanding return gpa   true false class professor public person professor class private int numpubs number papers publishedpublic void getdata professor data user person getname cout enter number professor publications cin numpubs bool isoutstanding return numpubs  true false chapter   ch11       int main person persptr  array pointers persons int  number persons list char choice cout enter student professor cin choice choice studentpersptr student arrayelse professorpersptr professor arraypersptr getdata data person cout enter person cin choice choice cycle int  print names persons persptr putname outstanding persptr isoutstanding cout person outstanding return  main classesthepersonclass isan abstract class pure virtual functions getdata andisoutstanding personobjects created class exists base class studentandprofessorclasses studentandprofessorclasses addnew data items base class studentclass variable gpaof type float represents student grade point average gpa professorclass avari numpubs type int represents number scholarly publications pro fessor published students gpa   professors published  papers considered outstanding refrain comment desir ability criteria judging educational excellence theisoutstanding functiontheisoutstanding function declared pure virtual function person studentclass function returns booltrue student gpa greater   falseoth erwise professorit returns trueif professor numpubsvariable greater  virtual functions11virtual functions51312  ch11       thegetdata function asks user gpa student number publi cations professor themain program inmain user enter number student teacher names students program asks gpa professors asks number publications user finished program prints names students professors noting outstanding sampleinteraction enter student professor senter timmyenter student gpa   enter yenter student professor senter brenda enter student gpa   enter yenter student professor senter sandy enter student gpa   enter yenter student professor penter shipley enter number professor publications  enter yenter student professor penter wainright enter number professor publications  enter nname timmy brendathis person outstandingname sandy shipleythis person outstandingname wainrightvirtual functions graphics examplelet anotherexample virtual functions graphics derived multshap program chapter  inheritance draw number shapes statement virtshap programdoes remember build program console graphics file appendix console graphicslite chapter   ch11       virtshap cpp virtual functions shapes include iostream namespace std include msoftcon graphics functions class shape base class protected int xco yco coordinates center color fillcolor color fstyle fillstyle patternpublic arg constructorshape xco  yco  fillcolor cwhite fillstyle solid_fill  arg constructorshape int int color fstyle xco yco fillcolor fillstyle virtual void draw  pure virtual draw function set_color fillcolor set_fill_style fillstyle class ball public shape private int radius xco yco centerpublic ball shape arg constr  arg constructorball int int int color fstyle shape radius void draw draw ball shape draw draw_circle xco yco radius class rect public shape virtual functions11virtual functions51512  ch11       private int width height xco yco upper left cornerpublic rect shape height  width  arg ctor  arg ctorrect int int int int color fstyle shape height width void draw draw rectangle shape draw draw_rectangle xco yco xco width yco height set_color cwhite draw diagonal draw_line xco yco xco width yco height class tria public shape private int height xco yco pyramidpublic tria shape height  arg constructor  arg constructortria int int int color fstyle shape height void draw draw triangle shape draw draw_pyramid xco yco height int main int init_graphics initialize graphics systemshape pshapes  array pointers shapes define shapespshapes  ball    cblue x_fill pshapes  rect     cred solid_fill pshapes  tria    cgreen medium_fill chapter   ch11         draw shapespshapes draw   delete shapesdelete pshapes set_cursor_pos   return  class specifiers virtshap multshap draw func tion shapeclass pure virtual function inmain set array ptrarr pointers shapes create objects class place addresses array easy draw shapes statementptrarr draw loop variable jchanges powerful approach combining graphics elements large number objects grouped anddrawn unit virtual destructorsbase class destructors shouldalways virtual suppose deletewith base classpointer derived class object destroy derived class object base class destructor virtual delete normal member function calls destructor base class destructor derived class base object destroyed virtdest program vertdest cpp tests virtual virtual destructors include iostream namespace std class base public base virtual destructor virtual base virtual destructor cout base destroyed class derv public base virtual functions11virtual functions51712  ch11       public derv cout derv destroyed int main base pbase derv delete pbase return  output program written isbase destroyedthis destructor dervpart object called listing base class destructor virtual commenting definition destructor substituting output derv destroyedbase destroyednow parts derived class object destroyed properly destructors deleting memory virtualdestructors general ensure derived class objects destroyed properly destructors base classes virtual class libraries base class includes virtual destructor ensures derived classes virtual destructors virtual base classesbefore leaving subject virtual programming elements mention virtual baseclassesas relate multiple inheritance situation figure   base class parent derived classes child1andchild2 fourth class grandchild derived child1andchild2 arrangement problem member function grandchildclass access data functions parentclass normbase program chapter   ch11       figure11 virtual base classes normbase cpp ambiguous reference base classclass parent protected int basedata class child1 public parent class child2 public parent class grandchild public child1 public child2 public int getdata return basedata error ambiguous compiler error occurs getdata member function grandchildattempts toaccessbasedatainparent child1andchild2classes derived parent inherits copy parent copy called subobject subob jects copy parent data including basedata grandchildrefers basedata copies access situation ambiguous compiler reports virtual functions11virtual functions519parentchild2child1grandchild   ch11       eliminate ambiguity child1andchild2into virtual base classes virtbase virtbase cpp virtual base classesclass parent protected int basedata class child1 virtual public parent shares copy parent class child2 virtual public parent shares copy parent class grandchild public child1 public child2 public int getdata return basedata copy parent keyword virtualin classes share single common subobject base class parent copy basedata noambiguity itis referred grandchild virtual base classes conceptual problem multipleinheritance caution friend functionsthe concepts encapsulationand data hiding dictate nonmember functions access object private protected data policy member situations rigid discrimination leads toconsiderable inconvenience friends bridgesimagine wanta function operate objects classes function objects classes arguments operate private data situation friendfunction simple friend thatshows friendfunctions bridge classes friend cpp friend functionschapter   ch11       include iostream namespace std class beta needed frifunc declarationclass alpha private int data public alpha data  arg constructor friend int frifunc alpha beta friend function class beta private int data public beta data  arg constructor friend int frifunc alpha beta friend function int frifunc alpha beta function definition return data data int main alpha aa beta bb cout frifunc aa bb endl functionreturn  program classes alphaandbeta constructors classes initialize single data items fixed values  alphaand  beta ant function frifunc access private data members friendfunction declared friendkeyw ordin classes friend int frifunc alpha beta declaration class matter publicor privatesection virtual functions11virtual functions52112  ch11       object class passed argument function frifunc accesses theprivate datamember classes arguments function adds data items returns sum main program calls function printsthe result minor point remember class referred declared class betais referred declaration function frifunc class alpha betamust bedeclared alpha declarationclass beta program breaching walls note thatfriendfunctions controversial development argu ments raged desirability including feature hand adds flexibility language keeping data hiding philosophy onlymember functions access class private data breach data integrity friendfunctions friendfunctionmust declared class data access programmer access source code class function friend inthis respect integrity class protected friendfunctions conceptu ally messy lead spaghetti code situation numerous friends muddy theclear boundaries classes reason friendfunctions sparingly friends rethink design program english distance examplehowever friendfunctionsare convenient avoid common friends increase versatility overloaded operators fol lowing program limitation operators friends variation englplusandenglconvprograms chapter  operator overloading called nofri nofri cpp limitation overloaded operator include iostream namespace std class distance english distance class private int feet float inches chapter   ch11       public distance feet  inches   constructor args constructor arg distance float fltfeet convert float distance feet integer partfeet static_cast int fltfeet inches  fltfeet feet inches left distance int float constructor args feet inches void showdist display distance cout feet inches distance operator distance add distance d2distance distance operator distance return sum int feet feet add feet float inches inches add inches   total exceeds      inches  footreturn distance return distance sum int main distance d1   constructor converts distance   float feet distance distance d3 cout nd1 d1 showdist cout nd2 showdist d3 d1   distance float okcout nd3 d3 showdist d3   d1 float distance error cout nd3 d3 showdist cout endl return  program operator overloaded add objects type distance argument constructor converts type float representing feet deci mal fractions feet distancevalue converts     virtual functions11virtual functions52312  ch11       constructor exists statements main d3 d1   overloaded objects type distanceboth left argument type float compiler argument constructor convert floatto distancevalue carry addition appears subtle variation statement d3   d1 work object overloaded operator member mustbe variable left operator place variable type constant compiler operator adds type floatin case adds distanceobjects operator convert floattodistance handle situation output nofri d1     d3   addition compile statements commented problem creating object type distance d3 distance   d1 nonintuitive inelegant write natural statements nonmember data types left operator guessed friendcan helpyou dilemma frenglprogram frengl cpp friend overloaded operator include iostream namespace std class distance english distance class private int feet float inches public distance constructor args feet  inches   distance float fltfeet constructor arg convert float distance feet int fltfeet feet integer inches  fltfeet feet inches left chapter   ch11       distance int float constructor args feet inches void showdist display distance cout feet inches friend distance operator distance distance friend distance operator distance d1 distance add d1 int d1 feet feet add feet float d1 inches inches add inches   inches exceeds      inches  footreturn distance return distance sum int main distance d1   constructor converts distance   float feet distance distance d3 cout nd1 d1 showdist cout nd2 showdist d3 d1   distance float okcout nd3 d3 showdist d3   d1 float distance cout nd3 d3 showdist cout endl return  overloaded operator friend friend distance operator distance distance notice overloaded operator argument member function takes friendfunction member function objects operates isthe object member argument friend objectsmust arguments change body overloaded function variables feetandinches nofrifor direct access object data replaced frenglbyd1 feetandd1 inches object supplied argument virtual functions11virtual functions52512  ch11       remember function friend function declaration class preceded thekeyword friend class definition written calls function friends functional notationsometimes friendallows amore obvious syntax calling function member function suppose function square multiply object english distanceclass return result square feet type float themisqexample member function misq cpp member square function distance include iostream namespace std class distance english distance class private int feet float inches public constructor args distance feet  inches   constructor args distance int float feet inches void showdist display distance cout feet inches float square member function float distance square return square distance float fltfeet feet inches  convert float float feetsqrd fltfeet fltfeet square return feetsqrd return square feet int main distance dist    arg constructor   float sqft sqft dist square return square dist display distance squarechapter   ch11       cout ndistance dist showdist cout nsquare sqft square feet return  themain program creates distancevalue squares prints result output original distance square distance   square   square feetinmain statementsqft dist square square distand assign sqft works work withdistanceobjects syntax ordinary numbers prefer functionalnotation sqft square dist achieve making square afriendof distanceclass frisq frisq cpp friend square function distance include iostream namespace std class distance english distance class private int feet float inches public distance feet  inches   constructor args constructor args distance int float feet inches void showdist display distance cout feet inches friend float square distance friend function float square distance return square distancevirtual functions11virtual functions52712  ch11       float fltfeet feet inches  convert floatfloat feetsqrd fltfeet fltfeet square return feetsqrd return square feet int main distance dist    arg constructor   float sqft sqft square dist return square dist display distance squarecout ndistance dist showdist cout nsquare sqft square feet return  whereassquare takes arguments member function misq takes friendinfrisq general friendversion function requires argument function member square function frisqis misq refersto data source distanceobjectas feetandd inches feetandinches friendclassesthe member functionsof class friends time entire class friend program friclassshows friclass cpp friend classes include iostream namespace std class alpha private int data1 public alpha data1  constructor friend class beta beta friend class class beta member functions canchapter   ch11       public access private alpha datavoid func1 alpha cout ndata1 data1 void func2 alpha cout ndata1 data1 int main alpha beta func1 func2 cout endl return  class alphathe entire class betais proclaimed friend member functions betacan access private data alpha program single data item data1 note frienddeclaration betais class classkeyw friend class beta declared betato class alphaclass specifier inprevious examplesclass beta alpha erred betawithout theclasskeyw friend beta static functionsin static examplein chapter  objects classes introduced staticdata mem bers recall static data member duplicated object single data item shared objects class static class track objects extend concept showing functions data static showing static functions model class number objects query object object capability debugging program situations program casts light operation destructors thelisting statfunc statfunc cpp static functions numbers objects include iostream namespace std virtual functions11virtual functions52912  ch11       class gamma private static int total total objects class declaration int number objectpublic gamma argument constructor total add object total equals current total gamma destructor total cout destroying number endl static void showtotal static function cout total total endl void showid static function cout number endl int gamma total  definition total int main gamma g1 gamma showtotal gamma g2 g3 gamma showtotal g1 showid g2 showid g3 showid cout program return  chapter   ch11       accessingstaticfunctionsin program static data member total class gamma data track objects class incremented constructor decre mented destructor suppose access totalfrom class construct function showtotal prints total access function data member declared static data entire class matter objects class created fact objects learn fact create dummy object calling member function gamma dummyobj object functiondummyobj showtotal functionbut inelegant refer specific object relates entire class reasonable class scope resolution operator gamma showtotal reasonablehowever work showtotal normal member function object dot member access operator required cases access showtotal class declare staticmember function statfunc declaratorstatic void showtotal function accessed classname output total total  number  number  number  program destroying number  destroying number  destroying number we define object g1 print total  define objects g2andg3 print outthe total  virtual functions11virtual functions53112  ch11       numbering objectswe anotherfunction gamma print number individual members number set equal totalwhen object created object unique number showid function prints object times main statementsg1 showid g2 showid g3 showid output object unique number g1object isnumbered  g2is  andg3is  investigating destructorsnow knowhow number objects investigate interesting fact destruc tors statfunc prints program message statement output objects created program destroyed pro gram terminates memory left inaccessible state compiler takes care invoking destructor inserting statement destructor prints message numbered objects order objects destroyed output object created g3 destroyed infer approach local objectsare stored stack assignment copy initializationthe compiler busy behalf things bothered charge defer judgment things examples process assignment operator copy constructor assignment operator times thinking supposea1anda2are objects compiler statement set a1will compiler copy data member member default action assignment operator familiar initializing variables initializing object object alpha initialize a1chapter   ch11       action compiler creates object copies data member member default action thecopy constructor default activities provided free charge compiler member member copying action assignment initialization complex override default func tions discuss techniques overloading assignment operator copy structor separately stringclass moreefficient manage memory introduce uml feature object diagram overloading assignment operatorlet shortexample demonstrates technique overloading assignment operator listing assign assign cpp overloads assignment operator include iostream namespace std class alpha private int data public alpha arg constructor alpha int arg constructor data void display display data cout data alpha operator alpha overloaded operator data data automatically cout nassignment operator invoked return alpha data return copy alpha int main alpha  alpha virtual functions11virtual functions53312  ch11       invoke overloaded cout na2 display display a2alpha invoke cout na3 display display cout endl return  thealphaclass simple data member constructors initialize data member function print aspect assignis thefunction operator overloads operator inmain define a1and  define a2but assignment operator set a2to assignment statementthis overloaded operator function invoked output assign assignment operator invoked  initialization assignmentin lines assign initialize object a3to a2and display confused syntax equal sign alpha copy initialization assignmentis assignment initialization alpha alternative form copy initializationthis assignment operator executed single invocation lineassignment operator invokedin outputof assign responsibilitywhen overload operator assume responsibility default assignment operator involves copying data members object thealphaclass assignhas data item data operator functioncopies statementdata data chapter   ch11       function prints assignment operator invokedmessage whenit executes passing reference notice argument operator passed reference absolutely necessaryto good idea argument passed gen erates copy function passed argument passed operator function exception objects large copies waste lot memory values passed reference generate copies conserve memory situations track number objects statfunc assigned numbers objects compiler gener ating extra objects time assignment operator wind objects expected passing reference helps avoid spurious object creation returning afunction return calling program refer ence object returned object created returned calling program calling program object assigned object ways object returned reference object created reference original object thefunction returned calling program theoperator function assignreturns creating temporary alphaobject andinitializing argument constructor statement return alpha data returned copy object object overloaded operator member returning tochain operators returning disadvantages passing argument creates extra copy wastes memory confusion return reference declarator overloaded operator alpha operator alpha bad idea caseunfortunately reference returns variables local function remember local automatic variables created function designatedstatic destroyed function returns return reference returns address data returned local data address points data function function terminated data destroyed pointer left meaningless compiler flag usage warning solve problem thispointer chapter virtual functions11virtual functions53512  ch11       inheritedthe assignment operator unique operators inherited overload assignment operator base class thissame function derived classes copy constructoras discussed youcan define time initialize object object kinds statements alpha copy initializationalpha copy initialization alternate syntaxboth styles definition invoke copy constructor constructor creates object copies argument default copy constructor provided automatically compiler object performs member member copy assignment operator difference copy constructor creates object assignment operator copy constructor overloaded theuser xofxrefexample xofxref cpp copy constructor include iostream namespace std class alpha private int data public alpha arg constructor alpha int arg constructor data alpha alpha copy constructor data data cout ncopy constructor invoked void display display cout data void operator alpha overloaded operator data data cout nassignment operator invoked chapter   ch11       int main alpha  alpha invoke overloaded cout na2 display display a2alpha invoke copy constructor alpha equivalent definition a3cout na3 display display a3cout endl return  program overloads assignment operator copy constructor overloaded assignment operator assignexample copy constructor takes argument object type alpha passed reference declarator alpha alpha declarator form pronounced output xofxref assignment operator invokeda2  copy constructor invoked the statementa2 invokes assignment operator alpha invokes copy constructor equivalent statement alpha toinvoke copy constructor copy constructor invoked object defined invoked arguments passed functions values returned functions discuss situations virtual functions11virtual functions53712  ch11       function argumentsthe copy constructoris invoked object passed function creates copy function operates function void func alpha declared xofxref function called statementfunc copy constructor invoked create copy a1object byfunc copy constructor invoked argument passed reference pointer passed cases copy created function operates original variable function return values copy constructoralso creates temporary object returned function suppose function xofxrefalpha func function called statement func copy constructor invoked create copy returned func andthis assigned invoking theassignment operator constructor reference argument copy constructor pass compiler complains memoryif compilealpha alpha argument passed copy constructed copy copy constructor isthe copy constructor calls fact calls compiler runs memory copy constructor argument passed reference creates copies watch destructorsin sections passing reference returning discussed passing argu ments function returning situations destructor called temporary objects created function destroyed function returns considerable consternation expecting moral working objects require member member copying pass return reference byvalue chapter   ch11       define copy constructor assignment operatorwhen overload assignment operator overload copy constructor vice versa custom copying routine situations default member member scheme compiler nonobvious situations passing argument function returning function fact constructor class involves resources memory disk files overload assignment operator copy structor theydo prohibit copying discussed howto customize copying objects assignment operator copy constructor prohibit copying object operations essential member class cre ated unique member provided argument construc tor object copied copy avoid copying overload assignment operator copy constructor private members class alpha private alpha operator alpha private assignment operator alpha alpha private copy constructor attempt copying operation alpha assignment alpha copy constructorthe compiler function accessible define func tions called uml object diagramswe examples class diagrams previous chapters surprise uml supports object diagrams object diagrams depict specific objects instance mike_gonzalezobject professorclass relation ships objects change program operation objects created destroyed object diagram snapshot representing objects moment time staticuml diagram object diagram model thing program freeze pro gram moment time objects participate behavior inter ested communications objects point time virtual functions11virtual functions53912  ch11       object diagrams objects represented rectangles classes class diagrams object attributes operations objects distinguished classes names underlined object class separated colon anobj aclassif object pointer exam ple class preceded colon aclasslines objects called links represent object communicating withanother navigability attribute equal sign count notice semicolon uml uml feature encounter note notes rectangles dog eared turned corner hold comments explanations dotted connects note relevent element diagram associations links note refer element inside class object rectangle notes kind ofuml diagram number object diagrams balance chapter memory efficient stringclasstheassignandxofxrefexamples overloaded assignment operators copy constructors straightforward classes data item default assignment operator copy constructor work essential user overload operators defects stringclasswe versions homemade stringclass previous chapters versions sophisticated nice overload operator wecould assign stringobject statements2 s1 overload operator question arises handle actual string array type char principal data item stringclass possibility stringobject place store string assign stringobject s1intos2in previous statement simply copy string source destination object concerned conserving memory chapter   ch11       problem string exists places memory efficient strings long figure   showshow virtual functions11virtual functions541s1 string str string memory string str string memory s1 string strs2 string str string memory figure11 uml object diagram replicating strings stringobject char string arrange pointerto string assign stringobject copy pointer object pointers point string efficient single copy string stored memory figure   figure11 uml object diagram replicating pointers strings careful destroy stringobject astring structor deleteto free memory occupied string objects pointers pointing string objects left pointers pointing memory longer hold string dan gling pointers   ch11       pointers strings stringobjects track stringobjects point string avoid deleteon string thelaststringthat points deleted nextexample strimem string counter classsuppose stringobjects pointing string count strings point string store count cumbersome stringobject maintain count fellow strings pointing string member variable stringfor count static variable possibility create static array store list ofstring addresses counts requires siderable overhead efficient create class store count object class strcount count pointer string eachstringobject pointer strcountobject figure   chapter s1 string pscs2 string pscs3 string pscs4 string psc strcount strcountcount strcount str adifferent long string s5 string psc string memory figure11 stringandstrcountobjects   ch11       ensure stringobjects access strcountobjects stringafriendofstrcount ensure strcountclass stringclass prevent access functions member functions strcountprivate becausestringis friend access strcount listing forstrimem strimem cpp memory saving string class overloaded assignment copy constructor include iostream include cstring strcpy namespace std class strcount track number unique strings private int count number instances char str pointer string friend class string member functions private strcount char arg constructor int length strlen length string argument str char length  memory string strcpy str copy argument count  start count  strcount destructor delete str delete string class string string class private strcount psc pointer strcountpublic string arg constructor psc strcount null string char  arg constructor psc strcount string string copy constructor virtual functions11virtual functions54312  ch11       psc psc psc count string destructor psc count  user delete psc delete strcountelse psc count decrement count void display display string cout psc str print string cout addr psc print address void operator string assign string psc count  user delete psc delete strcountelse psc count decrement countpsc psc argument strcount psc count increment count int main string s3 fox preaches geese cout ns3 s3 display display s3string s1 define strings1 s3 assign string cout ns1 s1 display display itstring s3 initialize stringcout ns2 display display cout endl return  chapter   ch11       main strimemwe define stringobject s3 proverb fox preaches geese define strings1 set equal s3 wedefine s2and initialize s3 setting s1equal s3invokes overloaded assignment oper ator initializing s2tos3invokes overloaded copy constructor print strings address strcountobject pointed object pscpointer objects theoutput strimem s3 fox preaches geese addr x8f510e00 s1 fox preaches geese addr x8f510e00 fox preaches geese addr x8f510e00 duties stringclass divided stringandstrcountclasses thestrcountclassthestrcountclass pointer actual string count stringclass objects point string single constructor takes pointer string argu ment creates memory area string copies string area sets count  stringpoints created destructor strcountfrees memory string delete bracketsbecause string array thestringclassthestringclass constructors string created argument string argument constructors strcountobject created hold thestring pscpointer set point object existing stringobject beingcopied copy constructor overloaded assignment operator pointer pscisset point tothe strcountobject count object incremented overloaded assignment operator destructor delete strcountobject pointed pscif count  brackets deletebecause deleting single strcount object assignment operator worry deletion remember stringobject left equal sign s1 pointing strcountobject oldstrcnt assignment assignments1will pointing object equal sign stringobjects pointing oldstrcnt deleted objects pointingto count decremented figure   action overloaded assign ment operator figure11  copy constructor virtual functions11virtual functions54512  ch11       figure11 assignment operator strimem chapter s3 string pscs1 string psc strcountbefore execution s1 execution s1 count str fox preaches strcountcount str null s3 string pscs1 string psc strcountcount str fox preaches s3 string psc strcountbefore execution string s3 execution string s3 count  str fox preaches s3 string pscs2 string psc strcountcount  str fox preaches figure11 copy constructorin strimem   ch11       thethispointerthe member functionsof object access sort magic pointer named points object member function address object member short mechanism cpp pointer include iostream namespace std class private char charray  occupies  bytespublic void reveal cout nmy object address int main w1 w2 w3 objects w1 reveal w2 reveal w3 reveal cout endl return  themain program creates objects type asks eachobject print address reveal member function function prints val thispointer sthe output object address x8f4effec object address x8f4effe2 object address x8f4effd8since data object consists array  bytes objects spaced  bytes memory minus  minus d8 compilers place extra bytes objects makingthem larger  bytes accessing member data thiswhen memberfunction existence thisset theaddress object called thispointer treated pointer object access data object points dothis program virtual functions11virtual functions54712  ch11       dothis cpp pointer referring data include iostream namespace std class private int alpha public void tester alpha  alpha  cout alpha cout alpha int main tester cout endl return  program simply prints  notice tester member functionaccesses variable alphaasthis alphathis referring alphadirectly syntax works rea son thisdoes pointto object usingthisfor returning values practical usefor thisis returning values member functions overloaded operators recall assignprogram return object reference object local function returning destroyed function returned permanent object return reference object function member permanent individual member functions object member functions created destroyed time called object endures destroyed agency deleted thusreturning reference object function member bet returning temporary object created member function thispointer easy chapter   ch11       listing assign2 operator function returns byreference object invoked assign2 cpp returns contents pointer include iostream namespace std class alpha private int data public alpha arg constructor alpha int arg constructor data void display display data cout data alpha operator alpha overloaded operator data data automatically cout nassignment operator invoked return return copy alpha int main alpha  alpha invoke overloaded twicecout na2 display display cout na3 display display cout endl return  program declarationalpha operator alpha returns reference alpha operator alpha returnsby statement function return virtual functions11virtual functions54912  ch11       sincethisis pointer object function member thisis objectitself statement returns itby reference output assign2 assignment operator invokedassignment operator invoked  each time equal sign encountered ina3 overloaded operator function called prints messages objects return reference overloaded assignment operators avoi creation extra objects revisedstrimemprogram thispointer revise operator function strimemto return reference making multiple assignment operators stringobjects s1 s3 time avoid creation spurious objects created objects returned listing strimem2 strimem2 cpp memory saving string class pointer overloaded assignment include iostream include cstring strcpy namespace std class strcount track number unique strings private int count number instances char str pointer string friend class string member functions privatestrcount char arg constructor int length strlen length string argument str char length  memory string strcpy str copy argument count  start count  chapter   ch11       strcount destructor delete str delete string class string string class private strcount psc pointer strcountpublic string arg constructor psc strcount null string char  arg constructor psc strcount string string copy constructor cout ncopy constructor psc psc psc count string destructor psc count  user delete psc delete strcountelse psc count decrement count void display display string cout psc str print string cout addr psc print address string operator string assign string cout nassignment psc count  user delete psc delete strcountelse psc count decrement countpsc psc argument strcount psc count increment countvirtual functions11virtual functions55112  ch11       return return object int main string s3 fox preaches geese cout ns3 s3 display display s3string s1 define stringss1 s3 assign cout ns1 s1 display display cout ns2 display display cout endl wait keypress return  declarator operator isstring operator string return referenceand assign2 function returns pointer output s3 fox preaches geese addr x8f640d3a assignment assignment s1 fox preaches geese addr x8f640d3a fox preaches geese addr x8f640d3a output assignment statement stringobjects point tothe strcountobject note thispointer static member functions particularobject beware assignment corollary ofmurphy law states eventually true programming expect overloaded operator set object equal alpha alpha overloaded assignment operator prepared handle assignment bad things happen main strimem2pr ogram set stringobject equal program crash stringobjects strcountobject problem code assignment oper ator deletes strcountobject thinks object called object thestrcount assignment deleted chapter   ch11       check assignment start overloaded assignment operator cases comparing address object operator called address argument addresses objects identical return assign strimem2 insert lines return start operator solve problem dynamic type tofind object class change class object runtime mechanisms dynamic_castoperator typeidoperator advanced capabilities someday capabilities situations variety classes descended complicated ways base class dynamic casts work base class polymorphic virtual function dynamic_castandtypeidto work compiler enable time type rtti borland builder capability enabled default microsoft visual turn overtly appendix microsoft visual details include theheader file typeinfo checking type class dynamic_castsuppose program sends program object operating callback function supposed type object check object type dynamic_castoperator pro vides assuming classes objects check descended common ancestor dyncast1program dyncast1 cpp dynamic cast test type object rtti enabled compiler include iostream include typeinfo dynamic_cast namespace std class base virtual void vertfunc needed dynamic cast virtual functions11virtual functions55312  ch11       class derv1 public base class derv2 public base checks punknown points derv1 bool isderv1 base punknown unknown subclass base derv1 pderv1 pderv1 dynamic_cast derv1 punknown return true elsereturn false int main derv1 d1 derv1 derv2 derv2 isderv1 d1 cout d1 member derv1 class elsecout d1 member derv1 class isderv1 cout member derv1 class elsecout member derv1 class return  base class baseand derived classes derv1andderv2 func tion isderv1 returns true pointer received argument points object class derv1 argument class base object passed derv1orderv2 dynamic_castoperator attempts convert unknown pointer punknownto typederv1 result punknowndid point derv1object theresult pointed changing pointer types dynamic_castthedynamic_castoperator cast upward downward inheritance tree casting limited ways dyncast2program examples casts chapter   ch11       dyncast2 cpp tests dynamic casts rtti enabled compiler include iostream include typeinfo dynamic_cast namespace std class base protected int public base  base int virtual void vertfunc needed dynamic_cast void cout base endl class derv public base private int public derv int int void cout derv endl int main base pbase base  pointer base derv pderv derv   pointer derv derived base upcast points base subobject dervpbase dynamic_cast base pderv pbase base  pbase derv   normal base derived downcast pbase point derv pderv dynamic_cast derv pbase pderv derv   return  virtual functions11virtual functions55512  ch11       base derived class classes data item bet ter demonstrate effects dynamic casts upcast attempt change derived class object base class object base derived class object object class derv base class object holds member data  derived holds data member  cast pbasepoints thebase class dervclass object called display prints base  upcasts fine base object downcast derived class object pointed abase class pointer derived class pointer thetypeidoperatorsometimes object simple verification class type unknown object class typeidoperator typeidprogram demonstrates works typeid cpp demonstrates typeid function rtti enabled compiler include iostream include typeinfo typeid namespace std class base virtual void virtfunc needed typeid class derv1 public base class derv2 public base void displayname base pb cout pointer object display class cout typeid pb endl pointed pb int main base pbase derv1 chapter   ch11       displayname pbase pointer object class derv1 pbase derv2 displayname pbase pointer object class derv2 return  displayname function displays class object passedto namemember type_infoclass typeidopera tor main pass function objects class derv1andderv2respectively program output pointer object class derv1 pointer object class derv2besidesits class typeid check equality classes overloaded operator empl_ioprogram chapter  streams files examples pointers dynamic_castandtypeidwork equally wellwith references summaryvirtual functions provide program decide running function ordinarily decisions compile time virtual functions greater flexibility performing kind action kinds objects partic ular functions called array type pointer base holds pointers references variety derived types polymor phism typically function declared virtual base class functions declared derived classes pure virtual functions class class abstract meansthat objects instantiated afriendfunction access class private data member function class function access unrelated classes overloaded operator left class member friends facilitate functional notation astaticfunction operates class general objects class operate static variables called class scope resolution operator virtual functions11virtual functions55712  ch11       assignment operator overloaded copy object contents copy constructor creates copies initialization arguments passed returned overloaded copy constructor simply copy object thethispointer predefined member functions point object func tion member thispointer returning object function amember thedynamic_castoperator plays roles determine type object pointer points situations change type pointer typeidoperator discover object class uml object diagram relationship group objects specific point program operation questionsanswers questions appendix  virtual functions create array type pointer base class hold pointers derived classes create functions accessed group objects classes accessed function code function execute member functions objects classes  true false pointer base class point objects derived class  pointer pto objects base class address object derived class classes nonvirtual member function ding thestatementp ding version ding ________ class exe cuted  write declarator virtual function called dang returns type voidand takes argument type int  deciding program starts execute function executed partic ular function statement called ________  pointer objects base class address object derived class classes virtual member function ding state mentp ding version ding ________ class executed chapter   ch11        write declaration pure virtual function called aragornthat returns takes arguments  pure virtual function virtual function class abstract turns base class takes arguments  write definition array called parrof  pointers objects class dong  abstract class classes derived multiple paths derived class objects instantiated defer declaration class  true false friendfunction access class private data mem ber class  friendfunction toa mediate arguments classes access classes source code unavailable access unrelated class increase versatility overloaded operator  write declaration friendfunction called harry returns type voidandtakes argument class george  keyword friendappears ina class allowing access class class desiring access class private class public class  write declaration class appears member classharryafriendfunction  static function called object destroyed closely connected individual object class called class function dummy object created virtual functions11virtual functions55912  ch11        explain default assignment operator applied objects  write declaration overloaded assignment operator class zeta  assignment operator overloaded track number identical objects assign separate number object ensure member data copied signal assignment takes place  true false user define operation copy constructor  operation assignment operator copy constructor copy constructor creates object assignment operator copies member data create object copy member data  write declaration copy constructor class called bertha  true false copy constructor defined copy object data  lifetime variable local member function coincides lifetime function global coincides lifetime class nonstatic member data object coincides lifetime object static member function coincides lifetime function  true false problem returning variable defined local member function long returned  explain difference operation statements person p0 person p0  copy constructor invoked function returns argument passed function returns reference argument passed reference  thispointer point  class dais member variable statement  assign37 chapter   ch11        write statement member function return entire object member creating temporary objects  object rectangle object diagram represents general group objects class instance class objects class  lines objects uml object diagram called _________  true false object relate object time  object diagrams objects exist point time objects communicating point time objects participate behavior program objects operations member functions objects classes exercises answers starred exercises appendix  imagine publishing company exercise  chapter  markets book audiocassette versions works exercise create class calledpublicationthat stores title string price type float publication class derive classes book adds count type int tape adds playing time minutes type float classes agetdata function data user keyboard putdata function display data write main program creates array pointers publication virtpers chapter loop user data book tape newto create object type bookortapeto hold data putthe pointer object array user finished entering data books tapes display data books tapes entered forloop single statement aspubarr putdata display data object array virtual functions11virtual functions56112  ch11        distanceclass frenglandfrisqexamples chapter create overloaded operator distances multiplied friendfunction expressions wdist1   dist2 argument constructor convert floating point values distancevalues write main program test operator ways  earlier class acts array clarray complete program create array class clarray cpp creates array class include iostream namespace std class array models normal array private int ptr pointer array contents int size size arraypublic array int argument constructor size argument size array ptr int space array array destructor delete ptr int operator int overloaded subscript operator return ptr int main const int asize  size array array arr asize arrayfor int  asize squaresarr  asize display contentscout arr cout endl return  chapter   ch11       output program is0         starting clarray add overloaded assignment operator overloaded copy constructor arrayclass add statements array arr2 arr1 andarr3 arr1 main program test overloaded operators work copy structor create arrayobject memory storing array elements copy constructor assignment operator copy contents arrayobject assign arrayofone size arrayof size  start program exercise  chapter add member function type boolcalledisoversize bookandtapeclasses book  tape playing time longer  minutes require cassettes considered oversize access function main display string oversize oversize books tapes display data bookandtapeobjects accessed pointers arestored array type publication add publicationbase class instantiate members base class  start program exercise  chapter  overloaded arithmetic operators money strings add operators overloaded exercise operations long double bmoney number times moneylong double bmoney number divided moneyrequirefriendfunctions object appears operator numerical constant appears left main program user enter money strings floating point carries arithmetic operations pairs values  previous exercise start program exercise  chapter  time add function rounds bmoneyvalue nearest dollar mo2 round mo1 amounts   rounded   rounded library function called modfl separates type longdoublevariable fractional integer fractional   return integer add   main function send ing sequence bmoneyamounts     virtual functions11virtual functions56312  ch11        remember parseprogram chapter  nice improve pro gram evaluate expressions real numbers type float single digit numbers          as step goal develop stack hold operators typechar numbers type float store types stack basically array type charand type floataren size store pointers types size compiler store type char type float array types pointers stored array derived base class encapsulate charin class floatin arrange classes derived base class store kinds pointers array pointers base class base class data abstract class objects instantiated constructors store values derived classes usual pure virtual functions values scenario class token abstract base class public virtual float getnumber  pure virtual functions virtual char getoperator  class operator public token private char oper operators public operator char constructor sets char getoperator float getnumber dummy function class number public token private float fnum numberpublic number float constructor sets float getnumber char getoperator dummy function token atoken  holds types operator number chapter   ch11       base class virtual functions instantiated derived classes classes abstract operandclass getnumber function store number numberclass getoperand thoughit store operand expand framework working program adding stackclass holds tokenobjects main pushes pops operators floating point numbers   stack  twist horseexample chapter  making class extra competitive horses assume horse ahead halfway point race starts feel oats unbeatable horse class derive class called comhorse competitive horse overload horse_tick function inthis class horse check runner horse close   furlong speed bit win time decided advantage horse horses access memory holds horseprogram harray careful create comhorses horses comhorseclass overload harray derive track class comtrack create comhorses continuously check horse ahead leading horse small margin accelerate horse bit  exercise  chapter  involved adding overloaded destructor linklistclass suppose object destructor enhanced class data assign entire class statement aslist2 list1 default assignment operator suppose delete list1object list2to access data list1was deleted destructor deleted links data contained linklistobject apointer link links pointer list2becomes invalid attempts access list lead meaningless values program crash overload assignment operator copies data links linklistobject follow chain copy ing link turn earlier overload copy constructor delete linklistobjects main create pointers easier test routines worry copy process reverses order data notice copying data efficient terms memory usage contrast approach strimemexample chapter  set data objects track objects pointed data virtual functions11virtual functions56512  ch11        carry modification discussed exercise  parseprogram chapter  parse expressions floating point numbers combine classes exercise  algorithms parse operate pointers tokens characters involves statements kind number ptrn number ans push ptrn andoperator ptro operator push ptro chapter   ch11       chapter12streams files chapter stream classes568 stream errors577 disk file streams583 file pointers597 error handling file o601 file member functions604 overloading extraction insertionoperators616 memory stream object620 command arguments622 printer output624   ch12       chapter this chapter focuses stream classes start hierarchy classes arranged summarize features largest chapter devoted showing perform file activities streams read write data files variety ways handle errors files oop chapter examine fea tures files including memory text formatting command argu ments overloading insertion extraction operators sending data printer stream classes astream generalname flow data stream represented object class cinandcoutstream objects streams represent kinds data flow ifstreamclass represents dataflow input disk files advantages streams programmers advantages stream classes traditional functions printf andscanf files fprintf fscanf reason simplicity dformatting character finprintf formatting characters streams object display removes major source errors reason overload existing operators functions insertion extraction operators work classes create classes work built types programming easier error free mention aesthetically satisfying stream plan program environment graphical user interface windows direct text output screen streams write data files format data memory text input output windows gui elements stream class hierarchy stream classes arearranged complex hierarchy figure   arrange ment classes   ch12       figure12 stream class hierarchy extensive stream classes extraction operator amember theistreamclass insertion operator member ostreamclass classes derived iosclass coutobject representing standard output stream directed video display predefined object ostream_withassignclass derived ostreamclass cinis anobject istream_withassignclass derived istream classes input output video display keyboard declared header file iostream routinely included examples previous chapters classes disk file declared file fstream figure   classes headerfiles manipulators declared iomanip memory classes declared strstream educational print header files trace relationships classes piler includesubdirectory questions streams answered studying class constant declarations streams files12streamsandfiles569iospointerstreambuf iostreamistream withassigniostream withassignostream withassigniostreamfstreamostreamistreamfstreambasefilebuf ofstreamfstreamifstream13  ch12       figure   iosclassis base class hierarchy constants member functions common input output operations kinds showpointandfixedformatting flags iosclass alsocontains pointer streambufclass actual memory buffer data read written low level routines handling data ordinarily worry streambufclass isreferenced automatically classes theistreamandostreamclassesare derived iosand dedicated input output istreamclass functions getline read theoverloaded extraction operators ostreamcontainsput andwrite loaded insertion operators theiostreamclass isderived istreamandostreamby multiple inheritance classesderived devices disk files opened input output time classes istream_withassign ostream_withassign andiostream_withassign inherited istream ostream iostream res pectively theyadd assignment operators classes summary stream classes abstract skim return perform stream activity theiosclasstheiosclass isthe granddaddy stream classes majority fea tures operate streams features formatting flags error status flags file operation mode formatting flags error status flags save file operations mode talk disk files formatting flagsforma tting flags set enumdefinitions ios switches choices aspects input output format operation provide detailed discussion flag explanatory discuss chapter table   complete list formatting flags chapter   ch12       table12 ios formattingflags flagmeaning skipwsskip ignore whitespace inputleftleft adjust output   rightright adjust output   internaluse paddingbetween sign base indicator number   decconvert octconvert tooctal hexconvert tohexadecimal boolalphaconvert bool true false strings showbaseuse base indicator output  octal x hex showpointshow decimalpoint output uppercaseuse uppercase andhex output letters abcdef default lowercase showposdisplay positive integers scientificuse exponential format floating point output  e2 fixeduse fixed formaton floating point output   unitbufflush streams insertionstdioflushstdout stderrorafterinsertion ways set formatting flags set ways members ofthe iosclass precede iosand scope resolution operator ios skipws flags set setf andunsetf ios member functions cout setf ios left left justify output textcout text left justified cout unsetf ios left return default justified formatting flags set manipulators manipulatorsmanipulators formatting instructions inserted directly stream examples manipulator endl sends newline stream flushes cout endl streams files12streamsandfiles57113  ch12       setiosflags manipulator salemonprogram chapter  arrays strings cout setiosflags ios fixed fixed point setiosflags ios showpoint point var examples demonstrate manipulators flavors argument table   summarizes argument manipulators table12 no argumentiosmanipulatorsmanipulatorpurpose wsturn onwhitespace skipping input decconvert todecimal octconvert tooctal hexconvert hexadecimal endlinsert newline flush output stream endsinsert nullcharacter terminate output string flushflush output streamlocklock filehandle unlockunlock file handle insert manipulators directly stream output varinhexadeci mal format cout hex var note manipulators affect data stream data precedes table   summarizes manipulators arguments iomanipheader file functions table12 iosmanipulators witharguments manipulatorargumentpurpose setw fiel width int set field width output setfill character int set character output default space setprecision precision int set precision number digits displayed setiosflags formatting flags long set flags resetiosflags formatting flags long clearspecified flags chapter   ch12       functionstheiosclass number functions set formatting flags andperform tasks table   functions deal errors examine separately table12 iosfunctionsfunctionpurpose return character fills unused field default space set thefill character precision theprecision number digits displayed floating point precision set precisionw width thecurrent field width characters width set current field width setf flags set formatting flags ios left unsetf flags unset formatting flags setf flags field clear field set flags functions called specific stream objects normal dot operator exam ple set field width  cout width  statement sets character asterisk check printing cout functions manipulate iosformatting flags directly set left justification cout setf ios left restore justification cout unsetf ios left argument version setf argument reset flags particu lar type field flag argument set easier reset relevant flags setting table   arrangement cout setf ios left ios adjustfield clears flags dealing text justification sets leftflag forleft justified output streams files12streamsandfiles57313  ch12       table12 two argument version setf argument flags setsecond argument field clear dec oct hexbasefield left internaladjustfield scientific fixedfloatfield techniques formatting flags figure format keyboard display chapter filesas theistreamclasstheistreamclass derived ios performs input specific activities extraction easy confuse extraction output activity insertion figure   emphasizes difference chapter figure12 file input output table   lists functions commonly istreamclass table12 istreamfunctionsfunctionpurpose formatted extraction basic overloaded types extract character str extract characters array str   ch12       str max extract maxcharacters array str delim extract characters array struntil delimiter typically leave delimiting char stream str max delim extract characters array struntilmaxcharacters thedelimcharacter leave delimiting char stream getline str max delim extract characters array str maxcharacters thedelimcharacter extract delimiting character putback insert character read input stream ignore max delim extractand discard maxcharacters includ ing delimiter typically peek read onecharacter leave stream count gcount return number characters read pre ceding getline read read str max iles extractup maxcharacters str eof seekg set distance bytes file pointer start file seekg pos seek_dir set distance bytes file pointer place file seek_dircanbe ios beg ios cur ios pos tellg pos returnposition bytes file pointer start file functions operate cinobject represents data flow keyboard deal diskfiles theostreamclasstheostreamclass handles output insertion activities table   commonly member functions class functions table deal disk files table12 ostreamfunctionsfunctionpurpose formatted insertion basic overloaded types insert character chinto stream flush flush buffercontents insert newline write str size insertsizecharacters array strinto file streams files12streamsandfiles575table12 continuedfunctionpurpose   ch12       seekp position set distancein bytes file pointer start file seekp position seek_dir set distance bytes file pointer place file seek_dircan ios beg ios cur ios pos tellp return position file pointer inbytes theiostreamand _withassignclassestheiostreamclass whichis derived istreamandostream acts baseclass classes iostream_withassign derived functions constructors destructors classes derived iostreamcanperform input output _withassignclasses istream_withassign derived istream ostream_withassign derived ostream iostream_withassign derived iostreamthese_withassign classes derived include overloaded assignment operators objects copied separatecopyable uncopyable stream classes general good idea copy stream class objects reason object ticularstreambufobject includes area memory hold object actual data copy stream object confusion copy streambufobject cases simportant copy stream istream ostream iostreamclasses uncopyable making overloaded copy constructors assignment operators private _ withassignclasses derived becopied predefined stream objects madeextensive predefined stream objects derived _withassignclasses cinandcout connected keyboard display predefined objects cerrandclog cin object istream_withassign keyboard input cout objectof ostream_withassign screen displaychapter table12 continuedfunctionpurpose   ch12       cerr object ostream_withassign error messages clog object ostream_withassign log messagesthecerrobjectis error messages program diagnostics output cerris displayed buffered coutis redirected reasons chance final output mes sage cerrif yourprogram dies prematurely object clog cerrinthat redirected output buffered cerr stream errors book straightforward approach input output statements formcout good morning andcin var discovered approach assumes wrong dur ing process case input user enters string integer  pushes enter key entering thing hardware failure explore prob lems techniques applicable file aswell error status bits stream error status flags constitute iosenum member reports errors occurred inan input output operation summarized table   figure   flags iosfunctions read set error flags table   table12 error status flags namemeaning goodbitno errors flags set  eofbitreached endof file failbitoperation failed user error premature eof badbitinvalid operation streambuf hardfailunrecoverable error streams files12streamsandfiles57713  ch12       table12 functions error flagsfunctionpurpose int eof returnstrue eof flag set int fail returns trueif failbitorbadbitorhardfailflag setint bad returns true badbitorhardfailflag setint good returns true flags set clear int  argument clears error bits sets flags clear ios failbit chapter figure12 stream status flags inputting numberslet handle errors inputting numbers approach applies numbers read keyboard disk idea check goodbit signal error true user chance enter correct input true cycle input cout nenter integer cin cin good errors cin ignore  remove newline break exit loop cin clear clear error bits cout incorrect input   ch12       cin ignore  remove newline cout integer error free integerthe common error scheme detects reading keyboard input user typing nondigits instance  failbitto set detects failures common disk files floating point numbers float double longdouble analyzed errors thesame integers characterstoo characters sounds difficulty experienced movie directors extra charac ters problem reading input streams true errors typically extra characters left input stream input suppos edly completed passed input operation intended newline character remains characters left rid extraneous characters ignore max delim member function istreamis reads throws maxcharacters including delimiter character cin ignore  causescinto read  characters including remove input input inputwhitespace characters suchas tab space skipped wheninputting numbers undesirable effects users prompted enter number simply press enter key typing digits enter  simply confused code simplestatement cin pressing enter cursor drop stream continues wait number wrong cursor dropping inexperi enced users acknowledgment press enter assume computer broken pressing enter repeatedly cursor drop lower lower entire screen scroll upward teletype style interaction program user simply type text based graphics programs elevprogram chapter  multifile programs scrolling screen disarranges eventually obliterates display streams files12streamsandfiles57913  ch12       importantto input stream notto ignore whitespace handled clearing skipwsflag cout nenter integer cin unsetf ios skipws ignore whitespace cin cin good error errornow user types enter digits failbitwill set error generated program user reposition cursor screen scroll inputting strings charactersthe user treally errors inputting strings characters input numbers interpreted string coming disk file characters strings checked errors case eof worse encoun tered situation numbers dowant ignore whitespace wheninputting strings characters error free distances program user input english distanceclass checked errors program simply accepts distancevalues feet inches user displaysthem user commits entry error program rejects input appro priate explanation user prompts input program simple member function getdist expanded handle errors parts code follow approach fragment statements ensure user enter floating point number feet feet integer inches floating point andthe user easily confused ordinarily expecting integer extraction operator simply terminates sees point signaling error error read feet string int examine string homemade function isfeet returns true string proves correct feet pass feet test digits evaluate number   assume distanceclass measuring larger feet values string passes feet test convert actual intwith library functionatoi chapter   ch12       inches floating point number check range  greater   check ioserror flags commonly failbitwill set user typed nondigits number thelisting englerr englerr cpp input checking english distance class include iostream include string include cstdlib atoi atof namespace std int isfeet string declaration class distance english distance class private int feet float inches public distance constructor args feet  inches   distance int float constructor args feet inches void showdist display distance cout feet inches void getdist length user void distance getdist length user string instr input stringwhile true cycle feet cout nenter feet cin unsetf ios skipws skip white space cin instr feet string isfeet instr correct feet cin ignore  eat chars including newline feet atoi instr c_str convert integer break break integercin ignore  eat chars including newline cout feet integer  feetstreams files12streamsandfiles58113  ch12       true cycle inches cout enter inches cin unsetf ios skipws skip white space cin inches inches type float inches   inches   cout inches     cin clear ios failbit artificially set fail bit cin good check cin failure commonly digit cin ignore  eat newline break input exit cin clear error clear error state cin ignore  eat chars including newline cout incorrect inches input start inches int isfeet string str return true string correct feet int slen str size length slen  slen  input longreturn  intfor int  slen check character digit minusif str  str  str return  string correct feetdouble atof str c_str convert double     range return  correct feetreturn  correct feet int main distance distance object char ans getdist user cout ndistance showdist display cout ndo cin ans chapter   ch12       cin ignore  eat chars including newline ans cycle return  dodge setting error state flag manually ensure inches greater    turn thefailbitwith statementcin clear ios failbit set failbitwhen program checks errors cin good failbitset signalthat input incorrect disk file streams programs needto save data disk files read working disk files requires set classes ifstreamfor input fstreamforboth input output ofstreamforoutput objects classes disk files member functions read write files referring figure   ifstreamis derived istream fstreamisderived iostream ofstreamis derived ostream ancestor classes turn derived ios file oriented classes derive member functions general classes file oriented classes derived multiple inheritance fstreambaseclass class object class filebuf file oriented buffer member functions derived general streambufclass worry buffer classes theifstream ofstream andfstreamclasses declared fstreamfile programmers note approach disk functions fread andfwrite work suited object oriented environment approach considerably cleaner easier implement incidentally careful mixing functions streams work gracefully ways cooperate formatted file oin formatted numbers stored disk series characters   stored  byte type floator  byte type double stored characters    inefficient numbers digits situations easy implement characters strings stored streams files12streamsandfiles58313  ch12       writing datathe program writes character integer type double stringobjects toa disk file output screen listing formato formato cpp writes formatted output file include fstream file include iostream include string namespace std int main char int  double   string str1 kafka strings string str2 proust embedded spacesofstream outfile fdata txt create ofstream object outfile insert write data space numbers str1 spaces strings str2 cout file written return  define object called outfileto member ofstreamclass time initialize file fdata txt initialization sets resources file accesses opensthe file disk file exist cre ated exist truncated data replaces outfileobject actsmuch coutdid previous programs insertion operator outputvariables basic type file works insertion operator appropri ately overloaded ostream ofstreamis derived program terminates outfileobject scope calls destructor closes file close file explicitly potential formatting glitches separate numbers    nonnumeric characters numbers stored sequence characters chapter   ch12       fixed length field extraction operator data read file number stops strings separated whitespace reason implies strings imbedded blanks space character kinds ofdelimiters characters delimiters fixed length verify formato written data examining fdata txtfile withthe windows wordpad accessory dos commandtype reading datawe read file generated formato ifstreamobject initialized file file automatically opened object created read extraction operator listing formati program reads data fdata txtfile formati cpp reads formatted output file include fstream file include iostream include string namespace std int main char int double string str1 string str2 ifstream infile fdata txt create ifstream object extract read data itinfile str1 str2 cout endl display data endl endl str1 endl str2 endl return  streams files12streamsandfiles58513  ch12       ifstreamobject infile acts cindid previous pro grams provided formatted data correctly inserting file trouble extracting storing variables displaying contents program output x77   kafka proustof numbers converted binary representations storage pro gram  stored variable type int characters   stored double strings embedded blanksthe techniqueof examples work char strings embeddedblanks handle strings write specific delimiter character string getline function extraction operator read program oline outputs strings blanks embedded oline cpp file output strings include fstream file namespace std int main ofstream outfile test txt create file output send text fileoutfile fear thee ancient mariner outfile fear thy skinny hand outfile art long lank brown outfile ribbed sea sand return  runthe program lines text samuel taylor coleridge rime theancient mariner written file terminated newline character note char strings objects stringclass stream oper ations work easily char strings extract strings file create ifstreamand read timeusing getline function member istream function reads characters chapter   ch12       including whitespace encounters character places string buffer supplied argument maximum size buffer argument contents buffer displayed iline cpp file input strings include fstream file functions include iostream namespace std int main const int max  size buffer char buffer max character buffer ifstream infile test txt create file input infile eof file infile getline buffer max read text cout buffer endl display return  output ilineto screen data written test txtfile oline coleridge stanza program knowing advance strings file continues read string time encounters file incidentally program read random text files requires text lines terminate character encounter file case program hang detecting fileas objects derived ioscontain error status flags checked determine operations read file eventually encounter file eof condition eof signal program operating data read ilinewe checked linewhile infile eof eof encounteredhowever checking eofbitmeans detect error flags failbitandbadbit occur rarely change loop condition infile good error encounteredstreams files12streamsandfiles58713  ch12       test stream directly stream object infile tested usual error conditions including eof condition true object returns object returns nonzero pointer address returned significance tested nonzero rewrite whileloop infile error encounteredthis simple clear uninitiatedwhat character otheput andget functions members ostreamandistream output input single characters program ochar outputs string character time ochar cpp file output characters include fstream file functions include iostream include string namespace std int main string str time great teacher kills pupils berlioz ofstream outfile test txt create file output int  str size character outfile str write filecout file written return  program ofstreamobject created oline length stringobjectstris size member function characters output forloop aphorism hector berlioz th century composer operas program music written file test txt read file display theicharprogram ichar cpp file input characters include fstream file functions include iostream namespace std chapter   ch12       int main char character read ifstream infile test txt create file input infile read eof error infile read character cout display cout endl return  programuses function continues reading eof reached anerror occurs character read file displayed cout entire aphorismappears screen approach reading characters file rdbuf function member iosclass function returns pointer streambuf orfilebuf object withthe stream object object buffer holds characters read stream pointer data object listing ichar2 ichar2 cpp file input characters include fstream file functions include iostream namespace std int main ifstream infile test txt create file inputcout infile rdbuf send buffer coutcout endl return  program ichar takes prize shortest file oriented program note rdbuf thatit return encounters eof binary oyou write numbers disk formatted storing large numerical data efficient binary numbers stored computer ram memory strings characters binary intisstreams files12streamsandfiles58913  ch12       stored  bytes text version  requiring  bytes floatis stored  bytes formatted version  e13 requir ing  bytes array integers written disk read memory binary format functions write member ofstream andread member ifstream functions data terms bytes type char care data formatted simply transfer buffer bytes disk file parameters write andread address data buffer length address cast reinterpret_cast type char length thelength bytes characters notthe number data items buffer listing binio binio cpp binary input output integers include fstream file streams include iostream namespace std const int max  size buffer int buff max buffer integersint main int  max buffer databuff    create output streamofstream edata dat ios binary write itos write reinterpret_cast char buff max sizeof int close close itfor  max erase bufferbuff  create input streamifstream edata dat ios binary read itis read reinterpret_cast char buff max sizeof int  max check dataif buff cerr data incorrect return  cout data correct return  chapter   ch12       ios binaryargument parameter write andread whenworking binary data default text mode takes liberties data text mode character expanded bytes carriage return linefeed stored disk formatted text file readable dos based utilities type confusion applied binary data byte ascii  translated  bytes theios binaryargument mode bit discuss open function chapter thereinterpret_castoperatorin binioprogram follow reinterpret_castoperatorto buffer type intto read andwrite functions buffer type char read reinterpret_cast char buff max sizeof int thereinterpret_castoperator compiler type memory caring sense judiciously reinterpret_castto change pointer values integers vice versa dangerous practice closing filesso exampleprograms close streams explicitly closed automatically scope invokes destructors closes file binio output stream osand input stream isare file edata dat stream closed opened close member function explicit close time close afile relying stream destructor reliable thelisting read object osince object oriented language reasonable objects written read disk examples process personclass previous examples virtpers program chapter  virtual functions supplies objects streams files12streamsandfiles59113  ch12       writing object diskwhen writingan object generally binary mode writes bit figuration disk stored memory ensures numerical data contained objects handled properly listing opers asks user informationabout object class person writes object disk file person dat opers cpp saves person object disk include fstream file streams include iostream namespace std class person class persons protected char  person short age person agepublic void getdata person data cout enter cin cout enter age cin age int main person pers create person pers getdata data person create ofstream objectofstream outfile person dat ios binary write itoutfile write reinterpret_cast char pers sizeof pers return  thegetdata member function personis called prompt user places persobject sample interaction enter coleridge enter age the contents persobject written disk write function thesizeofoperator length ofthe persobject chapter   ch12       reading object disk reading object backfrom person dat file requires read memberfunction listing ipers ipers cpp reads person object disk include fstream file streams include iostream namespace std class person class persons protected char  person short age person agepublic void showdata display person data cout endl cout age age endl int main person pers create person variable ifstream infile person dat ios binary create stream read streaminfile read reinterpret_cast char pers sizeof pers pers showdata display person return  output ipersreflects data opersprogram person dat file coleridge age compatible data structures work correctly programs read write objects files opersandipers betalking class objects objects class personin programs  bytes long  occupied string representing person  integer type short representing person age programs thought field length accurately read file generated streams files12streamsandfiles59313  ch12       notice personclasses opersandipershave data member functions includes single function getdata whilethe showdata matter member functions written disk object data data format inconsistencies member functions true simple classes virtual functions read write objects derived classes file careful objects derived classes include mysterious number object data memory number helps identify object class virtual functions write object disk number written object data change class member functions number write object class file read object class identical data mem ber function encounter big trouble virtual functions object moral class read object identicalto class write attempt disk objects pointer data members expect pointer values correct object read place memory multiple objectstheopersandipersprograms wrote read object time opens file writes objects user reads displays entire contents file listing diskfun diskfun cpp reads writes objects disk include fstream file streams include iostream namespace std class person class persons protected char  person int age person agepublic void getdata person data cout enter cin cout enter age cin age chapter   ch12       void showdata display person data cout cout age age int main char person pers create person object fstream file create input output file open appendfile open group dat ios app ios ios ios binary data user file cout nenter person data pers getdata person data write filefile write reinterpret_cast char pers sizeof pers cout enter person cin quit file seekg  reset start file read personfile read reinterpret_cast char pers sizeof pers file eof quit eof cout nperson display person pers showdata read person file read reinterpret_cast char pers sizeof pers cout endl return  sample interaction diskfun output assumes program personobjects written file enter person data enter mckinley enter age streams files12streamsandfiles59513  ch12       enter person nperson whitneyage person rainier age person mckinley age here additional object file entire contents consisting objects displayed thefstreamclassso chapter file objects created input output diskfunwe create file input output requires object fstreamclass derived iostream derived istreamandostreamso handle input output theopen functionin previous examples created file object initialized statement ofstream outfile test txt indiskfunwe approach create file statement open open function member fstreamclass approach situations open fail create stream object repeatedly open overhead ofcreating stream object time mode bitswe themode bit ios binarybefore open function include mode bits mode bits defined ios aspects stream object opened table   possibilities table12 mode bits open functionmode bitresult inopen reading default ifstream outopen writing default ofstream atestart reading writing file chapter   ch12       table12 continuedmode bitresult appstart writing file append trunctruncate file length exists truncate nocreateerror opening file exist noreplaceerror opening output file exists ateorappis setbinaryopen file binary text mode indiskfunweuse ios appbecause preserve file write file terminate program start program write file existing contents ios inandios outbecause perform input output file ios binarybecause writing binary objects vertical bars flags bits repre senting flags logically combined single integer flags apply simultaneously write personobject time file write function fin ished writing read entire file reset file current position seekg function examine ensures start reading file whileloop repeatedly read personobject file display screen continues read personobjects state discover eof function returns state ios eofbit file pointerseach file object integer values called pointerand putpointer called current position current position clear meant simply current position values byte number file writing reading place term pointerin context confused normal pointers address variables start reading existing file continue writing start deleting existing contents case open file ios appmode specifier default actions manipulation file pointers times control file pointers read write streams files12streamsandfiles59713  ch12       chapter an arbitrary location file seekg andtellg functions set examine pointer seekp andtellp functions perform actions ontheput pointer positionwe positioning pointer diskfunprogram seekg function set file reading start form seekg takes argument represents absolute position file start file byte  diskfun figure   figure12 theseekg function argument offset theseekg function ways single argu ment represents position start file arguments argument represents offset location file ond specifies location offset measured possibilities argument begis file curis current pointer position endis file statement seekp  ios set pointer  bytes file figure     ch12       figure12 theseekg function withtwo arguments argument version seekg personobject group dat file display data person listing forseekg seekg cpp seeks person file include fstream file streams include iostream namespace std class person class persons protected char  person int age person agepublic void getdata person data streams files12streamsandfiles59913  ch12       cout enter cin cout enter age cin age void showdata void display person data cout cout age age int main person pers create person object ifstream infile create input file infile open group dat ios ios binary open fileinfile seekg  ios  bytes endint endposition infile tellg int endposition sizeof person number persons cout nthere persons file cout nenter person number cin int position  sizeof person number times size infile seekg position bytes start read personinfile read reinterpret_cast char pers sizeof pers pers showdata display person cout endl return  output program assuming group dat file justaccessed diskfunexample  persons file enter person number name rainier age for user number items starting  program starts numbering  person  person threein file chapter   ch12       thetellg functionthe thing theprogram figure persons file positioning pointer file statement infile seekg  ios thetellg function returns current position pointer program function return pointer position file length file bytes program calculates personobjects file dividing size person displays result output user specifies object file program calculates bytes file seekg read read person sworth data starting point finally displays data showdata error handling file file relatedexamples concerned error situations assumed files opened reading existed opened writing created appended assumed failures reading writing real program verify assumptions action turn incorrect file exists filename assume file apply existing file room disk disk drive reacting errors program errors conveniently handled disk operations checked performed error occurred message printed program terminates technique discussed earlier checking return object determine error status program opens output stream object writes entire array integers single write closes object opens input stream object reads array integers read rewerr cpp handles errors input output include fstream file streams include iostream namespace std include process exit const int max  int buff max streams files12streamsandfiles60113  ch12       int main int  max buffer databuff ofstream create output stream open itos open edata dat ios trunc ios binary cerr open output file exit  cout writing write buffer write reinterpret_cast char buff max sizeof int cerr write file exit  close close itfor  max clear bufferbuff  ifstream create input streamis open edata dat ios binary cerr open input file exit  cout reading read file read reinterpret_cast char buff max sizeof int cerr read file exit   max check dataif buff cerr ndata incorrect exit  cout data correct return  analyzing errors rewerrexample determined error occurred operation exam ining return entire stream object error occurredhereisreturns pointer  shotgun approach errors matter error detected action ioserror status flags chapter   ch12       specific file error status flags work screen keyboard ferrors sho ws file ferrors cpp checks errors opening file include fstream file functions include iostream namespace std int main ifstream file file open test dat file cout ncan open group dat elsecout nfile opened cout nfile file cout nerror state file rdstate cout ngood file good cout neof file eof cout nfail file fail cout nbad file bad endl file close return  program checks object file file opened exist output ferrors case open group datfile x1c730000 error state  good  eof  fail  bad the error state returned rdstate  bit file exist set  bits set  good function returns  true onlywhen bits set returns  false eof eof returns  fail andbad functions return nonzero error occurred program functions operation ensure things expected streams files12streamsandfiles60313  ch12       file member functionsso letthe main function handle details file sophis ticated classes natural include file operations member functions class programs ordinary member functions object responsible reading writing file static member functions read write theobjects class objects read write sense member class read write file simple approach works objects read written add member functions diskout anddiskin personclass functions personobject write disk read simplifying assumptions objects class stored file called persfile dat objects appended file argument diskin function read data person file prevent attempt read data file include static member function diskcount thatreturns number persons stored file inputting data program spaces allowed listing rewobj rewobj cpp person objects disk include fstream file streams include iostream namespace std class person class persons protected char  person int age person agepublic void getdata void person data cout enter cin cout enter age cin age void showdata void display person data cout cout age age void diskin int read filechapter   ch12       void diskout write filestatic int diskcount return number persons file void person diskin int read person number file ifstream infile stream infile open persfile dat ios binary open infile seekg sizeof person file ptr infile read char sizeof read person void person diskout write person file ofstream outfile stream open itoutfile open persfile dat ios app ios binary outfile write char sizeof write int person diskcount return number persons file ifstream infile infile open persfile dat ios binary infile seekg  ios  bytes calculate number personsreturn int infile tellg sizeof person int main person person char save persons diskcout enter data person getdata data diskout write disk cout cin user enters int person diskcount persons file cout persons file int  streams files12streamsandfiles60513  ch12       cout nperson diskin read person disk showdata display person cout endl return  surprises elements program operates diskfunprogram notice details disk operation invisible main hidden personclass advance data read write object place memory thispointer tells member function read andwrite stream functions mem ory address object read written thisand size sizeof output assuming persons file program started enter data person enter achesonenter age enter yenter data person enter dullesenter age enter nperson name stimsonage person name hull age person name acheson age person name dulles age if user filename class hardwiring member functions create static member variable char filename static function set object file nonstatic function chapter   ch12       classes read write assume objects memory write file efficient member function object open file write object close rewobj faster objects truer open file write objects closeit static functionsone write objects static member function applies class object function write objects function objects access array pointers objects stored static data object created pointer stored array static data member track objects created staticwrite function open file loop array writing object turn finally close file size derived objectsto things interesting assumption objects stored memory sizes true situation typically arises sev eral classes derived base class employ program inchapter  inheritance employeeclass acts base class manager scientist laborerclasses objects derived classes sizes amounts data addition employee number apply employees manager title golf club dues scientist number publications write data list types derived objects manager scientist laborer simple loop write member function ofofstream function large object ond argument suppose array pointers arrap objects type employee thesepointers point objects derived classes virtpers program chapter11 array pointers objects derived classes virtual functions statementslike arrap putdata version putdata function matches object pointed pointer beused function base class sizeof function toreturn size pointer argument ouf write char arrap sizeof arrap goodstreams files12streamsandfiles60713  ch12       sizeof virtual function type object pointed type pointer return size baseclass object typeid functionhow size object pointer answer thetypeid function introduced chapter  function class object class sizeof typeid enable acompiler option called time type rtti case currentmicrosoft compiler appendix microsoft visual works size object thewrite function write object disk simple user interface employ program member specific functions virtual array pointers objects incorporated error detection techniques discussed ambitious program demonstrates techniques scale database application real power oop single statement write objects sizes file listing empl_io empl_io cpp performs file employee objects handles sized objects include fstream file stream functions include iostream include typeinfo typeid namespace std include process exit const int len  maximum length namesconst int maxem  maximum number employeesenum employee_type tmanager tscientist tlaborer class employee employee class private char len employee unsigned long number employee number static int current number employees static employee arrap array ptrs empspublic chapter   ch12       virtual void getdata cin ignore  cout enter cin cout enter number cin number virtual void putdata cout cout number number virtual employee_type get_type type static void add add employee static void display display employees static void read read disk file static void write write disk file static variables int employee current number employees employee employee arrap maxem array ptrs emps manager class class manager public employee private char title len vice president double dues golf club duespublic void getdata employee getdata cout enter title cin title cout enter golf club dues cin dues void putdata employee putdata cout title title cout golf club dues dues scientist class class scientist public employee streams files12streamsandfiles60913  ch12       private int pubs number publicationspublic void getdata employee getdata cout enter number pubs cin pubs void putdata employee putdata cout number publications pubs laborer class class laborer public employee add employee list memory void employee add char cout add manager add scientist add laborer nenter selection cin switch create employee type case arrap manager break case arrap scientist break case arrap laborer break default cout nunknown employee type return arrap getdata employee data user display employees void employee display int  cout  display number switch arrap get_type display typechapter   ch12       case tmanager cout type manager break case tscientist cout type scientist break case tlaborer cout type laborer break default cout unknown type arrap putdata display employee data cout endl return type object employee_type employee get_type typeid typeid manager return tmanager typeid typeid scientist return tscientist typeid typeid laborer return tlaborer cerr nbad employee type exit  return tmanager write current memory objects file void employee write int size cout writing employees ofstream ouf open ofstream binary employee_type etype type employee objectouf open employ dat ios trunc ios binary ouf cout ncan open file return int  employee object type etype arrap get_type write type fileouf write char etype sizeof etype switch etype size case tmanager size sizeof manager break case tscientist size sizeof scientist break case tlaborer size sizeof laborer break streams files12streamsandfiles61113  ch12       write employee object fileouf write char arrap size ouf cout ncan write file return read data employees file memory void employee read int size size employee object employee_type etype type employee ifstream inf open ifstream binary inf open employ dat ios binary inf cout ncan open file return  employees memory true read type employee inf read char etype sizeof etype inf eof quit loop eofbreak inf error reading type cout ncan read type file return switch etype employee case tmanager correct typearrap manager size sizeof manager break case tscientist arrap scientist size sizeof scientist break case tlaborer arrap laborer size sizeof laborer break default cout nunknown type file return read data file itinf read char arrap size inf error eof cout ncan read data file return count employee whilecout reading employees chapter   ch12       int main char true cout add data employee display data employees write employee data file read employee data file exit nenter selection cin switch case add employee listemployee add break case display employeesemployee display break case write employees fileemployee write break case read employees fileemployee read break case exit  exit program default cout nunknown command switch whilereturn  main code number object type class object memory class object data read disk magic function write object data disk write code number enumvari employee_type directly disk object data read object file memory read create object type finally copy data file object homemade objects pleaseincidentally youmight tempted read object data anyplace array type char set pointer object point area cast kosher streams files12streamsandfiles61313  ch12       char somearray max aclass aptr_to_obj aptr_to_obj reinterpret_cast aclass somearray thishowever create object attempts pointer pointed object lead trouble legitimate ways create object define explicitly compile time aclass anobj create newat runtime assign location pointer aptr_to_obj aclass create object properly constructor invoked defined constructor default constructor object area memory data set member functions interaction empl_iohere somesample interaction program create manager scientist laborerin memory write disk read display sim plicity multiword names titles allowed vicepresident vice president add data employee display data employees write employee data file read employee data file exit type selection add manager add scientist add laborer type selection menter johnson enter number  enter title president enter golf club dues  add data employee display data employees write employee data file read employee data file exit type selection add manager add scientistchapter   ch12       add laborertype selection senter faraday enter number  enter number pubs  add data employee display data employees write employee data file read employee data file exit type selection add manager add scientist add laborer type selection lenter smith enter number  add data employee display data employees write employee data file read employee data file exit type selection writing  employees add data employee display data employees write employee data file read employee data file exit type selection reading  employees add data employee display data employees write employee data file read employee data file exit type selection  type managername johnson title president golf club dues streams files12streamsandfiles61513  ch12        type scientistname faradaynumber  number publications  type laborername smith number of exit program writing data disk start read file data reappear easy add functions program delete employee retrieve data sin gle employee file search file employees characteristics overloading extraction insertionoperatorslet stream topic overloading extraction insertion opera tors powerful feature treat user defined data types basic types intanddouble object class crawdadcalledcd1 display statementcout ncd1 cd1 basic data type overload extraction insertion operators work display key board coutandcin care overload work disk files lllook examples situations overloading coutandcinhere englio overloads insertion extraction operatorsfor distanceclass work coutandcin englio cpp overloaded operators include iostream namespace std class distance english distance class private int feet float inches public chapter   ch12       distance feet  inches   constructor args constructor args distance int float feet inches friend istream operator istream distance friend ostream operator ostream distance istream operator istream distance distance user cout nenter feet feet cout enter inches inches overloaded return operator ostream operator ostream distance display distance feet inches return overloaded operator int main distance dist1 dist2 define distances distance dist3    define initialize dist3cout nenter distance values cin dist1 dist2 values user display distancescout ndist1 dist1 ndist2 dist2 cout ndist3 dist3 endl return  program asks distancevalues user prints values initialized theprogram sample interaction enter feet  enter inches  enter feet enter inches dist1    dist2   dist3    streams files12streamsandfiles61713  ch12       notice convenient natural treat distanceobjects otherdata type statements cin dist1 dist2 andcout ndist1 dist1 ndist2 dist2 operators overloaded ways return reference object istream ostream return values permit chaining operators arguments passed reference argument object istream cin object ostream cout argument object class displayed distancein operator takes input stream argument puts member data object argument operator removes data object argument sends streamspecified argument theoperator andoperator functions friendsof distanceclass theistreamandostreamobjects left operator discussion friendfunctions chapter  overload insertion extraction operators classes steps overloading filesour exampleshows overload operators distanceclassso work file coutandcin englio2 cpp overloaded operators work files include fstream include iostream namespace std class distance english distance class private int feet float inches public distance feet  inches   constructor args constructor args distance int float feet inches chapter   ch12       friend istream operator istream distance friend ostream operator ostream distance istream operator istream distance distance file char dummy keyboard withs feet dummy dummy inches dummy return overloaded operator ostream operator ostream distance send distance file feet inches screen return overloaded operator int main char distance dist1 ofstream ofile create open ofile open dist dat output streamdo cout nenter distance cin dist1 distance user ofile dist1 write output str cout cin ofile close close output streamifstream ifile create openifile open dist dat input streamcout ncontents disk file true ifile dist1 read dist stream ifile eof quit eofbreak cout distance dist1 endl display distance return  streams files12streamsandfiles61913  ch12       minimal overloaded operators operator nolonger prompts input sense prompt file assume user enter feet inches including punctuation marks operator unchanged program asks input user writing distancevalue file user finished input program reads displays values file somesample interaction enter distance    yesenter distance    yesenter distance   nocontents disk file distance    distance    distance   distances stored character character file contents file        if user fails enter distances correct punctuation written file correctly file readable operator real program essential check input errors memory stream object treat memory stream object inserting data file format output displaying digits point text output function requires string input common calling output functions gui environment windows functions require string argument programmers remember sprintf function purpose family stream classes implements memory formatting output memory isostrstream derived classes ostream input memory istrstream derived istream memory objects bothinput output thereis strstream derived iostream chapter   ch12       commonly ostrstream works start data buffer memory create ostrstreamobject mem ory buffer size arguments stream constructor output formatted text memory buffer stream object listing ostrstr ostrstr cpp writes formatted data memory include strstream include iostream include iomanip setiosflags namespace std const int size  size memory bufferint main char test data int  double   char str1 kafka char str2 freud char membuff size buffer memoryostrstream omem membuff size create stream objectomem endl insert formatted data endl object setiosflags ios fixed format point setprecision  digits dec endl str1 str1 endl str2 str2 endl ends buffer  cout membuff display memory buffer return  program membuffwill filled formatted text    nstr1 kafka nstr2 freud we format floating point numbers usual methods fixed deci mal format exponential ios fixed digits deci mal point manipulator endsinserts  character string provide eof displaying buffer usual coutproduces program output streams files12streamsandfiles62113  ch12        str1 kafka str2 freudin program displays contents buffer ordinarily sophisticated formatted data command argumentsif dos familiar command arguments invoking program typically pass data file applica tion invoke word processor application document work time wordproc afile dochereafile docis command argument program read command arguments comline reads displays command arguments care type separated spaces comline cpp demonstrates command arguments include iostream namespace std int main int argc char argv cout nargc argc endl number argumentsfor int  argc display argumentscout argument argv endl return  sample interaction program book chap12 comline uno dos tresargc argument  cpp chap12 comline exe argument  uno argument  dos argument  tresto read command arguments main function forget function arguments argc forargument count represents total number chapter   ch12       command arguments command argument pathname cur rent program remaining command arguments typed user delimited space character preceding uno dos andtres storesthe command arguments strings memory creates array pointers strings array called argv forargument values individual strings accessed pointer string path argv  unoin argv  comlineaccessesthe arguments turn prints forloop argc number command arguments upper limit names argcandargvas arguments main common names consternation compiler program command argument displays tents text file supplied user command imitates dos command type listing otype otype cpp imitates type command include fstream file functions include iostream namespace std include process exit int main int argc char argv argc  cerr nformat otype filename exit  char character read ifstream infile create file input infile open argv  open file infile check errors cerr ncan open argv  exit  infile  read charactercout display characterreturn  streams files12streamsandfiles62313  ch12       program checks user entered correct number command arguments remember pathname otype exeitself command argument argument file displayed user enteredwhen invoking program otype ichar cppthus total number command arguments equal  user proba bly understand program program sends error message cerrto clarify matters number arguments correct program open file ond command argument argv  file opened program signals error finally whileloop program reads file character character writes screen  character signals eof check eof file object aswe infile infile cout replace entire whileloop statementcout infile rdbuf earlier ichar2pr ogram printer outputit fairly easy console mode programs send data printer number special filenames hardware devices defined operating treat devices files table   predefined names table12 hardware device namesnamedevice conconsole keyboard screen auxorcom1first serial portcom2second serial portprnorlpt1first parallel printerchapter   ch12       lpt2second parallel printerlpt3third parallel printernuldummy nonexistent device systemsthe printer connected parallel port filename printer prnorlpt1 substitute configured differently program ezprint sends string number printer usingformatted output insertion operator ezprint cpp demonstrates simple output printer include fstream file streams namespace std int main char s1 ntoday winning number int n1  ofstream outfile fileoutfile open prn open printer outfile s1 n1 endl send data printer outfile x0c formfeed eject return  send formatted output printer x0c charactercauses eject printer oprint prints contents disk file command printer character character approachto data transfer oprint cpp imitates print command include fstream file functions include iostream namespace std include process exit streams files12streamsandfiles625table12 continuednamedevice   ch12       int main int argc char argv argc  cerr nformat oprint filename exit  char character read ifstream infile create file input infile open argv  open file infile check errors cerr ncan open argv  exit  ofstream outfile file outfile open prn open printer infile  read characteroutfile write character printeroutfile x0c formfeed eject return  program print text file cppsource files acts dos printcommand otypeexample program checks cor rect number command arguments successful opening thespecified file summaryin chapter examined hierarchy stream classes handle kinds errors perform file variety ways files objects classes typically ofstreamfor output ifstreamforinput fstreamfor input output member functions base classes areused perform operations operators functions write areused output read input theread andwrite functions work binary mode entire objects saved disk matter sort data single objects stored arrays data structures objects file handled member functions respon sibility individual objects class handle static member functions check error conditions file operation file object takes  error occurred member functions deter specific kinds errors extraction operator insertion operator beoverloaded work programmer defined data types memory considered stream data file chapter   ch12       questionsanswers questions appendix  stream flow control function flow data place class file  base class stream classes ________ class  stream classes commonly disk  write statement create object called salefileof ofstreamclass andassociate file called sales jun  true false streams work input output  write ifstatement checks ifstreamobject called foobarhasreached file encountered error  output text object class ofstreamusing insertion operator ofstreamclass stream insertion operator works classes outputting cout insertion operator overloaded ofstream  write statement writes single character object called fileout ofclassofstream  write data variables type floatto object type ofstream youshould insertion operator seekg write  write statement read contents ifstreamobject called ifileinto anarray called buff streams files12streamsandfiles62713  ch12        mode bits appandatea defined ios class file open reading writing work andget functions ways opening file  define current position applied files  true false file pointer address file  write statement moves current position  bytes backward stream object calledf1  statement f1 write char obj1 sizeof obj1 writes member functions obj1tof1 writes data obj1tof1 writes member functions data obj1tof1 writes address obj1tof1  command arguments disagreements military typed program command prompt accessed arguments main accessible disk files  cin skipwsflag accomplish  write declarator main enable command arguments  console mode programs printer accessed predefined filename ________  write declarator overloaded operator takes output object classistreamand displays contents object class sample exercises answers starred exercises appendix  start distanceclass englconexample chapter  objects classes loop diskfunexample chapter num ber distancevalues user write disk file append existing values file user signals values input read file display values chapter   ch12        write program emulates dos copycommand copy tents text file cppfile file invoke program command arguments source file destination file ocopy srcfile cpp destfile cppin program check user typed correct number command argu ments files opened  write program returns size bytes program entered command filesize program ext4 loop prompt user enter dataconsisting middle initial employee number type unsigned long formatted insertion operator write data items ofstreamobject strings terminated space whitespace character user data entered close ofstreamobject open anifstreamobject read display data file terminate program  create timeclass includes integer member values hours minutes seconds member function get_time time user function put_time displays time    format add error checking get_time function minimize user mistakes function request hours minutes onds separately check ioserror status flags correct range hoursshould   minutes seconds   input values strings convert read directly integers implies screen entries superfluous points engl_ioprogram chapter assume inmain loop repeatedly timeval user get_time andthen display put_time enter hours enter minutes  enter seconds  time   do yenter hours  hours   enter hours  enter minutes  enter seconds incorrect seconds input enter seconds  time   streams files12streamsandfiles62913  ch12        class called namefrom data exercise  middle initial employee number create member functions class read write object data disk file ofstream read ifstream matted data operators read write member functions contained include statements open stream read write record write function simply append data file read function select record read parameter representing record number record read read function record seekg function formatted records lengths depending number characters strings number digits integer read records skipped ward inmain member functions user enter data number objects written file entered program displays data reading file  approach adding file stream object file stream static member object conceptually easier stream class individual objects class efficient open stream read write objects needed file opened time read function called return data object file file pointer progress automatically file file closed reads rewrite program exercises   fstreamobject static data itemof class functionality exercises write static function open stream static function reset file pointer file reset function writing read records file  starting linklistprogram chapter  pointers create program user options selected pressing key add link list memory user supplies data integer display data links memory write data links disk file creating truncating file nec essary read data file construct linked list store itchapter   ch12       options member functions implemented linklist write functions read write disk file file reads writes file store data sense storing contents pointers relevant list read  start exercise  chapter  operator overloading overload insertion extraction operators fracclass function calculator note chain operators fraction operator fraction require statement cin frac1 frac2  add error checking extraction operator fracclass exercise  error checking prompt fraction operator fraction single statement exercise  format comprehensible interspersed error messages enter fraction  denominator enter fraction  enter operator enter fraction input errorenter fraction  answer   implied sample interaction check ioserror flags fora denominator  error prompt user enter fraction  start bmoneyclass exercise  chapter  overload insertion extraction operators perform bmoneyquantities perform somesample main  empl_ioprogram chapter add ability search employee objects disk file employee number finds match display data employee user invoke func tion typing character function prompt employee num ber function static virtual search display operation interfere data memory streams files12streamsandfiles63113  ch12       chapter note read file generated empl_ioprogram classes notthe member function program disasterwill result data mixed discussed chapter turn enable rtti option compiler consult appendix microsoft visual appendix borland builder note13  ch12       chapter13multifile programs chapter reasons multifile programs634 creating multifile program637 inter file communication638 long number class651 high rise elevator simulation658   ch13       chapter in previous chapters parts program class decla rations member functions main function combined programs chapters consisted single file program organization wider perspective involving multiple files communication carried files header files fit picture discussing multifile programs general chapter introduce longer ambitious applications aim programs understand operation acquire general understanding ele ments larger programs relate programs classes realistic applications short examples hand long takes spring wade reasons multifile programs reasons multifile programs include class libraries organization programmers working project conceptual design pro gram reflect issues class librariesin traditionalprocedure oriented languages long customary software vendors furnish libraries functions programmers combine libraries custom written routines create application user libraries provide ready functions wide variety fields instance vendor supply library functions handling statistics calculations advanced memory management organized classes functions surprising libraries programs consist classes surprising class library fashionedfunction library classes encapsulate data functions closely model objects real life interface class library application cleanerthan provided bya function library reasons class libraries assume role programming func tion libraries traditional programming class library greater portion programming burden applications programmer class library minimal programming create final product class libraries created chances finding solves programming problem continues increase   ch13       class library chapter  standard template library class library includes components interfaceandthe implementation difference interfacelet thatthe person wrote class library called class developer personwho library called programmer class library programmer access declarations including class declarations declarations thought public library usu ally furnished source code form header file hexten sion file typically combined client source code includestatement declarations header file public reasons conve nience client actual class definitions read description importantly programmer declare objects based classes member functions objects declaring classes source file declarations called interfacebecause user class program mer sees interacts programmer concerned library implementation implementationon hand theinner workings member functions classes programmer class developers software develop ers release source code illegally modified pirated member functions short inline functions distributed object form objfiles library lib files figure   files multifilesystem organization conceptualizationprograms bebroken multiple files reasons accommodation class libraries programming languages common situation involves project programmers teams programmers confining programmer responsibility separate file helps organize project define cleanly interface differ ent parts program multifile programs multifile programs63514  ch13       figure13 files multifile application case program divided separate files functionality file handle code involved graphics display file handles mathematical analysis handles disk large programs single file simply large handle conveniently techniques working multifile programs reasons dividing program chapter   ch13       creating multifile program suppose purchased prewritten class file called obj library file libextension dealt header file saytheirs written program classes library source file called cpp combine component files obj cpp single executable program header filesthe header file easily incorporated source file cpp includestatement include quotes angle brackets filename compiler file current directory inthe default include directory directory thecomponent files obj cpp samedirectory fact create separate directory project avoid confusion strictly simplest approach compiler library files iostreamandconio direc tory called include buried levels compiler directory structure compiler directory compiler include directories create header files directory projects appendix microsoft visual appendix borland builder explain compiler directory located projects compilers manage multiple files project metaphor project files application instructions combining files special file called project file extension file varies compiler vendor bprfor borland dspfor microsoft modern compilers construct maintain file automatically worry general compiler source cpp files plan project add objand libfiles appendixes provide details creating multifile pro grams specific compilers multifile programs multifile programs63714  ch13       single command compiler compile source cppand files link objfiles objor libfiles final exefile called thebuildprocess exefile executed windows advanced programming types files nice things project track dates compiled source file source files modified build recom piled save considerable time large projects compilers distinguish command build command compiles source files changed build build compiles files ofdate inter file communication multifile program program elements files communicatewith discuss discuss communi cation handled separately compiled source cpp files linked header files included source files fit picture communication source files explores elements separate source files communicate examine kinds programming elements variables functions classes rules inter file idea scope refer discussion scope storage class chapter  scope region program variable program element accessed elements declared function localscope visible function body class members visible class scope resolution operator program elements declared function class globalscope entire file point defined vis ible files inter file variables start simple variables recall distinction declaration definition declare simple variable type provide physical location memory variable tells compiler variable type exist variable defined place memory hold variable definition creates real variable chapter   ch13       declarations definitions declaration simple variable nota definition keyword extern initializer int somevar declaration definitionextern int somevar declaration onlyas expect global variable defined place program file int globalvar definition file file bint globalvar illegal definition file bof discussion applies global variables define variables type provided local functions classes access global variable file file fact linker object defining global variable file vari file automatically visible code files declare variable file file aint globalvar defined file bglobalvar  illegal globalvar unknown herethe compiler globalvaris unidentified identifier variable accessed files defined declare files keyword extern file int globalvar definition file bextern int globalvar declaration globalvar  okthe declarationcauses globalvarin file visible file externkeyword signals declaration onlya declaration definition tells compiler file time worry globalvarvariable file undefined linker sees files care connecting reference variable file definition multifile programs multifile programs63914  ch13       note surprising restriction initialize variable externdeclaration statement extern int globalvar  thinkwill compiler assume meant define globalvar declare itwill simply ignore externkeyword create definition variable defined file defined error linker global variables files case define statickeyword restricts variable visibility file defined variables files file astatic int globalvar definition visible file file bstatic int globalvar definition visible file balthough variables defined conflict code file refers globalvarwill access variable file code file behaves wise static variables internal linkage static global variables exte rnal linkage namespaces restrict variable scope single file multifileprogram good idea global variables static accessed files prevents problems mistake file clearer listing worry variable accessed notice keyword statichas meanings depending applied local global variable chapter  functions staticmodifies local variable defined inside function variable lifetime function program visibility restricted function dis cussed chapter  objects classes staticclass data member objects separate object global variable staticsimply restricts visibility file aconstvariable defined file visible files regard staticvariable constvariable visible anotherfile externkeyword definition declaration file aextern const int convar2  definition file bextern const int convar2 declarationchapter   ch13       file access constvariable file compiler difference constdefinition declaration variable initialized inter file functions remember function declaration specifies function return type type arguments function definition declaration includes function body body code braces compiler generates function function works function return type types argu ments declaration specifies easy define function file calls file extra keywords extern needed declare function file making calls file aint add int int function definition return includes function body file int add int int function declaration body int answer add   functionyou keyword externwith functions compiler dif ference function declaration definition declaration body incidentally declare define function program element times compiler object declarations disagree file aint add int int declaration int add int int declaration oklike variables functions invisible files declaring static file static int add int int function definition return file static int add int int function return code creates distinct functions visible file multifile programs multifile programs64114  ch13       inter file classes classes unlikesimple variables definition class set mem ory informs compiler members constitute class ing bytes type int compiler makeup type int type someclassuntil define class definition declarations definitions members class someclass class definition private int memvar member data definitionpublic int memfunc int int member function declaration members declared defined class definition member function definitions routinely class identified scope resolution operator class declaration simply statement applies class conveys compiler members class class someclass class declaration confuse class definition definition creation object class someclass anobj class definition definition object sets space memory object classes behave differently variables functions inter file communication access class multiple source files define class declare file objects fact class defined file declared file compiler create objects class file class defined file compiler data type compiling declaration simple variables declarationspecifies type compiler declarationextern int somevar sees compiler somevar  generate thissimilarly declaration function reveals data types needed func tion chapter   ch13       declarationint somefunc int int sees compiler var1 somefunc var2 var3 generate thishowever class entire definition types member data functions definitionclass someclass sees compiler private int memvar public int memfunc int int someclass someobj generate v1 someobj memfunc v2 v3 thisa mere declaration insufficient compiler generate code deal class objects pointers references objects define class source cpp file source file pro gram definition class definition work objects class header file supply class definition files header filesas chapter  includepreprocessor directive acts paste function word processor causing text file inserted exam ples library files iostreambeing included source files write header files include source files common informationone reason usea header file supply source files informa tion header file holds variable function declarations included source files variables functions accessed files program element defined variable function declared fileh hand defined filea cpp code fileb cppcan usethese elements additional declarations fileh extern int glovar variable declaration int glofunc int function declarationmultifile programs multifile programs64314  ch13       filea cpp int glovar variable definition int glofunc int function definition return fileb cpp include fileh glovar  work variable int glovarb glofunc glovar work functionbeware declarations header file variable function defini tions header file shared multiple source files staticorconst definitions source files linker issue multiply defined errors common essential technique class definition header file included source file multiply defined problem class definition set memory specification fileh hclass someclass class definition private int memvar public int memfunc int int filea cpp include fileh int main someclass obj1 create object int var1 obj1 memfunc   work object fileb cpp include fileh int func someclass obj2 create object int var2 obj2 memfunc   work object chapter   ch13       header file copied text class definition pasted manually source file modification class require change definition file seperately time consuming prone errors class definitions external member function definitions external member functions defined ordinary functions source file linker connect needed class definition serves declare member functions file single file member function definition include class scope resolution operator fileh hclass someclass class definition private int memvar public int memfunc int int member function declaration filea cpp include fileh int someclass memfunc int n1 int member function definition return n1 fileb cpp include fileh someclass anobj create object int answer anobj memfunc   member functionthe multiple includes hazard mentioned define function variable header file shared multiple source files multiple definition errors problem arises include header file source file thing hap pen mistake obvious file app cpp include headone include headone suppose source file app cppand header files headone handheadtwo suppose headone hincludesheadtwo forget include app cpp multifile programs multifile programs64514  ch13       file headtwo hint globalvar file headone include headtwo file app cpp include headone include headtwo compile app cpp includedirectives pasted text header files app cpp file app cpp int globalvar head2 headone int globalvar head2 directlythis compiler complain globalvaris defined preventing multiple includes prevent multiple definition errors header file included source file precede definitions header file preprocessor directive defined headcom identifier headcom statement headcomisnotdefined exclamation point logical text directive closing endifdirective pasted source file headcomisdefined accomplished directive define headcomthen text included source file movies ends cutting room floor headcomis defined text encountered defined defined directive text closing endifwill included time encountered arrangement defined headcom headcom defined define headcom define itint globalvar define variablechapter   ch13       int func int int define function return endif conditionyou approach possibility header file included source file older directive ifndef defined inmany header files supplied compiler discouraged note defined approach works situation definition globalvar variable function included multiple times source file work globalvaris defined file file included source files preprocessor powerless detect multiple statements separate files linker complain globalvaris multiply defined namespaceswe restrict visibility program elements declaring file class making global elements staticorconst versatile approach required writing class library programmers prefer short common names member functions classes add andbook short mon names turn names selected creators library byan application library lead clashes generate multiple definition errors compiler advent namespaces programmers forced long names avoid problem henry s_simplified_statistics_library_add long names difficult read write excessive space listing namespaces solve problem note member functions clashes scope limited class defining namespacea namespace asection file code defines spacegeowith declarations inside namespace geo const double   double circumf double radius return  radius namespace geomultifile programs multifile programs64714  ch13       braces delimit namespace variables program elements declared braces called namespace members notice semicolonfollowing closing brace classes accessing namespace memberscode namespace access elements normal namespace invisible namespace geo const double   double circumf double radius return  radius namespace geodouble circumf  work hereto elements visible namespace invoke namespace referring ways precede element namespace scoperesolution operator double geo circumf  okor usingdirective namespace geo double circumf  oktheusingdirective ordinarily namespace visible point onward restrict region usingdirective block function void seriouscalcs namespace geo code double circumf double circumf okhere members namespace visible function body namespaces header filesnamespaces commonly header files library classes functions library namespace time familiar spacestd members constitute standard library chapter   ch13       multiple namespace definitionsthere severalinstances namespace definition namespace geo const double   namespace geo code namespace geo double circumf double radius return  radius namespace geothis redefinition continuation definition namespace header files included source file standard library dozensof header files namespace std filea hnamespace alpha void funca fileb namespace alpha void funcb filemain cpp include filea include fileb namespace alpha funca funcb place declarations namespace behave inside scope resolution operator namespace namespace beta int uno int beta dos unoanddosare declared namespce beta multifile programs multifile programs64914  ch13       unnamed namespacesyou create namespace creates namespace automati cally visible file defined visible files piler unnamed namespace internal unique file elements declared unnamed namespace accessed file listing funca andfuncb access glovarvariable respective files filea cppnamespace unnamed namespace unique filea cpp int glovar  funca cout glovar displays  fileb cpp namespace unnamed namespace unique fileb cpp int glovar  funcb cout glovar displays in files variable named glovar conflict variables declared unnamed namespace unique file invisible approach alternative staticfor restricting scope globalvariables file fact namespace approach considered preferable making elements static renaming types typedefyou typedefkeyworduseful situations people listings create data type statement typedef unsigned long unlong unlonga synonym unsigned long declare variables unlong var1 var2 save space listing readable type names reveal purpose variables declared type chapter   ch13       typedef int flag int variables hold flag valuestypedef int kilograms int variables hold values kilogramsif likethe pointers change int normal declaration typedef int ptrint pointer int ptrint simplified declarationthis avoids pesky asterisks classes types typedefto create alternative names earlier mentioned developers create excessively long names names writing inconvenience listing hard read problem class names typedef class georgesmith_display_utility class definition members typedef georgesmith_display_utility gsdu rename classgsdu anobj create object nametype renaming typedefis typically handled header files multiple source files names software development organizations extensive typedef language explored general concepts involved multifile programs examples programs demonstrate topics covered previous typical situations application programmer code provided library writer long number class basic data type unsigned longdoes provide precision cer tain integer arithmetic operations unsigned longis largest integer type standard holding integers     digits number digits pocket calculator handle work integers digits problem offers solution class holds integers   digits long longer numbers shorter change single stant inthe program multifile programs multifile programs65114  ch13       numbers stringstheverylongclass stores numbers strings digits fashioned char strings easier work context stringclass strings explains large digit capacity handle long strings simply arrays representing numbers strings long data members verylong chararray hold string digits intto long string length data strictly saves strlen repeatedly string length digits string stored reverse order digit stored vlstr  simplifies opera tions string figure   number stored string chapter figure13 averylongnumber provided user accessible routines addition multiplication verylongnumbers leave exercise reader towrite subtraction division routines class specifierhere header file verylong specifiers verylongclass verylong class specifier long integer type include iostream include string strlen include stdlib ltoa namespace std const int  maximum digits verylongs14  ch13       class verylong private char vlstr verylong number string int vlen length verylong string verylong multdigit const int const prototypes verylong mult10 const verylong const private functionspublic verylong vlen  arg constructor vlstr   verylong const char arg constructor strcpy vlstr vlen strlen stringverylong const unsigned long arg constructor long int ltoa vlstr  convert string strrev vlstr reverse vlen strlen vlstr length void putvl const display verylong void getvl verylong user verylong operator const verylong add verylongs verylong operator const verylong multiply verylongs addition data members private member functions class verylong multiplies verylongnumber single digit multiplies verylongnum ber  routines internally multiplication routine constructors sets verylongto  inserting terminating null thebeginning array setting length  initializes string reverse order initializes long intvalue theputvl member function displays verylong getvl verylongval fromthe user type digits   note error checking routine type digit inaccurate overloaded operators perform addition multiplication expres sions alpha beta gamma delta verylongarithmetic multifile programs multifile programs65314  ch13       member functionshere verylong cpp thefile holds member function definitions verylong cpp implements long integer type include verylong header file verylong void verylong putvl const display verylong char temp strcpy temp vlstr copy cout strrev temp reverse copy display void verylong getvl verylong user cin vlstr string user vlen strlen vlstr length strrev vlstr reverse verylong verylong operator const verylong add verylongs char temp int longest numberint maxlen vlen vlen vlen vlen int carry  set  sum   maxlen position int d1 vlen   vlstr  digit int vlen   vlstr  digit int digitsum d1 carry add digits digitsum  carry digitsum  carry  decrease sum  set carry carry  carry temp digitsum  insert char string carry  carry temp  digit temp  terminate string return verylong temp return temp verylong chapter   ch13       verylong verylong operator const verylong multiply verylongs verylong pprod product digit verylong tempsum running total int  vlen digit arg int digit vlstr  digit pprod multdigit digit multiply digit int  multiply result bypprod mult10 pprod power tempsum tempsum pprod add product total return tempsum return total prods verylong verylong mult10 const verylong const multiply arg  char temp int vlen   digits onetemp  vlstr position highertemp   low temp vlen   terminate string return verylong temp return result verylong verylong multdigit const int const multiply verylong char temp digit argument int carry   vlen position verylong int d1 vlstr  digit int digitprod d1 multiply digit digitprod carry add carry digitprod  carry carry digitprod  carry high digit digitprod carry  result low digit elsecarry  carry temp digitprod  insert char string carry  carry temp carry  digitmultifile programs multifile programs65514  ch13       temp  terminate stringreturn verylong temp return verylong theputvl andgetvl functions fairly straightforward strrev clibrary function reverse string stored reverse order input displayed theoperator function adds verylongs leaves result verylong itdoes digits time adds digit  numbers storing carry adds digits position  adding carry tinues digits larger numbers numbers dif ferent lengths nonexistent digits shorter number set to0 figure   process chapter figure13 addingverylongnumbers   ch13       multiplication operator function function multiplies multiplicand number write hand separate digit multiplier bottomnumber calls multdigit routine multiplied  number times shift result match position digit mult10 function separate calculations operator function application program verylongclass variation fact orprogram chapter  loops decisions calculate factorial number entered user listing vl_app cpp vl_app cpp calculates factorials larger numbers verylong class include verylong verylong header fileint main unsigned long numb verylong fact  initialize verylongcout nenter number cin numb input long intfor numb  factorial numb fact fact numb  numb  cout factorial numb  onfact putvl display factorial cout endl return  program factis verylongvariable variables numbandj verylongs big calculate factorial  numbandjrequire digits factrequires  notice expression fact fact long variable jis automatically converted verylong argument construc tor multiplication carried multifile programs multifile programs65714  ch13       output program factorial  enter number factorial   try thatusing type longvariables surprisingly routines fairly fast program exe cutes fraction calculate factorial numbers  exceed  digit capacity program high rise elevator simulationthe time waiting elevator high rise office building elevators figure days human elevator opera tor car good morning burberry good morning carl riders needed operator destination floor seventeen panel signal lights lit inside car floors requesting service operators decided basis verbal requests observation signal lights nowadays intelligence built elevator systems permit cars operate classes model elevator components typical building number elevators floor buttons note pair buttons floor push button elevator elevator larger number buttons floor enter ing elevator riders push button destination simulation program model components running elevprogram start elevprogram elevators sitting screen list numbers left starting  screen continu ing  elevators initially ground floor figure   chapter   ch13       figure13 theelevprogram initial screen making floor requestif press enter text screen prompts enter floor enter floor number   arrived work ground floor enter  leaving higher floor lunch enter floor number prompt enter direction floor th floor intermediate floors completed floor request triangle floor number left point depending direction requested requests triangles additional floor numbers elevator car floor request door open happy face character materialize car open door car floor making request floor open door reaches floor multifile programs multifile programs65914  ch13       entering destinationsonce car arrivesat floor happy face passenger inside prompt appears screen car  stopped floor enter destination floors  finished destination  here passenger entered  happy face represent senger passenger request destination program multiple destinations entered enter numbers   enter  destinations requested passengers car small rectan gles displayed car left opposite floor number requested car set destinations floor requests shared cars floor requests remember requests destinations selected car attempt service cars motion time figure   situation multiple floor requests multiple destinations chapter figure13 elevators action designing systemthe elevator cars roughly reasonable objects single class called elevator class data specific car location direction destination floor numbers requested occupants   ch13       data applies building data buildingclass array floor requests list floors people waiting elevator pushed button request elevator floor elevator respond floor request  array type bool number floors  separate array elements floor elevators array retrying figure knowing floor requests elevator car aware elevators floor point rushing th floor answer request car th floor closest car head request easy car data item buildingis array pointers elevators elevator car stores memory address list created cars data item buildingclass number cars created car number sequentially screated managing timethemain program calls member function buildingat fixed intervals things motion function called master_tick turn calls function elevator car calledcar_tick1 function things displays car screen calls function decide car choices load passenger unload passenger car moved position things complicated car figure decide cars decision process moves time ticks car car_tick1 called todecide car function car_tick2 called car cars changing variable current_floor process loading passengers fixed sequence steps car stopped desired floor program draws order  car closed door happy face  car open door happy face left  car happy face open door destinations user  car closed door happy face multifile programs multifile programs66114  ch13       reverse sequence applies unloading sequences carried starting timer integer variable letting count   decrementing time tick acasestatement car_display function draws version car stage process elevprogram console graphics functions requires header file book publisher msoftcon hfor microsoft compilers orborlacon hfor borland compilers appendix console graphics lite listings elevwe divided program files files elev handelev cpp mi ght becreated vendor supplying elevator control software software pur chased engineering company interested designing elevator building program certified national elevator board real elevators engineering company write pair files elev_app handelev_app cpp elev_app hfile specifies characteristics high rise building separate file characteristics elevator class member functions easiest include elev_app hin elev hfile theelev_app cppfile initializes elevators calls elevator functions fixed intervals simulate passage time class specifiertheelev hfilecontains specification elevator class array pointers eleva tors car_list elevator query location direction listing elev header file elevators class declarations include elev_app provided client include msoftcon console graphics include iostream include iomanip setw include conio screen output include stdlib itoa include process exit namespace std enum direction dn const int load_time  loading unloading time ticks const int spacing  visual spacing cars const int buf_length  length utility string bufferchapter   ch13       class building forward declaration class elevator private building ptrbuilding ptr parent building const int car_number number   int current_floor  nf  int old_floor  nf  direction current_dir bool destination num_floors selected occupants int loading_timer loading int unloading_timer unloadingpublic elevator building int constructor void car_tick1 time tick  car void car_tick2 time tick  car void car_display display elevator void dests_display const display elevator requests void decide decide void car void get_destinations destinations int get_floor const current floor direction get_direction const current direction class building private elevator car_list num_cars ptrs cars int num_cars cars created array buttonsbool floor_request  num_floors false true dnpublic building constructor building destructor void master_tick send ticks cars int get_cars_floor const int const car car goingdirection get_cars_dir const int const check specific floor reqbool get_floor_req const int const int const set specific floor reqmultifile programs multifile programs66314  ch13       void set_floor_req const int const int const bool void record_floor_reqs floor requests void show_floor_reqs const floor requests member functionstheelev cppfile definitions elevatorclass buildingclass memberfunctions data functions buildinginitialize provide master time tick dis play floor requests floor requests user functions elevatorinitializeindividual cars constructor provide time ticks car display display destinations decide car floor destinations user listing elev cpp class data member function definitions include elev include class declarations function definitions class building building building constructor char ustring buf_length string floor numbersinit_graphics initialize graphicsclear_screen clear screen num_cars  int  num_cars elevators car_list elevator num_cars num_cars int  num_floors floor set_cursor_pos  num_floors floor number itoa  ustring  screen cout setw  ustring floor_request false floor requests floor_request dn false constructor building building destructor int  num_cars delete car_list chapter   ch13       void building master_tick master time tick int show_floor_reqs display floor requests  num_cars elevatorcar_list car_tick1 send time tick for  num_cars elevatorcar_list car_tick2 send time tick  master_tick void building show_floor_reqs const display floor requests int  num_floors set_cursor_pos spacing num_floors floor_request true cout x1e arrowelsecout set_cursor_pos spacing  num_floors floor_request dn true cout x1f arrowelsecout show_floor_reqs record_floor_reqs requests riders car void building record_floor_reqs char utility char input char ustring buf_length utility string input int ifloor floor request char chdirection downset_cursor_pos   screencout press enter elevator kbhit wait keypress return cin ignore  x1b escape key programexit  set_cursor_pos   clear_line clear text set_cursor_pos   screen cout enter floor multifile programs multifile programs66514  ch13       cin ustring buf_length floorcin ignore  eat chars including newline ifloor atoi ustring convert integercout enter direction cin chdirection avoid multiple linefeeds cin ignore  eat chars including newlineif chdirection chdirection floor_request ifloor  true floor requestif chdirection chdirection floor_request dn ifloor  true floor requestset_cursor_pos   clear_line clear textset_cursor_pos   clear_line set_cursor_pos   clear_line record_floor_reqs get_floor_req specific request bool building get_floor_req const int dir const int floor const return floor_request dir floor set_floor_req set specific floor request void building set_floor_req const int dir const int floor const bool updown floor_request dir floor updown get_cars_floor car int building get_cars_floor const int carno const return car_list carno get_floor get_cars_dir car direction building get_cars_dir const int carno const return car_list carno get_direction function definitions class elevator chapter   ch13       constructorelevator elevator building ptrb int ptrbuilding ptrb car_number current_floor  start  user  old_floor  remember previous floor current_dir stationary start int  num_floors occupants pusheddestination false buttons yetloading_timer  loading unloading_timer  unloading constructor int elevator get_floor const current floor return current_floor direction elevator get_direction const current direction return current_dir void elevator car_tick1 tick  car car_display display elevator box dests_display display destinations loading_timer count load time loading_timer unloading_timer count unload time unloading_timer decide decide car_tick cars decide void elevator car_tick2 tick  car car void elevator car_display display elevator image set_cursor_pos spacing car_number  spacing num_floors old_floor cout erase position set_cursor_pos spacing  car_number  spacing num_floors current_floor multifile programs multifile programs66714  ch13       switch loading_timer case  cout x01 xdb xdb draw car open door break happy face leftcase  cout xdb x01 xdb happy face open door get_destinations destinations break case  cout xdb xdb xdb draw closed door break happy facecase  cout xdb xdb xdb closed door break happy face default set_cursor_pos spacing car_number  spacing num_floors current_floor switch unloading_timer case  cout xdb x01 xdb draw car open door break happy face carcase  cout xdb xdb x01 draw car open door break happy face rightcase  cout xdb xdb xdb draw closed door break happy facecase  cout xdb xdb xdb closed door break happy face default old_floor current_floor remember floor car_display void elevator dests_display const display destinations selected buttons int  num_floors inside car set_cursor_pos spacing  car_number  spacing num_floors destination true cout xfe small boxelsecout blank chapter   ch13       dests_display void elevator decide decide int flags destinations requests bool destins_above destins_below destinations bool requests_above requests_below requests floor number closest request int nearest_higher_req  int nearest_lower_req  flags car direction nearest floor request bool car_between_up car_between_dn flags car opposite direction opposite nearest bool car_opposite_up car_opposite_dn floor direction car int ofloor floor direction odir direction ensure high lowif current_floor num_floors  current_dir current_floor  current_dir dn current_dir destination floor unload passengers destination current_floor true destination current_floor false erase destination unloading_timer unloadunloading_timer load_time return floor request floor stopped load passengers ptrbuilding get_floor_req current_floor current_dir dn current_dir case remove floor request direction ptrbuilding set_floor_req current_dir current_floor false loading_timer loadloading_timer load_time return multifile programs multifile programs66914  ch13       floor request floor stopped load passengers ptrbuilding get_floor_req dn current_floor current_dir current_dir dn case remove floor request direction ptrbuilding set_floor_req current_dir current_floor false loading_timer load passengersloading_timer load_time return check destinations requests record distance nearest request destins_above destins_below false requests_above requests_below false current_floor  num_floors check floors destination destinationsdestins_above true set flagif ptrbuilding get_floor_req ptrbuilding get_floor_req dn requests requests_above true set flag nearest_higher_req set beforenearest_higher_req set nearest req current_floor   check floors destination destinationsdestins_below true set flagif ptrbuilding get_floor_req ptrbuilding get_floor_req dn requests requests_below true set flag nearest_lower_req set beforenearest_lower_req set nearest req requests destinations destins_above requests_above destins_below requests_below chapter   ch13       current_dir return destinations stopped destinations destins_above current_dir current_dir current_dir return destins_below current_dir current_dir dn current_dir dn return cars direction nearest floor request opposite direction floor request car_between_up car_between_dn false car_opposite_up car_opposite_dn false  num_cars check car car_number floor ofloor ptrbuilding get_cars_floor odir ptrbuilding get_cars_dir direction requests usif odir odir requests_above nearest request ofloor current_floor ofloor nearest_higher_req floor lower car number ofloor current_floor car_number car_between_up true requests odir dn odir requests_below nearest request ofloor current_floor ofloor nearest_lower_req floor lower car number ofloor current_floor car_number car_between_dn true requests usmultifile programs multifile programs67114  ch13       odir odir requests_below request closer areif nearest_lower_req ofloor nearest_lower_req ofloor current_floor nearest_lower_req car_opposite_up true requests odir dn odir requests_above request closer ofloor nearest_higher_req ofloor nearest_higher_req nearest_higher_req current_floor car_opposite_dn true car stopped cars closer current_dir current_dir requests_above car_between_up car_opposite_dn current_dir return stopped cars closer current_dir dn current_dir requests_below car_between_dn car_opposite_up current_dir dn return happening current_dir decide finally void elevator loading unloading loading_timer unloading_timer movereturn current_dir upchapter   ch13       current_floor current_dir dn downcurrent_floor void elevator get_destinations destinations char ustring buf_length utility buffer input int dest_floor destination floorset_cursor_pos   clear_line clear lineset_cursor_pos   cout car car_number  stopped floor current_floor  nenter destination floors  finished int  num_floors floor requests maximum fewer set_cursor_pos   cout destination cin ustring buf_length avoid multiple lfs cin ignore  eat chars including newline dest_floor atoi ustring set_cursor_pos   clear_line clear input dest_floor  requests clear lines set_cursor_pos   clear_line set_cursor_pos   clear_line set_cursor_pos   clear_line return dest_floor start   dest_floor current_floor chose floor continue forget stopped choice sets direction  current_dir current_dir dest_floor current_floor dn destination dest_floor true record selection dests_display display destinations get_destinations applicationthe files elev_app handelev_app cpp created particularbuilding mind customize software building elev_app hdoes thisby defining constants number floors number elevators building listing multifile programs multifile programs67314  ch13       elev_app constants building characteristicsconst int num_floors  number floorsconst int num_cars  number elevator carselev_app cppinitializes data buildingclass creates number elevatorobjects array loop calls buildingfunc tionsmaster_tick andget_floor_requests wait function declared msoftcon horborlacon slows things human oriented speed user answering prompt time program time opposed user time stops listing elev_app cpp elev_app cpp client supplied file include elev class declarations int main building thebuilding true thebuilding master_tick send time tick cars wait  pause floor requests userthebuilding record_floor_reqs return  elevator strategybuilding necessaryintelligence elevator cars simple task handled thedecide function consists series rules rules arranged order priority applies action carried rules queried simplified version  elevator crash shaft roof  destination floor unload passengers  floor request floor load passengers chapter   ch13        floor request floor load passengers  destinations requests  destinations  destinations  stopped floor request cars request closer  stopped floor request cars request closer  rules apply rules   complicated attempt cars rushing answer floor request perfect situations cars slow answer requests afraid car fact car answering floor request program strategy improved allowing decide function distinguish requests checks requests current car compli cate decide longenough leave refinements state diagram elevprogram introduced uml state diagrams chapter  pointers state dia gram elevatorobject simplify things assume person building elevator floor request time destination selected rider elevator car worry cars figure   diagram stands car destination button pushed inside car roughly corre sponding destinationarray program stands floor request button pushed car floor_reqvari states derived values current_dirvari status car loading_timerandunloading_timer transitions result time ticks guard conditions guards represent car finds floor requests car destinations multifile programs multifile programs67514  ch13       figure13 state diagram elevatorobject summaryvendor provided object libraries distributed public component interface class declarations hheader file private component implementa tion member function definitions objobject file liblibrary file compilers combine source object files single executable file permits files provided vendor combined files create final application project feature simplifies keeping track files piled compiles source file modified linking links object files inter file communication requires variables functions class objects defined file declared file class definition file objects instantiated care source files header files ensure multiple definitions occur chapter stoppedgoingupgoingdown unloadingclear cdgettingcdloadingclear   ch13       questionsanswers questions appendix  breaking program files desirable files recompiled time program divided functionally files marketed object form programmers work files  hfile cppfile ________  objfile attached cppfile ________  project file containsa contents files project dates files project instructions compiling linking definitions variables  group classes supplied separate product called ________  true false header file accessed source file project  called private files class library require password accessed friendfunctions prevent code pirated consist object code  true false class libraries powerful function libraries  true false interface private implementation public  public class library member function declarations member function definitions class declarations definitions inline functions  source files combined ____________ multifile programs multifile programs67714  ch13        true false variable defined function body thoughout file defined  global variable defined file access variable file define file keyword extern define file keyword static action declare file keyword extern  region program variable accessed variables parts program called __________  files combined linker called _________ files  function defined file file function __________ ________  true false function declaration require keyword extern  define class objects files file declare class define class declare class extern define class extern  true false variable defined header file accessed source files include header file  defined endifconstruction prevent multiple definitions header files included source file header file included source files header files included source files header file included header file included source file  namespaces automate naming variables restrict area program elements visible divide program separate files prevent long variable names chapter   ch13        define namespace format class definition substitute keyword ________ class  typedef shorten long variable names substitute type shorten long function names substitute class projects room book exercises involve kind larger programs discussed chapter suggestions projects pursue  create member functions perform subtraction division verylongclass intheverylong overload operators warning work involved include subtraction assume verylongcan negative positive complicates addition multipli cation routines things depending signs numbers perform division long division hand write step incorporate steps division member function comparisons write comparison routine things  rewrite elevprogram handles elevator simplify things great deal remove parts program assume elevator rider state diagram  modify elevprogram efficient handles requests current optimal behavior start program request floor  request floor  car  head  car  head  waits car  passed  starting modifydecide happen  create class library models interested create main client program test market class library rich famous multifile programs multifile programs67914  ch13         ch13       chapter14templates exceptionsin chapter function templates682 class templates690 exceptions703   ch14       chapter this chapter introduces advanced features templates exceptions templates function class handle data types exceptions provide convenient uniform handle errors occur classes features bined single chapter historical reasons time original specification introduced experimental topics ellis stroustrup  appendix bibliography subsequently incorporated standard template concept intwo ways functions classes function templates class templates finally exceptions function templates suppose wantto write function returns absolute numbers doubt remember high school algebra absolute number regard sign absolute   absolute   ordinarily function written data type int abs int absolute ints return  negative return function defined argument type intand return type suppose absolute type long write completelynew function long abs long absolute longs return  type float float abs float absolute floats return  body function written case completely differ ent functions handle arguments return values types true functions overloaded   ch14       write separate definition language support overload ing functions types function library leads families named functions abs fabs fabsl labs andcabs rewriting function body types time consuming wastes space listing error function remember correct function body failing correctly good introduce inconsistencies program nice write function work data types function templates idea schematically figure   templates exceptions14templates andexceptions683int func int arg float func float arg char func char arg i1 func func f1 func function template inlisting source file argument type determines function instantiationmany template functions memorytemplate class func arg figure14 a function template   ch14       simple function template write absolute function template work basic numerical type program defines template version abs andthen main invokes function data types prove works listing tempabs tempabs cpp template absolute function include iostream namespace std template class function template abs return  int main int int1  int int2  long lon1 l long lon2 l double dub1   double dub2   calls instantiate functionscout nabs int1 abs int1 abs int cout nabs int2 abs int2 abs int cout nabs lon1 abs lon1 abs long cout nabs lon2 abs lon2 abs long cout nabs dub1 abs dub1 abs double cout nabs dub2 abs dub2 abs double cout endl return  output program abs   abs   abs   abs   abs     abs    chapter   ch14       abs function works data types int long anddouble arguments work basic numerical types work user defined data types provided operator unary minus operator appropriatelyoverloaded abs function work multiple data types template class function templatet abs return  entire syntax starting keyword templateand function defini tion called function template writing abs amazingflexibility function template syntax key innovationin function templates represent data type function specific type int stand anytype precedingfunction template magic type anytype foobar templatekeywordsignals compiler define function template keyword class angle brackets called type define data types classes distinction types classes variable keyw class tin called template argument definition template specific data type intwouldordinarily written substitute template argument abs template nameappears function declarator argument type return type complex functions numerous times function body aswell compiler doeswhat compiler sees templatekeyw function definition function template compiler generate code generate code data type func tion working simply remembers template future code generation place function called invoked state ment program tempabs expressions abs int1 statementcout nabs int abs int1 templates exceptions14templates andexceptions68515  ch14       compiler sees function type useis int type argument int1 generates specific version abs function typeint substituting intwherever sees tin function template called instantiatingthe function template instantiated version function called template function template functionis specific instance function template english fun compiler generates newly instantiated function inserts code abs int1 expression abs lon1 compiler generatea version abs operates type longand function abs dub1 generates function works type double compiler smart generate version abs data type calls theintversion function code version appears theexecutable code simplifying listingnotice thatthe ram program template approach write separate functions template approaches simply saves type separate functions source file listing shorter easier understand change function works change place listing places deciding argumentthe compiler decideshow compile function based data type function argument arguments function return type enter deci sion compiler decides ofseveral overloaded functions kind blueprintwe function template function pro gram code memory pattern blueprint making func tions fits philosophy oop class concrete program code memory blueprint making similarobjects function templates multiple arguments atanother function template takes arguments template arguments basic type purpose function search array specific function returns array finds  arguments pointer array search size array main define arrays types values chapter   ch14       search treat type charas number template function array listing tempfind tempfind cpp template function finds number array include iostream namespace std function returns number item  template class atype int atype array atype int size int  size array return return  char chrarr       array char  int intarr       int  long lonarr l l l l l l long l double dubarr             double db   int main cout  chrarray chrarr  cout  intarray intarr  cout n11 lonarray lonarr  cout  dubarray dubarr db  cout endl return  template argument atype appears function arguments type pointer array type item matched function argument array size type int template argument output program  chrarray  intarray  lonarray  dubarray templates exceptions14templates andexceptions68715  ch14       compiler generates versions function type finds   character array  integer array template arguments matchwhen template function invoked instances template argument type array type int search type int int intarray     int arrayfloat f1   float int intarray f1  uh ohbecause compiler expects instances atypeto type generate functionfind int int int generate int float int arguments type syntax variation programmers templatekeyword function declarator template class atype int atype array atype int size function body compiler happy format forbidding clear multiline approach template argument template argument function template suppose idea function template large array applied array large type longwould arraysize type int hand type longif select type array size type data stored function array size template argu ment btype chapter   ch14       template class atype class btype btype atype array atype btype size btype  size note btypeif array return return static_cast btype  type intor type long user defined type size whichever compiler generate functions based type array searched type thearray size note multiple template arguments lead functions instantiated single template arguments basic types creation  functions lot memory functions large hand instantiate version function macros time programmers macros create versions function data types abs function defined define abs  class template tempabs performs simple text substitution work type macros problems macros perform type checking arguments macro type compiler check type returned compiler assigning incompatible variable case macros confined functions expressed single statement subtle problems macros sbest avoid works instantiate template function data type function tempfindto string type char array strings check operators func tion work data type pare variables equal operator operator strings strcmp library function work strings work stringclass class overloads operator templates exceptions14templates andexceptions68915  ch14       start normal functionwhen writea template function starting normal function works fixed type int design debug worry template syntax multiple types works properly turn function definition template check works additionaltypes class templates template conceptcan extended classes class templates generally data storage container classes major chapter standard template library stacks linked lists encountered previous chap ters examples data storage classes examples classes pre sented store data single basic type stackclass stakaray programin chapter  arrays strings store data type int condensed version class class stack private int max array ints int number stackpublic stack constructor void push int var takes int argument int pop returns int wanted store data type longin stack define completelynew class class longstack private long max array longs int number stackpublic longstack constructor void push long var takes long argument long pop returns long create stack class data type wanted store nice write single class specification work variables types single basic type guessed class templates create variation stakaray class template listingfor tempstak chapter   ch14       tempstak cpp implements stack class template include iostream namespace std const int max  size array template class type class stack private type max stack array type int number stackpublic stack constructor  void push type var number stack var type pop number stack return int main stack float s1 s1 object class stack float s1 push  f push  floats pop  floatss1 push  f s1 push  f cout  s1 pop endl cout  s1 pop endl cout  s1 pop endl stack long object class stack long push l push  longs pop  longss2 push l push l cout  pop endl cout  pop endl cout  pop endl return  templates exceptions14templates andexceptions69115  ch14       class stackis presented template class approach function templates templatekeywordand class stacksignal entire class bea template template class type class stack data member functions template argument type template argument named typein fixed data type int everyplace class specification reference type arrayst places definition argument type push function return type pop function class templates differ function templates instantiated create actual function function template arguments specific type classes instantiated defining object templateargument stack float s1 creates object s1 stack stores numbers type float compiler space memory object data type floatwherever template argument typeappears class specification space member functions memory object type stack float thesemember functions operate exclusively type float figure   class tem plate definitions specific objects objects memory creating stackobject stores objects type stack long creates space data set member functions operate type long note type s1consists class stackplus template argu ment stack float distinguishes classes created template stack int orstack long chapter   ch14       figure14 a classtemplate intempstak exercise s1ands2stacks pushing popping values displaying popped output    float stack2        long stack    in template approach classes price instantiate class objects numerical typeswith single code templates exceptions14templates andexceptions693obj1stores floatsobj2stores intsobj3stores intsobj4stores charsobj5stores charsaclass float obj1 aclass int obj3 aclass int obj2 aclass char obj5 aclass char obj4 class template listing multiple objects classes memorytemplate class class aclass statements place type   ch14       class depends contextin tempstak themember functions class template defined class member functions defined externally class specification syntax program works listing tempstak  temstak2 cpp implements stack class template member functions defined class include iostream namespace std const int max  template class type class stack private type max stack array type int number stackpublic stack constructor void push type var number stack type pop number stack template class type stack type stack constructor  template class type void stack type push type var number stack var template class type type stack type pop number stack return int main stack float s1 s1 object class stack float chapter   ch14       s1 push  f push  floats pop  floatss1 push  f s1 push  f cout  s1 pop endl cout  s1 pop endl cout  s1 pop endl stack long object class stack long push l push  longs pop  longss2 push l push l cout  pop endl cout  pop endl cout  pop endl return  expression template class type precede class definition externally defined member function push function template class type void stack type push type var var stack type identify class push member normal template member function stackalone suffice void stack push int var stack template function var functiontemplate template argument stack type template class expressed differently contexts class specification simply stack externally defined mem ber functions class template argument stack type define actual objects storing specific data type class specific type stack float class stack stack class specifier void stack type push type var push definition stack float s1 object type stack float templates exceptions14templates andexceptions69515  ch14       exercise considerable care correct correct context easy forget add type float stack compiler hates wrong demonstrated careful syntax member function returns class suppose define class intthat provided safety features integers discussed exercise  chapter  operator overloading external definition member function xfunc class returned typeint int type return type preceding scope reso lution operator int type int type xfunc int arg class type function argument hand needto include type designation linked list class templates atanother templates data storage class modi ficati linklistprogram chapter  pointers encouraged reexamine requires linklistclass template thelinkstructure stores data item template listing templist templist cpp implements linked list template include iostream namespace std template class type struct link type struct link element list struct definition link link type type data data item link pointer link template class type class linklist type class linklist list links class definition linklist linklist type private link type pointer linkpublic linklist argument constructor null linkchapter   ch14       note destructor nice simplicityvoid additem type add data item link void display display links template class type void linklist type additem type add data item link type newlink link type link newlink data data newlink points link newlink points template class type void linklist type display display links link type current set ptr link current null quit link cout endl current data print data current current link int main linklist double ld ld object class linklist double ld additem   add doubles list ldld additem   ld additem   ld display display entire list ldlinklist char lch lch object class linklist char lch additem add chars list lchlch additem lch additem lch display display entire list lch cout endl return  templates exceptions14templates andexceptions69715  ch14       inmain define linked lists hold numbers type double holdcharacters type char exercise lists placing items additem member function displaying items display member func tion output templist      aboth linklistclass linkstructure template argument typetostand type type discuss types stored linklistbut lso linkmust templates preceded template class type notice class turned template programming constructs variable data type turned templates linkstructure pay attention class program structure named parts program specification class structure linklistandlink external member functions class structure template argument linklist type define objects type linklist specific data type list tostore linklist double ld defines object ld class linklist double storing user defined data types programsso template classes store basic data types thetemplistprogram stored numbers type doubleand type charin linked list store objects user defined types classes template classes answer caveat employees linked listexamine employeeclass employ program chapter  inheritance worry derived classes store objects type employeeon linked list templistexample template functions template class operate objects class checking operations template class performs objects linklistclass overloaded insertion operator display theobjects stores chapter   ch14       void linklist type display cout endl current data insertion operator problem basic types insertion operator defined employeeclass employ program overload operator modify employeeclass include simplify employee data user overload extraction operator data thisoperator temporary object emptempbefore linkedlist listing temlist2 temlist2 cpp implements linked list template demonstrates list employee class include iostream namespace std const int len  maximum length names class employee employee class private char len employee unsigned long number employee numberpublic friend istream operator istream employee friend ostream operator ostream employee istream operator istream employee cout enter cin cout enter number cin number return ostream operator ostream employee cout cout number number return templates exceptions14templates andexceptions69915  ch14       template class type struct link type struct link element list type data data item link pointer link template class type class linklist type class linklist list links private link type pointer linkpublic linklist argument constructor null linkvoid additem type add data item link void display display links template class type void linklist type additem type add data item link type newlink link type link newlink data data newlink points link newlink points template class type void linklist type display display links link type current set ptr link current null quit link cout endl current data display data current current link int main lemp object linklist employee lemp class linklist employee employee emptemp temporary employee storage char ans user response chapter   ch14       cin emptemp employee data user lemp additem emptemp add linked list lemp cout nadd cin ans ans user lemp display display entire linked list cout endl return  inmain instantiate linked list called lemp loop user input data employee add employee object list user terminates loop displayall employee data sample interaction enter mendezenter number add yenter smith enter number add yenter chang enter number add nname chang number name smithnumber name mendeznumber notice linklistclass modified store objects type employee beauty template classes work basic types user defined types store thatyou store variables type data storage template class checking operators member functions class tostore string class string linklistclass temlist2 program member functionsin class insertion extraction operators operators work perfectly templates exceptions14templates andexceptions70115  ch14       strings reason class store strings verify operators exist storage class member function operate data type class store thattype uml templates templates called parameterized classes uml representedin class diagrams variation uml class symbol names template arguments dotted rectangle intrudes upper corner class rectangle figure   uml class diagram tempstak program chapter chapter stack bind long bind float push type pop type s2s1typefigure14 template uml class diagram template argument type operations push andpop return types argument types note return type followingthefunction separated colon template argument operation signatures typedoes push andpop diagram specific classes instantiated template class s1ands2 depiction templates figure   introduces uml concepts dependenciesandstereotypes   ch14       dependencies umla uml dependencyis relationship elements change indepen dent change dependent dependent depends independent dependency called usingrelationship tem plate class independent element classes instantiated dependent elements dependency dotted arrow pointing independent element figure   instantiated classes s1ands2are dependent template class stack becauseifstackwere change instantiated classes dependency broad concept applies situations uml fact asso ciation generalization relationships kinds dependen cies depicted specific uml diagrams common dependency arises class class argument operations stereotypes uml stereotype wayof additional uml element represented word guillemets double angle brackets dotted lines figure   represent dependencies kind dependency stereotype bind specifies independent element template class instantiates dependent element specific class parameters parentheses stereotype typewill replaced floatorlong uml defines stereotypes elements language applies specific uml element classes dependencies add exceptionsexceptions major topic chapter provide systematic object oriented approach handling errors generated classes exceptions errors occur runtime caused wide variety exceptional circumstance running memory open file initialize object impossible bounds vector exceptions mechanism handle errors process handled language programs signal error returning function occurred disk file functions return templates exceptions14templates andexceptions70315  ch14       nullor0to signal error time functions check return val somefunc error_return_value handle error error handler functionelse proceed normallyif anotherfunc null handle error error handler functionelse proceed normallyif thirdfunc  handle error error handler functionelse proceed normallyone problem approach single function examined program surrounding function elsestatement adding statements handle error error handler routine requires lot code listing convoluted hard read problem complex classes errors place function explicitly called suppose application defines objects class someclass obj1 obj2 obj3 application error occurred class constructor constructor called implicitly return checked things complicated application class libraries class library application created separate people class library vendor application programmer buys class library harder arrange error values communicated class member function program calling function problem communicating errors deep class libraries problem solved exceptions return topic ofthis time programmers remember approach catching errors setjmp andlongjmp combination functions approach object oriented environment properly handle destruction ofobjects exception syntaximagine application creates interacts objects class ordinarily theapplication calls class member functions problems chapter   ch14       application mistake causing error detected member function mem ber function informs application error occurred exceptions calledthrowing exception application install separate code handle error code called exception handlerorcatch block catches excep tions thrown member function code application objects class enclosed ina block errors generated block caught catch block code interact class block figure   arrangement templates exceptions14templates andexceptions705applicationnormal codeclassgood callnormal returngood callnormal returnbad callexceptionmember functionstry blockexception handler catch block interactwith classdatacode interactswith classdisplays errormessage errorfigure14 the exception mechanism exception mechanism keywords throw catch create kind entity called exception class xsyntax working pro gram skeleton program syntax xsyntax cpp working program class aclass class   ch14       public class anerror exception class void func member function error condition throw anerror throw exception int main application block aclass obj1 interact aclass objects obj1 func error catch aclass anerror exception handler catch block user error return  start witha class called aclass represents class errors occur exception class anerror public aclass aclass member func tions check errors throw exception keyword throwfol lowed constructor error class throw anerror throw constructor anerror classin main program enclose statements interact aclassin tryblock statements error detected aclassmember function exception thrown control catch blockthat block simple exception examplelet working program exceptions derived thestakaray program chapter  created stack data structure integer data values stored earlier detect common errors application program attempt push objects stack exceeding capacity array pop objects stack obtaining invalid data xstak program exception handle errors chapter   ch14       xstak cpp demonstrates exceptions include iostream namespace std const int max  stack holds  integers class stack private int max array integers int stackpublic class range exception class stack note class body stack constructor  void push int var max  stack throw range throw exceptionst var number stack int pop  stack throw range throw exceptionreturn number stack int main stack s1 s1 push  s1 push  s1 push  s1 push  oops stack fullcout  s1 pop endl cout  s1 pop endl cout  s1 pop endl cout  s1 pop endl oops stack templates exceptions14templates andexceptions70715  ch14       catch stack range exception handler cout exception stack endl cout arrive catch normal exit endl return  note stack small easier trigger exception pushing items examine features program deal exceptions class specification exception class statements throw excep tions main program block code exceptions block block code handlesthe exception catch block exception classthe program specifiesan exception class stackclass class range note class body body class objects class data member func tions simple class range connect throw statement catch block class body throwing exception stackclass exception occurs application pop stack push stack application mistake manipulating stackobject member functions stackclass check conditions ifstatements throw exception occur xstak exception thrown places statement throw range therange statement invokes implicit constructor rangeclass creates object class throwpart statement transfers program control theexceptionhandler examine moment chapter   ch14       thetryblockall statementsin main exception statements manipu latestackobjects enclosed braces preceded bythe trykeyw code operates objects exception simply application normal code write exceptions code program block code interacts stackclass blocks pro gram access stackobjects places exception handler catch block code handles exception enclosed braces preceded catchkeyw exception class parentheses exception class include class located stack range catch stack range code handles exception construction called exception handler follow block xstak exception handler simply prints error message user pro gram failed control falls exception handler continue processing point exception handler transfer control terminatethe program sequence eventslet summarize sequence events exception occurs  code executing block  control enters block  statement block error member function  member function throws exception  control transfers exception handler catch block block templates exceptions14templates andexceptions70915  ch14       notice clean code statements block exception worry checking return throw catch arrangement handles automatically ticular deliberately created statements exceptions s1 push  pushes itemscauses exception remove comment symbol preceding cout  s1 pop endl pops item stackcauses exception statement commented cases error message displayed stack emptymultiple exceptionsyou design class throw exceptions works modify xstak program throw separate exceptions attempting push data stack attempting pop data stack listing xstak  xstak2 cpp demonstrates exception handlers include iostream namespace std const int max  stack holds  integers class stack private int max stack array integers int stackpublic class exception class class exception class stack constructor  void push int var number stack max  stack throw throw exceptionst var chapter   ch14       int pop number stack  stack throw throw exceptionreturn int main stack s1 s1 push  s1 push  s1 push  s1 push  oops stack fullcout  s1 pop endl cout  s1 pop endl cout  s1 pop endl cout  s1 pop endl oops stack catch stack cout exception stack endl catch stack cout exception stack endl return  inxstak we exception classes class class statementthrow executed application calls push stack throw templates exceptions14templates andexceptions71115  ch14       executed pop called stack separate catch block exception code operates stack objects catch stack code handle exception catch stack code handle exception catch blocks block follow block case catch block simply prints message stack stack catch block activated exception group catch blocks catch ladder oper ates switchstatement code executed exception handled control passes statement catch blocks switch statement catch block break catch blocks functions exceptions distanceclasslet atanother exceptions applied infamous distanceclassfrom previous chapters distanceobject integer feet floating point inches inches   problem class previous examples protect user initialized object inches   greater lead trouble class perform arithmetic arithmetic routines operator assumed inches   impossible values displayed confounding user dimensions   rewrite distanceclass exception handle error xdist xdist cpp exceptions distance class include iostream namespace std class distance english distance class chapter   ch14       private int feet float inches public class inchesex exception class distance constructor args feet  inches   distance int float constructor args   inches big throw inchesex throw exceptionfeet inches void getdist length user cout nenter feet cin feet cout enter inches cin inches inches   inches big throw inchesex throw exception void showdist display distance cout feet inches int main distance dist1     arg constructor distance dist2 arg constructor dist2 getdist distance user display distancescout ndist1 dist1 showdist cout ndist2 dist2 showdist catch distance inchesex catch exceptions cout ninitialization error inches large cout endl return  templates exceptions14templates andexceptions71315  ch14       install exception class called inchesexin distanceclass user attempts initialize inches data greater equal   throw exception places argument constructor programmer error supplying initial values getdist function user enter incorrect enter inches prompt check negative values input mistakes inmain interaction distanceobjects enclosed block catch block displays error message sophisticated program handle user error opposed programmer error differently user friendly block user chance enter distance exceptions argumentswhat happensif application caused exception instance xdistexample programmer bad inches exception thrown member functions xdist nice functions culprit pass member function exception thrown appli cation catches answer question remember throwing exception involves transferring control handler butalso creating object exception class calling constructor xdist create object type inchesexwhen throw exception statementthrow inchesex add data members exception class initialize create object exception handler retrieve data object catches exception writing message baseball throwing fence neighbor modify xdistprogram listing xdist2 xdist2 cpp exceptions arguments include iostream include string namespace std class distance english distance class chapter   ch14       private int feet float inches public class inchesex exception class public string origin routine float ivalue faulty inches valueinchesex string float  arg constructor origin store string ivalue store inches exception class distance constructor args feet  inches   distance int float constructor args   throw inchesex  arg constructor feet inches void getdist length user cout nenter feet cin feet cout enter inches cin inches inches   throw inchesex getdist function inches void showdist display distance cout feet inches int main templates exceptions14templates andexceptions71515  ch14       distance dist1     arg constructordistance dist2 arg constructor dist2 getdist display distancescout ndist1 dist1 showdist cout ndist2 dist2 showdist catch distance inchesex exception handler cout ninitialization error origin inches ivalue large cout endl return  parts operation passing data throwing exception data members constructor exception class initializing constructor throw exception accessing object data catch exception turn data exception classit convenient tomake data exception class public accessed directly exception handler specification inchesexexception class xdist2 class inchesex exception class public string origin routine float ivalue faulty inches valueinchesex string float  arg constructor origin string object ivalue inches object public variables stringobject hold member func tion called type float faulty inches initializing exception objecthow initialize data throw exception argument constructor stackclass saychapter   ch14       throw inchesex  arg constructor getdist member function stackit throw inchesex getdist function inches exception thrown handler display string inches values string member function throwing exception incheswillreport faulty inches detected member function additional data easier programmer user figure whatcaused error extracting data exception object extractthis data catch exception simplest data public exception class catch block declareixas exception object catching refer data usual dot operator catch distance inchesex access origin ivalue directly display originandix ivalue interaction xdist2 user enters large inches enter feet  enter inches  initialization error getdist function inches   large programmer definition dist1inmain todistance dist1    exception error message initialization error  arg constructor inches   large exception arguments generally carry helps diagnosethe error triggered exception thebad_allocclassstandard containsseveral built exception classes commonly bad_alloc thrown error occurs attempting allocate memory templates exceptions14templates andexceptions71715  ch14       exception called xallocin earlier versions time book publi cation older approach microsoft visual set tryandcatchblocks bad_allocwith effort ashort badalloc badalloc cpp demonstrates bad_alloc exception include iostream namespace std int main const unsigned long size  memory size char ptr pointer memorytry ptr char size allocate size bytes catch bad_alloc exception handler cout nbad_alloc exception allocate memory return  delete ptr deallocate memory cout nmemory successful return  statements newin block catch block handles exception displaying anerror message terminating program exception noteswe simplest common approach exceptions conclude thoughts exception usage function nestingthe statementthat exception located directly block function called statement block function called function called statement block install block program upper level lower level functions encumbered pro vided called directly indirectly functionsin block times intermediate level functions add identifying data exception rethrow level chapter   ch14       exceptions class librariesan problemsolved exceptions errors class libraries library routine discover error typically library routine written person time program called library routine pass error program called ing error calling program handle error sees fit exception mechanism capability exceptions transmitted nested functions catch block encountered throw statement library routine catch block program dealwith error writing class library throw exceptions problems program writing program class library provide catch blocks exceptions itthrows situationexceptionsshould kind error impose overhead terms program size exception occurs time exceptions proba bly user input errors inserting letters numerical input eas ily detectable program program normal decisions loops check user input user destructors called automaticallythe exception mechanism surprisingly sophisticated exception thrown destructor called automatically object created code point block application statement caused exception recover error start block exception mechanism guarantees code block reset existence objects concerned handling exceptionsafter catch exception terminate application exception mechanism chance source error user perform clean chores terminating clean easier executing destructors objects created block release resources memory objects cases terminate program program figure caused error correct user asked input data case catch blocks typically embedded loop control templates exceptions14templates andexceptions71915  ch14       returned block exception mechanism attempted restore initial state exception handler matches exception thrown program unceremoni ously terminated operatingsystem summarytemplates generate family functions family classes handle differ ent data types writing identical functions perform operation data types function template writing class specifications differ type data acted class template save time result robust easily maintained program understand templates easier understand exceptions mechanism handling errors systematic oop oriented exception typically caused faulty statement block operates objects class class member function discovers error throws exception caught program class exception handler code block questionsanswers questions appendix  template convenient family variables unctions classes programs  template argument preceded keyword ________  true false templates automatically create versions function depending user input  write template function returns argument times   template class designed stored containers works data types generates objects identical generates classes numbers member functions chapter   ch14        true false template argument  creating actual function template called ________the function  actual code template function generated function declaration appears source code function definition appears source code function appears source code function executed runtime  key concept template concept replacing ________with standsfor________  templates classes ________________  exception typically caused programmer writes application code creator class writes class member functions runtime error operating malfunction terminates program  keywords exceptions ________ ________ ________  write statement throws exception class boundserror anempty body  true false statements exception catch block  exceptions thrown catch block block throw statement block point error catch block throw statement catch block  write specification exception class stores error number error include constructor  true false statement throws exception located block  errors exception typically thrown excessive data threatens overflow array user presses ctrl key combination terminate program power failure shuts newcannot requested memory templates exceptions14templates andexceptions72115  ch14        additional exception thrown throwkeyw function caused error catch block object exception class  true false program continue operate exception occurred  talking dependencies template class __________ element instantiated class ___________ element  template class uml ordinary class dashed rectangle dashed outline  true false dependency kind association  stereotype ____________ uml element exercises answers starred exercises appendix  write template function returns average elements array arguments function array size array type int inmain exerc ise function arrays type int long double char  queue data storage device stack bank teller window       order stack array topin stakaray program chapter  queue hand track indexes array tail items head items removed tail head array items removed tail head reaches array reset write class template queue class assume programmer queue mistakes exceeding capacity queue remove item queue define queues data types insert remove data chapter   ch14        add exceptions queue template exercise  throw exceptions capacity queue exceeded program remove item queue handle add data member queue count number items queue increment count insert item decrement remove item throw exception count exceeds capacity queue  making main exercise interactive user val ues queue easier exercise queue exception program user recover mistake cor rupting contents queue  create function called swaps interchanges values arguments pass arguments reference function template numerical data types char int float write main program exercise function types  create function called amax returns largest element array arguments function address array size function template work array numerical type write main program applies function arrays types  start safearayclass arrover program chapter  class template safe array store kind data main eate safe arraysof types store data  start fracclass function fraction calculator exercise  chapter  fracclass template instantiated data types numerator denominator integer types pretty restricts char short int long develop integer type main inst antiate class frac char function cal culator class frac char memory frac int tohandle large fractions  add exception class arrover program chapter  boundsindex trigger exception catch block print error message user  modify exception class exercise  adapted arrover  error mes sage catch block reports caused exception  philosophies exceptions refer englerrpro gram chapter  streams files user input errors exceptions exercise assume add exception class distanceclass pro gram xdistandxdist2examples chapter throw exception places englerrdisplayed error message argument excep tion constructor report error occurred specific error templates exceptions14templates andexceptions72315  ch14       inches number inches range throw exception error isint function entered digits nondigit character integer range question throws exceptions isint remain anindependent function insert block catch block doloop anexception loop ready user input throw exception argument constructor case programmer initializes distancevalue inches member range  start strplusprogram chapter  add exception class throw exception argument constructor initialization string long throw overloaded operator result long strings concatenated report errors occurred  easiest exceptions create class excep tion class member class exceptions handle file errors class dofilethat includes exception class member functions read write files constructor class filename argument open file member function reset file pointer file rewerrprogram chapter  model write main program functionality calling members dofileclass chapter   ch14       chapter15the standard template library chapter introduction stl726 algo rithms735 sequence containers743 iterators751 specialized iterators763 associative containers771 storing user defined objects778 function objects786   ch15       chapter most computer programs exist process data data represent wide variety real personnel records inventories text documents scientific experiments represents data stored memory manipulated ways university computer science programs typically include called data structures algorithms term data structures refers ways data stored mem ory algorithmsrefers manipulated classes provide excellent mechanism creating library data structures compiler vendors party developers offered libraries container classestohandle storage processing data standard includes built container class library called standard template library stl developed alexander stepanov meng leeof hewlettpackard stl standard class library standard approach storing processing data chapter describes stl stl large complex require large book books stl appendix bibliography introduce stl examples common algorithms containers introduction stl stl kinds entities containers algo rithms iterators acontainerisa stored data organized memory earlier chapters explored kinds containers stacks linked lists container array common built computer languages kinds containers stl includes stl containers implemented template classes easily customized hold kinds data algorithmsin stl procedures applied containers process data var ious ways algorithms sort copy search merge data algorithms represented template functions functions member functions tainer classes standalone functions striking characteristics stl algorithms general stl containers ordinary arrays containers create containers includemember functions specific tasks iterators generalization concept pointers point elements container increment iterator pointer points turn element container iterators key stl connect algorithms containers   ch15       software version cables cables connect stereo components computer peripherals figure   main components stl discuss tainers algorithms iterators subsequent sections explore concepts program examples standard template library thestandard template library algorithmalgorithmalgorithmiteratoriteratorobjectscontaineralgorithms iterators objects containersobjectscontaineriteratoriteratorfigure15 containers algorithms anditerators containersa containeris store data data consists built types intandfloat class objects stl basic kinds containers derived basic kinds addition create ers based basic kinds kinds containers arrays data storage situations answer efficiency array awk ward slow situations containers stl fall main categories sequenceandassociative sequence containers vector list deque associative containers set multiset map andmultimap addition specialized containers derived sequence containers stack queue priority queue lllook categories turn   ch15       sequence containersa sequence container stores set elements visualize houses street element elements position element ends preceded specific element ordinary arrayis sequence container problem array size compile time source code write program data stored array array large hold guess maximum data program runs waste space memory filling array elicit error message blow program running space stl vectorcontainerto avoid difficulties problem arrays storing employee records arranged alphabetical order employee insert employee starts employees room time consuming stl listcontainer based idea linked list solve problem recall linklistexample chapter10 pointers easy insert item linked list rearranging pointers sequence container isthe deque thought combination stackand queue stack recall previous examples works principle input output place stack queue hand arrangement data customers bank deque combines approaches insert delete data word deque derived double ended queue versatile mechanism basis stacks queues table   summarizes characteristics stl sequence containers includes ordi nary array comparison table15 basic sequence containerscontainercharacteristicadvantages disadvantages ordinary arrayfixed sizequickrandom access number slow insert erase middle size changed runtimevectorrelocating quickrandom access expandable arraynumber slow insert erase middle quick toinsert erase chapter   ch15       listdoubly linked listquick insert delete location quick access endsslow random access dequelike vector canquick random access accessed eitherindex number endslow insert erase middle quick insert erase push pop ateither instantiating stl container object easy include header file template format kind objects stored parameter examples bevector int avect create vector intsorlist airtime departure_list create list airtimesnotice size stl containers containers care memory allocation associative containersan associative container sequential keys access data keys typi callynumbers stings automatically container arrange stored elements specific order ordinary english dictionary access data arranged alphabetical order start key word aardvark dictionary container converts key element location memory key access swiftly kinds associative containers stl setsandmaps store data structure called tree whichoffers fast searching insertion deletion sets maps versatile general data structures suitable wide variety applications inefficient sort performother operations require random access sets aresimpler commonly maps set stores number items containkeys keys attributes order items set store objects personclass ordered alphabetically nameattributes keys situation locate desired personobject searching thethe standard template library thestandard template library table15 continuedcharacteristicadvantages disadvantages   ch15       object set stores values basic type int key entire item stored somewriters refer entire object stored set key key objectto emphasize attribute order key tnecessarily entire item map storespairs objects key object object map tainer array accessing elements numbers access indices arbitrary type key object serves object themapandsetcontainers key stored sense list employees arranged unique employee numbers hand multimapandmultisetcontainers multiple keys english dictionary entries word set table   summarizes associative containers stl table15 basic associativecontainers containercharacteristics setstores key objects key allowed multisetstores key objects multiple key values allowed mapassociates key object object key allowed multimapassociateskey object object multiple key values allowed creating associative containers creating sequential set int intset create set intsormultiset employee machinists create multiset employeesmember functionsalgorithms heavy hitters stl carrying complex operations sorting searching containers member functions perform simpler tasks specific type container chapter   ch15       table   frequently member functions purpose actual implementation common container classes table15 some memberfunctions common containers namepurpose size returns number items containerempty returnstrue container max_size returnssize largest container returns aniterator start container iterating forwards containerend returnsan iterator location container forward iteration rbegin returns areverse iterator container iterating ward containerrend returns reverse iterator container backward iteration member functions containers categories tainers learn appendix stl algorithms member functions includes table showing stl member functions exist whichcontainers container adaptersit possibleto create special purpose containers normal containers mentioned previ ously construct called container adapters special purpose containers sim pler interfaces general containers specialized containers implemented container adapters stl stacks queues priority queues stack restricts access pushing popping data item stack queue push items pop priority queue push data random order pop data pop largest itemstored priority queue automatically sorts data stacks queues priority queues created sequence containers deque table   abstract data types sequence containers thatcan implementation standard template library thestandard template library   ch15       table15 adapter based containers containerimplementationcharacteristics stackcan beimplementedinsert push remove pop vector list orat dequequeuecan implementedinsert push list dequeremove pop priority queuecan beimplementedinsert push random order vector dequeat remove pop sorted order endyou template template instantiate classes stack object holds type int instantiated deque class stack deque int astak note format insert space closing angle brackets write stack deque int astak syntax errorbecause compilerwill interpret operator algorithmsan algorithm function items container containers algorithms stl member functions friends container classes earlier container libraries standalone template functions built arrays container classes create provided class includes basic functions table   representative algorithms examine appendix table listing stl algorithms table15 some typical stl algorithms algorithmpurpose findreturnsfirst element equivalent countcountsthe number elements equalcomparesthe contents containers returns true corre sponding elements equalchapter   ch15       searchlooks sequence values container corresponds sequence containercopycopies asequence values container location container swapexchanges avalue location iter_swapexchanges asequence values location sequence values locationfillcopies avalue sequence locations sortsorts values container ordering mergecombines sorted ranges elements larger sorted range accumulatereturnsthe sum elements range for_eachexecutes function element container suppose create array type int data int arr          stl sort algorithm sort array sayingsort arr arr  wherearris address array arr is address item array iteratorsiterators pointer entities access individual data items usu ally called elements container sequentially element element process called iterating container increment iterators operator point element dereference operator toobtain element point stl iterator represented object iteratorclass classes iterators types container major classes iterators forward bidirectional random access forwarditerator canonly forward container item time operator accomplishes backward set arbitrary location middleof tainer bidirectionaliterator backward forward operators defined random access iterator inaddition moving backward forward jump arbitrary location access location  standard template library thestandard template library table15 continuedalgorithmpurpose   ch15       specialized kinds iterators input iterator point input device cinor file read sequential data items container output iterator point output device coutor file write elements container device values forward directional random access iterators stored values input output iterators sense iterators point memory locations input output iterators point devices stored pointer values meaning table   characteris ticsof kinds iterators table15 iterator characteristicsiterator iterator typeread writebe saveddirectionaccess random accessreadand writeyesforward backrandom bidirectionalread writeyesforward backlinear forwardread writeyesforward onlylinear outputwriteonlynoforward onlylinear inputread onlynoforwardonlylinear potential problems stl sophisticationof stl template classes places strain compilers respond potential problems hard errors compiler reports deep header file class user code brute force methods commenting code time culprit precompilation header files speeds compilation dramatically compilers offer problems stl things working turning precompiled headers stl generate spurious compiler warnings conversion lose digits favorite harmless turned minor complaints stl surprisingly robust versatile errors tend caught compile time runtime algorithms ers consistent interface works container algorithm work assuming appropriately chapter   ch15       quick overview leaves questions answers balance chapter provide enoughspecific details stl operation things clearer algorithmsthe stl algorithmsperform operations collections data algorithms designed work stl containers nice things apply ordinary arrays save considerable work programming arrays offers easy learn algorithms unencumbered containers examine representative algorithms remember algorithms listed appendix thefind algorithmthefind algorithm element container findexample program array ints cpp finds object include iostream include algorithm namespace std int arr         int main int ptr ptr arr arr    cout object  offset ptr arr endl return  output program isfirst object  offset  usual element array number   offset  not3 header filesin programwe included header file algorithm notice header files standard library file extension file declarations stl algorithms header files containers purposes older version stl include header file algo standard template library thestandard template library   ch15       rangesthe firsttwo parameters range elements examined values iterators normal pointer values spe cial case iterators parameter iterator case pointer exam ined parameter iterator location element exam ined  elements  called endvalue points element range examined syntax reminiscent normal idiom forloop int     arr  cout object  offset endl break findexample algorithm saves trouble writing forloop inmore complicated situations algorithms save writing complicated code thecount algorithmlet atanother algorithm count counts elements container returns number countexample count cpp counts number objects include iostream include algorithm count namespace std int arr         int main int count arr arr   count number  cout  arr endl return  output isthere   arr chapter   ch15       thesort algorithmyou guess whatthe sort algorithm called sort algo rithm applied array sort cpp sorts array integers include iostream include algorithm namespace std array numbersint arr         int main sort arr arr  sort numbersfor int   display sorted arraycout arr cout endl return  output program        we variations algorithm thesearch algorithmsome algorithms operate containers instance algorithmlooks single container search algorithm sequenceof values container container searchexample search cpp searches container sequence container include iostream include algorithm namespace std int source          int pattern    int main int ptr ptr search source source  pattern pattern  standard template library thestandard template library   ch15       ptr source  endcout match elsecout match ptr source endl return  algorithm sequence    array pattern thearraysource inspection sequence sourcestarting thefourth element element  output match if iterator ptrends source match arguments algorithms search type container source stl vector pattern array kind generality avery powerful feature stl themerge algorithmhere algorithm works containers merging elements source containers destination container mergeexample works merge cpp merges containers include iostream include algorithm merge namespace std int src1      int src2    int dest  int main merge src1 src2 destmerge src1 src1  src2 src2  dest int   display destcout dest cout endl return  output displays contents destination container        as merging preserves ordering interweaving sequences source elements destination container chapter   ch15       function objectssome algorithmscan called function objectas argument function object user template function object template class single member function overloaded operator sounds mysterious easy suppose sort array numbers descending ascending order sortemp program sortemp cpp sorts array doubles backward order greater function object include iostream include algorithm sort include functional greater namespace std array doublesdouble fdata             int main sort doublessort fdata fdata  greater double int   display sorted doublescout fdata cout endl return  thesort algorithm sorts ascending order greater func tion object argument sort reve rses sorting order output           besides comparisons function objects arithmetical logical operations function objects closely chapter user written functions place function objects function objects operate basic types classes operators defined working values case substitute user written function function object operator defined ordinary char strings write function perform comparison function address place function object sortcom sort array char strings standard template library thestandard template library   ch15       sortcom cpp sorts array strings user written comparison function include iostream include string strcmp include algorithm namespace std array stringschar names george penny estelle mike bob bool alpha_comp char char declarationint main sort names names  alpha_comp sort stringsfor int   display sorted stringscout names endl return  bool alpha_comp char s1 char returns true s1 return strcmp s1  true false argument sort algorithm address alpha_comp function compares char strings returns trueorfalse depending lexicographically alphabetically library function strcmp returns  argument program expect bob estelle george mike pennyactually write function objects handle text stringclass standard library usebuilt function objects andgreater adding_ifto algorithmssome algorithmshave versions _if algorithms extra parameter called predicate function object function algorithmchapter   ch15       finds elements equal create function works find_if algorithm elements arbitrary characteristic stringobjects find_if algorithm supplied user written isdon function stringin array stringobjects listing find_if find_if cpp searches array strings matches include iostream include string include algorithm namespace std bool isdon string returns true return string names george estelle mike bob int main string ptr ptr find_if names names  isdon ptr names  cout list elsecout element ptr names list return  names array output theprogram element  list address function isdon argument find_if arguments usual addresses array thefind_if algorithm applies isdon function element range isdon returns true element find_if returns element pointer iterator returns pointer address array algorithms count replace remove _ifversions standard template library thestandard template library   ch15       thefor_each algorithmthefor_each algorithmallows item container write function determine function change ele ments container display values for_each convert values array inches centimeters display write function called in_to_cm multipliesa   function address argument for_each listing for_each for_each cpp for_each output inches array elements centimeters include iostream include algorithm namespace std void in_to_cm double declaration int main array inches valuesdouble inches           output centimetersfor_each inches inches  in_to_cm cout endl return  void in_to_cm double convert display centimeters cout   output          thetransform algorithmthetransform algorithmdoes item container places result ing values container user written function determines item return type function destination container for_each displaying theconverted values in_to_cm function puts centimeter values array centi main program displays contents centi listing transfo transfo cpp transform change array inches values cmchapter   ch15       include iostream include algorithm namespace std int main array inches valuesdouble inches           double centi  double in_to_cm double prototype transform array centi transform inches inches  centi in_to_cm int   display array centi cout centi cout endl return  double in_to_cm double convert inches centimeters return   return result output for_each program looked algorithms stl idea kinds algorithms usethem sequence containersas earlier thereare major categories containers stl sequence ers associative containers discuss sequence containers vec tors lists deques focusing containers work member functions learned iterators operations perform containers examine iterators program sections introduce member functions container remember kinds containers mem ber functions names characteristics learn push_back vectors relevant listsand queues vectorsyou vectors smart arrays manage storage allocation expanding contracting size vector insert erase data vectors arrays accessing elements operator random access fast vectors standard template library thestandard template library   ch15       fast add push data item vector vector size automatically increased holdthe item member functions push_back size operator vector common vector operations vector cpp demonstrates push_back operator size include iostream include vector namespace std int main vector int create vector intsv push_back  values arrayv push_back  push_back  push_back    replace valuesv   int  size display vector contentscout    cout endl return  vector default argument constructor create vector stl containers template format type variable container hold case type int container size starts  thepush_back member function inserts argument vector element highest number vector element  list queue inserting elements push values             vector data data accessed read written overloaded operator array operator change element   element   output vector    thesize member function returns number elements container invector  forloop print values elementsin container chapter   ch15       member function max_size whichwe demonstrate returns maxi mum size container expanded number depends type data stored container bigger elements fewer store type container operating max_size returns1    fora vectortype int member functions swap pop_back vectcon additional vector constructors andmember functions vectcon cpp demonstrates constructors swap pop_back include iostream include vector namespace std int main array doublesdouble arr         vector double v1 arr arr  initialize vector arrayvector double v2  vector size v1 swap v2 swap contents v1 v2while v2 vector cout v2 display element v2 pop_back remove element output        cout endl return  vector constructors program initializes vector v1withthe values normal array passed argument arguments construc tor pointers start array element structor sets v2to initial size  supply initial values vectors hold typedouble theswap member function exchanges data vector data keeping elements order program garbage data v2 swapped data v1 display v2to data v1 output        theback memberfunction returns element vector display cout pop_back memberfunction removes element vector standard template library thestandard template library   ch15       time loop element surprising pop_back simultaneously return element remove vector pop previous examples stacks mustbe member functions swap exist algorithms case member function version provided efficient tainer algorithm version algorithm swap elements kinds containers member functions insert anderase theinsert anderase memberfunctions insert remove element arbitrary location container functions efficient vectors elements insertion erasure moved space element close space erased item insertion erasure ful speed factor vectins member functions vectins cpp demonstrates insert erase include iostream include vector namespace std int main int arr     array intsvector int arr arr  initialize vector arraycout nbefore insertion int  size display elementscout insert   insert  element cout nafter insertion  size display elementscout erase  erase element cout nafter erasure  size display elementscout chapter   ch15       cout endl return  theinsert memberfunction version takes arguments place element inserted container element add  member function element  element vector elements insertion point container moved upward room size container increased  theerase member function removes element location elements deletion point moved downward size container decreased  output vectins insertion    after insertion      erasure    listsan stl list containeris doubly linked list element pointer element preceding container stores address elements fast access ends list member functions push_front pop_frontour firstexample list data pushed read popped list cpp demonstrates push_front pop_front include iostream include list namespace std int main list int ilist ilist push_back  push items backilist push_back  ilist push_front  push items ilist push_front  int size ilist size number items int  size cout ilist read item frontthe standard template library thestandard template library   ch15       ilist pop_front pop item cout endl return  push data list display remove data normalorder    thepush_front pop_front member functions push_back pop_back work vectors note random access list elements access slow reason operator defined lists operator tra verse list counting elements reached correct time consuming operation random access vector deque lists frequent insertions deletions middle list efficient vectors deques elements insertion deletion point moved quick lists pointers changed insert delete item time consuming correct insertion point theinsert anderase member functions list insertion deletion require iterators postpone discussion functions member functions reverse merge unique member functions exist lists member functions defined containers algorithms things listplus functions filling list intobjects contents oftwo arrays listplus cpp demonstrates reverse merge unique include iostream include list namespace std int main int list int list1 list2 int arr1     int arr2      chapter   ch15         list1 push_back arr1 list1    for   list2 push_back arr2 list2     list1 reverse reverse list1    list1 merge list2 merge list2 list1 list1 unique remove duplicate  int size list1 size list1 cout list1 read item list1 pop_front pop item cout endl return  list backward order return normal sorted order reverse memberfunction quick reverse list container ends accessible memberfunction merge operates lists requires sorted order reversal lists        now merge function merges list2intolist1 keeping sorted expanding list1to hold items content list1is10        finally apply unique memberfunction list1 function finds adjacent ele ments removes contents list1are dis played output listplusis10      to display contents list andpop_front member functions aforloop element displayed popped list result process displaying list destroys moment learned access successive list elements iterators solve problem standard template library thestandard template library   ch15       dequesa deque vector ways linked list vector supports random access operator list deque accessed sort double ended vector supporting push_front pop_front andfront memory allocated differently vectors queues vector occupies contiguous region memory vector grows large moved location fit deque hand stored contiguous areas segmented member function capacity returns largest number elements vector store moved capacity defined deques moved deque cpp demonstrates push_back push_front include iostream include deque namespace std int main deque int deq deq push_back  push items backdeq push_back  deq push_back  deq push_front  push items deq push_front  deq   change middle item int  deq size cout deq display itemscout endl return  examples push_back push_front operator work deques containers output program     figure   member functions sequential containers chapter   ch15       figure15 sequence containers iteratorsiterators bit mysterious central operation stl discuss twin roles played iterators smart pointers connec tion algorithms containers someexamples standard template library thestandard template library vectorpush_back intvect     listpush_back push_front pop_front pop_back pop_back insert     intdeque  pop_back dequepush_back push_front pop_back466516  ch15       iterators smart pointersit oftennecessary perform operation elements container range elements displaying element container adding total examples ordinary array operations carried pointer operator underlying mechanism code iterates float array displaying element float ptr start_address int  size cout ptr dereference pointer ptrwith operator item points increment operator soit points item ordinary pointers underpowered moresophisticated containers plain pointers disadvantages thing items stored container contiguously memory handling pointer complicated simply increment point moving item linked list assume item adjacent previous follow chain pointers store address container element pointer variable access element future time stored pointer insert erase middle container continue valid container contents rearranged nice worry revis ing stored pointer values insertions deletions takeplace solution kinds problems create class smart pointers object class basically wraps member functions ordinary pointer operators overloaded operate elements container elements contiguous memory change locations skeleton form class smartpointer private float ordinary pointerpublic float operator float operator chapter   ch15       void main smartpointer sptr start_address int  size cout sptr responsibility smart pointer class embedded container separate class approach chosen stl smart pointers called iterators completelyseparate class family templetized classes class user creates iterators defining objects classes iterators interfacebesides acting smart pointers items containers iterators serve pur pose stl determine algorithms containers theoretical sense apply algorithm container fact algorithms work stl containers turns algorithms inefficient slow containers sort algorithm random access container sort iterate container element moving time consuming approach efficient reverse algorithm iterate ward forwardthrough container iterators provide surprisingly elegant match algorithms containers iterator cable cable connect computer printer cable plugs container plugs algorithm cables plug containers cables plug algorithms algorithm powerful container type cable iterator connect receive compiler error alert ing problem kinds iterators cables scheme work turns types figure   categories arranged order increasing sophistication input output areequally unsophisticated standard template library thestandard template library   ch15       figure15 iterator categories algorithm step forward container reading writing item inputiterator connect container input iterators typically containers reading files cin algorithm steps container forward direction writes container reading outputiterator output iterators typically writing files cout algorithm steps forward read write container usea forward iterator algorithm step forward container bidirectional iterator chapter random accessbidirectionalforwardinputoutput   ch15       finally algorithm access item container instantly stepping usea random accessiterator random access iterators arrays access element iterators manipulated arithmetic operations iter2 iter1  table   showswhich operations iterator supports table15 capabilities iterator categories stepsteprandom forwardreadwritebackaccess iterator type random access iteratorxxxxx bidirectional iteratorxxxx forwar iteratorxxx output iteratorxx input iteratorxx iterators support operator stepping forward tainer input iterator operator equal sign left iter output iterator canuse operator iter forward iteratorhandles reading writing bidirectional iterator canbe decremented incremented random access iterator operator aswell simple arithmetic operators access element algorithm iterator capability ward iterator plug bidirectional iterator random access iterator matching algorithms containerswe cableas analogy iterator iterator connects algorithm container focus ends imaginary cable container algorithm standard template library thestandard template library   ch15       plugging cable containerif confine basic stl containers kinds itera tors table   vector deque accept kind iterator list set multiset map multimap accept random iterator table15 iterator types accepted containers vectorlistdequesetmultisetmapmultimap random accessxx bidirectionalxxxxxxx forwardxxxxxxx inputxxxxxxx outputxxxxxxx stl enforce correct iterator container define iterator kind container vedefined list holding elements type intlist int ilist list intsthen define iterator list list int iterator iter iterator list intswhen stl automatically iterator bidirectional iterator list requires iterator vector deque automatically created random access iterator automatic selection process implemented causing iterator class specific tainer derived inherited general iterator class spe cific container iterators vectors deques derived random_access_iteratorclass iterators lists derived bidirectional_iteratorclass containers matched fanciful iterator cables cable plug container figuratively speaking hardwired cord toaster vectors deques wired random access cables lists associative containers encounter chapter wired bidirectional cables chapter   ch15       plugging cable algorithmnow veseen iterator cable wired container ready cable iterators plug algorithms algorithm depending elements container requires kind iterator algorithm access elements arbitrary locations container requires random access iterator step forward iterator powerful forward iterator table   sampling algorithms iterators require complete version table appendix table15 type iterator required representative algorithmsbidirec random algorithminputoutputforwardtionalaccess for_eachxfindxcountxcopyxxreplacexuniquexreversexsortxnth_elementxmergexxaccumulatexagain algorithm requires iterator level capability powerful iterator work replace algorithm requires forward iterator work witha bidirectional random access iterator imagine algorithms connectors pins sticking cable connectors computer figure   requiring random access iterators  pins requiring bidirectional iterators  pins requiring forward iterators  pins standard template library thestandard template library   ch15       figure15 iterators connecting containers algorithms algorithm iterator cable connector number holes plug  hole iterator  pin algorithm plug algorithm  fewer pins plug  hole bidirectional iterator  pin random access algorithm vectors deques random access iterators plugged algorithm lists associative containers  hole bidirec tional iterator plugged intoless powerful algorithms tables story tables   and15  figure algorithm work container table   sort algorithm requires random access iterator table   containers handle random access iterators vectors deques apply sort algorithm lists sets maps algorithm notrequire random access iterator work kind stl container containers bidirectional iterators grade random access singly linked list stl forward iterator reverse algorithm comparatively algorithms require random accessiterators algorithms work containers chapter reverse vectorcontainersalgorithms okrandom access iteratorsort listnogoodbidirectional iterator16  ch15       overlapping member functions algorithmssometimes choose member function algorithm samename algorithm requires input iterator container sets maps member function sequential containers version generally member function version exists container algorithm version efficient cases member function version iterators work iterators considerably simpler talking examples common iterator values returned container andend member functions disguised fact functions return iter ator values treating pointers actual iterators functions data accessin containers provide random access iterators vector queue easy iterate container operator containers lists support dom access require approach previous examples destructive read display contents list popping items listandlistplusexamples practical approach define iterator container listout program mightlook listout cpp iterator loop output include iostream include list include algorithm namespace std int main int arr     list int thelist int   list array elementsthelist push_back arr list int iterator iter iterator list ints iter thelist iter thelist iter cout iter display listthe standard template library thestandard template library   ch15       cout endl return  program simply displays contents thelistcontainer output    we define iterator type list int match container type pointer vari iterator forloop initialize toilist start container increment operator itsteps elements container dereference operator toobtain element points compare equality operator exit loop reaches container ilist equivalent approach whileloop forloop iter ilist iter ilist cout iter iter syntax pointer data insertionwe code place data existing elements container listfill listfill cpp iterator list data include iostream include list namespace std int main list int ilist  list holds  ints list int iterator iterator int data  list datafor ilist ilist data  display listfor ilist ilist cout cout endl return  chapter   ch15       loop fills container intvalues      showing overloaded operator works left equal sign loop dis plays values algorithms iteratorsalgorithms discussed iterators arguments return values theiterfindexample algorithm applied list algorithm lists requires input iterator iterfind cpp returns list iterator include iostream include algorithm include list namespace std int main list int thelist  list holds  ints list int iterator iter iterator int data  list datafor iter thelist iter thelist iter iter data       number iter thelist thelist  iter thelist cout nfound  elsecout ndid  return  analgorithm takes arguments iterator values range searched container      values algorithm forthe number  returnsilist reached container finding match located item  output isfound  iterator container  located offset matching item container calculated iter ilist legal operation iterators lists list iterator bidirectional iterator perform arithmetic standard template library thestandard template library   ch15       arithmetic random access iterators vectors queues searching vector vrather list ilist rewrite iterfindlike iter  iter cout nfound  location iter elsecout ndid  output  location here algorithm iterators arguments copy algorithm vector user specifies range locations copied vector program copies iterators range itercopy cpp iterators copy algorithm include iostream include vector include algorithm namespace std int main int beginrange endrange int arr           vector int v1 arr arr  initialized vector vector int v2  uninitialized vectorcout enter range copied   cin beginrange endrange vector int iterator iter1 v1 beginrange vector int iterator iter2 v1 endrange vector int iterator iter3 copy range v1 v2iter3 copy iter1 iter2 v2 it3 item copied iter1 v2 iterate range iter1 iter3 v2 displaying valuescout iter1 cout endl return  chapter   ch15       interaction program enter range copied      we display entire contents v2 range items copied fortunately copy returns iterator points item item copied destination container v2in case program whileloop dis play items copied specialized iteratorsin examine specialized forms iterators iterator adapters change behavior iterators interesting ways stream iterators input output streams behave iterators iterator adaptersthe stl variations normal iterator reverse iterator insert iterator raw storage iterator reverse iterator iterate backward container insert iterator behavior algorithms copy andmerge insert data container overwriting existing data raw storage iterator allowsoutput iterators store data uninitialized memory specialized situations ignoreit reverse iteratorssuppose iterate backward container list int iterator iter normal iteratoriter ilist start iter ilist beginningcout iter decrement iteratorbut work thing range wrong    iterate backward reverse iterator iterevprogram reverse iterator display contents list reverse order iterev cpp demonstrates reverse iterator include iostream include list namespace std standard template library thestandard template library   ch15       int main int arr      array ints list int thelist int   transfer arraythelist push_back arr listlist int reverse_iterator revit reverse iterator revit thelist rbegin iterate backwardwhile revit thelist rend list cout revit displaying outputcout endl return  output ofthis program     you member functions rbegin andrend reverse iterator normal forward iterator confusingly starting container member function called rbegin increment iterator decrement reverse iterator revit reverse_iterator alw ays rbegin torend increment operator insert iteratorssome algorithms suchas copy overwrite existing contents destination container copydeqprogram copies deque copydeq cpp demonstrates normal copy queues include iostream include deque include algorithm namespace std int main int arr1      int arr2      deque int d1 deque int chapter   ch15       int   transfer arrays deques d1 push_back arr1 push_back arr2 copy d1 d2copy d1 d1 int  size display d2cout cout endl return  output program is1    the contents d2have written contents d1 display d2there trace numbered contents behavior copy inserted elements container overwriting behavior insert iterator flavors iterator back_inserterinserts items front_inserterinserts items inserterinserts items location thedinsiterprogramshows inserter dinsiter cpp demonstrates insert iterators queues include iostream include deque include algorithm namespace std int main int arr1      initialize d1 int arr2    initialize deque int d1 deque int int   transfer arrays dequesd1 push_back arr1 int   push_back arr2 standard template library thestandard template library   ch15       copy d1 d2copy d1 d1 back_inserter cout nd2 display d2for int  size cout cout endl return  inserter container push_back member function insert items source container d1at target container existing items containerd1is unchanged output program displays contents        if inserter copy d1 d1 front_inserter items inserted container underlying mecha nism inserter container push_front member function pushes items container effectively reversing order output        you insert items starting arbitrary element inserterversionof insert iterator insert items wew ould saycopy d1 d1 inserter argument inserteris container copied iterator pointing location copying inserteruses container insert member function order elements reversed output statement        by changing argument inserterwe data inserted note front_insertercan vector vectors push_front member function accessed chapter   ch15       stream iterators stream iterators treat files devices cinandcout iterators easy files devices arguments algorithms demonstration versatility iterators link algorithms containers major purpose input output iterator categories support stream iterator classes input output iterators algorithms directly input output streams stream iterators objects classes templetized types input output stream iterators ostream_iteratorandistream_iterator turn theostream_iteratorclassanostream_iteratorobject argument algorithm specifies output iterator outiterexample argument copy outiter cpp demonstrates ostream_iterator include iostream include algorithm include list namespace std int main int arr      list int thelist int   transfer array listthelist push_back arr ostream_iterator int ositer cout ostream iterator cout ncontents list copy thelist thelist ositer display list cout endl return  define ostreamiterator reading type intvalues arguments construc tor stream intvalues written string dis played stream typically filename cout cout writing cout delimiting string consist characters comma space standard template library thestandard template library   ch15       thecopy algorithm copies contents list cout ostream iterator argument copy destination output outiteriscontents list      foutiter ostream iterator write file foutiter cpp demonstrates ostream_iterator files include fstream include algorithm include list namespace std int main int arr      list int thelist int   transfer arraythelist push_back arr listofstream outfile iter dat create file object ostream_iterator int ositer outfile iterator write list filecopy thelist thelist ositer return  define ofstreamfile object associate file called iter dat thisobject argument ostream_iterator writing file whitespace character string argument characters easier read data file space character displayable output foutiter text editor notepad utility windows examine file iter dat created iterprogram itshould data11    theistream_iteratorclassanistream_iteratorobject argument algorithm specifies input iterator initer objects arguments copy program reads floating point numbers entered cin keyboard user stores list chapter   ch15       initer cpp demonstrates istream_iterator include iostream include list include algorithm namespace std int main list float flist  uninitialized listcout nenter  floating point numbers istream iteratorsistream_iterator float cin_iter cin cinistream_iterator float end_of_stream eos copy cin flistcopy cin_iter end_of_stream flist cout endl display flistostream_iterator float ositer cout copy flist flist ositer cout endl return  someinteraction initerenter  floating point numbers                     notice copy data coming cinis source destination range data copied ning istream_iteratorconnected cin define cin_iterusing argument constructor range argument default constructor istream_iteratorplays special role creates istream_iteratorobject represents stream user generate stream inputting data typing ctrl key combination transmits file character streams presses ctrl pressing enter file delimit numbers ostream_iteratorto display contents list althoughof ways standard template library thestandard template library   ch15       perform display output enter  floating point numbers prompt istream iterator defining iterator defined locks display waiting input finiter file cinas input copy algorithm finiter cpp demonstrates istream_iterator files include iostream include list include fstream include algorithm namespace std int main list int ilist list ifstream infile iter dat create input file object iter dat exist istream iteratorsistream_iterator int file_iter infile file istream_iterator int end_of_stream eos copy infile ilistcopy file_iter end_of_stream back_inserter ilist cout endl display ilistostream_iterator int ositer cout copy ilist ilist ositer cout endl return  output finiteris11      define ifstreamobject represent iter dat file exist tain data foutiterprogram generated file cout istreamiterator initerexample ifstreamobject named infile stream object change program back_inserterto insert data ilist define ilistas container size sense reading input items entered chapter   ch15       associative containerswe thatthe sequence containers vector list deque store data items fixed lin ear sequence finding item container number located container involve slow process stepping items container associative container items arranged sequence arranged complex faster item arrangement typi cally tree structure approaches hash tables speed searching main advantage ofassociative containers searching usinga key single number string attribute objects container entire object main categories associative containers stl sets maps set storesobjects keys map stores pairs pair object key object set map key stored dictionary forbids entry word stl alternative versions set map relax restriction multisetand multimapare set map include multiple instances key associative containersshare member functions containers algorithms lower_bound andequal_range exist associative containers member functions exist containers push pop fam ily push_back versions associative containers sense push pop associative containers elements inserted ordered locations container sets multisetssets oftenused hold objects user defined classes employees database examples chapter sets hold simpler elements strings figure   objects arranged order entire object key standard template library thestandard template library   ch15       figure15 a set string objects set set stores objects class string set cpp set stores string objects pragma warning disable  set microsoft include iostream include set include string namespace std int main array string objectsstring names juanita robert mary amanda marie initialize set arrayset string string nameset names names  iterator setset string string iterator iter nameset insert yvette insert namesnameset insert larry chapter set puma cat dog ocelot puma reindeer keys16  ch15       nameset insert robert setnameset insert barry nameset erase mary erase display size setcout nsize nameset size endl iter nameset display members set iter nameset cout iter string searchname user cout nenter search cin searchname matching setiter nameset searchname iter nameset cout searchname set elsecout iter set cout endl return  thedirective pragma warning disable  microsoft compiler setormapfiles disableswarning  identifier truncated  characters debug appearance bug pragma preceed includes files forsetandmap problem pragma isa compiler specific directive fine tunes compiler operations define set type objects stored case class string alsothe function object order members set appliedto string objects set interface stl containers initialize set array insert members set insert member function display set iterate entry set member function sequential containersusefind algorithm version sample interaction set userenters george searched size amanda barrythe standard template library thestandard template library   ch15       juanitalarry marie robert yvetteenter search georgethe george set speed advantage searching associative containerisn apparent entries pair member functions associative containers setrange sho ws oflower_bound andupper_bound setrange cpp tests ranges set pragma warning disable  set microsoft include iostream include set include string namespace std int main set string objectsset string string organic iterator setset string string iterator iter organic insert curine insert organic compoundsorganic insert xanthine organic insert curarine organic insert melamine organic insert cyanimide organic insert phenol organic insert aphrodine organic insert imidazole organic insert cinchonine organic insert palmitamide organic insert cyanimide iter organic display setwhile iter organic cout iter string lower upper display entries range cout nenter range czz chapter   ch15       cin lower upper iter organic lower_bound lower iter organic upper_bound upper cout iter return  program displays entire set organic compounds user prompted type pair key values program displays keys lie range sample interaction aphrodinecinchonine curarine curine cyanimide imidazole melamine palmitamide phenol xanthineenter range czz aaa curbaphrodine cinchonine curarinethelower_bound memberfunction takes argument type key returns iterator entry argument ing determined function object set definition upper_bound functionreturns iterator entry greater argument functions access range values maps multimapsamapstorespairs pair consists key objectand object key object key searched object additional data set key objects strings numbers objects complex classes values strings numbers objects containers key word number representing times word appears document map constitutes frequency table thekey word list numbers arrangement represent book figure   situation keys andthe values definitions ordinary dictionary standard template library thestandard template library   ch15       figure15 a map word phrase pairs common maps associative arrays ordinary array array access element integer expression anarray   array associative array works choose data type array defined string anarray jane associative arraylet asimple map associative array keys names states values populations states listing asso_arr asso_arr cpp demonstrates map associative array pragma warning disable  map microsoft include iostream include string include map namespace std chapter key pairs snail cat small furry animal chases mice dog large hairy animal chases sticks snail small shelled animal eats gardens puma large furry animal eats hikers   ch15       int main string int pop string states wyoming colorado nevada montana arizona idaho int pops       map string int string mapstates mapmap string int string iterator iter iteratorfor int   states data arrays pop pops mapstates pop map cout enter state state user cin pop mapstates population cout population pop  cout endl display entire mapfor iter mapstates iter mapstates iter cout iter iter  return  program runs user prompted type astate program map state returns population state finally displays population pairs map sample output enter state wyomingpopulation  arizona  colorado   idaho   montana   nevada   wyoming  search speed sets maps excel program finds population user enters state meaningful millions data items iterating container list states populations fast sequential container fairly efficient notice states ordered alphabetically original data standard template library thestandard template library   ch15       definition map takes template arguments map string int string mastates type key case string representing state type case int represents population  s argument specifies ordering keys choose ordered alphabetically names states string define iterator map input data separate arrays real program file data map read variables nameandpop execute statementmapstates pop elegant construction insertion ordinary array array nameis astring integer user types state program finds population statementpop mapstates array syntax access parts entry map key iterator key iter theval iter iterator works containers storing user defined objects ourexample programs stored objects basic types big payoff stl store manipulate objects classes write written set personobjectswe start personclass includes person telephone number create members class insert set creating phone book database user interacts program entering person program searches list displays data person finds match multiset personobjects thelisting setpers setpers cpp multiset hold person objects pragma warning disable  set microsoft include iostream chapter   ch15       include set include string namespace std class person private string lastname string firstname long phonenumber public default constructorperson lastname blank firstname blank phonenumber   arg constructorperson string lana string fina long pho lastname lana firstname fina phonenumber pho friend bool operator const person const person friend bool operator const person const person void display const display person data cout endl lastname firstname tphone phonenumber operator person classbool operator const person const person lastname lastname return firstname firstname true false return lastname lastname true false operator person classbool operator const person const person return lastname lastname firstname firstname true false int main create person objects person pers1 deauville william  person pers2 mcdonald stacey  person pers3 bartoski peter  person pers4 kuangthu bruce  standard template library thestandard template library   ch15       person pers5 wellington john  person pers6 mcdonald amanda  person pers7 fredericks roger  person pers8 mcdonald stacey  multiset personsmultiset person person persset iterator multiset personsmultiset person person iterator iter persset insert pers1 persons multisetpersset insert pers2 persset insert pers3 persset insert pers4 persset insert pers5 persset insert pers6 persset insert pers7 persset insert pers8 cout nnumber entries persset size iter persset display contents multisetwhile iter persset iter display namestring searchlastname searchfirstname cout nenter person search cin searchlastname cout enter cin searchfirstname create person nameperson searchperson searchlastname searchfirstname  count personsint cntpersons persset count searchperson cout number persons cntpersons display matchesiter persset lower_bound searchperson iter persset upper_bound searchperson iter display cout endl return  main chapter   ch15       member functionsto work stl containers personclass common member functions default argument constructor essential overloaded operator overloaded operator member functions list class algorithms member functions specific situations classes provide overloaded assignment copy constructors destructor ignore avoid complicating listing overloaded operators constarguments generally themfriends member functions ordering overloaded operatorspecifies elements set ordered setperswe define operator order person names order names interaction setpers program displays entire list practical real database large number elements stored multiset elements ordered automatically prompt user enters mcdonald stacey persons list displayed number entries bartoski peter phone  deauville william phone  fredericks roger phone  kuangthu bruce phone  mcdonald amanda phone  mcdonald stacey phone  mcdonald stacey phone  wellington john phone enter person search mcdonaldenter stacey number persons  mcdonald stacey phone  mcdonald stacey phone just basic types class defined objects class handled tainer variables basic types size member function display total number entries iter ate list displaying entries standard template library thestandard template library   ch15       multiset lower_bound andupper_bound member functions areavailable display elements fall range output lower upper bound persons displayed notice create fictitious person person persons lower_bound andupper_bound functions match person thoseon list list personobjectsit fast search set multiset person setpersexam ple concerned insert delete personobject decide list listpersexample howthis listpers cpp list hold person objects include iostream include list include algorithm include string namespace std class person private string lastname string firstname long phonenumber public person arg constructorlastname blank firstname blank phonenumber l  arg constructorperson string lana string fina long pho lastname lana firstname fina phonenumber pho friend bool operator const person const person friend bool operator const person const person friend bool operator const person const person friend bool operator const person const person void display const display data cout endl lastname firstname tphone phonenumber chapter   ch15       long get_phone const return phone number return phonenumber overloaded person classbool operator const person const person return lastname lastname firstname firstname true false overloaded person classbool operator const person const person lastname lastname return firstname firstname true false return lastname lastname true false overloaded person classbool operator const person const person return overloaded person classbool operator const person const person return int main list person perslist list persons iterator list personslist person iterator iter1 persons listperslist push_back person deauville william  perslist push_back person mcdonald stacey  perslist push_back person bartoski peter  perslist push_back person kuangthu bruce  perslist push_back person wellington john  perslist push_back person mcdonald amanda  perslist push_back person fredericks roger  perslist push_back person mcdonald stacey  cout nnumber entries perslist size iter1 perslist display contents listwhile iter1 perslist iter1 display person persons string searchlastname searchfirstname standard template library thestandard template library   ch15       cout nenter person search cin searchlastname cout enter cin searchfirstname person nameperson searchperson searchlastname searchfirstname l search match namesiter1 perslist perslist searchperson iter1 perslist additional matches cout person iter1 display display match iter1 search match iter1 iter1 perslist searchperson iter1 perslist elsecout person person persons phone numbercout nenter phone number format  long snumber search number cin snumber iterate listbool found_one false iter1 perslist iter1 perslist iter1 snumber iter1 get_phone compare numbers found_one cout person phone number found_one true iter1 display display match forif found_one cout person phone number cout endl return  main chapter   ch15       finding persons namewe lower_bound upper_bound member functions dealing list set map member function persons function reports hit apply starting person original hit persons compli cates programming loop calls finding persons phone numberit harderto search person phone number class member functions intended primary search characteristic brute force approach finding phone number iterating list making manual comparison number member list snumber iter1 getphone program displays entries asks user finds matching person persons asks phone number finds matching persons interaction listpers number entries deauville william phone  mcdonald stacey phone  bartoski peter phone  kuangthu bruce phone  wellington john phone  mcdonald amanda phone  fredericks roger phone  mcdonald stacey phone enter person search wellingtonenter john person wellington john phone enter phone number format  person number deauville william phone  mcdonald amanda phone here program person people spec ified phone number standard template library thestandard template library   ch15       lists store class objects declare comparison operators thatclass depending algorithms define provide function bodies operators define operator completeness define sort algorithmon list wouldneed define operator function objectsfunction objects extensively stl arguments algorithms customize operation algorithms men tioned function objects earlier chapter sortemp program predefined function object greater sort data reverse order examine predefined function objects write greater control stl algorithms recall function object function wrapped class object class data member function loaded operator class templatized work differenttypes predefined function objects predefined stl function objects located functional header file table   function objects major operators table letter tindicates class user written basic type variables repre objects class passed function object arguments table15 predefined functionobjects function objectreturn minus times divide modulus negate bool equal_to bool not_equal_to bool greater bool bool greater_equal chapter   ch15       bool less_equal bool logical_and bool logical_or bool logical_not function objects arithmetic operations comparisons logical operations arithmetic function object handy class called airtime represents time values consisting hours minutes seconds data type flight arrival departure times airports function object add airtimeval ues ina container listing plusair plusair cpp accumulate algorithm function object include iostream include list include numeric accumulate namespace std class airtime private int hours   int minutes  public default constructorairtime hours  minutes   arg constructorairtime int int hours minutes void display const output screen cout hours minutes void input user char dummy cout nenter airtime format   cin hours dummy minutes standard template library thestandard template library table15 continuedfunction objectreturn   ch15       overloaded operatorairtime operator const airtime const add membersint temph hours hours int tempm minutes minutes tempm  check carry temph tempm  return airtime temph tempm return sum overloaded operatorbool operator const airtime at2 const return hours at2 hours minutes at2 minutes overloaded operatorbool operator const airtime at2 const return hours at2 hours hours at2 hours minutes at2 minutes overloaded operatorbool operator const airtime at2 const return at2 overloaded operatorbool operator const airtime at2 const return at2 at2 class airtime int main char answer airtime temp sum list airtime airlist list airtimesdo airtimes usertemp airlist push_back temp cout enter cin answer answer sum airtimessum accumulate airlist airlist airtime   airtime cout nsum sum display display sum cout endl return  chapter   ch15       program features accumulate algorithm versions function argument version sums operator range values argument version arithmetic function objects table   arguments version accumulate iterators ele ments range initial sum  operation applied elements add subtract multiply perform operations function objects interaction withplusair enter airtime format    enter yenter airtime format    enter yenter airtime format    enter yenter airtime format    enter nsum  theaccumulate algorithm easier clearer iterating containeryourself add elements lot work code effi cient theplus function object requires operator overloaded airtimeclass operator constfunction function objectexpects arithmetic function objects work logical function objects aslogical_and objects classes operations sense type boolvari ables writing function objects standardfunction objects write situations desirable involving sort algorithm involving for_each easy sort group elements based relationship class operator sort container pointers objects standard template library thestandard template library   ch15       objects storing pointers good improve efficiency large objects avoids copying process takes place object container sort pointers objects arranged pointer address ratherthan attribute object sort algorithm work container pointers ply function object defines data ordered program starts vector pointers personobjects objects vector sorted usual leads pointers persons sorted case change ordering items inserted order increasing addresses vector sorted cor rectly function object comparepersons orders items contentsofpointers pointers result personobjects sortedalphabetically listing sortptrs sortptrs cpp sorts person objects stored pointer include iostream include vector include algorithm include string namespace std class person private string lastname string firstname long phonenumber public person default constructorlastname blank firstname blank phonenumber l  arg constructorperson string lana string fina long pho lastname lana firstname fina phonenumber pho friend bool operator const person const person friend bool operator const person const person void display const display person data cout endl lastname firstname tphone phonenumber chapter   ch15       long get_phone const return phone number return phonenumber class person overloaded person class bool operator const person const person lastname lastname return firstname firstname true false return lastname lastname true false overloaded person class bool operator const person const person return lastname lastname firstname firstname true false function object compare persons pointers class comparepersons public bool operator const person ptrp1 const person ptrp2 const return ptrp1 ptrp2 function object display person pointer class displayperson public void operator const person ptrp const ptrp display int main vector ptrs persons vector person vectptrspers personsperson ptrp1 person kuangthu bruce  person ptrp2 person deauville william  person ptrp3 person wellington john  person ptrp4 person bartoski peter  person ptrp5 person fredericks roger  person ptrp6 person mcdonald stacey  standard template library thestandard template library   ch15       vectptrspers push_back ptrp1 persons setvectptrspers push_back ptrp2 vectptrspers push_back ptrp3 vectptrspers push_back ptrp4 vectptrspers push_back ptrp5 vectptrspers push_back ptrp6 for_each vectptrspers display vectorvectptrspers displayperson sort pointerssort vectptrspers vectptrspers cout nsorted pointers for_each vectptrspers display vectorvectptrspers displayperson sort vectptrspers sort personsvectptrspers comparepersons cout nsorted persons for_each vectptrspers display vectorvectptrspers displayperson vectptrspers delete vectptrspers delete person vectptrspers pop_back pop pointer cout endl return  main output sortptrs kuangthu bruce phone  deauville william phone  wellington john phone  bartoski peter phone  fredericks roger phone  mcdonald stacey phone sorted pointerskuangthu bruce phone  deauville william phone  wellington john phone  bartoski peter phone  fredericks roger phone  mcdonald stacey phone sorted personsbartoski peter phone chapter   ch15       deauville william phone fredericks roger phone  kuangthu bruce phone  mcdonald stacey phone  wellington john phone first original order ordering sorted incorrectly pointer finally order sorted correctly thecomparepersons function objectif argumentversion sort algorithmsort vectptrspers vectptrspers pointers sorted addresses memory sort personobjects argument version sort withthecomparepersons function object argument sort vectptrspers bectptrspers comparepersons function object comparepersons defined sortptrs program function object compare persons pointersclass comparepersons public bool operator const person ptrp1 const person ptrp2 const return ptrp1 ptrp2 theoperator takes arguments pointers persons compares contents pointers thedisplayperson function objectwe approach display contents container iterating container for_each function function object argument for_each vectptrspers bectptrspers displaypeson displayperson function object called person vec tor displayperson function object display person pointer class displaypersonthe standard template library thestandard template library   ch15       public void operator const person ptrp const ptrp display arrangement single function displays personobjects vector function objects modify container behaviorinsortptrs function objects modify behavior algorithms function objects modify behavior containers set pointers objects sort automatically based objects pointers function object define container sort algorithm beused examine approach exercise summarythis chapter presented quick dirty introduction stl touched major topics acquired stl fuller understanding stl recommend readers avail complete text topic learned stl consists main components containers algorithms iterators containers divided groups sequential associative sequential tainers vector list deque associative containers set map closely multiset multimap algorithms carry operations containers sorting copying searching iterators pointers container elements provide connections algorithms containers algorithms containers iterators ensure algorithmsand containers appropriately matched iterators defined specific kinds containers arguments algorithms container iterators match algorithm compiler error input output iterators connect directly streams allowing data piped directly devices containers specialized iterators backward iteration change behavior algorithms insert data overwrit ing existing data chapter   ch15       algorithms standalone functions work containers addition container specific member functions cases function algorithm member function stl containers algorithms work objects class provided member functions operator overloaded class behavior algorithms find_if customized functionobjects function object instantiated class operator questionsanswers questions appendix  stl container hold objects class employee store elements accessible compile programs organize objects stored memory  stl sequence containers v_______ l_______ d________  stl associative containers s_______ ma_______  stl algorithm standalone function operates containers link member functions containers friend function container classes member function container classes  true false purpose iterator stl connect algorithms containers  algorithma finds matching sequences elements containers finds container matches container takes iterators arguments takes container elements arguments  true false algorithms stl containers  range supplied algorithm i_______ values  entity customize behavior algorithm standard template library thestandard template library   ch15        vector container insert lots elements arbitrary locations vector insert elements container number access element element key access element  true false member function removes element tainer  define vector vwith default constructor define vector wwith aone argument constructor size  insert  elements vectors withpush_back size member function return ______ vand _____forw  unique algorithm removes _________ element values container  deque data inserted deleted arbitrary location data inserted deleted arbitrary location process slow data inserted deleted data inserted deleted process slow  iterator ________ specific element container  true false iterator forward backward container  ____________ iterator list  iteris iterator container write expression object pointed iter iterto point element  copy algorithm returns iterator toa element copied element copied element element copied element element copied  reverse_iterator shoulda initializing initializing rend increment backward container decrement backward container chapter   ch15        true false back_inserteriterator elements inserted existing  stream iterators treat display keyboard devices files _____________  argument ostream_iteratorspecify  associative container values stored sorted order keys stored sorted order sorting alphabetical numerical order sort algorithm contents sorted  defining set ______________  true false set insert member function inserts key sorted order  map stores __________ objects values  true false map elements key  store pointers objects objects container objects copied implement storage container associative containers sort objects object attributes keys containers require memory  associative container setto order automatically define ordering function object function object container ___________ exercises answers exercises appendix  write program applies sort algorithm array floating point values entered user displays result  apply sort algorithm array entered user display result push_back insert operator size displaythem  start list intvalues normal reverse iterators moving ward list moving backward whileloop reverse contents list swap algorithm save statements solution works odd numbers items experts reverse function compiler algorithmheader file standard template library thestandard template library   ch15        start personclass create multiset hold pointers personobjects define multiset comparepersonsfunction object sorted auto matically names persons define half dozen persons multiset display contents persons verify multiset stores multiple objects key  array numbers set odd numbers merge algorithmto merge containers vector display vector contents  exercise  ordinary reverse iterators reverse contents container forward reverse iterator carry task time vector  argument version accumulate algorithm plusairexample rewrite argument version  copy algorithm copy sequences container careful destination sequence overlaps source sequence write program copy sequence location array copy user enter values first1 last1 first2 program toverify shift sequence overlaps destination left shift items     copy starts leftmost element  listed function objects operators table   theplusairprogram earlier chapter function object accumulate algorithm provide arguments function objects argu ment parentheses function object expect function adapter called bind1storbind2ndto bind argument function suppose string searchname tainer strings called names ptr find_if names names bind2nd equal_to string searchname hereequal_to andsearchnameare arguments bind2nd statement returns iterator string container equal searchname write program incorporates statement string container strings display position searchnamein container  copy_backward algorithm overcome problem exercise  shift sequence left source overlaps destination write program copy andcopy_backward toenable shifting sequence container overlap chapter   ch15        write program copies source file integers destination file stream iterators user supply source destination filenames program whileloop approach loop read integer input iterator write output iterator increment itera tors iter dat file created foutiterprogram chapter suitable source file  frequency table lists number times word appears text file write program creates frequency table file entered user map string intpairs library function ispunct header file ctype check punctuation strip word string member function substr tolower functionmay prove handy uncapitalizing standard template library thestandard template library   ch15         ch15       chapter16object oriented software developmentin chapter evolution software development processes802 case modeling805 programming problem809 elaboration phase landlordprogram812 cases classes816 writing code824 int eracting program841 final thoughts843   ch16       chapter the programs book fairly small require formality developed case scale software projects involve dozens hundreds programmers generate millions lines source code pro jects essential follow defined development process chapter process condensed version process applied actual program examples uml diagrams book uml soft ware development process visual modeling language uml play key role development process evolution software development processes idea process developing software evolved slowly decades computer summarize seat pants process early days process programmer discuss situa tion potential users start writing code satisfactory small programs waterfall process programsgrew larger development process broken phases carried sequence approach derived manufacturing indus phases labelled analysis design coding deployment ften called waterfallprocess sequence direction analysis deployment figure   typically separate teams workers phase phase completed passed team experience major problems waterfall approach underly ing assumption phase completed minor errors seldom happened real mistakes omis sions phase mistakes snowball phase rendering work succeeding phases eitheruseless error ridden development users change requir ing program additional features design phase completed difficult change design meant program leastpartially obsolete coded   ch16       figure16 the waterfall process object oriented programming mentionedin chapter  big picture object oriented programming created solve problems inherent development large programs oop helps design process objects program correspond objects user oop program play project goals determined initial phase focuses program users captures accomplished translate object oriented program design perform theinitial step figuring users modern processes large number ofsoftware development processes appeared years steps process clients analysts designers programmers work reached sort universal acceptance uml field modeling languages fact experts develop ment process situation process chosen modified drastically depending project applied modern development process examine high lights unified process object oriented software development object orientedsoftware development803analysisdesigncodingdeployment17  ch16       unified process wasdeveloped people created uml grady booch ivarjacobson james rumbaugh called rational unified process company developed unified software development process unified process divided phases inception elaboration construction transition inception phase scope project feasibility determined phase ends management approval proceed elaboration phase basic architecture designed user determined construction phase involves design software actual writing code transition phase thesystem handed users testing deployment phases divided number parts called iterations construction phase consist number iterations iteration subset sys tem corresponds task user program carry iteration generally corresponds case figure   unified process chapter inceptionelaborationconstructioniterationstransitionfigure16 the unified process iteration involves sequence analysis design implementation testing sequence repeated times goal iteration create working waterfall process unified process easy return earlier phases discoveries users transition phase revisions construc tion phase elaboration phase   ch16       note unified process applied type software architecture object oriented languages fact potential weakness pocess actively encourageobject oriented design elaboration phase unified process technique called casemodeling starting point developing detailed design reason unified process case drivenprocess dis cuss case modeling apply sample software project case modelinguse case modeling future users software input design vocabulary users programmers focus users initial specification program understood users software engineers designing main entities case approach actors anduse cases actorsanactoris person designing bank customer interacting software atm machine actor astronomer inputting coordinates star telescope aiming program actor bookstore clerk checking computer book actor actor initiates operation actor ways receiving assisting operation role actor human playing roles represented actors small business harry jones represented actor called salesperson making sale actor called book keeper adding day sales conversely single actor represent dif ferent individuals harry jose elma represented actor called salesperson systems connected designing computer link web actors computer book store linked remote head office remote consid ered actor bookstore object oriented software development object orientedsoftware development80517  ch16       large project identifying actors difficult designer people systems provi assist actorsuse casesause caseis specific task initiated actor describes single goal actor attain examples withdrawal cash bank customer aiming telescope astronomer investigation book availability bookstore clerk situations case initiated actor initiated sys tem electric company accounting program sends reminder paid car computer turns warning light decides engine toohot general everythingyou case scenariosa case consists number scenarios case specifies goal scenario represents outcome attempting reach goal case consisting bookstore clerk querying store computer location book outcomes scenarios book store computer displays shelf location book stock customer opportunity order publisher book stock print sytem informs customer luck formal development process scenario documentation describing events scenario case diagramsthe uml specifies todiagram cases actors represented stick figures cases ovals rectangular frame surrounds cases leaving actors rectangle boundary inside software developer design figure   case diagram bookstore computer chapter   ch16       figure16 use case diagram bookstore case diagram lines called associations connect actors cases typically lines direction arrows initiated case diagram assume bookstore chain accounting simi lar functions handled central office clerks store record sale book request book location availability manager check books sold order actors sales clerk clerk manager central office cases record sale book order book review sales data request sales data case descriptionsthe case diagramdoes room detailed descriptions individual cases supplied separately degrees formality case descriptions depending size project philosophy developers cases detailed description scenario case object oriented software development object orientedsoftware development807find bookinformationclerkrequestsales datacentralofficesystemorder bookreviewsales datamanagerrecord salesalesclerkbook store system17  ch16       simplest version case description paragraph text columns actor actions column response formal version include details preconditions postconditions detailed sequence steps uml diagram called activity diagram whichis form flowchart graphically sequence steps case case diagrams case descriptions initial design systemto aid communication users developers development process consulted verify supposed provide basis testing anddocumentation cases classes actors cases identified development process moves elaboration construction phase emphasis shifts users developers concern develop classes program approach nouns case descriptions objects pro gram correspond objects real nouns represent real entities users candidates classes nouns good classes eliminate nouns general trivial represented attributes simple variables candidate classes understand interact exam ining verbs case descriptions cases verb translates message object association classes uml class diagram previous chapters classes relationships case realized sequence ofmessages objects uml diagram interaction diagram todetail sequence fact separate interaction diagram scenarios case examples sequence diagrams kind interaction diagram developmentprocess easier visualize walk development real program necessity small questionable requires formal development process applying process small project demystify topics mentioned chapter   ch16       programming problem program designin chapter called landlord landlord understand sorts data rents expenses land lord deal started easily understood business domain whatwe writing program suppose independent programmer approached potential customer beverly smith beverly small time landlord owns ment building  units write program easier record data print reports finances apartment building beverly agree payment schedule purpose program pleted inception development process hand written forms beverly recording apartment building hand fashioned ledger books forms tenant list rental income record expense record annual summary thetenant listshows apartment numbers column tenant names adjacent column therental income record records incoming rent payments  columns month row apartment number time beverly receives rent pay ment tenant records row column rental income record figure   layout rental income record easy rents paid theexpense record records outgoing payments personal check register columns payee company person beverly writes check paid addition column beverly budget category payment charged budget categories include mortgage repairs utilities taxes insurance expense record figure   object oriented software development object orientedsoftware development80917  ch16       figure16 the expense record chapter figure16 the rental income record   ch16       theannual reportuses data rental income record expense record sum marize money year rents summed result displayed expenses summed displayed budget cate gory easy spent repairs year figure   annual report finally expenses subtracted income money beverly lost year object oriented software development object orientedsoftware development811figure16 the annual report beverly existing annual report created year rents expenses december recorded computerized partial annual report time year beverly tells program pretty duplicate paper forms enter data tenants rents expenses display reports assumptionsof vealready simplifying assumptions kinds data running apartment building damage deposits depreciation mort gage income late fees rental laundry machines details   ch16       kinds reports beverly net worth statement nice program interface income tax program online bank ing big picture perspective commercial landlord programs smart beverly contract custom written ignore distractions problem moretractable elaboration phase landlordprogram elaboration phase major software development project group people includes potential users program software people designing meet dis cuss program small group beverly software expert design code actorsthe group beginsby identifying actors inputting pro gram requesting interact program program interact programs systems landlordexample person program landlord person inputs asks displayed ways small project imagine actors landlord accountant access program data internet accountant actor program provided data income tax program program actor simplicity ignore possibilities casesnext group considers tasks actor carry real software project major effort input users discussion refining ideas complicated list tasks landlord tasks recorded case diagram situation landlord actor sta program add tenant tenant list input rent rent record input expense expense record display tenant list display rent recordchapter   ch16       display expense record display annual summary resultinguse case diagram figure   object oriented software development object orientedsoftware development813landlordlandlord programinputexpensedisplaytenant listinputrentadd newtenantstart theprogramdisplayannual summarydisplayrent recorddisplayexpense recordfigure16 use case diagramfor landlordprogram case descriptionsnow todescribe case earlier case descriptions formal complex project simple short prose descrip tions start program obvious mention started program display screen user choose task perform called user interface screen   ch16       add tenant programpresents tenant input screen prompts user enter ant apartment number places row tenant list list automatically sorted apartment number input rent paymentthe rent input screen prompts user enter tenant month rent rent received program tenant list ant apartment number access rent record time tenant paid rent row created rent record rent inserted month rent inserted existing row input expense paymentthe expense input screen prompts user enter payee person company lan dord paying paid day month payment budget category program creates row inserts expenserecord display tenant list program displays tenant list row apartment number tenant display rent record program displays rent record row apartment number paid month display expense record program displays expense record row month day payee budget category display annual summarythe program displays annual summary consists  sum rents paid year  list total expenses budget category  resultingbalance profit loss year chapter   ch16       scenariosas case consist scenarios main scenario case scenario works perfectly goal achieved outcomes common scenario add tenant case suppose user attempts enter tenant apartment occupied add tenant scenario  program presents add tenant screen prompts user enter tenant apartment number apartment number entered tenant list rented add tenant screen displays error message thiseffect scenario user attempts input rent payment nonexistent tenant input rent payment scenario the rent input screen prompts user enter tenant month rent rent program tenant list ant displays error message user simplicity persue alternative scenarios real pro ject scenario developed major scenarios theprogramming elements discovered uml activity diagramsthe uml activity diagram model cases kind diagram flow control activity flowchart programming activity diagram uml diagrams formally additional capabilities activities lozenge shaped outlines lines connecting activities represent tran sitions activity branches diamonds incoming outgoing transitions state diagrams place guards transi tions selected state diagrams initial state state represented asolid circle solid circle ring figure   add tenant case including scenario branch depends apartment number entered user occupied error message displayed object oriented software development object orientedsoftware development81517  ch16       figure16 uml activity diagram activity diagrams represent complicated algorithms program code flowcharts capabilities pursue representing sev eral concurrentactivities cases classes construction phase project design program start examining nouns case descriptions mentioned earlier listing nounshere list nouns picked case descriptions  user interface screen  tenant chapter displayadd tenantscreenget andapartment numberplace dataontenant listdisplayerrormessage apartment occupied   ch16        tenant input screen  tenant  apartment number  tenant row  tenant list  rent payment  rent input screen  month  rent  rent record  rent row  expense payment  expense input screen  payee  expense  day  budget category  expense row  expense record  annual summary  sum rents  totalexpenses category  balance refining listfor reasons nouns inappropriate class candidates rejected listed rows records tenant row rent row expense row rows good classes complicated complex data row tenant record holds data tenant row expense record holds data expense classes tenant expense guess classes data discard tenant row expense row classes rent row hand apartment object oriented software development object orientedsoftware development81717  ch16       number array  rents rent row exist rent year paid rents inserted existing row complicated situa tion tenants expenses leave rent row class leaves rent pay ment class data hold rent eliminate class program derive data annual summary rent record expense record classes sum rents total expenses category balance simply calculations leaves classes  user interface screen  tenant  tenant input screen  tenant list  rent input screen6 rent record  rent row  expense payment  expense input screen  expense record  annual summary discovering attributesmany nouns rejected classes candidates attributes member data classes class tenant attributes tenant apartment number class expense attributes payee month day budget category majority attributes discovered verbs messages cases light cast messages class send message member function object discovering messages discovering member functions class receiving message nouns verb candidate message relate obtaining user displaying things chapter   ch16       display tenant list case verbsunderlined program displaysthe tenant list row apartment numberand tenant program user interface screen displays user interface screen sends message calls member function tenant list telling display guess member function named display verb correspond message describes contents row tenant list ata complicated case add tenant program presentsthe tenant input screen omptsthe user enterthe tenant apartment number places row tenant list list sor tedby apartment number presents verb user interface screen sends message tenant input screen telling display data user message member function thetenant input screen gettenant prompts enter refer tenant input screen communication user represent messages object oriented sense gettenant displaysprompts records user responses tenant apartment number verb places tenant input screen sends message tenant list class tenant object argument tenant list object insert object itslist function inserttenant sorted verb message kind communication description tenant list figure   add tenant case connection messages westart write code activities mentioned case required program case creation tenant object clear tenant list holds tenant objects tenant object created list software engineer decides gettenant member function tenant input screen place create tenant object inserted tenant list cases analyzed yield clues relationships betweenclasses note point class names appeared cases start write code willneed rewrite single word class names object oriented software development object orientedsoftware development81917  ch16       figure16 verbs add tenant case class diagramonce idea classes relate cre ate class diagram examples class diagrams earlier chapters figure   class diagram landlordprogram sequence diagramsbefore starting code understand steps involved case generate auml sequence diagram sequence diagram kinds uml interaction diagrams collaboration diagram events unfold time sequence diagram depicts time graphical sequence diagram vertical axis represents time starting flowing ward rectangles names objects participate case action typically starts object left sending message object lessimportant dependent objects note diagram objects classes focusing sequences messages messages object object class class uml diagrams object names underlined distinquish class names extending downwardfrom object dotted called lifeline object exists time object deleted lifeline stops point chapter userinterfacescreentenantinputscreentenantlistgettenant inserttenant program presents tenant input screen prompts user enter newtenant apartment number places row tenant list list sorted apartment number used17  ch16       figure16 class diagramof landlordprogram sequence diagram start program atsome sequence diagrams landlordprogram start easy figure   sequence diagram start program case program starts defines class called userinterfaceto handle userinterface screen discussed cases assume program creates single object class called theuserinterface object initiates cases left sequence diagrams diagrams condense case names class names theuserinterfaceobject starts task create main data structures program objects classes tenantlist rentrecord andexpenserecord turns program creates objects bornwith names pointers names fortunately object diagrams uml ways write object names actual colon class tenantlist diagramsthe underlining colon remind applies object class object oriented software development object orientedsoftware development821userinterfacerentinputscreenrentrowrentrecordtenantinputscreentenanttenantlistexpenseinputscreenexpenseexpenserecordannualreport17  ch16       figure16 sequence diagram start program case vertical position object rectangles time created starting object class tenantlist objects continue exist life pro gram lifelines extend diagram time dimension scale intended relationship events horizontal lines represent messages calls member functions solid arrowhead indi cates normal synchronous function open arrowhead asynchronous event rectangle theuserinteraceis called activation box orfocus control indi cates object active normal procedural program landlord tive member function object executing called function returned objects diagram active theuserinterfacehas messages telling sequence diagram display tenant list examine sequence diagram figure   depicts display tenant list case chapter theuserinterface tenantlist rentrecord expenserecordnewnewnew17  ch16       figure16 sequence diagram display tenant list case function returns represented dotted lines notice objects active life activity box member functions called object message lines member function called heretheuserinterfacetells tenantlistobject display calling display function tenantlistobject turn tells tenantobjects displaythemselves asterisk message repeatedly phrase brackets tenant objects specifies condition repetition pro gram cout display function sequence diagram add tenant lastexample sequence diagram add tenant case figure   included landlord object activity box interaction program user user tells program add tenent theuserinterfaceobject creates object class tenantinputscreen object tenant data user creates tenantobject calls object class tenantlistto insert newly created tenant deletes tenantinputscreenobject large tenantinputscreen lifeline deleted point object oriented software development object orientedsoftware development823theuserinterfacedisplay display tenantlist tenant tenant objects   ch16       figure16 sequence diagram add tenant case sequence diagrams deal main scenario case ways alternate scenarios sequence diagrams create dia gram scenario lack space precludes illustrating sequence diagrams cases point create youwant writing codefinally armed withthe case diagram detailed cases class diagram sequence diagrams crank compiler start writing actual code construction phase chapter theuserinterface tenantlist tenant tenantinputscreenadd atenantnewnewinserttenant gettenant request datasupply datadeletelandlord17  ch16       cases determined elaboration phase translate iterations constructionphase figure   large project iterations handled differ ent team programmers iteration developed separately users determine refinements small program complexity header filethe place start coding hfile define class interfaces details implementations discussed declarations hfile arethe public classes users classes function bodies cppfile implementations invisible class users creation hfile intermediate step design nitty gritty writingmethod bodies landlord hfile landlord header file landlord cpp class declarations pragma warning disable  set microsoft include iostream include vector include set include string include algorithm sort include numeric accumulate namespace std global methods void getaline string instr text char getachar character class tenant class tenant private string tenant int aptnumber tenant apartment number tenant phone herepublic tenant string int ano tenant int getaptnumber needed set friend bool operator const tenant const tenant friend bool operator const tenant const tenant oobject oriented software development object orientedsoftware development82517  ch16       friend ostream operator ostream const tenant class tenant class comparetenants class comparetenants function object compares tenants public bool operator tenant tenant const class tenantlist class tenantlist private set pointers tenants set tenant comparetenants setptrstens set tenant comparetenants iterator iter public tenantlist destructor deletes tenants void inserttenant tenant tenant list int getaptno string return apartment number void display display tenant list class tenantlist class tenantinputscreen class tenantinputscreen private tenantlist ptrtenantlist string tname int aptno public tenantinputscreen tenantlist ptrtl ptrtenantlist ptrtl void gettenant class tenantinputscreen class rentrow row rent record address  rent amounts class rentrow private int aptno float rent  chapter   ch16       public rentrow int  arg ctor void setrent int float record rent month float getsumofrow return sum rents row needed store set friend bool operator const rentrow const rentrow friend bool operator const rentrow const rentrow output friend ostream operator ostream const rentrow class rentrow class comparerows function object compares rentrows public bool operator rentrow rentrow const class rentrecord class rentrecord private set pointers rentrow objects tenant set rentrow comparerows setptrsrr set rentrow comparerows iterator iter public rentrecord void insertrent int int float void display float getsumofrents sum rents record class rentrecord class rentinputscreen class rentinputscreen private tenantlist ptrtenantlist rentrecord ptrrentrecord string rentername float rentpaid int month int aptno object oriented software development object orientedsoftware development82717  ch16       public rentinputscreen tenantlist ptrtl rentrecord ptrrr ptrtenantlist ptrtl ptrrentrecord ptrrr void getrent rent tenant month class rentinputscreen class expense class expense public int month day string category payee float expense expense int int string string float month day category payee needed set friend bool operator const expense const expense friend bool operator const expense const expense needed output friend ostream operator ostream const expense class expense class comparedates function object compares expenses public bool operator expense expense const class comparecategories function object compares expenses public bool operator expense expense const class expenserecord class expenserecord private vector pointers expenses vector expense vectptrsexpenses vector expense iterator iter chapter   ch16       public expenserecord void insertexp expense void display float displaysummary annualreport class expenserecord class expenseinputscreen class expenseinputscreen private expenserecord ptrexpenserecord public expenseinputscreen expenserecord void getexpense class expenseinputscreen class annualreport class annualreport private rentrecord ptrrr expenserecord ptrer float expenses rents public annualreport rentrecord expenserecord void display class annualreport class userinterface class userinterface private tenantlist ptrtenantlist tenantinputscreen ptrtenantinputscreen rentrecord ptrrentrecord rentinputscreen ptrrentinputscreen expenserecord ptrexpenserecord expenseinputscreen ptrexpenseinputscreen annualreport ptrannualreport char public userinterface object oriented software development object orientedsoftware development82917  ch16       userinterface void interact class userinterfac file landlord class declarationsdeclaring classesis easy class declarations directly classes dis covered examining nouns case descriptions class diagram names changed multi word english versions single word computerese tenant list tenantlist classes storing pointers objects kinds stl containers define comparison objects ers chapter  standard template library comparison objects classes named comparetenants comparerows comparedates andcomparecategories attribute declarationsas attributes member data class determined nouns classes nameandaptnumberbecome attributes tenantclass declaration attributes inferred associations class diagram associations attributes pointers references classes associate rentinputscreenclass attrib utesptrtenantlistandptrrentrecord aggregates aggregate associations places class diagram aggregates indi cate containers attributes class holding objects parts case descriptions class diagram sort container shouldbe aggregates programmer choose container aggregate simple array stl container landlord choices thetenantlistclass stl setof pointers tenantobjects therentrecordclass setof pointers rentrowobjects theexpenserecordclass vectorof pointers expenseobjects chapter   ch16       sets tenantlistandrentrecordto provide fast access vector expenserecordbecause sort expenseobjects category vectors sets sorted efficiently aggregations chose store pointers actual objects avoid copy ing takes place time actual object stored storing objects directly situations objects small performance penalty storing objects great small program effi ciency storing pointers cppfilesthe cppfiles containthe method bodies declarations hfile writingthe code methods fairly straightforward point func tion supposed arguments passed separated class method definitions main short lordapp cppfile main auserinterfaceobject created interact method called thelordapp cppfile lordapp cpp client file program include landlord int main userinterface theuserinterface theuserinterface interact return  file lordapp cpp finally landlord cppfile class method definitions landlord cpp models finances apartment building include landlord class declarations global functions void getaline string instr text char temp  cin temp  cin ignore  instr temp object oriented software development object orientedsoftware development83117  ch16       char getachar character char cin cin ignore  return methods class tenant tenant tenant string int ano aptnumber ano tenant tenant int tenant getaptnumber return aptnumber bool operator const tenant const tenant return bool operator const tenant const tenant return ostream operator ostream const tenant aptnumber endl return method class tenantinputscreen void tenantinputscreen gettenant tenant info cout enter tenant george smith getaline tname cout enter tenant apartment number  cin aptno cin ignore  tenant tenant ptrtenant tenant tname aptno ptrtenantlist inserttenant ptrtenant send tenant list bool comparetenants operator tenant ptrt1 tenant ptrt2 const return ptrt1 ptrt2 chapter   ch16       methods class tenantlist tenantlist tenantlist destructor setptrstens delete tenants remove ptrs set iter setptrstens delete iter setptrstens erase iter tenantlist void tenantlist inserttenant tenant ptrt setptrstens insert ptrt insert int tenantlist getaptno string tname list int aptno tenant dummy tname  iter setptrstens iter setptrstens aptno iter getaptnumber tenant dummy iter list return aptno return  void tenantlist display display tenant list cout napt ttenant setptrstens cout tenants iter setptrstens iter setptrstens cout iter display methods class rentrow rentrow rentrow int aptno  arg constructor rent  rent   object oriented software development object orientedsoftware development83317  ch16       void rentrow setrent int float rent float rentrow getsumofrow sum rents row return accumulate rent  rent   bool operator const rentrow const rentrow return aptno aptno bool operator const rentrow const rentrow return aptno aptno ostream operator ostream const rentrow aptno print apartment number int   print  rents rent   elses rent endl return bool comparerows operator rentrow ptrr1 rentrow ptrr2 const return ptrr1 ptrr2 methods class rentrecord rentrecord rentrecord destructor setptrsrr delete rent rows remove ptrs set iter setptrsrr delete iter setptrsrr erase iter void rentrecord insertrent int aptno int month float rentrow searchrow aptno temp row aptno iter setptrsrr search setptrsrrchapter   ch16       iter setptrsrr searchrow iter rentrow iter setrent month rent row return elseiter itrentrow ptrrow rentrow aptno row ptrrow setrent month rent row setptrsrr insert ptrrow row vector insertrent void rentrecord display cout naptno tjan feb mar apr jun jul aug sep oct nov dec setptrsrr cout rents iter setptrsrr iter setptrsrr cout iter float rentrecord getsumofrents return sum rents float sumrents   iter setptrsrr iter setptrsrr sumrents iter getsumofrow iter return sumrents methods class rentinputscreen void rentinputscreen getrent object oriented software development object orientedsoftware development83517  ch16       cout enter tenant getaline rentername aptno ptrtenantlist getaptno rentername aptno  rent cout enter paid   cin rentpaid cin ignore  cout enter month rent   cin month cin ignore  month internal   ptrrentrecord insertrent aptno month rentpaid returncout tenant getrent methods class expense bool operator const expense e1 const expense compares dates e1 month month month return e1 day day compare dayselse return e1 month month compare months bool operator const expense e1 const expense return e1 month month e1 day day ostream operator ostream const expense exp exp month exp day exp payee exp exp category endl return bool comparedates operator expense ptre1 expense ptre2 const return ptre1 ptre2 chapter   ch16       bool comparecategories operator expense ptre1 expense ptre2 const return ptre1 category ptre2 category methods class expenserecord expenserecord expenserecord destructor vectptrsexpenses delete expense objects remove ptrs vector iter vectptrsexpenses delete iter vectptrsexpenses erase iter void expenserecord insertexp expense ptrexp vectptrsexpenses push_back ptrexp void expenserecord display cout ndate tpayee tamount tcategory vectptrsexpenses size  cout expenses sort vectptrsexpenses sort datevectptrsexpenses comparedates iter vectptrsexpenses iter vectptrsexpenses cout iter float expenserecord displaysummary annualreport float totalexpenses  total categoriesif vectptrsexpenses size  cout tall categories t0 return  sort categoryobject oriented software development object orientedsoftware development83717  ch16       sort vectptrsexpenses vectptrsexpenses comparecategories category sum entriesiter vectptrsexpenses string tempcat iter category float sumcat   iter vectptrsexpenses tempcat iter category sumcat iter categoryelse category cout tempcat sumcat endl totalexpenses sumcat add previous category tempcat iter category sumcat iter add final iter whiletotalexpenses sumcat add final category cout tempcat sumcat endl return totalexpenses displaysummary methods class expenseinputscreen expenseinputscreen expenseinputscreen expenserecord ptrexpenserecord void expenseinputscreen getexpense int month day string category payee float cout enter month   cin month cin ignore  cout enter day   cin day cin ignore  cout enter expense category repairing utilities getaline category chapter   ch16       cout enter payee bob hardware big electric getaline payee cout enter   cin cin ignore  expense ptrexpense newexpense month day category payee ptrexpenserecord insertexp ptrexpense methods class annualreport annualreport annualreport rentrecord prr expenserecord ptrrr prr ptrer void annualreport display cout annual summary cout income cout trent rents ptrrr getsumofrents cout rents endl cout expenses expenses ptrer displaysummary cout nbalance rents expenses endl methods class userinterface userinterface userinterface reports exist life program ptrtenantlist tenantlist ptrrentrecord rentrecord ptrexpenserecord expenserecord userinterface userinterface delete ptrtenantlist delete ptrrentrecord delete ptrexpenserecord object oriented software development object orientedsoftware development83917  ch16       void userinterface interact true cout enter input data display report quit program getachar enter data cout enter add tenant record rent payment record expense getachar switch input screens exist case ptrtenantinputscreen tenantinputscreen ptrtenantlist ptrtenantinputscreen gettenant delete ptrtenantinputscreen break case ptrrentinputscreen rentinputscreen ptrtenantlist ptrrentrecord ptrrentinputscreen getrent delete ptrrentinputscreen break case ptrexpenseinputscreen expenseinputscreen ptrexpenserecord ptrexpenseinputscreen getexpense delete ptrexpenseinputscreen break default cout unknown input option break switch ifelse display data cout enter display tenants display rents display expenses display annual report getachar switch chapter   ch16       case ptrtenantlist display break case ptrrentrecord display break case ptrexpenserecord display break case ptrannualreport annualreport ptrrentrecord ptrexpenserecord ptrannualreport display delete ptrannualreport break default cout unknown display option break switch elseifelse return quitelsecout unknown option enter interact file landlord cpp simplifications code landlord lengthy simplifications character mode user interface menus windows modern graphic user interface error checking user input year worth data handled interacting program trouble design write landlordprogram interested sample interaction beverly insert tenant apartment number enters insert ant enters relevant data prompts prompts proper mat parentheses enter input data display report quit program ienter add tenant record rent payment record expense tobject oriented software development object orientedsoftware development84117  ch16       enter tenant george smith harry ellisenter tenant apartment number after entered tenants display tenant list brevity showonly tenants enter input data display report quit program denter display tenants display rents display expenses display annual report tapt tenant  harry ellis  wanda brown  peter quan  vasquez  jane garthto input rent paid tenant beverly enters leave option lists displayed program interactionlooks enter tenant wanda brown enter paid    enter month rent   here wanda brown check rent  tenant typed appears tenant list smarter program flexible entire rent record beverly types result rents received brevity rents beverly  units aptno jan feb mar apr jun jul aug sep oct nov dec                                                                 notice beverly raised peter quan rent march chapter   ch16       input expense beverly types sample interaction enter month enter day  enter expense category repairing utilities utilities enter payee bob hardware big electric enter  to display expense report type report payee category   megabank   mortgage   city water   utilities   steady state   insurance     utilities   sam hardware   supplies   ernie glotz   repairs   megabank   mortgageto display annual report beverly enters partial version covering months year annual summary incomerents  expensesadvertising   insurance   mortgage   repairs   supplies   utilities  balance  the expense categories sorted alphabetical order real situation budget categories including legal fees taxes travel expenses landscaping cleaning maintenance costs final thoughtsin real project size development process smoothly portrayed chapter iterations phases programmers confused users intended requir ing return elaboration phase midst construction phase users maychange minds late process requiring return earlier phases object oriented software development object orientedsoftware development84317  ch16       summarytrial error sufficient simple software development complex projects organized approach chapter methodology unified process consists inception elaboration construction transi tion phases elaboration corresponds program analysis construction corresponds design writing code unified process case approach capture program users actors tasks cases program carry uml case diagram actors cases case descriptions noun candidate class class attribute verbs class member functions called operations methods addition case diagram uml diagrams facilitate understanding program users developers relationships classes class dia gram flow control activity activity diagrams sequence diagrams depict communication objects case questionsanswers questions appendix  true false case approach concerned methods class  cases things summarize problems encountered program code discover constructors class select class attributes deduce classes program  case basically ________  true false case diagram created cases cod ing begun  case description written ____________  actor interacts developed software entity helps developer solve coding problem person interacts developed designer chapter   ch16        classes g________ a_________ a___________  waterfall process consists distinct phases ver untenable water shortages direction  true false uml unified process  classes program correspond nouns case descriptions cases associations uml diagram names famous programmers  true false vague general entities case descriptions good candidates classes program  true false entities single attribute methods good candidates classes  unified process happen time time case diagram drawn users cases class diagram drawn case descriptions written code written class diagram complete header file class declarations changed methods coded  actors ________or ________ interact ________  landlordprogram stl container classes represented case diagrams good place store expenses object oriented language good place hide method bodies  class method definitions header file header file distributed customers distributed customers object oriented software development object orientedsoftware development84517  ch16        true false attribution major class relationships  assume association class aand class objais object ofclassa objbis object class applies objamay send message objb ass bmust subclass class vi versa objbmust attribute class vi versa objbmay objacarry task  landlordprogram generalization ass ociation insubordination aggregation  true false class diagram association relationship objects  sequence diagram time left ass ociations left horizontal arrows represent messages vertical dotted lines represent lifetime  sequence diagram messages ________to  true false sequence diagram describes single case  sequence diagram class instance created rectangle drawn vertical coordinate lar marks point time activity box lifeline projects room book exercises involving kind projects involved chapter list suggestions projects pursue  reread explanation horseprogram chapter  pointers notlook code create case diagram class diagram program theresults create hfile compare program correct chapter   ch16        reread explanation elevprogram chapter  multifile programs donotlook code create case diagram class diagram program create hfiles compare program  create case diagram class diagram business situation familiar horse trading software consulting dealing rare comic books  create case diagram class diagram program wanted write time simple word processing program game genealogical program enter ancestors displays family tree object oriented software development object orientedsoftware development84717  ch16         ch16       appendixaascii chart18  app       appendix a850tablea ibm character codesdechexsymbolkeyuse  null ctrl   actr a202 bctrl b303 cctrl c404 dctrl d505 ectrl e606 fctrl f707 gctrl gbeep  hbackspacebackspace  itabtab a jctrl jlinefeed b kctrl kvertical tab c lctrl lform feed d mentercarriage return e nctrl n150f octrl o1610 pctrl p1711 qctrl q1812 rctrl r1913 sctrl s2014 tctrl t2115 uctrl u2216 _ctrl v2317 wctrl w2418 xctrl x2519 yctrl y261a zctrl z271b aesc281c bctrl d cctrl e dctrl f ectrl   app       spacebar          a b c d e f           a b c d e f ascii chartaascii chart tablea continueddechexsymbolkeyuse   app        aa bb cc dd ee ff gg hh ii ajj bkk cll dmm enn foo pp qq rr ss tt uu vv ww xx yy azz b c d e f__ appendix a852tablea continueddechexsymbolkeyuse   app        aa bb cc dd ee ff gg hh ii ajj bkk cll dmm enn foo pp qq rr ss tt uu vv ww xx yy azz b c d e f fctrlascii chartaascii chart tablea continueddechexsymbolkeyuse   app       äalt  üalt  éalt  éalt  äalt  àalt  åalt  çalt  êalt  ëalt  aèalt  bïalt  cîalt  dìalt  eäalt  fåalt  éalt  æalt  æalt  ôalt  öalt  òalt  ûalt  ùalt  ÿalt  öalt  aüalt  bõalt  c alt  d alt  eûalt  füalt  appendix a854tablea continueddechexsymbolkeyuse   app       a0áalt  a1íalt  a2óalt  a3úalt  a4ñalt  a5ñalt  a6 aalt a7 oalt a8 alt a9 alt aa alt ab alt ac alt ad alt  ae alt  af alt  b0 alt b1 alt b2 alt b3 alt b4 alt b5 µalt b6 alt b7 alt b8 alt b9 alt ba alt bb ªalt bc ºalt bd alt be æalt bf alt ascii chartaascii chart tablea continueddechexsymbolkeyuse   app       c0 alt c1 alt c2 alt c3 alt c4 ƒalt c5 alt c6 alt c7 alt c8 alt c9 alt ca galt cb àalt cc ãalt cd õalt ce œalt cf œalt d0 alt d1 alt d2 alt d3 alt d4 alt d5 alt d6 alt d7 alt d8 ÿalt d9 ÿalt da alt db alt dc alt dd alt de ﬁalt df ﬂalt appendix a856tablea continueddechexsymbolkeyuse   app       e0 alt e1 alt e2 alt e3 alt e4 alt e5 âalt e6 µalt e7 ˇalt e8 ëalt e9 alt ea alt eb îalt ec ïalt ed alt ee alt ef ôalt f0 alt f1 alt  f2 alt f3 alt f4 ùalt f5 ıalt f6 alt  f7 alt f8 alt  f9 alt  fa alt  fb alt fc alt fd alt fe alt ff blank alt  ascii chartaascii chart tablea continueddechexsymbolkeyuse   app       key sequences consisting ctrl typed pressing ctrl key held pressing key sequences based defined personal computer series keyboards key sequences defined differently keyboards ibm extended ascii characters displayed pressing alt key typing code character keypad appendix a85818  app       appendixbc precedence table keywords   app       appendix b860precedence table precedence table complete version chapter  includes bitwise operators book loaded stream input output operator typeoperators scope vari ous dot postfix unaryprefix arithmeticmultiplicative additive bitwise shifts relationalinequality equality bitwise logic logical conditional assignment sequence comma keywords keywords implementspecific language features names vari ables user defined program elements keywords common specific compilers support additionalkeywords underscores _cdeclor__int16 asmautoboolbreakcasecatch char class const const_cast continue19  app       defaultdelete double dynamic_castelseenum explicit export externfalsefloat friendgotoifinline intlongmainmutablenamespacenewoperatorprivateprotected publicregisterreinterpret_cast returnshortsigned sizeof static static_cast struct switchtemplatethisc precedence table keywords precedencetableand keywords86119  app       throwtrue typedef typeid typenameunionunsigned usingvirtualvoid volatilewchar_twhileappendix b86219  app       appendixcmicrosoft visual appendix screen elements864 ngle file programs864 multifile programs866 building console graphics lite programs868 debugging868   app       appendix c864this appendix tells microsoft visual mvc create console mode applications kind applications book discussion based mvc version   version mvc good perfect adherence standard invarious versions including student version  assume mvc installed start windows start button navigating menu item file extensions cpp operating mvc inwindows explorer option hide dos file extensions file types registered checked screen elements mvc window initially divided parts left view pane tabs classview fileview project classview tab class hierarchy program fileview files project click signs expand hierarchies double click file open largest screen holds document window pur poses including displaying source files contents files screen long window tabs build debug display mes sages performoperations compiling program single file programs easy build execute single file console program microsoft visual possibilities file exists file written case making project open discuss projects moment click file menu close workspace item active grayed click close current workspace building existing fileif cppsourcefile exists programs book select open file menu note open workspace open dialog box navigate file select click open button file document window compiling program console graphics lite circstrcprogram chapter  functions circlesprogramin chapter  objects classes turn building console graphics lite programs   app       compile link source file select build build menu dialog box create default project workspace click file compiled linked library files program select execute build menu console window program output displayed program terminates phrase press key continue compiler arranges phrase inserted termination program console display screen long program output program close workspace selecting close workspace file menu answer asked close document windows programs directly fromms dos start box dos clicking start button selecting programs dos prompt item window called prompt letter current directory navigate directory typing change directory directory exefiles programs compiled mvc areplaced directory called debug subdirectory holding projectfiles execute program including examples book directory exefile enter program extension dos prompt aboutms dos windows writing fileto startwriting cppfile mvc close open workspace select file menu click files tab select source file type file type path location box navigate directory file click blank document window type program window save file selecting save file menu select build build menu click response default workspace question program compiled linked errors areerrors build window screen click build tab window double click error arrow error source file position cursor error number build window c2143 press f1 key explanation error document window correct errors repeat build process message reads  error  warning execute pro gram select execute build menu microsoft visual cmicrosoftvisualc   app       common error writing program forgetting statement namespace std leave compiler complain recognize cout endl andso starting work program forget select close workspace file menu ensures clean workspace open program built select open workspace file menu navigate directory double click file dswexten sion time type rtti programs empl_io cppin chapter  streams files rtti mvc enable compiler option feature work select settings project menu click tab category list box select language click check box named enable time type click avoid compiler linker errors misleading multifile programs quick dirty approach building programs approach works file programs projects file things plicated start reviewing meant terms workspaceandproject projects workspaces mvc usesa concept called workspace level abstraction higher project workspace projects consists directory configu ration files project directory files projects simply residein workspace directory conceptuallyit easiest small programs book assume project separate workspace assume discussion project corresponds application program developing consists files needed create application files combined result building project single exefile user execute suchas dllfiles appendix c86620  app       developing project assumethat files include project exist directory select file menu click projects tab dialog box select win32 console application list location box type path directory notinclude directory type directory files project box clicking button location field navigate directory delete directory location field create workspace box checked click files book ch13 elev type book ch13 thelocation field elevin project field type project automatically location location book ch13 elev elev dialog appears project button selected click finish click dialog box point project oriented files extensions dsp dsw directory debug subdirectory hold final exefile adding source files add source files project includes cppfiles hfiles view file tab select add project project menu click files select files add click review files selected clicking fileview tab sign project class structure complete member functions attributes clicking theclassview tab open file modify double click file icon fileview win dow select open file menu select file locating header filesyour project header files hextension msoftcon hin pro grams console graphics lite project view file tab compiler directory source files problem compiler select options tools menu click directories tab select include files directories list directories hold compiler include files double click dotted box list navigate directory taining header file button appears dotted box replaced pathname click alternatively type complete pathname directory location box microsoft visual cmicrosoftvisualc   app       saving closing opening projects save theproject select save workspace close project select close workspace answer close document windows query open existing project select open workspace file menu navigate proper directory selectthe dswfile click open compiling linkingas fileprograms easiest compile link multifile program select execute build menu alternatively compile link project running selecting build buildmenu building console graphics lite programs building programs console graphics lite functions appendix console graphics lite requires steps addition needed ordinary programs files msoftcon handmsoftcon cpp files specific book publisher web site mentioned introduction open source file program building existing file file include include msoftcon select build build menu answer asked create default project workspace project created compiler complain msoftcon file declarations graphics functions easy solution copy msoftcon hinto project directory elegant approach compiler file follow instructions ear lier locating header files building file time compiler header file numerous linker errors linker definitions graphics functions code msoftcon cpp add file project steps earlier adding source files program compile link correctly select execute build menu debuggingin chapter  loops decisions debugger toprovide insight loops work microsoft visual steps debug program behaves incorrectly discussing file programs approach applies variations larger multifile programs appendix c86820  app       start building program compiler linker errors program listing displayed theedit window single steppingto start thedebugger simply press f10 key yellow arrow margin listing pointing opening brace main start program position cursor start debugging debug menu replaces build menu debugging select start debug cursor yellow arrow statement selected press f10 key debugger step executable statement yellow arrow press f10 moves statement loop yellow arrow statementsin loop jump loop watching variables watch values program variables change single step program click locals tab window left screen values local variables auto tab compiler selection variables selection watch variables enter watch window corner screen click variable source code pop menu select quickwatch menu quickwatch dialog box click add watch variable current watch window variable scope defined watch win dow error message variablename stepping functionsif programuses functions step intothem single step statementswithin function f11 key contrast f10 key steps function calls treats single statement f11 trace library routines cout trace source code library routine lengthy process avoid interested switch judiciously f11 f10 depending explore function sinner workings microsoft visual cmicrosoftvisualc   app       breakpoints breakpoints program arbitrary location execute program cursor location selecting cursor times program mul tiple locations ifand corre spondingelse breakpoints solve problem insert advanced features insert breakpoint listing position cursor breakpoint click mouse button menu select insert remove breakpoint red circle left margin program speed selecting debug break point examine variables single step thecode break point remove breakpoint click select remove breakpoint menu features debugger discussed started appendix c87020  app       appendixdborland builderin appendix running programs builder872 cleaning screen873 creating project873 naming saving project874 sta rting existing files875 compiling linking executing875 adding header file project876 projects multiple source files877 console graphics lite programs878 debugging878   app       appendix d872this appendix tellsyou borland builder create console mode applications kind applications book builder borland advanced development product writing product adheres closely standard student version  free compiler download borland web site usenotepad text editor write source files dis cussion based builder   assume builder installed start windows start button navigating menu item builder wantto file extensions cpp operating builder windows explorer option hide dos file extensions file types registered isnot checked running programs builder programsin book require minor modifications builder quick summary compile programs modification windows dos window start programs dos prompt builder command menu insert statement program console window screen long steps insert statement getch final returnstatement main thisenables program output insert statement include conio main forgetch program building console graphics lite functions appendix console graphics lite additional steps summarized appendix balance appendix cover points builder edit compile link execute console mode programs   app       cleaning screen started builder screen objects console mode programs window called form1 click close ton upper corner likewise object inspector click close button rid items time start builder remove form1 window window code called code editorwindow source files write programs starts file called nit1 click close button window answer dialog asks save builder starts toolbars standard debug toolbars rid selecting toolbars view menu unchecking toolbars creating project builder modern compilers thinks terms projects creating programs project consists source files kinds files concerned resource files definition files result project single exefile user execute project select file menu dialog box called items click tab double click console wizard icon dialog box source type console application checked uncheck vcl multi threaded project source click click dialog asks save roject1 source file code editor window pragma hdrstop pragma argsusedint main int argc char argv return  borland builderdborlandc builder87321  app       skeleton version console mode program lines program add add statement print text program works result test1 cpp include iostream include conio namespace std pragma hdrstop needed pragma argsused neededint main arguments needed cout happy programs compile time getch return  pragmas arguments main original skeleton program modifications sole window remain visible long tosee fixed inserting statementgetch program return program wait keystroke console window remains view press key getch function requirestheconio hheader file include program creating program start skeleton program modify starting existing file read starting existing files naming saving project tosave rename source file project compiler auto matically names source file unit1 cpp save rename select save file menu navigate directory project file keeping cppexten sion click save project recorded file extension bpr save project saving cppfile files bprfile cre ate project called roject1 higher number appendix d87421  app       save project change select save project file menu navigate directory store file type project bprextension click save starting existing fileshere create project source file exists examples book assuming downloaded discussion applies programs single source file assume source file named myprog cpp file directory build select open file menu select file press open file appears code editor window dialog box asks create pro ject file compile answer project created rename project select save project file menu replace project1 bprname project program myprog bpr click save thereis compiling linking executingto build executable program select build project menu cppfile compiled objfile objfile linked library files exefile compiling myprog cpp result bemyprog exe compiler linker errors displayed edit program eliminated executing builder modifiedyour program inserting getch earlier compile link program directly builder simply selecting menu errors console window output pro gram executing dos alsorun programs directly dos windows box dos clicking start button selecting programs dos prompt item window called prompt letter current directory navigate directory typing change directory directory execute program including examples book directory borland builderdborlandc builder87521  app       exefile type program extension dos windows precompiled header files speed compilation dramatically selecting options project menu select ing compiler tab clicking precompiled headers short program compile time spent compiling header files iostream theprecompiled headers option header files compiled insteadof time compile program closing opening projects witha project close selecting close file menu open saved project select open project file menu navigate bprfile double click adding header file project programs employ user written header files addition library header files iostreamandconio create header file creating header file select file menu tab selected double click text icon code editor window file titled file1 txt type text file save save file menu hfileextension save file source cpp files filename tab files code editor window switch file file click ing thetabs editing existing header fileto open existing header file select open file menu select file files type list select header file list write includestatement header file cppfile enclose filename quotes include myheader quotes compiler header file directoryas source files appendix d87621  app       telling builder header file location adda hfile compiler directory files hfile directory builder true borlacon hfile console mode graphics copy project file options project menu select directories conditionals tab directories click button dots include path list directories dialog box field directories dialog box type complete pathname directory hfile located click add button place path list include paths click close dialog boxes add header files project add project option project menu projects multiple source files real applications andsome programs book require multiple source cpp files incidentally builder source files called units term specific product development environments files called files modules creating additional source files makeadditional cppfiles header files select file double click text icon dialog box type source code save save file save select builder unit cpp save file type list automatically supply cppextension type fail simply type cppafter file recog nized builder unit adding existing source files project created source file exist borlacon cpp console graphics lite programs add source file project select add project project menu navigate directory select filename list click open tells builder project multiple source files displayed tabs edit window size win dows switch file open close files individually screen time borland builderdborlandc builder87721  app       project manager source files project selecting project manager view menu diagram file relationships windows explorer clicking sign project icon display project source files file project click file project manager context menu choices include open save save compile handy perform tasks indi vidual source files multifile program compile individual files separately selecting compile unit project menu compile link source files selecting project menu source files changedsince pre vious compile recompiled console graphics lite programs buildprograms console graphics lite package includes programs circstrcfrom chapter  functions circlesin chapter  objects classes create project earlier program project ith bprexten sion source file change include msoftcon include borlacon copy borlacon handborlacon cppinto project file compiler header file located earlier add source file borlacon cppto project instructions earlier appendix titled adding existing source files project display screen insert getch returnstate ment main support getch ins ert include conio program compile link execute console graphics lite programs pro grams debuggingin chapter  loopsand decisions debugger provide insight loops work builder steps debug appendix d87821  app       program behaves incorrectly discussing file programs approach applies variations large multifile programs start building program compiler linker errors program listing displayed theedit window single steppingto start debugger press f8 key program recompiled program main declarator highlighted repeated presses f8 control statement program turn enter loop highlighting loop return loopfor cycle watching variables values variables change single step program select add watch menu watch properties dialog box type variable watch expression field dialog box select appro priate variable type click window called watch list repeatedly add watch dialog box add variables watch list position edit window watch list time watch variables change single step program variable scope defined watch list error message variable case cubelistprogram watch mechanism recognize validity cubevariable defined loop rewrite program defined loop displayed properly onthe watch list tracing functionsif program functions trace single step statementswithin function f7 key f8 key steps function calls treats asingle statement f7 trace library routines cout tracethrough source code library routine lengthy process avoid interested switch judiciously f7 f8 depending explore function workings breakpoints breakpoints allowyou program arbitrary location execute program cursor location selecting borland builderdborlandc builder87921  app       cursor menu times program multiple locations ifand alsoafter breakpoints solve problem insert advanced features inserting breakpoint listing easy program listing edit window dot left margin opposite executable program simply left click dot insert breakpoint red circle left margin program highlighted program speed selecting menu breakpoint examine variables single step code breakpoint remove breakpoint left click vanish features debugger started appendix d88021  app       appendixeconsole graphics litein appendix console graphics lite routines882 console graphics lite functions883 implementations console graphics litefunctions884 source code listings885   app       appendix e882it nice enliven programs graphics included graphics based examples book standard include graphics specifications prohibit graphics windows supports kinds graphics microsoft visual borland library functions graphics avoid versions graphics gain extra capability set graphics functions called console graphics lite functions translated microsoft version borland version depending files build program msoftcon handmsoftcon cppfor microsoft borlacon handborlacon cppfor borland files microsoft compiler work compilers files console graphics lite downloaded publisher web site downloaded source files programs graphics files introduction instructions downloading listings files appendix graphics routines console graphics console character mode screen typically arranged  columns  rows graphics programs book write text console window console program window windows standalone dos program console graphics rectangles circles characters ter small character size block pixels crude work fine demonstration programs console graphics lite routinesto build exampleprogram graphics add steps normal build procedure include header file msoftcon horborlacon source cpp file program add source file msoftcon cpporborlacon cpp project linked program compiler header file source file header files declarations console graphics lite functions source files definitions functions compile source file link objfile rest program automatically build process add source file project   app       learn add file project read appendix microsoft visual appendix borland builder apply process source file compiler header file add pathname located directories option compiler refer appendix tosee simply graphics examples book console graphics lite programs read console graphics lite functionsthe console graphics lite functions assume console screen  columns  rows upper left corner defined point   lower corner point   functions designed programs book robust sophisticated programs care ful draw shapes confines   character screen useinvalid coordinates behavior undefined table  lists functions tablee functions console graphics litefunction namepurpose init_graphics initializes graphics systemset_color sets backgroundand foreground colors set_cursor_pos puts cursor specific row column clear_screen clears entireconsole screen wait pauses program millisecondsclear_line clears entire linedraw_rectangle specifies left draw_circle specifies center radius draw_line specifiesend points y1 draw_pyramid specifiestop height set_fill_style specifies character init_graphics beforeyou graphics functions function sets character microsoft version initializes essential parts console graphics console graphics liteeconsolegraphicslite88322  app       theset_color functioncan arguments sets foreground color characters displayed subsequently sets background color character background black set_color cred sets foreground redset_color cwhite cblue foreground white background bluehere list color constants foreground background color constantsfor set_color cblackcdark_blue cdark_green cdark_cyan cdark_red cdark_magenta cbrown clight_grayappendix e884cdark_gray cblue cgreen ccyan cred cmagenta cyellow cwhitethe functions draw_create shapes lines special character called thefill character character set solid block default modified set_fill_style function solid block uppercase charac ters shaded block characters list constants constants set_fill_style solid_fill x_fill o_filllight_fill medium_fill dark_fillthewait function takes argument milliseconds pauses oftime wait  pauses  secondsthe functions explanatory operation thoseexamples graphics implementations console graphics litefunctionsthese routines console graphics lite object oriented written real reason study interested quick dirty approach graphics operations drawing lines circles   app       idea create minimum routines job examine source files appendix recurious microsoft compilers microsoft compilers nolonger include console graphics routines sev eral years ago windows set routines simple console graphics operations positioning cursor changing text color microsoft pilers console graphics lite functions access built windows console functions andré lamothe suggesting solution excellent game book listed appendix bibliography console graphics functions project type win32 console application appendix windows console functions work initialize console graphics calling init_graphics functionis essential microsoft compiler borland compilersborland built graphics functions console mode graphics pixel graphics borlacon cppfile console graphics lite functions translated borland console functions closely resemble borland compiler access console functions built windows problem create console mode program borland easywin dos target  bit systems windows console functions  bit functions borland console mode borland iostreamapproach cout produce differ ent colors programs horse cpp console mode functionssuch cputs andputch conio hfile source code listings listings files console graphics lite msoftcon handmsoftcon cppfor microsoft borlacon handborlacon cppfor builder reason worry internals files reference console graphics liteeconsolegraphicslite88522  app       listing msoftcon msoftcon declarations lafore console graphics functions window console functions ifndef _inc_wconsole file included define _inc_wconsole source file include windows windows console functions include conio kbhit getche include math sin cosenum fstyle solid_fill x_fill o_fill light_fill medium_fill dark_fill enum color cblack  cdark_blue  cdark_green  cdark_cyan  cdark_red  cdark_magenta  cbrown  clight_gray  cdark_gray  cblue  cgreen  ccyan  cred  cmagenta  cyellow  cwhite  void init_graphics void set_color color fg color bg cblack void set_cursor_pos int int void clear_screen void wait int milliseconds void clear_line void draw_rectangle int left int int int void draw_circle int int int rad void draw_line int int y1 int int void draw_pyramid int int y1 int height void set_fill_style fstyle endif _inc_wconsole listing msoftcon cpp msoftcon cpp routines access windows console functions compiler file mcv tools options directories include type path include msoftcon handle hconsole console handle char fill_char character appendix e88622  app       void init_graphics coord console_size   open channel console screen hconsole createfile conout generic_write generic_read file_share_read file_share_write l open_existing file_attribute_normal l set x25 screen size setconsolescreenbuffersize hconsole console_size set text white black setconsoletextattribute hconsole word    fill_char xdb default solid blockclear_screen void set_color color foreground color background setconsoletextattribute hconsole word background  foreground setcolor  black  dark gray1 dark blue  blue  dark green  green  dark cyan  cyan  dark red  red  dark magenta  magenta  brown  yellow  light gray  white void set_cursor_pos int int coord cursor_pos origin upper left corner cursor_pos  windows starts   cursor_pos  start   setconsolecursorposition hconsole cursor_pos void clear_screen set_cursor_pos   int   putch set_cursor_pos   console graphics liteeconsolegraphicslite88722  app       void wait int milliseconds sleep milliseconds void clear_line clear  spaces       cputs cputs void draw_rectangle int left int int int char temp  int width left  int  width string squarestemp fill_char temp  null int stack strings set_cursor_pos left cputs temp void draw_circle int xc int yc int radius double theta increment   int yn increment   static_cast double radius theta  theta  theta increment quarter circle radius cos theta static_cast int   pixels square yn static_cast int radius sin theta   xc xc horizontal lines half circle set_cursor_pos yc yn putch fill_char set_cursor_pos yc yn putch fill_char appendix e88822  app       void draw_line int int y1 int int int w1 w2 z1 z2 double xdelta ydelta y1 slope bool ismorehoriz fabs xdelta fabs ydelta horizontal ismorehoriz true slope ydelta xdelta w1 z1 y1 w2 z2 vertical ismorehoriz false slope xdelta ydelta w1 y1 z1 w2 z2 w1 w2 backwards w1 w1 w2 w2 swap w1 z1 z1 z1 z2 z2 w2 z2 w1 w2 static_cast int z1 slope w1   avoid scroll   ismorehoriz set_cursor_pos elseset_cursor_pos putch fill_char void draw_pyramid int int y1 int height int y1 y1 height console graphics liteeconsolegraphicslite88922  app       int incr y1 incr incr set_cursor_pos putch fill_char void set_fill_style fstyle switch case solid_fill fill_char xdb break case dark_fill fill_char xb0 break case medium_fill fill_char xb1 break case light_fill fill_char xb2 break case x_fill fill_char break case o_fill fill_char break listing borlacon borlacon declarations console graphics lite functions borland console functions ifndef _inc_wconsole file included define _inc_wconsole source file include windows sleep include conio kbhit getche include math sin cosenum fstyle solid_fill x_fill o_fill light_fill medium_fill dark_fill enum color cblack  cdark_blue  cdark_green  cdark_cyan  cdark_red  cdark_magenta  cbrown  clight_gray  cdark_gray  cblue  cgreen  ccyan  cred  cmagenta  cyellow  cwhite  void init_graphics void set_color color fg color bg cblack void set_cursor_pos int int appendix e89022  app       void clear_screen void wait int milliseconds void clear_line void draw_rectangle int left int int int void draw_circle int int int rad void draw_line int int y1 int int void draw_pyramid int int y1 int height void set_fill_style fstyle endif _inc_wconsolelisting borlacon cpp borlacon cpp drawing routines borland console functions include borlacon char fill_char character void init_graphics textcolor white text white black textbackground black fill_char xdb default solid block clrscr void set_color color foreground color background textcolor static_cast int foreground textbackground static_cast int background void set_cursor_pos int int gotoxy void clear_screen clrscr void wait int milliseconds sleep milliseconds console graphics liteeconsolegraphicslite89122  app       void clear_line clear  spaces       cputs cputs clreol void draw_rectangle int left int int int int char temp  int width left   width string squarestemp fill_char temp  null int stack strings set_cursor_pos left cputs temp rectangle void draw_circle int xc int yc int radius double theta increment   int yn increment   static_cast double radius theta  theta  theta increment quarter circle radius cos theta static_cast int   pixels square yn static_cast int radius sin theta   xc xc horizontal lines half circle set_cursor_pos yc yn putch fill_char set_cursor_pos yc yn putch fill_char circle void draw_line int int y1 int int appendix e89222  app       int w1 w2 z1 z2 double xdelta ydelta y1 slope bool ismorehoriz fabs xdelta fabs ydelta horizontal ismorehoriz true slope ydelta xdelta w1 z1 y1 w2 z2 vertical ismorehoriz false slope xdelta ydelta w1 y1 z1 w2 z2 w1 w2 backwards w1 w1 w2 w2 swap w1 z1 z1 z1 z2 z2 w2 z2 w1 w2 static_cast int z1 slope w1   avoid scroll   ismorehoriz set_cursor_pos elseset_cursor_pos putch fill_char void draw_pyramid int int y1 int height int y1 y1 height int incr y1 incr incr console graphics liteeconsolegraphicslite89322  app       set_cursor_pos putch fill_char void set_fill_style fstyle switch case solid_fill fill_char xdb break case dark_fill fill_char xb0 break case medium_fill fill_char xb1 break case light_fill fill_char xb2 break case x_fill fill_char break case o_fill fill_char break appendix e89422  app       appendixfstl algorithms memberfunctionsin appendix algo rithms896 member functions907 iterators909   app       appendix f896this appendix charts showing algorithms container member functions avail standard template library stl based standard template library alexander stepanovand ming lee  extensively densed revised liberties original formulation quick understanding algorithmstable  algorithms stl descriptions table offer quick condensed explanation algorithms intended mathematical definitions including exact data types argu ments return values consult books listed appendix bibliography column function explains purpose algorithm specifies arguments return values systematically mentioned purpose column obvious vital algo rithm arguments column names first1 last1 first2 last2 first3 andmiddlerepresent iterators specific places container names numbers first1 distinguish multiple containers first1 last1delimits range  first2 last2delimits range  arguments function predicate compare func tion objects arguments initare values objects stored container values ordered compared based operators compfunction object argument nis integer purpose column moveable iterators iter iter1 iter2 wheniter1anditer2are assumed step step respective containers ranges container tablef  algorithmsnamepurposearguments mutating sequence operationsfor_eachappliesfunctionto eachfirst functionobject findreturns iterator valueobjectequal find_ifreturnsiterator object predicatefirst predicateis true   app       adjacent_findreturns iterator lastadjacent pair objectsthat equal adjacent_findreturns iterator predicateadjacent pair objects satisfy predicate countadds nthe number offirst nobjects equal count_ifadds nthe number offirst predicate nobjects satisfying predicate mismatchreturns equal pair first1 last1 first2of objects ranges mismatchreturns pair first1 last1 first2 objects inpredicatetwo ranges satisfypredicate equalreturns trueif first1 last1 first2objects ranges equal equalreturns true correspondingfirst1 last1 first2 objects ranges predicatesatisfypredicate searchchecks whethersecond range first1 last1 first2 contained last2returns start match last1if match searchchecks range isfirst1 last1 first2 contained last2 predicatewhere equality determined bypredicate returnsstart match last1if match mutating sequence operationscopycopies objects range first1 last1 first2to range  stl algorithms member functions fstl algorithmsandmemberfunctions897tablef  continuednamepurposearguments   app       copy_backwardcopies objects range first1 last1 first2to range  inserting backwards last2tofirst2 swapinterchanges objects biter_swapinterchangesobjects pointed iter1 iter2to iterators swap_rangesinterchanges correspondingfirst1 last1 first2elements ranges transformtransformsobjects range first1 last1 first2  objects range operator2 applying operator transformcombines objects range first1 last1 first2 range  objects first3 operatorin range  byapplying operator replacereplaces objects equalfirst newtooldwith objects equaltonew replace_ifreplacesall objects predicate satisfypredicatewithnewobjects equal replace_copycopies range  tofirst1 last1 first2 range  replacing newobjects equal oldwithobjects equal replace_copy_ifcopies range  rangefirst1 last1 first2  replacing objects predicate newsatisfypredicatewithobjects equal fillassignsvalueto allfirst valueobjects range fill_nassignsvalueto allfirst valueobjectsfrom firsttofirst appendix f898tablef  continuednamepurposearguments   app       generatefills rangewith values gengenerated successive calls function gen generate_nfills firsttofirst nfirst genwith values generated successive calls functiongen removeremovesfrom range valueobjects equal remove_ifremoves fromrange predicateobjects satisfypredicate remove_copycopies objects excepting first1 last1 first2 equal valuefrom range  range  remove_copy_ifcopiesobjects excepting first1 last1 first2 satisfying pred predfrom range  range  uniqueeliminatesall lastobject consecutive sequence equal objects uniqueeliminates predicateobject consecutive sequence objects satisfyingpredicate unique_copycopies objectsfrom range  first1 last1 first2to range  object consecutive sequence equal objects copied unique_copycopiesobjects range  first1 last1 first2 range  predicatefirst object consecutive sequence objects satisfyingpredicateiscopied stl algorithms member functions fstl algorithmsandmemberfunctions899tablef  continuednamepurposearguments   app       reversereverses sequence lastobjects range reverse_copycopies range1 range  first1 last1 first2reversing sequence objects rotaterotates sequence offirst middleobjects iteratormiddle rotate_copycopiesobjects range  first1 middle1 last1 range  rotating first2sequence iteratormiddle1 random_shufflerandomly shuffles objects lastin range random_shufflerandomly shuffles objects randin range random numberfunction rand partitionmoves objects predicatesatisfypredicateso precede satisfy stable_partitionmoves allobjects predicatesatisfypredicatesothey precede preserves relative ordering groups sorting operationssortsorts objectsin range lastsortsorts elements range compcompas comparisonfunction stable_sortsorts objects range lastmaintains order equal elements stable_sortsortselements range compusingcompas comparisonfunction maintains order equal elements appendix f900tablef  continuednamepurposearguments   app       partial_sortsorts objects range middle lastplaces sorted values fit firstandmiddle order objectsbetweenmiddleandlastisundefined partial_sortsorts objects range middle places sorted values predicateas fit firstandmiddle order objectsbetweenmiddleandlastisundefined predicateto define ordering partial_sort_copysame aspartial_sort first1 last1 first2 middle places last2resulting sequence range2 partial_sort_copysame partial_sort first1 last1 first2 middle predicate last2 compbut places resultingsequencein range  nth_elementplaces thenth object nth lastthe position occupy range sorted nth_elementplaces nth object thefirst nth compposition occupy range sorted usingcompforcomparisons lower_boundreturns iterator valueposition valuecould inserted violating ordering lower_boundreturns iterator compposition valuecould inserted violating ordering based oncomp stl algorithms member functions fstl algorithmsandmemberfunctions901tablef  continuednamepurposearguments   app       upper_boundreturns iterator lastfirst valueposition valuecould inserted withoutviolating ordering upper_boundreturnsiterator compposition valuecould inserted violating ordering based oncomp equal_rangereturns apair valuelower bound upper bound valuecouldbe inserted violating ordering equal_rangereturns pair containingfirst compthe lower bound upper bound valuecould inserted violating anordering based oncomp binary_searchreturnstrue valueis infirst valuethe range binary_searchreturns true valueisfirst compin range ordering isdetermined comp mergemergessorted ranges  first1 last1 first2  sorted range  last2 first3mergemerges sorted ranges   first1 last1 first2 sorted range  last2 first3 compthe ordering determined bycomp inplace_mergemerges twoconsecutive middle lastsorted ranges middleandmiddle lastintofirst appendix f902tablef  continuednamepurposearguments   app       inplace_mergemerges consecutive middle compsorted ranges middleandmiddle lastintofirst theordering based comp includesreturnstrue object first1 last1 first2 range first2 last2last2 range first1 last1 sets multisetsonly includesreturns true object first1 last1 first2 range first2 last2last2 compis range first1 last1 ordering isbased comp sets andmultisets set_unionconstructssorted union first1 last1 first2 elements ranges   last2 first3 sets multisets set_unionconstructs sorted union offirst1 last1 first2 elements ranges   last2 first3 compwhere ordering basedoncomp sets andmultisets set_intersectionconstructssorted first1 last1 first2 intersection elementslast2 first3of ranges   sets multisets set_intersectionconstructs sortedfirst1 last1 first2 intersection elementslast2 first3 compof ranges   ordering based oncomp sets andmultisetsonly set_differenceconstructssorted difference first1 last1 first2 elements ranges  andlast2 first32 sets multisets stl algorithms member functions fstl algorithmsandmemberfunctions903tablef  continuednamepurposearguments   app       set_differenceconstructssorted difference first1 last1 first2 elements ranges  andlast2 first3 comp2 ordering based comp sets andmultisets set_symmetric_constructssorted symmetric first1 last1 first2 differencedifference elements last2 first3ranges   sets multisets set_ symmetric_constructs sorted difference first1 last1 first2 differenceof elements ranges  andlast2 first3 comp2 ordering based comp sets andmultisetsonly push_heapplaces intofirst lastresulting heap range push_heapplaces first compinto heap rangefirst based onordering determined comp pop_heapswaps values firstfirst lastandlast  range into heap pop_heapswaps values firstfirst compandlast  range into heap based ordering determined comp make_heapconstructs aheap lastrangefirst make_heapconstructs heap thefirst comprangefirst based onthe ordering determined bycomp sort_heapsorts elements thefirst lastheapfirst appendix f904tablef  continuednamepurposearguments   app       sort_heapsorts elements thefirst compheapfirst based onthe ordering determined bycomp minreturns smaller bobjects minreturns smaller compobjects ordering determined comp maxreturnsthe larger bobjects maxreturns larger compobjects ordering determined comp max_elementreturns aniterator lastlargest object range max_elementreturns iterator thefirst complargest object range ordering determined comp min_elementreturns iterator thefirst lastsmallest object range min_elementreturns iterator tofirst compthe smallest object range ordering determined bycomp lexicographical_returns trueif first1 last1 first2 comparesequence range  comeslast2before thesequence range  alphabetically lexicographical_returns true thefirst1 last1 first2 comparesequence range  comeslast2 compbefore sequence range  alphabetically based ordering determined comp stl algorithms member functions fstl algorithmsandmemberfunctions905tablef  continuednamepurposearguments   app       next_permutationperforms permutationfirst laston sequence therange next_permutationperforms onepermutation compon sequence range ordering determined comp prev_permutationperformsone reverse lastpermutation sequence range prev_permutationperforms reverse comppermutation sequence range ordering determined comp generalized numeric operationsaccumulatesequentially appliesfirst initinit init iterto object therange accumulatesequentially appliesfirst init init init iter object therange inner_productsequentiallyapplies first1 last1 init init iter1 iter2 first2 initto values ranges   inner_productsequentially applies first1 last1 init op1 init op2 iter1 iter2 first2 init op1 values op2from ranges1  partial_sumadds valuesfrom start first1 last1 range  current iterator first2and placesthe sums iterator range  iter2 sum first1 first1  first1  iter1 appendix f906tablef  continuednamepurposearguments   app       partial_sumsequentially applies optofirst1 last1 objects first1andfirst2 opcurrent iterator range  places iterator range  answer iter  iter iter1 iter answer iter iter2 answer adjacent_subtracts adjacentfirst1 last1 differenceobjects range  andfirst2places differences range  iter2 iter1  iter1 adjacent_sequentially appliesfirst1 last1 differenceop adjacent objectsfirst2 opin range  places range  iter2 iter1  iter1 member functionsthe names member functions purposes tainers container class includes member functions table  intended member functions container explanations functions evident explained text stl algorithms member functions fstl algorithmsandmemberfunctions907tablef  continuednamepurposearguments   app       tablef  member functionsmulti multi priority vectorlistdequesetsetmapmapstackqueuequeue operator xxxxxxxxx operator xxxxxxxxx operator xxxxxxxxx operator xxxxxxxxx operator xxxxxxxxx operator xxxxxxxxx operator xxx operator xxx operator xxoperator xxoperator xxx operator xoperator xoperator xxoperator xxoperator xoperator xbeginxxxxxxx endxxxxxxx rbeginxxxxxxx rendxxxxxxx emptyxxxxxxxxxx sizexxxxxxxxxx max_sizexxxxxxx frontxxxx backxxxx push_frontxxpush_backxxx pop_frontxxpop_backxxx swapxxxxxxx appendix f90823  app       insertxxxxxxx erasexxxxxxx findxxxx countxxxx lower_boundxxxx upper_boundxxxx equal_rangexxxx topxxpushxxx popxxx capacityxreservexsplicexremovexuniquexmergexreversexsortxiteratorstable  lists type iterator required algorithm tablef  type iterator required algorithmrandominputoutputforwardbidirectionalaccess for_eachxfindxfind_ifxadjacent_findxcountxstl algorithms member functions fstl algorithmsandmemberfunctions909tablef  continuedmulti multi priority vectorlistdequesetsetmapmapstackqueuequeue   app       count_ifxmismatchxequalxsearchxcopyxxcopy_backwardxxiter_swapxswap_rangesxtransformxxreplacexreplace_ifxreplace_copyxxfillxfill_nxgeneratexgenerate_nxremovexremove_ifxremove_copyxxremove_copy_ifxxuniquexunique_copyxxreversexreverse_copyxrotatexrotate_copyxxrandom_shufflexpartitionxstable_partitionxsortxstable_sortxappendix f910tablef  continuedrandominputoutputforwardbidirectionalaccess   app       partial_sortxpartial_sort_copyxxnth_elementxlower_boundxupper_boundxequal_rangexbinary_searchxmergexxinplace_mergexincludesxset_unionxxset_intersectionxxset_differencexxset_symmetric_differencexxpush_heapxpop_heapxmake_heapxsort_heapxmax_elementxmin_elementxlexicographical_ comparisonxnext_permutationxprev_permutationxaccumulatexinner_productxpartial_sumxxadjacent_differencexxstl algorithms member functions fstl algorithmsandmemberfunctions911tablef  continuedrandominputoutputforwardbidirectionalaccess   app         app       appendixganswers questions andexercises appendix chapter  chapter  chapter  chapter  chapter  chapter  chapter  chapter  chapter  chapter  chapter  chapter  chapter  chapter  chapter  chapter    app       appendix g914chapter answers toquestions  procedural object oriented   data data   data hiding   objects  false organizational principles  encapsulation   false lines code  polymorphism    chapter answers toquestions   parentheses  braces  function executed program starts  statement  comment comment    app            false  integer constant character constantc floating point constant variable identifier function name11 cout cout jim cout   false equal statement executed  cout setw  george  iostream15 cin temp  iomanip17 string constants preprocessor directives  true    assignment arithmetic  temp  temp temp       provide declarations data library functions overloaded operators objects25 library answers questions exercises ganswersto questionsand exercises91524  app       solutions exercises  ex2_1 cpp converts gallons cubic feet include iostream namespace std int main float gallons cufeet cout nenter quantity gallons cin gallons cufeet gallons   cout equivalent cublic feet cufeet endl return   ex2_2 cpp generates table include iostream include iomanip namespace std int main cout  setw   endl  setw   endl  setw   endl  setw   endl return   ex2_3 cpp exercises arithmetic assignment decrement include iostream namespace std int main int var  appendix g91624  app       cout var endl var var  var  cout var endl displays var decrements cout var endl var  return  chapter answers toquestions   george sally3  true  false  initialize expression initializes loop variable test expression tests loop variable increment expression loop variable   true  int   cout endl  braces curly brackets   int   cout endl  false   int  docout endl   age  cout  answers questions exercises ganswersto questionsand exercises91724  app        age  cout elsecout    preceding surrounded braces  reformatting  switch case cout break case cout break default cout unknown response  ticket speed      limit  speed  unary arithmetic relational logical conditional assignment   loop  solutions exercises  ex3_1 cpp displays multiples number include iostream include iomanip setw namespace std int main appendix g91824  app       unsigned long numbercout nenter number cin number int   loop   cout setw  print multiple    numbers cout endl start return   ex3_2 cpp converts fahrenheit centigrad centigrad fahrenheit include iostream namespace std int main int response double temper cout ntype  convert fahrenheit celsius  convert celsius fahrenheit cin response response  cout enter temperature fahrenheit cin temper cout celsius     temper   cout enter temperature celsius cin temper cout fahrenheit     temper   cout endl return  answers questions exercises ganswersto questionsand exercises91924  app        ex3_3 cpp number digits include iostream namespace std include conio getche int main char unsigned long total  holds numbercout nenter number getche quit entertotal total   add digit total cout nnumber total endl return   ex3_4 cpp models function calculator include iostream namespace std int main double n1 ans char oper cout nenter number operator number cin n1 oper switch oper case ans n1 break case ans n1 break case ans n1 break case ans n1 break default ans  cout answer ans cout ndo enter cin return  appendix g92024  app       chapter answers questions1  true  semicolon  struct time int hrs int mins int secs  false variable definition creates space memory   time2 hrs     bit systems  structures times  integers times  bytes   bit systems  time time1     true  temp fido dogs paw   enum players  players joe tom joe tom  yesc nod yes16     enum speeds obsolete  single  album   false berepresented  answers questions exercises ganswersto questionsand exercises92124  app       solutions toexercises  ex4_1 cpp structure store phone number include iostream namespace std struct phone int area area code  digits int exchange exchange  digits int number number  digits int main phone ph1    initialize phone number phone ph2 define phone number phone usercout nenter area code exchange number cout leading zeros cin ph2 area ph2 exchange ph2 number cout nmy number display numbers ph1 area ph1 exchange ph1 number cout nyour number ph2 area ph2 exchange ph2 number endl return   ex4_2 cpp structure models point plane include iostream namespace std struct point int xco coordinate int yco coordinate appendix g92224  app       int main point define  pointscout nenter coordinates  pointscin xco yco user cout enter coordinates cin xco yco xco xco xco sum ofp3 yco yco yco p2cout coordinates display sum xco yco endl return   ex4_3 cpp structure model volume room include iostream namespace std struct distance int feet float inches struct volume distance length distance width distance height int main float volume room1          room1 length feet room1 length inches   room1 width feet room1 width inches   room1 height feet room1 height inches   cout volume cubic feet return  answers questions exercises ganswersto questionsand exercises92324  app       chapter answers questions1 half credit  definition  void foo cout foo  declaration prototype  body   declarator   false  clarify purpose arguments   parentheses function takes arguments   ttrue  declaration declarator  void17 main int times2 int prototype int alpha times2  function   modify original argument avoid copying large argument   int bar char int bar char char appendix g92424  app        faster  inline float foobar float fvar   char blyth int float    visibility lifetime  functions defined variable definition  function defined   left ofthe equal sign solutions exercises  ex5_1 cpp function finds area circle include iostream namespace std float circarea float radius int main double rad cout nenter radius circle cin rad cout area circarea rad endl return  float circarea float const float  f return  ex5_2 cpp function raises number power include iostream namespace std double power double int  default answers questions exercises ganswersto questionsand exercises92524  app       int main double number answer int pow char yeserno cout nenter number numbercin number cout enter power cin yeserno yeserno user  power cout enter power cin pow answer power number pow raise number pow elseanswer power number square numbercout answer answer endl return  power returns number raised power double power double int double result   start  int  multiply nresult timesreturn result  ex5_3 cpp function sets smaller numbers  include iostream namespace std int main void zerosmaller int int int     zerosmaller zerosmaller appendix g92624  app       cout return  zerosmaller sets smaller numbers  void zerosmaller int int  elsesecond   ex5_4 cpp function returns larger distances include iostream namespace std struct distance english distance int feet float inches distance bigengl distance distance declarations void engldisp distance int main distance d1 d3 define lengths length d1 usercout nenter feet cin d1 feet cout enter inches cin d1 inches length usercout nenter feet cin feet cout enter inches cin inches d3 bigengl d1 d3 larger d1 display lengthscout nd1 engldisp d1 cout nd2 engldisp cout nlargest engldisp d3 cout endl return  answers questions exercises ganswersto questionsand exercises92724  app       bigengl compares structures type distance returns larger distance bigengl distance dd1 distance dd2 dd1 feet dd2 feet feet returnreturn dd1 largest feetif dd1 feet dd2 feet return dd2 dd1 inches dd2 inches inches return dd1 return largestelse inches dd2 equalreturn dd2 engldisp display structure type distance feet inches void engldisp distance cout feet inches chapter answers toquestions  class declaration describes objects class created  class object   class leverage private int crowbar public void pry  false data functions private public  leverage lever1   lever1 pry  inline alsoprivate appendix g92824  app        int getcrow return crowbar  created defined  class member  leverage crowbar   true   int getcrow  int leverage getcrow return crowbar  member functions data default public structures private classes   calling member functions   false trial error   true  void afunc const float jerry const solutions toexercises  ex6_1 cpp class model integer data type include iostream namespace std class int int private int public int create int  answers questions exercises ganswersto questionsand exercises92924  app       int int create initialize int void add int int add ints void display display int cout int main int int1  create initialize int int int2  create initialize int int int3 create intint3 add int1 int2 add intscout nint3 int3 display display result cout endl return   ex6_2 cpp class model toll booth include iostream namespace std include conio const char esc  escape key ascii codeconst double toll   toll  cents class tollbooth private unsigned int totalcars total cars passed today double totalcash total money collected todaypublic constructortollbooth totalcars  totalcash   void payingcar car paid totalcars totalcash toll void nopaycar car pay totalcars void display const display totals cout ncars totalcars cash totalcash endl appendix g93024  app       int main tollbooth booth1 create toll booth char cout npress  paying car  paying car esc exit program getche character   car paybooth1 nopaycar   car paidbooth1 payingcar esc exit loop esc keybooth1 display display totals return   ex6_3 cpp class model time data type include iostream namespace std class time private int hrs mins secs public time hrs  mins  secs  arg constructor  arg constructortime int int int hrs mins secs void display const format    cout hrs mins secs void add_time time time add times secs secs secs add seconds secs  overflow secs  mins carry minutemins mins mins add minutesanswers questions exercises ganswersto questionsand exercises93124  app       mins  overflow mins  hrs carry hourhrs hrs hrs add hours int main const time time1    creates initialze const time time2    times time time3 create timetime3 add_time time1 time2 add timescout time3 time3 display display result cout endl return  chapter answers toquestions    double doublearray      cout doublearray   int coins         twod    true  float flarr             memory address   array  elements structure class employee15 emplist  salary16 appendix g93224  app        bird manybirds   false  manybirds  cheep  array char21 char city  extra byte needed null character  char dextrose c6h12o6 h2o  true   strcpy blank  class dog private char breed  int age  false   int s1 cat  s1 insert  cat solutions toexercises  ex7_1 cpp reverses string include iostream include cstring strlen namespace std int main void reversit char prototype const int max  array size char str max stringcout nenter string string usercin str max answers questions exercises ganswersto questionsand exercises93324  app       reversit str reverse stringcout reversed string display itcout str endl return  reversit function reverse string passed argument void reversit char int len strlen length string int  len  swap character half char temp character len  half len  temp reversit function reverse string passed argument void reversit char int len strlen length string int  len  swap character half char temp character len  half len  temp  ex7_2 cpp employee object string data include iostream include string namespace std class employee private string long number appendix g93424  app       public void getdata data user cout nenter cin cout enter number cin number void putdata display data cout cout number number int main employee emparr  array employees int  employees char user responsedo data usercout nenter data employee number  emparr getdata cout enter cin int  display data array cout nemployee number  emparr putdata cout endl return   ex7_3 cpp averages array distance objects input user include iostream namespace std class distance english distance class private int feet float inches answers questions exercises ganswersto questionsand exercises93524  app       public distance constructor args feet  inches  distance int float constructor args feet inches void getdist length user cout nenter feet cin feet cout enter inches cin inches void showdist display distance cout feet inches void add_dist distance distance declarations void div_dist distance int add distances d3void distance add_dist distance distance d3 inches inches d3 inches add inches feet  carry inches   total exceeds   decrease inches inches     feet increase feet feet feet d3 feet add feet divide distance intvoid distance div_dist distance int divisor float fltfeet feet inches   convert float fltfeet divisor division feet int fltfeet feet inches fltfeet feet   inches int main distance distarr  array  distances distance total    average distances int count  counts distances inputappendix g93624  app       char user response characterdo cout nenter distance distancesdistarr count getdist user cout ndo array cin int  count add distancestotal add_dist total distarr totalaverage div_dist total count divide numbercout nthe average display averageaverage showdist cout endl return  chapter answers toquestions   subtract   true  void operator count    void distance operator feet  distance distance operator int feet float inches return distance answers questions exercises ganswersto questionsand exercises93724  app        increments variable prior overloaded operator   true   string string operator int len strlen str int  len str toupper str return string str   false conversion routine true   true  constructor  true behard humans understand   attributes operations  false  solutions exercises  ex8_1 cpp overloaded operator subtracts distances include iostream namespace std class distance english distance class private int feet float inches public constructor args distance feet  inches   constructor args appendix g93824  app       distance int float feet inches void getdist length user cout nenter feet cin feet cout enter inches cin inches void showdist display distance cout feet inches distance operator distance add distances distance operator distance subtract distances add distancedistance distance operator distance return sum int feet feet add feet float inches inches add inches   total exceeds   decrease inches     increase feet  return temporary distancereturn distance initialized sum subtract distdistance distance operator distance return diff int feet feet subtract feet float inches inches subtract inches  inches  increase inches     decrease feet  return temporary distancereturn distance initialized difference int main distance dist1 dist3 define distances dist1 getdist dist1 userdistance dist2    define initialize dist2answers questions exercises ganswersto questionsand exercises93924  app       dist3 dist1 dist2 subtract display lengthscout ndist1 dist1 showdist cout ndist2 dist2 showdist cout ndist3 dist3 showdist cout endl return   ex8_2 cpp overloaded operator concatenates strings include iostream include cstring strcpy strlen namespace std include process exit class string user defined string type private enum  size string objects char str holds stringpublic string arg constructor strcpy str string char  arg constructor strcpy str void display display string cout str string operator string add string result stays strlen str strlen str cout nstring overflow exit  strcat str str add argument string return string str return temp string int main string s1 merry christmas  arg ctor string happy year  arg ctor string s3 arg ctorappendix g94024  app       s3 s1 add s1 assign s3cout ns1 s1 display display s1cout ns2 display display cout ns3 s3 display display s3 cout endl return   ex8_3 cpp overloaded operator adds times include iostream namespace std class time private int hrs mins secs public time hrs  mins  secs  arg constructor  arg constructortime int int int hrs mins secs void display format    cout hrs mins secs time operator time add times int secs secs add seconds int mins mins add minutes int hrs hrs add hours  secs overflow  carry minuteif  mins overflow  carry hourreturn time return temp int main time time1    create initialze time time2    times time time3 create timeanswers questions exercises ganswersto questionsand exercises94124  app       time3 time1 time2 add timescout ntime3 time3 display display result cout endl return   ex8_4 cpp overloaded arithmetic operators work type int include iostream namespace std include process exit class int private int public int  arg constructor int int  arg constructor int int void putint display int cout void getint read int kbd cin operator int conversion operator return int int int operator int addition return checkit long double long double int operator int subtraction return checkit long double long double int operator int multiplication return checkit long double long double int operator int division return checkit long double long double int checkit long double answer check answer  l answer  l cout noverflow error exit  return int int answer int main appendix g94224  app       int alpha  int beta  int delta gamma gamma alpha beta cout ngamma gamma putint gamma alpha beta  cout ngamma gamma putint gamma alpha beta  cout ngamma gamma putint gamma alpha beta  cout ngamma gamma putint delta  gamma delta alpha overflow error delta  gamma delta alpha overflow errorcout endl return  chapter answers questions1  derived   class bosworth public alphonso5 false  protected7 assuming basefuncis private  bosworthobj alfunc  true  derived class  bosworth alphonso   true  derv int arg base arg answers questions exercises ganswersto questionsand exercises94324  app         true   class tire public wheel public rubber19 base func  false  generalization   false  stronger aggregation solutions exercises  ex9_1 cpp publication class derived classes include iostream include string namespace std class publication base class private string title float price public void getdata cout nenter title cin title cout enter price cin price void putdata const cout ntitle title cout nprice price class book private publication derived class private int appendix g94424  app       public void getdata publication getdata cout enter number cin void putdata const publication putdata cout npages class tape private publication derived class private float time public void getdata publication getdata cout enter playing time cin time void putdata const publication putdata cout nplaying time time int main book book1 define publications tape tape1 book1 getdata data themtape1 getdata book1 putdata display datatape1 putdata cout endl return   ex9_2 cpp inheritance string class include iostream answers questions exercises ganswersto questionsand exercises94524  app       include cstring strcpy namespace std class string base class protected note privateenum  size string objects char str holds stringpublic string constructor  args str   string char constructor  arg strcpy str convert string stringvoid display const display string cout str operator char conversion function return str convert string string class pstring public string derived class public pstring char constructor pstring pstring char constructor pstring strlen  long int   copy str characters hand str  add null character long string construct int main define string pstring s1 long string exceed limit set cout ns1 s1 display display stringpstring short string define stringcout ns2 display display string cout endl return  appendix g94624  app        ex9_3 cpp multiple inheritance publication class include iostream include string namespace std class publication private string title float price public void getdata cout nenter title cin title cout enter price cin price void putdata const cout ntitle title cout price price class sales private enum months  float salesarr months public void getdata void putdata const void sales getdata cout enter sales  months int  months cout month  cin salesarr answers questions exercises ganswersto questionsand exercises94724  app       void sales putdata const int  months cout sales month  cout salesarr class book private publication private sales private int public void getdata publication getdata cout enter number cin sales getdata void putdata const publication putdata cout sales putdata class tape private publication private sales private float time public void getdata publication getdata cout enter playing time cin time sales getdata void putdata const publication putdata cout playing time time sales putdata appendix g94824  app       int main book book1 define publications tape tape1 book1 getdata data publicationstape1 getdata book1 putdata display data publicationstape1 putdata cout endl return  chapter answers questions1 cout testvar   bytes   var var var char  constant variable  float ptrtofloat   testptr9 pointer contents variable pointed   address intvarmust pointer intptrbefore accessed  data type  thesame thing  int   cout endl intarr  array names represent address array constant changed16 reference pointer answers questions exercises ganswersto questionsand exercises94924  app         void func char  int   s1   char revstr char  char numptrs   wasted  memory longer needed  exclu  objarr  exclu   float arr         false  solutions toexercises  ex10_1 cpp finds average numbers typed user include iostream namespace std int main float flarr  array numbers char user decision int num  counts numbers input appendix g95024  app       cout enter number numbers usercin flarr num user answers cout enter cin float total   total starts for int  num add numbers totaltotal flarr float average total num display average cout average average endl return   ex10_2 cpp member function converts string objects upper case include iostream include cstring strcpy include cctype toupper namespace std class string user defined string type private char str pointer stringpublic string char constructor arg int length strlen length string argument str char length  memory strcpy str copy argument string destructor delete str void display display string cout str void upit uppercase string void string upit uppercase character char ptrch str pointer string ptrch null ptrch toupper ptrch uppercase characteranswers questions exercises ganswersto questionsand exercises95124  app       ptrch character int main string s1 laughs laughs cout ns1 display strings1 display s1 upit uppercase string cout ns1 display string s1 display cout endl return   ex10_3 cpp sort array pointers strings include iostream include cstring strcmp namespace std const int days  number pointers arrayint main void bsort char int prototype array pointers charchar arrptrs days sunday monday tuesday wednesday thursday friday saturday cout nunsorted int  days display unsorted stringscout arrptrs endl bsort arrptrs days sort stringscout nsorted  days display sorted stringscout arrptrs endl return  void bsort char int sort pointers strings appendix g95224  app       void order char char prototypeint indexes arrayfor   outer loopfor  loop starts outerorder order pointer contents void order char pp1 char pp2 orders pointers string st strcmp pp1 pp2  larger nd char tempptr pp1 swap pointers pp1 pp2 pp2 tempptr  ex10_4 cpp linked list includes destructor include iostream namespace std struct link element list int data data item link pointer link class linklist list links private link pointer linkpublic linklist argument constructor null link linklist destructor void additem int add data item link void display display links void linklist additem int add data item link newlink link link newlink data dataanswers questions exercises ganswersto questionsand exercises95324  app       newlink points linkfirst newlink points void linklist display display links link current set ptr link current null quit link cout endl current data print data current current link linklist linklist destructor link current set ptr link current null quit link link temp current save ptr link current current ptr link delete temp delete link int main linklist li linked listli additem  add items listli additem  li additem  li additem  li display display entire listcout endl return  chapter answers questions1  true appendix g95424  app        base  virtual void dang int orvoid virtual dang int  late binding dynamic binding  derived  virtual void aragorn  orvoid virtual aragorn    dong parr    true   friend void harry george   friend class harry friend harry   performs member member copy  zeta operator zeta   false compiler default copy constructor   bertha bertha  true reason   true trouble occurs returned reference  operate identically   object function member  thisis pointer   return   links  true  answers questions exercises ganswersto questionsand exercises95524  app       solutions toexercises  ex11_1 cpp publication class derived classes include iostream include string namespace std class publication private string title float price public virtual void getdata cout nenter title cin title cout enter price cin price virtual void putdata cout ntitle title cout nprice price class book public publication private int public void getdata publication getdata cout enter number cin void putdata publication putdata cout npages class tape public publication appendix g95624  app       private float time public void getdata publication getdata cout enter playing time cin time void putdata publication putdata cout nplaying time time int main publication pubarr  array ptrs pubs int  number pubs array char choice user choicedo cout nenter data book tape cin choice choice book objectpubarr book arrayelse tape objectpubarr tape arraypubarr getdata data object cout enter pub cin choice choice cycle int  cycle pubspubarr putdata print data pubcout endl return   ex11_2 cpp friend square function distance include iostream namespace std answers questions exercises ganswersto questionsand exercises95724  app       class distance english distance class private int feet float inches public distance constructor args feet  inches   distance float fltfeet constructor arg feet integer feet static_cast int fltfeet inches  fltfeet feet inches left constructor args distance int float feet inches void showdist display distance cout feet inches friend distance operator distance distance friend multiply d1 d2distance operator distance d1 distance float fltfeet1 d1 feet d1 inches  convert float float fltfeet2 feet inches  float multfeet fltfeet1 fltfeet2 product return distance multfeet return temp distance int main distance dist1    distances distance dist2    distance dist3 dist3 dist1 dist2 multiplication dist3   dist3 mult conversion display distancescout ndist1 dist1 showdist cout ndist2 dist2 showdist cout ndist3 dist3 showdist cout endl return  appendix g95824  app        ex11_3 cpp creates array class overloads assignment operator copy constructor include iostream namespace std class array private int ptr pointer array contents int size size arraypublic array ptr  size  argument constructor array int size argument constructor ptr int array array copy constructor array destructor delete ptr int operator int overloaded subscript return ptr array operator array overloaded operator array array array copy constructor size size size ptr int size space contents int  size copy contents ptr ptr array array operator array overloaded operator delete ptr delete contents size size object size ptr int size space contents int  size copy contents object ptr ptr return return object int main const int asize  size arrayanswers questions exercises ganswersto questionsand exercises95924  app       array arr1 asize arrayfor int  asize squaresarr1 array arr2 arr1 copy constructorcout narr2  asize check workedcout arr2 array arr3 arr4 array objects arr4 arr3 arr1 assignment operator cout narr3  asize check worked arr3cout arr3 cout narr4  asize check worked arr4cout arr4 cout endl return  chapter answers questions1  ios3 ifstream ofstream fstream4 ofstream salefile sales jun  true  foobar   fileout character   ifile read char buff sizeof buff   byte location read write operation place  false file pointer synonym current position  f1 seekg  ios cur appendix g96024  app          skipwscauses whitespace characters input cinwill assumethe input terminated  int main int argc char argv  prn lpt120 istream operator istream sample solutions toexercises  ex12_1 cpp write array include iostream include fstream file streams namespace std class distance english distance class private int feet float inches public distance feet  inches   constructor args constructor args distance int float feet inches void getdist length user cout enter feet cin feet cout enter inches cin inches void showdist display distance cout feet inches int main char distance dist create distance object fstream file create input output file open appendfile open dist dat ios binary ios app ios ios answers questions exercises ganswersto questionsand exercises96124  app       data user file cout ndistance dist getdist distance write filefile write char dist sizeof dist cout enter distance cin quit file seekg  reset start file read distancefile read char dist sizeof dist int count  file eof quit eof cout ndistance count display dist dist showdist file read char dist sizeof dist read distancecout endl return   ex12_2 cpp imitates copy command include fstream file functions include iostream namespace std include process exit int main int argc char argv argc  cerr nformat ocopy srcfile destfile exit  char character readifstream infile create file inputinfile open argv  open file infile check errors cerr ncan open argv  exit  ofstream outfile create file output outfile open argv  open fileappendix g96224  app       outfile check errors cerr ncan open argv  exit  infile eof infile read character outfile write character return   ex12_3 cpp displays size file include fstream file functions include iostream namespace std include process exit int main int argc char argv argc  cerr nformat filename exit  ifstream infile create file input infile open argv  open file infile check errors cerr ncan open argv  exit  infile seekg  ios file report byte numbercout size argv  infile tellg cout endl return  chapter answers questions1  includedirective  compiler compile cppfile linker link objfiles4  class library answers questions exercises ganswersto questionsand exercises96324  app        true   true  false   linking  false   scope  object  declared file  true   false    namespace  chapter answers questions1  class  false functions created compile time  template class times2 arg return arg    true  instantiating appendix g96424  app         fixed data type data type  store data   catch throw13 throw boundserror  false block   class public int xnumber char xname max int xd char xnumber xd strcpy xname  false    true  independent dependent   false  additional solutions toexercises  ex14_1 cpp template function averages array include iostream namespace std answers questions exercises ganswersto questionsand exercises96524  app       template class atype function template atype avg atype array int size atype total  int  size average arraytotal array return atype total size int intarray       long longarray       double doublearray             char chararray       int main cout navg intarray avg intarray  cout navg longarray avg longarray  cout navg doublearray avg doublearray  cout navg chararray int avg chararray  endl return   ex14_2 cpp implements queue class template include iostream namespace std const int max  template class type class queue private type max array type int head start queue remove item int tail queue insert item public queue constructor head  tail  void type var insert item queue tail tail var tail max  wrap array endtail  appendix g96624  app       type remove item queue head type temp head store item head max  wrap array endhead  return temp return item int main queue float q1 q1 object class queue float q1  f q1  f q1  f cout  q1 endl  cout  q1 endl q1  f  q1  f cout  q1 endl  q1  f  cout  q1 endl  cout  q1 endl cout  q1 endl queue long q2 q2 object class queue long q2 l  longs  longsq2 l q2 l cout  q2 endl cout  q2 endl cout  q2 endl return   ex14_3 cpp implements queue class template exceptions handle errors queue include iostream namespace std const int max  answers questions exercises ganswersto questionsand exercises96724  app       template class type class queue private type max array type int head queue remove item int tail queue insert item int count number items queuepublic class exception classes class queue constructor head  tail  count  void type var insert item queue tail count max queue throw throw exceptionqu tail var store item count tail max  wrap array endtail  type remove item queue head count  queue throw throw exceptiontype temp head item count head max  wrap array endhead  return temp return item int main queue float q1 q1 object class queue float float data data item user char choice loop enter quit appendix g96824  app       block cout nenter exit cin choice choice cout enter data cin data q1 data choice cout data q1 endl trycatch queue float cout error queue endl catch queue float cout error queue endl choice return  main chapter answers toquestions   vector list deque  set map   true   false  iterator  function object   false simply returns    answers questions exercises ganswersto questionsand exercises96924  app        duplicate   points  false  bidirectional  iter    true  iterators  string separate printed values   elements ordered  true  pairs associations  false   constructor solutions exercises  ex15_1 cpp type float stored array sorted sort include iostream include algorithm namespace std int main int  char float fpn farr  cout enter floating point number cin fpn farr fpn appendix g97024  app       cout enter cin sort farr farr  cout farr cout endl return   ex15_2 cpp vector string objects push_back include iostream include string pragma warning disable  microsoft include vector include algorithm namespace std int main vector string vectstrings string word char cout enter word cin word vectstrings push_back word cout enter cin sort vectstrings vectstrings int  vectstrings size cout vectstrings endl return   ex15_3 cpp reverse algorithm reverses list include iostream include list namespace std answers questions exercises ganswersto questionsand exercises97124  app       int main int list int thelist list int iterator iter1 list int iterator iter2    list    thelist push_back cout reversal display listfor iter1 thelist iter1 thelist iter1 cout iter1 iter1 thelist set element iter2 thelist set iter2 lastwhile iter1 iter2 swap iter1 iter2 swap iter1 increment iter1 iter2 number elementsbreak iter2 decrement cout nafter reversal display list iter1 thelist iter1 thelist iter1 cout iter1 cout endl return   ex15_4 cpp multiset automatically sorts person objects stored pointer include iostream include set pragma warning disable  include string namespace std class person appendix g97224  app       private string lastname string firstname long phonenumber public person default constructorlastname blank firstname blank phonenumber l  arg constructorperson string lana string fina long pho lastname lana firstname fina phonenumber pho friend bool operator const person const person void display const display person data cout endl lastname firstname tphone phonenumber long get_phone const return phone number return phonenumber class person overloaded person class bool operator const person const person lastname lastname return firstname firstname true false return lastname lastname true false function object compare persons pointers class comparepersons public bool operator const person ptrp1 const person ptrp2 const return ptrp1 ptrp2 int main multiset ptrs persons multiset person comparepersons setptrspers multiset person comparepersons iterator iter answers questions exercises ganswersto questionsand exercises97324  app       personsperson ptrp1 person kuangthu bruce  person ptrp2 person mcdonald stacey  person ptrp3 person deauville william  person ptrp4 person wellington john  person ptrp5 person bartoski peter  person ptrp6 person mcdonald amanda  person ptrp7 person fredericks roger  person ptrp8 person mcdonald stacey  setptrspers insert ptrp1 persons multisetsetptrspers insert ptrp2 setptrspers insert ptrp3 setptrspers insert ptrp4 setptrspers insert ptrp5 setptrspers insert ptrp6 setptrspers insert ptrp7 setptrspers insert ptrp8 display multisetcout nset sorted created iter setptrspers iter setptrspers iter iter display iter setptrspers delete persons iter setptrspers delete iter delete person setptrspers erase iter remove pointer cout endl return  main chapter answers questions1 false   task  true  columns  appendix g97424  app        generalization association aggregation   false   true  false   people human beings systems program    false    false   object  true  answers questions exercises ganswersto questionsand exercises97524  app         app       appendixhbibliographyin appendix advanced  defining documents978 unified modeling language978 history  topics979   app       appendix h978this appendix lists books prove interesting students advanced vemastered fundamentals books buy effective scottmeyers addison wesley  effective byscott meyers addison wesley  books  specific ways improve programs designs  ways improve programs designs topics books short presented books provide wealth ideas read programmers thinking bybruce eckel prentice hall  fast ners covers fundamentals language excellent explaining things work faqs frequently asked questions marshall cline greg lomow addison wesley  hundreds topics short question answer format easy reading contribute understanding distilledby irapohl addison wesley  short summary fea tures great forgotten particularsyntax hurry defining documentsbecause author language creator definitive text programming language edition bjarne stroustrup addison wesley  programmer copy book assumes level sophis tication beginners written mastered fundamentals invaluable aid finer points usage actual defining document standard pro gressed study final draft standard fdis programming language x3j16   isavailable technology council nstic washington previous defining document annotated reference manual bymargaretellis bjarne stroustrup addison wesley  fairly heavy filled arcane explanations unified modeling languageaddison wesley seemsto cornered market uml books publishers titles list grady booch james rumbaugh ivar   app       jacobson jointly invented uml assume talk ing unified modeling language user guide  isjust title explains uml accessible beginners cover great deal advanced material greater ofthe unified modeling language reference manual  consists analphabetical listing uml terms constructs learned uml handy reference uml distilled edition  martin fowler kendall scott quick tutorial uml accessible books mentioned smaller good book beginners umlby perdita stevenswith rob pooley  designed textbook univer sity classes uml small easy read advanced case modeling  frank armour granville miller tells thing cases software development processes uml nutshell  sinan alhir reference tutorial uml history design evolution bybjarne stroustrup addison wesley  descrip tion creator interesting knowing history youunderstand language ruminations andrewkoenig addison wesley  informal discus sion topics pioneers easy read fresh insights topics iostreams handbook steve teale addison wesley  good explanation details streams files materialhere standard template library alexander stepanov meng lee hewlett packard  defining document stl learn stl examples books easier read stl tutorial reference guide edition davidr musser gillmer derge atul saini addison wesley  bibliographyhbibliography97925  app       nominally based object oriented design stephen gilbert andbill mccarty waite group press  comprehensive easy read introduction program design language windows game programming dummies byandré lamothe idg books  fasci nating details game programming andré book explains things windows console graphics routines form basis console graphics lite routines discussed appendix book writ ing game programs buy book programming language edition briankernighan dennis ritchie prentice hall ptr  definitive book language based primer reference appendix h98025  app       indexsymbols number sign  logical operator   logical operator   logical operator   address operator   arithmetic operator  assignment operator     decrement operator   division operator  dot operator  equal operator  extraction operator   increment operator     insertion operator    multiplication operator  equal operator  remainder operator  subscript operator   subtraction operator  aabstract base classes   abstract classes access specifiersdefault  private access specifier     protected access specifier   public access specifier    tips selecting  access violation error message  accessibility inheritance           accessing982accessingarray elements  pointers   structures  base class members    characters string objects  data iterators  elements arrays  pointers   structures  member function data withthis pointer   members static func tions  members structures     namespace members  accumulate algorithm  activity diagrams   adapterscontainers   iteratorsinsert iterator   raw storage iterator reverse iterator  addition operator  address operator  addresses memory pointers  accessing variable pointed   address operator  constants   variables   adjacent_difference algorithm adjacent_find algorithm advanced casemodeling aggregates   algorithmsaccumulate algorithm   adjacent_difference algo rithm  adjacent_find algorithm binary_search algorithm containers    copy algorithm   copy_backward algorithm count algorithm   count_if algorithm  equal algorithm   equal_range algorithm fill algorithm   fill_n algorithm  algorithm     find_if algorithm  for_each algorithm    function objects  generate algorithm  generate_n algorithm  algorithm   includes algorithm  inner_product algorithm inplace_merge algorithm  iter_swap algorithm  iterators       lexicographical_compare algorithm  lower_bound algorithm make_heap algorithm  max algorithm  max_element algorithm merge algorithm   min algorithm  min_element algorithm mismatch algorithm  next_permutation algo rithm  nth_element algorithm partial_sort algorithm  partial_sort_copy algo rithm  partial_sum algorithm  partition algorithm  pop_heap algorithm  prev_permutation algo rithm  push_heap algorithm  random_shuffle algorithm remove algorithm  remove_copy algorithm remove_copy_if algorithm remove_if algorithm  replace algorithm  replace_copy algorithm replace_copy_if algorithm replace_if algorithm  reverse algorithm  reverse_copy algorithm rotate algorithm  rotate_copy algorithm  search algorithm             arrays983set_difference algorithm  set_intersection algorithm set_symmetric_difference algorithm  set_union algorithm  sort algorithm   sort_heap algorithm  stable_partition algorithm stable_sort algorithm  stl         swap algorithm   swap_ranges algorithm transform algorithm    unique algorithm  unique_copy algorithm upper_bound algorithm user written functions  uses  logical operator  animation loops  annotated reference manual answer key questions  append member func tion applications pro gramsconsole mode applicationsborland builder  microsoft visual  landlord application   argumentsexceptions   function templates  functions   arrays    c strings   const function argu ments    constants   default arguments  function templates  naming  objects    overloaded functions  parameters  passing   passing pointers  passing reference  references   structures   values   variables   manipulators  overloaded operators  arithmetic assignmentoperator     arithmetic expressions  arithmetic operatorsaddition operator  arithmetic assignmentoperator     division operator  modulus operator  multiplication operator overloading   remainder operator  subtraction operator  armour frank  arrays arguments functions  bounds   buffers  strings   class members   data types   defining    elementsaccessing    averaging   overview   sorting   examples    functionscalling  declarations   definitions  passing   numbers  initializing    memory management  multidimensional arraysaccessing elements  defining  formatting numbers  initializing   overview   objects   accessing   examples   computer lan guages  passing functions  pointers   objects   sorting array elements  to strings           arrays984size  structures   accessing elements  defining  similarities   ascii character set  asm keyword  assigningstring objects   values variables   assignment expressions  assignment operatorinvoked message assignment operatorsarithmetic assignmentoperator   chaining  inheritance  overloading   overloading assignment   prohibiting copying  assignment statementsoverview   structures  associations classes  associative containers   keys    maps     multimaps    multisets    sets     associativity operators  at member function  atoi library function attributesclasses  definition  objects  auto keyword  averaging array ele ments  bback member function  bad alloc class   badbit flag base classes   abstract base classes  accessing members    destructors   instantiating objects pure virtual functions  virtual base classes  begin member function behavior objects  bidirectional iterators    binary   binary operators arithmetic assignmentoperators   arithmetic operators  comparison operators  overloading  arithmetic assignmentoperators   arithmetic operators  comparison operators  binary_search algorithm binding  blanks strings  blocks code  booch grady   books   bool keyword  bool variables   boolalpha flag  boole george  borland buildercapabilities  console graphics lite debugging programs  breakpoints   single stepping  tracing functions watching variables  executable programs  file extensions  header files   projects   running programs  screen elements  borland compilers  bounds arrays   braces functions  break keyword   break statement   bsort function   bubble sorts          classes985buffers arrays  strings  bugs  build process multifile programs  ccadditional references    keywords  overview  programminglanguage c additional references  c   graphics  keywords  distilled c faqs c iostreams handbook the programminglanguage edition c buildercapabilities  console graphics lite  debugging programs  breakpoints   single stepping  tracing functions watching variables  executable programs  file extensions  header files   projects   running programs  screen elements  stringsarrays   blanks   buffers  class members   comparing  concatenating  constants   converting string objects   copying   function arguments  multiple lines   pointers   user defined strings  variables   calling functions   array arguments  member functions  capacity member func tion  case keyword  casts  catch blocks   catch keyword   cerr  member func tion chaining assignmentoperators char data type  char keyword  char strings   char variable  character constants  character  character variableschar variable   wchar variable  checking errors streams   cin   get member function  overloaded extraction insertion operators  class diagrams  associations   inheritance  navigability arrows   class keyword   class librariesexceptions  implementations   interfaces  multifile programs  classesabstract classes  arrays class members  associations   attributes  base classes    abstract base classes  accessing members    destructors   instantiating objects pure virtual functions  virtual base classes  benefits   strings class mem bers   container classes          classes986containers   data hiding  data membersinitialization   private   public   static   declaring  defining  derived classes       dynamic type informationdynamic cast operator  typeid operator  exception classesbad alloc class  xalloc class  features   friend classes   friend functions   hierarchies   inheritance    code reusability  examples   graphic shapes  hierarchies   kind relationship levels   multiple inheritance  private inheritance  program development  public inheritance  inter file classes   istream_iterator class  member functionscalling   class declara tions   const   const arguments  constructors    defining classes  destructors   messages  overview   public versus private membersarrays   strings   objects   benefits   const   data types   defining  examples    function arguments    initializing    memory   returning form func tions   ostream_iterator class  overview  relationships   reusability  classes specifiers  stream classesadvantages  copying  fstream class   hierarchy   ifstream class   ios class   iostream class  iostream_withassign class   istream class    istream_withassign class   istrstream class  ofstream class  ostream class    ostream_withassign class  ostrstream class  predefined stream objects   strstream class  string class   accessing characters string objects  append member func tion  assigning objects  at member function capacity memberfunction  compare member function   comparing objects  concatenation   converting strings  copy member func tion  defining objects  editing objects          console mode applications987erase member func tion  find_first_not_of member function  find_first_of member function  find_last_not_of mem ber function  find_last_of memberfunction  member function finding objects  getline member func tion   input output   insert member func tion  length member func tion  max size memberfunction  operator   replace member func tion  rfind member func tion  size member function substr member function  swap member function  structures  syntax   templates   determining storage parameters     syntax   uml  user defined data types  clear_line function  clear_screen function clear function  cline marshall  clog  close member function closing files streams  codeblocks  catch blocks   reusability  spaghetti code  blocks   collaboration diagrams command arguments  commentsimportance  syntax    compare member func tion  comparingstring objects    strings   comparison operators  compilersassignment operator  borland compilers  console graphics  copy constructors  directives   function templates  how work  keywords  microsoft compilers  whitespace  concatenating stringsc strings  string class   conditional operator   console functions  console graphicscompilers  description  inheritance   routines   console graphics litec builder  functions   inheritance   passing structures func tions   routines   visual  console mode applica tionsborland builder  console graphics lite debugging   executable programs  file extensions  header files   projects   running pro grams  screen elements  microsoft visual building existing files  console graphics lite debugging   errors   file extensions  multifile programs          console mode applications988rtti  screen elements  single file programs versions  writing files  constarguments member functions  function arguments  member functions  objects   overview const cast keyword  const keyword   const modifier  const objects   constantsc strings   character constants   const keyword    define directive  floating point constants  integer constants  passing functions  pointers     set_color function  set_fill_style function string constants   constructorsautomatic initialization capabilities  conversion constructors copy constructors     invoking  memory message overloading    prohibiting copying temporary objects  default copy constructor  derived class constructors      initialization list   multi argument construc tors  multiple inheritance  names  overloading   overview   syntax   container classes  containers  adapters   algorithms    associative containers    keys    maps     multimaps    multisets    sets     function objects  iterators  member functions  priority queues  queues  sequence containers  arrays  deques   lists   vectors  sequential containers  deques  lists   vectors   stacks  stl      contents operator  continue keyword  continue statement  control statements decisionsbreak statement   continue statement  goto statement  work   statement   statement    switch statement  loopsdecisions  loop   loop   work  indentation  iterations   multiple statements  selecting loop  loop    conversion constructors conversion operator  conversionsdata type conversions  between basic types  between basic typesand user defined types   strings stringobjects           dec manipulator989explicit keyword  objects classes   preventing   user defined types basic types  variables   guidelines  limitations  selecting method copy algorithm  copy_backward algorithm copy constructor    invoking  memory message overloading    prohibiting copying  temporary objects  copy member function copyingc strings    prohibiting  stream classes  count gcount memberfunction count algorithm   count_if algorithm  cout      cpp filename extension cpp files ctor seeconstructorscurly brackets func tions ddataglobal data   local data  streams  data access itera tors  data conversionsguidelines  limitations  data encapsulation data flow seestreams data hiding  friend functions  problems  data members classes initialization   member functions  public versus private  static   data storage seelinkedlistsdata structures  data type conversions  between basic types  between basic types anduser defined types  c strings stringobjects   explicit keyword   objects classes  preventing   selecting method between user defined types basic types   data typesarrays   char data type  creating  enumerationsdeclarations  definition  examples   integer values  limitations  objects   unsigned long data type user defined data types class templates  converting basic user defined  converting user defined basic   converting basic types   vari ablescasts   converting   overview  type safety  unsigned data types  debuggingc builder programs  breakpoints   single stepping  tracing functions watching variables  loop animation  pointers   visual programsbreakpoints  overview   single stepping  stepping functions watching variables  wat windows  dec flag  dec manipulator          decision statements990decision statementsbreak statement   continue statement  goto statement  work   statement   statement   switch statement   decision trees  decisions loops declarationsenumerations  functions    static class data   structures  syntax     vari ables  declarator functions  declaringaggregates   attributes classes  classes  functions array argu ments   decrement operator  default copy constructor  default keyword   defaultsaccess specifiers  arguments functions   define directive  definingarrays    arrays structures  classes  functions array argu ments  member functions outsideclasses  namespaces   objects  pointers   string objects   structures   variables     definitionsfunctions   body   declarator   library functions  place decla ration   static class data   vari ables  delete keyword  delete operator andmemory management  deques   dereferencing pointers  derived classes      the design evolutionof destructors     base classes   exceptions  virtual destructors  warnings  development processes development inheritance   modern processes  object oriented program ming  unified process   waterfall process   diagramsactivity diagrams   class diagramsassociations   inheritance  navigability arrows uses  interaction diagrams  object diagrams   state diagrams   use case diagrams  directives define directive  definition  include directive   pragma  preprocessor directives     directive  directories multifile programs  disk file obinary   char strings embed ded blanks   character   error handling  analyzing errors  reacting errors  formatted file   member functions  object   overloaded extraction insertion operators  streams  diskcount member func tion         errors991diskin member function  diskout member func tion  display function   displaying linked list tents  divide error error mes sage division operator  keyword  loop   dot operator   double keyword  double variable   draw_circle function draw_line function draw_pyramid function draw_rectangle func tion dynamic binding  dynamic cast operator  dynamic keyword  dynamic type classes dynamic cast operator  typeid operator   eearly binding eckel bruce editingdata const objects  global data   string objects   effective elements arrays accessing    averaging   multidimensional arrays overview   sorting   structures  ellis margaret  keyword  member func tion encapsulationdefinition  problems  member function endl manipulator    ends manipulator  enum keyword   enumerationsdeclarations  definition  examples   integer values  limitations  eofbit flag   equal algorithm   equal_range algorithm equal relational operator  erase member functionlists  string class  vectors   ericson  error flag functions  error handling disk file  analyzing errors  reacting errors  exceptionsarguments   catch blocks   class libraries  destructors  examples    extrac ting data exception objects  function nesting  handling   multiple exceptions  purpose   sequence events  syntax   throwing   tips try blocks     functionslongjmp function  setjmp function  error messages access violation error mes sage  divide error error mes sage  null pointer assignmenterror message  fault error message stack error mes sage  unidentifed identifier error message  unknown variable error message  error status flags    errors cerr  microsoft visual          errors992streamschecking   error status flags     inputting numbers  inputting strings andcharacters  input input   characters escape sequences   exception classesbad alloc class   xalloc class  exception handlers seecatch blocksexceptionsarguments   catch blocks   class libraries  destructors  examples    extracting data fromexception objects  function nesting  handling   multiple exceptions  purpose   sequence events  syntax   throwing   tips try blocks     exe filename extension executable files exercise solution key  exit function  explicit keyword   exponential notation  export keyword  expressions    extended ascii characterset extensions filenames builder  cpp  exe   visual  extern keyword  external variables seeglobal variablesextraction operator      ffailbit flag  false keyword  fibonacci series   file pointers  filename extensionsc builder  cpp  exe   visual  filesclosing  disk file binary   char strings withembedded blanks  character   error handling  formatted file  member functions  object   overloaded extraction insertion opera tors   streams  executable files  extensionsc builder  cpp  exe   visual  formatted file  header files     library files   opening   source files  algorithm  fill_n algorithm fill member function the final draftinformation standard fdis programming language find algorithm    find_first_not_of mem ber function find_first_of memberfunction find_if algorithm  find_last_not_of mem ber function find_last_of memberfunction find member function finding string objects  fixed flag         functions993flagserror status flags    formatting flags   ios flags  float keyword  float variable   floating point variablesdouble   float   long double   overview  floating point constants flow data seestreams flush manipulator  flush member function for_each algorithm   for keyword  loops   foreign languages wchar variable formatted file  formatting flags   formatting numbers inarrays  fortran  forward iterators    fowler martin  fread member function friend classes   friend functions  controversies surrounding examples   functional notation  friend keyword   front member function  fstream class   function libraries  function objects algorithms  modifying containerbehavior  predefined function objects   writing   functionsarguments   arrays    c strings   const function argu ments    constants   default arguments  naming  objects    overloaded functions  parameters  passing   passing pointers  passing reference  references   structures   values   variables   braces  bsort function   calling     console functions   curly brackets  declarations    declaring array argu ments   defining array argu ments  definition   body   declarator   library functions  place decla ration   display function   error flag functions  examples   exit function  friend functions   controversies surround ing  examples   functional notation  getche function   history   illustration  inline functions   inter file functions  invoking    ios functions   library functions   atoi library function malloc libary function  pointers  rand library function srand library function  strcat library function  strcmp library function   strcpy library function   strlen library function  longjmp function  macros  main function           functions994member functions   append member function  member function back member function   member function  calling   capacity memberfunction   member function  class declarations  close memberfunction  compare member function   const   constructors    containers   copy memberfunction  count gcount member function  defining classes  definition  destructors   disk file   diskcount memberfunction  diskin member function   diskout member function   memberfunction  member function erase member function   fill member function find_first_not_of member function  find_first_of member function  find_last_not_of member function  find_last_of memberfunction  member function flush memberfunction  fread member function  member function   fwrite memberfunction  member function      getline member function     ignore member function  insert member function   length memberfunction  lower bound memberfunction   max size memberfunction   merge member function  messages  multiple inheritance  open member function   overriding   overview   precision member function  parse member function  peek member function  pointers   pop member function   pop member function   pop member function pos tellg memberfunction  pos tellp memberfunction  precision member function  public versus private push member function  push member function  push member function   member function   putback member function  rbegin member function  rdbuf member function  read memberfunction   rend member function  replace member function  reverse member function  rfind member function          header files seekg member function   seekp member function   setdata member function   setf member function    showdata memberfunction   size member function    solve member function  stl   substr memberfunction  swap member function   tellg member function   pointer   typeid memberfunction   unique memberfunction  unsetf member function   upper bound memberfunction   width memberfunction  width member function  write memberfunction   names  nesting  operator function  order function   overloaded functions    passing arrays   pointers   pop function   program structure   prototypes  push function   putch function  recursion   returning objects   setjmp function  sqrt function   static functions   accessing members numbering members structurespassing reference  returning   templates   arguments   blueprints  compilers   determining whatworks   syntax   tips simplifying   val uesreturning   returning reference  vari ablesscope   storage classes     virtual functions  examples   pointers   pure virtual functions  fwrite member function ggeneral electric  generate algorithm generate_n algorithm get operator   pointer   member function      getche function  getline member func tion    gilbert stephen global data   global variables  golden ratio  goodbit flag  goto keyword  goto statement graphic shapes inher itance  graphicsc  console graphicscompilers  description  inheritance   passing structures functions   routines   greater operator  greater equal operator  filename extension  handling exceptions  hardfail flag  relationships  header files                   hewlett packard hewlett packard  hex flag  hex manipulator  hiding data  hierarchies classes    horse racing game  i ji seeinput outputidentifiers  algorithm   keyword   statement  if statement   ifstream class   ignore member func tion implementations classlibraries   include directive   include files  includes algorithm increment operator    indentation loops index numbers arrays indexes arrays indirect addressing point ers indirection operator  inheritanceaccessibility    assignment operators  code reusability  examples   graphic shapes   hierarchies   kind relationship  levels   multiple inheritance  ambiguity   constructors   disambiguation  member functions  private derivation  virtual base classes  overview     private inheritance  program development  public inheritance  uml class diagrams  init_graphics function  initializer list  initializingarrays     members structures  nested structures   objects     variables    inline functions   inline keyword   inner_product algorithm inplace_merge algorithm  input iterators   input outputcin   disk file binary   char strings withembedded blanks  character   error handling  formatted file  member functions  object   overloaded extraction insertion opera tors   streams  streams  string objects   insert iterators   insert member functionlists  string class  vectors   insertingdata iterators  items linked lists  insertion operator      instance variables   instantiating objects  int bad function  int eof function int fail function int good function  int integer variable   int keyword   integer constants integer variablesbit numbers  defining   int integer variable   long integer variable  overview  short integer variable  true false values   inter file communication          keywords interacting programs   interaction diagrams interfacesclass libraries  iterators   internal flag  invokingcopy constructors  functions    ios class  formatting flags   functions   manipulators   ios flags iostream class  iostream_withassign class  istream class    istream_iterator class  istream_withassign class  istrstream class  iter_swap algorithm  iterations loops   iteratorsadapters  insert iterator   raw storage iterator reverse iterator  algorithms       bidirectional iterators     containers  data access   data insertion   forward iterators    input iterators   interfaces   output iterators   random access iterators    smart pointers   stl      stream iterators  istream_iterator class  ostream_iterator class  jacobson ivar   kkernighan brian  keys associative containers   keywords asm keyword  auto keyword  bool keyword  break keyword     case keyword  catch keyword   char keyword  class keyword   compilers  const cast keyword  const keyword   continue keyword  default keyword   definition  delete keyword  keyword  double keyword  dynamic keyword  keyword  enum keyword   explicit keyword   export keyword  extern keyword  false keyword  float keyword  keyword  friend keyword   goto keyword  keyword   inline keyword   int keyword   long keyword  main keyword  mutable keyword     namespace keyword  keyword  operator keyword  private keyword     protected keyword  public keyword     purpose  register keyword  reinterpret cast keyword return keyword  short keyword  signed keyword  sizeof keyword  static cast keyword  static keyword  struct keyword   switch keyword   template keyword     keyword  throw keyword   true keyword          keywords try keyword    typedef keyword   typeid keyword  typename keyword  union keyword  unsigned keyword  keyword  variable names  virtual keyword   void keyword   volatile keyword  wchar keyword  kind relationships koenig andrew  llamothe andré landlord program   languagesmodeling languages     object oriented languages procedural languages  late binding lee meng    left flag length member func tion less operator  equal tooperator  lexicographical_compare algorithm librariesclass librariesexceptions  implementations  interfaces  multifile programs  container classes  function libraries  standard template library stl algorithms               containers           developers  function objects  iterators       member functions  problems   storing user defined objects   library files   library functions   atoi  exit  getche   malloc  pointers  rand  srand  strcat  strcmp   strcpy   strlen  linked listsdisplaying contents  inserting items   pointers   lists    local data  local variables  lock manipulator  logical operatorsand   bool variables      xor  lomow greg  long double variable  long integer variable long keyword  longjmp function loopsanimation  decisions  loop   loop   work  indentation  iterations   multiple statements   selecting loop touse  single stepping  styles  loop   lower_bound algorithm lower_bound memberfunction  mmacros  main keyword  main function   make_heap algorithm malloc libary function         member functions999manipulators  arguments  dec manipulator  endl manipulator    ends manipulator  flush manipulator  header files  hex manipulator  lock manipulator  oct manipulator  resetiosflags manipulator   setfill manipulator  setiosflags manipulator   setprecision manipulator   setw manipulator     unlock manipulator  ws manipulator  maps     max algorithm  max_element algorithm max_size member function string class  vectors  mccarty  member access operator member data seedatamembers classes member functions   append  arguments      calling   capacity deques  string class   class declarations   close  compare   const   constructorsautomatic initialization capabilities  copy constructor  default copy construc tor     initialization list  names  overloading   overview   syntax   containers   copy  count gcount  defining classes definition  destructors   disk file   diskcount  diskin   diskout     erase     find_first_not_of  find_first_of  find_last_not_of  find_last_of   flush  fread    fwrite       getline    ignore  insert    length  lower_bound   max_size    merge  messages  multiple inheritance  open   overriding   overview   precision  parse  peek  pointers   pop_back   pop_front   pop  pos tellg  pos tellp  precision  public versus private  push   push_back  push_front    putback  rbegin  rdbuf  read   rend  replace  reverse  rfind  seekg    seekp   setdata   setf    showdata   size    solve  stl   substr          member functions1000swap   tellg   tellp  pointer   typeid   unique  unsetf   upper_bound   width  width  write   member initialization list members classesarrays   strings   memoryaddress pointers   considerations pro gramming   streams   memory managementarrays   delete operator   operator    merge algorithm   merge member function messagesassignment operatorinvoked message  error messagesaccess violation error message  divide error error mes sage  null pointer assignmenterror message  fault error mes sage  stack error message  unidentifed identifier error message  unknown variable error message  member functions  methods  meyers scott microsoft compilers  microsoft visual building existing files  console graphics lite debugging programs breakpoints  overview   single stepping  stepping functions watching variables errors   file extensions  multifile programs  projects  rtti  screen elements  single file programs  source files  versions  workspaces  writing files  miller granville  min algorithm min_element algorithm mismatch algorithm  modeling languages    modifiers  modules  modulus operator  effective ms dos visual pro grams multidimensional arraysaccessing elements  defining  formatting numbers  initializing   overview   multifile programs build process  class libraries   implementations  interfaces  conceptualization   creating   directories  header files    high rise elevator simula tion   inter file communication  namespaces   organization   projects   long number classexample   multimaps    multiple exceptions  multiple includes  multiple inheritance ambiguity   constructors   disambiguation  member functions  private derivation  virtual base classes  multiple lines strings  multiplication opera tor          oop1001multisets   musser david  mutable keyword    the mythical man month nnamesconstructors  functions  structures  vari ables  namespace keyword  namespacesaccessing members  defining   header files  overview  unnamed namespaces   directive  namingarguments functions  vari ables  nestingfunctions  statements   statements  structuresaccessing members  depth  initialization   overview   user defined type versions  keyword  operator    next_permutation algo rithm not equal opera tor  logical operator  nth_element algorithm null pointer assignmenterror message  number sign  numbering members ofstatic functions numbersformatting arrays  random numbers generat ing   oobject diagrams   object   object managementgroup omg  object oriented designin object orientedlanguages object orientedprogramming analogy   classes  data types  inheritance    objects   organization  overloading  overview    polymorphism   program development  reusability  uml unified modeling language   objectsarrays   accessing   examples   attributes  base classes  behavior  benefits   const object    cout object   data types    defining  examples    function arguments    initializing    instantiating  memory   overview     pointers   arrays pointers  new operator   referring memberfunctions  predefined stream objects  returning functions  user defined objects  oct flag  oct manipulator  ofstream class  omg objectmanagement group  oop object oriented programming analogy   classes  data types  inheritance            oop1002objects   organization  overloading  overview    polymorphism   program development  reusability  uml unified modeling language   open member function  opening files   operator keyword  operator function  operatorsaddress operator  arithmetic operators  addition operator arithmetic assignmentoperator   division operator  modulus operator  multiplication oper ator  remainder opera tor  subtraction operator assignment operator  arithmetic assignmentoperator   chaining  inheritance  overloading    overloading assignment   prohibiting copying associativity   binary operators   conditional operator  contents operator  conversion operator  decrement operator  delete operator   dot operator   dynamic cast operator  extraction operator       increment operators   indirection operator  insertion operator       logical operatorsand   bool variables      xor  member access operator new operator    overloading  arguments  assignment operator      binary operators  conditional operator dot operator  extraction operator  guidelines  insertion operator  limitations  multiple overloading operator keyword  pointer member operator  polymorphism  return values   scope resolution opera tor  subscript operator  temporary objects  unary operators  parsing  pointer member opera tor  polymorphism   precedence       operator  reinterpret cast operator relational operatorsequal operator greater operator greater equal operator  operator  equal tooperator  equal opera tor    scope resolution operator   subscript operator  ternary operators  typeid operator   unary operators           pointers1003or logical operator  order function   ostream class    ostream_iterator class  ostream_withassign class ostrstream class   output iterators   output streams cout   manipulators   output variations  overloaded functions   overloadingconstructors   copy constructors     operators  arguments  assignment operator      binary operators  conditional operator dot operator  extraction operator  guidelines  insertion operator  limitations  multiple overloading operator keyword  polymorphism  return values   scope resolution opera tor  subscript operator  temporary objects  unary operators  overriding functions  p qp precision member function page fault error message parameters functions parse member function parsing  partial_sort algorithm partial_sort_copyalgorithm partial_sum algorithm  partition algorithm  pascal passingarguments functions     constants  pointers   reference    arrays functions  peek member function pohl ira pointer member opera tor  pointersaddresses memory  accessing variablepointed   address operator  constants   variables   arrays   objects   sorting array elements  to strings   strings   copying   library functions  changing types withdynamic cast operator  const modifier  constants   debugging   defining   dereferencing   exampleshorse racing game  parsing   functions   indirect addressing  iterators smart pointers  linked lists   member functions  objects   arrays pointers  new operator   referring memberfunctions  pointers    reinterpret cast  sorting           pointers1004syntax   pointer  accessing member func tion data   returning values  uses  variables   virtual functions   void   polymorphism    pooley rob  pop member function   pop_back member func tion  pop_front member func tion  pop_heap algorithm popping items stacks  pos tellg memberfunction pos tellp memberfunction pragma precedence assignment expressions  operators       precision member func tion predefined stream objects  preprocessor directives define directive  definition  include directive    prev_permutation algo rithm preventing conversions  printer output  priority queues  private access specifier    private inheritance  private keyword    procedural languages  processes software developmentbeginning process  inheritance   modern processes  object oriented program ming  unified process   waterfall process   programming object oriented program minganalogy   classes  data types  inheritance    objects   organization  overloading  overview    polymorphism   reusability  uml unified modeling language  structured programming problems   programs builder   construction ofexpressions  input  output  interacting   landlord program   multifile programs build process  class libraries   conceptualization  creating   directories  header files   high rise elevator simu lation  inter file communica tion   namespaces   organization   projects   long number classexample   structureassignment statements  character constants  comments   directives   escape sequences  example  floating point stants  functions   header files   input   integer constants  namespaces  output   statements   string constants   variable definitions  variables     whitespace          reverse iterators writing  aggregate declarations  attribute declarations class declarations  cpp files  header files  prohibiting copying  projects builder   multifile programs  visual  protected access specifier  protected keyword  prototypes  public access specifier   public inheritance  public keyword    pure virtual functions  push member function    push_back memberfunction push_front member function push_heap algorithm pushing items stacks  put pointer   operator    member function  putback member func tion putch function  queues rrand library function random access iterators   random numbers gener ating  random_shuffle algo rithm rational software  rational unified process  raw storage iterators rbegin member func tion rdbuf member function read member function  readingc stringsembedded blanks  multiple lines   data formatted files  objects disk  recursion  references arguments functions  books   register keyword  reinterpret cast keyword  reinterpret cast operator relational operatorsequal operator  greater operator  greater equal tooperator  operator  equal opera tor  equal operator uses   relationshipsclasses   relationships   kind relationships remainder operator remove algorithm remove_copy algorithm remove_copy_if algorithm remove_if algorithm rend member function replace algorithm replace_copy algorithm replace_copy_if algorithm replace_if algorithm replace member func tion resetiosflags manipulator   return keyword  return statement   return values loaded operators  returning structure variables functions   values reference  values functions  reusability   reverse algorithm reverse_copy algorithm reverse iterators          reverse member function reverse memberfunction rfind member function right flag ritchie dennis  rotate algorithm rotate_copy algorithm rtti time type visual rumbaugh james   ruminations run time type rtti visual ssaini atul scientific flag  scope variables  scope resolution operator   scott kendall  search algorithm    seekg member function   seekp member function  self assignment  self classes sequence containers    arrays  deques   lists   vectors  sequence diagrams  set_color function  set_cursor_pos function set_difference algorithm  set_fill_style function  set_intersection algo rithm set_symmetric_difference algorithm set_union algorithm  setdata member func tion  setf member function   setfill manipulator  setiosflags manipulator  setjmp function setprecision manipulator  sets    setw manipulator    short integer variable  short keyword  showbase flag  showdata member func tion  showpoint flag  showpos flag  alhir sinan  signed keyword  single stepping loops size arrays  size member function   sizeof keyword  skipws flag  smalltalk   smart pointers  software development processes process  modern processes  object oriented program ming  unified process   waterfall process   solutions exercises  solve member function sort algorithm   sort_heap algorithm  sortingarray elements   pointers   source files  spaghetti code specifiers sqrt function   srand library function stable_partition algo rithm stable_sort algorithm  stack error mes sage stacks    standard template library stl algorithms        containers   count algorithm  algorithm    function objects  algorithm   iterators       merge algorithm          strcpy library function search algorithm  sort algorithm  transform   user written functions  containers   adapters   algorithms   associative containers     iterators  member functions  sequence containers     developers  function objects  modifying containerbehavior  predefined function objects   writing   iterators       adapters   algorithms    containers  data access   data insertion   interfaces   smart pointers   stream iterators  member functions  problems   storing user defined objects   standard template library state diagrams   statementsassignment statements    control statementsdecisions    loops    program structure   return statement   syntax   static binding  static cast keyword  static class data   static functions   static keyword  static local variables  stdio flag stepanov alexander   stevens perdita  stl standard template library algorithms        containers   count     function objects    iterators       merge  search   sort  transform   user written functions  containers   adapters   algorithms   associative containers     iterators  member functions  sequence containers     developers  function objects  modifying containerbehavior  predefined function objects   writing   iterators       adapters   algorithms    containers  data access   data insertion   interfaces   smart pointers   stream iterators  member functions  problems   storing user defined objects   stl tutorial reference guide  storage classes vari ables     storing user defined objects  strcat library function strcmp library function  strcpy library function          stream classes1008stream classes advantages  copying  fstream class   hierarchy   ifstream class   ios class   formatting flags  functions   manipulators   iostream class  iostream_withassign class   istream class    istream_withassign class   istrstream class  ofstream class  ostream class    ostream_withassign class ostrstream class   predefined stream objects  strstream class  stream iterators   streams advantages  cin   closing  command arguments  cout  definition  disk file  binary   char strings withembedded blanks  character   formatted file  object   errors  checking   error status flags     inputting numbers  inputting strings andcharacters  input input   characters input output  manipulators   memory   overloaded extraction insertion operators  printer output   string class  accessing characters instring objects   assigning objects   comparing objects  concatenation   converting strings  defining objects   editing objects   finding objects   input output   member functionsappend   capacity  compare   copy  erase  find_ first_not_of  find_first_of  find_ last_not_ find_last_of   getline   insert  length  max size  replace  rfind  size  substr  swap  operator   strings arrays pointers   strings  arrays   blanks   buffer  class members  concatenating  constants   converting string objects   copying   multiple lines   pointers   user defined strings  variables   comparing    disk file   overview   string class   accessing characters string objects  assigning objects  comparing objects  concatenation   converting strings  defining objects  editing objects          typename keyword finding objects  input output   operator   strlen library function stroustrup bjarne  strstream class  struct keyword   structured programming  structures arrays   accessing elements  defining  similarities  assignment statements  classes  declaration   defining   definition  examplescard game   measurements   members  accessing    initializing   names  nestingaccessing members  depth  initialization   overview   user defined type versions  overview passing functions  passing functions erence   returning structure vari ables functions  syntax   tags  styles loops subscript operator  substr member function subtraction operator swap algorithm   swap_ranges algorithm swap member functionstring class  vectors  switch keyword   switch statement  syntaxclass templates   classes   comments   constructors   exceptions   function templates  pointers   statements   structures   ttags structures  teale steve tellg member function  tellp member function template keyword    templatesclass templates   determining storage parameters     syntax   uml  user defined data types  function templates  arguments   blueprints  compilers   determining whatworks   syntax   tips simplifying   ternary operators  text strings thinking this keyword  pointer   throw keyword   throwing exceptions  transform algorithm   trees  true keyword  blocks   keyword   type casts  type classes  type safety  typedef keyword   typeid keyword  typeid operator   typeid member function  typename keyword          uml1010uuml unified modelinglanguage activity diagrams   additional references  class diagrams   associations   inheritance  multiplicity  navigability arrows uses  collaboration diagrams history   interaction diagrams  multiplicity symbols  object diagrams   parameterized classes  sequence diagrams  state diagrams   templates  case diagrams  uml distilled secondedition uml nutshell unary operators   unidentifed identifiererror message  unified modelinglanguage uml activity diagrams   additional references  class diagrams   associations   inheritance  multiplicity  navigability arrows uses  collaboration diagrams dependencies  history   interaction diagrams  multiplicity symbols  object diagrams   parameterized classes  sequence diagrams  state diagrams   stereotypes  templates  case diagrams  the unified modelinglanguage reference manual the unified modelinglanguage user guide unified process   union keyword  unique algorithm unique_copy algorithm unique member func tion unitbuf flag  unknown variable error message unlock manipulator  unsetf member func tion  unsigned keyword  unsigned long data type unsigned variables   upper_bound algorithm upper_bound memberfunction  uppercase flag  case modelingactors    class diagrams   landlord program exam ple    scenarios   cases    cases classes   use case descriptions     case diagrams  uses  verbs messages  user defined data types class templates   converting basic type user defined type  converting basic types  converting user defined type basic type  user defined objects  using directive  keyword  uml vvaluesassigning variables  passing functions  returning reference  returning functions          write member function1011variablesassigning values   assignment statements  bool variables    strings   character variables   data typescasts   converting   overview  type safety  unsigned data types  declarations  defining   definitions  floating point variables double   float   long double   overview  loops  global variables   identifiers  initializing    instance variables   integer variables bit numbers  defining   int integer variable  long integer variable overview  short integer variable true false values  inter file variables  local variables   names  output variations  passing functions  pointers       scope   static local variables  storage classes      structuresaccessing members     assignment statements classes  declaration   defining   definition  examples    initializing members  members   names  nesting   syntax   tags  visibility   vectors   virtual base classes  virtual destructors  virtual functions examples   pointers   pure virtual functions  virtual keyword   visibility variables  visual building existing files  console graphics lite debugging programs breakpoints  overview   single stepping  stepping functions watching variables  errors   file extensions  multifile programs  projects  rtti  screen elements  single file programs  source files  versions  workspaces  writing files  void keyword   void pointers   volatile keyword  width memberfunction wait function   watch windows wchar keyword  wchar variable while loop  whitespace  width member function windows gameprogramming dummies workspaces visual write member function          writing1012writingdata formatted files  function objects   objects disk  programs  aggregates declara tions   attribute declarations class declarations  cpp files  header files  ws manipulator  xalloc class  xor logical operator         