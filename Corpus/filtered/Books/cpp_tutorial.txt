4 compiler actual compiler compile source code final executable program ompilers care extension source code cpp default frequently free compiler gnu compiler compilers hp olaris respective operating systems installing gnu compiler unix linux installation linux unix check gcc installed entering command command installed gcc print message built specs target i386 redhat linux configured configure prefix usr thread model posix gcc version     red hat     gcc installed install detailed instructions gcc gnu org install mac installation mac easiest gcc download xcode development environment apple web site follow simple installation instructions xcode developer apple technologies tools windows installation install gcc windows install mingw install mingw mingw mepage mingw org follow link mingw download download latest version mingw installation program named mingw version exe installing min minimum install gcc core gcc binut ils mingw runtime install  add bin subdirectory mingw installation path environment variable tools command simple names installation comp lete gcc ranlib dlltool gnu tools windows command  program defined collection objects communicate invoking methods class object methods instant variables object objects states behaviors dog states color breed behaviors wagging barking eating object instance class class class defined template blueprint describes behaviors states object type support methods method basically behavior class methods methods wh ere logics written data manipulated actions executed instant variables object unique set instant variables object state created values assigned instant variables program structure simple code print include iostream namespace std main program execution int main cout prints return  rious parts program  language defines headers program program header iostream needed  namespace std tells compiler std namespace namespaces addition  basic syntax   main program execution single comment single comments  int main main function program execution  cout program message program displayed screen  return  terminates main function return  calling process compile execute program save file compile program follow steps  open text editor add code  save file hel cpp  open command prompt directory saved file  type cpp press enter compile code errors code command prompt generate execut file  type program  printed window cpp path running directory file compile programs makefile details check makefile tutorial semicolons blocks semicolon statement terminator individual statement ended semicolon dicates logical entity statements   add block set logically connected statements surrounded opening closing braces cout prints return  recognize terminator reason matter statement  add  add identifiers identifier identify variable function class module user defined item identifier starts letter underscore _ letters scores digits   punctuation characters identifiers case sensitive programming language manpower manpower identifiers examples accepta ble identifiers mohd zara abc move_name a_123 myname50 _temp a23b9 retval keywords list reserved reserved constant variable identifier nam asm auto enum operator throw  bool explicit private true break export protected case extern public typedef catch false register typeid char float reinterpret_cast typename class return union const friend short unsigned st_cast goto signed continue sizeof virtual default inline static void delete int static_cast volatile long struct wchar_t double mutable switch dynamic_cast namespace template trigraphs characters alternative repr esentation called trigraph sequence trigraph character sequence represents single character sequence starts question marks trigraphs expanded including string literals aracter literals comments preprocessor directives frequently trigraph sequences trigraph replacement  compilers support trigraphs advised confusing nature whitespace whitespace comment blank compiler totally ignores whitespace term blank tabs newline characters comments whitespace separates statement enables compiler identify element statement int ends element statement  int age statement whitespace character space int age compiler distinguish statement  fruit apples oranges total fruit statement  whitespace characters fruit apples free include readability purpose  program comments explanatory stat ements include code comments reading source code programming languages form comments supports single multi comments characters availabl inside comment compiler comments start comment comments span multiple lines comment start extending include iostream namespace std main cout prints return  code compiled ignore prints final executable produce result comment characters special meaning comment special meaning nest kind comment kind comment printing  comments  cout prints  writing program language variables store variables reserved memory locations store values create variable reserve space memory store data types character wide character integer floating point double floating point boolean based data type ariable operating allocates memory decides stored reserved memory primitive built types offer programmer rich assortment built user defined data types table lists bas data types type keyword boolean bool character char integer int floating point float double floating point double valueless void wide character wchar_t basic types modified type modifiers igned unsigned short long  data types  table variable type memory takes store memory maximum minimum stored type variables type typical bit width typical range cha byte     unsigned char byte   signed char byte   int bytes   unsigned int bytes   signed int bytes   short int bytes   unsigned short int range    signed short int range   long int bytes         signed long int bytes long int unsigned long int bytes      float bytes  e   digits double b ytes  e   digits long double bytes  e   digits wchar_t   bytes  wide character size variables table depending compiler computer sing  produce correct size data types computer include iostream namespace std int main cout size char sizeof char endl cout size int sizeof int endl cout size short int sizeof short int endl cout size long int sizeof long int endl cout size float sizeof float endl cout size double sizeof double endl cout size wchar_t sizeof wchar_t endl return  endl inserts character operator pass multiple values screen sizeof function size data types code compiled executed produces result vary machine machine size char  size int  size short int  size long int  size float  size dou ble  size wchar_t  typedef declarations create existing type typedef simple syntax define type typedef typedef type newname tells compiler fee int  typedef int feet declaration perfectly legal creates integer variable called distance feet distance enumerated types enumerated type declares optional type set ide ntifiers values type enumerator constant type enumeration reat ing enumeration requires keyword enum general form enumeration type enum enum list names list enum enumeration type list names comma separated code defines enumeration colors called colors variable type color finally assigned blue enu color red green blue blue default    specific adding initializer follo wing enumeration green  enum color red green  blue blue  greater precedes  variable named storage ograms manipulate variable specific type determines size layout variable memory range values stored memory set operations applied variable variable composed letters digits underscore character letter underscore upper lowercase letters distinct case sensitive basic types variable explained chapter type description bool stores true false char typically single octet byte integer type int natural size integer machine float single precision floating point alue double double precision floating point void represents absence type wchar_t wide character type define types variables cover subsequent chapters enumeration pointer array reference data structures classes cover define declare types variables variable definition variable definition compiler storage create variable variable definition specifies data type list variables type  variable types  type variable_list type valid data type including char w_char int float double bool user defined object variable_list consist identifier names separated commas valid declarations int char float salary double int declares define variables instructs compiler create variables named type int variables initialized assigned initial declaration initializer consists equal sign constant expre ssion type variable_name examples extern int   declaration int   definition initializing byte  definition initializes char variable definition initializer variables static storage duration implicitly initialized null bytes  initial variables undefi ned variable declaration variable declaration assurance compiler variable existing type compiler proceed compilation needing complete variable variable declaration meaning time compilation compiler actual variable declaration time linking program variable declaration multiple files define variable files time linking program extern keyword declare variable place declare variable multiple times program defined file function block code  variable declared defined inside main function include iostream namespace std variable declaration extern int extern extern float int main variable definition int int float actual initialization   cout endl     cout endl return  cod compiled executed produces result     concept applies function declaration provide function time declaration actual definition fun ction declaration int func int main function int func function definition int func return  lvalues rvalues kinds expressions lvalue expressions refer memory location called lvalue expression lvalue left hand hand assignment rvalue term rvalue refers data stored address memory rvalue expression assigned rvalue left hand assignment variables lvalues left hand assignment numeric literals rvalues assigned left hand valid statement int  valid statement generate compile time error    scope region program broadly speaking place variables declared inside function block called local variables definition function parameters called formal parameters functions called global variables learn nction parameter subsequent chapters explain local global variables local variables variables declared inside function block local variables statements inside function block code local variables functions local variables include iostream namespace std int main local variable declaration int int actual initialization   cout return   variable scope  global variables global variables defined functions program global variables hold life time program global variable accessed function global variable entire program declaration global local variables include iostrea namespace std global variable declaration int int main local variable declaration int actual initialization   cout return  program loca global variables local variable inside function preference include iostream namespace std global variable declaration int   int main local variable declaration int  cout return  code compiled executed produces result  initializing local global variables local variable defined initialized initialize global variables initialized automatically define data type initializer int  char  float  double  pointer null good programming practice initialize variables properly program produce unexpected result  constants refer fixed values program alter called literals constants basic data types divided integer numerals floatin point numerals characters strings boolean values constants treated regular variables values modified definition integer iterals integer literal octal hexadec imal constant prefix specifies base radix x x hexadecimal  octal integer literal suffix combination unsigned long suffix uppercas lowercase order examples integer literals  legal u legal xfeel legal  illegal  octal digit uu illegal repeat suffix examples types integer literals   octal x4b hexadecimal  int u unsigned int l long ul unsigned long floating point iterals floating point literal integer point fractional exponent represent floating point literals form exponential form  constants literals  representing form include point expo nent representing exponential form include integer fractional signed exponent introduced examples floating point literals   legal e l legal e illegal incomplete exponent f illegal exponent e55 illegal missing integer fraction boolean iterals boolean literals standard keywords true representing true false representing false true equal  false equal  character iterals character literals enclosed single quotes literal uppercase wide character literal stored wchar_t type variable narrow character literal stored simple variable char type character literal plain character escape sequence universal character u02c0 characters preceded backslash special meaning represent newline tab list escape sequence codes escape sequence meaning character character character character  alert bell backspace form feed newline carriage return horizontal tab vertical tab ooo octal number digits xhh hexadecimal number digits escape sequence characters include iostream namespace std int main cout tw orld return  code compiled executed produces result string iterals string literals enclosed double quotes string characters character literals lain characters escape sequences universal characters  break long multiple lines string literals separate whitespaces examples string literals forms identical strings hel dear dear ear defining constants simple ways define constants define preprocessor const keyword define preprocessor form define preprocessor defin constant define identifier explains include iostream namespace std define length  define width  define newline int main int area area length width  cout area cout newline return  code compiled executed produces result  const keyword const prefix declare constants specific type const type variable explains include iostream namespace std int main const int length  const int width  const char newline int area area length width cout area cout newline eturn  code compiled executed produces result  note good programming practice define constants capitals  char int double data types modifiers preceding modifier alter meaning base type precisely fits situations data type modifiers listed signed unsigned long short modifiers signed unsigned long short applied integer base types addition signed unsigned applied char long applied double modifiers signed unsigned prefix long short modifiers unsigned long int allo ws shorthand notation declaring unsigned short long integers simply word unsigned short long int automatically implies int statements declare unsigned inte ger variables unsigned unsigned int understand difference signed unsigned integer modifiers interpreted short program include iostream namespace std progra difference signed unsigned integers int main short int signed short integer short unsigned int unsigned short integer  modifier types   cout return  hen program output   result bit pattern represents   short unsigned integer interpreted   short type qualifiers type qualifiers provide additiona variables precede qualifier meaning const objects type const changed program execution volatile modifier volatile tells compiler variable changed ways explicit ly program restrict pointer qualified restrict initially object points accessed c99 adds type qualifier called restrict  storage class defines ope visibility life time variables functions program specifiers precede type modify storage classes program auto register static extern mutable auto stor age class auto storage class default storage class local variables int mount auto int month defines variables storage class auto functions local variables register storage class register storage class define local variables stored register ram variable maximum size equal register size word una operator applied memory location register int miles register variables require quick access counters defining register tha variable stored register stored register depending hardware implementation restrictions static storage class  storage classes  static storage class instructs compiler local variable existenc life time program creating destroying time scope making local variables static maintain values function calls static modifier applied global variables variable scope restricted file declared static class data member copy member shared objects class include iostream function declaration void func void static int count  global variable main count func return  function definition void func void static int  local static variable std cout std cout count count std endl code compiled executed produces result  count   count    count   count   count   count   count   count   count   count  extern storage class extern storage class reference global variable visible program files extern variable initialized point variable storage location defined multiple files define global variable function files extern file reference defined variable function understanding extern declare global variable function anot file extern modifier commonly files sharing global variables functions explained file main cpp include iostream int count extern void write_extern main count  write_extern file support cpp include iostream  extern int count void write_extern void std cout count count std endl extern keyword declare count file compile thes files main cpp support cpp write produce write executable program execute write check result write  mutable storage class mutable specifier applies class objects discussed tutorial member object override const member function mutable member modified const member function  operator symbol tells compiler perform specif mathematical logical manipulations rich built operators provide types operators arithmetic operators relational operators logical operators bitwise operators assignment operators misc operators chapter xamine arithmetic relational logical bitwise assignment operators arithmetic operators arithmetic operators supported language assume variable holds  variable holds  operator scription adds operands  subtracts operand  multiplies operands  divides numerator numerator  modulus operator remainde integer division   operators  increment operator increases integer  decrement operator decreases integer  understand arithmetic ope rators copy paste program test cpp file compile program include iostream namespace std main int  int  int cout  endl cout  endl cout  endl cout  endl cout  endl cout  endl cout  endl return   code compiled executed produces followin result               relational operators relational operators supported language assume variable holds  variable holds  operator description checks values operands equal condition true true checks values operands equal values equal condition true true checks left operand greater operand condition true true checks left operand operand condition true true checks left true  operand greater equal operand condition true checks left operand equal operand condition true true understand relational operators copy paste program test cpp file compile program include iostream namespace std main int  int  int cout  equal endl cout  equal endl cout  endl  cout  endl cout  greater endl cout  greater endl change values   cout  endl cout  greater equal endl return  abov code compiled executed produces result  equal   greater    greater equal logic operators logical operators supported language assume variable holds  variable holds  operator description called logical operator operands condition rue false called logical operator operands condition true true called logical operator reverses logical state operand condition true gical operator false true understand logical operators copy paste program test cpp file compile program include iostream usi namespace std main int  int  int  cout  condition true endl cout  condition true endl change values   cout  condition true endl cout  condition true endl cout  condition true endl return  code compiled executed produces result  condition true  condition true  condition true  condition true bitwise operators  bitwise opera tor works bits perform bit bit operation truth tables                     assume   binary format              bitwise operators supported language listed table assume variable holds  variable holds  operator descrip tion binary operator copies bit result exists operands    binary operator copies bit exists operand    binary xor perator copies bit set operand     binary complement operator unary flipping bits     complement form signed binary number binary left shift operator left operands moved left number bits operand     binary shift operator left operands moved ight number bits operand     understand bitwise operators copy paste program test cpp file compile program include iostream namespace std main unsigned int     unsigned int     int     cout  valu endl    cout  endl    cout  endl     cout  endl     cout  endl     cout  endl return  code compiled executed produces result            valu  assignment operators assignment operators supported language operator description simple assignment operator assigns values operands left operand assign add assignment operator adds operand left operand assign result left operand equivalent  subtract assignment operator subtracts operand left operand sign result left operand equivalent multiply assignment operator multiplies operand left operand assign result left operand equivalent divide assignment erator divides left operand operand assign result left operand equivalent modulus assignment operator takes modulus operands assign result left operand equiva lent left shift assignment operator   shift assignment operator   bitwise assignment operator   itwise exclusive assignment operator   itwise inclusive assignment operator   understand assignment operators  copy paste progra test cpp file compile program include iostream namespace std main int  int cout  operator endl cout  operator val endl cout  operator endl cout  operator endl cout  operator endl  cout  operator endl  cout  operator endl  cout  operator endl   cout  operator endl  cout  operator endl  cout  operator endl return  abov code compiled executed produces result  operator   operator   operator   operator   operator   operator   operator   operator   operator   operator   operator  mi operators table lists operators supports operator description sizeof sizeof operator returns size variable sizeof integer return   dition conditional operator condition true returns returns comma operator sequence operations performed entire comma expression expression comma separated list dot arrow member operators reference individual members classes structures unions cast casting operators convert data type int   return  pointer operator returns address variable actual address variable pointer operator pointer variable var pointer variable var operators precedence operator precedence determines grouping terms expression expression evaluated operators higher precedence multiplication operator higher precedence addition operator    assigned   operator higher precedence multiplied   adds  operators highest precedence table low expression higher precedence operators evaluated category operator associativity postfix left unary type sizeof left multiplicative left  additive left shift left relational left equality left bitwise left bitwise xor left bitwise left gical left logical left conditional left assignment left comma left understand operator precedence concept vailable copy paste program test cpp file compile program check simple difference parenthesis produce precedence hig precedence operators evaluated include iostream namespace std main int   int  int  int  int    cout endl    cout endl    cout endl    cout endl return  code compiled executed produces result   val    situation execute block code number times general statements executed sequentially statement unction executed programming languages provide control structures complicated execution paths loop statement execute statement group statements multiple times general loop statement programming languages programming language type loop handle looping requirements loop type description loop repeats statement group statements condition true tests condition executing loop body loop exe cute sequence statements multiple times abbreviates code manages loop variable  loop types  loop statement tests condition loop body nested loops loop insi loop loop loop statement repeatedly executes target statement long condition true syntax syntax loop condition statement atement single statement block statements condition expression true loop iterates condition true condition false program control passes immediat ely loop flow diagram  key point loop loop condition tested result false loop body skipped statement loop executed include iostream namespace std int main local variable declaration int  loop execution  cout endl  return  code compiled executed produces result       lue     loop loop repetition control structure efficiently write loop execute specific number times syntax syntax loop init condition increment statement flow control loop  init step executed step declare initialize loop control variables required statement long semicolon appears  condition evaluated true body loop executed false body loop execute flow control jumps statement loop  body loop executes flow control jumps increment statement statement update  loop control variables statement left blank long semicolon appears condition  conditi evaluated true loop executes process repeats body loop increment step condition condition false loop terminates flow diagram include iostream namespace std int main loop execution int     cout endl eturn  code compiled executed produces result           nlike loops test loop condition loop loop checks condition loop loop loop loop guaranteed execute lea time syntax syntax loop statement condition notice conditional expression appears loop statement loop execute condition tested  condition true flow control jumps statement loop execute process repeats condition false flow diagram include iostream namespace std int main local variable declaration int  loop execution cout endl   return   code compiled executed produces result           nested loops loop nested inside loop  levels nesting syntax syntax nested loop statement init condition increment init condition increment statement statement statements syntax nested loop statement condition condition statement  statement statemen syntax nested loop statement statement statements statement condition condition program nested loop prime numbers   include iostream namespace std int main int    break factor prime cout prime return  produce result   prime  prime  prime  prime  prime  prime  prime  prime  prime  prime  prime  prime  prime  prime   prime  prime  prime  prime  prime  prime  prime  prime  prime  prime  prime loop control statements loop control statements change execution normal sequence execution leaves scope automatic objects created scope destroyed supports control statements control statement description break statement terminates loop switch statement ansfers execution statement  loop switch continue statement loop skip remainder body retest condition prior reiterating goto statement transfers control labeled tatement advised goto statement program break statement break statement usages break statement encountered inside loop loop terminated program contr resumes statement loop terminate case switch statement covered chapter nested loops loop inside loop break statement execution innermost loop start executing code block syntax syntax break statement break flow diagram  exam ple include iostream namespace std int main local variable declaration int  loop execution cout endl   termin ate loop break   return  code compiled executed produces result prettyprint notranslate10     alue  continue statement continue statement works break statement forcing termination continue forces iteration loop place skipping code loop continue conditional test increment portions loop execute loops program control passes conditional tests syntax syntax continue statement continue flow diagram  include iostream namespace std int main local variable declaration int  loop execution  skip iteration  continue cout endl    return  code compiled executed produces ollowing result          goto statement goto statement unconditional jump goto labeled statement function note goto statement highly discouraged difficult trace control flow program making program hard understand hard modify program goto rewritten goto syntax syntax goto statement goto label label statement label identifier identifies labeled statement labeled statement statement preceded identifier col flow diagram  include iostream namespace std int main local variable declaration int  loop execu tion loop  skip iteration  goto loop cout endl    return  code compiled executed produces result          good goto exit deeply nested utine code fragment goto cout error program eliminating goto force number additional tests performed simple break statement work program exit innermost loop infinite loop loop infinite loop condition false loop traditionally purpose expressions form  loop required endless loop leaving conditional expression include iostream namespace std int main printf loop forever return  conditional expression absent assumed true initialization increment expression programmers commonly onstruct signify infinite loop note terminate infinite loop pressing ctrl keys  decision making structures require programmer conditions evaluated tested program statement statements executed condition determined true optionally statements executed condition determined false general typical decision making structure programming languages programming language types decision making statements statement description statement statement consists boolean expression statements statement statement optional statement exec utes boolean expression false switch statement switch statement variable tested  decision making statements  equality list values nested statements statement inside state ment nested switch statements swi statement inside switch statement statement statement consists boolean expression statements syntax syntax statement boolean_expression statement execute boolean expression true boolean expression evaluates true block code inside statement executed boolean expression evaluates false irst set code statement closing curly brace executed flow diagram  include iostream namespace std int main local variable declaration int  check boolean condition  condition true print cout  endl cout endl return   code compiled executed produces result   statement optional statement executes hen boolean expression false syntax syntax statement boolean_expression statement execute boolean expression true statement execute boolean expression fal boolean expression evaluates true block code executed block code executed flow diagram  include iostream namespace std int main local variable declaration int  check boolean condition  condition true print cout  endl condition false print cout  endl cout endl return  code compiled executed produces result   statement statement optional statement usefull test conditions single statement statements points mind  succeeds remaining tested syntax syntax statement boolean_expression  executes boolean expression  true boolean_expression  ecutes boolean expression  true boolean_expression  executes boolean expression  true executes condition true include iostream namespace std int main local variable declaration int  check boolean condition   condition true print cout  endl  condition true cout  endl  condition true cout  endl conditions tru cout matching endl cout exact endl return  code compiled executed produces result matching exact  switch statement switch statement variable tested equality list values called case variable switched checked case syntax syntax switch statement ollows  switch expression case constant expression statement break optional case constant expression statement break optional number case statements default tional statement rules apply switch statement expression switch statement integral enumerated type class type class single conversion function integral numerated type number case statements switch case compared colon constant expression case data type variable switch cons tant literal variable switched equal case statements case execute break statement reached break statement reached switch terminates flow control jumps switch statement case break break appears flow control fall subsequent cases break reached switch statement optional default case appea switch default case performing task cases true break needed default case flow diagram  include iostream namespace std int main local variable declaration char grade switch grade case cout excellent endl break case case cout endl break  case cout passed endl break case cout endl break default cout invalid grade endl cout grade grade endl return  produce result passed grade nested statement legal nest statements statement inside statem ent syntax syntax nested statement boolean_expression  executes boolean expression  true boolean_expression  executes boolean expression  true nested statement  include iostream namespace std int main local variable declaration int  int  check boolean condition  condition true check  condition true print cout   endl cout exact endl cout exact endl return  code compiled executed produces result   exact  exact  nested switch statements switch statement sequence outer switch case constants outer switch common values conflicts  specifies  levels nesti allowed switch statements syntax syntax nested switch statement switch ch1 case cout outer switch switch ch2 case cout nner switch break case break case include iostream namespace std int main local variable declaration int  int  switch case  cout outer switch endl switch case  cout switch endl  cout exact endl cout exa endl return  produce result outer switch switch exact  exact  operator covered conditional operat previous chapter replace statements general form exp1 exp2 exp3 exp1 exp2 exp3 expressions notice placement colon expression determined exp1 evaluated true exp2 evaluated entire expression exp1 false exp3 evaluated expression  function group statements perform task program function main trivial programs define additional functions divide code separate functions divide code functions logically division uch function performs specific task function declaration tells compiler function return type parameters function definition ovides actual body function standard library numerous built functions program function strcat concatenate strings function memcpy copy memory location location functions function names method routine procedure defining function general form function definition return_type function_name parameter list body function function definition consists function header function body parts function return type function return return_type data type function returns functio perform desired operations returning case return_type keyword void function actual function function parameter list constitute function signature ameters parameter placeholder function invoked pass parameter referred actual parameter argument parameter list refers type order number parameters function parameters optional function parameters  functions  function body function body collection tatements define function source code function called max functio takes parameters num1 num2 returns maximum function returning max numbers int max int num1 int num2 local variable declaration int result num1 num2 result num1 lse result num2 return result function declarations function declaration tells compiler function function actual body function defined separately function declaration ollowing parts return_type function_name parameter list defined function max function declaration int max int num1 int num2 parameter names importan function declaration type required valid declaration int max int int function declaration required define function source file function file case declare function file calling function  calling function creating function definition function function invoke function program calls function program control transferred called function called function performs defined task return statement executed function closing brace reached returns program control main program function simply pass required parameters function function returns store returned include iostream namespace std function declaration int max int num1 int num2 int main local varia ble declaration int  int  int ret calling function max ret max cout max ret endl return  function returning max numbers int max int nu m1 int num2 local variable declaration  int result num1 num2 result num1 result num2 return result max function main function compiled source code running fin executable produce result max  function arguments function arguments declare variables accept values arguments variables called formal parameters funct ion formal parameters behave local variables inside function created entry function destroyed exit calling function ways arguments passed function type descri ption method copies actual argument formal parameter function case parameter inside function argument pointer method copies addre argument formal parameter inside function address access actual argument parameter affect argument reference method copies reference argument formal parameter inside function reference access actual argument  parameter affect argument method passing argumen function copies actual argument formal parameter function case parameter inside function argument default pass arguments gene ral code function alter arguments function function swap definition function definition swap values void swap int int int temp temp save temp return function swap passing actual values include iostream namespace std function declaration swap int int int main local variable declaration int   int  cout swap endl cout swap endl calling function swap valu swap cout swap endl cout swap endl return  code file compiled executed produces result swa  swap  swap  swap  change values changed inside function ointer pointer method passi arguments function copies address argument formal parameter inside function address access actual argument parameter affect passed argument pa pointer argument pointers passed functions declare function parameters pointer types function swap exchanges values integer variables pointed arguments function definition swap values void swap int int int temp  temp save address temp return heck pointers kindly check pointers chapter function swap passing values pointer include iostream namespace std function declaration void swap int int int main local variable declaration int  int  cout swap endl cout swap endl calling function swap values pointer address variable pointer address variable swap cout swap endl cout swap endl  return  code file compiled executed produces result swap  swap  swap  swap  eference refe rence method passing arguments function copies reference argument formal parameter inside function reference access actual argument parameter affect passed argument pass reference argument reference passed functions declare function parameters reference types function swap exchanges values integer variables pointed arguments function definition swap values void swap int int int temp temp save address temp return function swap passing values reference include iostream namespace std function declaration void swap int int  int main local variable claration int  int  cout swap endl cout swap endl calling function swap values variable reference swap cout afte swap endl cout swap endl return  code file compiled executed produces result swap  swap  swap  swap  default pass arguments general code function alter arguments function mentioned wh ile calling max function method default values parameters define function default parameters argument left blank calling function  assignment operator assigning values arguments function definition parameter passed function called default spec ified default passed include iostream namespace std int sum int int  int result result return result int main ocal variable declaration int  int  int result calling function add values result sum cout total result endl calling function result sum cout total result endl return  code compiled executed produces result  total  total   work numbers primitive data types int short long float double number data types values number ranges explained discussing data types defining numbers defined numbers examples previous chapters consolidated define types numbers include iostream namespace std int main number definition short int long float double number assignments        number printing cout short endl cout int endl cout long endl cou float endl  numbers  cout double endl return  code compiled executed produces result short  int  long  float   double   math ope rations addition functions create includes functions functions standard libraries called built functions functions included program rich set mathematical operations performed numbers table lists built mathematical functions utilize functions include math header file cmath function purpose  double cos double function takes angle double returns cosine  double sin double function takes angle double returns sine  double tan double function takes angle double returns tangent  double log double function takes number returns natural log number   double pow double double number raise power raise  double hypot double double pass function length sides triangle return length hypotenuse  double sqrt double pass function number square root  int abs int function returns absolute integer passed  double fabs double function returns absolute number passed  double floor double finds integer equal argument passed simple mathematical operations include iostream include cmath namespace std int main number definition short   long  float    double   mathematical operations cout sin sin endl cout abs abs endl cout floor floor endl cout sqrt sqrt endl cout pow  pow  endl return  code compiled executed produces result sign   abs  floor  sqrt   pow     random numbers cases generate random number functions random number generation rand function return pseudo random num ber srand function simple generate random numbers time function number seconds time randomly seed rand function include iostream include ctime include cstdlib namespace std int main int  set seed srand unsigned time null generate  random numbers   generate tual random number rand cout random number endl return  code compiled executed produces result random number  random number  random number  random number  random number  random number  random number  random number  random number  random number   data structure array hich stores fixed size sequential collection elements type array store collection data array collection variables type declaring individual var iables number0 number1 number99 declare array variable numbers numbers  numbers  numbers  represent individual variables specific element array accessed arrays onsist contiguous memory locations lowest address corresponds element highest address element declaring arrays declare array programmer specifies type elements number elemen required array type arrayname arraysize called single dimension array arraysize integer constant greater type valid data type declare  element array calle balance type double statement double balance  initializing arrays initialize array elements single statement double balance            number values braces larger number elements declare array square brackets assign single element array omit size array array big hold initialization created write double balance           create array previous  arrays  balance    statement assigns element number th array   array th th element arrays  element called base pictorial representa ion array discussed accessing array elements element accessed indexing array placing element square brackets nam array double salary balance  statement th element ray assign salary variable mentioned concepts declaration ass ignment accessing arrays include iostream namespace std include iomanip std setw int main int  array  integers initialize elements array  int    set element location  cout element setw  endl output array element  int   cout setw  setw  endl return  program setw function format output code compiled executed produces result element                     arrays arrays lot concepts clear programmer concept description multi dimensional arrays supports multidimensional arrays simplest form multidimensional array dimensio nal array pointer array generate pointer element array simply array passing arrays functions pass function pointer  array array return array functions function return array multi dimensional arrays multidimensional arrays general form multidimensional array declaration type size1 size2 sizen declaration creates dimensional    integer array int threedim    dimensional arrays simplest form multidimensional array dimensional array dimensional array essenc list dimensional arrays declare dimensional integer array size write type arrayname type valid data type arrayname valid identifier dime nsional array table number rows number columns  dimensional array rows columns element array identified element form array subscripts uniquely identify element initializing dimensio nal arrays  multidimensioned arrays initialized bracketed values row array  rows row  columns int       initializers row indexed      initializers row indexed      initializers row indexed  nested braces intended row optional initialization equivalent previous int               accessing dimensional array elements element  dimensional array accessed subscripts row column array int val   statement th element rd row array verify digram include iostream namespace std int main array  rows  columns int             output array element int   int   cout cout endl  return  code compiled exec uted produces result                               explained arrays number dimensions arrays create dimensions pointer rray understand chapter chapter pointers assuming bit understanding pointers start array constant pointer element array declaration double balance  balance pointer balance  address element array balance pro gram fragment assigns address element balance double double balance  balance legal array names constant pointers vice versa balance  legitimate accessing data bal ance   store address element access array elements   concepts discussed include iostream namespace std int main ray  elements double balance            double balance output array element cout array values pointer endl int   cout cout endl cout array values balance address endl int   cout balance cout balance endl return  code compiled executed produces result array values pointer             array values balance address balance   bal ance   balance    balance   balance   pointer double store address variable double type address address stored passing rrays unctions pass entire array argument function pass pointer array array pass single dimension array argument function declare function formal parameter ways declaration methods produce tells compiler integer pointer received  formal parameters pointer void myfunction int param  formal parameters sized array void myfunction int param    formal parameters unsi zed array void myfunction int param function array argument argument based passed arguments return average numbers passed array double getaverage int arr int size int sum  double avg  size sum arr avg double sum size return avg function include iostream  namespace std function declaration double getaverage int arr int size int main int array  elements int balance       double avg pass pointer arr argument avg getaverage balance  output returned cout average avg endl return  code compiled executed produces result average   length array matter function concerned performs bounds checking formal parameters return rray unctions return entire array rgument function return pointer array array return single dimension array function declare function returning pointer followi int myfunction  point remember advocate return address local variable function define local variable static variable followi function generate  random numbers return array function include iostream include ctime namespace std function generate retrun random numbers int getrandom stati int  set seed srand unsigned time null int   rand cout endl return main function defined function int main pointer int int  getrandom int   cout cout endl return  code compiled executed produces result llows                                  types string representations style character string string class type introduced standard style charact string style character string originated language continues supported string dimensional array characters terminated null character  null terminated string tains characters comprise string null declaration initialization create string consisting word hold null character array size character array string number characters word char greeting   follow rule array initialization write statement char greeting follow ing memory presentation defined string place null character string constant mpiler automatically places  string initializes array print mentioned string include iostream namespace std  strings  int main char greeting   cou greeting message cout greeting endl return  code compiled executed produces result greeting message supports wide range functions manipulate null terminated strings function purpose  strcpy s1 copies string string s1  strcat s1 concatenates string string s1  strlen s1 returns length string s1  strcmp s1 returns  s1  s1 greater  s1  strchr s1 returns pointer occurrence character string s1  strstr s1  returns pointer occurrence string string s1 exam ple mentioned functions include iostream include cstring namespace std int main char str1  char str2  char str3  int len copy str1 str3 strcpy str3 str1 cout strcpy str3 str1 str3 endl concatenates str1 str2 strcat str1 str2 cout strcat str1 str2 str1 endl total lenghth str1 concatenation len strlen str1 cout strlen str1 len endl return  code compiled executed produces result strcpy str3 str1  strcat str1 str2 helloworld strlen str1  string class standard library string class type supports operations mentioned additionally functionality check include iostream include string namespace std int main string tr1 string str2 string str3 int len copy str1 str3 str3 str1 cout str3 str3 endl concatenates str1 str2 str3 str1 str2 cout str1 str2 str3 endl total leng str3 concatenation len str3 size cout str3 size len endl return  code compiled executed produces result  str3 str1 str2 helloworld tr3 size   pointers easy fun learn tasks performed easily pointers tasks dynamic memory allocation performed variable emory location memory location address defined accessed ampersand operator denotes address memory print address variables defined include iostream namespace std int main int var1 char var2  cout address var1 variable cout var1 endl cout address var2 variable cout var2 endl return  code compiled execu ted produces result address var1 variable xbfebd5c0 address var2 variable xbfebd5b6 pointers pointer variable address variable variable stant declare pointer work general form pointer variable declaration  pointers  type var type pointer base type valid type var pointer variable sterisk declare pointer asterisk multiplication statement asterisk designate variable pointer valid pointer declaration int pointer integer double pointer double float fp pointer float char pointer character actual data type pointers integer float character long hexadecim number represents memory address difference pointers data types data type variable constant pointer points pointers operations pointers frequently define pointer variable ssign address variable pointer inally access address pointer variable unary operator returns variable located address operand operations include iostream namespace std int main int var  actual variable declaration int pointer variable var store address var pointer variable cout var variable cout var endl  print address stored pointer variable cout address stored variable cout endl access address pointer cout variable cout endl return  code compiled executed produces result var var iable  address stored variable xbfc601ac variable  pointers pointers easy concepts programming pointer concepts clear programmer concept description null pointers supports null pointer constant defined standard libraries pointer arithmetic arithmetic operators sed pointers pointers arrays close relationship pointers arrays array pointers define arrays hold number pointers pointer pointer poi nter pointer  passing pointers functions passing argument reference address enable passed argument changed calling function called function return pointer functions function return pointer local variable static variable dynamically allocated memory null pointers good practice assign pointer null pointer variable case exact address assigned time variable declaration pointer assigned null called null pointer null pointer constant defined standard libraries including iostream program include iost ream namespace std int main int ptr null cout ptr ptr return  code compiled executed produces result ptr  operating syst ems programs permitted access memory address  memory reserved operating memory address  special significance signals pointer intended point accessible memory loca tion  convention pointer null assumed point check null pointer statement ptr succeeds null ptr succeeds null unused pointers null avoid null pointer avoid accidental misuse uninitialized pointer times uninitialized variables hold junk values difficult debug progr ointer rithmetic understood pointer address numeric perform arithmetic operations pointer numeric arithmetic operators pointers understand pointer arithmetic ptr integer pointer points address  assuming  bit integers perform arithmatic operation pointer ptr ptr point location  time ptr incremented point integer operation pointer memory location impacting actual memory location ptr points character address  operation point location  character  incrementing pointer prefer pointer program array variable pointer incremented array incremented constant pointer program increments variable pointer access succeeding element array include iostream namespace std const int max  int main int var     int ptr array address pointer ptr var int  max cout address var cout ptr endl cout var cout ptr endl point location ptr return  code compiled executed produces result address var  xbfa088b0 var   address var  xbfa088b4 var   address var  xbfa088b8 var   decrementing pointer considerations apply decrementing pointer decreases number bytes data type includ iostream namespace std const int max   int main int var max    int ptr address element pointer ptr var max  int max  cout addr ess var cout ptr endl cout var cout ptr endl point previous location ptr return  code compiled executed oduces result address var  xbfdb70f8 var   address var  xbfdb70f4 var   address var  xbfdb70f0 var   pointer comparisons pointers compared relation operators point variables elements array meaningfully compared  program modifies previous incrementing variable pointer long address points equal address element array var max  include iostream namespace std const int max  int main int var max    int ptr address element pointer ptr var int  ptr var max  cout address var cout ptr endl cout var cout ptr endl point previous location ptr return  code compiled executed produces result address var  xbfce42d0 alue var    address var  xbfce42d4 var   address var  xbfce42d8 var   ointers rrays pointers arrays fact pointers arrays interchangeable cases pointer points array access array pointer arithmetic array style indexing program include iostream namespace std const int max  int main int var max    int ptr array address pointer ptr var int  max cout address var cout ptr endl cout var cout ptr endl point location ptr return   code compiled executed produces result address var  xbfa088b0 var   dress var  xbfa088b4 var   address var  xbfa088b8 var   pointers arrays completely interchangeable program include iostream namespace std const int max  int main int var max    int  max var correct syntax var incorrect return  perfectly acceptable apply pointer operator var illegal modify var reason var constant points array array generates pointer constant sed pointer style expressions long modified valid statement assigns var   var    statement valid compile var changed rray ointers understand concept array pointers array  integers include iostream namespace std const int max  int main int var max    int  max cout var cout var endl return  code compiled executed produces result var   var   var   situation maintain array store pointers int char data type declaration array pointers integer int ptr max declares ptr array max integer pointers element ptr holds pointer int integers stored array pointers include iostream  space std const int max  int main int var max    int ptr max int  max ptr var assign address integer int  max cout alue var cout ptr endl return  code compiled executed produces result var   var   var   array ointers character store list strings include iostream namespace std const int max  int main  char names max zara ali hina ali nuha ali sara ali int  max cout names cout names endl return  code compiled executed produces result alue names  zara ali names  hina ali names  nuha ali names  sara ali ointer ointer pointer pointer form multiple indirection chain pointers pointer address variable define pointer pointer pointer address pointer points location actual variable pointer pointer declared placing additional asterisk declaration declare pointer pointer type int int var  target indirectly pointed pointer pointer accessing requires asterisk operator applied include iostream namespace std int int var int ptr int pptr var  address var ptr var address ptr address operator pptr ptr pptr cout var var endl cout ptr ptr endl cout pptr pptr endl return  code compiled executed produces result var  ptr  pptr   passing ointers unctions pass pointer function simply declare function parameter pointer type simple pass unsigned long poi nter function change inside function reflects calling function include iostream include ctime namespace std void getseconds unsigned long int main unsigned long getseconds print actual cout number seconds endl return  void getseconds unsigned long current number seconds time null return code compiled xecuted produces result number seconds   function accept pointer accept array include iostream namespace std function declaration double getaver age int arr int size int main int array  elements int balance       double avg pass pointer array argument avg getaverage balance  output returned cout average avg endl return  double getaverage int arr int size int sum  double avg  size sum arr avg double sum size  turn avg code compiled executed produces result average   return ointer unctions chapter return array function return pointer function declare function returning pointer int myfunction point remember good idea return address ocal variable function define local variable static variable function generate  random numbers return array represents pointer add ress array element include iostream include ctime namespace std function generate retrun random numbers int getrandom static int   set seed srand unsigned time null int   rand cout endl return main function defined function int main pointer int int getrandom int   cout endl return  code compiled executed produces result                                  reference variable alias existing variable reference initialized variable variable reference refer variable references pointers references confused pointers major differences references pointers null references assume reference connected legitimate piece storage referenc initialized object changed refer object pointers pointed object time reference initialized created pointers initialized time creating references variable label attached variable location memory reference label attached memory location access contents variable original vari reference suppose int  declare reference variables int read declarations reference read declaration nteger reference initialized read declaration double reference initialized references int double include iostream namespace std int main  refere nces  declare simple variables int double declare reference variables int double  cout endl cout reference endl   cout endl cout reference endl return  code compiled executed produces result  reference    reference   references function argument lists function return values subjects references clear programmer concept description references parameters supports passing references function parameter safely parameters reference return return reference function  data type references arameters discussed implement reference concept pointers reference reference include iostream namespace std function declaration void swap int int int main local variable declarati int  int  cout swap endl cout swap endl calling function swap values swap cout swap endl cout swap endl return  function definition swap values void swap int int  int temp temp save address temp return code compiled executed produces result swap  swap  swap  swap  reference eturn alue program easier read maintain references pointers function return reference returns pointer function returns reference returns implicit pointer return function left assignment statement simple program include iostream include ctime namespace std double vals           double setvalu int return vals return reference ith element main function defined function int main  cout change endl int   cout vals cout vals endl setvalues    change nd element setvalues    change th element cout change endl int   cout vals cout vals endl return  code compiled executed produces result change vals    vals    vals    vals    vals   change vals    vals    vals    vals     vals   returning reference careful object referred scope legal return reference local var return reference static variable int func int return compile time error static int return safe lives scope  standard library provide proper type inherits structs functions time manipulation access time functions structures include ctime header file program time types clock_t time_t ze_t types clock_t size_t time_t capable representing time sort integer structure type holds time form structure elements struct int m_sec seconds minutes   int tm_min minutes hour   int tm_hour hours day   int tm_mday day month   int tm_mon month year   int tm_year year sinc  int tm_wday days sunday int tm_yday days january st int tm_isdst hours daylight savings time functions working time functions standard library check reference standard library function purpose  time_t time time_t time returns current calendar time number seconds elapsed january   time  returned  char ctime const time_t time returns pointer string form day month year  time  hours minutes seconds year   struct localtime const time_t time returns pointer structure representing local time  clock_t clock void returns approximates time calling program running  returned time  char asctime const struct time returns pointer string stored structure pointed time converted form day month hours minutes seconds year   struct gmtime const time_t time returns pointer time form structure time represented coordinated universal time utc essentially greenwich time gmt  time_t mktime struct time returns calendar time equivalent time structure pointed time  double difftime time_t time2 time_t time1 function calculates difference seconds time1 time2  size_t strftime function format time specific format current ate ime suppose retrieve current time local time coordinated universal time utc achieve include iostream include ctime  mespace std int main current time based current time_t time  convert string form char ctime cout local time endl convert struct utc gmtm gmtime asctime gmtm cout utc time endl code compiled executed produces result local time sat jan      utc ate time sun jan      format ime struct structure working time structure holds time form structure mentioned time functions structure time functions structure structure chapter making assumption basic understanding structure access structure members arrow operator include iostream include ctime  namespace std int main current time based current time_t time  cout number jan uary   endl ltm localtime print components structure cout year  ltm tm_year endl cout month  ltm tm_mon endl cout day ltm tm_mday endl time  ltm tm_hour cout  ltm tm_min cout  ltm tm_sec endl code compiled executed produces result number january    year  nth  day  time     standard libraries provide extensive set input output capabilities subsequent chapters chapter discuss basic common operations required programming occurs streams sequences bytes bytes flow device keyboard disk drive network connection main memory called input operation bytes flow main memory vice display screen printer disk drive network connection called output operation library header files header files programs header file function description iostream thi file defines cin cout cerr clog objects correspond standard input stream standard output stream buffered standard error stream buffered standard error stream iomanip file declares servic performing formatted called parameterized stream manipulators setw setprecision fstream file declares services user controlled file processing discuss file stream relate chapter tandard utput tream cout predefined object cout instance ostream class cout object connected standard output device display screen cout conjunction stream insertion operator written signs include iostream  basic input outp  namespace std int main char str cout str str code compiled executed produces result str compiler determines data type variable output selects stream insertion operator display alue operator overloaded output data items built types integer float double strings pointer values insertion operator single statement endl add tandard nput tream cin predefined object cin instance istream class cin object attached standard input device keyboard cin conjunction ream extraction operator written greater signs include iostream namespace std int main char  cout enter cin endl  code compiled executed prompt enter enter hit enter result enter cplusplus yo cplusplus compiler determines data type entered selects stream extraction operator extract store variables stream extraction operator single statement request datum cin age equivalent statements cin cin age tandard rror tream cerr predefined object cerr instance ostream class cerr object attached standard error device display screen object cerr buffered stream insertion cerr output cerr conjunction stream insertion operator include iostream namespace std int main char str unable read cerr error message str endl ode compiled executed produces result  error message unable read tandard tream clog predefined object clog instance ostream class clog object attached standard error evice display screen object clog buffered insertion clog output held buffer buffer filled buffer flushed clog conjunction stream insertion operator include iostream namespace std int main char str unable read clog error message str endl code compiled execute produces result error message unable read difference cout cerr clog small examples writing executing big programs difference obvious good practice display error messages cerr stream displaying log messages clog  arrays define variables combine data items kind structure user defined data type combine data items kinds structures represent record suppose track books library track attributes ook title author subject book defining structure define structure struct statement struct statement defines data type member program format struct statement struct structure tag member definition member definition member definition structure variables structure tag optional member definition normal variable definition int float valid variable definition structure definition final semicolon structure variables optional declare book structure struct books char title  char author  char subject   data structures  int book_id book accessing structure members access member structure member access operator member access operator coded period structure variable structure member access struct keyword define variables structure type explain usage structure include iostream include cstring namespace std struct books char title  char author  char subject  int book_id int main struct books book1 declare book1 type book struct books book2 declare book2 type book book  specification trcpy book1 title learn programming strcpy book1 author chand miyan strcpy book1 subject programming book1 book_id  book  specification strcpy book2 title telecom billing  strcpy book2 autho yakit singha strcpy book2 subject telecom book2 book_id  print book1 info cout book  title book1 title endl cout book  author book1 author endl cout book  subject book1 subject endl cout book  book1 book_id endl print book2 info cout book  title book2 title endl cout book  author book2 author endl cout book  subject book2 subject endl cout book  book2 book_id endl return  code compiled executed produces result book  title learn programming book  author chand miyan book  subject programming book    book  title telecom billing book  author yakit singha book  subject telecom book   structures function arguments pass structure function argument pass variable pointer access structure variables accessed include iostream include cstring  namespace std void printbook struct books book struct books char title  char author  char subject  int book_id int main struct books book1 declare book1 type book struct books book2 declare book2 type book book  specification strcpy book1 title learn programming strcpy book1 author chand miyan strcpy book1 subject programming book1 book_id  book  specification strcpy book2 title telecom billing strcpy book2 author yakit singha strcpy book2 subjec telecom book2 book_id  print book1 info printbook book1 print book2 info printbook book2  return  void printbook struct books book cout book title book title endl cout boo author book author endl cout book subject book subject endl cout book book book_id endl code compiled executed produces result book title learn programming bo author chand miyan book subject programming book  book title telecom billing book author yakit singha book subject telecom book  pointers structures define pointers structures define pointer variable struct books struct_pointer store address structure variable defined pointer variable address structure variable place operator tructure struct_pointer book1 access members structure pointer structure operator struct_pointer title write structure pointer hope easy understand concept  include iostream include cstring namespace std void printbook struct books book struct books char title  char author  char subject  int book_id int mai struct books book1 declare book1 type book struct books book2 declare book2 type book book  specification strcpy book1 title learn programming strcpy book1 author chand miyan strcp book1 subject programming book1 book_id  book  specification strcpy book2 title telecom billing strcpy book2 author yakit singha strcpy book2 subject telecom book2 book_id  int book1 info passing address structure printbook book1  print book1 info passing address structure printbook book2 return  function accept pointer structure parameter void printbook struct books book cout book title book title endl cout book author book author endl cout book subject book subject endl cout book book book_id endl code compiled executed produces result book title learn programming book author chand miyan book subject programming book  book title telecom billing book author yakit singha book subject telecom book  typedef eyword easier define structs alias types create typedef struct char title  char author  char subject  int book_id books  books directly define variabl books type struct keyword books book1 book2 typedef keyword structs typedef long int pint32 pint32 pointers long ints  main purpose programming add object orientation programming language classes central feature supports object oriented programming called user defined types clas form object combines data representation methods manipulating data neat package data functions class called members class class definitions define cla define blueprint data type define data define class object class consist operations performed object class definition starts keyword class class class body enclosed pair curly braces class definition semicolon list declarations define box data type keyw class class box public double length length box double breadth breadth box double height height box keyword public determines access attributes members class hat follow public member accessed class scope class object members class private protected discuss define objects class ovides blueprints objects basically object created class declare objects class sort declaration declare variables basic types statements declare objects class box box box1 declare box1 type box box box2 declare box2 type box  classes obje cts  objects box1 box2 copy data members accessing data members public data members objects class accessed direct member access operator things clear include iostream namespace std class box public double length length box double breadth breadth box double height height box int main box box1 declare box1 type box box box2 declare box2 type box double volume   store volume box box  specification box1 hei ght   box1 length   box1 breadth   box  specification box2 height   box2 length   box2 breadth   volume box  volume box1 height box1 length box1 breadth  cout volume box  volume endl volume box  volume box2 height box2 length box2 breadth cout volume box2 volume endl return  code compiled executed produces result volume ox1  volume box2  note private protected members accessed directly direct member access operator learn private protected members accessed classes objects basic idea classes objects interesting concepts classes objects discuss sections listed concept description class member functions member fun ction class function definition prototype class definition variable class access modifiers class member defined public private protected default members assumed priva constructor destructor class constructor special function class called object class created destructor special function called created object deleted copy constructor opy constructor constructor creates object initializing object class  created friend functions friend function permitted access private protected members class inline functions inline function compiler expand code body function place function pointer object special pointer points object pointer classes pointer class pointer structure fact class structure functions static members class data members function members class declared static class member functions member function class function definition prototype class definition variable operates object class member access members class object defined class access members class member function directly accessing class box public double length length box double breadth breadth box double height height box double getvolume void returns box volume member functions defined class definition separately scope resolution operator definin member function  class definition declares function inline inline specifier define volume function class box public double length length box double breadth breadth box double height height box double getvolume void return length breadth height define function class scope res olution operator double box getvolume void return length breadth height point class operator member function called dot operator object manipulate data object box mybox create object mybox getvolume member function object concepts set class memb ers class include iostream namespace std class box  public double length length box double breadth breadth box double height height box member functions claration double getvolume void void setlength double len void setbreadth double bre void setheight double hei member functions definitions double box getvolume void return length breadth height void box setlength double len length len void box setbreadth double bre breadth bre void box setheight double hei height hei  main function program int main box box1 decla box1 type box box box2 declare box2 type box double volume   store volume box box  specification box1 setlength   box1 setbreadth   box1 setheight   box  ecification box2 setlength   box2 setbreadth   box2 setheight   volume box  volume box1 getvolume cout volume box1 volume endl volume box  volume box2 getvolume cout volume box2 volume endl return  code compiled executed produces result volume box1  volume box2  class ccess odifiers data hiding features object oriented programming preventing functions program access directly  internal representation class type access restriction class members labeled public private protected sections class body keywords public private protected called access specifiers class multiple public protected private labeled sections remains label closing brace class body default access members classes private class base public public members protected protected members private private members public ember public member accessible class program set public variables member function include iostream namespace std class public double length  void setlength double len double getlength void member functions definitions double getlength void return length void setlength double len length len main function program int main set length setlength   cout length getlength endl set length member function length   leng public cout length length endl return  code compiled executed produces result length  length  private embers  private member variable func tion accessed viewed class class friend functions access private members default members class private class width private member label member assumed private member class box double width public double length void setwidth double wid double getwidth void practically define data private unctions public called class program include iostream namespace std class box public double length void setwidth double wid double getw idth void private double width member functions definitions double box getwidth void  return width void box setwidth double wid width wid main function program int main box box set box length member function box length   length public cout length box box length endl set box width member function box width   error width private box setwidth   member function set cout width box box getwidth endl return  code compiled executed produces result length box  width box  protect embers protected member variable function private member provided additional benefit accessed child classes called derived classes  learn derived classes inheritance ext chapter check derived child class smallbox parent class box width member accessible member function derived class mallbox include iostream namespace std class box protected double width class smallbox box smallbox derived class public void setsmallwidth double wid double getsmallwidth void mem ber functions child class double smallbox getsmallwidth void return width void smallbox setsmallwidth double wid width wid main function program int main  smallbox box set box width member function box setsmallwidth   cout width box box getsmallwidth endl return  code compiled executed produces result width box  constructor estructor class constructor special member function class executed create objects class constructor exact class return type void constructors set ting initial values member variables explains concept constructor include iostream namespace std class public void setlength double len double getlength void constructor private double length member functions definitions including constructor  void cout object created endl void setlength double len length len doubl getlength void return length main function program int main set length setlength   cout length getlength endl return  code compiled executed produces result object created length  parameterized constructor default constructor parameter constructor parameters helps assig initial object time creation  include iostream namespace std class public void setlength double len double getlength void double len constructor private double length member functions definitions including constructor double len cout object created length len endl length len void setlength uble len length len double getlength void return length main function program int main    initially set length cout length getlength endl length setlength   cout length getlength endl return  code compiled executed produces result object created length  length  length  initialization lists initialize fields case parameterized constructor syntax initialize fields double len length len cout object created length endl syntax equal syntax double len cout object created length len endl length len class multiple fields initialized syntax separate fields comma double double double  class destructor destructor special member function class executed object class scope delete expression applied pointer object class destructor exact class prefixed tilde return parameters destru ctor releasing resources coming program closing files releasing memories explains concept destructor include iostream namespace std class public setlength double len double getlength void constructor declaration destructor declaration private double length member functions definitions including cons tructor void cout object created endl void  cout object deleted endl void setlength double len length len double getlength void return length main function program int main set length setlength   cout length getlength endl return  code compiled executed produces ollowing result object created length  object deleted opy onstructor  copy constructor constructor creates object initializing object class created copy constructor initialize object type copy object pass argument function copy object return function copy constructor defined class compiler itsel defines class pointer variables dynamic memory allocations copy constructor common form copy constructor classname const classname obj body constructor ere obj reference object initialize object include iostream namespace std class public int getlength void int len simple constructor const obj copy constructor destructor private int ptr member functions definitions including constructor int len  cout normal constructor allocating ptr endl allocate memory pointer ptr int ptr len const obj cout copy constructor allocating ptr endl ptr int ptr obj ptr copy void cout freein memory endl delete ptr int getlength void return ptr void display obj cout length obj getlength endl main function program int main  display  return  code compiled executed produces result normal constructor allocating ptr copy constructor allocating ptr length  freeing memory freeing memory small change create object existing object type include iostream namespace std class public int getlength void int len simple constructor const copy constructor destructor private int ptr member functions definitions including constructor int len cout normal constructor allocating ptr endl allocate memory pointer ptr int  ptr len const obj cout copy constructor allocating ptr endl ptr int ptr obj ptr copy void cout freeing memory endl delete ptr int getlength void return ptr void display obj cout length obj getlength endl main function program int main line1  line2 line1 calls copy constructor display line1 display line2  return  code compiled executed produces result normal constructor allocating ptr copy constructor allocating ptr copy constructor llocating ptr length  freeing memory copy constructor allocating ptr length  freeing memory freeing memory freeing memory riend unctions friend function class defined class scope access private protected members class prototypes friend functions class definition friends member functions friend function function template member function class class template case entire class members friends declare function friend class precede function prototype class definition keyword friend class box double width public double length friend void printwidth box box void setwidth double wid declare member functions class classtwo friends class classone place declaration definition class classone  friend class clas stwo program include iostream namespace std class box double width public friend void printwidth box box void setwidth double wid member function definition void box setwidth double wid width wid note printwidth member function class void printwidth box box printwidth friend box directly access member class cout width box box width endl main function program int main box box  set box width member function box setwidth   friend function print wdith printwidth box return  code piled executed produces result width box  nline unctions inline function powerful concept commonly classes function inline compiler places copy code function point function called compile time change inline function require clients function recompiled compiler replace code continue function ality inline function place keyword inline function define function calls function compiler ignore inline qualifier case defined function function definiti class definition inline function definition inline specifier inline function return max numbers include iostream namespace std inline int max int return main function program  int main cout max   max   endl cout max   max   endl cout max   max   endl return  code compiled executed produces result max    max    max    ointer object access address pointer called pointer pointer implicit parameter member functions inside member function refer invoking object friend functions pointer friends members class member functions pointer understand concept pointer include iostream namespace std class box public constructor definition box double   double   doub   cout constructor called endl length breadth  height double volume return length breadth height int compare box box return volume box volume private double length length box double breadth breadth box double height height box int main void box box1       decl box1 box box2       declare box2 box1 compare box2 cout box2 smaller box1 endl cout box2 equal larger box1 endl return  code compiled executed produces result constructor called  constructor called box2 equal larger box1 pointer lasses pointer class pointer structure acce members pointer class member access operator operator pointers structures pointers initialize pointer understand ncept pointer class include iostream namespace std class box public constructor definition box double   double   double   cout constructor called endl length breadth height double volume return length breadth height private double length length box double breadth breadth box double height height box  int main void box box1       declare box1 box box2       declare box2 box ptrbox declare pointer class save address object ptrbox box1 access member member access operator cout volume box1 ptrbox volume endl save address object ptrbox box2 access member member access operator cout volume box2 ptrbox volume endl return  code compiled executed produces result constructor called constructor called volume box1   volume box2  static embers lass define class members static static keyword declare member class static matter objects class created copy static member static member shared objects class static data initialized object created initialization class definition initialized class redeclaring static variable scope resolution operator identify class belongs  understand concept static data members include iostream namespace std class box public stat int objectcount constructor definition box double   double   double   cout constructor called endl length breadth height increase time bject created objectcount double volume return length breadth height private double length length box double breadth breadth box double height height box initialize static member class box int box objectcount  int main void  box box1       declare box1 box box2       declare box2 print total number objects cout tota objects box objectcount endl return  code compiled executed produces result constructor called constructor called total objects  static function members declaring function member atic independent object class static member function called objects class exist static functions accessed class scope resolution operator static member function access static data member static member functions functions class static member functions class scope access pointer class stat member function determine objects class created understand concept static function members include iostream namespace std class box public stat int objectcount constructor definition  box double   double   double   cout constructor called endl length breadth height increase time bject created objectcount double volume return length breadth height static int getcount return objectcount private double length length double breadth breadth box double height height box initialize static member class box int box objectcount  int main void print total number objects creating object cout inital stage count box getcount endl box box1       declare box1 box box2       declare box2  print total number objects creating object cout final stage count box getcount endl return  code compiled executed produces result inital stage count  constructor called constructor called final stage count   concepts obj ect oriented programming inheritance inheritance define class terms class easier create maintain application opportunity reuse code functionality fast impl ementation time creating class writing completely data members member functions programmer designate class inherit members existing class existing class called base class class referred derived class idea inheritance implements relationship mammal animal dog mammal dog animal base derived classes class derived classes inherit data functions multiple base classes define derived class class derivation list base class class derivation list names base classes form ass derived class access specifier base class access specifier public protected private base class defined class access specifier private default base cla shape derived class rectangle include iostream namespace std base class class shape public void setwidth int width  inheritance  void setheight int height protected int width int height derived class class rectangle public shape public int getarea return width height int main void rectangle rect rect setwidth  rect setheight  print area object cout total area rect getarea endl return  code compiled executed produces result  total area  access control inheritance derived class access private members base class base class members accessible member functions derived classes declared private base class summarize access types access access public protected private class derived classes classes derived class inherits base class methods exceptions constructors destructors copy constructors base class overloaded operators base class friend functions base class type inheritance deriving class base class base class inherited public protected private inheritance type inheritance access specifier explained protected private inheritance public inheritance commonly type inheritance followin rules applied public inheritance deriving class public base class public members base class public members derived class protected members base class protected members derived class class private members accessible directly derived class accessed calls public protected members base class protected inheritance deriving protected base class public protected embers base class protected members derived class  private inheritance deriving private base class public protected members base class private members derived class multiple inheritance lass inherit members class extended syntax class derived class access basea access baseb access public protected private base class separated comma include iostream namespace std base class shape class shape public void setwidth int width void setheight int height protected int width int height base class paintcost class paintcost  public int getcost int area return area  derived class class rectangle public shape public paintcost public int getarea return width height int main void rectangle rect int area rect setwidth  rect setheight  area rect getarea print area obj ect cout total area rect getarea endl print total cost painting cout total paint cost rect getcost area endl return   code compiled executed produces result total area  total paint cost   definition function operator scope called function overloading operator overlo ading overloaded declaration declaration declared declared declaration scope declarations arguments definition plementation overloaded function operator compiler determines definition comparing argument types function operator parameter types defini tions process selecting overloaded function operator called overload resolution function verloading multiple definitions function scope definition function differ types number arguments argument list overload function declarations differ return type function print print data types include iostream namespace std class printdata public void print int cout printing int endl void print double cout printing float endl  overloading ope rator function  void print char cout printing character endl int main void printdata print print integer print  print print float print   print pri character print return  code compiled executed produces result printing int  printing float   printing character operators verloading redefine overload built operators programmer operators user defined types overloaded operators functions special names keyword operator symbol operator define function overloaded operator return type parameter list box operator const box eclares addition operator add box objects returns final box object overloaded operators defi ned ordinary member functions class member functions case define function member function class pass arguments operand  box operator const box const box concept operator loading member function object passed argument properties accessed object object operator accessed operator xplained include iostream namespace std class box public double getvolume void return length breadth height void setlength double len length len void setbreadth double bre breadth bre void setheight double hei height hei overload operator add box objects box operator const box box box  box length length length box breadth breadth breadth box height height height return box private double length length box double breadth breadth box double height height box main function program int main box box1 declare box1 type box box box2 declare box2 type box box box3 declare box3 type box double volume   store volume box box  specification box1 setlength   box1 setbreadth   box1 setheight   box  specification box2 setlength   box2 tbreadth   box2 setheight   volume box  volume box1 getvolume cout volume box1 volume endl volume box  volume box2 getvolume  cout volume box2 volume endl object box3 box1 box2 volume box  volume box3 getvolume cout volume box3 volume endl return  code compiled executed produces result volume box1  volume box2  volume box3  overloadable overloadable operators list operators overloaded delete delete list operators overloaded  operator overloading examples operator overloading examples understanding concept operators xample  unary operators overloading  binary operators overloading  relational operators overloading  input output operators overloading  operators overloading  assignment operators overloading  function operator overloading  subscripting operator overloading  class member access operator overloading unary perators verloading unary operators operate single operand examples unary operators increment decrement erators unary minus operator logical operator unary operators operate object called operator appears left object obj obj obj postfix obj obj explain minus operator overloaded prefix postfix usage  include iostream namespace std class distance private int feet  infinite int inches   public required constructors distance feet  inches  distance int int feet inches method display distance void displaydistance cout feet inches endl overloaded minus operator distance operator feet feet inches inches return distance feet inches int main distance d1      d1 apply negation d1 displaydistance display d1 apply negation displaydistance display return  code compiled executed produces result     hope concept clear apply concept overload logical operators ncrement ecrement perators increment decrement operators unary operators explain increment operator overloaded prefix postfix usage overload operator include iostream namespace std class time private int hours   int minutes   public required constructors time hours  minutes   time int int hours minutes method display time void displaytime cout hours minutes endl overloaded prefix operator time operator minutes increment object minutes  hours minutes  return time hours min utes overloaded postfix operator time operator int save orignal time hours minutes increment object minutes inutes  hours minutes  return original return  int main time     increment display time display increment displaytime display increment displaytime display increment aga displaytime display return  code compiled executed produces result         binary perators verloading unary operators arguments examples binary operators binary operators frequently addition operator subtraction operator division operator explains addition operator overloaded overload subtraction division operators include iostream namespace std  class box double length length box double breadth breadth box double height height box public double getvolume void return length breadth height void setlength double len length len void setbreadth double bre breadth bre void setheight double hei height hei overload operator add box objects box operator const box box box box length length length box breadth breadth breadth box height height height turn box  main function program int main box box1 declare box1 type box box box2 declare box2 type box box box3 declare box3 type box double volume   store volume box box  specification box1 setlength   box1 setbreadth   box1 setheight   box  specification box2 setlength   box2 setbreadth   box2 setheight   volume box  volume box1 getvolume cout volume box1 volume endl volume box  volume box2 getvolume cout volume box2 volume endl add object box3 box1 box2 volume box  volume box3 getvolume cout volume box3 volume endl  return  code compiled executed produces result volume box1  volume box2  volume box   relational perators verloading relational operators supported language compare built data types overload operators compare objects class explains operator overloaded overload relational operators include iostream namespace std class distance private int feet  infinite int inches   public required constructors distance feet  inches  distance int int feet inches method display distance  void displaydistance cout feet inches endl overloaded minus operator distance operator feet feet inches inches return distance feet inches overloaded operator bool operator const distance feet feet return true feet feet inches inches return true return false int main distance d1     d1 cout d1 endl  cout d1 endl return  code compiled executed produces result d1 input output perators verloading input output built data types stream extraction operator stream insertion operator stream insertion stream extraction operators overloaded perform input output user defined types object operator overloading function friend class ecause called creating object explains extraction operator insertion operator include iostream namespace std class distance private int feet  infinite int inches   public required constructors distance feet  inches  distance int int feet inches  friend ostream operator stream output const distance output feet inches return output friend istream operator istream input distance input feet inches return input int main distance d1     d3 cout enter object endl cin d3 cout distance d1 endl cout distance endl cout distance d3 endl return  code compiled executed produces result enter object   distance    distance   distance   perators verloading increment decrement operators unary operators explain increment operator overloaded prefix postfix usage overload operator include iostream namespace std class time private int hours   int minutes   publi required constructors time hours  minutes  time int int hours minutes method display time void displaytime cout hours minutes endl overloaded prefix operator time operator  minutes increment object minutes  hours minu tes  return time hours minutes overloaded postfix operator time operator int save orignal time hours minutes increment object minutes minutes  hours minutes  return original return int main time     increment displaytime display increment displaytime display increment   displaytime displ increment displaytime display return  code compiled executed produces result         assignment perator verloading overload assignment operator operators create object copy constructor explains assignment operator overloaded include iostream namespace std class distance private int feet  infinite int inches   public required constructors distance feet  inches  distan int int feet inches  void operator const distance feet feet inches inches method display distance void displaydistance cout feet inches endl int main distance d1     cout distance d1 displaydistance cout distance displaydistance assignme operator d1 cout distance d1 displaydistance return  code compiled executed produces result distance   distance   distance    function perator verloading  function operator overloaded objects class type overload creating function creating operator function passe arbitrary number parameters explains function operator overloaded include iostream namespace std class distance private int feet  infinite int inches   public required constructors distance feet  inches  distance int int feet inches overload function distance operator int int int distance random calculation feet  inches  return method display distance void displaydistance  cout feet inches endl int main distance d1   cout distance d1 displaydistance d1    invoke operator cout distance displaydistance return  code compiled executed produces result distance   distance   subscripting perator verloading subscript operator norm ally access array elements operator overloaded enhance existing functionality arrays explains subscript operator overloaded include iostream namespace std const int size  class safearay private  int arr size public safearay register int  size arr int operator int size cout bounds endl return element return arr  return arr int main safearay cout   endl cout   endl cout   endl return  code compiled executed produces result      bounds valu   class ember ccess perator verloading class member access operator overloaded bit trickier defined class type pointer behavior operator member function return type pointer object class apply operator conjunction pointer dereference operator implement smart pointers pointers objects behave normal point ers perform tasks access object automatic object deletion pointer destroyed pointer point object dereferencing operator defined unary stfix operator class class ptr operator objects class ptr access members class manner pointers void ptr  oper ator  statement interpreted operator concept explains class access operator overloaded include iostream include vector namespace std tual class class obj  static int public void const cout endl void const cout endl static member definitions int obj  int obj  implement container class clas objcontainer vector obj public void add obj obj push_back obj vector standard method friend class smartpointer implement smart pointer access member obj class class smartpointer objc ontainer int public smartpointer objcontainer objc objc  return list bool operator prefix version  size return false  return false return true bool operator int postfix version return operator overload operator obj operator const cout return obj  return int main const int  obj objcontainer int  add smartpointer create iterator smart pointer return   code compiled executed produces result                      word poly morphism forms typically polymorphism occurs hierarchy classes inheritance polymorphism member function function executed depending type object invokes function base class derived classes include iostream namespace std class shape protected int width height public shape  int  width height int area cout parent class area endl return  class rectangle public shape public rectangle int  int  sha int area cout rectangle class area endl  polymorphism  return width height class triangle public shape public triangle int  int  shape int area cout triangle class area endl return width height  main function program int main shape shape rectangle rec   triangle tri   store address rectangle shape rec rectangle area shape area store address triangle shape tri triangle area shape area return   code compiled executed produces result pare class area parent class area reason incorrect output function area set compiler version defined base class called static resolution function static linkage function fixed program executed called early binding area function set compilation program slight modification program precede dec laration area shape class keyword virtual class shape protected int width height public shape int  int  width height virtual int area cout parent class area endl return  slight modification previous code compiled executed produces result rectangle class area triangle class area time compiler contents pointer type addresses objects tri rec classes stored shape respective area function called  child classes eparate implementation function area polymorphism generally classes function parameters implementations virtual function virtual function function base class declared keyword virtual defining base class virtual function version derived class signals compiler static linkage function selection function called point program based kind object called sort operation referred dynamic linkage late binding pure virtual functions include virtual function base class redefined derived class suit objects class meaningful definition function base class change virtua function area base class class shape protected int width height public shape int  int  width height pure virtual function virtual int rea   tells compiler function body virtual function called pure virtual function  data abstraction refers providing essential hidi background details represent needed program presenting details data abstraction programming design technique relies separation interface implementation real li fe turn change channel adjust volume add external components speakers vcrs dvd players internal details receives signals air cable translates finally displays screen television separates internal implementation external interface play interfaces power button channel changer volume control knowledge internals classes great level data abstraction provide sufficient public methods play ith functionality object manipulate object data state knowing class implemented internally program sort function knowing algorithm function sort values fact underlying implementation sorting functionality change releases library long interface stays function work classe define abstract data types adt cout object class ostream stream data standard output include iostream namespace std int main cout endl return   data abstraction  eed understand cout displays text user screen public interface underlying implementation cout free change access labels enforce abstraction access labels define abstr interface class class access labels members defined public label accessible parts program data abstraction view type defined public members members defined private label accessible code class private sections hide implementation code type restrictions access label access label specifies access level succeed ing member definitions access level remains access label encountered closing brace class body benefits data abstraction data abstraction advantages class ternals protected inadvertent user level errors corrupt state object class implementation evolve time response changing requirements bug reports requiring change user level code definin data members private class class author free data implementation class code examined affect change data public unction directly access data members representation broken data abstraction program implement class public private members data abstraction examp include iostream namespace std class adder public constructor adder int   total interface void addnum int number total number interface int gettotal return total private hidden data int total int main adder addnum  addnum  addnum  cout total gettotal endl return  code compiled executed produces result total  class adds numbers returns sum public members addnum gettotal inter faces user class private member total user needed class operate properly  designing strategy abstraction separates code interface implementation designing component interface independent implementation change underlying implementation interface remain intact case programs terfaces impacted recompilation latest implementation  programs composed fundamental elements program statements code program performs actions called functions program data data program program functions encapsulation object oriented programming concept binds data functions manipulate data safe interference misuse data encapsulation led oop concept data hiding data encapsulation mechanism bundling data functions data abstraction mechanism exposing interfaces hiding implementation details user supports properties encapsulation data hiding creation user defined types called classes ready studied class private protected public members default items defined class private class box public double getvolume void return length breadth height private double length length box double breadth breadth box double height height box variables length breadth height private accessed members box class program encapsulation achieved parts class public accessible parts program declare public keyword var iables functions  data encapsulati  defined public specifier accessible functions program making class friend exposes implementation details reduces encapsulation ideal details class hidden classes data encapsulation program implement class public private members data encapsulation data abstraction includ iostream namespace std class adder public constructor adder int  total interface void addnum int number total number interface int gettotal return total private hidden data int total int main  adder addnum  addnum  addnum  cout otal gettotal endl return  code compiled executed produces result total  class adds numbers returns sum public members addnum gettotal interfaces user class private member total hidden needed class operate properly designing strategy learn class members private default expose good encapsulation applied frequently data members applies equally members including virtual functions  interface describes behavior capabilities class committing implementation class interfaces implemented abstract classes abstract classes confused data bstraction concept keeping implementation details separate data class abstract declaring functions pure virtual function pure virtual function placing  declar ation class box public pure virtual function virtual double getvolume  private double length length box double breadth breadth box double height height bo purpose abstract class referred abc provide base class classes inherit abstract classes instantiate objects serves interface attempting instanti ate object abstract class compilation error subclass abc instantiated implement virtual functions supports interface declared abc failure override pure virtual function derived class attempting instantiate objects class compilation error classes instantiate objects called concrete classes abstract class wher parent class interface base class implement function called getarea include iostream  interf aces  namespace std base class class shape public pure virtual function providing interface framework virtual int area  void setwidth int width void setheight int height protected int width int height derived classes class rectangle public shape public int getarea return width height class triangle public shape public  int getarea return width height  int main void rectangle rect triangle tri rect setwidth  rect setheight  print area object cout total rectangle area rect getarea endl tri setwidth  tri setheight  print area object cout total triangle area tri getarea endl return  code mpiled executed produces result total rectangle area  total triangle area  abstract class defined interface terms getarea classes implemented function algorith calculate area specific shape designing strategy object oriented abstract base class provide common standardized interface external applications inheritance abstract base class derived classes formed operate  capabilities public functions offered external applications provided pure virtual functions abstract base class implementations ure virtual functions provided derived classes correspond specific types application architecture applications easily defined  iostream standard library cin cout methods reading standard input writing standard output tutorial teach read write file requires standard library called fstream defines data types data type description ofstream data type represents output file stream create files write files ifstream ata type represents input file stream read files fstream data type represents file stream generally capabilities ofstream ifstream create files write files read files perform file processing header files iostream fstream included source file opening file file opened read write ofstr eam fstream object open file writing ifstream object open file reading purpose standard syntax open function member fstream ifstream ofstream objects void ope const char filename ios openmode mode argument specifies location file opened argument open member function defines mode file opened mode flag description  files stream  ios app append mode output file appended ios ate open file output read write control file ios open file reading ios open file writing ios trunc file exists contents truncated opening file combine values ing open file write mode truncate case exists follow ing syntax ofstream outfile outfile open file dat ios ios trunc open file reading writing purpose fstream afile afile open file dat ios ios closing file program terminates automatically flushes streams release allocated memory close opened files good practice programmer close opened files program termination standard syntax close function member fstream ifstream ofstream objects void close writing file programming write file program stream insertion operator operator output screen difference ofstream fstream object cout object reading file  read file program stream traction operator operator input keyboard difference ifstream fstream object cin object read write program opens file reading writing mode writing entered user file named afile dat program reads file outputs screen include fstream include iostream namespace std int mai char data  open file write mode ofstream outfile outfile open afile dat cout writing file endl cout enter cin getline data  write inputted data ile outfile data endl cout enter age cin data cin ignore write inputted data file outfile data endl  close opened file outfile close open file read ode ifstream infile infile open afile dat cout reading file endl infile data write data screen cout data endl read data file display infile data cout data endl close opened file infile close return  code compiled executed produces sample input output writing file enter zara enter yo age  reading file zara  examples additional functions cin object getline function read ignore function ignore extra characters left previous read statement  file positi pointers istream ostream provide member functions repositioning file position pointer member functions seekg seek istream seekp seek ostream argument seekg seekp long int eger argument seek direction seek direction ios beg default positioning relative stream ios cur positioning relative current position stream ios positioning relative stream file position pointer integer specifies location file number bytes file starting location examples positioning file position pointer position nth byte fileobject assumes ios beg fileobject seekg position bytes forward fileobject fileobject seekg ios cur position bytes fileobject fileobject seekg ios positi fileobject fileobject seekg  ios  exception problem arises execution program exception response exceptional circumstance arises program runnin attempt divide exceptions provide transfer control program exception handling built keywords catch throw throw program throws exception problem sho ws throw keyword catch program catches exception exception handler place program handle problem catch keyword catching exception block identifies block code exceptions activated catch blocks assuming block raise exception method catches exception combination catch keywords catch block code generate exception code catch block referred protected code syntax catch protected code catch exceptionname e1 catch block catch exceptionname catch block catch exceptionname catch block list multiple catch statements catch type exceptions case block raises exception differe situations  exception handli  throwing exceptions exceptions thrown code block throw statement operand throw statement determines type exception expression type result expression determines type exception thrown throwing exception dividing condition occurs double division int int  throw division condition return catch ing exceptions catch block block catches exception type exception catch determined exception declaration appears parentheses keyword catch protected code catch exceptionname code handle exceptionname exception code catch exception exceptionname type catch block handle type exception thrown block ellipsis parentheses enclosing exception declaration protected code catch  code handle exception throws division exception catch catch block include iostream namespace std double division int int  throw division condition return int main int  int  double  division cout endl catch const char msg cerr msg endl return   raising exception type const char catching exception const char cat block compile code produce result division condition standard exceptions list standard exceptions defined exception programs arranged parent child class hierarchy small description exception mentioned hierarchy exception description std exc eption exception parent class standard exceptions  std bad_alloc thrown std bad_cast thrown dynamic_cast std bad_exception device handle unexpected exceptions progra std bad_typeid thrown typeid std logic_error exception theoretically detected reading code std domain_error exception thrown mathematically invalid domain std invalid_argument thi thrown invalid arguments std length_error thrown big std string created std out_of_range thrown method std vector std bitset operator std runtime_error exception theoretically detected reading code std overflow_error thrown mathematical overflow occurs std range_error occur store range std underflow_error thrown mathematical underflow occurs define exceptions define exceptions inheriting overriding exception class functionality std exception class implement exception standard include iostream include exception namespace std  struct myexception public exception const char const throw return exception int main throw myexcept ion catch myexception std cout myexception caught std endl std cout std endl catch std exception errors produce result myexception caught xception public method provided exception class overridden child exception classes returns exception  good understanding dynamic memory works essential good programmer memory program divided parts stack variables declared inside function memory stack heap unused memory program allocate memory dynamically program runs times aware advance memory store defined variable size required memory determined time allocate memory time heap variable type special operator returns address space allocated operator called operator dynamically allocated memory delete operator allocates memory allocated operator delete operators generic syntax operator allocate memory dynamically data type data type data type cou ld built data type including array user defined data types include class structure start built data types define pointer type double request memory allocated execution time operator statements double pvalue null pointer initialized null pvalue double request memory variable memory allocated free store good practice check operator returning null pointer action  dynamic memory  double pvalue null pvalue double cout error memory endl exit  alloc function exists recommended avoid malloc function main advantage malloc allocate memory constructs objects prime purpose point feel variable dynamically allocated required free memory occupies free store delete operator delete pvalue release memory pointed pvalue abov concepts form delete work include iostream namespace std int main double pvalue null pointer initialized null pvalue double request memory variable pvalue   store allocated address cout pvalue pvalue endl delete pvalue free memory return  compile code produce result  alue pvalue  dynamic memory allocation arrays allocate memory array characters string  characters syntax allocate memory dynamically cha pvalue null pointer initialized null pvalue char  request memory variable remove array created statement delete pvalue delete array pointed pvalue syntax operator multi dimensional array int row  int col  double pvalue double row allocate memory rows allocate memory columns int  col pvalue double col syntax release memory multi dimensional int  col delete pvalue delete pvalue dynamic memory allocation objects objects simple data type code array objects clarify concept include iostream namespace std  class box public box cout constructor called endl box cout destructor called endl int main box myboxarray box  delete myboxarray delete array return  allocate array box objects simple constructor called times deleting objects destructor called number times compile code produce result constructor called constructor called constructor called nstructor called destructor called destructor called destructor called destructor called  situation persons zara class differentiate ould additional area live area mother father situation applications writing code function called xyz library function xyz compiler knowing version xyz function referring code namespace designed difficulty additional differentiate functions classes variables libraries namespace define context names defined essence namespace defines scope defining namespace namespace definition keyword namespace namespace namespace namespace_name code declarations namespace enabled version func tion variable prepend namespace code code variable function namespace scope entities including variable functions include iostream namespace std space mespace first_space void func cout inside first_space endl  namespaces  space namespace second_space void func cout inside second_space endl int main calls function ace first_space func calls function space second_space func return  compile code produce result inside first_space inside second_space directive avoid prepending namespaces namespace directive directive tells compiler subsequent code making names namespace namespace implied code include ios tream namespace std space namespace first_space void func cout inside first_space endl  space namespace second_space void func cout inside second_space endl usin namespace first_space int main calls function space func return  compile code produce result inside first_space directive refer item namespace std namespace intend cout refer std cout subsequent code refer cout prepending namespace items std namespace explicit include iostream std cout int main cout std endl std std endl  return  compile code produce result std endl std names introduced directive obey normal scope rules visible point directive scope directive entities defi ned outer scope hidden discontiguous namespaces namespace defined parts namespace sum separately defined parts separate parts namespace spread multiple files namespace requires defined file declared writing namespace definition defines namespace adds elements existing namespace namespace_name code declar ations nested namespaces namespaces nested define namespace inside space namespace namespace_name1 code declarations namespace namespace_name2 code declarations acc ess members nested namespace resolution operators access members namespace_name2 namespace namespace_name1 namespace_name2  access members namespace name1 namespace namespace_name1 ove statements namespace_name1 elements namespace_name2 scope include iostream namespace std space namespace first_space void func cout inside fir st_space endl space namespace second_space void func cout inside second_space endl namespace first_space second_space int main calls function space func return  compile code produce result inside second_space  templates foundation generic programming involves writing code independ ent type template blueprint formula creating generic class function library containers iterators algorithms examples generic programming developed template concept single definition container vector define kinds vectors vector int vector string templates define functions classes work function templa general form template function definition template class type ret type func parameter list body function type placeholder data type function function definition function template returns maximum values include iostream include string namespace std template typename inline const max const const retu int main  templates  int  int  cout max max endl double f1   double   cout max f1 max f1 endl string s1 string  cout max s1 max s1 endl return  compile code produce result max  max f1   max s1 class template define function templates define class templates general form generic class declaration template class type class class type placeholder type class instantiated yo define generic data type comma separated list define class stack implement generic methods push pop elements stack  include iostream include vector include cstdli include string include stdexcept namespace std template class class stack private vector elems elements public void push const push element void pop pop element const return element bool const return true return elems template class void stack push const elem append copy passed element elems push _back elem template class void stack pop elems throw out_of_range stack pop stack  remove element elems pop_back template class stack const elems throw out_of_range stack stack return copy element return elems int main stack int intstack stack ints stack string stringstack stack strings manipulate int stack intstack push  cout intstack endl manipulate string stack stringstack push cout stringstack std endl stringstack pop stringstack pop catch exception const cerr exception endl return   compile code produce result  exception stack pop stack  preprocessors directives instruction compiler preprocess actual compilation starts eprocessor directives white space characters preprocessor directive preprocessor directives statements semicolon include directive examples macro include header file source file number preprocessor directives supported include define directives define preprocessor define preprocessor directive creates symbolic constants symbolic constant called macro general form directive define macro replacement text appears file subsequent occurrences macro ile replaced replacement text program compiled include iostream namespace std define   int main cout endl return  preprocessin code result assum ing source code file compile option redirect result  preprocessor  test check test lots fin eplaced gcc test cpp test int main cout   endl return  function macros define define macro argument include iostream namespace std define min int main int   cout minimum min endl return  compile code produce result minimu  conditional compilation  directives compile selective portions program source code process called conditional compilation conditional preprocessor construct sel ection structure preprocessor code ifndef null define null  endif compile program debugging purpose turn debugging single macro ifdef debug cerr variable endl endif cerr statement compiled program symbolic constant debug defined directive ifdef debug  stat ment comment portion program ollows  code prevented compiling endif include iostream namespace std define debug define min int main int   ifdef debug cerr trace inside main function endl endif   commented cout mkstr endl endif cout minimum min endl ifdef debug cerr trace coming main function endl endif return  compile code produce result trace inside main function minimum  trace coming main function operators preprocessor operators ansi iso operator replacement text token converted string surrounded quotes macro definition include iostream namespace std define mkstr int main cout mkstr endl return   compile code produce result worked simple understand preprocessor turns cout mkstr endl turned cout endl operator concatenate tokens define concat concat appears program arguments concatenated replace macro concat replaced program include iostream namespace std define concat int main int xy  cout concat return  compile code produce result  worked simple understand preprocessor transforms cout concat  transformed cout xy predefined macros number predefined macros mentioned macro description __line__ current number program compiled __file__ current file program wh compiled __date__ string form month day year translation source file object code __time__ string form hour minute time prog ram compiled macros include iostream namespace std int main cout __line__ __line__ endl cout __file__ __file__ endl cout __date__ __date__ endl cout __time__ __time__ endl return  compile code produce result  __line__  __file__ test cpp __date__ eb   __time__     signals interrupts delivered process operating terminate program prematurely generate interrupts pressing ctrl linux mac windows signals caught program list signals catch program actions based signal signals defined header file csignal signal description sigabrt abnormal termination program abort sigfpe erroneous arithmetic operation divide operation overflow sigill detection illegal nstruction sigint receipt interactive attention signal sigsegv invalid access storage sigterm termination request program signal unction signal handling library function signal trap unexpected syntax signal function void signal int sig void func int int keeping simple function receives arguments argument integer represents signal number argument pointer signal handling function write simple program catch sigint signal signal function signal catch program register signal signal function associate sig nal handler examine include iostream  signal handling  include csignal namespace std void signalhandler int signum cout interrupt signal signum received cleanup close stuff ter minate program exit signum int main register signal sigint signal handler signal sigint signalhandler  cout sleep endl sleep  return  abov code compiled executed produces result sleep sleep sleep press ctrl interrupt program program catch signal printing  sleep sleep sleep interrupt signal  received raise unction generate signals function raise takes integer signal number argument syn tax int raise signal sig sig signal number send signals sigint sigabrt sigfpe sigill sigsegv sigterm sighup raise signal internally raise function include iost ream include csignal namespace std void signalhandler int signum cout interrupt signal signum received cleanup close stuff terminate program exit signum int main int  register signal sigint signal handler signal sigint signalhandler  cout sleep endl  raise sigint sleep  return  code compiled executed produces result automatically sleep sleep sleep interrupt signal  received  multithreading ecialized form multitasking multitasking feature computer programs concurrently general types multitasking process based thread based process based multitasking handles current execution programs thread based multitasking deals concurrent execution pieces program multithreaded program parts concurrently program called thread thread defines separate path execution built support multithreaded applications relies operating provide feature tutorial assumes working linux write multi threaded program posix posix threads pthreads api unix posix systems freebsd netbsd gnu linux mac solaris creating threads rou tine create posix thread include pthread pthread_create thread attr start_routine arg pthread_create creates thread executable routine called number times yo code description parameters parameter description thread opaque unique identifier thread returned subroutine attr opaque attribute object set thread attributes thre attributes object null default values start_routine routine thread execute created  multithreading  arg single argument passed start_routine passed reference pointer cast type void null argument passed maximum number threads created process implementation dependent created threads peers create threads implied hierarchy dependency betwe threads terminating threads routine terminate posix thread include pthread pthread_exit status pthread_exit explicitly exit thread typically pthread_exit routine called thread completed work longer required exist main finishes threads created exits pthread_exit threads continue execute automatically terminated main finishes simple code creates  threads pthread_create routine thread prints message terminates pthread_exit include iostream include cstdlib include pthread sing namespace std define num_threads  void printhello void threadid long tid tid long threadid cout thread tid endl  pthread_exit null int main pthread_t threads num_threads int int  num_threads cout main creating thread endl pthread_create threads null printhello void cout error unable eate thread endl exit  pthread_exit null compile program lpthread library gcc test cpp lpthread execute program output main creating thread  main creating thread  main creating thread  main creating thread  main creating thread  thread  thread  thread  hread  thread   passing arguments threads pass multiple arguments structure pass data type thread callback points void explained include iostream include cstdlib include pthread namespace std define num_threads  struct thread_data int thread_id char message void printhello void threadarg struct thread_data my_data my_data struct thr ead_data threadarg cout thread my_data thread_id cout message my_data message endl pthread_exit null int main pthread_t threads num_threads struct thread_data num_threads int  int  num_threads cout main creating thread endl thread_id message message pthread_create threads null printhello cout error unable create thread endl exit  pthread_exit null code compiled executed produces result main creating thread  main creating thread  main creating thread  main creating thread  main creating thread  thread  message message thread  message message thread  message message thread  message message thread  message message joining detaching threads routines join detach threads pthread_join threadid status pthread_detach threadid  pthread_join subroutin blocks calling thread threadid thread terminates thread created attributes defines joinable detached threads created joinable joined thread created det ached joined demonstrates wait thread completions pthread join routine include iostream include cstdlib include pthread include unistd namespace std define num_threads  void wait void int long tid tid long sleep  cout sleeping thread endl cout thread tid exiting endl pthread_exit null int main int int pthre ad_t threads num_threads pthread_attr_t attr void status  initialize set thread joinable pthread_attr_init attr pthread_attr_setdetachstate attr pthread_create_joinable  num_threads cout main creating thread endl pthread_create threads null wait void cout error unable create thread endl exit  free attribute wait threads pthread_attr_destroy attr  num_threads pthread_join threads status cout error unable join endl exit  cout main complet thread cout exiting status status endl cout main program exiting endl pthread_exit null code compiled executed produces result main creating thread  main creating thread  main creating thread   main creating thread  main creating thread  sleeping thread thread  exiting sleeping thread thread  exiting sleeping thread thread  exiting sleeping thread thread  exiting sleeping thread thread  exiting main completed thread  exiting status  main completed thread  exiting status  main completed thread  exiting status  main completed thread  exiting status  main completed thread  exiting status  main program exiting  cgi common gateway interface cgi set stand ards define exchanged web server custom script cgi specs maintained ncsa ncsa defines cgi common gateway interface cgi standard external gateway progra interface servers servers current version cgi   cgi   progress web browsing understand concept cgi click hyperlink browse web browser contacts web server demand filename web server parse filename finds requested file web server sends file browser sends error essage indicating requested wrong file web browser takes response web server displays received file error message based received response set server henever file directory requested file executed program produced output program browser display common gateway interface cgi standard protocol enabling applications called cgi programs cgi scripts interact web servers clients cgi programs written python perl shell cgi architecture diagram simple program simple arc hitecture cgi  web programming  web server configuration proceed cgi programming web server supports cgi configured handle cgi progr ams cgi programs executed server pre configured directory directory called cgi directory convention named var cgi bin convention cgi files extension cgi executable default apache web server configured cgi programs var cgi bin directory cgi scripts modify httpd conf file directory var bin allowoverride options execcgi order deny directory  directory var cgi bin options directory assume web server running ther cgi program perl shell cgi program program content include iostream namespace std int main cout content type text html cout html cout head cout title cgi program title cout head cout body cout cgi program cout body cout html return  compile abov code executable cplusplus cgi file var cgi bin directory content running cgi program change mode file chmod  cplusplus cgi unix command ile executable click cplusplus cgi produces output irst cgi program bove program simple program writing output stdout file screen extra feature print ing content type text html browser content type displayed browser screen  understood basic concept cgi write complicated cgi programs python cgi program interact ernal rdbms exchange header content type text html header browser understand content header form field field content content type text html headers frequently cgi programming header description content type mime string defining format file returned content type text html expires invalid browser decide pag refreshed valid string format  jan     gmt location returned requested redirect request file modified modification resource content length length bytes data returned browser report estimated download time file set cookie string set cookie passed string environment variables cgi program access environment variables variables play role writing cgi program  variable description content_type data type content sed client sending attached content server file upload content_length length query post requests http_cookie return set cookies form key pair _user_agent user agent request header field user agent originating request web browser path_info path cgi script query_string encoded meth request remote_addr address remote host making request logging authentication purpose remote_host fully qualified host making request rem ote_addr address request_method method request common methods post script_filename path cgi script script_name cgi script server_name server host address server_software version software server running  small cgi program list cgi variables include iostream include stdlib namespace std const string env  comspec document_root gateway_interface http_accept http_accept_encoding http_accept_language http_connection http_host http_us er_agent path query_string remote_addr remote_port request_method request_uri script_filename script_name server_addr server_admin server_name server_port server_p rotocol server_signature server_software int main cout content type text html cout html cout head cout title cgi environment variables title cout head cout body cout table border  cellspacing  int   cout env attempt retrieve environment variable getenv env c_str   cout cout environment variable exist cout cout cout body cout html return  output comspec environment variable exist document_root var tutorialspoint gateway_interface cgi   http_accept text html applicat ion xhtml xml http_accept_encoding gzip deflate http_accept_language http_connection alive http_host tutorialspoint http_user_agent mozilla   windows   wow64 trident     gecko path sb usr sbin bin usr bin query_string remote_addr     remote_port  request_method request_uri cgi bin cpp_env cgi script_filename var cgi bin cpp_env cgi script_name cgi bin cpp_env cgi server_addr      server_admin webmaster tutorialspoint server_name tutorialspoint server_port  server_protocol   server_signature server_software apache cgi library real examples operations cgi program cgi library written program download ftp ftp gnu org gnu cgicc follow steps install library tar xzf cgicc tar gz cgicc configure prefix usr install check documentation cgi lib documentation post methods situations pass browser web server ultimately cgi program frequently browser methods pass web server methods method post method passing sing ethod method sends encoded user appended request encoded separated character test cgi bin cpp cgi key1 value1 key2 value2 method default method pass browser web server produces long string appears browser location box method password sensitive pass server method size limitation pass  characters request string method passed query_string header accessible cgi program query_string environment variable  pass simply concatenating key pairs html form tags pass method simple method simple pass values hello_get program method cgi bin cpp_get cgi first_name zara last_name ali program enerate cpp_get cgi cgi program handle input web browser cgi library easy access passed include iostream include vector include string include stdio include stdl include cgicc cgidefs include cgicc cgicc include cgicc httphtmlheader include cgicc htmlclasses namespace std namespace cgicc int main cgicc formdata cout content type text html cout html cout head cout title post methods title cout head cout body  form_iterator formdata getelement first_name isempty formdata cout endl cout text entered endl cout formdata getelement last_name isempty formdata cout endl cout text entered endl cout cout body cout html return  compile program pp_get cgi cpp_get cpp lcgicc generate cpp_get cgi cgi directory access link cgi bin cpp_get cgi first_name zara last_name ali generate result zara ali simple orm method simple passes values html form submit button cgi script cpp_get cgi handle input form action cgi bin cpp_get cgi method  input type tex first_name input type text last_name input type submit submit form actual output form enter click submit button result rst passing sing post ethod generally reliable method passing cgi program post method packages methods sending text string sends separate message message cgi script form standard input cpp_get cgi program handle post method passes values html form submit button time post method form action cgi bin cpp_get cgi method post input type text first_name input type text last_name input type submit submit form actual output form enter lick submit button result passing checkbox data cgi program checkboxes whe option required selected  html code form checkboxes form action cgi bin cpp_checkbox cgi method post target _blank input type checkbox maths maths input type checkbox physics physics input type submit select subject form result code form maths physics program generate cpp_checkbox cgi script handle input web browser checkbox button include iostream include vector include string include stdio nclude stdlib include cgicc cgidefs include cgicc cgicc include cgicc httphtmlheader include cgicc htmlclasses namespace std namespace cgicc int main cgicc formdata bool maths_flag physics_flag cout content type text html cout html  cout head cout title checkbox data cgi title cout head cout body maths_flag formdata querycheckbox maths maths_flag cout maths flag endl cout maths flag endl cout physics_flag formdata querycheckbox physics physics_flag cout physics flag endl cout physics flag endl cout cout body cout html return  passing radio button data cgi program radio buttons option required sel ected html code form radio button form action cgi bin cpp_radiobutton cgi method post target _blank input type radio subject maths checked checked maths  input type radio subject physics physics input type submit select subject form result code form maths physics program generate cpp_radiobutton cgi script handle input web browser radio buttons include iostream include vector include string inclu stdio include stdlib include cgicc cgidefs include cgicc cgicc include cgicc httphtmlheader include cgicc htmlclasses namespace std namespace cgicc int main cgicc formdata cout cont ent type text html cout html cout head cout title radio button data cgi title cout head cout body form_iterator formdata getelement subject  isempty formdata cout radio box selected endl cout cout body cout html return  passing text area data cgi program textarea element ltiline text passed cgi program html code form textarea box form action cgi bin cpp_textarea cgi method post target _blank textarea textcontent cols  rows  type yo text textarea input type submit submit form result code form program generate cpp_text area cgi script handle input web browser text area include iostream include vector include string include stdio  include stdlib include cgicc cgidefs include cgicc cgicc include cgicc httphtmlhea der include cgicc htmlclasses namespace std namespace cgicc int main cgicc formdata cout content type text html cout html cout head cout title text area data cgi itle cout head cout body form_iterator formdata getelement textcontent isempty formdata cout text content endl cout text ntered endl cout cout body cout html return   passing drop box data cgi program drop box options selected html code form drop box form action cgi bin cpp_dropdown cgi method post target _blank select dropdown option maths selected maths option option physics phys ics option select input type submit submit form result code form program generate cpp_dropdown cgi script handle input web browser drop box include iostream include vector include string include stdio include stdlib include cgicc cgidefs include cgicc cgicc include cgicc httphtmlheader include cgicc htmlclasses namespace std namespace cgicc int main cgicc formdata  cout content type text html cout html cout head cout title drop box data cgi itle cout head cout body form_iterator formdata getelement dropdown isempty formdata cout selected endl cout body cout html return  cookies cgi protocol stateless protocol commercial website required maintain session user registration nds completing maintain user session web situations cookies efficient method remembering tracking preferences purchases commissions required visitor experience site statistics works server sends data visitor browser form cookie browser accept cookie stored plain text record visitor hard rive visitor arrives site cookie retrieval retrieved server remembers stored cookies plain text data record  variable length fields expires cookie expire blank cookie expire visitor quits browser  domain domain site path path directory web set cookie blank retrieve cookie directory secure field word secure cookie retrieved secure server field blank restriction exists cookies set trieved form key pairs setting cookies easy send cookies browser cookies header content type filed assuming set userid password cookies ookies setting include iostream namespace std int main cout set cookie userid xyz cout set cookie password xyz123 cout set cookie domain tutorialspoint cout set cookie path perl cout content type text html cout html cout head cout title cookies cgi title cout head cout body cout setting cookies endl cout cout body  cout html return  understood set cookies set cookie header set cookies optional set cookies attributes expi res domain path notable cookies set sending magic content type text html compile program produce setcookies cgi set cookies link set cookies computer bin setcookies cgi retrieving cookies easy retrieve set cookies cookies stored cgi environment variable http_cookie form key1 value1 key2 value2 key3 value3 retriev cookies include iostream include vector include string include stdio include stdlib include cgicc cgidefs include cgicc cgicc include cgicc httphtmlheader include cgicc htmlclasses nam espace std namespace cgicc int main  cgicc cgi const_cookie_iterator cci cout content type text html cout html cout head cout title cookies cgi title cout head cout body cout table border  cellspacing  environment variables const cgienvironment env cgi getenvironment cci env getcookielist cci env getcookielist cci cout cci getname cout cci getvalue cout cout table cout cout body cout html return  compile program produce getcookies cgi list cookies computer cgi bin getcookies cgi  produce list cookies set previous tion cookies set computer userid xyz password xyz123 domain tutorialspoint path perl file upload upload file html form enctype attribute set multipart form data input tag file type create browse button html body form enctype multipart form data action cgi bin cpp_uploadfile cgi method post file input type file userfile input type submit upload form body html result code form file note disabled intentionally people uploading files server code server script cpp_uploadfile cpp handle file upload include iostream include vector include string include stdio include stdlib  include cgicc cgidefs include cgicc cgicc include cgicc httphtmlheader include cgicc htmlclasses namespace std namespace cgicc int main cgicc cgi cout content type text html cout html cout head cout title file upload cgi title cout head cout body list files uploaded const_file_iterator file cgi getfile userfile file cgi getfiles send data type cout cout httpcontentheader file getdatatype write content cout file writetostream cout cout file uploaded cout body cout html return   writing content cout stream open file stream save content uploaded file file desired location hope enjoyed tutorial send feedback  hope ready underst ood concept template discussed earlier stl standard template library powerful set template classes provide general purpose classes functions templates implement popular commonly algorithms data structures vectors lists queues stacks core standard template library structured components component description tainers containers manage collections objects kind types containers deque list vector map algorithms algorithms containers provide perform itialization sorting searching transforming contents containers iterators iterators step elements collections objects collections containers subsets containers discuss stl components chapter discussing standard library mind components rich set pre defined functions complicated tasks easy fashion program demonstrates vector container standard template array exception automatically handles storage requirements case grows include iostream include vector space std int main  stl tutorial  create vector store int vector int vec int display original size vec cout vector size vec size endl push  values vector   vec push_back display extended size vec cout extended vector size vec size endl access  values vector   cout vec vec endl iterator access values vector int iterator vec vec cout endl return  code compiled executed produces result vector size  extended vector size  vec    vec   vec   vec   vec        points functions push_back member function inserts vector expanding size needed size function displays size vector function returns iterator start vector function returns iterator vector  standard library categorized parts standard function library library consists general purpose stand functions class function library inherited object oriented class library collection classes functions standard library incorporates standa libraries small additions support type safety standard function library standard function library divided categories string character handling mathematical time localizat ion dynamic allocation miscellaneous wide character functions object oriented class library standard object oriented library defines extensive set classes provide support number common activities including strings numeric processing library includes standard classes string class numeric classes stl container classes stl algorithms stl function objects stl iterators stl allocators  standard library  localization library exception handling classes miscellaneous support library