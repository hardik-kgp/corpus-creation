programming   printf function message displayed screen  return  terminates main function returns  compile execute program save source code file compile simple steps  open text editor add mentioned code  save file  open command prompt directory saved file  type gcc press enter compile code  errors code command prompt generate executable file  type execute program  output printed screen gcc gcc compiler path running directory source file programming  basic structure program easy understand basic building blocks programming language tokens program consists tokens token keywo identifier constant string literal symbol statement consists tokens printf individual tokens printf semicolons program semicolon statement terminator individual statement ended semicolon logical entity statements printf return  comments commen helping text program compiler start terminate characters program  basic syntax programming  comments comments occur ring character literals identifiers identifier identify variable function user defined item identifier starts letter underscore _ letters underscores digits   punctuation characters identifiers case sensitive programming language manpower manpower identifiers examples acceptable dentifiers mohd zara abc move_name a_123 myname50 _temp a23b9 retval keywords list reserved reserved constant variable identifier names auto lse long switch break enum register typedef case extern return union char float short unsigned const signed void continue goto sizeof volatile default static int struct _packed double programming  whitespace wh itespace comment blank compiler totally ignores whitespace term blanks tabs newline characters comments whitespace separates statement enab compiler identify element statement int ends element statement int age whitespace character space int age piler distinguish hand statement fruit apples oranges total fruit whitespace characters fruit apples free include ome increase readability programming  ata types refer extensive declaring variables functions types type variable determines space occupies storage bit pattern stored interpreted types classified types description  basic types arithmetic types classified integer ypes floating point types  enumerated types arithmetic types define variables assign discrete integer values program  type void type specifier void indica tes  derived types include pointer types array types structure types union types function types array types structure types referred collectively aggregate types type function specifies type function return basic types types covered upcoming chapters integer types ollowing table details standard integer types storage sizes ranges  data types programming  type storage size range char  byte     unsigned char  byte   signed char  byte   int   bytes             unsigned int   bytes         short  bytes     unsigned short  bytes    long  bytes         unsigned long  bytes      exa size type variable platform sizeof operator expressions sizeof type yields storage size object type bytes size int type machine include stdio include limits int main printf storage size int sizeof int programming  return  compile execute program produces result linux storage size int  floating poi types ollowing table details standard floating point types storage sizes ranges precision type storage size range precision float  byte  e   e   places double  byte  e   e   places long double  byte  e   e   places header file float defines macros values details binary representation real numbers programs ollowing print storage space float type range values include stdio include float int main printf storage size float sizeof float printf minimum float positive alue flt_min printf maximum float positive flt_max printf precision flt_dig return  programming  compile execute program produces result linux storage size float  minimum float positive  e  maximum float positive  e  precision  void type void type specifies kinds situations types description  func tion returns void functions return return void function return return type void void exit int status  function arguments void arious functions accept parameter function parameter accept void int rand void  pointers void pointer type void represents address object type memo allocation function void malloc size_t size returns pointer void casted data type programming  variable storage area programs manipulate variable specific type determines size layout variable memory range values stored emory set operations applied variable variable composed letters digits underscore character letter underscore upper lowercase letters distinct bec ause case sensitive based basic types explained previous chapter basic variable types type description char typically single octet byte integer type int natural size inte ger machine float single precision floating point double double precision floating point void represents absence type programming language define types variables cover subsequent chapters enumeration pointer array structure union chapter study basic variable types variable definition variable definition compiler storage create variable variable definition specifies data type list variables type type variable_list  variables programming  type valid data type including char w_char int float double bool user defined object variable_list consist identifier names separated commas valid declarations int char float salary double int declares defines variables instruct compiler create variables named type int variables initialized assigned initial declaration initializer consists equal sign constant expre ssion type variable_name examples extern int   declaration int   definition initializing byte  definition initializes char variable definition initializer variables static storage duration implicitly initialized null bytes  initial variables und efined variable declaration variable declaration assurance compiler exists variable type compiler proceed compilation requiring mplete variable variable declaration meaning time compilation compiler actual variable declaration time linking program variable declaration multiple fil define variable files time linking program keyword extern declare variable place declare variable multiple times progra defined file function block code variables declared defined initialized inside main function programming  include stdio riable declaration extern int extern int extern float int main variable definition int int float actual initialization   printf     printf return  code compiled executed produces result    ame concept applies function declaration provide function time declaration actual definition programming  function declaration int func int main function int func function definition int func return  lvalues rvalues kinds expressions lvalue expressions refer memory location called lvalue expression lvalue left hand hand assignment rvalue term rvalue refers data stored address memory rvalue expression assigned rvalue hand left hand assignment variables lvalue left hand assignment numeric literals rvalues assigned left hand ollowing valid invalid statement int  lid statement   invalid statement generate compile time error programming  onstants refer fixed values program alte execution fixed values called literals constants basic data types integer constant floating constant character constant string literal enumeration constants onstants treated regular variables values modified definition integer iterals integer literal octal hexadecimal constant prefix specifies base radix x x hexadecimal  octal integer literal suffix combination unsigned long suffix uppercase lowercase order examples integer literals  legal u legal xfeel legal  illegal  octal digit uu illegal repeat suffix examples type nteger liter als   octal x4b hexadecimal  int u unsigned int l long ul unsigned long  constants litera programming  floating point iterals floating point literal integer point fractional exponent represent floating point literals form exponential form representing form include point exponent rep resenting exponential form include integer fractional signed exponent introduced examples floating point literals   legal e l legal e illegal incomplete exponent f illegal exponent e55 illegal missing integer fraction character onstants character literals enclosed single quotes stored sim ple variable char type character literal plain character escape sequence universal character u02c0 characters represent special meaning preceded ckslash newline tab list escape sequence codes escape sequence meaning character character character haracter alert bell programming  backspace form feed newline carriage return horizontal tab vertical tab ooo octal number digits xhh hexadecimal number digits ew escape sequence characters include stdio int main printf tworld return  code compiled executed produces result string iterals string literals constants nclosed double quotes string characters character literals plain characters escape sequences universal characters programming  break long multiple lines string literals separating wh itespaces examples string literals forms identical strings dear dear ear defining constants simple ways define constants define preprocessor onst keyword define preprocessor form define preprocessor define constant define identifier ollowing explains include stdio define length  define width  def ine newline int main int area area length width programming  printf area area printf newline return  code compiled executed produces result area  const keyword const prefix declare constants specific type const type variable ollowing explains include stdio int main const int length  const int width  const char newline int area area length width printf area area printf newline return  code compiled executed produces result area  note good programming practice define constants capitals programming  storage class defines scope visibility life time variables functions program precede type modify storage classes program auto register static extern auto storage class auto storage class efault storage class local variables int mount auto int month defines variables storage class auto functions local variables register storage class regis ter storage class define local variables stored register ram variable maximum size equal register size word unary operator applied memory location register int miles register variables require quick access counters defining register variable stored egister stored register depending hardware implementation restrictions  storage classes programming  static storage class static storage class instructs compiler local variable existence life time progra creating destroying time scope making local variables static maintain values function calls static modifier applied global variables variable scope restricted file declared programming static class data member copy member shared objects class include stdio function declaration void func void static int count  global variable main count func return  function definition void func void static int  local static variable printf count count code compiled executed produces result  count   count  programming   count   count   count  extern storage class extern storag class reference global variable visible program files extern variable initialized point variable storage location previou sly defined multiple files define global variable function files extern file provide reference defined variable function understand ing extern declare global variable function file extern modifier commonly files sharing global variables functions explained file main include stdio int count extern void write_extern main count  write_extern file support include stdio extern int count void write_extern void programming  printf count count extern eclare count file definition file main compile files gcc main support produce executable program hen program executed produces result  programming  operator symbol tells compiler perform specific mathematical logical functions language rich built operators types operators arithmetic erators relational operators logical operators bitwise operators assignment operators misc operators chapter operator rks arithmetic operators ollowing table arithmetic operators supported language assume variable holds  variable holds  operator description adds operands  subtracts operand  multiplies operands  divides numerator numerator  modulus operator remainder integer division  increment operator increases integer   operators programming  decrement operator decreases integer  understand arithmetic operators include stdio main int  int  int printf  printf  printf  valu printf  printf  printf  printf  compile execute program produces result   programming             val  relational operators ollowing table relational operators supported assume variable holds  variable holds  operator description checks values operands equal condition true true checks values operands equal values equal condition true true checks left operand reater operand condition true true checks left operand operand condition true true checks left operand greater equal operand condition true true checks left operand equal operand condition true true programming  understand relational operators include stdio main int  int  int printf  equal printf  equal printf  printf  printf  greater programming  printf  greater change   printf  equal printf  greater equal compile execute program produces result  equal   greater  equal  greater equal logical operators table logical operators supported language assume variable holds  variable holds  operator description called logical operator operands condition true false called logical operator operands condition true programming  true called logical operator reverse logical state operand condition true logical operator false true understand logical operators include stdio main int  int  int printf  condition true printf  condition true change   printf  condition true programming  printf  condition true printf  condition true compile execute program produces result  condition true  condition true  condition true ine  condition true bitwise operators bitwise operator work bits perform bit bit operation truth table                     assume    binary format     programming          table lists itwise operators supported assume variable holds  variable holds  operator description binary operator copies bit result exists operands    binary operator opies bit exists operand    binary xor operator copies bit set operand    binary complement operator unary flipping bits     complement form binary left shift operator left operands moved left number bits operand     binary shift operator left operands moved number bits operand     stand bitwise operators include stdio main programming  unsigned int     unsigned int     int     printf     printf     printf      printf      printf      printf  compile execute program produces result             programming  assignment operators follow ing tables lists assignment operators supported language operator description simple assignment operator assigns values operands left operand assign add signment operator adds operand left operand assign result left operand equivalent subtract assignment operator subtracts operand left operand assign resu left operand equivalent multiply assignment operator multiplies operand left operand assign result left operand equivalent divide assignment perator divides left operand operand assign result left operand equivalent modulus assignment operator takes modulus operands assign result left operand equivalent left shift assignment operator   shift assignment operator   bitwise assignment operator  programming   itwise exclusive assignment operator   itwise inclusive assignment operator   understand assignment operators include stdio main int  int printf  operator printf  operator printf  perator printf  operator programming  printf  operator  printf  operato  printf  operator  printf  operator  printf  operator valu  printf  operator  printf  operator compile execute program produces followin result  operator   operator   operator   operator   operator   ope rator   operator   operator  programming   operator   operator   operator  misc operators sizeof ternary operators discussed operators including sizeof supported language operator description sizeof returns size variable sizeof integer return  returns address variable returns actual address variable pointer variable conditional expression condition true hen therwise understand miscellaneous operators include stdio main int  short double int ptr programming  sizeof operator printf  size variable sizeof printf  size variable sizeof printf  size variable sizeof operators ptr ptr address printf printf ptr ptr ternary operator     printf    printf compile execute program produces result  ptr    operators precedence operator precedence determines grouping terms expressio decides expression evaluated operators higher precedence multiplication operator higher precedence addition operator    assigned    operator higher precedence multiplied   adds  programming  operators highest precedence table lowest expres sion higher precedence operators evaluated category operator associativity postfix left unary type sizeof left multiplicative left additive left shift left relational left equality left bitwise left bitwise xor left bitwise left logical left logical left conditional left assignment left comma left programming  understand operator precedence clude stdio main int  int  int  int  int    printf    printf    printf    printf return  compile execute program produces result     programming  programming  decision making structures require programmer specif ies conditions evaluated tested program statement statements executed condition determined true optionally sta tements executed condition determined false general form typical decision making structure programming languages programming language assumes null values true null assumed false programming language types decision making statem ents statement description statement statement consists boolean expression statements statement statement optional sta tement executes  decision mak ing programming  oolean expression false nested statements statement inside statement switch statement switch statement variable tested equality list values nested switch statements switch statement inside switch statement statement statement consists boolean expression statements syntax syntax statement programming language boolean_expression statement execute boolean expression true boolean expression evaluates true block code inside statement execute oolean expression evaluates false set code statement closing curly brace executed programming language assumes null values true eithe null assumed false flow diagram programming  include stdio int main local variable definition int  check boolean condition statement  condition true print printf  printf return  code compiled executed produces result  programming   statement optional statement executes boolean expression false syntax syntax statement programming language boolean_expression statement execute boolean expression true statement execute boolean expression false boolean exp ression evaluates true block executed block executed programming language assumes null values true null assumed fals flow diagram programming  include stdio int main local variable definition int  check boolean condition  condition true print printf  condition false print printf  printf return  code compiled executed produces result   statement statement optional statement test conditions single statement statements points mind programming  succeeds remaining tested syntax syntax statement programming language boolean _expression  executes boolean expression  true boolean_expression  executes boolean expression  true boolean_expression  executes boolean expression  true executes condition true include stdio int main local variable definition int  check boolean condition  condition rue print programming  printf   condition true printf   condition true printf  conditions true printf values matching printf exact return  code compiled executed produces result values matching exact  nested statements legal programming nest statements statement inside statement syntax syntax nested statement boolean_expression  programming  executes boolean expression  true boolean_expression  executes boolean expression  tru nest nested statement include stdio int main local variable definition int  int  check boolean condition   condition true check  condition true print printf   printf exact printf exact return  code compiled executed produces result programming    exact  exact  switch state ment switch statement variable tested equality list values called case variable switched checked switch case syntax syntax switch statement programming languag switch expression case constant expression statement break optional case constant expression statement break optional number case statements default optional statement rules apply switch statement expression switch statement integral enumerated type class type class single conversion funct ion integral enumerated type number case statements switch case compared colon constant expression case data type variable switch constant literal variable switched equal case statements case execute break statement reached break statement reached switch terminates flow control jumps switch statement programming  case break break appears flow control fall subsequent cases break reached switch statement optional default case switch default case performing task cases true break needed default case flow diagram include stdio int main local variable definition char grade switch grade case programming  printf excellent break case case printf break case printf passed break case printf break default printf invalid grade printf grade grade return  code compiled executed produces result grade nested switch statements switch statement sequence outer switch case constants outer switch common values conflicts syntax syntax nested switch statement switch ch1 case printf outer switch programming  switch ch2 case printf switch break case case code break case case code include stdio int main local variable definition int  int  switch case  printf outer switch switch case  printf switch printf exact printf exact return  code compiled executed produces result programming  outer switch switch exact  exact  operator covered conditional operator previous chapter replace statements general form exp1 exp2 exp3 exp1 exp2 exp3 expressions notice placement colon expression determined  exp1 evaluated true exp2 evaluated entire expression  exp1 false exp3 evaluated lue expression programming  encounter situation block code executed number times general statements executed sequentially statement function execute programming languages provide control structures complicated execution paths loop statement execute statement group statements multiple times giv general form loop statement programming languages programming language types loop hand looping requirements loop type description loop repeats statement group statements condition true tests condition executing loop body loop execute sequence statements multiple times abbreviates code manages loop variable  loops programming  loop ike statement tests condition loop body nested loops inside loop loop loop programming repeatedly executes target statement long condition true syntax syntax loop programming language condition statement statement single statement block statements condition expression true nonzero loop iterates condition true condition fals program control passes loop flow diagram programming  key point note loop execute condition tested result false loop body skipped statement loop executed include stdio int main local variable definiti int  loop execution  printf programming  return  code compiled executed produces result           loop loop repetition control structure efficiently write loop execute specific numbe times syntax syntax loop programming language init condition increment statement flow control loop  init step executed step declare initialize loop control variables required statement long semicolon appears  condition evaluated true body loop executed false body loop execute flow control jumps statement loop  body loop executes flow control jumps increment statement statement update loop control variables atement left blank long semicolon appears condition programming    condition evaluated true loop executes process repeats body loop increment step condition ndition false loop terminates flow diagram include stdio int main loop execution int     printf programming  return  code compiled executed produces result           loops test loop condition loop loop programming checks condition loop loop loop fact guaranteed execute time syntax syntax loop programming language statement condition notice conditio nal expression appears loop statement loop execute condition tested programming  condition true flow control jumps statement loop execute process peats condition false flow diagram include stdio int main local variable definition int  loop execution printf   return  programming  code compiled executed produces result           nested loops programming loop inside loop ollowing examples illustrate concept syntax syntax nested loop statement init condition increment init condition increment statement statement syntax nested loop statement programming language condition condition programming  statement statement syntax nested loop statement programming language statement statement condition condition final note loop nesting type loop inside type loop loop inside loop vice versa program sted loop prime numbers   include stdio int main local variable definition int    break factor prim printf prime programming  return  code compiled executed produces result  prime  prime  prime  prime  prime  prime  prime  prime  prime  prime  prime  prime  prime  prime  prime  prime  prime  prime  prime  prime  prime  prime  prime  prime  prime loop control statements loop control statements change executio normal sequence execution leaves scope automatic objects created scope destroyed supports control statements programming  control statement description bre ak statement terminates loop switch statement transfers execution statement loop switch continue statement loop skip remainder body retest condition prior reiterating goto statement transfers control labeled statement break statement break statement programming usages break stateme encountered inside loop loop terminated program control resumes statement loop terminate case switch statement covered chapter nested loops break statement execution innermost loop start executing code block syntax syntax break statement break flow diagram programming  include stdio int main local variable definition int  loop execution  print  terminate loop break statement break programming  return  code compiled executed produces result       continue statement continue statement programming works break statement forcing termination forces iteration loop place skipping code loop continue statement conditional test increment portions loop execute loops continue statement program control pass conditional tests syntax syntax continue statement continue flow diagram programming  include stdio int main local variable definition int  loop execution  skip iteration  continue printf  programming  return  code compiled executed produces result        lue   goto statement goto statement programming unconditional jump goto labeled statement function note goto statement highly discouraged programming langua difficult trace control flow program making program hard understand hard modify program goto rewritten avoid syntax syntax goto statem ent goto label label statement label plain text keyword set program goto statement flow diagram programming  include stdio int main local variable definition int  loop execution loop  skip iteration  goto loop printf  programming  return  code compiled executed produces result          infinite loop loop infinite loop condition false loop traditionally purpose pressions form loop required endless loop leaving conditional expression include stdio int main printf loop forever return  onditional expression absent assumed true initialization increment expression programmers commonly construct signify infinite loop note terminate infinite loop pressing ctrl keys programming  programming  function group statements perform task program function main trivial programs define additional functions divide cod separate functions divide code functions logically division uch function performs specific task function declaration tells compiler function retur type parameters function definition actual body function standard library numerous built functions program strcat concatenate strings memcpy copy memory location location functions function referred method routine procedure defining function general form function definition programming language return_type function_name parameter list body function function definition programming consists function header function body parts function return type function return return_type data type function returns functions perform desired operations returning case return_type keyword void function actu function function parameter list constitute function signature parameters parameter placeholder function invoked pass parameter referred actual parameter argument parameter list refers type order number parameters function parameters optional function parameters  functions programming  function body function body collection statements define function examp source code function called max function takes parameters num1 num2 returns maximum function returning max number int max int num1 int num2 local variable declaration int result num1 num2 result num1 result num2 return result function declarations function declaration tells compiler unction function actual body function defined separately function declaration parts return_type function_name parameter list defined function max functi declaration int max int num1 int num2 parameter names function declaration type required valid declaration int max int int function declaration required fine function source file function file case declare function file calling function programming  calling function creating function definition fun ction function function perform defined task program calls function program control transferred called function called function performs defined task return tatement executed function closing brace reached returns program control main program function simply pass required parameters function function return store returned include stdio function declaration int max int num1 int num2 int main local variable definition int  int  int ret calling fun ction max ret max printf max ret return  function returning max numbers int max int num1 int num2 local variable declaration int result programming  num1 num2 result num1 result num2 return result max main compiled source code running final executable produce result max  function arguments function arguments declare variables accept values arguments variables called formal parameters function ormal parameters behave local variables insid function created entry function destroyed exit calling function ways arguments passed function type description method copies actual argument formal parameter function case parameter inside function argument reference method copies address argument formal parameter inside function address access actual argument parameter affect argument programming  alue method passing arguments function copies actual argu ment formal parameter function case parameter inside function argument default programming pass arguments general code function alter arguments function function swap definition function definition swap values void swap int int int temp temp save temp temp return function swap passing actual values include stdio function declaration void swap int int int local variable definition int  int  printf swap printf swap programming  calling function swap values swap printf aft swap printf swap return  code single file compile execute produce result swap  swap  swap  swap  change values changed inside function eference reference method passing arguments functi copies address argument formal parameter inside function address access actual argument parameter affect passed argument pass reference argument pointers passed functions declare function parameters pointer types function swap exchanges values integer variables pointed arguments function definition swap values void swap int int int temp temp save address temp temp programming  turn function swap passing values reference include stdio function declaration void sw int int int main local variable definition int  int  printf swap printf swap calling function swap values pointer address variable pointer address variable swap printf swap printf swap return  code single file compile execute produce result swap  swap  programming  swap  swap  change reflected function reflect function default pass arguments general code function alter guments function programming  scope programming region program defined variable existence ariable accessed places variables declared programming language inside function block called local variables functions called global variables definiti function parameters called formal parameters understand local global variables formal parameters local variables variables declared inside function block called local variables statements inside function block code local variables functions ollowing local variables variables loc main function include stdio int main local variable declaration int int actual initialization   printf return   scope rules programming  global variables global variables defined function program lobal variables hold lifetime program accessed inside functions defined rogram global variable accessed function global variable entire program declaration ollowing program global variables program include stdio global variable declaration int int main local variable declaration int actual initialization   printf return  program local global variables local variable inside function preference include stdio global variable declaration int  programming  int main local variable declaration int  printf return  code compiled executed produces result  formal parameters ormal parameters treated local variables function precedence global variables include stdio global variable declaration int  int main local vari declaration main function int  int  int  printf main sum printf main return  programming  function add integers int sum int printf sum printf sum return code compiled executed produces result main  sum  lue sum  main  initializing local global variables local variable defined initialized initialize global variables initialized automatically wh define data type initial default int  char  float  double  pointer null programming  good programming practice initialize variables properly program produce unexpected uniniti alized variables garbage memory location programming  arrays kind data structure store fixed size sequential collection elements type array store collection data array collection variables type declaring individual variables number0 number1 number99 eclare array variable numbers numbers  numbers  numbers  represent individual variables specific element array accessed arrays consist contiguous memory locations lowest address corresponds element highest address element declaring arrays declare array programmer specifies type elemen number elements required array type arrayname arraysize called single dimensional array arraysize integer constant greater type valid data type decl  element array called balance type double statement double balance  balance variable array sufficient hold  double numbers initializing arrays initialize array single statement double balance             arrays programming  number values braces larger number elements declare array square brackets omit size array array big hold initialization created write double balance           create array previous examp assign single element array balance    statement assigns  element array   arrays  element called base array total size array minus  hown pictorial representation array discussed acc essing array elements element accessed indexing array placing element square brackets array double salary balance  statement th ement array assign salary variable mentioned concepts declaration assignment accessing arrays include stdio int main int  array  integers int initialize elements array     set element location  programming  output ray element   printf element return  code compiled executed produces result element   element   element   element   element   element   element   element   element   element   arrays arrays lot attention concepts array clear programmer concept description multi dimensional arrays supports multidimensional arrays simplest form multidimensional array dimensional array passing arrays functions ass function pointer array array programming  return array function function return array pointer array generate pointer element array simply spec ifying array multi dimensional arrays programming language multidimensional arrays general form multidimensional array declaration type size1 size2 sizen decl aration creates dimensional integer array int threedim    imensional arrays simplest form multidimensional array dimensional array dimensional array essence list dimensional arrays declare dimensional integer array size write type arrayname type valid data type arrayname valid identifier dimensional array nsidered table number rows number columns dimensional array rows columns element array identified element form array subscripts uniquely identify element programming  initializing mensional arrays multidimensional arrays initialized bracketed values row array  rows row  columns int       initializers row indexed      initializers row indexed      initializers row indexed  nested braces intended row optional initialization equivalent previous int               accessing dimensional array elements element dimensional array accessed subscripts row column array int val   statement tak th element rd row array verify figure check program nested loop handle dimensional array include stdio int main array ith  rows  columns int             int output array element     printf programming  return  code compiled executed produces result                               explained ave arrays number dimensions arrays create dimensions passing arrays functions pass single dimension array argument function clare formal parameter ways declaration methods produce tells compiler integer pointer received ly pass multi dimensional array formal parameters  formal parameters pointer void myfunction int param programming   formal parameters sized array void myfunction int param   formal parameters unsized array void myfunction int param function array argument argument based passed arguments return average numbers passed array double getaverage int arr int size int double avg double sum  size sum arr avg sum size programming  return avg function include stdio function declaration double getaverage int arr int size int main int array  elements int balance       double avg pass pointer array argument avg getaverage balance  output returned printf average avg return  code compiled executed produces result aver age   length array matter function concerned performs bounds checking formal parameters return array function programming retur entire array argument function return pointer array array programming  return single dimension array function declare function returning pointer int myfunction point remember advocate return add ress local variable function define local variable static variable function generate  random numbers return array function foll ows include stdio function generate return random numbers int getrandom static int  int set seed srand unsigned time null   rand printf return main function defined function programming  int main pointer int int int getrandom   printf return  code compiled executed produces result                                      programming      pointer array understand chapter pointers ssuming understanding pointers start array constant pointer element array declaration double balance  balance pointer balance  address element array balance ollowing program fragment assigns address element balance double double balance  balance legal array names constant pointers vice versa balance  legitimate accessing data balance  store address element access array elements   elow concepts discussed include stdio int main array  elements double balance            double int balance output array element programming  printf array values pointer   printf printf array values balance address   printf balance balance return  code compile executed produces result array values pointer                array values balance address balance    balan    balance    balance    balance    pointer double store address variable double type address wil address stored programming  pointers easy fun learn programming tasks performed easily pointers tasks dynamic memory allocation performed pointers learn pointers perfect programmer start learning simple easy steps variable memory location memory locat ion address defined accessed ampersand operator denotes address memory print address variables defined include stdio int main int var1 har var2  printf address var1 variable var1 printf address var2 variable var2 return  code compiled executed produces result address var1 variable bff5a400 address var2 variable bff5a3f6 pointers pointer variable addr ess variable direct address memory location variable constant declare pointer store variable address general form pointer variable declaration  pointers programming  type var type pointer base type valid data type var pointer variable asterisk declare pointer asterisk multiplication statement terisk designate variable pointer valid pointer declaration int pointer integer double pointer double float fp pointer float char pointer character actual data type pointers integer float character long hexadecimal number represents memory address difference pointers data types data type variable constant pointer points pointers operations pointers frequently define pointer variable sign address variable pointer finally access address pointer variable unary operator returns variable located address operand ollowing operations include stdio int main int var  actual variable declaration int pointer variable declaration var store address var pointer varia ble printf address var variable var address stored pointer variable printf address stored variable programming  access pointer printf variable return  code compiled executed produces result address var variable bffd8b3c address stored variable bffd8b3c variable  null pointers good pra ctice assign null pointer variable case exact address assigned time variable declaration pointer assigned null called null pointer null pointer constant lue defined standard libraries program include stdio int main int ptr null printf ptr ptr return  code compiled executed pro duces result ptr  operating systems programs permitted access memory address  memory reserved operating memory address  special significance signals pointer intended point accessible memory location convention pointer null assumed point programming  check null pointer statement ptr succeeds null ptr succeeds null pointers pointers easy concepts programming pointer concepts clear programmer concept description pointer arithmetic arithmetic operators pointers array pointers define arrays hold number pointers pointer pointer allo ws pointer pointer passing pointers functions passing argument reference address enable passed argument changed calling function called function return pointer functions function return pointer local variable static variable dynamically allocated memory pointer arithmetic pointer address numeric perform arithmetic operations pointer numeric arithmetic operators pointers understand pointer arithmetic ptr integer pointer points address  assuming  bit integers perform arithmetic operation pointer programming  ptr fter operation ptr point location  time ptr incremented point integer location  bytes current location operation pointer memory location impacting actual memory location ptr points character address  operation point location  character  incrementing pointer prefer pointer program array variable pointer incremented array incremented constant pointer program increments variable pointer access succeeding element array include stdio const int max  int main int var    int ptr array address pointer ptr var  max printf address var ptr printf var ptr location ptr return  programming  code compiled executed produces result address var  bf882b30 var   address var  bf882b34 var   address var  bf882 b38 var   decrementing pointer considerations apply decrementing pointer decreases number bytes data type include stdio const int max  int main int var    int ptr array address pointer ptr var max  max  printf address var ptr printf var ptr mov previous location ptr return  programming  code compiled executed produces result address var  bfedbcd8 var   address var  bfedbcd4 var   address var  bfedbcd0 var   pointer comparisons pointers compared relational operators point variables elements sam array meaningfully compared program modifies previous incrementing variable pointer long address points equal address element array var max  include stdio const int max  int main int var    int ptr address element pointer ptr var  ptr var max  printf address var ptr printf var ptr point previous location ptr programming  return  code compiled executed produc result address var  bfdbcb20 var   address var  bfdbcb24 var   address var  bfdbcb28 var   array pointers understand concept arrays pointers array  integers include stdio const int max  int main int var    int  max printf valu var var return  code compiled executed produces result var   programming  var   var   situation maintain arr store pointers int char data type declaration array pointers integer int ptr max declares ptr array max integer pointers element ptr hol pointer int ollowing integers stored array pointers include stdio const int max  int main int var    int ptr max  max ptr var assign address integer  max printf var ptr return  code compiled executed produces result var   var   var   programming  array pointers character store list strings include stdio const int max  int main char mes zara ali hina ali nuha ali sara ali int   max printf names names eturn  code compiled executed produces result names  zara ali names  hina ali names  nuha ali names  sara ali pointer pointer pointer pointer form multiple indirection chain pointers pointer address variable define pointer pointer pointer address pointer points location actual programming  variable pointer pointer declared placing additional asterisk fro declaration declare pointer pointer type int int var target indirectly pointed pointer pointer accessing requires asterisk operator app lied include stdio int main int var int ptr int pptr var  address var ptr var address ptr address operator ptr pptr printf var var printf ptr ptr printf pptr pptr return  code compiled executed produces result programming  var  ptr  pptr  passing pointers functions programming pass ing pointer function simply declare func tion parameter pointer type simple pass unsigned long pointer function change inside function reflects calling function include stdio include time void getsecond unsigned long int main unsigned long getseconds print actual printf number seconds ld return  void getseconds unsigned long current number time null return programming  code compiled executed produces result number seconds  function accept pointer accept array nclude stdio function declaration double getaverage int arr int size int main int array  elements int balance       double avg pass pointer array argument avg getaverage balance  output returned printf average avg return  double getaverage int arr int size int sum  double avg  size sum arr programming  avg double sum size return avg code compiled executed produces result average   return pointer functions cha pter programming return array function imilar ly return pointer function declare function returning pointer int myfunct ion point remember good idea return address local variable function define local variable static variable function generate  random numbers return array represents pointer address array element include stdio include time function generate retrun random numbers int getrandom static  int programming  set seed srand unsigned time null   rand printf return main function defined function int main pointer int int int getrandom   printf return  code compiled executed produces result       programming                           programming   strings dimensional array characters terminated null character  null terminated string characters comprise string null declaration initialization create string consisting word hold null character array size character array string number characters word char greeting   follow rule array initialization write abo statement char greeting memory presentation defined string pla null character string constant compiler automatically places  string initializes array print mentioned string include stdio int main char greeting   printf greeting message greeting  strings programming  return  code compiled executed produces result greeting message supports wide range functions manipulate null terminated strings function purpose  strcpy s1 copies string string s1  strcat s1 concatenates string string s1  strlen s1 returns length string s1  strcmp s1 returns  s1  s1 greater  s1  strchr s1 returns pointer occurrence character string s1  strstr s1 returns pointer occurrence string string s1 ollowing mentioned functions include stdio include string int main programming  char str1  char str2  char str3  int len copy str1 nto str3 strcpy str3 str1 printf strcpy str3 str1 str3 concatenates str1 str2 strcat str1 str2 printf strcat str1 str2 str1 total lenghth str1 concatenation len trlen str1 printf strlen str1 len return  code compiled executed produces result strcpy str3 str1 strcat str1 str2 helloworld strlen str1  programming  rrays define type variables hold data items kind structure user defined data type combine data items kinds structures represent record suppose track books library track attributes ach book title author subject book defining structure define structure struct statement struct statement defines data type member format struct statement llows struct structure tag member definition member definition member definition structure variables structure tag optional member definition normal variable definition int floa valid variable definition structure definition final semicolon structure variables optional declare book structure struct books har title  char author  char subject   structures programming  int book_id book accessing structure members access member structure member access operator member access operator coded period stru cture variable structure member access keyword struct define variables structure type ollowing structure program include stdio include string struct books char title  char author  char subject  int book_id int main struct books book1 declare book1 type book struct books book2 declare book2 type book book  specification strcpy book1 title programming strcpy book1 author nuha ali strcpy book1 subject programming tutorial book1 book_id  book  specification strcpy book2 title telecom billing strcpy book2 author zara ali programming  strcpy book2 subject telecom billing tutorial book2 book_id  print book1 info printf book  title book1 title printf bo  author book1 author printf book  subject book1 subject printf book  book_id book1 book_id print book2 info printf book  title book2 title printf book  author book2 author printf book  subject book2 subject printf book  book_id book2 book_id return  code compiled executed produces result book  title programming book  author nu ha ali book  subject programming tutorial book  book_id  book  title telecom billing book  author zara ali book  subject telecom billing tutorial book  book_id  structures function arguments pass structure function argument pass variable pointer include stdio include string programming  struct books char title  char author  char subject  int book_id function declaration void printbook struct books book int main struct books book1 declare book1 type book struct books book2 decl book2 type book book  specification strcpy book1 title programming strcpy book1 author nuha ali strcpy book1 subject programming tutorial book1 book_id  book  specification rcpy book2 title telecom billing strcpy book2 author zara ali strcpy book2 subject telecom billing tutorial book2 book_id  print book1 info printbook book1 print book2 info printbook book  programming  return  void printbook struct books book printf book title book title printf book author book author printf book subject book subject printf book book_id book book_id code compiled executed produces result book title programming book author nuha ali book subject programming tutorial book book_id  book title telecom billing book author zara ali book subject tel ecom billing tutorial book book_id  pointers structures define pointers structures define pointer variable struct books struct_pointer store address structure variable defined pointer variable address structure variable place operator structure struct_pointer book1 access members structure pointer str ucture operator struct_pointer title write structure pointer include stdio programming  include string struct books char title  char author  char subject  int book_id function declaration void printbook struct books book int main struct books book1 declare book1 type book struct books book2 decl book2 type book book  specification strcpy book1 title programming strcpy book1 author nuha ali strcpy book1 subject programming tutorial book1 book_id  book  specification rcpy book2 title telecom billing strcpy book2 author zara ali strcpy book2 subject telecom billing tutorial book2 book_id  print book1 info passing address book1 printbook book1 print boo k2 info passing address book2 printbook book2 programming  return  void printbook struct books book printf book title book title printf book author book author printf book subject book subj ect printf book book_id book book_id code compiled executed produces result book title programming book author nuha ali book subject programming tutorial book book_id  book tle telecom billing book author zara ali book subject telecom billing tutorial book book_id  bit fields bit fields packing data structure memory data storage premium typical exam ples include packing objects machine word  bit flags compacted reading external file formats standard file formats read  bit integers structure definition putting bit length variable struct packed_struct unsigned int f1  unsigned int  unsigned int f3  unsigned int f4  programming  unsigned int type  unsigned int my_int  pack packed_struct  members fou  bit flags f1 f3  bit type  bit my_int automatically packs bit fields compactly provided maximum length field equal integer word length computer case compilers memory overlap fields whil store field word programming  union special data type llows store data types mory location define union members member time unions provide efficient memory location multi ple purpose defining union define union union statement defining structure union statement defines data type member program format union statement union union tag member finition member definition member definition union variables union tag optional member definition normal variable definition int float valid variable definition union definition final semicolon union variables optional define union type named data members str union data int float char str  data variable data type store integer floating point number string characters single variable memory location  unions programming  store multiple types data built user defined data types inside union based requirement memory occupied union large hold largest member union data type occupy  bytes mem ory space maximum space occupied character string ollowing display total memory size occupied union include stdio include string union data int float char str  int main union data data printf memory size occupied data sizeof data return  code compiled executed produces result memory size occupie data  accessing union members access member union member access operator member access operator coded period union variable union member access yword union define variables union type ollowing union program include stdio programming  include string union data int float char str  int main union data data data  data   strcpy data str programming printf data data printf data data printf data str data str return  code compiled executed produces result data  data   data str programming values members union corrupted final assig ned variable occupied memory location reason str member printed variable time main purpose aving union include stdio programming  include string union data int float char str  int main union data data data  printf data data data   printf data data strcpy data str programming printf data str data str return  code compiled executed produces result data  data   data str programming members printed member time programming  suppose program number true false variables grouped structure called status struct unsigned int widthvalidat unsigned int heightvalidated status structure requires  bytes memory space actual store   variables programming language offers utilize memory space tuation variables inside structure define width variable tells compiler number bytes structure written struc unsigned int widthvalidated  unsigned int heightvalidated  status structure require  bytes memory space status variable  bits store values  variables width  bit status structure  bytes  variables allocate slot memory start  bytes check understand concept include stdio include string define simple structure struct unsigned int widthvalidated  bit fields programming  unsigned int heightvalidated status1 define structure bit fields struct unsigned int widthvalidat  unsigned int heightvalidated  status2 int main printf memory size occupied status1 sizeof status1 printf memory size occupied status2 sizeof status2 return  code comp iled executed produces result memory size occupied status1  memory size occupied status2  bit field declaration declaration bit field form inside structure struct type member_name wid table describes variable elements bit field elements description type integer type determines bit field programming  interpreted type int signed int unsigned int member_name bit field width number bits bit field width equal bit width type variables defined predefined width called bit fields bit field hold ore single bit variable store   define bit field width  bits struct unsigned int age  age structure definition instructs compile age variable  bits store  bits include stdio include string struct unsigned int age  age int main age age  printf sizeof age sizeof age printf age age age age age age  printf age age age age age age  programming  printf age age age age return  code compiled compile warning executed produces result sizeof age  age age  age age  age age  programming  programming language keyword called typedef type define term byte byte numbers typedef unsigned char byte type definition identifier byte abbreviation type unsigned char ample byte convention uppercase letters definitions remind user type symbolic abbreviation lowercase typedef unsigned char byte typedef user defined data type typedef structure define data type data type define structure variables directly include stdio include string typedef struct books char title  char author  char subject  int book_id book int main book book strcpy book title programming  typedef programming  strcpy book author nuha ali strcpy book subject programming tutoria book book_id  printf book title book title printf book author book author printf book subject book subject printf book book_id book book_id return  ode compiled executed produces result book title programming book author nuha ali book subject programming tutorial book book_id  typedef define define directive define aliases data types typedef differences typedef limited symbolic names types define define alias values define  typedef interpretation performed compiler define statements processed pre processor ollowing define program include stdio define true  fine false  int main printf true true programming  printf false false return  code compiled executed produces result true  false  programming  input feed data program input form file command programming set built functions read iven input feed program requirement output display data screen printer file programming set built functions output data computer screen save text binary files standard files programming treats devices files devices display addressed files file automatically opened program executes provide access keyboard screen standard file file pointer device standard input stdin keyboard standard output stdout screen standard error stderr screen file point access file reading writing purpose explain read values screen print result screen getchar putchar unctions int getchar void function reads character screen returns integer function reads single character time method loop case read character screen int putchar int function puts passed characte screen returns character function puts single character time method loop case display character screen check  input output programming  include stdio int int printf enter getchar printf nyou entered putchar return  code compiled executed waits input text hen enter text press enter program proceeds reads single character displays enter test entered puts unctions char char function reads stdin buffer inted terminating newline eof file int puts const char function writes string trailing newline stdout include stdio int main char str  printf enter ets str printf nyou entered programming  puts str return  code compiled executed waits input text hen enter text press enter program proceeds reads complete displays enter test entered test scanf printf unctions int scanf const char format function reads input standard input stream stdin scans inp format provided int printf const char format function writes output standard output stream stdout produces output format provided format simple constant string print read strings integer character float formatting options based requirements proceed simple understand concepts include stdio int main char str  int printf enter scanf str printf nyou entered str return  programming  code compiled executed waits input text hen enter text press enter program proceeds reads input displays enter  entered  scanf expect input format provided provide valid input string integer provide string string integer intege assumed wrong input ly reading string scanf stops reading encounters space test strings scanf programming  ast chapter explained sta ndard input output devices handled programming language chapter covers programmers create open close text binary files data storage file represents sequence bytes bein text file binary file programming language access high level functions low level level calls handle file storage devices chapter calls file management opening files fopen function create file open existing file initialize object type file control stream prototype function file fopen const char filename const char mode filename string literal file access mode values mode descript ion opens existing text file reading purpose opens text file writing exist file created program start writing content file opens text file writing ppending mode exist file created program start appending content existing file content opens text file reading writing opens text file reading writing truncate file length exists create file exist  file programming  opens text file reading writing creates file exist reading start writing appended handle binary files access modes mentioned rb wb rb wb closing file close file fclose function prototype function int fclose file fp fclose function returns success eof error closing file function flushes data pending ffer file closes file releases memory file eof constant defined header file stdio functions provide standard library read write file character character orm fixed length string writing file simplest function write individual characters stream int fputc int file fp function fputc writes character argu ment output stream referenced fp returns written character written success eof error functions write null terminated string stream int fputs const char file fp function fputs writes string output stream referenced fp returns negative success eof returned case error int fprintf file fp const char format function write string file tmp directory proceeding create directory machine include stdio programming  main file fp fp fopen tmp test txt fprintf fp testing fprintf fputs testing fputs fp fclose fp code compiled executed creates file test txt tmp directory writes lines dif ferent functions read file reading file simplest function read single character file int fgetc file fp fgetc function reads character input file referenced fp return character read case error returns eof function read string stream char fgets char buf int file fp functions fgets reads  characters input stream referenced fp copies read string buffer buf appending null character terminate string function encounters newline character file eof read maximum number characters returns characters read point including character int fscanf file fp const char format function read strings file stops reading encountering rst space character include stdio main file fp char buff  programming  fp fopen tmp test txt fscanf fp buff printf  buff fgets buff  file fp printf  buff fgets buff  file fp printf  buff fclose fp code compiled executed reads file created previous produces result   testing fprintf  testing fputs happened fscanf read encountered space fgets read remaining till encountered ine finally fgets read completely binary functions functions binary input output size_t fread void ptr size_t size_of_elements size_t number_o f_elements file a_file size_t fwrite const void ptr size_t size_of_elements size_t number_of_elements file a_file functions read write blocks memories arrays structu res programming  preprocessor compiler separate step compilation process simple terms preprocessor text substitution tool instruct compiler required pre processing actual compilation refer preprocessor cpp preprocessor commands hash symbol nonblank character readability preprocessor directive column ollowing lists preprocessor directives directive description define substitutes preprocessor macro include inserts header file undef undefines preprocessor macro ifdef returns true macro defined ifndef returns true macro defined tests compile time condition true alternative elif statement endif ends preprocessor conditional error prints error message stderr pragma issues special commands compiler standardized  preprocessors programming  method preprocessors examples analyze examples understand directives define max_array_length  directive tells cpp replace instances max_array_length  define constants increase readability include stdio include myheader directives cpp stdio libraries add text current source file tells cpp myheader local directory add content current source file undef file_size define file_size  tells cpp undefine existing file_size define  ifndef message def ine message endif tells cpp define message message defined ifdef debug debugging statements endif tells cpp process statements enclosed debug defined pass ddebug flag gcc compiler time compilation define debug turn debugging fly compilation predefined macros ansi defines number macros programming predefined macros directly modified programming  macro description __date__ current character literal mmm yyyy format __time__ current time character literal mm mat __file__ current filename string literal __line__ current number constant __stdc__ defined  compiler complies ansi standard incl ude stdio main printf file __file__ printf __date__ printf time __time__ printf __line__ printf ansi __stdc__ code file test compiled executed produces result file test jun   time     ansi  programming  preprocessor operators preprocessor offers operators creat macros macro continuation operator cro confined single macro continuation operator continue macro long single define message_for printf love stringize operator stringize number sign operator macro definition converts macro parameter string constant operator macro argument parameter ist include stdio define message_for printf love int main void message_for carole debra return  code compiled executed produces result carole debra love token pasting operator token pasting operator macro definition combines arguments permits separate tokens macro definition joined single token include stdio programming  define tokenpaster printf token token int main void int token34  tokenpaster  return  code compiled executed produces result token34  happened actual output preprocessor printf token34 token34 concatenation token token34 stringize token pastin defined operator preprocessor defined operator constant expressions determine identifier defined define identifier defined true symbol defined valu false defined operator include stdio defined message define message endif int main void printf message message return  programming  code piled executed produces result message parameterized macros powerful functions cpp ability simulate functions parameterized macros code squa number int square int return rewrite code macro define square macros arguments defined define directive argument lis enclosed parentheses follow macro spaces allowed macro open parenthesis include stdio define max int main void printf max betw een   max   return  code compiled executed produces result max    programming  header file file extension function declar ations macro definitions shared source files types header files files programmer writes files compiler request header file program cluding preprocessing directive include inclusion stdio header file compiler including header file equal copying content header file error prone good idea copy content header file source files specially multiple source file program simple practice programs cons tants macros wide global variables function prototypes header files include header file required include syntax user header files included preprocessing directive include forms include file form header files searches file named file standard list directories prepend directories list option compiling sourc code include file form header files program searches file named file directory current file prepend directories list option compiling source code include operation include directive works directing preprocessor scan file input continuing rest current source file output preprocessor output generated output included file output text include directive header file header  header files programming  char test void main program called program eader file int include header int main void puts test compiler token stream program read int char test void int main void puts test headers ader file included compiler process contents result error standard prevent enclose entire real contents file conditional ifndef header_file defin header_file entire header file file endif construct commonly wrapper ifndef header included conditional false header_file defined preprocessor skip entire contents file compiler programming  computed includes select header files included program instance hey configuration parameters sorts operating systems series conditionals system_1 include system_1 elif system_2 include system_2 elif system_3 endif grows tedio preprocessor offers ability macro header called computed include writing header direct argument include simply macro define system_h _1 include system_h system_h expanded preprocessor system_1 include written originally system_h defined makefile option programming  type casti convert variable data type data type store long simple integer type cast long int convert values type explicitly cast operator type_name expression cast operator division integer variable performed floating point operation include stdio main int sum  count  double double sum count printf code compiled executed produces result   cast operator precedence division sum converted type double finally divided count yielding double type conversions implicit performed compiler automatically exp licitly cast operator considered good programming practice cast operator type conversions  type casting programming  integer promotion integer promotion process values integer type smaller int unsigned int converted int unsigned int adding character int eger include stdio main int  char ascii  int sum sum printf sum sum code compiled executed produces result sum  sum  compiler integer promotion converting cii performing actual addition operation usual arithmetic conversion usual arithmetic conversions implicitly performed cast values common type ompiler performs integer promotion operands hav types converted type appears highest hierarchy programming  usual arithmetic conversions performed assignment operators logical operators understand concept include stdio main int  char ascii  float sum sum printf sum sum programming  code compiled executed produces result sum   simple understand converted integer final double usual arithmetic conversion applies compiler convert float add yielding float result programming  programming provide direct support error handling tem programming language access lower level form return values unix function calls return  null case error set error code errno set global variab error occurred function error codes defined error header file programmer check returned values action depending return good ractice set errno  time initializ program  error program errno perror strerror programming language perror strerror func tions display text message errno perror function displays string pass colon space textual representation current errno strerror function whic returns pointer textual representation current errno simulate error condition open file exist functions usage ways pri nting errors point note stderr file stream output errors include stdio include errno include string extern int errno int main file int errnum fopen unexist txt rb  error handling programming  null errnum errno fprintf stderr errno errno perror error printed perror fprintf stderr error opening file strerror errnum fclose return  code compiled executed produces result errno  error printed perror file directory error opening file file directory divide ero rrors common problem time dividing number programmers check divisor finally creates runtime error code fixes checking divisor dividing include stdio include dlib main int dividend  int divisor  int quotient divisor  fprintf stderr division exiting programming  exit  quotient dividend divisor fprintf stderr quotient quotient exit  code compiled executed produces result division exiting program exit status common practice exit exit_success case program coming successful operation exit_success macro defined  error condition program coming exit status exit_failure defined  write program include stdio include stdlib main int dividend  int divisor  int quotient divisor  fprintf stderr division exiting exit exit_failure quotient dividend divisor fprintf stderr quotient quotient exit exit_success programming  code compiled executed produces result quotient  programming  recursion process repeating items programming languages program function inside function called recursive function void recurs ion recursion function calls int main recursion programming language supports recursion function recursion programmers careful define exit condition function infinite loop recursive function solve mathematical problems calculat ing factorial number generating fibonacci series number factorial ollowing calculates factorial number recursive function include stdio int factorial unsigned int  return  return factorial   recursion programming  int main int  printf factorial factorial return  code compiled executed produces result factorial   fibonacci series ollowing generates fibona cci series number recursive function include stdio int fibonaci int  return   return  return fibonaci  fibonaci  int main int   printf fibonaci programming  return  code compiled executed produces result           programming  situation function variable number arguments parameters predefined number parameters programming language solution situation allowed defi function accept variable number parameters based requirement definition function int func int int main func    func     function func argument ellipses dotes ellipses int represent total number variable arguments passed functionality stdarg header file functions macros implement functionality variable arguments follow steps  define function parameter ellipses ellipses alw ays int represent number arguments  create va_list type variable function definition type defined stdarg header file  int parameter va_start macro initialize va_list variable argument list macro va_start defined stdarg header file  va_arg macro va_list variable access item argument list  variable argumen programming   macro va_end clean memory assigned va_list variable follow steps write sim ple function variable number parameters return average include stdio include stdarg double average int num va_list valist double sum   int initialize valist num number arguments va_start valist num access arguments assigned valist  num sum va_arg valist int clean memory reserved valist va_end valist return sum num int main printf average     average      printf average    average     programming  code compiled executed produces result nction average called time argument represents total number variable arguments passed ellipses pass variable number arguments average       average      programming  chapter explain dynamic memory management programming language functions memory allocation management functions stdlib header file function description  void calloc int num int size function allocates array num elements size bytes size  void free void address function release block memory block address  void malloc int num function allocates array num bytes leave initialized  void realloc void address int newsize function allocates memory extending upto newsize allocating memory dynamically programming aware size array easy define array store person max imum  characters define char nam  situation idea length text store store detailed description topic define pointer character defining memory required based requirement allocate memory include stdio  memory managemen programming  include stdlib include string int main char  char description strcpy zara ali allocate memory dynamically description malloc  sizeof char description null fprintf stderr error unable allocate required memory strcpy description zara ali dps student class th printf printf description description code compiled executed produces result zara ali description zara ali dps student class th progr written calloc thing replace malloc calloc calloc  sizeof char complete control pass size allocating memory arrays size defined change programming  resizing releasing memory program operating automatically release memory allocated program good practice memory release memory calling function free alternatively increase decrease size allocated memory block calling function realloc check program realloc free functions include stdio include stdlib include string int main char  char description strcpy zara ali allocate memory dynamically description malloc  sizeof char escription null fprintf stderr error unable allocate required memory strcpy description zara ali dps student suppose store bigger description description realloc escription  sizeof char description null fprintf stderr error unable allocate required memory programming  strcat description class th printf intf description description release memory free function free description code compiled executed produces result zara ali description zara ali dps student ass th allocating extra memory strcat function error lack memory description programming  pass values comman programs executed values called command arguments times program specially control program hard coding values inside code command arguments handled main function arguments argc refers number arguments passed argv pointer array points argument passed program simple checks argument supplied command action include stdio int main int argc char argv argc  printf argument supplied argv  argc  printf arguments supplied printf argument expected code compiled executed single argument produces result testing argument suppli testing  command arg uments programming  code compiled executed arguments produces result testing1 testing2 arguments supplied code compiled executed passing argument produce result argument expected argv  holds program argv  pointer command argument supplied argv argument arguments supplie argc pass argument argc set  pass command arguments separated space argument space pass arguments putting inside double quotes single quotes write print program pass command argument putting inside double quotes include stdio int main int argc char argv printf program argv  argc  printf argument supplied argv  argc  printf arguments supplied printf argument expecte programming  code compiled executed single argument separated space inside double quotes produces result testing1 testing2 progranm argument supplied testing1 testing2