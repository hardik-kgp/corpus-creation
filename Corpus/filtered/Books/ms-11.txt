access passive data dictionary updated automatically requires batch process data dictionary access dbms query optimization purpose data dictionary main function stor description objects interact database integrated data dictionaries tend limit metadata data managed dbms stand data dictionary systems flexible dba manage organization data computerized data dictionary format existence database designers users improved ability communicate addition data dictionary tool helps dba resolve data conflicts standard format stored data dictionary features common data dictionary typically stores descriptions data elements define tabl databases data dictionary stores datatypes splay formats internal storage formats validation rules data dictionary tells element tables define databases data dictionary store table creator creation access authorizations number columns indexes define database tables dbms stores attributes location specific characteristics creation define databases created database creation database located dba users administrators data base programs access database incl uding screen formats report formats application formats sql queries access authorization users databases relationships data elements elements involved relationship mandatory optional connectivity cardinality  data dictionary organized include data external dbms flexible general corporate resource management management extensive data dictionary manage allocation organization roots database data mana gers data dictionary key element resource mana gement function data dictionary resource dictionary metadata stored data dictionary bases monitoring database assignment access rights database users stored database based relational table format enabling dba query database sql command exampl sql command extract users specific ta ble access rights users   database administrators database users primary goal database retrieve store database people work database categorized database users database administrators    database users user interfaces types database users differentiated expect interact types user interfaces designed types users naive users unsophisticated users interact invoking application programs wr itten bank teller transfer  account account invokes program called transfer program asks teller money transferred account money transferred account money transferred user wishes account balance wide web user access form enters account number application program web server retrieves account balance account number passes informa tion user typical user  interface naive users forms interface wh ere user fields form naive users simply read reports generated database application programmers computer professionals write application programs application programmers choose tools develop user interfaces rapid application development rad tools tools enable application programmer construct forms reports writing program special types programming languages combine imperative control structures loops loops statements statements data manipulation language languages called fourth generation languages include special features facilitate generation forms display data screen major commercial database systems include fourth generation language sophisticated users interact writing programs form requests database query language submit query query processor function break dml statements instructions storage manager understands analysts submit queries explore data database fall category online analytical processing olap tools simplify analysts tasks letting view summaries data fferent ways instance analyst total sales region north south east west product combination region product total sales product region tools permit analyst select specific regions data sales city region data aggregate products category class tools analysts data mining tools kinds patterns data specialized users sophisticated users write specialized database applications fit traditional data processing framework applications computer aided design systems knowledge base expert systems systems store data complex data types graphics data audio data environment modeling systems     database administrator main reasons ing dbmss central control data programs access data pers central control called database administrator dba functions dba include schema definition dba creates original database schema executing set data definition statements ddl storage structure access method definition schema physical organization modification dba carries schema physical organization reflect changing organization alter physical organization improve performance granting authorization data access granting types authorization database administrator regulate whic parts database users access authorization special structure database consults attempts access data routine maintenance examples database administrator routine maintenance activities periodically backing database tapes remote servers prevent loss data case disasters flooding ensuring free disk space normal operations upgrading disk space required monitoring jobs running database ensuring performance degraded expensive tasks submitted users   dbms architecture data independence characteristics database approach  insulation programs data program data program opera tion independence  support multiple user views  catalog store database description schema architecture database systems called schema architecture proposed achieve visualize characteristics discuss concept data independence     schema architecture goal schema architecture illust rated figure   separate user applications physical database architecture schemas defined levels  internal level internal schema describes physical storage structure database internal schema physical data model describes complete details data storage access paths database  conceptual level conceptual schema describes structure database community ers conceptual schema hides details physical storage structures concentrates describing entities data types relationships user operations constraints high level data model implementation data model level  external view level includes number external schemas user views external schema describes database user group interested hides rest database user group high level data model implementation data model level figure   schema architecture schema architecture convenient tool user visualize schema levels database dbmss separate levels completely support schema architecture extent dbmss include physical level details conceptual schema dbmss support user views  external schemas data model describes conceptual level dbmss data models conceptual external levels notice schemas descriptions data data exists physical level dbms based schema architecture user group refers external schema dbms transform request external schema request conceptual schema request internal schema processing stored database request database retrieval data extracted stored database reformatted match user external view processes transforming requests levels called mappings mappings time consuming dbmssšespecially meant support small databasesšdo support external views systems mapping transf orm requests conceptual internal levels    data independence schema architecture explain concept data independence defined capacity change schema level database change schema higher level define types data independence  logical data independence capacity change conceptual schema change external schemas application programs change conceptual schema expand database adding record type data item reduce database removing record type data item case external schemas fer remaining data view definition mappings changed dbms supports logical data independence application programs reference external schema constructs work conceptual schema undergoes logical reorganization constraints applied conceptual schema external schemas application programs   physical data independence capacity change internal schema change conceptual external schemas internal schema needed becau physical files reorganizedšfor creating additional access structuresšto improve performance retrieval update data remains database change conceptual schema multiple level dbms catalog expanded include map requests data levels dbms additional software accomplish mappings referring mapping catalog data independence accomplished schema changed level schema higher level remains unchanged mapping levels changed application programs referring higher level schema changed schema architecture easie achieve true data independence physical logical levels mappings create overhead compilation execution query program leading inefficiencies dbms dbmss implemented schema architecture   types database criteria classify dbmss data model dbms based main data model current commercial dbmss relational data model obj ect data model implemented commercial systems widespread legacy older applications database systems based erarchical network data models relational dbmss evolving continuously incorporating concepts developed object databases led class dbmss called object relational dbmss categorize dbmss based data model relational object object relational hierarchical network criterion classify dbmss number users supported single user systems support user time personal computers multiuser systems include majority dbmss support multiple users concurrently criterion number sites  database distributed dbms centralized data stored single computer site centralized dbms support multiple users dbms database reside totally single computer site distributed dbms ddbms actual database dbms software distributed sites connected computer network homogeneous ddbmss dbms software multiple sites trend develop software access autonomous preexisting databases stored heterogeneous llbmss leads federated dbms multidatabase particip ating dbmss loosely coupled degree local autonomy dbmss client server architecture   summary chapter discussed informal manner major components database summarise discussion database management dbms collection interrelated data set programs access data collection data implicit meaning database datum œ unit data œ symbol symbols represent relationship symbols represent essence knowledge refers practical collection stored tabase moment called instance database design database called database schema physical schema describes database design physical level logical schema describes database design logical level adatabase schemas view level called subschemas views database application programs exhibit physical data independence depend physical schema rewritten physical schema underlying structure database data model collection conceptual tools describing data data relationships data semantics consistency constraints  database data definition language database schema data manipulation language express database queries updates main reasons ing dbmss central control data programs access data pers central control called database administrator dba   key dbms data integrity data persistence instances schemas physical schema logical schema data model ddl dml data dictionary   assessment questions  choose database simply storing data operating files sense database  logical data independence  explain difference logical physical data independence  explain difference external internal conceptual schemas schema layers concepts logical physical data independence  responsibilities dba  distinguish logical physical database design  define key properties database organizational benefits property   references suggested readings  microsoft accesssolutions  introduction database systems  edition  leon alexis leon mathews database management systems leontechworld  mca   author abhishek taneja vetter sh dharminder kumar lesson  lesson data modeling entity relationship approach structure   objectives   introduction   data modeling context database design   entity relationship model   data modeling database design   steps building data model   developing basic schema   summary   key   assessment questions   references suggested readings   objectives chapter reader basic concepts model components data model basic constructs modeling data modeling database design process steps building data model developing basic schema    introduction data model conceptual representation data structures required database data structures include data objects associations data objects rules govern operations objects implies data model focuses data required organized operations performed ta common analogy data model equivalent architect building plans data model independent hardware software constraints represent data database data model focuses representing data user sees real serves bridge concepts real events processes physical representation concepts database methodology major methodologies create data model entity relationship approach object model document entity relationship approach   data modeling context database design database design defined design logical physical structure databases accommodate users organization defined set applications design process roughly steps  planning analysis  conceptual design  logical design  physical design  implementation data model conceptual design process typically functional model data model focuses data stored database functional model deals data processed context relational database data model design relational tables functional model design queries access perform operations tables  components data model data model inputs pla nning analysis stage modeler analysts collects requirements database reviewing existing documentation interviewing users data model outputs firs entity relationship diagram represents data structures pictorial form diagram easily learned valuable tool communicate model user component data document document describes data objects relationships rules required database dictionary required database developer construct physical database data modeling data modeling labor intensive time consuming development process bother especia lly pressed time common response practitioners write subject build database model build house blueprints goal data model su data objects required database completely accurately repr esented data model easily understood notations natural language reviewed verified correct users data model detailed database developers blueprint building physical database contained data model define relational tables primary foreign keys stored procedures triggers designed database require time long term careful planning create database omits data required create critical reports produces incorrect inconsistent unable accommodate user requirements   entity relationship model entity relationship model origin ally proposed peter  unify network relational database views simply stated model conceptual data model views real entities relationships basic component model entity relati onship diagram visually  represents data objects chen wrote paper model extended today commonly database design database designer utility model maps relational model cons tructs model easily transformed relational tables simple easy understand minimum training model database designer communicate design user addition model design plan database developer implement data model specific database management software basic constructs modeling model views real onstruct entities association entities entities entities principal data object collected entities recognizable concepts concrete abstract person places things events relevance database specific examples entities employees projects invoices entity analogous table relational model entities classified independent dependent methodologies terms strong weak independent entity rely identification dependent entity relies identification entity occurrence called instance individual occurrence entity occurrence analogous row relational table special entity types associative entities intersection entities entities associate entities order reconcile relationship subtypes entities generalization hierarchies represent subset instances parent entity called supertype attributes relationships apply subset associative entities generalization hierarchies discussed  relationships relationship represents association entities relationship employees assigned projects projects subtasks departments manage projects relationships classified terms gree connectivity cardinality existence concepts discussed attributes attributes entity instance attribute jane hathaway attribute domain attribute collection values attribute domain character string attributes classified identifiers descriptors identifiers commonly called keys uniquely identify instance entity descriptor describes unique characteristic entity instance classifying relationships relationships classified degree connectivity cardinality direction type existence modeling methodologies classifications degree relationship degree relationship number entities relationship ary relationship general form degree special cases binary ternary degree   binary relationships association entities common type real recursive binary relationship occurs entity employees married employees ternary relationship involves entities binary relationship inadequate modeling approaches recogni ze binary relationships ternary ary relationships decomposed binary relationships connectivity cardinality connectivity relationship describes mapping entity instances relationship values connectivity  cardinality relationship actual number occurences entities basic types connectivity relations   relationship instance entity instance entity employees company assigned office employee exis unique office office exists unique employee  relationships instance entity instances entity instance entity instance entity  relationships department employees employee assigned department relationship called specific instance entity instances entity instance entity instances entity employees assigned projects time projects assigned employees single employee assigned projects conversely single project assigned employee cardinality relationship employees projects cardina lity project employee relationships directly translated relational tables transformed relationships associative entities direction direction relationship originating entity binary relationship entity relationship originates parent entity entity relationship terminates child entity direction relationship determined connectivity relationship direction inde pendent entity dependent entity entities independent direction arbitrary relationships  entity occurring parent direction relationships arbitrary type identifying relationship child entities dependent entity identifying relationship entities independent existence existence denotes existence entity instance dependent existence entity instance existence entity relationship defined mandatory optional instance entity occur entity included relations hip mandatory mandatory existence statement eve project managed single department instance entity required optional optional existence statement employees assigned work projects generalization hierarchies generalization hierarchy form abstr action specifies entities share common attributes generalized higher level entity type called supertype generic entity lower level entities subtype categories supertype subtypes dependent entities generalization occurs tities represent categories real object wages_employees classified_employees represent categories entity employees employees supertype wages_employees classified_employees subtypes subtypes mutually exclusive disjoint overlapping inclusive mutually exclusive category entity instance category mutually exclusive category employee wages classified overlapping category entity instance subtypes person works university student university completeness constraint requires instances subtype represented supertype generalization hierarchies nested subtype hierarchy supertype level  nesting limited constraint simplicity subtype entities parent entity relationship child notation standard representing data objects diagrams modeling methodology notation notational styles represent entities rectangular boxes relationships lines connecting boxes style special set symbols represent cardinality onnection notation document martin symbols basic constructs entities represented labeled rectangles label entity entity names singular nouns relationships represented solid connecting entities relationship written relationship names verbs attributes included listed inside entity rectangle attributes identifiers underlined attribute names singular nouns cardinality represented crow foot crow foot cardinality existence represented placing circle perpendicular bar mandatory existence bar  entity instance required optional existence placing circle entity optional examples symbols figure   figure   notation    data modeling database design data model ceptual design process function model data model focuses data shoul stored database function model deals data ocessed context relational database data model design relational tables functional model design queries access perform operations tables data modeling preceeded planning analysis effort devoted stage proportional scope database planning analysis database intended serve enterprise require effort intended serve small workgroup needed build data model gathered requirments analysis formally considered data modeling stage methodologies reality requirements anal ysis diagramming data model time requirements analysis goals requirements analysis determine data requirements database terms primitive objects classify objects identify classify relationships objects determine types transactions executed database interactions data transactions identify rules governing integrity data modeler modelers works users organization determine data requirements database informati needed requirements analysis gathered ways review existing documents documents include existing forms reports written guidelines job descriptions personal narratives memoranda paper documentation good familiar organization activity model  interviews users combination individual group meetings group sessions people function meeting blackboard flip charts overhead transparencies record gathered interviews review existing automated systems organization automated review design specifications documentation requirements analysis time data modeling collected data objects identified classified entities attributes relationship assigned names defined terms familiar users objects modeled analys diagram diagram reviewed modeler users determine completeness accuracy model correct modified requires additional collected review edit cycle continues model certified correct points mind requirements analysis  talk users data real terms users terms entities attributes relations hips actual people things activities deal daily  time learn basics organization activities model understanding processes easier build model  users typically view ta ways function organization interview largest number people time permits   steps building data model model lists defines constructs required build data model standard process thodologies idefix development process mode built stages typically entities relationships modeled followe key attributes model finished adding key attributes experts argue practice phased  approach impractical requires meetings users sequence document  identification data objects relationships  drafting initial diagram entities relationships  refining diagram  add key attributes diagram  adding key attributes  diagramming generalization hierarchies  validating model normalization  adding business integrity rules model practice model building strict lin ear process requirements analysis draft initial agram occur simultaneously refining validating diagram uncover problems missing require gathering analysis identifying data objects relationships order constructing basic mode modeler analyze gathered requirements analysis purpose classifying data objects entities attributes identifying defining relationships entities naming defining identified entities attributes relationships documenting data document accomplish goals modeler alyze narratives users notes meeting policy procedure documents lucky design documents current easy define basic constructs model easy task distinguish roles building data model object entity attribute statem ent employees work projects employees classified entity attr ibute correct answer depends requirements database cases employee entity attribute  definitions constructs model simple model address fundamental issue identify commonly guidelines entities descriptive attributes identify entities relationships associations entities guidelines discussed entities attributes validating attributes derived attributes code values relationships naming data objects object definition recording design document entities definitions entity distinguishable person place thing event concept thing distinctly identified distinguishable object represented database store informati supplier machine tool employee utility pole airline seat entity type attributes stored definitions common themes entities entity thing concept object entities represent relationships objects type entity associative entity entities objects descriptive data object identified objects entity descriptive item entity  data object entity depend organization activity modeled entity represents things share properties single things king lear ha mlet plays share common attributes author cast characters entity describing things play king lear hamlet instances entity entities share common properties candidates converted generalization hierarchies entities distinguish time periods entities st quarter profits nd quarter profits collapsed single entity called profits attribute time period categorize time thing users collect entity complex concept require entity represent things users entities attributes attributes data objects identify entities attributes identify entities called key attributes attributes entity called key attributes key attributes discussed process identifying attributes extract names descriptive noun phrases validating attributes attribute values atomic single fact disaggregated data simpler programming greater reusability data easier implementation normalization depends single fact rule common types violations include simple aggregation common person concatenates middle initial address concatenates street address city zip code deali attributes good reasons decomposing  users person form letter sort zip code complex codes attributes values codes composed concatenated pieces code attached automobiles trucks code represents  pieces vehicle industry standard codes meaning user difficult process update text blocks free form text fiel legitimate reliance data requirements met model mixed domains attribute meaning conditions derived attributes code values areas data modeling experts disa gree derived attributes attributes values codes permitted data model derived attributes created formula summary operation attributes arguments including deri ved data based premise derived data stored database included data model arguments favor derived data managers users included data model document derived attributes attributes including derived attributes data model imply implemented coded letters numbers represent fact gender letters values male female practice cite codes intuitive meaning users add complexity proce ssing data favor argue organizations long history coded attributes codes save space  improve flexibility values easily modified tables relationships relationships associations entities typically relationship verb connecting entities employees assigned projects relationships identified classified terms cardinality optionality direction dependence result defining relationships relationships dropped relati onships cardinality quantifies relationships entities measuring instances entity single instance determin cardinality assume existence instance entities determine specific instances entity repeat analysis reversing entities employees assigned ree projects time project employees assigned cardinality relationship ployees projects projects employees cardinality relationship classified relationship relationship cardinality zer optional relationship cardinality relati onship mandatory optional relationships typically conditional tense employee assigned project mandatory relationships hand student register semester case specific relationship form    parent entity child entity relationships parent entity cardinality relationships choice parent entity context business modeled decision choice arbitrary  naming data objects names properties unique meaning user minimum number needed uniquely accurately object entities attributes names ngular nouns relationship names typically verbs authors advise abbreviati ons acronyms lead confusion abbreviations acronyms acceptable provided universally understood organization care identify resolve synonyms entities attributes happen large projects departments terms thing object definition complete accurate definitions parties involved modeling data concepts objects representing definitions terms familiar user precisely explain object represents role plays enterprise authors recommend users provide definitions acronyms terms universally understood definition defined defining objects modeler careful resolve instances single entity representing concepts homonyms entities representing thing synonyms situation typically arises individuals organizations event process terms function homonym case wh ere marketing department defines entity market terms geographical regions sales departments thinks entity terms demographics resolved result entity meanings properties  conversely synonym service department identified entity called customer desk identified entity contact reality thing person contacts calls organization assistance problem resolution synonyms order avoid redundancy avoid consistency integrity problems recording design document design document records detailed informa tion object model define objects document automate design tool document paper word processor standard organization document document include names definitions attributes domains documents idef1x method modeling keeping track objects entity entity matr entity attribute matrix entity entity matrix dimens ional array indicating relationships entities names identif ied entities listed axes relationships identified intersecting points axes meet lationship entities involved relationship classified replaced notation indicating cardinality entity attribute matrix assignment attributes entities form enti ty entity matrix attribute names listed rows figure   examples entity entity matrix entity attribute matrix  figure     developing basic schema entities relationships identified defined draft entity relationship diagram created introduces diagram demonstrating diagram binary relationships recursive relationships binary relationships figure   examples agram relationships  figure   binary relationships figure a agram reading diagram left represents relationship empl oyee assigned workstation employee workstation symbol mandatory existencešin case crossbaršis workstati entity reading left diagram workstation assigned employees condition reflect workstations spares loans symbol optional existence circle employee cardinality existence relationship derived business rules organization workstations owned organization assigned employees circle replaced crossbar mandatory existence relationships rarely real data models practioners advise  relationships collapsed single entity converted generalization hierarchy figure b relationship department project diagram department considered parent entity project child reading left diagram represents departments responsible projects optionality relationship reflects business rule departments organization responsible managing projects reading left diagram tells project responsibility department figure c relations hip employee project employee assigned projects project employee note association employee project optional time employee assigned project relationship project employee mandatory project employees assigned relations hips initial drafting model eventually transformed relationships transformation required relationships represented relational model process resolv ing relationships discussed recursive relationships recursive relationship entity figure   recursive relationship  employee manage employees employee managed employee figure   recursive relationship   summary data model plan building databa effective simple communicate user data structure required database detailed database design create physical structure entity relation model common method build data models relational databases entity relationship model conceptual data model views real consisting entities relationships model visually represents concepts entity relationship diagram basic constructs model entities relationships attributes data modeling preceded planning analysis planning defines goals database explains goals sets path goals reached analysis involves determining requirements database typically examining existing documentation interviewing users data modeling process basic model representing entities relationships developed model including attributes business rules  step creating data model analyze gathered requirements analysis goal identifying classifying data objects relationships entity relationship diagram pictorial representation major data objects entities relationships   key model database design data model schema entities relationship attributes cardinality   assessment questions  university registrar office maintains data entities courses including number title credits syllabus prerequisites offerings including number year semester number instructor timings classroom students including student program instructors including identification number department title enrollment students cour ses grades awarded students enrolled appr opriately modeled construct diagram registrar office document assumptions mapping constraints  design diagram keeping track exploits favorite sports team store matches played scores match players match individual player statistics match summary statistics modeled derived attributes  explain significance model database design  enumerate basic constructs model   references suggested readings  introduction database systems  edition addison wesley   leon alexis leon mathews database management systems leontechworld  elamasri navathe fundamentals database systems  edition pearsson education   mca   author abhishek taneja vetter pradeep bhatia lesson relational model lesson  structure   objectives   introduction   relational model concepts   relational model constraints   relational languages   relational algebra   relational database management systems oracle   summary   key   assessment questions   references suggested readings   objectives chapter reader relational model concepts properties relation relational keys relational model integrity constraints relational algebra introduce oracle relational database management    introduction principles relational model outlined codd june  paper called relational model data large shared data banks paper codd proposed relational mode database systems popular models time hierarchical network simple flat file data structures relational database management systems rdbms popular ease flexibility structure addition number innovative vendors oracle supplemented rdbms suite powerful application development user products providing total solution earlier convert unorganized text description requirements conceptual design diagrams advantage diagrams force identif data requirements implicitly explicitly written original description convert logical design defined relational database logical model called relational model   relational model concepts represent relation table ith columns rows column table attribute row called tuple domain set atomic values attribute attribute column ta ble data stored tables attribute ai domain dom relational schema design table table relation names columns attributes student sid age gpa degree relation number attributes relation schema tuple ordered set values v1 v2 v3 vn vi dom  relation instance set tuples notes  tuples instance relation considered ordered putting rows sequence change table  schema defined values vi tuple ordered v1 v2 v3 vn    properties relations properties database relations relation distinct relations cell relation atomic single attribute distinct values attribute domain order attributes significance tuple distinct duplicate tuples order tuples significance theoretically    relational keys kinds keys relations identifying keys primary key main concept keys œ super key candidate key œ concepts kind foreign key  identity keys super keys super key set attributes values uniquely identify tuple relation relation super key set attributes relation candidate keys candidate key super key minima proper subset superkey relation candidate key candidate keys number attributes interpret minimal super key fewest attributes candidate key properties tuple values uniquely identify tuple uniqueness proper subset uniqueness property irreducibility primary key primary key relation candidate selected key relation choice candidate key designated primary key relationship identity keys relationship keys superkey candidate key primary key foreign keys attribute relation tches candidate key relation relation foreign keys target relations foreign keys users link relation relation fks database collection unrelated tables   relational model constraints integrity constraints relational schema satisfy types constraints domain constraints attribute ai atomic dom ai attribute  attribute bad design search person key constraints superkey set attributes sk tuples valid relational instance lue sk distinct tuples sk sk key minimal superkey superke removal attribute result set attributes superkey car state licenseplateno vehicleid model year manufacturer schema keys k1 state licenseplateno k2 vehicleid k1 k2 superkeys k3 vehicleid manufacturer superkey key relation keys select arbitrarily primary key primary key attributes underlined schema car state licenseplateno vehicleid model year manufacturer entity integrity constraints primary key attribute relati onal schema database null values tuple table db key key row table null values identify individual tuples mathematically null tuple referential integrity constraints referential integrity constraints relationships relations database referencing relation r1 referenced relation tuples referencing relation r1 attributed fk called foreign key attributes reference  primary key attributes referenced relation tuple r1 reference tuple fk referential integrity constraint displayed relational database schema directed arc referencing foreign key referenced primary key examples figure relational mapping ready lay informal methods create relational schemas models steps  regular entity model create relation includes simple attributes select primary key mark  weak entity type model owner entity type create relation attributes attributes primary key note identical tuples share owner tuple create additional attribute  binary relation type model identify participating entity types   relationship choose relation include primary key foreign key  relationship entity relationship include primary key foreign key relation  create relation represent include primary keys foreign keys  multi valued attribute create relation includes attributes primary key attribute relation represents entity type relationship type attribute  ary relationship type  eate relation include foreign key attributes primary keys relations representing participating entity types include simple attributes ary relationship type attributes   relational languages considered structure database relations associations relations data extracted filtered database tables relational language needed express queries defined relational language abstract language database user interface whic data retrieved selection criteria main relational languages relational algebra relational calculus relational algebra focus user set operators create temporary relations based contained existing relati ons relational calculus hand set key user hoc inquiries   relational algebra relational algebra procedural language consisting set operators operator takes relations input produces relation output basic relational algebra operations selection projection joining union intersection difference division note operations alter database relation produced operation user stored database operation selection called restriction select operator selects tuples relation attributes tuple satisfy condition relati selected tuples created output suppose relation stores  relational operation select stores location dublin selects tuples stores located dublin creates relation r1 appears impose conditions attribute select stores location dublin bins  operation selects tuple relation projection projection operator constructs relation existing relation selecting attributes existing relation eliminating duplicate tuples newly formed relation r3 project stores store location  operation r4 project stores location relation r4 joining joining operation combining relations single relation outset requires choosing attributes match tuples relation tuples relations matching attributes combined single tuple output relation relation items previous stores relation joined items stores operator r5 join stores items store relation r5 relation joining items stores common attribute store tuples relation contained store joined form single tuple  joining relations based equality values common attributes called equijoin conditions join equality greater join duplicate attributes removed result equijoin called natural join natural jo store appears result note connection betw een keys primary foreign attributes join performed order amalgamate multiple tables database items store_id foreign key reflecting primary key store stor e_id join store_id relationship tables expressed explicitly output table illustrate relationship relations expressed diagram union intersection difference standard set operators requirement carrying operations operand relations union compatible  number attributes attribute relation domain attribute names union operator builds relation consisting tuples appearing relations intersect operator builds relation consisting tuples appearing strictly relations difference operator builds relation consisting tuples appearing relations represented diagrammatically exercise union interstion difference division simplest form operation nary relation dividend divisor includes output set values row divisor suppose relations r6 r7  operation r8 r6 r7 result company row boston york companies satisfy condition   relational database management systems oracle oracle database relational database oracle corporation extensively product internet based applications platforms oracle database developed larry ellison friends coworkers bob miner oates started consultancy called software development laboratories sdl called finished product oracle code cia funded project worked previous employer ampex oracle9i database rel  features xm database functionality oracle xml db enhancements groundbreaking oracl real application clusters tuning management capabilities improve dba productivity  efficiency addition built olap functionality expanded enhancements optimizations een windows linux operating systems oracle database enterprise user security password based enterprise user security administering user accounts time consuming costly activity organizations users lose passwords change roles leave company timely user administration field open data misuse data loss introducing password based authentication oracle i advanced security improved ease simplified enterprise user setup administration oracle partitioning oracle partitioning option oracle9i enterprise edition enhance manageability performance availability wide variety applications titioning tables indexes organized tables subdivided smaller pieces enabling database objects managed accessed finer level granularity oracle generic connectivity oracle transparent gateway oracle offers connectivity solutions address disparate data access oracle generic connectivity oracle transparent gateways solutions access number oracle systems oracle environment heterogeneously distributed environment performance improvements performance big issue databases biggest improvements ha parallel server oracle calls real application clusters applications clustered servers modification  security enhancements number users increase locations types users diverse security privacy features essential   summary  convert logical design relational database logical model called relational model  domain set atomic values attribute  attribute column table data stored tables  design table table relation names columns attributes called relational schema  number attributes rela tion schema called degree relation  super key set attributes values uniquely identify tuple relation  candidate key super key minimal proper subset superkey  primary key relation candidate key selected key relation  attribute relation matches candidate key relation called foreign key  relational schema satisfy types constraints domain constraints key constraints entity integrity referential integrity constraints  relational algebra procedural language consisting set operators operator takes relations input produces relation output  basic relational algebra operations selection projection joining union intersection difference division    key relation integrity constraints relational algebra primary key foreign key super key candidate key degree relation projection join   assessment questions  explain relational approach data base structures  relation characteristics  explain relational operators  explain relational constraints  explain relational algebra relational algebra operations performed  advantages relational model   references suggested readings  introduction database systems  edition addison wesley   leon alexis leon mathews database management systems leontechworld  elamasri navathe fundamentals database systems  edition pearsson education   mca   author abhishek taneja vetter prof dharminder kumar lesson sql lesson  structure   objectives   introduction history   sql   sql commands   data definition language ddl sql   data manipulation language sql dml   transaction control language sql tcl   constraints sql   indexes sql   summary   key   assessment questions   references suggested readings   objectives chapter reader history sql sql commands define characteristics sql commands ddl dml dcl commands constraints indexes sql    introduction history chapter emphasize deep wide deep sense implemented levels database communication simple access form list box high volume comm unications mainframes sql implemented ery dbms supports sql statements communication reason level acceptance partially explained effort theory development standards current state ansi sql group published standards years sql89 sql1 sql92 sql2 sql99 sql3 vast majority language changed updates profit fact code wrote sql standards  perfectly usable student sql years sql code expertise maintain expand  dbms designed meet sql92 standard virtually material book earlier standards advanced features sql92 implem ented dbms vendors pressure version standard sql99 standard developed address advanced issues sql core functions sql adding reading modifying data topics book standard early  vendor implemented sql99 standard areas current development sql standards entails improving internet access data meet emerging xml standards integration sun database  connectivity jdbc internal implementations groups establish sql standards integrate object based programming models   sql structured query language commonly abbrev iated sql pronounced ﬁsequelﬂ conventional computer programming nguage normal sense phrase users access data relational database management systems sql data sql statement returns result result query update record creation database table sql address relational database people refer sql database sql ł sql stands structured query language ł sql access database ł sql execute queries database ł sql retrieve data database ł sql insert records database ł sql delete records database ł sql update records database ł sql easy learn creating database database systems graphical interf aces developers users create modify interact underlying database management dbms purposes apter interactions dbms sql commands menus   sql commands groups commands sql  data definition   data manipulation  transaction control    characteristics sql commands sql commands follow number basic rules ł sql keywords case sens itive tutorial commands select update upper cased ł variable parameter names displayed lower case ł characters command broken number lines sake clarity ł dbms systems expect sql commands terminated semi colon character   data definition language ddl sql data definition language ddl sql permits database tables created deleted define indexes keys links tables impose constraints database tables ddl statements sql create table creates database table alter table alters database table drop table deletes database table create table creating database remarkably strai ghtforward sql command create database dbname database gjuniv command  create database gjuniv database created start implementing design sketched created database time sql create tables required design note sql keywords upper case variable names mixture upper lower case sql statement create table basic form create table col1 datatype col2 datatype create user table enter command create table user firstname text lastname text userid text dept text empno integer pctype text text datatype supported common dbms specifies string characters length practice default string length varies product dbms text upported specific string length declared fixed length strings called char vchar varchar string length case integer multiple flavors integer remember ing larger integers require bytes data storage choice int size design decision modify table table created structure ecessarily fixed stone time requirements change structure database evolve match wishes sql change structure table add field user table user internet access execute sql alter table command alter table user add column internet boolean delete column add keyword replaced drop delete field sql  alter table user drop column internet delete table executed original create table command database table called user rid drop command drop table user recreate user table rest tutorial create table user firstname varchar  lastname varchar  userid varchar  unique dept varchar  empno integer unique pctype varchar    data manipulation language sql dml sql language includes syntax update insert delete records query update commands form data manipulation language dml sql insert inserts data database table update updates data database table delete deletes data database table select extracts data database table insert data built structure database time populate tables data vast majority desktop database applications data entry performed user interface built kind gui form form representation required application rath providing simple mapping tables sample application ould imagine form text boxes user details drop lists select table drop selection software packages situation database user shielded underlying structure database sql enter data sql directly populate tables stage learning sql command add records table referred append query  insert target field1 field2 values value1 value2 add user record user jim jones issue insert query insert user firstname lastname userid dept empno pctype  values jim jones jjones finance  delldimr450 populating database issuing series sql commands tedious prone error reason database applications ends designed database systems including access data entry direct tables spreadsheet interface insert command opy data table sql query perform insert user firstname lastname userid dept empno pctype internet select firstname lastname userid dept empno pctype internet newusers update data insert command add records table amendment record case sql command perform updates update command syntax update table set newvalue criteria assume user jim jones finance department marketing sql statement update user set dept marketing empno   notice empno field set criteria unique field lastna accidentally updated records user surname update command changing single field record time set keyword set values number fields moved jim jones finance marketing changed pctype statement set dept marketing pctype prettypc finance department uddenly granted internet access issued sql query update user set internet true dept finance set keyword perform arithmetical logical operations values table salaries  increase issue command update payroll set salary salary   delete data add records update existing records remains learn delete records search collate data expect sql simple command delete complete records syntax command delete table table criteria assume user record john doe employee number  remove user issue query delete user  empno  practice delete operations handled manually keying sql queries generated syst handle warnings add safe guards accidental deletion records note delete query delete entire record group records delete single field group fields destroying record update query set fields null write data deleting worth noting delete query structure table deletes data delete table table drop clause alter table query   transaction control language sql tcl sql data control language dcl security database dcl consists grant revoke commit rollback statements grant revoke statements enable determine user view modify add delete database working transaction control applications execute sql statement oup logically sql statements perform database transaction sql statem ent statements add delete modify data database transactions atomic durable considered atomic transaction complete statements statements execute considered durable transaction database permanent complete transaction commit rollback statements commit statements permanent database created transaction rollback restores database state transaction performed sql transaction control language commands tcl  sql tcl commands command description modified sqlplus provided partially descri bed commands sqlplus directly commit purpose current transaction permanent performed transaction command erases savepoints transaction releases transaction locks command manually commit doubt distributed transaction syntax commit work comment text force text integer work supported compliance standard sql statements commit commit work equivalent comment specifies comment ssociated current transaction text quoted literal  aracters oracle stores data dictionary view dba_2pc_pending transaction transaction doubt force manually commits doubt stributed transaction transaction identified text cal global transaction ids transactions query data dictionary view dba_2pc_pending integer assign transaction change number scn omit integer transaction committed current scn commit statements force clause supported sql  prerequisites privileges commit rrent transaction manually commit distributed doubt transaction originally committed force transaction privilege nually commit distributed doubt transaction originally committe user force transaction privilege commit current transaction enter sql commit work commit complete rollback purpose undo work current transaction command manually undo work doubt distributed transaction syntax rollback work savepoint savepoint force text work optional provided ansi compatibility rolls current transaction savepoint omit clause rollback statement rolls entire transaction force manually rolls doubt distributed transaction transaction identified text cal global transaction ids transactions query data dictionary view dba_2pc_pending rollback statements force clause supported sql  prerequisites roll current transaction privileges manually roll doubt distributed transaction originally committed force transaction ivilege manually roll doubt distributed transaction originally committed user force transaction privilege rollback current transaction enter sql rollback rollback complete creating users covers creating database administrators creating users create statement data control language data definition language chapter addresses create statement relates creation database administrators users creating database administrators database security defined controlled database administrators dbas scope database security dbas responsible adding users deleting users permitting access specific database objects limiting prohibiting access database objects  granting users privileges view modify database objects modifying revoking privileges granted users user initially creates database default administrator initial user authority create administrator accounts database openedge studio offers methods creating dbas sql dba create statemen create user grant statement provide user administrative privileges progress gl dba data administration tool create administrators creating users syntax employ create user statement syntax create user username password   account dba privileges creates username gps password star   create user statement create user gps star user password changed easily alter user statement syntax alter user username ld_password new_password   demonstrates alter user statement   alter user statement  alter user gps star star1 users created default dba user created database disabled ant dba access user valid dba account user password easily changed alter user statement granting privileges covers privilege basics grant statement privilege basics types privileges¾those granted databases granted tables views procedures privileges databases granting restricting administration privileges dba granting restricting general creation privileges database resource privileges granted tables views procedures grant restrict operations specific operations altering object definition deleting inserting selecting updating records executing stored procedures granting privileges defining constraints existing table  grant statement grant statement provide user types privileges ł database wide privileges ł table specific privileges database wide privileges database wide privileges grant user dba resource privileges users dba privileges ability access modify delete database object grant privileges users resource privileges user create database objects grant statement syntax granting resource dba privileges syntax grant resource dba username username statement resource privileges user gsp   grant resource statement grant resource gsp case gsp granted privilege issue create statements add objects tables database table specific privileges granted users view add delete create indexes data table privileges granted users refer table table constraint definitions grant statement syntax granting table specific privileges  syntax grant privilege privilege table_name username username public grant option syntax privilege syntax select insert delete update column column references column column instance dba restricts types activities user allowed perform table gsp permission update item item number catalog descriptions item table note employing grant option clause enable user grant privilege granted clause carefully ability affect database security   illustrates granting table specific privileges   grant update statement grant update item itemnum itemname catdescription gsp grant update statement limited gsp ability interact item table gsp attempts update column granted access database return error message      sql error message sql exception  sqlstate hy000 errorcode  jdbc progress driver access denied authorisationfailed  granting public access grant statement easily modified restricted columns accessible public     granting update privilege public grant update item itemnum itemname catdescription public revoking privileges revoke statement variety purposes revoke single user access single column revoke public privilege access entire database privileges revoked manner granted_database wide table specific syntax revoke statement revoke database wide privileges syntax  revoke resource dba username username syntax revoke statement revoke table specific privileges syntax revoke grant option privilege privilege privileges table_name username username ublic restrict cascade privilege execute select insert delete update column column references column column revoke statement remit privileges granted gps     revoke statement revoke update item itemnum itemname catdescription gps revoke statement specifies restri sql checks privilege revoked passed users original privilege included grant option clause revoke statement fails generates error privilege passed revoke statement succeeds  revoke statement specifies casc ade revoking access privileges user revokes privileges users received privilege user revoke statement specifies restrict cascade behavior cascade   constraints sql data types limit kind data stored table applications constraint provide coarse column product price accept positive values data type accepts positive numbers issue constrain column data respect othe columns rows table product row product number sql define constraints columns tables constraints control data tables user attempts store data column violate cons traint error raised applies default definition    check constraints check constraint generic constr aint type column satisfy arbitrary expression instance require positive product prices create table products product_no integer text price numeric check price  constraint definition ter data type default definitions default values constraints listed order check constraint consists key word check expression parentheses check constraint expression involve column constrained constraint sense    null constraints null constraint simply specifies column assume null syntax  create table products product_no integer null text null price numeric null constraint written column constraint null constraint functionally equivalent creating check constraint check column_name null postgresql creating explicit null constraint efficient drawback explicit names null constraints created    unique constraints unique constraints ensure data contained column group columns unique respect rows table syntax create table products product_no integer unique text price numeric written column constraint create table products product_no integer text price numeric unique product_no written table constraint    primary key constraints technically primary key constraint simp ly combination unique constraint null constraint table definitions accept data create table products product_no integer unique null text price numeric create table products product_no integer primary key text price numeric primary keys constrain column syntax unique constraints create table integer integer integer primary key primary key column group columns unique identifier rows table rect consequence definition primary key note unique constraint fact provide unique identifier exclude null values documentation purposes  client applications gui app lication modifying row values primary key table identify rows uniquely    foreign keys constraints foreign key constraint specifies values column group columns match values appearing row table maintains referential integrity tables product table times create table products product_no integer primary key text price numeric assume table storing ders products ensure orders table orders products exist define foreign key constraint orders table references products table create table orders order_id integer primary key product_no integer references products product_no quantity integer impossible create orders product_no entries products table situation orders tabl referencing table products table referenced table referencing referenced columns   indexes sql relational databases sql server inde xes data query processed creating removing indexes database schema rarely result application code indexes ope rate scenes support database engine creating proper drastically increase performance application sql server engine reader book references insert statements sql book scan book mark time word insert reach book approach pretty time consuming laborious alternately book  number occurrence insert statements approach produces tremendous savings time sql server earching result reader book word sql engine visit row table database terminology behavior table scan scan table scan problem unavoidable table grows thousands rows millions rows scans correspondingly slower expensive query products table northwind database query retrieves products specific price range select productid productname unitprice products unitprice   unitprice  product table query database engine performs scan examines record unitprice falls    diagram database search ouches total  records matches imagine created book data unitprice column entry opy unitprice row reference number originated sql sort entries ascending order database  narrow rows satisfy query avoid scanning row table create llowing sql command specifies idx_unitprice table products column unitprice create idx_unitprice products unitprice works database takes columns create command sorts values special data structure tree tree structure supports fast searches minimum disk read allowing database engine starting stopping points query conceptually hown diagram left entry key unitprice entry includes reference points table rows share retrieve required book helps keywords database narrow numbe records examine minimum sorted list unitprice values ored avoided table  scan fetch query sk etch indexes work examine scenarios indexes offer benefit   summary  sql users access data relational database management systems  groups sql commands ddl dml dcl  data definition language ddl sql permits database tables created deleted  sql language includes syntax upda insert delete records query update commands form data manipulation language dml sql  sql data control language dcl security database dcl consists grant revoke commit rollback statements  constraints limit kind data stored table  relational databases sql server indexes data query processed   key sql ddl dml dcl constraints indexes   assessment questions  sql stand  sql statement delete table ﬁstudentﬂ  insert record table ﬁdepartmentﬂ  sql insert gju fname university table  delete record table ﬁstudentﬂ ﬁrollnoﬂ gju501  explain grant revoke commands  transaction control language commands  explain ways create user   references suggested readings  microsoft  sams teach microsoft sql server   days richard waymire rick sawtell   microsoft sql server   programming unleashed john papa   microsoft sql server   resource guide microsoft corporation  rpi temtanay dbf fall97 oracle sql_ddcmd html  mca   author abhishek taneja vetter pradeep bhatia lesson relational database design normalization lesson  structure   objectives   introduction   informal design guidelines relational schemas   functional dependencies   multivalued dependencies   relational database   normal form   normal form   normal form   boyce codd normal form   lossless join decomposition   dependency preservation decomposition   summary   key   assessment questions   references suggested readings   objectives chapter reader benefits relational model informal guidelines relational schema update insertion deletion anomalies functional dependencies forms fundamentals normalization distinguish nf nf nf bcnf normal forms  lossless join dependency preserving decomposition   introduction designing database ecisions real model database consists deciding tables create columns cont relationships tables nice process totally intuitive obvious automated simply cas designed database takes time effort conceive build refine benefits database designed relational model numerous data entry updates deletions efficient data retrieval summarization reporting efficient database formulated model behaves predictably stored database application database documenting database schema easy objective chapter explain basic principles relational database design demonstrate apply principles designing database   informal design guidelines relational schemas discuss informal measures quality relation schema design semantics attributes reducing redundant values tuples reducing null values tuples disallowing possibility generating spurious tuples measures independent     semantics attributes semantics specifies interpret attribute values stored tuple relation attribute values tuple relate conceptual design carefully systematic mapping relations semantics account design clear meaning design relation schema eas explain meaning combine attributes multiple entity types relationship types single relation intuitively relation schema corresponds entity type relation    reducing redundant values tuples storing redundantly place database lead problems redundant storage stored repeatedly update anomalies copy repeated data updated inconsistency created copies updated insertion anomalies store unrelated stored deletion anomalies delete losing unrelated design base relation schemas insertion deletion modification anomalies relations anomalies note programs update database operate correctly figure   instance hourly_emps relation     reducing null values tuples worth null values address problems context provide complete solution provide chapter discuss null values hourly_elmps relation null values eliminate redundant storag update anomalies appears address insertion deletion anomalies instance deal insertion anomaly insert employee tuple null values hourly wage field null values address insertion anomalies record hourly wage rating employee rating store null ssn field primary key field deal deletion anomaly examnple storing tuple null values fields rating hourly_wages tuple rating deleted solution work requires  null primary key fields null null values provide general solution problems redundancy cases decompositions intuitively redundancy arises relational schema forces association attributes natural functional dependencies identify situations refinements schema essential idea problems arising redundancy addressed replacing relation collection smaller relations decompositi relation schema onsists replacing relation schema relation schema subset attributes include attributes intuitively store instance storing projections instance examines decompositions thr ough examples decompose hourly_emps relations hourly_emps2 ssn lot rating_hours_ worked wages rating hourly_wages  instances relations figure   instance figure   figure   instance hourly_emps2 wages note easily record hourly wage rating simply adding tuple wages employee ting appears current instance hourly_emps changing wage associat rating involves updating single wages tuple efficient updating tuples original design eliminates potential inconsistency    disallowing possibility generating spurious tuples design relation schemas joined equality conditions attributes primary keys foreign keys guarantees spurious tuples generated avoid relations matching attributes foreign key primary key combinations joining attributes produce spurious tuples   functional dependencies discussion functional dependencies assume relational schema attributes database single universal relation called assumption attribute database unique  functional dependency property semantics attributes relation semantics attributes relate functional dependencies attributes functional dependency dependency constraint attributes relation attributes attribute functionally dependent attribute examine relation holds dependency tuples moment time note values figure   figure5  determinant consequent determinant functional dependency attribute group attributes left hand arrow functional dependency consequent fd attribute group attributes hand arrow identifying functional dependencies relational schema figure    figure   relational schema functional dependency staff position holds relation instance reverse functional dependency position staff hold relationship staff position   œ staff member position hand relationship position staff  œ staff numbers position figure   purposes normalization interested identifying functional dependencies attributes relation   relationship  identifying fds attributes lation distinguish values held attribute point time set values attributes hold times functional dependency property relational schema intension property instance schema extension reason identify fds hold values attributes relation represent types integrity constraints identify constraints limitations values relation legitimately assume identify legal instances identify functional dependencies hold relation schema staffbranch order identify time invariant fds understand semantics attributes relation schemas question staff membe position branch located determines salary knowing constraint familiar enterprise requirements analysis phase conceptual design phase staff sname position salary branch baddress branch baddress baddress branch branch position salary baddress position salary   trivial functional dependencies identifying fds hold values attributes involved fd ignore trivial functional dependencies functional dependency trivial consequent subset determinant impossible satisfied relation instances  trivial dependencies include staff sname sname staff sname staff  trivial fds valid offer additional integrity constraints relation normalization concerned trivial fds    inference rules functional dependencies denote set functional pendencies relational schema typically schema designer specifies fds semantically obvious numerous fds hold legal relation instances satisfy dependencies additional fds hold fds inferred deduced fds set functional dependencies implie set functional dependencies called closure denoted notation denotes functional dependency implied set fds formally set inference rules required infer set fds kr isti older debi debi older traci infer kristi older traci inference thinking knowing bout utilized transitivity rule inference set fds implied set fds called closure written algorithm compute ttack problem appeared paper armstrong set inference rules inference rules apply functional dependencies  rules ir1 ir3 armstrong axioms constitute sufficient set inference rules generating closure set functional dependencies rules stated variety equivalent ways rules directly proved definition functional dependency rules complete sense set fds fds implied derived rules rules derived rules gh proof   reflexive rule ir1  projective rule ir4 step   additive rule ir5 steps     transitive rule ir3 steps     transitive rule ir3 steps    additive rule ir5 steps     transitive rule ir3 steps    gh additive rule ir5 steps   œ proven irreducible sets dependencies s1 sets fds fd implied s1 implied s1 subset cover s1 cover equivalent set dbms enforces fds automatically enforcing fds s1  cover s1 s1 cover s1 s1 equivalent s1 equivalent dbms enforces fds automatically enforcing fds s1 vice versa define set fds irreducible called minimal literature satisfies properties  hand dependent fds involves attribute singleton set  left hand determinant irreducible turn meaning attribute discarded determ inant changing closure converting set quivalent fd left irreducible  fd discarded changing closure converting set equivalent work things relation satisfies fds acd irreducible equivalent set fds puzzled solution simple solution     acd         ł  implies  drop  ł  implies augmentation  implies transitivity drop  ł  implies acf augmentation  implies acd acf augmentation acd transitivity acd decomposition drop  reductions left irreducible set alternatively ł  implies acd composition  implies transitivity replace  ł  implies  drop    implies composition implies adc augmentation original  implies transitivity drop  reductions left irreducible set  observe distinct irreducible equivalence original set fds   multivalued dependencies multivalued dependency relates problem multivalued attributes exist rela tion represents entity employee mutlivalued attribute proj emp dept salary proj considered normaliza tion based functional dependencies dependencies apply single valued facts dept implies dept database single valued proj employee relation list projects employee working determines list projects employee working proj functional dependency dealt multivalued facts entity separate relation multivalue attribute inserti tuple fact composite keys multivalued fact form key examples dealt entity multivalued attribute relation  fourth normal forms deal multivalued dependencies  th normal forms discussed lecture deals normalization discuss illustrate concept multivalued dependency programmer emp_name qualifications languages relation includes multivalue attributes entity programmer qualifications languages functional dependencies attributes qualifications languages assumed independent qualifications languages separate entities relationships employees qualifications employees programming languages relationships programmer severa qualifications programming languages qualificati programmers programming language programmers suppose programmer qualificati ons dip comp proficient programming langua ges represented possibilities  figure   variations remind eader relationship qualifications programming languages variations disadvantages repeat face problems repeated anomalies normal form conditions violated repetition difficulties search insertions deletions role null values relations confusing candidate key relations emp qualifications language existential integrity requires nulls problems overcome decomposing relation figure    figure   basis decomposition concept multivalued dependency mvd functional dependency relates multivalued dependency defines relationship set values attribute determined single concept multivalued dependencies developed provide basis decomposition relations relation enrolment sno subject relationship sno subject sno uniquely determines values subject dependence subject sno called trivial mvd relation enrolment decomposed formally mvd xy called trivial mvd subset form relation mvd trivial constraints relation relation trivial mvds attributes multivalued trivial mvds result relation constraints combinations multivalue attributes required relation define concept multivalued dependency multivalued dependency xy hold relation set set values attribute attributes  set values set attributes values depend values dependence set attributes dependence attributes qualifications language language qualifications qualification training certificate language relation mvd decomposed relations theory multivalued dependencies functional dependencies set mvds closure set axioms discuss axioms   relational database relational database tables derived uml models suffer problems terms figure   single table database performance integrity maintainability entire database defined single large table result large redundant data lengthy searches small number target rows result long expensive updates deletions result elimination data unwanted  situation figure   products salespersons customers orders stored single table called sales table product customer stored redundan tly wasting storage space queries ﬁwhich customers ordered vacuum eaners month ﬂ require search entire table updates changing address customer dave bachmann require changing rows finally deleting order valued customer qiang zhu bought xpensive computer outstanding order deletes copy address credit rating difficult impossible recover problems occur situations databa set collection tables tables large method breaking larg table smaller tables types problems eliminated tabase efficient reliable classes relational database schemes table definitions called normal forms commonly accomplish goal creation normal form database table called normalization normalization accomplished analyzing interdependencies individual attributes tables projections subsets columns larger tables form smaller normalization formal process determin ing fields belong tables relational database normalization set rules worked time relational databases born normalized relational database benefits elimination redundant data storage close modeling real entities processes relationships structuring data model flexible normalization ensures bene fits relational databases offer time spent learning normalization paying review basic normal forms established relational database literature practice    normal form definition table normal form nf columns atomic values column row table relational database tables sales table illustrated figure   atomic values row column tables considered normal form basic level normalized tables understand definition nf helps difference domain attribute column domain set values type attribute attribute domain people names underlying set names customer salesperson database table figure   column relational table represents single attribute cases column refer attributes domain occurs table nf values table atomic fact standard sql assumes atomic values relational table default nf    superkeys candidate keys primary keys table nf suffers data duplication update performance update integrity problems unders tand issues define concept key context normalized tables superkey set attributes coll ectively identify uniquely entity table subset attributes superkey superkey reducible superkey called candidate key primary key selected arbitrarily set candidate keys table figure   report table  figure   composite attributes table forms superkey duplicate rows allowed relational model trivial superkey formed composite attributes table assuming department address dept_addr table single valued conclude composite attributes dept_addr superkey smaller smaller composites attributes making ealistic assumptions attributes single valued composite report_no author_id uniquely determines attributes table superkey report_no author_id determine row uniquely composite attributes reduced superkey composite report_no author_id candidate key candidate key table primary key table candidate figure   additional column author_ssn composite report_no author_ssn uniquely determine attributes table report_no author_id report_no author_ssn candidate keys primary key arbitrary choice candidate keys   normal form explain concept normal form nf higher introduce concept functional dependence property attributes uniquely determine attributes called functional dependence table set attributes functionally dependent set attributes instant time asso ciated functional dependence denoted preceding figure   assume llowing functional dependencies table report report report_no editor dept_no dept_no dept_name dept_addr author_id author_name author_addr  definition table normal form nf nf nonkey attribute fully dependent primary key attribute fully dependent primary key fd left primary key derived primary key transitivity fds transitive fd report report_no dept_no dept_no dept_name derive fd report_no dept_name dept_name transitively dependent report_no continuing composite key figure   report_no author_id candidate key primary key exists fd dept_no dept_name dept_addr component primary key left fds report_no editor dept_no author_id author_name author_addr component primary key left components report satisfy condition nf fds disadvantages nf table report report_no editor dept_no duplicated author report editor report rows updated update anomaly represents potential degradation performance redundant updating editor table editor editing report report number editor number add row table primary key null relational databases insert anomaly finally report withdrawn rows report deleted deleting associates author_id author_name author_addr deletion effects nature delete anomalies represent potential loss integrity data restored data database insert database anomalies represent problems database designers delete anomaly lose data recove red disadvantages overcome  transforming nf table nf tables projection operator subset attributes nf table project report report_no editor dept_no dept_name dept_addr form report1 project report author_id author_name author_addr form report2 finally project report report_no author_id form report3 projection report smaller tables preserved fds association report_no author_no original ta ble data tables figure   fds nf tables report1 report_no editor dept_no dept_no dept_name dept_addr report2 author_id author_name author_addr report3 report_no author_id candidate key fds tables satisfy onditions nf eliminated worst problems nf integrity delete anomaly editor dept_no dept_name dept_addr longer duplicat author report editor change update row report1 deletion report ha deleting author  figure   nf tables performance degradation eliminat report_no duplicated author deletion report requires updates tables report1 report3 minor problems compared nf table report note report tables nf generated directly uml diagram equiva lently modeled situation entities author report relationship   normal form nf tables established previous represent improvement nf tables suffer  figure   nf tables types anomalies nf tabl reasons transitive dependencies transitive functional dependency exists table separate facts represented table fact functional dependency involving left delete report database involves deleting rows report1 report3 figure   deleting association dept_no dept_name dept_addr project table report1 report_no editor dept_no form table report11 project report1 dept_no dept_name dept_addr form table report12 eliminate problem tables report11 report12 figure   definition table normal form nf nontrivial functional dependency simple composite attributes conditions hold attri bute superkey attribute member candidate key attribute member candidate key called prime attribute note trivial fd form yz preceding projecting report1 report11 report12 eliminate transitive dependency report_no dept_no dept_name dept_addr nf tables functional dependencies data figure    report11 report_no editor dept_no report12 dept_no dept_name dept_addr report2 author_id author_name author_addr report3 report_no author_id candidate key fds   boyce codd normal form nf eliminates anomalies databases today common standard normalization commerc ial databases case tools remaining anomalies eliminated boyce codd normal form bcnf bcnf considered strong variation nf definition table boyce codd normal form bcnf nontrivial fd superkey bcnf stronger form normalization nf eliminates condition nf allowed fd prime attribute left fd table superkey table bcnf nf nf nf previous definitions nf table bcnf tables delete anomalies lower normal forms assertion  team employee dir ected leader team directed leader emp_name team_name leader_name assertion  leader directs team leader_name team_name table nf composite candidate key emp_id team_id  team table delete anomaly sutton drops condors team record bachmann leading condors team  type anomaly lossless decomposition preserve fds lossless decomposition requires decompose table smaller tables projecting original table overlapping subsets scheme natural join subset tables sult original table extra unwanted rows simplest avoid lete anomaly kind situation create separate table assertions tables partially redundant avoid delete anomaly decomposition lossless trivially preserves functional dependencies degrades update performance redundancy necessitates additional storage space trade worth delete anomaly avoided   lossless join decomposition chapter normalized number relations decomposing decomposed relation intuitively basis deciding decompositions intuition correct illustrate careless decomposition lead problems including loss relation enrol sno cno enrolled room instructor suppose decompose relation relations enrol1 enrol2 enrol1 sno cno enrolled enrol2 enrolled room instructor problems decomposition focus aspect moment instance relation enrol  decomposed relations enrol1 enrol2 relation rol appears enrol1 enrol2 suppose wanted retrieve student numbers students wilson join enrol1 enrol2 join  tuples add tuples  join number spurious tuples original relation enrol additional tuples lost students courses wilson tuples unable certainty courses wilson decompositions called lossy decompositi ons nonloss lossless decomposition guarantees join result relation decomposed ways recovering original relation decomposed relations sadly operators recover original relation join analyse decompositions lossy common attribute decompositions enrolled common ttribute glue ability relationships relations joining relations common attribute unique relationship preserved tuple unique enrolled problem losing existed probl arises enrolments place decomposition relation relations r1 called lossless join decomposition respect fds lation natural join relations r1 natural join recover relation decomposed relations ere set operators recover relation join decomposed relations r1 projecting relation r1 projection  relation r1 precisely equal projection relation r1 additional tuples called dangling tuples explain difficult test decomposition lossless join set functional dependencies simple case relation decomposed r1 decomposition ssless join conditions hold  r1 r1 r1 œ r15  dependency preservation decomposition clear decomposition lossl ess lose relation decomposed pendency preservation requirement dependency constraint database xy holds sets attributes closely attributes appeared relation dependency checked easily relation dependencies include decompose relation r1 dependency checked preserved relation desirable decompositions dependency checked relation joins computed checking dependencies cases preserve dependency long dependencies preserved equivalent sufficient dependencies relation decomposed relations r1 partition dependencies f1 dependencies involve attributes relations r1 union dependencies imply dependencies decomposition preserved dependencies decomposition preserve dependencies decomposed relations relations satisfy updates decomposed  relations require join check constraints implied dependencies hold relation sno instructor office decompose relati remove transitive dependency office sno decomposition s1 sno instructor sno office relations nf dependency instructoroffice verified relation join s1 needed decomposition ffice number instructor functional dependency instructoroffice   summary  designing relational schema semantics attributes reducing redundant values tuple reducing null valuesin tuples avoiding generation spurious tuples issues care  design base relation schemas insertion deletion modification anomalies relations  redundancy arises relational hema forces association attributes natural functional dependencies identify situations refinements schema  functional dependency property semantics attributes relation semantics attribut relate functional dependencies attributes  table normal form nf columns atomic values column row table  superkey set attributes collectively identify uniquely entity table   subset attributes supe rkey superkey reducible superkey called candidate key  primary key selected arbitrarily set candidate keys table  table boyce codd normal form bcnf nontrivial fd superkey   key database design modification anomalies decomposition functional dependency normalisation normal form normal form normal form bcnf lossless join dependency preservation super key candidate key primary key   assessment questions  guidelines eed care designing relational schema  update insert delete anomalies examples  define functional dependencies  explain inference rules  explain concept multi valued dependency  term unnormalized relati refer normal forms develop historically  write rules normalization explain  define normal form primary keys considered general definitions nf nf keys relation differ primary keys   references suggested readings  microsoft accesssolutions  introduction database systems  edition  leon alexis leon mathews database management systems leontechworld  mca   author abhishek taneja vetter prof dharminder kumar lesson query processing lesson  structure   objectives   introduction   query optimization   heuristic query optimization   basic algorithms executing query operations   summary   key   assessment questions   references suggested readings   objectives chapter reader fundamentals query processing query optimization heuristics query optimization algorithms query processing    inroduction chapter discuss query processing dbms lesson repetitions previous chapters included lesson purposefully order maintain continuity meaningfulness topic deal start lecture bang database systems queries pos procedural language sql earlier queries involve reference access paths order evaluation operations query processing queries dbms involves phases  parsing  optimization  code generation  execution parser basically checks query correct syntax translates conventional parse tree called query tree internal representation parser returns errors query user defined views expand query making appropr iate substitutions views check query semantic correctness consulting catalogues check semantic errors type compatibility expressions predicate comparisons optimizer invoked internal representation query input query plan execution plan devised retrieving required optimizer rries number operations relates symbolic names query data base objects checks existence checks user authorized perform operations query specifies formulating plans query optimi zer obtains relevant metadata maintains ttempts model estimated costs performing alternative query plans selects  metadata catalog consists desc riptions databases dbms maintains query optimizer retrieve  cardinality relation  number relation  number distinct keys  number optimizer modeling cost estimation alternative query plan considerable catalog  relation attributes domains  primary key foreign keys relation  descriptions views  descriptions storage structures  including ownership security issues updated periodi cally update insert delete catalog stored relational database making easy query catalog user authorized catalog query processing extensively therefor comprehensive accurate database maintains optimization carry maintaining comprehensive accurate introduces additional overheads good balance catalog optimizer access path selection statistics updated periodically accurate optimizer ponent consults metadata stored database statistics referenced relations access paths determin efficient order relational operations efficient access path order operations access  paths selected number alternat possibilities exist cost query processing minimized details query optimization presented optimizer finds errors outputs execution plan code generator invoked execution plan code generator generate machine language code data structures code stored code executed execute code machine transfers control code executed   query optimization query optimization carried ould decide optimized goal achieving effici ency situations minimize processing time situations minimize response time situations minimize network time memo sort combination total resources generally query processing algorithm considered efficient algorithm measure cost minimized processing query res ources generally illustrate desirability optimizati simple query processed fferent ways query retrieves subject names instructor names rrent subjects computer science john smith enrolled select subject instructor student enrolment subject student student_id enrolment student_id subject subject_id nrolment subject_id subject department computer science student john smith process query joins restrictions performed number ways performed including   join relations student enrolment join result subject restrictions  join relations student enrolment restrictions join result subject  restrictions join relations student enrolment join result subject  join relations enrolment subject join result student restrictions talking cost estimates attempt compare costs alternatives understand estimating cost plan trivial database disk resident cost reading writing disk dominates cost processing query estimate cost processing query terms disk accesses block accesses estimating number block accesses proce simple query straight forward depend data stored indexes database relations stored packed form block tuples lation systems store tuples relations block making expensive scan relation compare costs options exact cost computations difficult simple estimates cost situation enrolment database consists   tuples relation student   enrolment   relation subject simplicity assume relations student subject tuples size  bytes accommodate  tuples block block assumed  kbytes size relation enrolment assume tuple size  bytes figure  tuples block addition john smith enrolled  subjects  subjects offered computer science estimate costs plans listed  cost query plan  computed join computed reading block relation scan relation identify matching tuples method called nested scan efficient discuss issue efficiency algebrai operators reading block relation scan relation cost estimated number blocks times number blocks number blocks student  enrolment   total number blocks read computing join student enrolment x     block accesses result join   tuples tuple enrolment matches tuple student joined tuples size  bytes tuple join tuple student joined enro lment tuple size  bytes fit  tuples block   blocks store   joined tuples cost computing join result subject     block accesses total cost plan     block accesses estimate cost plan  cost computing join student enrolment estimated    block accesses result  blocks size result applying restrictions result join reduces result   tuples   blocks cost restriction  disk accesses result applying restriction relation subject reduces relation  tuples  blocks cost restriction  block accesses join requires  block accesses total cost    estimate cost plan  estimate size restrictions cost cost restrictions reading relations student subject writing reading costs   block accesses writing costs small size  tuple student  tuples subject cost computing join student enrolm ent involves cost reading enrolment   block accesses resu small size  cost writing result small total cost plan    block accesses estimates processi plan  estimate cost estimates sufficient illustrate brute force method query processing efficient cost reduced query plan optimized issue optimizati complex estimating costs estimation alternative access paths access relation cost estimates assumed secondary storage access costs dominate query processing costs reasonable assumption cost communication dealing distributed cost storage large tabases queries require large intermediate cost cpu uncommon database applications cpu bound bound assumed chapter assume centralized cost secondary storage access assumed domin ate costs recognize true cost fetches cpu utilization query dbms choose process database optimization query processing generally involves operations  suitable internal representation  logical transformation query  access path selection alternatives  estimate costs select discuss steps     internal representation earlier query posed query language sql translated internal representation suitable mach ine representation internal query representation powerful represent queries query language sql internal representation relational algebra relational calculus languages powerful relationally complete codd ecessary modify discussed earlier chapter features group aggregations represented representation relational algebra procedural query represented representation sequence operations representations include object graph operator graph parse tree tableau representations jarke koch  sort tree presentation appears commonly discussions assume query tree representation representation leaf nodes query tree base relations nodes correspond relational operations    logical transformations chapter query formulated number ways semantically equivalent desirable queries transformed query representation translate query canonical form simplify involves transformations query selection optimal sequence operations transformations disc uss physical representation database designed improve efficiency query processing access methods transformation discussed examples query involves joins restriction efficient carry restriction reduce ze relations assuming  restriction applies relation cost join heuristic optimization heuristic approach sequence operations query reorganized query execution time improves deterministic optimization deterministic appro ach cost forms query evaluated selected common subexpression technique common subexpressions query recognised avoid executing sequence operations   heuristic query optimization heuristic optimization includes making transformations query tree moving operators tree transformed tree equivalent tree transformations discuss heuristics discuss rules governing manipulation relational algebraic expressions  joins products commutative join natural jo order attributes products joins ordering attributes considered relational model attributes referred position list attributes  restriction commutative  joins products associative  associativity operations guarantees ordering computations operations product join union intersection associative  cascade projections attributes subset attributes expression formalises obvious projection attributes projection subset  cascade restrictions expression formalises obvi ous restrictions carry restrictions time require processing relation restrictions combined  commuting restrictions projections difficulty computing restric tion projection restriction projection commute projection restriction restriction attributes projection   commuting restrictions cartesian product cases apply commutative law restrictions product expressions assumed predicate attributes predicate attributes  commuting restriction union  commuting restriction set difference  commuting projection cartesian product join assume projection includes join predicate attributes  commuting projection union rules transform query tree minimize query cost cost assumed closely size relations operation carried primary aims transformations discuss reduce size intermediate relations basic transformations include moving restrictions tree idea carry restrictions early query involves joins restrictions moving restrictions lead substantial savings relations joined restrictions sma ller cases smaller restrictions earlier chapter query plans expensive query plans cost restriction carried situations restriction reduce relation restriction selecting women large relation customers clients  projections executed early real life databases relation attributes erefore size tuple large relations attribut images making tuple relations large situations projection executed early leads elimination attributes relation tuples smaller size data ead disk operations follow reduced leading cost savings attributes retain lations needed result operations carried relation optimal ordering joins earlier join operator associative query involves join efficient ordering carrying joins ordering efficient carry joins ead small carrying joins lead large cascading restrictions projections convenient carry operations restrictions projections operand operations carried saving cost scanning relations projections projections merged projection projection carried operand relation projections merged lead substantial savi ngs intermediate written disk read disk combining restrictions cartesian product form join query involve cartesian product restriction join optimizer recognise execute join cheaper perform sorting deferred sorting nlogn operation deferring sorting sort relation smaller sorting carried earlier  set operations reorganised commutativity distribution reorganised form efficient   basic algorithms executing query operations efficiency query processing relational database depends efficiency relational operators simplest operations executed ways costs ways join frequently costly operator worthy detailed study discuss operators careful thought needed efficiently carrying simpler operators selection simple query select query involve number types predicates list presented selinger query condition ways  attribute  attribute1 attribute2  attribute  attribute value1 value2  attribute list values  attribute subquery  predicate expression predicate expression   predicate expression predicate expression simple case equality approaches depending relation stored traversing file called file scan file scanned predicate involves equality condition single attribute attribute efficien search tuple attribute equal efficient require accessing block access tuple attribute condition clause simple equality condition single attribute condition inequality range exists depend condition posed clause situations necessa scan relation tuples satisfy condition expensive relation large tuples stored packed form expensive relation large tuples stored block tuples relations possibility relation stored hash file attribute hash record efficiently condition conjunction disjunction conditions conjunctive queries efficiently processed composite based attributes involved conditions exception rule assess conditions processed efficiently conditions processed step tuples satisfy condition involves efficient search retrieves smallest number tuples retrived remaining conditions tested tuples retrieved processing disjunctive queries requires techniques case union tuples satisfy conditions  condition processed separately concern conditions satisfied satisfied independently conditions requires scan relation test conditions scan retrieve tuples satisfy conditions projection projection require scan relation projection includes candidate key relation duplicate removal tuple projection guaranteed unique projection include candidate key duplicates database systems remove duplicates user specifies duplicates removed sorting projected rela tion identifying duplicates eliminating ha shing desirable relations large hashing hash identical tuples bucket require sorting relations bucket duplicates compute restri ction join compute restriction access paths join assume carry equi join relations joined attributes cardinality count join output cost identical methods assume assume strictions projections carried ordered indexed explicitly  join operator relational database systems fact join operator considerably expensive operators selection projection number algorithms suggested processing join commonly algorithms  nested scan method  sort merge algorithm  hashing algorithm hashing good equi join  variants hashing  semi joins  filters  links  indexes  concept join indices proposed valduriez  hashing methods good join equi join    nested iteration discussing methods listed discuss naive nested iteration method accesses pair tuples concatenates equi join condition matter condition satisfied cost naive algorithm assuming ordered cost large large assume relation outer relation relation tuples retrieved relation relation nested iteration loop tuples retrieved tuple read predicate join attributes called join predicate algorithm written   access ith tuple  access jth tuple compare ith tuple jth tuple equi join condition satisfied concatenate save method basically scans outer relation retrieves tuple entire relation scanned tuples satisfy join predicate tuple combined tuple output result process continues tuple exhausted cost order memory buffers store blocks cost factor number tuples block technique called nested block method cost saving achieved reading smaller relation outer block reduces cost met hod higher relations stored packed form retrieve tuples efficiency nested iteration nested block iteration improve join attributes average number blocks relation accessed tuple cost join mc     indexes nested iteration method efficient indexes join columns relations assume availabl indexes join columns relations scan ndexes determine pair tuples join attribut tuple selected tuples selected join attribute scanning join attribute join attribute scanned check tuple attribute tuples join attribute selected combined tuples selected process continues tuples method requires substantial storage store attributes join attribute lue cost join indexes estimated cost reading indexes an1 bn2 total cost an1 bn2 n1 cost savings indexes larg justify building join computed    sort merge method nested scan technique simple involves matching block block avoided relations ordered join attribute sort merge algorithm introduced blasge eswaran  classical technique choice joining relations attributes  method involves sorting relations join attributes sorted storing temporary lists scanning block block merging tuples satisfy join ondition advantage scheme relation nested iteration read tuple outer relation saving substantial outer relation large cost sorting cost reading relations main memory total cost join relations sorted join attribute cost join reduces algorithm improved multiway merge sort cost sorting log    simple hash join method method involves building hash table smaller relation hashing tuple hash attribute assumed relation large fit main memory hash table gene ral fit main memory hash table built stages numbe addresses hash table selected tuples hashed addresses stored main memory tuples hash addresses written disk tuples relation algorithm works scan relation hash tuple join attribute hashed equal addresses main memory store tuple hash table write tuple disk relation scan relation hash tuple join attribute conditions hold   hashed equal selected values tuple attribute exists combine tuples match tuple output tuples join  hashed equal selected values tuple join attribute tuple rejected  hashed equal selected values tuples written disk relation step continues till finished repeat steps relation exhausted    grace hash join method method modification simple hash join method partitioning completed scanned partitioning completed joining phase method consists phases  partition assumed large fit main memory hash table built main memory phase algorithm involves partitioning relation buckets bucket hash table entry number buckets chosen large bucket comfortably fit main memory  partition phase algorithm involves partitioning relation number buckets bucket hash table entry hashing function  compute join bucket read bucket read matching tuples buckets combined output join    hybrid hash join method hybrid hash join algorithm modification grace hash join method  aggregation aggregation queries frequency requirements finding average maximum times functions supported sql average minimum maximum ount sum aggregation types including aggregation requires relation finding maximum mark subject nvolve relation require finding number students cla aggregation require grouping tuples relation aggregation applied   summary  query processing dbms involves phases parsing optimization code generation execution  parser basically checks query correct syntax translates conventional parse tree called query tree internal representation  optimizer invokes internal represen tation query input query plan execution plan devised retrieving required  heuristic optimization includes making transformations query tree moving operators tree transformed tree equivalent tree transformations   key query processing heuristics query optimisation   assessment questions  discuss rules governing manipulation relational algebraic expressions  explain algorithms processing join operation  explain estimate costs performing query processing    references suggested readings  data base systems  data base management systems alexis leon mathews leon  databases library  mca   author abhishek taneja vetter pradeep bhatia lesson concurrency control techniques lesson  structure   objectives   introduction   transaction properties   concurrency control   locking   deadlock   locking techniques concurrency control based time stamp ordering   multiversion concurrency control techniques mvcc   summary   key   assessment questions   references suggested readings   objectives chapter reader dbms techniques concurrency control distinguish locking deadlock locking techniques concurrency control based time stamp ordering multi version concurrency control techniques    introduction concurrency terms databases allowing multiple users access data contained database tim concurrent access managed database management dbms simultaneous operations interfere problems occur vari ous transactions interleave inconsistent database concurrency achieved dbms interleaves actions reads writes db objects transactions transaction leave database consistent state db consistent transaction concurrent execution user programs essential good dbms performance disk accesses frequent slow cpu humming working user programs concurrently interleaving actions user programs lead incons istency check cleared account balance computed dbms ensures problems users pretend single user define transaction transaction sequence read write operations data items logically functions unit work ł ł succeeds write operations persist commit fails effects write operations persist abort ł guarantees concu rrent activity failures occur  figure   acid properties transaction ł atomic process transaction transaction subdivided atom ł consistent data systems reflects state ł isolated transactions interact interfere transactions independent ł durable effects completed transaction persistent concurrent execution good reasons allowing concurrency  improved throughput resource utilization throughput number transactions executed unit time cpu disk operate parallel transaction read write disk transaction running cpu cpu disk utilization increases  reduced waiting time serial processing short transaction wait long transaction complete concurrent execution reduces average response time average time transaction completed     concurrency control concurrency control needed handle problems occur transactions execute concurrently concurrency issues lost update update object transaction overwritten interleaved transaction knowledge initial update lost update figure   transaction update lost uncommitted dependency transaction reads object updated transaction falls uncommitted dependency  figure   transaction reads uncommitted inconsistent analysis transaction calculating aggregate function updated objects transaction inconsistent analysis figure   sum inconsistent  main goals database concurrency control ł point problem areas earlier performance analyses ł introduce queuing network models evaluate baseline performance transaction processing systems ł provide insights relativ performance transaction processing systems ł illustrate application basi analytic methods performance analysis concurrency control methods ł review transaction models intended relieve lock contention ł provide guidelines improving performance transaction processing systems concurrency control point areas investigation   transaction properties ensure data integrity dbms intain transaction properties atomicity consistency isolation durability properties referred acid properties acronym derived letter properties lecture introduced terms implementations banking gain understanding acid properties ill banking accounts set transactions accesses updates accounts access database accomplished operations  read operation transfers data item database local buffer belonging transaction executed read operation  write write operation transfers data item local buffer transaction executed write operation database suppose transaction transfers  account ca2090 sb2359 transaction defined  read ca2090 ca2090 ca2090  write ca2090 read sb2359 sb2359 sb2359  write sb2359 acid properties implementing atomicity assume transaction ta place balances account  account sb2359  suppose execution transaction failure power failure occurred prevented successful completion transaction failure occurred write ca2090 operation executed fore execution write sb2359 case accounts ca2090 sb2359 reflected database     account lost failure created problem state database longer reflects real state database supposed capture state called inconsistent state database ensure inconsistencies visible database hould successful execution transaction exists points inconsistent state difference case successful transaction period database inconsistent state short transaction brought consistent stat transaction started completed inconsistent stat visible execution transaction reason atomicity requirement atomicity property provided actions ansaction reflected database mechanism maintaining atom icity dbms tracks values data transaction performs write transaction complete execution values restored  transaction place transaction management component dbms ensures atomicity transaction implementing consistencies consistency requirement sum ca2090 sb2359 unchanged execution transaction execution transaction amounts accounts ca2090 sb2359     execution amounts     cases sum amounts   maintaining consistency ensuring consistency individual transaction responsibility application programmer codes transaction  implementing isolation atomicity consistency prope rties ensured transaction problems transactions executed concurrently transactions interfere undesirable suppose executing transaction database temporarily inconsistent transaction executed suppose transaction performed write ca2090 operation time transaction reading balances accounts checks account ca2090 finds account balance   suppose reads account balance account account sb2359 transaction chance update account account balance account sb2359  transaction read account balances transaction reads account balance account sb2359 updates  left problem transaction executed database consistent state inconsistent state transaction performed operations updated total account balances left database inconsistent state transactions executed solution situation concurrent execution transactions execute transactions serially  create problems suppose long transactions executed transactions wait queue transactions independent interfere transactions wait queue concurrent executions transactions performan advantages dbms solutions multiple transactions execute concurrency problem isolation property transaction ensures concurrent execution transactions result state equivalent state transactions executed ensuring isolation property responsibility concurrency control component dbms implementing durability durability property guarantees transaction completes updates carried database persist failure transaction completes execution guara ntee durability ensuring updates carried transaction written disk transaction completes updates carried transaction written disk sufficient data base reconstruct updates data base restarted failure ensuring durability responsibility recovery management component dbms picture transaction management concurrency control components dbms transaction states transaction committed undo transactions rolling transaction undo effects committed transaction execute compensating transaction creating compensating transaction complex task left user handled dbms transaction states  active initial state transaction stays state executing  partially committed transaction state executed final statement   failed transaction state normal execution transaction proceed  aborted transaction aborted transaction rolled database restored consistent state prior start transaction  committed transaction committed state executed database ansformed consistent state transactions states arte figure figure   state transition diagram transaction   concurrency control discussed earlier talk concurrency control concurrency control database management systems permits users assumed interactive access database multi programmed environment preserving illusion user sole access control needed coordinate concurrent accesses dbms correctness database maintained users bot read update record database tim relative timing transactions impact state databa transactions result inconsistent database concurrent control needed  ł problems occur concurrent transactions execute uncontrolled manner œ lost update problem occurs transactions access database items operations interleaved database item incorrect œ temporary update dirty ead problem occurs transaction updates database item transaction fails reason updated item accessed nother transaction changed original œ incorrect summary problem transaction calculating aggregate function number records transaction updating records aggregate function calculate values updated updated ł transaction submitted dbms execution œ operations transacti completed recorded permanently database œ transaction database transactions case transaction fails executing operations executing problems created concurrent execution transactions multiple update problems problem data written ansaction update operation overwritten update transaction illustrated banking account ca2090  balance suppose transaction withdrawing  fro account transaction depositing  account transactions executed serially final balance  irrespective order transactions performed rds transactions performed serially result sameif performed performed  order idf trans actions performed concurrently depending transactions executed vary execution transactions figure   transactions start time read account balance  transactions perform operations supposed perform reduce and write result data base increase  write database overwriting previous update account balance gain additional  producing wrong result start execution result  result wrong situation avoided preventing reading account balance update completed incorrect analysis problem problems transacti updating database transactions read database produce wrong result allowed read database database inconsistent state problem referred dirty read unrepeatable data problem dirty read occurs transaction reads values data base transactions updating values case transaction reads account balances accounts total account suppose transactions updating account balances reducing withdrawals increasing  deposits transaction reads account balances finds totals wrong read account balances update case accounts updates accounts problem solved preventing transaction reads balances reading account balances transactions update accounts completed inconsistent retrievals users accessing department database simultaneously user updating database employees  salary raise user total salary department transactions interfere total salary changing user updates employee records total salary retrieved user sum salaries raise raise sum considered acceptable total salary raise raise figure   inconsistent retrieval  problem illustrated called inconsistent retrieval anomaly execution transaction transaction committed visible data consistent uncommitted dependency situation figure   uncommitted dependency transaction reads updated transaction committed result transaction writing lead inconsistent state database transaction write reads existed situation occur roll written transac tion roll restore lead loss updated transaction called uncommitted dependency anomaly  serializability serializability set interleaved transacti ons serial sable produces rial execution transactions serializability concept associ ated locking guarantees work concurrently executing transactions ill leave database state transactions executed serially requirement ultimate criterion database consistency motivati phase locking protocol dictates locks acquired behalf transaction dbms releases lock held transaction practice protocol generally locks held commit time serializability classical concurrency scheme ensures schedule executing concurrent transactions equivalent executes transactions serially order assumes accesses database read write operations schedule called correct serial schedule equivalent set transacti ons schedules s1 transactions equivalent conditions satisfied read write synchronization transaction reads written transaction schedule schedule write write synchronization transaction overwrites transaction schedule schedule properties ensure difference effects schedules serializable schedule schedule serial transaction participating schedule operations executed consecutively schedule called serial schedule ł serial schedule considered correct nonserial schedules erroneous  ł schedule transactions seriali zable equivalent serial schedule transactions nons erial schedule equivalent serial schedule serializable ł definition schedules considered ﬁequivalentﬂ œ result equivalent producing final state database œ conflict equivalent order conflicting operations schedules œ view equivalent read operation transaction reads result write operation schedules write operations transaction produce ł conflict serializable schedule conflict equivalent serial schedule reorder conflicting operations form equivalent serial schedule serializable schedule ł view serializability schedules view equivalent conditions hold set transactions participate include operations transactions schedule view serializable view equivalent serial schedule   locking order execute transactions interleaved manner form concurrency control ł enables efficient computer resources ł method avoiding problems locks ł transaction requires database object lock locking concurrent environment assure process retrieve update record updated process failure controls locking result inconsistent corrupt data locks enable multi user dbms maintain integrity transactions isolating transaction executing concurrentl locks critical write  intensive mixed workload read write nvironments prevent inadvertent loss data consistency problems reads addition record locking dbms implem ents locking mechanisms ensure integrity data structures provide shared communication processes cluster automa tic recovery event process cluster failure integrity implications locks impact performance benefit pplication lock large data tables hold thes locks long period time inhibits concurrency increases likelihood applications wait locked resources locking rules locking rules applicable user reads writes data database locking rules ł number transactions hold locks item ł transaction holds lock item transaction hold lock item ł transaction holding lock issu write read request data item ł transaction holding lock issue read request data item   deadlock lies threat writing reading data database resources deadlock condition operating systems databases situa tion processes prevented continuing waits resources freed continuation number situations processes proceed waiting release resource situation processes concurrent processor waiting event occur simple version dead lock loosely synchronous environment arises blocking reads writes correctly matched nodes execute blocking writes time deadlock occur  write complete complementary read executed node   locking techniques concurrency control based time stamp ordering timestamp method concurrency contro locks deadlocks locking methods generally prevent conflicts making transaction walk timestamp methods transactions wait transactions involved conflict simply rolled restarted timestamp unique identifier created dbms relative starting time transaction timestamps generated clock generating timestamp transaction starts execute incrementing logical counter time transaction starts time stamping concurrency control prot ocol fundamentals goal order transactions globally older transactions priority event conflict timestamping method tran saction attempts read write data item read write operation allo update data item carried older transaction transaction requesting read write restarted timestamp prevent continually aborting restarting restarted transaction allowed timestamp allowed timestamp allowed retain timestamp allowed perform read write transaction newer timestamp restarted transaction commit younger transactions committed addition timestamp transacti ons data items assigned timestamps data item read timestamp write timestamp read timestamp timestamp transaction read item write timestamp timestamp transac tion updated item transaction timestamp ordering protocol works transactions requests read data item updated younger greater timestamp transaction earlier transactions read data item updated transaction late read previous outdated values acquired  inconsistent updated data item situation transaction aborted restarted timestamp cases transaction allowed proceed read operation read timestamp data item updated timestamp transaction transaction requests write update data item read younger greater timestamp transaction younger transaction current data item error update situation occurs transaction late performing write younger transacti read written case transaction aborted restarted timestamp transaction asks write data item written younger transaction trans action attempting write obsolete data item case transaction aborted restarted timestamp cases transaction allowed proceed write timestamp data item updated timestamp transaction scheme called basic timestamp ordering scheme guarantees transactions conflict serializable equivalent serial schedule transactions executed chronological order timestamps basic timestamps ordering scheme transactions executed interleaving problems basic timestamp ordering guarantee recoverable schedules modification basic timestamp ordering protocol relaxes conflict serializability provide greater concurrency rejecting obsolete write operations extension thomas write rule thomas write rule modifies checks write operation transaction transaction requests write data item values read younger transaction order transaction transaction writing obsolete data item case write operation  transaction transaction allowed continue write performed principle called ignor obsolete write rule rule greater concurrency cases transactions allowed proceed write timestamp transaction   multiversion concurrency control techniques mvcc aim multi version concurrency avoid problem writers blocking readers vice versa making multiple versions data problem writers blocking readers avoided readers access previous version data locked writers modification problem readers blocking writers avoided ensuring readers locks data multi version concurrency readers operate acquiring locks advantage fact writer updated record prior version reader waiting writer commit abort multi rsion concurrency solution readers block writers vice versa multi version concurrency improves database concurrency impact data consistency complex    requirements multi version concurrency systems implies multi version concurre ncy relies multiple versions data achieve higher levels concurrency typically dbms offering multi version concurrency mvdb provide features  dbms retrieve older versions row  dbms mechanism determ ine version row valid context transaction dbms version committed prior start transaction running query order determine dbms transaction created version row transaction committed prior starting current transaction    approaches multi version concurrency essentially approaches multi version concurrency approach store multiple versions records database garbage collect records  longer required approach adopted postgresql firebird interbase approach latest version data database svdb implementations reconstruct older versions data dynamically required exploiting informa tion write ahead log approach oracle mysql innodb   summary concurrency terms databases allowing multiple users access data contained database time transaction sequence read write operations data items logically functions unit work concurrency control needed handle problems occur transactions execute concurrently ensure data integrity dbms maintain transaction properties atomicity consistency isolation durability acid concurrency control database management systems permits users assumed interactive access database multi programmed environment preserving illusion user sole access serializability set interleaved transactions serial sable produces serial execution transactions serializability concept locking locking concurrent environment assure process retrieve update record updated process timestamp unique identifier created dbms relative starting time transaction   key concurrency control locking dead lock time stamp acid properties transaction serializability   assessment questions  concurrency   concurrency control  explain transaction live examples  acid properties transaction  concurrency needed  locking  deadlocks  explain timestamp ordering protocol  explain timestamping control   references suggested readings  introduction database systems  edition   silbershatz korth sudarshan database concepts  edition  mca   author abhishek taneja vetter pradeep bhatia lesson database recoverytechniques lesson  structure   objectives   introduction   recovery concepts   recovery techniques based deferred update   recovery techniques based update   shadow paging   database backup recovery catastrophic failures   summary   key   assessment questions   references suggested readings   objectives chapter reader techniques database recovery failures recovery concepts including write ahead logging place versus shadow updates process rolling undoing incomplete failed transaction technique shadowing shadow paging techniques recovery catastrophic failure    introduction chapter discuss techni ques database recovery failures discussed failure crashes transaction errors start   outline typical recovery procedures categorization recovery algorithms discuss recovery concepts including write ahead logging place versus shadow updates process rolling undoing incomplete failed transaction   recovery techniques based deferred update undo redo technique   discuss recovery techniques based update include undo redo undo redo algorithms discuss technique sha dowing shadow paging categorized undo redo algorithm   finally techniques recovery catastrophic failure discussed   emphasis conceptually describing approaches recovery   recovery concepts    recovery outline categorization recovery algorithms recovery transaction failures database restored consistent state time failure applied data items transactions typically stem log typical strategy recovery summarized informally  extensive damage wide portion database catastrophic failure disk crash recovery met hod restores copy database backed archival storage typically tape reconstructs current state reapplying redoing operations committed transactions backed log time failure  database physically dama ged inconsistent catastrophic failures types discussed previous chapter strategy reverse caused inconsistency undoing operations redo operations order rest ore consistent state  database case complete archival copy database entries online log consulted recovery conceptually distinguish main techniques recovery catastrophic transaction failures deferred update  update deferred update techniques physically update database disk transaction reaches commit point updates recorded database reaching commit transaction updates recorded local transaction workspace buffers commit updates recorded rsistently log written database transaction fails reaching commit point changed database undo needed redo operations committed transaction log recorded data base deferred update undo redo algorithm discuss technique   update techniques database updated operations transaction transaction reaches commit point operations typically recorded log disk force writing applied database making recovery transaction fails recording database reaching commit point operations database undone transaction rolled general case update undo redo required recovery technique undo redo algorithm requires operations practice variation algorithm updates recorded database transaction commits requires undo undo redo algorithm discuss techniques      caching buffering disk blocks recovery process closely intertwined operating functions buffering caching disk main memory typically diskpages include data items updated cached main memory buffers updated memory written disk caching disk traditionally operating function efficiency recovery procedures handled dbms calling low level  operating systems routines general onvenient recovery terms database disk blocks typically collection memory buffers called dbms cache control dbms purpose holding buffers directory cache track database items buffers table disk address buffer location entries dbms requests action item firs checks cache directory determine disk item cache item located disk disk copied cache replace flush cache buffers space item replacement strategy operating systems lru fifo select buffers replacement buffer cache dirty bit included directory entry buffer modified read database disk cache buffer cache directory updated disk address dirty bit set buffer modified dirty bit dir ectory entry set  buffer contents replaced flushed cache contents written disk dirty bit  bit called pin unpin bit needed cache pinned bit  written disk main strategies employed ushing modified buffer disk strategy place updating writes buffer original disk location overwriting changed data items disk single copy database disk block maintained strategy shadowing writes updated buffer disk location multiple versions data items maintained general data item updating called image bfim updating called image afim shadowing bfim afim disk strictly maintain log ecovering discuss recovery based shadowing       write ahead logging steal steal force force place updating log recovery case recovery mechanism ensure bf data item recorded log entry log entry flushed disk bfim overwritten afim database disk process generally write ahead logging protocol write ahead logging distinguish types log entry included write command  needed undo  needed redo redo type log entry includes afim item written operation needed redo operation log setting item database afim undo type log entries include bfim item needed undo operation log setting item database bfim undo redo algorithm types log entries combined addition wh cascading rollback read_item entries log considered undo type entries mentioned dbms cache holds cached database disk blocks include data blocks blocks log blocks disk log record written stored current log block dbms cache log simply sequential append disk file dbms cache log blocks log blocks written disk update data block stored dbms cache ssociated log record written log block dbms cache write ahead logging approach log blocks log records data block update written disk data block written disk standard dbms recovery terminology includes terms steal steal force force database written disk cache  cache updated transaction written disk transaction commits called steal approach pin unpin bit written disk protocol writing updated buffer transaction commits called steal steal dbms cache buffer manager buffer frame transaction buffer  manager replaces existing updated transaction committed  updated transaction written disk transaction commits called force pproach called force deferred update recovery scheme   steal approach typical database systems employ steal force strategy advantage steal avoids large buffer space store updated memory advantage force updated committed transaction buffer transac tion update eliminating cost read disk provide substantial saving number operations specific updated heavily multiple transactions permit recovery lace updating entries required recovery permanently recorded logon disk applied database write ahead logging wal protocol recovery algorithm requires undo redo  image item overw ritten image database disk undo type log records updating transaction point time force written disk  commit operation transaction nnot completed redo type undo type log records transaction force written disk facilitate recovery process dbms ecovery subsystem maintain number lists transactions processed include list active transactions starte committed include lists committed aborted transactions checkpoint maintaining lists recovery process efficient    checkpoints log fuzzy checkpointing type entry log called checkpoint checkpoint record written log periodically point writes database disk dbms buffers modified consequence transactions commit entries log fore checkpoint entry  write operations redone case crash updates recorded database disk check pointing recovery manager dbms decide intervals checkpoint interval measured time minutes number committed transactions checkpoint values parameters checkpoint consists actions  suspend execution transactions temporarily  force write main memory buffers modified disk  write checkpoint record log force write log disk  resume executing transactions consequence step  checkpoint record log include additional list active transacti ids locations addresses records log active transaction facilitate undoing transaction operations event transaction rolled time needed force write modified memory buffers delay transaction processing step  reduce delay common technique called fuzzy checkpointing practice technique resume transaction processing checkpoint record written log wait step  finish step  completed previous checkpoint record remain valid accomplish maintains pointer valid checkpoint continues point previous checkpoint record log step  concluded pointer changed point checkpoint log    transaction rollback transaction fails reason updating database roll transaction data item values changed transaction written database rest ored previous values bfims undotype log entries restore values data items rolled transaction rolled transaction interim read data item written rolled rolled transaction read data item written  rolled phenomenon called cascading rollback occur recovery protocol ensures recoverable schedules ensure strict cascadeless schedules cascading rollback understandably complex time consuming recovery mechanisms designed cascading rollback required figure   cascading rollback required read write operations individual transactions figure  a figure  b log point crash execution schedule transactions values data items  transactions log entrie assume original item values      point failure transaction  reached conclusion rolled write operations marked single figure  b  operations undone transaction rollback figure  c graphically operations transactions time axis check cascading rollback figure  c transaction  reads item written transaction determined examining log  rolled rolled write operations  marked log undone note write_item operations undone transaction rollback read_item operations recorded log determine cascading rollback additional transactions  figure   illustrating cascading rollback process occurs strict cascadeless schedules read wr ite operations transactions log point crash operations crash practice cascading rollback transactions required practical recovery methods guarantee cascadeless strict schedules record read_item operations log needed determining cascading rollback   recovery techniques based deferred update idea deferred update techniques defer postpone actual updates database transaction complete execution reaches  commit point transaction execution updates recorded log cache buffers transaction reaches commit point log force written disk updates recorded database transaction fails reaching commit point eed undo operations transaction database disk simplify recovery practice transactions short transaction items types trans actions potential running buffer space transaction held cache buffers commit point state typical deferred update protocol  transaction change database disk reaches commit point  transaction reach commit point update operations recorded log log force written disk notice step protocol restatement write ahead logging wal protocol database updated disk transaction commits undo operations undo redo recovery algorithm redo needed case fails transaction commits recorded database disk case transaction operations redone log entries method recovery failure closely concurrency control method multi user systems discu recovery single user systems concurrency control needed understand recovery process independently concurrency control method discuss concurrency control affect recovery process    recovery deferred update single user environment environment recovery gorithm simple algorithm rdu_s recovery deferred update single user environment redo procedure subsequently redoing write_item operations works procedure rdu_s lists ansactions committed transactions checkpoint active transactions transaction  fall category single user apply redo operation write_item operations committed transactions log order written log restart active transactions redo procedure defined redo write_op redoing write_item operation write_op consists examining log entry write_item new_valu setting item database new_val image afim redo operation required idempot ent executing equivalent executing fact recovery process idempotent fail recovery process recovery attempt redo wr ite_item operations redone recovery process result recovery crash recovery result recovering crash recovery notice transaction active list database deferred update protocol completely recovery process operations reflected database disk transaction restarted automatically recovery process manually user figure   recovery single user environment failure occurs execution transaction figure  b recovery process redo write_item  entry log resetting item  write  entries log recovery process committed failure occurs recovery failure recovery pro cess repeated start finish identical  figure   recovery deferred update single user environment read write operations transactions log point crash    deferred update concurrent execution multi user environment multi user systems concurrency control recovery process complex depending protocols concurrency control cases concurrency control recovery processes interrelated general greater degree concurrency achieve time consuming task recovery concurrency cont rol strict phase locking locks items remain transaction reaches commit point locks released ensures strict serializable schedules assuming checkpoint entries included log recovery algorithm case rdu_m recovery deferred update multi user environment procedure redo procedure defined earlier procedure rdu_m checkpoints lists transactions maintained committed transactions checkpoint commit list active transactions active list redo write operations committed transactions log order written log  transactions active commit effectively canceled resubmitted figure   schedule executing transactions checkpoint time transaction committed transactions  t4 crash time committed  t5 rdu_m method redo write_item operations transaction transactions committed checkpoint time write_item operations  redone transactions reached figure   recovery multiuser environment commit points checkpoint recall log force written committing transaction transactions  t5 effectively canceled rolled write_item operations recorded database deferred update protocol refer figure   illustrate recovery protocols undo redo recovery algorithm efficient noting data item updated log entries committed transactions checkpoint redo update log recovery updates overwritten redo case case start log item redone list redone items redo app lied item list checked item appears list redone agai  recovered transaction aborted reason deadlock detection method simply resubmitted changed database disk drawback method limits concurrent execution transactions items remain locked transaction reaches commit point addition require excessive buffer space hold updated items transactions commit method main benefit transaction operations undone reasons  transaction record database disk reaches commit point completes execution transaction rolled failure transaction execution  transaction read item written uncommitted transaction items remain locked transaction reaches commit point cascading rollback occur figure   recovery multi user utilizes recove concurrency control method    transaction actions affect database general transaction actions affect database generating printing messages reports retrieved database transaction fails comple tion user reports transaction failed complete erroneous reports produced recovery process inform user reports wrong user acti based reports database reports generated transaction reaches commit point common method dealing actions issue commands generate reports batch jobs executed transaction reaches commit point transaction fails batch jobs canceled  figure   recovery deferred update concurrent transactions read write operations transactions log point crash   recovery techniques based update techniques transaction issues update command database updated transaction reach commit point techniques update operation recorded log disk applied database write ahead logging protocol recover case failure provisions undoing update operations applied database failed transaction accomplished rolling transaction undoing transaction write_item operations theoretically distinguish main categories update algorithms recovery technique ensures updates transaction recorded database disk transaction commits redo operations committed transactions  called undo redo recovery algorithm hand transaction allowed commit written database general case undo redo recovery algorithm complex technique discuss examples undo redo algorithms leave exercise reader develop undo redo variation    undo redo recovery based update single user environment single user failure occurs executing active transaction time failure recorded database operations undone recovery gorithm riu_s recovery update single user environment redo procedure defined earlier undo procedure defined procedure riu_s  lists transactions maintained committed transactions checkpoint active transactions transaction fall category single user  undo write_item operations active transaction log undo procedure  redo write_item operations committed transactions log order written log redo procedure earlier undo procedure defined undo write_op undoing write_item operati write_op consists examining log entry write_item old_va1ue _va1ue setting item database old_va1ue image bfim undoing number write_item operations transactions log proceed reverse order order operations written log    undo redo recovery based update concurrent execution concurrent execution permitted recovery process depends protocols concurrency control procedure riu_m recovery  updates multi user envir onment outlines recovery algorithm concurrent transactions upda assume log includes checkpoints concurrency control protocol produces strict schedules strict phase locking protocol recall strict schedule transaction read write item transaction wrote item committed aborted rolled howe ver deadlocks occur strict phase locking requiring abort undo transactions strict schedule undo operation requires changing item bfim procedure riu_m  lists transactions maintained committed transactions checkpoint active transactions  undo wri te_item operations active uncommitted transactions undo procedure operations undone reverse order written log  redo wri te_item operations committed transactions log order written log discussed    step  efficiently starting log redoing update item item redone list redone items redone procedure devised improve efficiency step    shadow paging recovery scheme require log single user environment multiuser environment log needed concurrency control method shadow paging considers database number fixed size disk disk blocks recovery purposes directory entries constructed ith entry points ith database disk directory main memory large references reads writes database disk transaction executing curre directory entries point current database sk copied shadow directory shadow directory saved disk current directory transaction  transaction execution shadow directory modified write_ item operation performed copy modified database created copy overwritten written unused disk bloc current directory entry modified point disk block shadow directory modified continues point unmodified disk block figure   illustrates concepts shadow current directories updated transaction versions version referenced shadow directory version current directory recover failure transaction execution sufficient free modified database dis card current directory state database transaction execution shadow directory state recovered reinstating shadow directory database returned state figure   shadow paging prior transaction executing crash occurred modified discarded committing transacti corresponds discarding previous shadow directory recovery involves undoing redoing data items technique categorized undo redo technique recovery multiuser environment concurrent tran sactions logs checkpoints incorporated shadow paging technique disadvantage shadow paging  updated database change location disk difficult database close disk complex storage management strategies directory large overhead writing shadow directories disk transactions commit complication handle garbage collection transaction commits referenced shadow directory updated released list free future longer needed transaction commits issue operation migr ate current shadow directories implemented atomic operation   database backup recovery catastrophic failures techniques discussed apply catastrophic failures key assumption log maintained disk lost result failure shadow rectory stored disk recovery shadow paging recovery techniques discussed entries log shadow directory recover failure bringing database consistent state recovery manager dbms equipped handle catastrophic failures disk crashes main techni handle crashes database backup database log periodically copied cheap storage medium magnetic tapes case catastrophic failure latest backup copy reloaded tape disk restarted avoid losing effects transactions executed backup customary log frequent intervals database backup periodically copying magnetic tape log smaller database backed frequently users lose transactions performed database backup committed transactions recorded portion log backed tape database redone log started database backup recover disk failure database recreated disk latest backup copy tape effects  committed transactions operations recorded backed copies log reconstructed   summary  recovery transaction failures database restored consistent state time failure  conceptually distinguish main techniques recovery catastrophic transaction failures deferred update  update  main goal recovery ensure atomicity property transaction  deferred update update deferred update techniques postpone actual updating database disk transaction reaches commit point  deferred update approach concurrency control methods designed require transaction rollback recovery simply consists redoing operations transactions committed checkpoint log  shadow paging technique recovery wh ich track database shadow directory technique classified noundo redo require log single user systems log multiuser systems  recovery catastrophic failures wh ich typically backing database log tape log backed frequently database backup log redo operations starting database backup   key database recovery buffering rollback shadow paging   assessment questions  discuss types transac tion failures meant catastrophic failure  discuss actions ead_item write_item operations database   log typical kinds entries log checkpoints  transaction commit points  buffering caching techniques recovery subsystem  image bfim image afim data item difference place updating shadowing respect handling bfim afim  undo type redo type log entries  write ahead logging protocol  identify typical lists transactions maintained recovery subsystem  meant transaction rollback meant cascading rollback  practical recovery methods protocols permit cascading rollback recovery techniques require rollback  discuss undo redo operations recovery techniques  discuss deferred update technique recovery  advantages disadvantages technique called undo redo method  recovery handle transaction opera tions affect database printing reports transaction  discuss update recovery technique single user multiuser environments advantages disadvantages update  difference betw een undo redo undo redo algorithms recovery immedi ate update develop outline undo redo algorithm  shadow paging recovery technique circumstances require log  discuss recovery catastrophic failures handled    references suggested readings  introduction database systems  edition addison wesley   leon alexis leon mathews database management systems leontechworld  elamasri navathe undamentals database systems  edition pearsson education   mca   author abhishek taneja vetter pradeep bhatia lesson distributed databases client server architectures lesson  structure   objectives   introduction   distributed database concepts   data fragmentation replication allocation techniques distributed database design   types distributed database systems   query processing distributed databases   overview client server architecture   summary   key   assessment questions   references suggested readings   objectives chapter reader distributed databases design issues data fragmentation replication distribution distinguish horizontal vertical fragments relations types ddbms techniques distributed query processing client server architecture concepts    introduction chapter turn attention distributed databases ddbs distributed database management systems ddbmss client server architecture platform database application devel opment ddb technology emerged merger technologies  databa technology  network data communication technology emendous strides terms wired wireless technologies satellite cellular communications metropolitan area networks mans standardization protocols ethernet tcp asynchronous transfer mode atm explosion internet early databases moved centralization sulted monolithic gigantic databases seventies early eighties trend reversed decentralization autonomy processing late eighties advances distributed processing distributed computing occurred ope rating systems arena database community considerable work address issues data distribution distributed query transaction processing distributed database metadata management topics developed protot ypes scale comprehensive ddbms implements functionality techniques proposed ddb emerged commercially viable product major vendors redirected efforts developing pure ddbms product developing systems based client server developing technologies accessing distributed heterogeneous data sources organizations interested decentralization processing level achieving integration resources logical level geographically distributed systems databases applications users coupled advances communications general endorsement client server approach application development assumes ddb issues chapter discuss distributed databases client server architectures development database technology closely tied advances communications network technology details scope   introduces distributed database management concepts  detailed issues distributed database design involving fragmenting data distributing multiple sites replication discussed     introduces types distributed database systems including federated multi database systems highlights problems heterogeneity autonomy federated database systems whic dominate years sections   introduce distributed database query finally   discussed architecture distributed databases   distributed database concepts distributed databases bring advantages distributed computing database management domain distributed computing stem consists number processing elements homogeneous interconnected computer network cooperate performing assigned tasks general goal distributed computing systems partition big unmanageable problem smaller pieces solve efficiently coordinated manner economic viability approach stems reasons computer power harnessed solve complex task  autonomous processing element naged independently develop applications define distributed database ddb collection multiple logically interrelated databases distributed computer network distributed database management ddbms software manages distributed database making distribution transparent user collection files stored nodes network main taining interrelationships hyperlinks common organization internet files web common functions database manageme including uniform query processing transaction processing apply scenario technology moving direction distribut wide web databases reality future    parallel versus distributed technology turning attention parallel chitectures main types multiprocessor architectures commonplace  ł shared memory tightly coupled architecture multiple processors share secondary disk storage share primary memory ł shared disk loosely coupled architecture multiple processors share secondary disk storage primary memory architectures enable processors communicate overhead exchanging messages network databa management systems developed types architectures termed parallel database management systems ddbms utilize parallel processor technology type multiprocessor architecture called shared architecture architecture processor primary secondary disk memory common memory exists processors communicate high speed interconnection network bus switch shared architecture resembles distributed database computing environment major differences ist mode operation shared multiprocessor systems symme homogeneity nodes true distributed database environment heterogeneity hardware operating node mmon shared architecture considered environment parallel databases    advantages disadvantages distributed databases advantages matches distributed organizational model improved sharability local autonomy improved availability improved reliability improved performance economics modular growth disadvantages complexity cost security lack standards integrity control difficult database design complex    data fragmentation replication allocation techniques distributed database design discuss techniques break database logical units called fragments assigned storage sites discuss data replication permits data stored site process allocating fragments replicas fragments storage sites techniques process distributed database design data fragme ntation allocation replication stored global directory accessed ddbs applications needed    data fragmentation ddb decisions site store portions database assume replication relation portion relation stored site discuss replication effects terminology relational databases concepts apply ta models assume starting relational database schema decide distribute relations sites figure   schema diagram company relational database schema  illustrate discussion rela tional database schema figure   decide distribute data determine logical units database distributed simple logical units relations relation stored site decide site store relations employee department project works_on dependent figure   cases relation divided smaller logical units stribution company database figure   assume ere computer sites department company store database relating department computer site department technique called horizontal fragmentation partition relation department horizontal fragmentation horizontal fragment rela tion subset tuples relation tuples belong horizontal fragment condition attributes relation single attribute involved define ree horizontal fragments employee relation figure   conditions dno  dno  dno fragment employee tupl working department define horizontal agments project relation conditions dnum  dnum  dnum fragment project tuples controlled department horizontal fragmentation divides relation horizontally grouping rows create subsets tuples subset logical meaning agments assigned sites distributed derived horizontal fragmentation applies partitioning  figure9  database state company relational database schema primary relation department ample secondary relations employee project primary foreign key data primary secondary relations fragmented vertical fragmentation site attributes relation type fragmentation vertical fragmentation divides relation vertically columns vertical fragment relation  attributes relation fragment employee relation vertical fragments fragment includes personal bdate address sex includes work informarion ssn salary superssn dno vertical fragmentation proper fragments stor separately original employee tuples common attribute fragments include imary key candidate key attribute vertical fragment relation reconstructed fragments add ssn attribute personal fragment notice horizontal fragment relation operation relational algebra set horizontal fragments conditions include tuples tuple satisfies orc2 called complete horizontal fragmentation cases complete horizontal fragmentation disjoint tuple satisfies earlier examples horizontal fragmentation employee project relations complete disjoint reconstruct relation complete horizontal fragmentation apply union operation fragments vertical fragment relation operatio relational algebra set vertical fragments projection lists l1 include attributes share primary key attribute called complete vertical fragmentation case projection lists satisfy conditions ł l1 attrs ł li attrs set attributes primary key reconstruct relation complete vertical fragmentation apply outer union operation vertical fragments assuming horizontal fragmentation notice ould apply outer join operation result complete verti cal fragmentation horizontal  fragmentation app lied vertical fragments empldyee relation projection lists li ssn bdate address sex ssn salary superssn dno constitute complete vertical fragmentation employee horizontal fragments complete disjoint defined employee relation figure   conditions salary  dno  include employee tuples include common tuples vertical fragments complete defined attribute lists l1 address ssn salary lists violate conditions complete vertical fragmentation mixed hybrid fragmentation intermix types fragmentation yielding mixed fragmentation combine horizontal vertical fragmentations empl oyee relation earlier mixed fragmentation includes fragments case original relation reconstructed applying union outer union outer join operations order general fragment relation select project combination operations true uples selected attrs vertical fragment true attrs horizontal fragment finally true attrs mixed fragment notice relation considered fragment true attrs discussion term fragment refer relation preceding types fragments fragmentation schema database definition set fragments includes attributes tuples database satisfies condition database reconstructed fragment applying sequence outer union outer join union operations fragments disjoi repetition primary keys vertical mixed fragments case replication distribution fragments subsequent stage separately fragmentation allocation schema describes allocation fragme nts sites ddbs mapping specifies fragment sitets stored  fragment stored site replicated discuss data replication allocation    data replication allocation replication improving availability data extreme case replication database site distributed creating fully replicated distributed database improve availability remarkably continue operate long site improves performance retrieval global queries result query locally site retrieval query processed local site submitted site incl udes server module disadvantage replication slow update operations drastically single logical update performed copy database copies consistent true copies database exist replication concurrency control recovery techniques expensive replication   extreme replication nvolves replication fragment stored site case fragments disjoint repetition primary keys vertical mixed fragments called redundant allocation extremes wide spectrum partial replication data fragments database replicated number copies fragment range total number sites distributed special case partial replication occurring heavily applications mobile workers sales forces financial planners claims adjustors carry partially replicated databases laptops personal digital assistants synchronize periodically ith server database description replication fragments called replication schema fragment copy fragment assigned site distributed process called data distribution data allocation choice sites degree replication depend performance availability goals types frequencies transactions submitted site  high availability required transactions submitted site transactions retrieval fully replicated database good choice transactions access parts database submitted site set fragments allocated site data accessed multiple sites replicated sites updates performed limit replication finding optimal good solution distributed data allocation complex optimization problem   types distributed database systems term distributed database management systems differ respects main thing systems common fact data software distributed multiple sites connected form communication network discuss number types ddbmss criteria factors systems factor degree homogeneity ddbms software servers individual local dbmss identical software users clients identical software ddbms called homogeneous called heterogeneous factor degree homogeneity degree local autonomy provision local site function stand dbms local autonomy hand direct access local transactions server permitted degree local autonomy extreme autonomy spectrum ddbms centralized dbms user single conceptual schema exists access site ddbms local autonomy exists extreme encount type ddbms called federated ddbms multidatabase server independent autonomous centralized dbms local users local transactions dba high degree local autonomy term federated database fdbs global view hema federation databases shared applications hand multidatabase global schema interactively constructs needed application  systems hybrids distributed cen tralized systems distinction strictly refer fdbss generic sense heterogeneous fobs server relational dbms network dbms object hierarchical dbms case canonical language include language translators translate subqueries canonical language language server discuss issues design fdbss federated database management systems issues type heterogeneity fdbss sources disc uss sources point types autonomies contribute semantic heterogeneity resolved heterogeneous fobs ł differences data models databases organization variety data models including called legacy models relational data model object data model files modeling capabilities models vary deal uniformly single global schema process single language challenging databases rdbms environment represented attribute relation databases calls intelligent query processing mechanism relate based metadata ł differences constraints constraint facilities specification implementation vary syst comparable features reconciled construction global schema relationships models represente referential integrity constraints relational model triggers implement constraints relational model global schema deal potential conflicts constraints ł differences query languages data model languages versions vary sqlhas multiple versions sql   sql  sql  set data types comparison operators string manipulation features semantic heterogeneity semantic heterogeneity occurs differences meaning interpretation intended data semantic heterogeneity component database syst ems dbss creates biggest hurdle designing global schemas heterogeneous databases design autonomy component dbss refers freedom choosing design parameters tum affect eventual complexity fobs ł universe discourse data drawn customer accounts databases fede ration united states japan sets attributes customer accounts required accounting practices currency rate fluctuations problem relations databases identical names customer account common distinct ł representation naming representation naming data elements structure data model prespecified local database ł understanding meaning subjective interpretation data chief contributor semantic heterogeneity ł transaction policy constraints deal serializability criteria compensating transactions transaction policies ł derivation summaries aggregation summarization data processing features operations supported communication autonomy component dbs refers ability decide communicate component dbs execution autonomy refers ability component dbs execute local opera tions interference external operations component dbss ability decide order execute association autonomy component dbs implies  ability decide share functionality operations supports resources data manages othe component dbss major challenge designing fdbss component dbss interoperate providing types autonomies   query processing distributed databases overview ddbms processes optimizes query discuss communication costs processi distributed query discuss special operation called semijoin optimizing types queries ddbms    data transfer costs distributed query processing distributed additional factors complicate query processing cost transferring data network data includes intermediate files transferred sites processing final result files transferred site wh ere query result needed costs high sites connected high performance local area network types networks ddbms query optimization algorithms goal reducing data transfer optimization criterion choosing distribut query execution strategy illustrate simple ries suppose employee department relations figure   distributed figure   assume relati fragmented figure   size employee relation     bytes size department relation    bytes query  employee retrieve employee figure   illustrate volume data transferred department wh ich employee works stated relational algebra result query include   records assuming employee department suppose record query result  bytes long query submitted distinct site  whic called result site query result needed employee department relations reside site  simple strategies executing distributed query  transfer employee department relations result site perform join site  case total        bytes transferred  transfer employee relation site  execute join site  send result site  size query result      bytes         bytes transferred   transfer department relation ite  execute join site  send result site  case      bytes transferred minimizing data transfer optimization criterion choose strategy  query department retrieve department department manage stated relational algebra suppose query submitted site  strategies executing query apply result includes  records assuming department manager  transfer employee department relations result site perform join site  case total        bytes transferred  transfer employee relation site  execute join site  send result site  size query result    bytes        bytes transferred  transfer department relation ite  execute join site  send result site  case    bytes transferred choose strategy  case overwhelming margin strategies   preceding strategies obvious case result site site  sites files involved query sites   suppose result site site  simple strategies  transfer employee relation site  execute query result user site  number bytes  ooo ooo transferred qand   transfer department relation site  execute query site  send result site  case      bytes transferred    bytes complex strategy rks simple strategies operation called semijoin introduce operation discuss distributed execution semi joins   overview client server architecture pointed chapter introduction scale ddbmss developed support types functionalities discussed distributed database applications developed context client server architecttures common tier architecture web applications architecture illustrated figure   tier client server architecture layers exist  presentation layer client user interface interacts user programs layer web interfaces forms client order interface application web browsers utilized languages include html perl visual basic layer handles user input output navigation accepting user commands displaying needed informa tion form static dynamic web employed interaction involves database access web interface layer typically communicates application layer protocol  application layer business logic layer programs application logic queries formulated based user input client query formatted client presentation additional application functionality handled layer security checks identity verification functions application layer interact databases data sources needed connecting database odbc jdbc sql cli database access techniques  database server layer handles query update requests application layer processes requests send sql  access database relational object relational stored database pro figure   tier client server architecture cedures invoked query queries formatted xml transmitted application server database server divide dbms functionality client application server database server vary common appro ach include functionality centralized dbms database server level number relational dbms products approach sql server provided application server formulate sql queries connect database server needed client processing user interface interactions sql relational standard sql servers provided vendors accept sql commands standards odbc jdbc sql cli architecture application server refer data dictionary includes distribution data ong sql servers modules decomposing global query number local queries executed sites interaction application server database server proceed processing sql query   application server formulates query based input client layer decomposes number independent site queries site query database server site  database server processes local query sends application server site increasingly xml touted standard data exchange database server format query result xml sending application server  application server combines subqueries produce result originally required query formats html form accepted client sends client site display application server responsible generating distributed execution plan multisite query transaction supervising distributed execution sending commands servers commands include local queries transactions executed commands transmit data clients servers function controlled application server coordinator ensuring consistency replicated copies data item employing distributed global concurrency control techniques application server ensure atomicity global transactions performing global recovery sites fail ddbms capabilty hide details data distribution application server enables application server execute global queries transactions database centralized sites data referenced query transaction resides property called distribution transparency ddbmss provide distribution transparency requiring applications aware details data distribution   summary  distributed databases bring advant ages distributed computing database management domain  define distributed database ddb collection multiple logically interrelated databases distributed computer network distributed database management ddbms software manages distributed database making distribution transparent user   techniques break database logical units called fragments  data replication permits data stored site  vertical fragmentation divides relation vertically columns  fragmentation schema database definition set fragments includes attributes tuples database  allocation schema describes allocation fragments sites ddbs  main feature ddbms systems common fact data software distributed multip sites connected form communication network   key distributed databases data fragmentati replication distribution client server architecture   assessment questions  main reasons potential advantages distributed databases  main software modules ddbms discuss main functions modules context client server architecture  fragment relation main types fragments fragmentation concept distributed database design  data replication ddb mss typical units data replicated  meant data allocation distributed database design typical units data distributed sites  horizontal partitioning lation relation complete horizontal partitioning  vertical partitioning rela tion relation complete vertical partitioning  discuss meant terms degree homogeneity ddbms degree local autonomy ddbms federated dbms  distribution transparency fragmentation transparency replication transparency multidatabase  discuss naming problem distributed databases  discuss techniques executi equijoin files located sites main factors affect cost data transfer   references suggested readings  introduction database systems  edition addison wesley   leon alexis leon mathews database management systems leontechworld  elamasri navathe undamentals database systems  edition pearsson education   mca   author abhishek taneja vetter pardeep bhatia lesson conventional data models systems lesson  structure   objectives   introduction   network data modeling concepts   constraints network model   data manipulation network database   hierarchical database structures   integrity constraints data definition hierarchical model   summary   key   assessment questions   references suggested readings   objectives chapter reader network data modeling concept distinguish basic data structures network data model records sets constraints network data model data manipulation network data model    introduction chapter overview network data model hierarchical data model original network model langua presented codasyl data base task group  report called dbtg model revised reports   incorporated concepts chapter concentrating details codasyl report general concepts network type databases term network model codasyl model dbtg model original codasyl dbtg report cobol host language host programming language basic tabase manipulation commands network model remain network model object oriented data model navigational nature data structuring capability network model elaborate explicit insertion deletion modification semantic specification lacks desirable features object models original documents hierarchical model relational network models principles hierarchical model derived management ims dominant hierarchical today large number banks insu rance companies hospitals government agencies   network data modeling concepts basic data structures network model records sets    records record types data items data stored records record consists group data values records classified record types record type describes structure group records store type info rmation record type format data type data item attribute record type figure   record type student data items ssn address majordept birthdate  figure   record type student declare virtual data item derive attribute age record type figure   write procedure calculate age actual data item birthdate record typical database application numerous record typesšfrom represent relationships records network model modeling construct called set type discuss    set types basic properties set type description  relationship record types figure   represent set type diagrammatically arrow type diagrammatic representation called bachman diagram set type definition consists basic elements ł set type ł owner record type ł member record type figure   set type major_dept  set type figure   called major_dept department owner record type student member record type represents  relationship academic departments students majoring departments database set occurrences set instances set type instance relates record owner record typeša department record exampleš set records member record type itšthe set stude records students major department set occurrence composed ł owner record owner record type ł number member records member record type record member record type exist set occurrence set type maintains constraint set type represents  relationship student record major department member set occurrence major_dept set type set occurrence identified owner record member records figure   set occurrences instances major_dept set type notice set instance owner record number member records refer set instance owner record set instances figure   referred computer science mathematics physics geology sets customary representation set instance figure   records set instance linked pointers corresponds commonly technique implementing sets network model set instance identical concept set mathematics principal differences ł set instance distinguished elementšthe owner recordšwhereas mathematical set distinction elements set  ł network model memb records set instance ordered order elements immaterial mathematical set refer ith member records set instance figure   alternate linked representation instance set major_dept figure   set instances set type major_dept figure   record manuel rivera student member record computer science set kareem rashad member record set network model referred owner coupled set set distinguish mathematical set  figure   alternate representation set instance linked list    special types sets owned singular sets special type set codasyl network model worth mentioning owned sets figure  a singular owned set all_depts owned set set owner record type owner special irtual owner record type single record occurrence owned sets serve main purposes network model provide entry points database records member record type processing commence accessing members record type retrieving records sets order records record type set ordering specifications owned sets record type user access records orders  owned set processing records record type regular set operations type set called singular set set occurrence diagrammatic presentation owned set all_depts figure   department records accessed order fieldšsay nam ešwith set ordering specification special set types include recursive set types record serving owner member disallowed multimember sets multiple record types members set type allowed systems    stored representations set instances set instance commonly represented ring circular linked list linking owner record member records set figure   called circular chain ring representation symmetric respect records distinguish owner record member records dbms includes special field called type field distinct assigned dbms record type examining type field record owner set instance member records type field hidden user dbms addition type field record type automatically assigned pointer field dbms set type participates owner member pointer considered labeled set type corresponds internally maintains correspondence pointer fields set types pointer called pointer member record pointer owner record point member records figure   student record pointer student record set occurrence pointer member record set occurrence points owner record record member record type participate set instance pointer special nil  pointer set occurrence owner member records pointer points owner record nil preceding representation sets method implementing set instances general dbms implement sets ways chosen representation dbms operations ł owner record member records set occurrence ł owner record member record set occurrence record exists return exception code ł member record previous member record set occurrence record exists return exception code ł member record owner record set occurrence circular linked list representation preceding operations varying degrees efficiency general network database schema record types set types record type participate owner member numerous set types network schema appears figure   employee record type participates owner set typesšmanages is_a_supervisor e_workson dependents_ofšand participates memb set typesšworks_for supervisees circular linked list representation additional pointer fields employee record type confusion arises pointer labeled plays role pointer specific set type    sets represent relationships set type represents  relationship record types record member record type set occurrence constraint automatically enforced dbms network model represent   relationship extra   constraint imposed application program relationship record types represented single set type works_on relationship employees  projects assume employee working projects simultaneously project typically empl oyees working represent set type set type figure   figure   represent relationship correctly figure   enforces incorrect constraint project record employee record figure   enforces incorrect constraint employee record project record set types e_p p_e simultaneously figure   leads problem enforcing constraint p_e e_p mutually consistent inverses problem dealing relationship attributes correct method representing relationship network model set types additional record type figure   additional record typešworks_on examplešis called linking dummy record type record works_on reco type owned employee record e_w set projec record p_w set serves relate owner records figure   representing relationships œ incorrect representations correct representation linking record type illustrated conceptually figure   figure   individual record set occurrences linked list representation schema figure   record works_on record type pointers marked e_w points  record instance e_w set marked p_w points record instance p_w set works_on record relates owner records works_on record number hours week employee works project occurrences figure   figure   displaying records ndividually showing pointers projects employee works start employee record trace work s_on records owned employee e_w e_w point ers works_on record set occurrence owner project record p_w pointers record type oject employee record follow e_w pointer leading w1 e_w pointer w1 leading w2 e_w pointer w2 leading w1 w2 identified mber records set occurrence e_w owned p_w point w1 reach owner p_w pointer w2 w3 w4 reach owner notice existence direct owner pointers p_w set works_on records simplified process identifying owner project record works_on record  figure   continued instances linked representation fashion ployee records project case existence owner pointers e_w set simplify processing pointer tracing automatically dbms programmer dml commands directly finding owner member notice represent relationship figure   figure   allowed duplicate project employee records figure   project record duplicated times employees working project duplicating records creates problems maintaining consistency duplicates database updated recommended general    constraints network model explaining network model discussed structural constraints govern record types set types structured discuss behavioral constraints apply behavior members sets insertion deletion update operations performed sets constraints set membership divided main categories called insertion options retention options codasyl terminology constraints determined database design knowing set required behave member records inserted owner member records deleted constraints dbms declare database structure data definition language combinations constraints discuss type constraint allowable combinations    insertion options constraints sets insertion constraintsšor options codasyl terminologyšon set membership happen insert record database member record type record insert store command options ł automatic member record automatically connected set occurrence record inserted ł manual record connect set occurrence desired programmer explicitly manually connect record set occurrence subsequently connect command major_dept set type figure   situation student record department major_dept set student declared major declare manual insertion option meaning member student record inserted database automatically department record major_dept set database user insert record manually set inst ance student declares  major department manual insertion accomplished update operation called connect submitted database automatic option set insertion situations insert member record set instance automati cally storage record database criterion designating set instance record member set type figure   relates employee set dependents employee declare emp_dependents set type automatic condition dependent record empssn inserted set instance owned employee record ssn figure   set options automatic fixed set automatic mandatory set    retention options constraints sets retention constraintsšor options codasyl terminologyšspecify record member record type exist database owner member set instance retention options optional member record exist member occurrence set connected disconnected set  occurrences connect disconnect commands network dml mandatory member record exist member set occurrence set type reconnected single operation set occurrence reconnect command network dml fixed mandatory member record exist inserted set occurrence fixed reconnected set occurrence illustrate differences thes options examples showing option major_dept set type figure   provide situation student record department major_dept set declare set optional figure   emp_dependents exampl fixed set type expect dependent moved employee addition dependent record employee record times figure   mandatory set emp_dept relates employee department employee works employee assigned department times employee reassigned department insertion retention option dba behavior set type constraint automatically held good  figure   network schema diagram company database   data manipulation network database discuss write programs manipulate network databaseš including tasks searching retrieving records database inserting deleting modifying records conn ecting disconnecting records set occurrences data manipulation language dml purposes dml network model cons ists record time commands embedded general purpose programming language called host language embedded commands dml called data sublanguage practice commonly host languages cobo examples program segments pascal notation augmented network dml commands     basic concepts network database manipulation write programs manipulating network database discuss basic concepts data mani pulation programs written database host programming language separate software systems linked common interface communicate interface dml commands record time identify specific records database current records dbms track number current records set occurrences mechanism currency indicators addition host programming language local program variables hold records record types contents manipulated host program set local variables program referred user work area uwa uwa set program variables declared host program communicate contents ndividual records dbms host program record type database schema program variable format declared program currency indicators network dml retrievals updates handled moving navigating database records keeping trace search critical currency indicators keeping track accessed records set occurrences dbms play role position holders process records starting recen tly accessed retrieve records currency indicator thought record pointer record address points single database record network dbms currency indicators ł current record type record type dbms track accessed record record type record accessed record type current record undefined ł current set type set type schema dbms track accessed set occurrence set type set occurrence single record set owner  member records current set current set points record track set occurrence program accessed record set type current set undefined ł current unit cru unit database access program executing running computer syst unit cru track record accessed program record record type database time program executes dml command currency indicators record types set types command updated dbms status indicators status indicators return indication success failure dml command executed program check values status indicators actionšeither continue execution transfer error handling routine main status variable db_status assume implicitly declared host program dml command db_status command successful error exception occurred common exception occurs end_of_set eos exception   hierarchical database structures    parent child relationships hierarchical schemas hierarchical model employs main data structuring concepts records parent child relationships record collection field values provide entity relationship instance records type grouped record types record type ructure defined collection named fields data items field data type integer real string parent child relationship type pcr type  relationship record types record type  called parent record type called child record type pcr type occurrence instance  pcr type consists record parent record type number records child record type hierarchical database schema consists number hierarchical schemas hierarchical schema hierarchy consists number record types pcr types hierarchical schema displayed hierarchical diagram record type names displayed rectangular boxes pcr types displayed lines connecting parent record type child record type figure   simple hierarchical diagram hierarchical hema record types pcr types record types department employee project field names displayed record type figure   diagrams brevity display record type names figure   hierarchical schema refer pcr type hierarchical hema listing pair parent record type child record type parentheses pcr types figure   department employee department project notice pcr types hierarchical model figure  occurrence department employee pcr type relates department record records employees work department occurrence department project pcr type relates department record records projects controlled department figure   pcr occurrences instances pcr types  figure10  occurrences parent child relationships occurrences pcr type department employee occurrences pcr type department project    properties hierarchical schema hierarchical schema record types pcr types properties  record type called root hierarchical schema participate child record type pcr type  record type root pa rticipates child record type pcr type  record type participate pare record type number pcr types  record type participate parent record type pcr type called leaf hierarchical schema  record type participates pa rent pcr type child record types ordered order displayed convention left hierarchical diagram definition hierarchical schema defines tree data structure terminology tree data structures record type corresponds node tree pcr type corresponds edge arc tree terms node record type edge pcr type interchangeably usual convention displaying tree hierarchical diagrams tree edge separately edges figure   hierarchical diagrams convention  edges emanating parent node joined figure   hierarchical diagram convention figure   tree representation hierarchical schema figure   preceding properties hierarchical schema node root parent node node child nodes case ordered left figure   employee child department project child identified properties limit types relationships represented hierarchical schema relationships record types directly represented parent child relationships  relationships record type participate child distinct parent child relationships relationship handled hierarchical model allowing duplication child record instances cons ider relationship employee project project employees working employee work projects represent relationship project employee pcr type case record describing employee duplicated appearing project employee works alternatively represent relationship employee project pcr type case project records duplicated instances employee project relationship  project employees working project e1 e5 e4 e6 e1 e4 e4 e5 instances stored hierarchical schema project employee project parent occurrences project employee pcr typešone project employee records e1 e5 child records employees works projects employ record e4 timesš projects number hours e4 works project instance avoid duplication technique hierarchical schemas hierarchical data base schema relationships preceding pcr type defined hierarchical schemas technique called virtual relationships departure strict hierarchical model discuss technique   integrity constraints data definition hierarchical model    integrity constraints hierarchical model number built inherent constraints exist hierarchical model hierarchical schema include constraints  record occurrences root reco rds exist parent record occurrence implications child record inserted linked parent record  child record deleted ndependently parent deletion parent record automatically deletion child descendent records rules apply vi rtual child records virtual parent records  child record parent records record type child record duplicated parent record  child record parent records record types real parent represented virtual parents ims limits number virtual parents  ims record type virtual parent vpcr type number virtual children record type ims   summary  basic data structures network model records sets  data stored records record consists group data values  records classified record types record type describes structure group records store type  represent relationships ecords network model modeling construct called set type  set type definition consists basic elements ł set type ł owner record type ł member record type  constraints network data mode divided main categories called insertion options retention options codasyl terminology  data manipulation language dml inserting deleting modifying records connecting disconnecting records set occurrences  hierarchical model employs main data structuring concepts records parent child relationships   record collection field values provide entity relationship instance  parent child relationship type pcr type  relationship record types  definition hierarchical schema defines tree data structure  hierarchical schema hierarchical occurrences called occurrence trees exist database tree structure root single record root record type  occurrence tree defined subtree record type root record type  hierarchical database occurrence sequence occurrence trees occurrences hierarchical schema  number built inherent constraints exist hierarchical model hierarchical schema   key network model records sets data items hierarchical data model parent child relationship integrity constraints   assessment questions  distinguish basic structures network data model  constraints network data model explain  constraints insertion options constraints retention option constraints  explain data definition network data model define examples  write programs manipulat network databasešincluding tasks searching retrieving records database inserting deleting modifying records connecting disconnecting records set occurrences  write short notes data manipulation language host language data sublanguage   data structuring concepts employed hierarchical model explain  distinguish record parent child relationship concepts hierarchical model  define properties hierarchical schema  define terms occurrence tree preorder traversal tree parent child record type  problems modeling type relationship hierarchical model explain  integrity constraints data definition hierarchical mode   references suggested readings  introduction database systems  edition addison wesley   leon alexis leon mathews database management systems leontechworld  elamasri navathe undamentals database systems  edition pearsson education  