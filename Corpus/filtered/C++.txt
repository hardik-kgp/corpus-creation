general purpose programming language created bjarne stroustrup extension programming language classes language expanded time modern object oriented generic functional features addition facilities low level memory manipulation implemented compiled language vendors provide compilers including free software foundation llvm microsoft intel oracle ibm platforms designed bias programming embedded resource constrained software large systems performance efficiency flexibility design highlights contexts key strengths software infrastructure resource constrained applications including desktop applications servers commerce web search sql servers performance critical applications telephone switches space probes standardized international organization standardization iso latest standard version ratified published iso december iso iec informally programming language initially standardized iso iec amended standards current standard supersedes features enlarged standard library initial standardization developed danish computer scientist bjarne stroustrup bell labs extension language wanted efficient flexible language provided high level features program organization planned standard keeping current trend version years language language main components direct mapping hardware features provided subset overhead abstractions based mappings stroustrup describes light weight abstraction programming language designed building efficient elegant abstractions offering hardware access abstraction basis efficiently distinguishes languages inherits syntax bjarne stroustrup version program standard library stream facility write message standard output object storage supports types memory management static storage duration objects thread storage duration objects automatic storage duration objects dynamic storage duration objects static storage duration objects static storage duration objects created main entered exceptions destroyed reverse order creation main exits exact order creation standard rules defined implementations freedom organize implementation formally objects type lifespan duration program static storage duration objects initialized phases static initialization performed static initialization performed dynamic initialization performed static initialization objects initialized zeros objects constant initialization phase initialized constant expression variables initialized literal constexpr standard static initialization phase completed compile time saved data partition executable dynamic initialization involves object initialization constructor function function marked constexpr dynamic initialization order defined order declaration compilation unit file guarantees provided order initialization compilation units thread storage duration objects variables type static storage duration objects main difference creation time prior thread creation destruction thread joined automatic storage duration objects common variable types local variables inside function block temporary variables common feature automatic variables lifetime limited scope variable created initialized point declaration details destroyed reverse order creation scope left implemented allocation stack local variables created point execution passes declaration point variable constructor initializer define initial state object local variables destroyed local block function declared closed destructors local variables called object lifetime allowing discipline automatic resource management termed raii member variables created parent object created array members initialized member array order member variables destroyed parent object destroyed reverse order creation parent automatic object destroyed scope triggers destruction members temporary variables created result expression evaluation destroyed statement expression fully evaluated statement dynamic storage duration objects objects dynamic lifespan created destroyed explicitly delete supports malloc free compatible delete templates templates enable generic programming supports function class alias variable templates templates parameterized types compile time constants templates templates implemented instantiation compile time instantiate template compilers substitute specific arguments template parameters generate concrete function class instance substitutions eliminated overload resolution policy phrase substitution failure error sfinae templates powerful tool generic programming template metaprogramming code optimization power implies cost template increase code size template instantiation produces copy template code set template arguments smaller code generated code written hand contrast time generics languages compile time type erased single template body preserved templates macros compile time language features enable conditional compilation templates restricted lexical substitution templates aware semantics type companion language compile time type definitions perform high level operations including programmatic flow control based evaluation strictly type checked parameters macros capable conditional control compilation based predetermined criteria instantiate types recurse perform type evaluation limited pre compilation text substitution text inclusion exclusion macros control compilation flow based pre defined symbols templates independently instantiate symbols templates tool static polymorphism generic programming addition templates compile time mechanism turing complete meaning computation expressible computer program computed form template metaprogram prior runtime summary template compile time parameterized function class written knowledge specific arguments instantiate instantiation code equivalent code written passed arguments manner templates provide decouple generic broadly applicable aspects functions classes encoded templates specific aspects encoded template parameters sacrificing performance abstraction objects introduces object oriented programming oop features offers classes provide features commonly oop oop languages abstraction encapsulation inheritance polymorphism distinguishing feature classes compared classes programming languages support deterministic destructors turn provide support resource acquisition initialization raii concept encapsulation encapsulation hiding ensure data structures operators intended usage model obvious developer ability define classes functions primary encapsulation mechanisms class members declared public protected private explicitly enforce encapsulation public member class accessible function private member accessible functions members class functions classes explicitly granted access permission class friends protected member accessible members classes inherit class addition class friends object oriented principle ensures encapsulation functions access internal representation type supports principle member functions friend functions enforce programmers declare parts representation type public allowed public entities representation type supports object oriented programming decomposition paradigms modular programming generally considered good practice data private protected public functions minimal interface users class hide details data implementation allowing designer fundamentally change implementation changing interface inheritance inheritance data type acquire properties data types inheritance base class declared public protected private access specifier determines unrelated derived classes access inherited public protected members base class public inheritance corresponds meant inheritance forms frequently access specifier class inherits privately struct inherits publicly base classes declared virtual called virtual inheritance virtual inheritance ensures instance base class exists inheritance graph avoiding ambiguity problems multiple inheritance multiple inheritance feature languages allowing class derived base class elaborate inheritance relationships flying cat class inherit cat flying mammal languages accomplish limited allowing inheritance multiple interfaces restricting number base classes interfaces classes provide declarations member functions implementation member data interface defined class pure virtual functions abstract base class abc member functions abstract base class explicitly defined derived class inherited implicitly virtual inheritance exhibits ambiguity resolution feature called dominance operators operator overloading operators covering basic arithmetic bit manipulation indirection comparisons logical operations operators overloaded user defined types notable exceptions member access conditional operator rich set overloadable operators central making user defined types built types overloadable operators essential advanced programming techniques smart pointers overloading operator change precedence calculations involving operator change number operands operator operand operator evaluated prior execution overloaded operators lose short circuit evaluation property polymorphism polymorphism enables common interface implementations objects differently circumstances supports kinds static resolved compile time dynamic resolved time polymorphisms supported language features compile time polymorphism time decisions runtime polymorphism typically incurs performance penalty static polymorphism function overloading programs declare multiple functions arguments hoc polymorphism functions distinguished number types formal parameters function refer functions depending context type returned function distinguish overloaded functions result compile time error message declaring function programmer parameters default parameters defaults optionally function called case default arguments function called fewer arguments declared parameters explicit arguments matched parameters left order unmatched parameters parameter list assigned default arguments cases default arguments single function declaration preferable providing overloaded function definitions numbers parameters templates provide sophisticated mechanism writing generic polymorphic code parametric polymorphism curiously recurring template pattern implement form static polymorphism closely mimics syntax overriding virtual functions templates type aware turing complete compiler resolve recursive conditionals generate substantial programs template metaprogramming contrary opinion template code generate bulk code compilation proper compiler settings dynamic polymorphism inheritance variable pointers references base class type refer objects derived classes type arrays kinds containers hold pointers objects differing types references directly held containers enables dynamic time polymorphism referred objects behave differently depending actual derived types dynamic_cast operator code safely attempt conversion object base reference pointer derived type downcasting attempt derived type referenced upcasting conversion general type checked performed compile time static_cast ancestral classes derived class interface visible callers dynamic_cast relies time type rtti metadata program enables differentiating types relationships dynamic cast pointer fails result nullptr constant destination reference null cast throws exception objects derived type cast static_cast bypassing rtti safe runtime type checking dynamic cast programmer confident cast valid virtual member functions ordinarily function derived class overrides function base class function determined type object function overridden exists difference number type parameters definitions function compile time determine type object correct function base class pointer decision runtime called dynamic dispatch virtual member functions methods specific implementation function called actual time type object implementations commonly virtual function tables object type bypassed prepending fully qualified class function general calls virtual functions resolved time addition standard member functions operator overloads destructors virtual rule thumb function class virtual destructor type object creation compile time constructors extension copy constructors virtual situation copy object created pointer derived object passed pointer base object case common solution create clone virtual function creates returns copy derived class called member function pure virtual appending closing parenthesis semicolon class pure virtual function called abstract class objects created abstract class derived derived class inherits virtual function pure provide pure definition pure virtual functions objects derived class created program attempts create object class pure virtual member function inherited pure virtual member function ill formed lambda expressions support anonymous functions lambda expressions form capture list supports definition closures lambda expressions defined standard syntactic sugar unnamed function object lambda function defined exception handling exception handling communicate existence runtime problem error detected issue handled permits uniform manner separately main code detecting errors error occur exception thrown raised caught nearest suitable exception handler exception current scope exited outer scope propagation suitable handler calling turn destructors objects exited scopes time exception presented object carrying data detected problem note style guides google llvm qt apple microsoft forbid usage exceptions exception causing code inside block exceptions handled separate catch blocks handlers block multiple exception handlers visible raise exceptions purposefully throw keyword exceptions handled usual cases exceptions technical reasons critical component embedded operation guaranteed complete time determined exceptions tools exist determine maximum time required exception handled signal handling handling function called point failure exception handling exits current scope catch block entered located current function previous function calls stack standard library standard consists parts core language standard library programmers expect major implementation includes aggregate types vectors lists maps sets queues stacks arrays tuples algorithms for_each binary_search random_shuffle input output facilities iostream reading writing console files filesystem library localisation support smart pointers automatic memory management regular expression support multi threading library atomics support allowing variable read written thread time external synchronisation time utilities measurement current time converting error reporting exceptions exceptions random number generator modified version standard library comply type large library based standard template library stl tools provided stl include containers collections objects vectors lists iterators provide array access containers algorithms perform operations searching sorting multi maps associative arrays multi sets provided export compatible interfaces templates write generic algorithms work container sequence defined iterators features library accessed include directive include standard header standard library standard headers deprecated standard incorporates stl originally designed alexander stepanov experimented generic algorithms containers years started finally language create generic algorithms stl sort perform standard library qsort features inlining compile time binding function pointers standard refer stl standard library term distinguish rest standard library input output streams internationalization diagnostics library subset compilers major provide standards conforming implementation standard library compatibility compiler vendors greater freedom standards committee decided dictate implementation mangling exception handling implementation specific features downside decision object code produced compilers expected incompatible attempts standardize compilers machines operating systems abi abandoned considered superset strictly true code easily compile correctly differences valid code invalid behave differently implicit conversion void pointer types type safety reasons defines keywords class identifiers variable names program incompatibilities removed revision standard c99 supports features comments declarations mixed code hand c++ introduced number features support incompatible redundant variable length arrays native complex number types std complex class standard library functionality code compatible designated initializers compound literals restrict keyword c++ introduced features included subsequent version standard redundant standard introduces incompatibilities disallowing assignment string literal character pointer remains valid intermix code function declaration definition called declared linkage placing extern block function rely features depending mangling function overloading criticism widespread adoption notable programmers criticized language including linus torvalds richard stallman joshua bloch ken thompson donald knuth criticised points perceived complexity language criticism large number orthogonal features practice necessitates restricting code subset eschewing readability benefits common style idioms expressed joshua bloch pushed complexity threshold lot people programming force people subset shop multiple implementation inheritance operator overloading bunch features complexity code high good start lose programmer portability read code good thing donald knuth commenting pre standardized edsger dijkstra programming physically ill problem today complicated moment impossible write portable code work lots systems avoid exotic features language designers competing ideas solve problem language baroque taste ken thompson colleague stroustrup bell labs assessment good points large bad language lot things half garbage heap ideas mutually exclusive personal corporate selects subset subsets good language transport algorithm wrote big complex built committee stroustrup campaigned years years years sort technical contributions language adopted sort standards committees whip chair feature language existed cleanly designed union suffered drastically brian kernighan colleague bell labs disputes assessment enormously influential lots people big complicated fact powerful language pretty sound reason random people solve real problems lot programs granted today programs stroustrup comments semantics cleaner syntax smaller cleaner language struggling complaints include lack reflection garbage collection long compilation times perceived feature creep verbose error messages template metaprogramming