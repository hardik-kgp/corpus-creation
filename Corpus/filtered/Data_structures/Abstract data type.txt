abstract data type computer science abstract data type adt mathematical model data types data type defined behavior semantics point view user data terms values operations data type behavior operations contrasts data structures concrete representations data point view implementer user formally adt defined class objects logical behavior defined set values set operations analogous algebraic structure mathematics meant behavior varies author main types formal specifications behavior axiomatic algebraic specification abstract model correspond axiomatic semantics operational semantics abstract machine authors include computational complexity cost terms time computing operations space representing values practice common data types adts abstraction perfect users aware issues arithmetic overflow representation integers stored fixed width values bit bit binary numbers experience integer overflow maximum exceeded adts theoretical concept computer science design analysis algorithms data structures software systems correspond specific features computer languages mainstream computer languages directly support formally adts language features correspond aspects adts easily confused adts proper include abstract types opaque data types protocols design contract adts proposed barbara liskov stephen zilles development clu language examples integers adt defined values operations addition subtraction multiplication division greater behave familiar mathematics care integer division independently integers represented computer explicitly behavior includes obeying axioms associativity commutativity addition preconditions operations divide typically integers represented data structure binary numbers complement binary coded complement user abstracted concrete choice representation simply data data types adt consists operations values underlying data constraints operations interface typically refers operations constraints operations notably pre conditions post conditions constraints relations operations abstract stack structure defined operations push inserts data item stack pop removes data item peek accesses data item stack removal abstract queue structure operations enqueue inserts data item queue dequeue removes data item accesses serves data item queue differentiating data types mathematical constraint introduced stack specifies pop returns pushed item popped analyzing efficiency algorithms stacks operations time matter data items pushed stack stack constant storage element introduction abstract data types purely theoretical entities things simplify description abstract algorithms classify evaluate data structures formally type systems programming languages adt implemented specific data types data structures ways programming languages formal specification language adts implemented modules module interface declares procedures correspond adt operations comments constraints hiding strategy implementation module changed disturbing client programs term abstract data type regarded generalized approach number algebraic structures lattices groups rings notion abstract data types concept data abstraction object oriented programming design contract methodologies software development defining abstract data type abstract data type defined mathematical model data objects data type functions operate objects standard conventions defining broad division drawn imperative functional definition styles imperative style definition philosophy imperative programming languages abstract data structure conceived entity mutable meaning states times operations change state adt order operations evaluated operation entities effects executed times instructions computer commands procedures imperative language underscore view customary operations executed applied evaluated imperative style describing abstract algorithms art computer programming donald knuth details abstract variable imperative style definitions adt depend concept abstract variable regarded simplest trivial adt abstract variable mutable entity admits operations store unspecified nature fetch yields constraint fetch returns store operation variable programming languages operation store written notation fetch implied variable context required commonly understood shorthand store fetch definition implicitly assumed storing variable state distinct variable assumption explicit add constraint distinct variables sequence store store equivalent store store generally adt definitions assume operation state adt instance state instance including instances adt adt axioms imply instances connected aliased sense extending definition abstract variable include abstract records operation selects field record variable yield variable aliased definition abstract variable restrict stored values members specific set called range type programming languages restrictions simplify description analysis algorithms improve readability note definition imply result evaluating fetch initialized performing store operation algorithm considered invalid defined algorithms efficiency depends assumption fetch legal returns arbitrary variable range instance creation algorithms create instances adt variables stacks algorithms includes adt definition create operation yields instance adt axioms equivalent result create distinct instance algorithm axiom strengthened exclude partial aliasing instances hand axiom implementations create yield created instance inaccessible program abstract stack imperative imperative style definition abstract stack state stack modified operations push unspecified nature pop yields result constraint abstract variable sequence operations push pop equivalent assignment definition change state condition implies pop restores state push condition properties abstract variables sequence push push pop push pop pop values pairwise distinct variables equivalent implicitly assumed operations stack instance modify state adt instance including stacks values distinct stacks sequence push push equivalent push push abstract stack definition includes boolean valued function create operation returns stack instance axioms equivalent create prior stack newly created stack distinct previous stacks create newly created stack push pushing stack single instance style adt defined instance existed execution algorithm operations applied instance explicitly notated abstract stack defined operations push pop operate existing stack adt definitions style easily rewritten admit multiple coexisting instances adt adding explicit instance parameter previous operation modifies implicit instance hand adts meaningfully defined assuming multiple instances case single operation takes distinct instances adt parameters augmenting definition abstract stack operation compare checks stacks items order functional style definition define adt closer spirit functional programming state structure separate entity view operation modifies adt modeled mathematical function takes state argument returns state result imperative operations functions effects order evaluated immaterial operation applied arguments including input states return output states functional view define abstract variable semantics imperative variables fetch store operations storing values variables passes arguments functions abstract stack functional complete functional style definition abstract stack operations push takes stack state arbitrary returns stack state takes stack state returns pop takes stack state returns stack state functional style definition create operation notion stack instance stack states thought potential states single stack structure stack states values order considered identical states view mirrors behavior concrete implementations linked lists hash cons create functional style definition abstract stack assume existence special stack state stack designated special symbol λ define operation takes arguments returns special stack state note axioms imply push λ λ functional style definition stack predicate test stack testing equal λ note axioms define pop stack state returned push push leaves stack operations undefined invalid λ hand axioms lack effects imply push push branches mathematics customary assume stack states existence proved axioms finite number steps abstract stack rule stack finite sequence values stack λ finite number pop axioms exclude existence infinite stacks pop forever time yielding state circular stacks return state finite number pop exclude states pop push stack states operations assumed exist include complexity behavior terms axioms include definition adt operation algorithmic complexity alexander stepanov designer standard template library included complexity guarantees stl specification arguing reason introducing notion abstract data types interchangeable software modules interchangeable modules modules share complexity behavior replace module module functional behavior complexity tradeoffs user code unpleasantly surprised data abstraction code complexity assertions interface advantages abstract data typing encapsulation abstraction promise implementation adt properties abilities knowing required adt object user technical knowledge implementation works adt implementation complex encapsulated simple interface localization change code adt object edited implementation adt changed implementation comply interface code adt object refer properties abilities interface implementation requiring code adt flexibility implementations adt properties abilities equivalent interchangeably code adt great deal flexibility adt objects situations implementations adt efficient situations situation preferable increasing efficiency typical operations operations adts names compare tests instances states equivalent sense hash computes standard hash function instance state print produces human readable representation instance state imperative style adt definitions finds create yields instance adt initialize prepares newly created instance operations resets initial state copy puts instance state equivalent clone performs create copy returns free destroy reclaims memory resources free operation relevant meaningful adts theoretical entities memory analyze storage algorithm adt case additional axioms memory adt instance function state returned pool free examples common adts proved great variety applications adts defined ways variants equivalent abstract stack count operation tells items pushed popped choice difference clients implementation abstract graphical data type extension adt computer graphics proposed abstract graphical data type agdt introduced nadia magnenat thalmann daniel thalmann agdts provide advantages adts facilities build graphical objects structured implementation implementing adt providing procedure function abstract operation adt instances represented concrete data structure manipulated procedures adt specifications ways implement adt concrete data structures abstract stack implemented linked list array order prevent clients depending implementation adt packaged opaque data type modules interface signature number types parameters operations implementation module bodies procedures concrete data structure hidden clients module change implementation clients implementation exposed transparent data type implementing adt instance imperative style definitions state functional style definitions represented handle sort modern object oriented languages support form abstract data types class type abstract type refers hidden representation model adt typically implemented class instance adt object class module interface typically declares constructors ordinary procedures adt operations methods class approach easily encapsulate multiple representational variants adt undermine extensibility object oriented programs pure object oriented program interfaces types types refer behaviors representations implementation abstract stack implementation abstract stack programming language imperative style interface imperative style interface interface manner interface implemented ways implementation arbitrarily inefficient formal definition adt space stack long operation stack state continues exist pop practice formal definition space proportional number items pushed popped operations finish constant time independently number comply additional specifications implementation linked list array dynamic resizing integers item count array size functional style interface functional style adt definitions functional programming languages vice versa provide functional style interface imperative language adt libraries modern programming languages standard libraries implement common adts listed built abstract data types specification programming languages intentionally vague representation built data types defining operations types viewed built adts examples arrays scripting languages awk lua perl regarded implementation abstract list