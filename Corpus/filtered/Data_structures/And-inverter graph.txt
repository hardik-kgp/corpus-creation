inverter graph inverter graph aig directed acyclic graph represents structural implementation logical functionality circuit network aig consists input nodes representing logical conjunction terminal nodes labeled variable names edges optionally markers indicating logical negation representation logic function rarely structurally efficient large circuits efficient representation manipulation boolean functions typically abstract graph represented data structure software conversion network logic gates aigs fast scalable requires gate expressed terms gates inverters conversion lead unpredictable increase memory runtime aig efficient representation comparison binary decision diagram bdd sum product σoπ form canonical form boolean algebra disjunctive normal form dnf bdd dnf viewed circuits involve formal constraints deprive scalability σoπs circuits levels bdds canonical require input variables evaluated order paths circuits composed simple gates including aigs ancient topic aigs started alan turing seminal paper neural networks randomized trainable network nand gates continued late s continued s local transformations developed transformations implemented logic synthesis verification systems darringer smith reduce circuits improve area delay synthesis speed formal equivalence checking techniques discovered early ibm combining reusing multi input logic expressions subexpressions structural hashing renewed aigs functional representation variety tasks synthesis verification representations popular s bdds reached limits scalability applications development emergence efficient boolean satisfiability sat solvers coupled aigs circuit representation lead remarkable speedups solving wide variety boolean problems aigs successful diverse eda applications tuned combination aigs boolean satisfiability impact formal verification including model checking equivalence checking work efficient circuit compression techniques developed aigs growing understanding logic physical synthesis problems solved simulation boolean satisfiability compute functional properties symmetries node flexibilities care terms resubstitutions spfds mishchenko aigs promising unifying representation bridge logic synthesis technology mapping physical synthesis formal verification large extent simple uniform structure aigs rewriting simulation mapping placement verification share data structure addition combinational logic aigs applied sequential logic sequential transformations method structural hashing extended work aigs memory elements type flip flops initial state general unknown data structure tailored applications retiming ongoing includes implementing modern logic synthesis completely based aigs prototype called abc features aig package aig based synthesis equivalence checking techniques experimental implementation sequential synthesis technique combines technology mapping retiming single optimization step optimizations implemented networks composed arbitrary gates aigs scalable easier implement implementations logic synthesis verification abc set utilities aigs aiger openaccess gear gini logic library