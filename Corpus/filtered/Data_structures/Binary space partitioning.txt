binary space partitioning computer science binary space partitioning bsp method recursively subdividing space convex sets hyperplanes partitions process subdividing rise representation objects space form tree data structure bsp tree binary space partitioning developed context computer graphics structure bsp tree spatial objects scene rendering objects ordered respect viewer location accessed rapidly applications bsp include performing geometrical operations shapes constructive solid geometry cad collision detection robotics video games ray tracing applications involve handling complex spatial scenes doom video game bsp john carmack utilized efficient algorithms describing rendering specialized data structure record parts screen drawn prior wolfenstein ray casting quake utilized developments pre processing step generated visible sets overview binary space partitioning generic process recursively dividing scene partitioning satisfies requirements generalisation spatial tree structures trees quadtrees hyperplanes partition space orientation aligned coordinate axes trees quadtrees computer graphics render scenes composed planar polygons partitioning planes frequently chosen coincide planes defined polygons scene specific choice partitioning plane criterion terminating partitioning process varies depending purpose bsp tree computer graphics rendering scene divided node bsp tree polygons render arbitrary order face culling node convex set polygons rendering double sided polygons node bsp tree polygons single plane collision detection ray tracing scene divided primitives collision ray intersection tests straightforward binary space partitioning arose computer graphics rapidly draw dimensional scenes composed polygons simple draw scenes painter algorithm produces polygons order distance viewer painting background previous polygons closer object approach disadvantages time required sort polygons order possibility errors overlapping polygons fuchs authors constructing bsp tree solved problems providing rapid method sorting polygons respect viewpoint linear number polygons scene subdividing overlapping polygons avoid errors occur painter algorithm disadvantage binary space partitioning generating bsp tree time consuming typically performed static geometry pre calculation step prior rendering realtime operations scene expense constructing bsp tree difficult inefficient directly implement moving objects tree bsp trees video games person shooters indoor environments game engines bsp trees include doom tech quake tech variant goldsrc source engines bsp trees static geometry scene buffer correctly merge movable objects doors characters background scene binary space partitioning convenient store retrieve spatial polygons scene solve problem visible surface determination generation canonical bsp tree rendering polygons double sided face culling painter algorithm polygon designated chosen arbitrarily structure tree required result tree constructed unsorted list polygons scene recursive algorithm construction bsp tree list polygons choose polygon list node bsp tree add list polygons node polygon list polygon wholly plane polygon list nodes polygon wholly plane polygon list nodes polygon intersected plane split polygons respective lists polygons polygon lies plane add list polygons node apply algorithm list polygons apply algorithm list polygons diagram illustrates algorithm converting list lines polygons bsp tree steps viii algorithm applied list lines node tree final number polygons lines tree larger larger original list lines polygons cross partitioning plane split desirable minimize increase maintain reasonable balance final tree choice polygon partitioning plane step algorithm creating efficient bsp tree traversal bsp tree traversed linear time order determined function tree rendering double sided polygons painter algorithm draw polygon correctly requires polygons plane lies drawn polygon finally polygons drawing order satisfied polygons scene entire scene renders correct order procedure implemented recursively traversing bsp tree algorithm viewing location render bsp tree current node leaf node render polygons current node viewing location current node render child bsp tree polygons current node render polygons current node render child bsp tree polygons current node viewing location current node render child bsp tree polygons current node render polygons current node render child bsp tree polygons current node viewing location plane current node render child bsp tree polygons current node render child bsp tree polygons current node applying algorithm recursively bsp tree generated steps algorithm applied root node tree node node apply algorithm child bsp tree polygons tree root node apply algorithm child bsp tree polygons tree leaf node d1 polygon d1 rendered render polygon apply algorithm child bsp tree polygons tree leaf node polygon rendered draw polygons apply algorithm child bsp tree polygons tree root node apply algorithm child bsp tree polygons tree leaf node polygon rendered render polygon apply algorithm child bsp tree polygons tree root node apply algorithm child bsp tree polygons tree continue render polygon apply algorithm child bsp tree polygons tree leaf node d3 polygon d3 rendered tree traversed linear time renders polygons ordering d1 d3 suitable painter algorithm timeline schumacker published report carefully positioned planes virtual environment accelerate polygon ordering technique depth coherence states polygon plane obstruct closer polygon flight simulators evans sutherland creation polygonal data organization performed manually scene designer fuchs extended schumacker idea representation objects virtual environment planes lie coincident polygons recursively partition space provided fully automated algorithmic generation hierarchical polygonal data structure binary space partitioning tree bsp tree process place preprocessing step performed environment object time view dependent visibility ordering generated traversing tree naylor thesis provided development bsp trees graph theoretic approach connected components pre computing visibility connection methods bsp trees dimension independent spatial search structure emphasized applications visible surface determination thesis included empirical data demonstrating size tree number polygons reasonable model space shuttle fuchs micro code implementation bsp tree algorithm ikonas frame buffer demonstration real time visible surface determination bsp trees thibault naylor arbitrary polyhedra represented bsp tree opposed traditional rep boundary representation provided solid representation surface based representation set operations polyhedra tool enabling constructive solid geometry csg real time fore runner bsp level design brushes introduced quake editor picked unreal editor naylor amanatides thibault provided algorithm merging bsp trees form bsp tree original trees benefits including combining moving objects represented bsp trees static environment represented bsp tree efficient csg operations polyhedra exact collisions detection log log proper ordering transparent surfaces contained interpenetrating objects ray vision teller s√©quin proposed offline generation visible sets accelerate visible surface determination orthogonal d environments gordon chen chen91 efficient method performing rendering bsp tree traditional approach utilised special data structure record efficiently parts screen drawn rendered algorithm description bsp trees standard computer graphics textbook day computer graphics principles practice john carmack making doom video game teller phd thesis efficient generation visible sets pre processing step accelerate real time visible surface determination arbitrary polygonal environments quake contributed game performance naylor answered question characterizes good bsp tree expected case models worst case analysis mathematically measure expected cost searching tree measure build good bsp trees intuitively tree represents object multi resolution fashion tree approximations parallels huffman codes probabilistic binary search trees drawn hayder radha phd thesis natural image representation methods bsp trees includes development optimal bsp tree construction framework arbitrary input image framework based image transform square error lse partitioning lpe transform radha thesis developed optimal rate distortion image compression framework image manipulation approaches bsp trees additional references naylor90 naylor amanatides thibualt merging bsp trees yields polyhedral set operations computer graphics siggraph naylor93 naylor constructing good partitioning trees graphics interface annual canadian conference chen91 chen gordon display bsp trees ieee computer graphics algorithms september radha91 radha leoonardi vetterli naylor binary space partitioning tree representation images journal visual communications image processing radha93 radha efficient image representation binary space partitioning trees thesis columbia university radha96 radha vetterli leoonardi image compression binary space partitioning trees ieee transactions image processing december winter99 investigation real time polygon rendering bsp trees andrew steven winter april online mark berg marc van kreveld mark overmars otfried schwarzkopf computational geometry nd revised springer verlag isbn binary space partitions describes randomized painter algorithm christer ericson real time collision detection morgan kaufmann series interactive technology verlag morgan kaufmann jahr isbn