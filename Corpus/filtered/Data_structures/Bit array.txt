bit array bit array bit map bit set bit string bit vector array data structure compactly stores bits implement simple set data structure bit array effective exploiting bit level parallelism hardware perform operations typical bit array stores kw bits number bits unit storage byte word nonnegative integer divide number bits stored space wasted internal fragmentation definition bit array mapping domain range integers values set   values interpreted dark light absent locked unlocked valid invalid cetera point values stored bit arrays access single bit managed applying array assuming size length bits array subset domain      bit presence  bit absence number set set data structure space number bits machine word bit word bit smallest number irrelevant preferred endian machines basic operations machines address individual bits memory instructions manipulate single bits bit word singled manipulated bitwise operations set bit    set bit    testing determine bit set         xor invert toggle bit  xor    xor   invert bits   bit mask needed operations bit shift operator shift number  left number places bitwise negation bit arrays size representing sets compute union intersection set theoretic difference simple bit operations  difference complement iterate bits bit array efficiently doubly nested loop loops word time memory accesses required code samples exhibit ideal locality reference subsequently receive large performance boost data cache cache wk cache misses occur complex operations character strings straightforward define length substring lexicographical compare concatenation reverse operations implementation operations sensitive endianness population hamming weight number  bits bit array called population count hamming weight efficient branch free algorithms compute number bits word series simple bit operations simply algorithm word running total counting zeros hamming weight article examples efficient implementation inversion vertical flipping bit pixel image fft algorithms requires flipping bits individual b31 b30 b0 b0 b30 b31 operation processor proceed successive passes  bits set operation identifies position  bit smallest array widespread hardware support arrays larger word efficient algorithms computation priority queue stored bit array identify highest priority element queue expand word size longer arrays nonzero word word operations count leading zeros count leading count trailing zeros count trailing log base  set extended bit array straightforward manner compression bit array dense storage random bits bit equally   independent data random store compactly data typical fax image random compressed length encoding commonly compress long streams compressed data formats easy access randomly compressing bit arrays aggressively risk losing benefits bit level parallelism vectorization compressing bit arrays streams bits compress streams bytes bitmap compression advantages disadvantages bit arrays simplicity number marked advantages data structures problems extremely compact data structures store independent pieces data small arrays bits stored manipulated register set long periods time memory accesses ability exploit bit level parallelism limit memory access maximally data cache outperform data structures practical data sets asymptotically efficient bit arrays solution compression wasteful set data structures sparse sets elements compared range time space applications compressed bit arrays judy arrays bloom filters considered accessing individual elements expensive difficult express languages random access common sequential array small byte array preferable machine byte addressing word array justified huge space overhead additional cache misses machine word addressing applications compactness bit arrays number applications areas space efficiency premium commonly represent simple group boolean flags ordered sequence boolean values bit arrays priority queues bit set queue data structure linux kernel benefits operation hardware bit arrays allocation memory inodes disk sectors cases term bitmap term frequently refer raster images multiple bits pixel application bit arrays bloom filter probabilistic set data structure store large sets small space exchange small probability error build probabilistic hash tables based bit arrays accept false positives false negatives bit arrays operations constructing succinct data structures close minimum space context operations finding  bit counting number  bits position bit arrays abstraction examining streams compressed data elements occupy portions bytes byte aligned compressed huffman coding representation single  bit character   bits long retrieval bit arrays good representation posting lists frequent terms compute gaps adjacent values list strictly increasing integers encode unary coding result bit array  bit position list implied probability gap   special case golomb coding parameter  parameter selected log  log   roughly term occurs  documents language support apl programming language fully supports bit arrays arbitrary shape size boolean datatype distinct integers major implementations dyalog apl apl2 apl nars2000 gnu apl pack bits densely size machine word bits accessed individually usual indexing notation  usual primitive functions operators operated special case algorithm summing bits table lookup bytes programming language bit fields pseudo objects structs size equal number bits fact small bit arrays limited span convenient syntax bits accessed bitwise operators machines defined statically static arrays sizes fixed compile time common idiom programmers small bit arrays access bits bit operators header file included x11 xtrapbits portable systems define bit field manipulation arrays bits explanatory description aforementioned approach comp lang faq individual bool typically occupy space byte integer stl type vector bool partial template specialization bits packed space efficiency optimization bytes bits smallest addressable unit operator return reference element returns proxy reference minor point vector bool standard stl container vector bool generally discouraged unique stl class bitset creates vector bits fixed size compile time interface syntax resembles idiomatic bit sets programmers additional power ability efficiently count number bits set boost libraries provide dynamic_bitset class size time programming language bit arrays standard library phobos std bitmanip operator return reference individual bits directly addressable hardware returns bool class bitset creates bit array manipulated functions named bitwise operators familiar programmers bitset bitset size state effectively infinite size initialized  bits bit set tested addition class enumset represents set values enumerated type internally bit vector safer alternative bit fields net framework supplies bitarray collection class stores boolean values supports random access bitwise operators iterated length property changed grow truncate standard support bit arrays standard jersey extension bitarray structure sml library fixed size supports set operations bit operations including unusually shift operations haskell likewise lacks standard support bitwise operations ghc hugs provide data bits module assorted bitwise functions operators including shift rotate operations unboxed array boolean values model bit array lacks support module perl strings expandable bit arrays manipulated usual bitwise operators individual bits tested set vec function ruby access set bit integer fixnum bignum bracket operator array bits apple core foundation library cfbitvector cfmutablebitvector structures supports arrays bit strings arbitrary length fixed length varying array elements aligned element byte word boundary unaligned elements follow padding pgsql postgresql sql support bit strings native type sql bit types bit bit varying positive integer hardware description languages vhdl verilog systemverilog natively support bit vectors model storage elements flip flops hardware busses hardware signals general hardware verification languages openvera systemverilog bit vectors sample values hardware models represent data transferred hardware simulations