bloom filter bloom filter space efficient probabilistic data structure conceived burton howard bloom test element member set false positive matches false negatives query returns set set elements set removed addressed counting bloom filter variant elements set larger probability false positives bloom proposed technique applications source data require impractically large memory conventional error free hashing techniques applied hyphenation algorithm dictionary follow simple hyphenation rules remaining require expensive disk accesses retrieve specific hyphenation patterns sufficient core memory error free hash eliminate unnecessary disk accesses hand limited core memory bloom technique smaller hash area eliminates unnecessary accesses hash area size needed ideal error free hash eliminates disk accesses generally fewer bits element required false positive probability independent size number elements set algorithm description bloom filter bit array bits set hash functions defined maps hashes set element array positions generating uniform random distribution typically constant smaller proportional number elements precise choice constant proportionality determined intended false positive rate filter add element feed hash functions array positions set bits positions query element test set feed hash functions array positions bits positions element set bits set inserted element set bits chance set insertion elements false positive simple bloom filter distinguish cases advanced techniques address problem requirement designing independent hash functions prohibitive large good hash function wide output correlation bit fields hash type hash generate multiple hash functions slicing output multiple bit fields alternatively pass initial values hash function takes initial add append values key larger independence hash functions relaxed negligible increase false positive rate dillinger manolios b effectiveness deriving indices enhanced double hashing triple hashing variants double hashing effectively simple random number generators seeded hash values removing element simple bloom filter impossible false negatives permitted element maps bits setting bits suffices remove element removing elements happen map bit determining elements affect bits element removed clearing bits introduce possibility false negatives time removal element bloom filter simulated bloom filter items removed false positives filter false negatives composite filter undesirable approach adding removed item remove removed filter case keys expensive enumerate requiring disk reads false positive rate high filter regenerated rare event space time advantages risking false positives bloom filters strong space advantage data structures representing sets balancing binary search trees hash tables simple arrays linked lists entries require storing data items require small number bits small integers arbitrary number bits strings exception share storage elements equal prefixes bloom filters store data items separate solution provided actual storage linked structures incur additional linear space overhead pointers bloom filter error optimal contrast requires bits element size elements advantage partly compactness inherited arrays partly probabilistic nature false positive rate reduced factor adding bits element number potential values small set bloom filter easily surpassed deterministic bit array requires bit potential element note hash tables gain space time advantage ignoring collisions store bucket entry case effectively bloom filters bloom filters unusual property time needed add items check item set fixed constant completely independent number items set constant space set data structure property average access time sparse hash tables faster practice bloom filters hardware implementation bloom filter shines lookups independent parallelized understand space efficiency instructive compare general bloom filter special case order false positive rate low small fraction bits set array large long runs zeros content array relative size low generalized bloom filter greater bits set maintaining low false positive rate parameters chosen half bits set random minimizing redundancy maximizing content probability false positives assume hash function selects array position equal probability number bits array probability bit set hash function insertion element displaystyle frac number hash functions correlation probability bit set hash functions displaystyle left frac inserted elements probability bit displaystyle left frac kn probability displaystyle left frac kn test membership element set array positions computed hash functions probability probability algorithm erroneously claim element set displaystyle left left frac kn approx left kn strictly correct assumes independence probabilities bit set assuming close approximation probability false positives decreases number bits array increases increases number inserted elements increases alternative analysis arriving approximation assumption independence mitzenmacher upfal items bloom filter fraction bits set number bits set qm testing membership element set array position hash functions probability bit set displaystyle probability hash functions bit set displaystyle expected probability array position left untouched hash functions items displaystyle left frac kn prove independence assumption concentrated expected azuma hoeffding inequality prove λ exp λ displaystyle left geq frac lambda leq exp lambda kn exact probability false positives displaystyle sum _ approx left left frac kn approx left kn optimal number hash functions number hash functions positive integer putting constraint minimizes false positive probability displaystyle frac required number bits number inserted elements desired false positive probability assuming optimal computed substituting optimal probability expression displaystyle left frac frac frac simplified displaystyle frac left displaystyle frac optimal number bits element log log displaystyle frac frac log _ approx log _ number hash functions ignoring integrality log displaystyle frac log _ false positive probability length bloom filter proportionate number elements filtered required number hash functions depends target false positive probability formula displaystyle frac approximate reasons concern approximates displaystyle frac displaystyle frac good asymptotic approximation holds concern assumes membership test event tested bit set independent event tested bit set concern assumes displaystyle frac fortuitously integral goel gupta rigorous upper bound approximations requires assumptions false positive probability finite bloom filter bits displaystyle elements hash functions displaystyle left frac bound interpreted approximate formula displaystyle left frac kn applied penalty half extra element fewer bit approximating number items bloom filter swamidass baldi number items bloom filter approximated formula displaystyle frac left frac displaystyle estimate number items filter length size filter number hash functions number bits set union intersection sets bloom filters compactly representing set items common compute size intersection union sets bloom filters approximate size intersection union sets swamidass baldi bloom filters length counts estimated displaystyle frac left frac displaystyle frac left frac size union estimated displaystyle cup frac left frac cup displaystyle cup number bits set bloom filters finally intersection estimated displaystyle cap cup formulas interesting properties standard hash table open addressing collision resolution bloom filter fixed size represent set arbitrarily large number elements adding element fails data structure filling false positive rate increases steadily elements bits filter set point queries yield positive result open addressing hashing false positives produced performance steadily deteriorates approaches linear search union intersection bloom filters size set hash functions implemented bitwise operations union operation bloom filters lossless sense bloom filter bloom filter created scratch union sets intersect operation satisfies weaker property false positive probability bloom filter false positive probability constituent bloom filters larger false positive probability bloom filter created scratch intersection sets kinds superimposed code bloom filter implemented physical edge notched cards zatocoding invented calvin mooers set categories piece represented notches card random pattern notches category examples servers akamai technologies content delivery provider bloom filters prevent hit wonders stored disk caches hit wonders web objects requested users akamai applied quarters caching infrastructure bloom filter detect request web object caching object request prevents hit wonders entering disk cache reducing disk workload increasing disk cache hit rates google bigtable apache hbase apache cassandra postgresql bloom filters reduce disk lookups existent rows columns avoiding costly disk lookups considerably increases performance database query operation google chrome web browser bloom filter identify malicious urls checked local bloom filter bloom filter returned positive result check performed user warned returned positive result microsoft bing search engine multi level hierarchical bloom filters search bitfunnel bloom filters provided lower cost previous bing based inverted files squid web proxy cache bloom filters cache digests bitcoin bloom filters speed wallet synchronization venti archival storage bloom filters detect stored data spin model checker bloom filters track reachable state space large verification problems cascading analytics framework bloom filters speed asymmetric joins joined data sets larger called bloom join database literature exim mail transfer agent mta bloom filters rate limit feature medium bloom filters avoid recommending articles user read ethereum bloom filters finding logs ethereum blockchain alternatives classic bloom filters log ϵ displaystyle log _ epsilon bits space inserted key ϵ displaystyle epsilon false positive rate bloom filter space strictly data structure playing role bloom filter log ϵ displaystyle log _ epsilon key bloom filters space equivalent optimal data structure pagh provide optimal space data structure data structure constant locality reference independent false positive rate bloom filters smaller false positive rate ϵ displaystyle epsilon leads greater number memory accesses query log ϵ displaystyle log epsilon elements deleted space penalty bloom filters improved properties optimal space usage constant locality reference ability delete elements provided cuckoo filter fan open source implementation stern dill probabilistic structure based hash tables hash compaction dillinger manolios b identify accurate bloom filter configured optimally dillinger manolios point reasonable accuracy bloom filter wide range numbers additions attractive probabilistic enumeration state spaces unknown size hash compaction attractive number additions predicted accurately fast software hash compaction suited hardware worst case linear access time putze sanders singler studied variants bloom filters faster space classic bloom filters basic idea fast variant locate hash values key blocks size processor memory cache blocks bytes improve performance reducing number potential memory cache misses proposed variants drawback space classic bloom filters space efficient variant relies single hash function generates key range ε displaystyle left varepsilon ϵ displaystyle epsilon requested false positive rate sequence values sorted compressed golomb coding compression technique occupy space close log ϵ displaystyle log _ epsilon bits query bloom filter key suffice check stored bloom filter decompressing bloom filter query variant totally unusable overcome problem sequence values divided small blocks equal size compressed separately query time half block decompressed average decompression overhead variant slower classic bloom filters compensated fact single hash function computed alternative classic bloom filter based space efficient variants cuckoo hashing case hash table constructed keys stored hash table replaced short signatures keys signatures strings bits computed hash function applied keys extensions applications variants bloom filters surveys field continuing churn applications luo variants differ original proposal breaches forks original data structure philosophy treatment unifies bloom filters work random projections compressive sensing locality sensitive hashing remains dasgupta attempt inspired neuroscience cache filtering content delivery networks deploy web caches cache serve web content users greater performance reliability key application bloom filters efficiently determining web objects store web caches quarters urls accessed typical web cache hit wonders accessed users wasteful disk resources store hit wonders web cache accessed prevent caching hit wonders bloom filter track urls accessed users web object cached accessed object cached request bloom filter fashion reduces disk write workload hit wonders written disk cache filtering hit wonders saves cache space disk increasing cache hit rates avoiding false positives finite universe kiss construction bloom filter avoids false positives addition typical existence false negatives construction applies finite universe set elements relies existing adaptive combinatorial group testing scheme eppstein goodrich hirschberg typical bloom filter elements hashed bit array deterministic fast simple calculate functions maximal set size false positives completely avoided function universe size controlled allocated memory counting bloom filters counting filters provide implement delete operation bloom filter recreating filter afresh counting filter array positions buckets extended single bit multibit counter fact regular bloom filters considered counting filters bucket size bit counting filters introduced fan insert operation extended increment buckets lookup operation checks required buckets delete operation consists decrementing respective buckets arithmetic overflow buckets problem buckets large case rare occur increment decrement operations leave bucket set maximum order retain properties bloom filter size counters bits counting bloom filters times space static bloom filters contrast data structures pagh pagh rao fan deletions space static bloom filter issue counting filters limited scalability counting bloom filter table expanded maximal number keys stored simultaneously filter advance designed capacity table exceeded false positive rate grow rapidly keys inserted bonomi introduced data structure based left hashing functionally equivalent half space counting bloom filters scalability issue occur data structure designed capacity exceeded keys reinserted hash table double size space efficient variant putze sanders singler implement counting filters supporting insertions deletions rottenstreich kanizo keslassy introduced general method based variable increments improves false positive probability counting bloom filters variants supporting deletions counting bloom filters element insertion hashed counters incremented hashed variable increment unit increment query element exact values counters considered positiveness sum represented counter composed variable increment queried element negative answer returned query kim false positive counting bloom filter decreases point defined displaystyle k_ opt increases displaystyle k_ opt positive infinity finds displaystyle k_ opt function count threshold decentralized aggregation bloom filters organized distributed data structures perform fully decentralized computations aggregate functions decentralized aggregation collective measurements locally node distributed network involving centralized computational entity purpose data synchronization bloom filters approximate data synchronization byers counting bloom filters approximate number differences sets approach agarwal trachtenberg bloomier filters chazelle designed generalization bloom filters associate element inserted implementing associative array bloom filters structures achieve small space overhead accepting small probability false positives case bloomier filters false positive defined returning result key map map return wrong key map compact approximators boldi vigna proposed lattice based generalization bloom filters compact approximator associates key element lattice standard bloom filters case boolean element lattice bit array array lattice elements adding association key element lattice compute maximum current contents array locations key lattice element reading key compute minimum values locations key approximates original parallel partitioned bloom filters implementation separate array hash function method parallel hash calculations insertions inquiries stable bloom filters deng rafiei proposed stable bloom filters variant bloom filters streaming data idea store entire history stream infinite stable bloom filters continuously evict stale room elements stale evicted stable bloom filter introduces false negatives traditional bloom filters authors tight upper bound false positive rates guaranteed method superior standard bloom filters terms false positive rates time efficiency small space acceptable false positive rate scalable bloom filters almeida proposed variant bloom filters adapt dynamically number elements stored assuring minimum false positive probability technique based sequences standard bloom filters increasing capacity tighter false positive probabilities ensure maximum false positive probability set number elements inserted spatial bloom filters spatial bloom filters sbf originally proposed palmieri calderoni maio data structure designed store location context cryptographic protocols location privacy main characteristic sbfs ability store multiple sets single data structure suitable number application scenarios membership element specific set queried false positive probability depends set sets entered filter construction higher false positive probabilities sets entered property prioritization sets sets elements preserved layered bloom filters layered bloom filter consists multiple bloom filter layers layered bloom filters keeping track times item bloom filter checking layers item layered bloom filter check operation return deepest layer number item attenuated bloom filters attenuated bloom filter depth viewed array normal bloom filters context service discovery network node stores regular attenuated bloom filters locally regular local bloom filter services offered node attenuated filter level services nodes hops current node constructed union local bloom filters nodes hops node small network graph searching service hashes bits pattern n1 node starting point check service offered n1 checking local filter patterns match check attenuated bloom filter order determine node hop offer service lies path nodes repeat procedure n3 offers service destination located attenuated bloom filters consisting multiple layers services hop distance discovered avoiding saturation bloom filter attenuating shifting bits set sources chemical structure searching bloom filters search large chemical structure databases chemical similarity simplest case elements filter called fingerprint field atomic numbers molecule hash based atomic number atom number type bonds case simple advanced filters encode atom counts larger substructure features carboxyl groups graph properties number rings hash based fingerprints hash function based atom bond properties turn subgraph prng seed output values set bits bloom filter molecular fingerprints started late s search chemical structures searched punched cards daylight chemical systems introduced hash based method generate bits precomputed table dictionary approach hash method assign bits substructures early s term fingerprint considered structural keys term grown encompass molecular characteristics similarity comparison including structural keys sparse count fingerprints fingerprints bloom filters daylight hash method number bits assigned feature function feature size implementations daylight fingerprints fixed number bits feature bloom filter original daylight fingerprints similarity screening purposes fingerprint types popular ecfp2 similarity screening include local environmental characteristics introduce false negatives screen constructed mechanism bloom filters filter