tree computer science tree basically query update efficient tree based structures moving objects structure base structure tree tree internal nodes serve directory pointer sibling earlier version tree leaf nodes contained moving object locations indexed time optimized version leaf node entry velocity single dimensional mapping latest update time object fanout increased storing locations moving objects derived mapping values utilizing tree moving objects moving objects indexes dimensional moving object modeled linear function vx vy vx vy location velocity object time instance time update tree structure indexing single dimensional data order adopt tree moving object tree linearization technique helps integrate objects location time single dimensional objects partitioned update time objects partition tree stores locations time estimated linear interpolation tree consistent view objects partition storing update time objects space partitioned grid location object linearized partitions space filling curve peano hilbert curves finally combination partition number time linear order location object indexed tree dimensional key partition partition determined update time xrep space filling curve object position indexed time denotes binary concatenation object tmu computed indexed partition mentioned indexpartition position label timestamp partition curve order xrep concatenating indexpartition xrep tmu position label timestamp partition insertion update deletion object key computed object inserted tree tree update consists deletion insertion auxiliary structure employed latest key object deleted searching key indexing key computed tree tree directly inherits good properties tree achieves efficient update performance queries range query range query retrieves objects location falls rectangular range prior current time tree query window enlargement technique answer queries tree stores object location update time enlargement involves cases location brought earlier time forward time main idea enlarge query window encloses objects positions query window label timestamp enter query window query timestamp enlargement partitions tree traversed objects falling enlarged query window partition space filling curve range query native dimensional space set range queries transformed dimensional space avoid excessively large query region expansion skewed datasets optimization query algorithm exists improves query efficiency avoiding unnecessary query enlargement nearest neighbor query nearest neighbor query computed iteratively performing range queries incrementally enlarged search region answers possibility employ querying ideas idistance technique queries range query nearest neighbor query algorithms easily extended support interval queries continuous queries adapting relational database engines accommodate moving objects tree built tree operations tree including insertion deletion search tree change implementations operations difference implement procedure deriving indexing key stored procedure existing dbms tree easily integrated existing dbms touching kernel spade moving object management built popular relational database mysql tree indexing objects implementation moving object data transformed stored directly mysql queries transformed standard sql statements efficiently processed relational engine importantly achieved neatly independently infiltrating mysql core performance tuning potential problem data skew tree grid space partitioning mapping dimensional location dimensional key introduce performance degradation query update operations dealing skewed data grid cell oversize objects contained cell objects cell indistinguishable overflow nodes underlying tree existing overflow destroys balancing tree increases update cost queries query region large cell incurs false positives increases processing time hand space partitioned finer grid smaller cells cell objects overflow update cost minimized fewer false positives retrieved query cells needed searched increase number cells searched increases workload query tuning tree introduces tuning framework tuning performance tree dealing data skew space data change time order deal data skew space tree splits entire space regions object density set reference points region individual grid cell size determined object density inside tree multiple partitions time intervals time elapsed partition grows shrinks alternately tree utilizes feature tune online order adjust space partitioning accommodate data time partition shrinks starts growing chooses set reference points grid reference point latest data density tuning based latest statistics collected period time space partitioning supposed fit latest data distribution tree expected minimize caused data skew space data time