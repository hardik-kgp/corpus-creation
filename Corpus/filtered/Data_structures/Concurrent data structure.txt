concurrent data structure computer science concurrent data structure storing organizing data access multiple computing threads processes computer historically data structures uniprocessor machines operating systems supported multiple computing threads processes term concurrency captured multiplexing interleaving threads operations data operating processors issued operations accessed data simultaneously today multiprocessor computer architectures provide parallelism dominant computing platform proliferation multi core processors term stand data structures accessed multiple threads access data simultaneously processors communicate concurrent data structure called shared data structure considered reside abstract storage environment called shared memory memory physically implemented tightly coupled distributed collection storage modules basic principles concurrent data structures intended parallel distributed computing environments differ sequential data structures intended uni processor machine ways notably sequential environment specifies data structure properties checks implemented correctly providing safety properties concurrent environment specification liveness properties implementation provide safety properties state bad liveness properties state good happening properties expressed linear temporal logic type liveness requirements tend define data structure method calls blocking blocking data structures restricted type combinations method calls blocking blocking examples concurrency software library safety properties concurrent data structures capture behavior interleavings methods called threads intuitive abstract data structures behave sequential setting interleavings mainstream approaches arguing safety properties concurrent data structure serializability linearizability sequential consistency quiescent consistency structures properties sequentially map concurrent executions collection sequential order guarantee safety liveness properties concurrent data structures typically threads reach consensus simultaneous data access modification requests support agreement concurrent data structures implemented special primitive synchronization operations synchronization primitives modern multiprocessor machines multiple threads reach consensus consensus achieved blocking manner locks locks case blocking wide body theory design concurrent data structures bibliographical references design implementation concurrent data structures difficult design verify correct sequential counterparts primary source additional difficulty concurrency exacerbated fact threads thought completely asynchronous subject operating preemption faults interrupts today machines layout processors memory layout data memory communication load elements multiprocessor architecture influence performance tension correctness performance algorithmic enhancements seek improve performance difficult design verify correct data structure implementation key measure performance scalability captured speedup implementation speedup measure effectively application utilizing machine running machine processors speedup ratio structures execution time single processor execution time processors ideally linear speedup achieve speedup processors data structures speedup grows called scalable extent scale performance concurrent data structure captured formula amdahl law refined versions gustafson law key issue performance concurrent data structures level memory contention overhead traffic memory result multiple threads concurrently attempting access locations memory issue acute blocking implementations locks control access memory order acquire lock thread repeatedly attempt modify location cache coherent multiprocessor processors local caches updated hardware order consistent latest values stored long waiting times attempt modify location exacerbated additional memory traffic unsuccessful attempts acquire lock