ctrie concurrent hash trie ctrie concurrent thread safe lock free implementation hash array mapped trie implement concurrent map abstraction scalable concurrent insert remove operations memory efficient concurrent data structure supports atomic lock free snapshots operation ctrie data structure blocking concurrent hash array mapped trie based single word compare swap instructions shared memory supports concurrent lookup insert remove operations hash array mapped trie entire bit space hash values low risk hashcode collisions node branch conserve memory node bits bitmap bit presence branch array length equal hamming weight bitmap keys inserted atomic compare swap operation node modified ensure updates independently proper order special indirection node node inserted regular node subtries figure illustrates ctrie insert operation trie atomic cas instruction swap node version key k1 cas successful operation restarted cas successful trie procedure repeated key k2 trie hashcodes keys ctrie collide case k2 k3 ctrie extended level trie indirection node node holds colliding keys cas instructions contents indirection nodes i1 cas instructions independently enabling concurrent updates contention ctrie defined pointer root indirection node root node types nodes defined ctrie structure inode main cnode structure cnode bmp integer array branch branch inode snode structure snode keytype valuetype node branching node typically branches branch key pair represented node node avoid wasting entries branching array branches integer bitmap denote bits helper method flagpos inspect relevant hashcode bits level extract bit bitmap set denoting branch position bit computes position branch array formula bit bmp hashcode level x1f pos bitcount bit bmp note operations treat nodes mutable nodes nodes changed created ctrie illustration pseudocode insert operation inserted updated methods nodes return versions node inserted updated position note insert operation tail recursive rewritten loop operations original paper ctries data structure proven correct ctrie operations atomicity linearizability lock freedom properties lookup operation modified guarantee wait freedom advantages ctries ctries comparable performance concurrent skip lists concurrent hash tables data structures terms lookup operation slower hash tables faster skip lists lower level indirections scalable concurrent hash tables insertions concerned concurrent hash tables bad conserving memory keys removed hash table underlying array shrunk ctries property allocated memory function current number keys data structure ctries logarithmic complexity bounds basic operations albeit low constant factor high branching level ctries support lock free linearizable constant time snapshot operation based insight persistent data structures breakthrough concurrent data structure design existing concurrent data structures support snapshots snapshot operation implementing lock free linearizable iterator size clear operations existing concurrent data structures implementations global locks correct concurrent modifications data structure ctries iterator creation operation clear operation duplicate operation amortized logn size retrieval operation problems ctries concurrent data structures require dynamic memory allocation lock free concurrent data structures rely garbage collection platforms current implementation ctrie written jvm garbage collection provided platform concurrent memory pool nodes shared instances ctries application reference counting properly deallocate nodes implementation deal manual memory management nodes ctries common lisp implementation ctrie implements copy mark sweep garbage collection techniques persistent memory mapped storage hazard pointers solution correct manual management removed nodes technique viable managed environments lower pressure gc ctrie implementation rust hazard pointers purpose implementations ctrie implementation scala github mutable thread safe implementation ensures progress supports lock free linearizable snapshots data structure ctries scalastm software transactional memory library jvm scala standard library includes ctries implementation february haskell implementation package github standalone implementations github ctrie common lisp implementation github insert ctrie variant tabling prolog programs implementation standalone package rust implementation hazard pointers implementation achieve lock free synchronization managed unmanaged version ctrie implemented managed ctrie unmanaged ctrie clojure implementation clojure ctrie