distributed hash table distributed hash table dht distributed lookup service hash table key pairs stored dht participating node efficiently retrieve key main advantage dht nodes removed minimum work distributting keys keys unique identifiers map values turn addresses documents arbitrary data responsibility maintaining mapping keys values distributed nodes change set participants minimal disruption dht scale extremely large numbers nodes handle continual node arrivals departures failures dhts form infrastructure build complex services anycast cooperative web caching distributed file systems domain services instant messaging multicast peer peer file sharing content distribution systems notable distributed networks dhts include bittorrent distributed tracker coral content distribution network kad network storm botnet tox instant messenger freenet yacy search engine interplanetary file properties dhts characteristically emphasize properties autonomy decentralization nodes collectively form central coordination fault tolerance reliable sense nodes continuously joining leaving failing scalability function efficiently thousands millions nodes key technique achieve goals node coordinate nodes commonly log displaystyle participants limited work change membership dht designs seek secure malicious participants participants remain anonymous common peer peer file sharing systems anonymous p2p finally dhts deal traditional distributed systems issues load balancing data integrity performance ensuring operations routing data storage retrieval complete structure structure dht decomposed main components foundation abstract keyspace set bit strings keyspace partitioning scheme splits ownership keyspace participating nodes overlay network connects nodes allowing owner key keyspace components place typical dht storage retrieval proceed suppose keyspace set bit strings file filename data dht sha hash filename generated producing bit key message data node participating dht message forwarded node node overlay network reaches single node responsible key keyspace partitioning node stores key data client retrieve contents file hashing filename produce dht node data message message routed overlay node responsible reply stored data keyspace partitioning overlay network components goal capturing principal ideas common dhts designs differ details keyspace partitioning dhts variant consistent hashing rendezvous hashing map keys nodes algorithms devised independently simultaneously solve distributed hash table problem consistent hashing rendezvous hashing essential property removal addition node set keys owned nodes adjacent ids leaves nodes unaffected contrast traditional hash table addition removal bucket entire keyspace remapped change ownership typically corresponds bandwidth intensive movement objects stored dht node minimizing reorganization required efficiently support high rates churn node arrival failure consistent hashing consistent hashing employs function δ displaystyle delta k_ k_ defines abstract notion distance keys displaystyle k_ displaystyle k_ unrelated geographical distance network latency node assigned single key called identifier node displaystyle i_ owns keys displaystyle k_ displaystyle i_ closest measured δ displaystyle delta k_ i_ chord dht consistent hashing treats nodes points circle δ displaystyle delta k_ k_ distance traveling clockwise circle displaystyle k_ displaystyle k_ circular keyspace split contiguous segments endpoints node identifiers displaystyle i_ displaystyle i_ adjacent ids shorter clockwise distance displaystyle i_ displaystyle i_ node displaystyle i_ owns keys fall displaystyle i_ displaystyle i_ rendezvous hashing rendezvous hashing called highest random weight hrw hashing clients hash function displaystyle chosen ahead time associate key servers client list identifiers server key client computes hash weights client associates key server highest hash weight key server displaystyle s_ owns keys displaystyle k_ hash weight displaystyle s_ k_ higher hash weight node key locality preserving hashing locality preserving hashing ensures keys assigned objects enable efficient execution range queries chord decouples object keys peer ids sorts keys ring statistical approach based swarm intelligence paradigm sorting ensures keys stored neighbour nodes discovery procedures including range queries performed logarithmic time overlay network node maintains set links nodes neighbors routing table links form overlay network node picks neighbors structure called network topology dht topologies share variant essential property key node node owns link node node closer terms keyspace distance defined easy route message owner key greedy algorithm globally optimal step forward message neighbor closest neighbor arrived closest node owner defined style routing called key based routing basic routing correctness constraints topology guarantee maximum number hops route route length low requests complete maximum number neighbors node maximum node degree low maintenance overhead excessive shorter routes requires higher maximum degree common choices maximum degree route length number nodes dht big notation common choice log displaystyle log degree route length optimal terms degree route length tradeoff topologies typically flexibility choice neighbors dhts flexibility pick neighbors close terms latency physical underlying network general dhts construct navigable small network topologies trade route length network degree maximum route length closely diameter maximum number hops shortest path nodes network worst case route length large diameter dhts limited degree diameter tradeoff fundamental graph theory route length greater diameter greedy routing algorithm shortest paths algorithms overlay networks routing exist algorithms exploit structure overlay network sending message nodes subset nodes dht algorithms applications overlay multicast range queries collect statistics systems based approach structella implements flooding random walks pastry overlay dq dht implements dynamic querying search algorithm chord network security decentralization fault tolerance scalability dhts inherently resilient hostile attacker centralized open systems distributed data storage robust massive hostile attackers feasible dht carefully designed byzantine fault tolerance defend security weakness sybil attack current dht designs petar maymounkov original authors kademlia proposed circumvent weakness sybil attack incorporating social trust relationships design codenamed tonika domain ttt based algorithm design electric routing authored mathematician jonathan kelner maymounkov undertaken comprehensive implementation effort effective defences sybil attacks generally considered open question wide variety potential defences proposed year security conferences implementations notable differences encountered practical instances dht implementations include address space parameter dht real dhts bit bit key space real dhts hash functions sha real key displaystyle hash file content hash file provide content addressable storage renaming file prevent users finding dhts publish objects types key displaystyle node displaystyle data contact node publication presence applications simplest case displaystyle random number directly key displaystyle bit dht displaystyle bit number randomly chosen dhts publishing nodes ids optimize dht operations redundancy improve reliability displaystyle data key pair stored node key selecting node real dht algorithms select displaystyle suitable nodes displaystyle implementation specific parameter dht dht designs nodes agree handle keyspace range size chosen dynamically hard coded advanced dhts kademlia perform iterative lookups dht order select set suitable nodes send displaystyle data messages nodes drastically reducing useless traffic published messages nodes suitable storing key displaystyle iterative lookups cover small set nodes entire dht reducing useless forwarding dhts forwarding displaystyle data messages occur healing algorithm target node receives displaystyle data message believes displaystyle handled range closer node terms dht keyspace message forwarded node data indexed locally leads balancing dht behavior algorithm requires nodes publish presence data dht iterative lookups performed examples dht protocols implementations apache cassandra baton overlay mainline dht standard dht bittorrent based kademlia provided khashmir content addressable network chord koorde kademlia pastry grid riak tapestry tomp2p voldemort applications dhts btdigg bittorrent dht search engine cloudsnap decentralized web application deployment platform codeen web caching coral content distribution network faroo peer peer web search engine freenet censorship resistant anonymous network glusterfs distributed file storage virtualization gnunet freenet distribution network including dht implementation i2p open source anonymous peer peer network i2p bote serverless secure anonymous mail ipfs content addressable peer peer hypermedia distribution protocol jxta open source p2p platform lbry free open community digital marketplace oracle coherence memory data grid built dht implementation perfect dark peer peer file sharing application japan retroshare friend friend network ring privacy preserving voice video chat communication platform based kademlia dht tox instant messaging intended function skype replacement twister microblogging peer peer platform yacy distributed search engine