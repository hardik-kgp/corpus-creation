fusion tree computer science fusion tree type tree data structure implements associative array bit integers operating collection key pairs space performs searches log time asymptotically faster traditional balancing binary search tree van emde boas tree large values achieves speed exploiting constant time operations machine word fusion trees invented  michael fredman dan willard advances fredman willard original  paper  implement fusion trees model computation underlying operations algorithm belong  model circuit complexity addition bitwise boolean operations disallows multiplication operations original fusion tree algorithm dynamic version fusion trees hash tables proposed  matched original structure log runtime expectation dynamic version exponential tree proposed  yields worst case runtimes log log log operation remains open dynamic fusion trees achieve log operation high probability works fusion tree essentially tree branching factor   small exponent height log achieve desired runtimes updates queries fusion tree search node   keys constant time compressing sketching keys fit machine word turn comparisons parallel sketching sketching method bit key node keys compressed  bits key thought path binary tree height starting root leaf distinguish paths suffices branching point bit keys differ paths  branching points  bits needed distinguish keys property sketch function preserves order keys sketch sketch keys approximating sketch locations sketch bits   sketch key    bit integer   displaystyle x_ b_ x_ b_  cdots x_ b_  standard word operations programming language difficult directly compute sketch key constant time sketch bits packed range size  bitwise multiplication bitwise operation serves clear sketch bits key multiplication shifts sketch bits small range perfect sketch approximate sketch preserves order keys preprocessing needed determine correct multiplication constant sketch bit location shifted multiplication  displaystyle textstyle sum _   approximate sketch work properties hold distinct pairs ensure sketch bits uncorrupted multiplication strictly increasing function order sketch bits preserved    sketch bits packed range size  inductive argument constructed   suppose     chosen pick smallest integer properties   satisfied property  requires      values avoid chosen minimal    implies property  approximate sketch computed mask sketch bits bitwise multiply key predetermined constant operation requires machine constant time mask shifted sketch bits contained contiguous block    bits parallel comparison purpose compression achieved sketching keys stored bit word node sketch node bit string  sketch   sketch   sketch assume sketch function  bits block    bits   total number bits node sketch notational bit string nonnegative integer denote concatenation times bit string denotes concatenation node sketch search keys bit integer  computed constant time multiply constant   note  sketch  positive preserves leading  iff sketch compute smallest sketch subtract node sketch bitwise difference constant  clears leading bit block bit result compute fact leading bit block  desketching arbitrary query parallel comparison computes sketch  sketch sketch sketch function general order preserving set keys case  true keys  longest common prefix key longer common prefix sketch bits common sketch closer sketch sketch length longest common prefix bit integers computed constant time finding bit bitwise xor mask longest common prefix note identifies branches set keys bit  successor contained  subtree bit  predecessor contained  subtree suggests algorithm parallel comparison sketch  sketch sketch compute longest common prefix  longer  length longest common prefix bit   parallel comparison search successor sketch actual predecessor bit   parallel comparison search predecessor sketch actual successor predecessor successor exact position set keys determined fusion hashing application fusion trees hash tables willard describes data structure hashing outer level hash table hash chaining combined fusion tree representing hash chain hash chaining hash table constant load factor average size chain constant additionally high probability chains size log log log number hashed items chain size small fusion tree handle searches updates constant time operation time operations data structure constant high probability precisely data structure inverse quasipolynomial probability exp log  constant probability exists operation exceeds time