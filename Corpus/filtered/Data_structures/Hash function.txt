hash function hash function function map data arbitrary size fixed size values values returned hash function called hash values hash codes digests simply hashes values fixed size table called hash table hash function hash table called hashing scatter storage addressing hash functions hash tables data storage retrieval applications access data small constant time retrieval storage space fractionally greater total space required data records hashing computationally storage space efficient form data access avoids linear access time ordered unordered lists structured trees exponential storage requirements direct access state spaces large variable length keys hash functions relies statistical properties key function interaction worst case behavior intolerably bad vanishingly small probability average case behavior optimal minimal collisions hash functions confused checksums check digits fingerprints lossy compression randomization functions error correcting codes ciphers concepts overlap extent requirements designed optimized differently overview hash function takes input key datum record identify data storage retrieval application keys fixed length integer variable length cases key datum output hash code hash table holding data records pointers hash function considered perform functions convert variable length keys fixed length machine word length values folding units parity preserving operator add xor scramble bits key values uniformly distributed key space map key values equal size table good hash function satisfies basic properties  fast compute  minimize duplication output values collisions hash functions rely generating favorable probability distributions effectiveness reducing access time constant high table loading factors pathological key sets designed hash functions result access times approaching linear number items table hash functions designed worst case performance good performance high table loading factors special cases perfect collisionless mapping keys hash codes implementation based parity preserving bit operations xor add multiply divide adjunct hash function collision resolution method employs auxiliary data structure linked lists systematic probing table slot hash tables hash functions conjunction hash tables store retrieve data items data records hash function translates key datum record hash code hash table item table hash code slot called bucket case item table hash code indexes slot kind collision resolution required item table replace item table location procedure procedure depends structure hash table chained hashing slot head linked list chain items collide slot chain chains random order searched linearly serial order ordering list frequency speed access open address hashing table probed starting occupied slot manner linear probing quadratic probing double hashing open slot located entire table probed overflow searching item procedure item located open slot entire table searched item table specialized hash functions build caches large data sets stored slow media cache generally simpler hashed search table collision resolved discarding writing older colliding items hash functions essential ingredient bloom filter space efficient probabilistic data structure test element member set special case hashing geometric hashing grid method applications set inputs sort metric space hashing function interpreted partition space grid cells table array indices called grid file grid bucket grid names hash function returns tuple principle computer graphics computational geometry disciplines solve proximity problems plane dimensional space finding closest pairs set points shapes list shapes images image database hash tables implement associative arrays dynamic sets properties uniformity good hash function map expected inputs evenly output range hash output range generated roughly probability reason requirement cost hashing based methods sharply number collisions pairs inputs mapped hash increases hash values occur larger fraction lookup operations search larger set colliding table entries note criterion requires uniformly distributed random sense good randomizing function barring computational efficiency concerns generally good choice hash function converse true hash tables small subset valid inputs instance club membership list member names large set names cases uniformity criterion hold typical subsets entries table global set entries typical set records hashed table slots probability bucket receiving records vanishingly small buckets records small number collisions virtually inevitable larger birthday problem special cases keys advance key set static hash function achieves absolute collisionless uniformity hash function perfect algorithmic constructing function searching factorial function number keys mapped versus number table slots mapped finding perfect hash function small set keys computationally infeasible function computationally complex standard hash function marginal advantage function good statistical properties yields minimum number collisions universal hash function testing measurement testing hash function uniformity distribution hash values evaluated chi squared test test goodness fit measure actual distribution items buckets versus expected uniform distribution items formula        displaystyle frac sum _   b_ b_   m m  displaystyle number keys displaystyle number buckets displaystyle b_ number items bucket displaystyle ratio confidence interval     indicative hash function evaluated expected uniform distribution hash functions technical properties uniform distribution applied strict avalanche criterion single input bit complemented output bits  probability reason property selected subsets key space low variability order output uniformly distributed low variability bit translate high variability distribution table space output bit change probability  bits reluctant change keys clustered values bits change mapping approaching fixed xor function single bit standard tests property literature relevance criterion multiplicative hash function assessed efficiency data storage retrieval applications hash function trade search time data storage space search time unbounded compact unordered linear list medium storage space unbounded randomly accessible structure indexable key large sparse fast hash function takes finite time map large key space feasible storage space searchable bounded time number keys applications highly desirable hash function computable minimum latency secondarily minimum number instructions computational complexity varies number instructions required latency individual instructions simplest bitwise methods folding multiplicative methods complex slowest division based methods collisions infrequent marginal delay harmless preferable choose faster hash function computation saves collisions division based implementations concern division microprogrammed chip architectures divide modulo constant inverted multiply word size multiplicative inverse constant programmer compiler divide reduced directly series shift subtracts shift adds minimizing number operations required daunting problem number assembly instructions dozen swamp pipeline architecture hardware multiply functional unit multiply inverse approach table size power  perform remainder division operation computations costly  pseudorandom number generator function key uniform interval    hash function uniform interval   key  replace division faster bit shift np key keys hashed repeatedly hash function costly computing time saved precomputing hash codes storing keys matching hash codes keys identical technique transposition table game playing programs stores  bit hashed representation board position universality universal hashing scheme randomized algorithm selects hashing function family functions probability collision distinct keys  number distinct hash values desired independently keys universal hashing ensures probabilistic sense hash function application behave random function distribution input data collisions perfect hashing require operations special purpose hash function applicability hash function applicable situations hash function hash function table sizes strings length accept seed double hashing deterministic hash procedure deterministic meaning input generate hash function data hashed mathematical sense term requirement excludes hash functions depend external variable parameters pseudo random number generators time day excludes functions depend memory address object hashed cases address change execution happen systems methods garbage collection rehashing item determinism context reuse function python adds feature hash functions randomized seed generated python process starts addition input hashed python hash valid hash function single values persisted written disk longer treated valid hash values random differ defined range desirable output hash function fixed size output constrained  bit integer values hash values array hashing commonly accelerate data searches producing fixed length output variable length input accomplished breaking input data chunks specific size hash functions data searches arithmetic expression iteratively processes chunks input characters string produce hash variable range applications range hash values program change instance hash table expanded situations hash function takes parameters input data number allowed hash values common solution compute fixed hash function large range     divide result division remainder power  bit masking bit shifting approach hash function chosen result fairly uniform distribution   occur application depending function remainder uniform values odd prime numbers variable range minimal movement dynamic hash function hash function store values hash table outlives program hash table expanded shrunk hash table referred dynamic hash table hash function relocate minimum number records table resized desirable needed hash function key hashed number allowed hash values  probability close  linear hashing spiral storage examples dynamic hash functions execute constant time relax property uniformity achieve minimal movement property extendible hashing dynamic hash function requires space proportional compute hash function function previous keys inserted algorithms preserve uniformity property require time proportional compute invented hash function minimal movement distributed hash tables data normalization applications input data features irrelevant comparison purposes personal desirable ignore distinction upper lower case letters data hash function compatible data equivalence criterion inputs considered equivalent yield hash accomplished normalizing input hashing upper casing letters hashing integer data types common algorithms hashing integers method distribution data dependent simplest common methods practice modulo division method identity hash function data hashed small data reinterpreted integer hashed cost computing identity hash function effectively hash function perfect maps input distinct hash meaning small depends size type hashed hash code  bit integer  bit integer integer  bit floating point float objects simply directly  bit integer long  bit floating point double method types data hashing scheme mapping character strings upper lower case binary encoding character interpreted integer table alternative form character   character stored  bits extended ascii iso latin  table    entries case unicode characters table       entries technique map letter country codes za country names    table entries  digit zip codes  city names   entries invalid data values country code zip code  left undefined table mapped null trivial hash function keys uniformly uniformly distributed key space key values essentially random considered hashed case number bits key dialed collated hash table simple hash function mask bits table size  folding folding hash code produced dividing input sections bits  table size parity preserving bitwise operation add xor combine sections final operation mask shift trim excess bits high low table size  bits key x0123456789abcdef  sections x4def x1357 x159e x091a x8 adding x7aa4  bit mid squares mid squares hash code produced squaring input extracting number middle digits bits input    hash table size   squaring key produces  e16 hash code middle  digits  digit number ignoring high digit  mid squares method produces reasonable hash code lot leading trailing zeros key variant multiplicative hashing good arbitrary key good multiplier division hashing standard technique modulo function key selecting divisor displaystyle prime number close table size mod displaystyle mod table size power  distribution   displaystyle   good large number key sets drawback division hashing division microprogrammed modern architectures including x86  times slower multiply drawback break clustered keys keys    modulo  map address technique works practice key sets random probability key set cyclical large prime number small algebraic coding algebraic coding variant division method hashing division polynomial modulo  integer map bits bits approach  displaystyle  postulate displaystyle degree polynomial ζ   ζ  displaystyle mathrm zeta _   zeta _  key     displaystyle k_  k_  k_  _  regarded polynomial     displaystyle k_   k_  k_  remainder polynomial arithmetic modulo  mod     displaystyle mod h_   h_  h_      displaystyle h_  h_  h_  _  displaystyle constructed fewer coefficients keys differing fewer bits guaranteed collide function divisor   constructed gf  field knuth          displaystyle       derivation displaystyle smallest set integers    mod displaystyle   subseteq land j mod forall define α displaystyle prod _ alpha α  displaystyle alpha gf  coefficients displaystyle computed field degree displaystyle α  displaystyle alpha j root displaystyle α displaystyle alpha root coefficients displaystyle displaystyle satisfy  displaystyle p_  p_       displaystyle r_   r_  r_  nonzero polynomial modulo  nonzero coefficients displaystyle multiple displaystyle modulo  hash function map keys fewer bits common unique indices usual outcome large large order scheme computationally feasible suited hardware microcode implementation unique permutation hashing unique permutation hashing guaranteed worst case insertion time multiplicative hashing standard multiplicative hashing formula mod displaystyle h_ lfloor ak bmod rfloor produces hash   displaystyle  ldots  displaystyle appropriately chosen prime displaystyle large binary representation random mix   practical special case occurs  displaystyle   displaystyle  powers  displaystyle machine word size case formula mod   displaystyle h_ lfloor ak bmod   rfloor special arithmetic modulo  displaystyle  default low level programming languages integer division power  simply shift function unsigned hash unsigned return fixed displaystyle displaystyle translates single integer multiplication shift making fastest hash functions compute multiplicative hashing susceptible common mistake leads poor diffusion higher input bits affect lower output bits transmutation input shifts span retained bits xors adds key multiplication step corrects function unsigned hash unsigned return fibonacci hashing fibonacci hashing form multiplicative hashing multiplier  ϕ displaystyle  phi displaystyle machine word length ϕ displaystyle phi phi golden ratio ϕ displaystyle phi irrational number approximate   expansion   property multiplier uniformly distributes table space blocks consecutive keys respect block bits key consecutive keys high bits low bits key field common multipliers word lengths displaystyle             zobrist hashing tabulation hashing generally zobrist hashing albert zobrist american computer scientist method constructing universal families hash functions combining table lookup xor operations algorithm proven fast high quality hashing purposes hashing integer number keys zobrist hashing originally introduced compactly representing chess positions computer game playing programs unique random number assigned represent type piece black white space board table x12 numbers initialized start program random numbers length  bits natural  squares board position transcribed cycling pieces position indexing random numbers vacant spaces included calculation xoring starting  identity xor random seed reduced modulo folding operation produce hash table original zobrist hash stored table representation position method extended hashing integers representing byte  positions word unique  bit random number table   x4 random numbers constructed  bit hashed integer transcribed successively indexing table byte plain text integer xoring loaded values starting identity random seed natural extension  bit integers table   x8  bit random numbers kind function nice theoretical properties called  tuple independence meaning  tuple keys equally mapped  tuple hash values customized hash function hash function designed exploit existing entropy keys keys leading trailing zeros fields unused constant generally vary masking volatile bits hashing provide faster hash function selected divisors multipliers division multiplicative schemes uniform hash functions keys cyclic redundancies hashing variable length data data values long variable length character strings personal names web addresses mail messages distribution uneven complicated dependencies text natural language highly uniform distributions characters character pairs characteristic language data prudent hash function depends characters string depends character middle ends simplistic hash functions add characters string length form word size hash middle  characters string saves iterating long string hash functions hash characters string linear redundancies clustering pathologies key set strategies effective custom hash function structure keys middle ends field invariant constant differentiate keys invariant parts keys character folding paradigmatic folding characters add integer values characters string idea multiply hash total constant typically sizeable prime number adding character ignoring overflow exclusive add plausible alternative final operation modulo mask function reduce word size table weakness procedure cluster upper lower bits bytes clustering remain hashed result collisions proper randomizing hash ascii byte codes upper bit  printable strings  byte codes  byte codes clustered remaining bits unobvious manner classic approach dubbed pjw hash based work peter weinberger att bell labs s originally designed hashing identifiers compiler symbol tables dragon book hash function offsets bytes  bits adding quantity wraps high  bits shifted xored low byte cumulative quantity result word size hash code modulo reducing operation applied produce final hash today advent  bit word sizes efficient variable length string hashing word chunks word length folding modern microprocessors faster processing  bit character strings hashed processing character time interpreting string array  bit  bit integers hashing accumulating wide word integer values arithmetic operations multiplication constant bit shifting final word unoccupied byte positions filled zeros randomizing folded hash accumulated hash code reduced final modulo operation yield table radix conversion hashing analogous ascii ebcdic character string representing number converted numeric quantity computing variable length string converted       simply polynomial radix  takes components    characters input string length directly hash code hash function applied map large hash table size prime number large hold number characters character set potential keys radix conversion hashing strings minimizes number collisions data sizes restrict maximum length string hashed method  bit double long word hash  character alphabetic string ignoring case radix  printable ascii string limited  characters radix   bit long word alphabetic keys modest length keys stored hash table numeric character strings problem  bits count    digits radix  rolling hash applications substring search compute hash function character substring character string advancing window width characters string fixed integer greater straightforward solution extract substring character position text compute separately requires number operations proportional proper choice technique rolling hash compute hashes effort proportional mk number occurrences substring familiar algorithm type rabin karp average case performance mk worst case fairness worst case gravely pathological text string substring composed repeated single character aaaaaaaaaaa aaa hash function algorithm rabin fingerprint designed avoid collisions  bit character strings suitable hash functions analysis worst case result hash function assessed ways theoretical practical theoretical worst case probability keys map single slot practical worst case expected longest probe sequence hash function collision resolution method analysis considers uniform hashing key map slot probability  characteristic universal hash functions knuth worries adversarial attack real time systems gonnet probability case ridiculously small representation probability keys mapping single slot α α displaystyle frac alpha alpha α displaystyle alpha load factor