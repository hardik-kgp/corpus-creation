hashed array tree computer science hashed array tree hat dynamic array data structure published edward sitarski maintaining array separate memory fragments leaves store data elements simple dynamic arrays maintain data contiguous memory area primary objective reduce element copying automatic array resizing operations improve memory usage patterns simple dynamic arrays based geometric expansion waste linear Ï‰ space number elements array hashed array trees waste order storage space optimization algorithm elimination data copying completely cost increasing wasted space perform access constant time slower simple dynamic arrays algorithm amortized performance appending series objects hashed array tree contrary hash functions definitions defined sitarski hashed array tree level directory power number leaf arrays leaf arrays size level directory structure superficially resembles hash table array based collision chains basis hashed array tree hashed array tree hold elements size level directory powers enables faster physical addressing bit operations arithmetic operations quotient remainder ensures amortized performance append operation presence occasional global array copy expanding expansions size reductions usual dynamic array geometric expansion scheme array reallocated sequential chunk memory size double current size data moved location ensures amortized operations cost wasted space enlarged array filled half capacity hashed array tree directory leaves restructured prior size accommodate additional append operations data held structure moved locations leaf allocated array filled quarter capacity extra leaves allocated allocated needed wasting storage multiple alternatives reducing size hashed array tree eighth restructured smaller half hashed array tree option freeing unused leaf arrays resizing leaves optimizations include adding leaves resizing growing directory array needed geometric expansion eliminate data copying completely cost making wasted space small constant performing restructuring set threshold overhead reached data structures brodnik presented dynamic array algorithm space wastage profile hashed array trees brodnik implementation retains allocated leaf arrays complicated address calculation function compared hashed array trees