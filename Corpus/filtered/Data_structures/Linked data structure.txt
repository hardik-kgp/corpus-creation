linked data structure computer science linked data structure data structure consists set data records nodes linked organized references links pointers link data called connector linked data structures links treated special data types dereferenced compared equality linked data structures contrasted arrays data structures require performing arithmetic operations pointers distinction holds nodes implemented elements single array references array indices long arithmetic indices data structure essentially linked linking ways dynamic allocation array linking linked data structures include linked lists search trees expression trees data structures key building blocks efficient algorithms topological sort set union common types linked data structures linked lists linked list collection structures ordered physical placement memory logical links stored data structure stored adjacent memory locations structure data field address field address field address successor linked list singly doubly multiply linked linear circular basic properties objects called nodes linked linear sequence reference node list called head node class store integers implementation linked list node structure implementation linked list typedefs note structure member points structure called referential structure node class structure implementation linked list search trees search tree tree data structure nodes data values stored ordered set order traversal tree nodes visited ascending order stored values basic properties objects called nodes stored ordered set order traversal ascending readout data tree advantages disadvantages linked list versus arrays compared arrays linked data structures flexibility organizing data allocating space arrays size array precisely potential waste memory arbitrary limitation hinder functionality linked data structure built dynamically bigger program requires requires guessing creation time terms space allocated feature key avoiding wastes memory array array elements contiguous connected sequential portion memory linked data structure reference node users needed nodes linked data structure moved individually locations physical memory logical connections arrays care process thread add delete nodes data structure processes threads working parts hand access node linked data structure requires chain references stored node structure nodes node links nodes reached log steps slowing process accessing nodes represents considerable slowdown case structures large numbers nodes structures nodes require worst case  steps contrast array data structures access element constant number operations independent number entries broadly implementation linked data structure dynamic data structures chance space memory utilized efficiently data structures memory allocated memory needed deallocation general disadvantages linked data structures incur substantial memory allocation overhead nodes allocated individually frustrate memory paging processor caching algorithms generally poor locality reference cases linked data structures memory link fields competing array structures linked data structures contiguous instances data memory arrays arrays nth element accessed linked data structure follow multiple pointers element access time varies structure element theoretical models computation enforce constraints linked structures pointer machine problems require steps unconstrained random access machine model