open addressing open addressing closed hashing method collision resolution hash tables method hash collision resolved probing searching alternate locations array probe sequence target record unused array slot key table probe sequences include linear probing interval probes fixed set  quadratic probing interval probes increases quadratically indices quadratic function double hashing interval probes fixed record computed hash function main tradeoffs methods linear probing cache performance sensitive clustering double hashing poor cache performance exhibits virtually clustering quadratic probing falls areas double hashing require computation forms probing open addressing methods hopscotch hashing robin hood hashing served hashing cuckoo hashing existing keys array room key maximum search times methods based probing critical influence performance open addressing hash table load factor proportion slots array load factor increases  number probes required insert key rises dramatically table probing algorithms fail terminate good hash functions load factors limited  poor hash function exhibit poor performance low load factors generating clustering simplest linear addressing method generally typical load factors open addressing methods  whilst separate chaining typically  hash functions cluster understood easy unintentionally write hash function severe clustering pseudocode pseudocode implementation open addressing hash table linear probing single slot stepping common approach effective hash function good lookup set remove functions common internal function find_slot locate array slot key record pair key var pair array slot  num_slots  function find_slot key hash key modulo num_slots search key slot slot occupied slot key key  modulo num_slots return function lookup key find_slot key slot occupied key table return slot key table return function set key find_slot key slot occupied key slot return table rebuild table larger note  find_slot key slot key key slot note  rebuilding table requires allocating larger array recursively set operation insert elements array larger array common increase array size exponentially doubling array size function remove key find_slot key slot unoccupied return key table loop mark slot unoccupied note   modulo num_slots slot unoccupied exit loop hash slot key modulo num_slots determine lies cyclically goto slot slot note  records cluster vacant slots natural hash position current position lookups terminate finding record point pseudocode vacant slot invalidating property subsequent records cluster subsequent record raw hash record naturally land hash table collisions test record invalidly positioned respect required properties cluster vacant technique removal simply mark slot deleted eventually requires rebuilding table simply remove deleted records methods provide  updating removal existing records occasional rebuilding high water mark table size grows  remove method linearly probed hash tables single slot stepping case records deleted operation marking slots deletion rebuilding efficient