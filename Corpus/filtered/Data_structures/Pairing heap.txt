pairing heap pairing heap type heap data structure simple implementation excellent practical amortized performance introduced michael fredman robert sedgewick daniel sleator robert tarjan pairing heaps heap ordered multiway tree structures considered simplified fibonacci heaps considered robust choice implementing algorithms prim mst algorithm support operations assuming min heap min simply return element heap meld compare root elements smaller remains root result larger element subtree appended child root insert create heap inserted element meld original heap decrease key optional remove subtree rooted key decreased replace key smaller key meld result heap delete min remove root repeated melds subtrees tree remains merging strategies employed analysis pairing heaps time complexity initially inspired splay trees amortized time delete min log operations min meld insert amortized time decrease key operation determining precise asymptotic running time pairing heaps turned difficult initially time complexity operation conjectured empirical grounds fredman proved amortized time decrease key ω log log displaystyle omega log log sequences operations amortization argument pettie proved insert meld decrease key log log displaystyle sqrt log log amortized time log displaystyle log elmasry introduced elaborations pairing heaps decrease key runs log log displaystyle log log amortized time operations optimal amortized bounds tight θ log log displaystyle theta log log bound original data structure worse priority queue algorithms fibonacci heaps perform decrease key displaystyle amortized time performance practice excellent stasko vitter moret shapiro larkin sen tarjan conducted experiments pairing heaps heap data structures concluded pairing heaps faster practice array based binary heaps ary heaps faster practice pointer based heaps including data structures fibonacci heaps theoretically efficient structure pairing heap heap pairing tree consisting root element list pairing trees heap ordering property requires parent node greater node description assumes purely functional heap support decrease key operation type pairingtree elem heap elem elem subheaps list pairingtree elem type pairingheap elem pairingtree elem pointer based implementation ram machines supporting decrease key achieved pointers node representing children node singly linked list pointer node child sibling previous sibling leftmost sibling parent alternatively previous pointer letting child point parent single boolean flag list achieves compact structure expense constant overhead factor operation operations min function min simply returns root element heap function min heap pairingheap elem elem heap error return heap elem meld melding heap returns heap heap returned minimum root elements root element adds heap larger root list subheaps function meld heap1 heap2 pairingheap elem pairingheap elem heap1 return heap2 elsif heap2 return heap1 elsif heap1 elem heap2 elem return heap heap1 elem heap2 heap1 subheaps return heap heap2 elem heap1 heap2 subheaps insert easiest insert element heap meld heap heap element list subheaps function insert elem elem heap pairingheap elem pairingheap elem return meld heap elem heap delete min trivial fundamental operation deletion minimum element heap requires performing repeated melds children tree remains standard strategy melds subheaps pairs step data structure left melds list heaps left function delete min heap pairingheap elem pairingheap elem heap error return merge pairs heap subheaps auxiliary function merge pairs function merge pairs list list pairingtree elem pairingheap elem length list return elsif length list return list return meld meld list list merge pairs list implement pass left left merging strategy reduction merge pairs h1 h4 h5 h6 h7 meld meld h1 merge pairs h4 h5 h6 h7 meld h1 h12 rest list meld h12 meld meld h4 merge pairs h5 h6 h7 meld h4 h34 rest list meld h12 meld h34 meld meld h5 h6 merge pairs h7 meld h5 h6 h56 rest list meld h12 meld h34 meld h56 h7 switch direction meld heaps h567 meld h12 meld h34 h567 meld heaps h34567 meld h12 h34567 finally meld pair result merging rest h1234567 summary running times time complexities heap data structures function names assume min heap meaning θ big notation