perfect hash function computer science perfect hash function set hash function maps distinct elements set integers collisions mathematical terms injective function perfect hash functions implement lookup table constant worst case access time perfect hash function applications hash functions advantage collision resolution implemented addition keys data keys stored lookup table saving space application perfect hash function values limited range efficient lookup operations placing keys values lookup table indexed output function test key key cell table lookup takes constant time worst case construction perfect hash function specific set evaluated constant time values small range randomized algorithm number operations proportional size original construction fredman komlós szemerédi  level scheme map set elements range indices map range hash values level construction chooses large prime larger size universe drawn parameter maps element mod mod displaystyle kx bmod bmod chosen randomly step collisions number elements simultaneously mapped small level construction assigns disjoint ranges  integers set linear modular functions map member range fredman komlós szemerédi  exists choice parameter sum lengths ranges values additionally exists linear modular function maps subset range level functions polynomial time choosing values randomly finding works hash function requires storage space store level linear modular functions computing hash key performed constant time computing level function applying function modified version level scheme larger number values level construct perfect hash function maps smaller range length space lower bounds store function fredman komlós szemerédi  optimal perfect hash function calculated constant time requires number bits proportional size extensions dynamic perfect hashing perfect hash function situations frequently queried large set seldom updated modification set hash function longer perfect modified set solutions update hash function time set modified dynamic perfect hashing methods complicated implement minimal perfect hash function minimal perfect hash function perfect hash function maps keys consecutive integers numbers    formal expressing elements finite set minimal perfect hash function implies injectivity exists integer range  proven general purpose minimal perfect hash scheme requires   bits key minimal perfect hashing schemes represented   bits key time order preservation minimal perfect hash function order preserving keys order   keys implies case function position key sorted ordering keys simple implementation order preserving minimal perfect hash functions constant access time ordinary perfect hash function cuckoo hashing store lookup table positions key keys hashed stored sorted array store small number additional bits key data structure compute hash values order preserving minimal perfect hash functions require ω log bits represented constructions simple alternative perfect hashing dynamic updates cuckoo hashing scheme maps keys locations range perfect hashing maps key single location keys assigned locations mapped lookups scheme slower multiple locations checked constant worst case time