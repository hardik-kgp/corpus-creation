balancing binary search tree computer science balancing height balanced binary search tree node based binary search tree automatically height maximal number levels root small face arbitrary item insertions deletions structures provide efficient implementations mutable ordered lists abstract data structures associative arrays priority queues sets red black tree type balancing binary search tree called symmetric binary tree renamed confused generic concept balancing binary search tree initials overview operations binary search tree bst time directly proportional height tree desirable height small binary tree height         nodes tree nodes height    displaystyle leq    implies log    log  displaystyle geq lceil log _    rceil geq lfloor log _  rfloor minimum height binary tree nodes log  rounded log  displaystyle lfloor log _  rfloor simplest algorithms bst item insertion yield tree nodes common situations items inserted sorted key order tree degenerates linked list nodes difference performance situations enormous    minimum height log      displaystyle lfloor log _     rfloor  data items ahead time height small average sense adding values random order random binary search tree situations online algorithms randomization viable balancing binary trees solve problem performing transformations tree tree rotations key insertion times order height proportional log  overhead involved justified long ensuring fast execution operations maintain bst minimum height expected log displaystyle log time operations lookup insertion removal additional space requirements required maintain structure tend outweigh decrease search time comparison avl tree guaranteed factor   optimal height requiring additional bits storage naive implementation balanced bst algorithms height constant factor lower bound asymptotic big sense balancing bst structure items lookup insertion removal item log worst case time ordered enumeration items time implementations operation time bounds amortized bounds sequence operations times asymptotically optimal data structures manipulate key comparisons implementations data structures implementing type tree include   tree aa tree avl tree tree red black tree scapegoat tree splay tree treap weight balanced tree applications balancing binary search trees natural construct maintain ordered lists priority queues associative arrays key pairs simply inserted ordering based key capacity balancing bsts number advantages disadvantages main competitor hash tables advantage balancing bsts fast asymptotically optimal enumeration items key order hash tables provide disadvantage lookup algorithms complicated multiple items key balancing bsts worst case lookup performance hash tables log compared worse average case performance log compared  balancing bsts implement algorithm requires mutable ordered lists achieve optimal worst case asymptotic performance binary tree sort implemented balanced bst simple asymptotically optimal log sorting algorithm algorithms computational geometry exploit variations balancing bsts solve problems segment intersection problem point location problem efficiently average case performance balanced bsts efficient solutions binary tree sort slower merge sort quicksort heapsort tree balancing overhead cache access patterns balancing bsts flexible data structures easy extend efficiently record additional perform operations record number nodes subtree property allowing count number nodes key range property log time extensions optimize database queries list processing algorithms