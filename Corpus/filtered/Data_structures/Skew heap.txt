skew heap skew heap adjusting heap heap data structure implemented binary tree skew heaps advantageous ability merge binary heaps contrast binary heaps structural constraints guarantee height tree logarithmic conditions satisfied general heap order enforced operation add remove_min merge skew heaps special skew heap merge skew heap adjusting form leftist heap attempts maintain balance unconditionally swapping nodes merge path merging heaps merge operation adding removing values structural constraints skew heap horribly inefficient amortized complexity analysis demonstrate operations skew heap log fact φ denoting golden ratio exact amortized complexity log φ log definition skew heaps recursive definition heap element skew heap result skew merging skew heaps displaystyle sh_ displaystyle sh_ skew heap operations merging heaps skew heaps merged process merge leftist heaps compare roots heaps heap smaller root heap heap root root smaller root subtree left subtree compute left subtree recursively merging subtree recursive merging alternatively recursive approach wordy require sorting outset split heap subtrees cutting path root node sever node child subtree result set trees root left child children sort subtrees ascending order based root node subtree multiple subtrees iteratively recombine left root subtree left child swap child link root subtree left child subtree adding values adding skew heap merging tree node original tree removing values removing heap accomplished removing root merging child subtrees implementation functional languages skew heaps extremely simple implement complete sample implementation haskell