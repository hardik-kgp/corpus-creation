skip list computer science skip list data structure log displaystyle mathcal log search complexity log displaystyle mathcal log insertion complexity ordered sequence displaystyle elements features array searching maintaining linked list structure insertion array fast search maintaining linked hierarchy subsequences successive subsequence skipping fewer elements previous picture searching starts sparsest subsequence consecutive elements smaller larger equal element searched linked hierarchy elements link elements sparsest subsequence searching continued finally searching sequence elements skipped chosen probabilistically deterministically common description skip list built layers layer ordinary ordered linked list higher layer acts express lane lists element layer displaystyle appears layer displaystyle fixed probability displaystyle commonly values displaystyle displaystyle displaystyle average element appears displaystyle lists tallest element special head element skip list lists skip list log displaystyle log _ logarithm base displaystyle displaystyle lists search target element head element list proceeds horizontally current element greater equal target current element equal target current element greater target search reaches linked list procedure repeated returning previous element dropping vertically lower list expected number steps linked list displaystyle tracing search path backwards target reaching element appears higher list reaching current list total expected cost search log displaystyle tfrac log _ log displaystyle mathcal log displaystyle constant choosing values displaystyle trade search costs storage costs implementation details elements skip list pointer participate list insertions deletions implemented linked list operations tall elements inserted deleted linked list displaystyle mathcal operations force visit node ascending order printing entire list provide opportunity perform scenes derandomization level structure skip list optimal bringing skip list log displaystyle mathcal log search time choose level finite node number times repeatedly divide odd negative infinity header usual special case choosing highest level negative positive infinite nodes higher level nodes delete alternatively level structure quasi random nodes level number nodes level node level odd node level randomly choose promote level promote node promoted promote level repeat repeat derandomized version quasi randomization reason running displaystyle mathcal operation visits node advantage quasi randomness level structure adversarial user randomized desirable adversarial user nodes lowest level pessimize performance simply deleting higher level nodes bethea reiter argue adversary probabilistic timing methods force performance degradation search performance guaranteed logarithmic tempting optimization forget coin flip odd pair flip coin decide promote odd log displaystyle mathcal log coin flips log displaystyle mathcal log adversarial user chance correct guessing numbered nodes level higher higher level property low probability guessing node level integer skip list provide absolute worst case performance guarantees traditional balanced tree data structures low probability coin flips build skip list produce badly balanced structure work practice randomized balancing scheme argued easier implement deterministic balancing schemes balanced binary search trees skip lists parallel computing insertions parts skip list parallel global rebalancing data structure parallelism advantageous resource discovery hoc wireless network randomized skip list robust loss single node indexable skiplist skip list capable fast log displaystyle mathcal log insertion removal values sorted sequence slow displaystyle mathcal lookups values position sequence return th minor modification speed random access indexed lookups improved log displaystyle mathcal log link store width link width defined number layer links traversed higher layer express lane links widths links level level level level head st nd rd th th th th th th th nil node node node node node node node node node node notice width higher level link sum component links width link spans links widths sum widths level skip list traverse skip list counting widths traversed link descend level upcoming width large node position node traverse link width level steps needed width level large drop level traverse link width step width drop level traverse final link width reach target running total function lookupbypositionindex node head count head step level node width level step node width level subtract current width node node level traverse forward current level repeat repeat return node function method implementing indexing detailed linear list operations skip list cookbook william pugh usages list applications frameworks skip lists apache portable runtime implements skip lists apr documentation memsql lock free skip lists prime indexing structure database technology cyrus imap server offers skiplist backend db implementation source file lucene skip lists search delta encoded posting lists logarithmic time qmap qt template class qt dictionary ansi open source persistent key store posix systems skip lists implementation ordered sets nessdb fast key embedded database storage engine log structured merge lsm trees skip lists memtable skipdb open source database format ordered key pairs concurrentskiplistset concurrentskiplistmap api apache hbase speed tables fast key datastore tcl skiplists indexes lockless shared memory leveldb fast key storage library written google ordered mapping string keys string values kolivas muqss scheduler linux kernel skip lists skimap skip lists base data structure build complex sparse grid robot mapping systems iowow persistent c11 key storage library skip lists main data structure skip lists efficient statistical computations running medians moving medians skip lists distributed applications nodes represent physical computers pointers represent network connections implementing highly scalable concurrent priority queues lock contention locking lockless concurrent dictionaries patents skip lists implement lockless priority queues concurrent dictionaries