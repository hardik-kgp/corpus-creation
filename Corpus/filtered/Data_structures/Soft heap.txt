soft heap computer science soft heap variant simple heap data structure constant amortized time types operations achieved carefully corrupting increasing keys number values heap constant time operations create create soft heap insert insert element soft heap meld combine contents soft heaps destroying delete delete element soft heap findmin element minimum key soft heap heaps fibonacci heaps achieve bounds corruption provide constant time bound critical delete operation corruption controlled choice parameter ε lower set time insertions require log ε error rate ε precisely guarantee offered soft heap fixed ε point time ε corrupted keys heap number elements inserted note guarantee fixed percentage keys heap corrupted unlucky sequence insertions deletions happen elements heap corrupted keys guarantee sequence elements extracted heap findmin delete fixed percentage corrupted keys unlucky scenario corrupted elements extracted heap soft heap designed bernard chazelle term corruption structure result chazelle called carpooling soft heap node soft heap linked list keys common key common key upper bound values keys linked list key linked list considered corrupted relevant soft heap operations common keys compared soft heaps soft corrupted purpose corruptions effectively lower entropy data enabling data structure break theoretic barriers heaps applications limitations unpredictable nature soft heaps design deterministic algorithms achieve complexity finding minimum spanning tree easily build optimal selection algorithm sorting algorithms algorithms place element final position situation insertion sort fast simplest examples selection algorithm largest group numbers choose error rate keys insert corrupted insert elements heap original values correct keys values stored heap stored keys point keys corrupted keys stored key larger correct key stored key equals correct key delete minimum element heap times stored key total number insertions corrupted keys heap keys remaining heap corrupted element largest correct key elements removed stored key larger correct key corrupted larger smaller stored keys remaining elements heap removing minimums correct key smaller remaining uncorrupted elements soft heap divides elements partition set partition algorithm quicksort apply algorithm set numbers set numbers greater exceed elements insertion deletion requires amortized time total deterministic time case master theorem divide conquer recurrences ε θ final algorithm function softheapselect return minimum create insert findmin delete xindex partition returns pivot xindex softheapselect xindex softheapselect xindex xindex