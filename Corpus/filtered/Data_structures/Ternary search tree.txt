ternary search tree computer science ternary search tree type trie called prefix tree nodes arranged manner binary search tree children binary tree limit prefix trees ternary search tree associative map structure ability incremental string search ternary search trees space efficient compared standard prefix trees cost speed common applications ternary search trees include spell checking auto completion description node ternary search tree stores single character object pointer object depending implementation pointers children conventionally named equal kid kid kid referred middle child lower child higher child node pointer parent node indicator node marks word kid pointer point node character current node kid pointer point node character greater current node equal kid points character word figure ternary search tree strings cute cup trie data structures node ternary search tree represents prefix stored strings strings middle subtree node start prefix operations insertion inserting ternary search defined recursively lookups defined recursive method continually called nodes tree key progressively shorter pruning characters key method reaches node created creates node assigns character character key node created method checks character string greater character node recursive node lookup operation key character equal node insertion procedure called equal kid key character pruned binary search trees data structures ternary search trees degenerate depending order keys inserting keys alphabetical order attain worst degenerate tree inserting keys random order produces balanced tree search node data node string key needed lookup procedure checking root node tree determining conditions occurred character string character root node recursive lookup called tree root kid current root character greater current node tree recursive tree root kid current node final case character string equal character current node function returns node characters key characters key character key removed recursive equal kid node modified key written recursive pointer current node pointer current character key pseudocode function search string query is_empty query return false var node root var int idx  null query idx splitchar left query idx splitchar idx last_valid_index query return true idx idx  center return false deletion traversal partial match searching neighbor searching running time running time ternary search trees varies input ternary search trees strings strings share common prefix alternatively ternary search trees effective storing large number short strings dictionary running times ternary search trees binary search trees typically logarithmic time linear time degenerate worst case time complexities ternary search tree operations comparison data structures slower prefix trees ternary search trees suited larger data sets space efficiency hash maps hashtables place ternary search trees mapping strings values hash maps frequently memory ternary search trees additionally hash maps typically slower reporting string data structure compare entire string characters evidence ternary search trees running faster hash maps additionally hash maps ternary search trees neighbor lookups dafsas deterministic acyclic finite state automaton storing dictionary required storage auxiliary word required minimal deterministic acyclic finite state automaton dafsa space trie ternary search tree dafsa compress identical branches trie correspond suffixes parts stored ternary search trees solve problems large number strings stored retrieved arbitrary order common anytime trie memory consuming structure preferred quick space saving data structure mapping strings data implement auto completion spell check neighbor searching spell checking special case database indexing key fields desirable place hash table