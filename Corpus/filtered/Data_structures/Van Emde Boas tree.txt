van emde boas tree van emde boas tree dutch pronunciation vɑn ɛmdə boːɑs veb tree van emde boas priority queue tree data structure implements associative array bit integer keys performs operations log time equivalently log log time  maximum number elements stored tree confused actual number elements stored tree performance tree data structures measured veb tree good space efficiency elements discussed invented team led dutch computer scientist peter van emde boas  supported operations veb supports operations ordered associative array includes usual associative array operations order operations findnext findprevious insert insert key pair bit key delete remove key pair key lookup key findnext key pair smallest key greater findprevious key pair largest key smaller veb tree supports operations minimum maximum return minimum maximum element stored tree  time minimum maximum element stored attributes tree works sake simplicity log  integer define  veb tree universe   root node stores array children length children pointer veb tree responsible values   additionally stores values min max auxiliary veb tree aux data stored veb tree smallest tree stored min largest stored max note min stored veb tree max convention max  min stored subtree children auxiliary tree aux track children aux children findnext operation findnext searches successor element veb tree proceeds min search complete answer min max element exist return children max searched contained children search proceeds recursively children search aux subtree element larger algorithm returns children min element children level composed high bits form complete element function findnext min return min max element return floor mod findnext aux children max return findnext children return children findnext aux min note case algorithm performs  work recurses subtree universe size    bit universe recurrence running time   displaystyle   resolves log log log insert insert inserts veb tree operates set min max min insert min subtree responsible min set min children insert aux max insert subtree responsible set max children insert aux min max insert subtree responsible children insert aux code function insert min max min max return min swap min max max floor mod insert children children min children max insert aux key efficiency procedure inserting element veb tree takes  time algorithm recursive calls occurs recursive subtree running time recurrence   displaystyle   delete deletion veb trees trickiest operations delete deletes veb tree operates min max element stored tree set min max  tree min smallest veb tree delete current location set min smallest children aux min min  time delete subtree min max delete subtree children max largest veb tree set max start deleting previous case min children aux max max  time cases delete element subtree children delete aux code function delete min max min max  return min aux min aux min min children min floor mod delete children children delete aux max aux max min aux max aux max max children max efficiency procedure hinges fact deleting veb tree element takes constant time code executes element children prior deletion discussion assumption log integer unnecessary operations mod replaced higher order  lower order  bits existing machine efficient division remainder computations implementation pointers occupies total space  recurrence  displaystyle sqrt sqrt  cdot sqrt resolving lead  log log log log displaystyle  sqrt log log log log cdot sqrt fortunately  induction practical implementations machines shift instructions performance improved switching bit array equal word size small multiple reached operations single word constant time affect asymptotic performance avoid majority pointer storage pointer dereferences achieving practical savings time space trick obvious optimization veb trees discard subtrees veb trees compact elements subtrees created initially element creates log trees  pointers tree grows subtrees reused larger tree  elements  space binary search tree space store data billions elements pointers veb tree number thousands small trees overhead veb trees enormous order reason popular practice addressing limitation fixed number bits level trie alternatively table replaced hash table reducing space log number elements stored data structure expense making data structure randomized structures including fast fast proposed comparable update query times randomized hash tables reduce space log