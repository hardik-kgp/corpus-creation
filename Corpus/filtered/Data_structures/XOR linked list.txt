xor linked list xor linked list type data structure computer programming takes advantage bitwise xor operation decrease storage requirements doubly linked lists description ordinary doubly linked list stores addresses previous list items list node requiring address fields prev prev prev xor linked list compresses address field storing bitwise xor denoted address previous address field formally link addr addr link addr addr traversing list left supposing cursor previous item xored link field address list traversal resume pattern applies direction addr link addr link addr addr addr addr addr addr addr addr addr addr addr addr addr addr xor operation cancels addr appearing equation left addr start traversing list direction point address consecutive items required addresses consecutive items reversed list traversal occur opposite direction theory operation key operation properties xor register xor address current item address predecessor item link fields records xor left successor addresses xor current link field yields predecessor cancel leaving predecessor cancel leaving case result xor current address address xor current address r1 leaves address left requisite xor pair current address predecessor features xor operations suffice traversal item instructions sufficing cases list items r1 registers address current list item work register xor current address previous address cast instructions link link link field current record xr r1 r1 voil√† record list signified imagining list item address adjacent point link field additional instruction needed sequence xor operations detect result developing address current item list point reflective making link pointer pointer mirror xor left neighbor addresses drawbacks general purpose debugging tools follow xor chain making debugging difficult price decrease memory usage increase code complexity making maintenance expensive garbage collection schemes work data structures literal pointers languages support type conversion pointers integers xor pointers defined contexts traversing list address accessed node needed calculate node address pointers unreadable traversing list pointer list item contained data structure xor linked lists provide advantages doubly linked lists ability delete node list knowing address ability insert node existing node knowing address existing node computer systems increasingly cheap plentiful memory storage overhead generally overriding issue specialized embedded systems desirable reduce overhead linked list unrolling practical approach advantages increasing cache performance speeding random access variations underlying principle xor linked list applied reversible binary operation replacing xor addition subtraction equivalent formulations addition linked list kind list properties xor linked list link field mirror address node list subtracting previous node address current node link field subtraction linked list kind list differs standard traditional xor linked list instruction sequences needed traverse list forwards sequence needed traverse list reverse address node forwards adding link field previous node address address preceding node subtracting link field node address subtraction linked list special entire list relocated memory needing patching pointer values adding constant offset address list require values stored link fields serialization advantage xor linked lists traditional linked lists