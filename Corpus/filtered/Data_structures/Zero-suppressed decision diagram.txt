suppressed decision diagram suppressed decision diagram zsdd zdd type binary decision diagram bdd based reduction rule devised shin ichi minato data structure brings unique compact representation sets appearing combinatorial problems modified reduction rule node elimination zdd distinguishes bdd ensuring canonicity representation sets canonical conditions object representation kind node bdds removed decision tree edges point node node zdds removed positive edge points constant node modifications reduction rule improve performance dealing sparse sets background binary decision diagram boolean function represented rooted directed acyclic graph consists decision nodes terminal nodes shin ichi minato japan modified randal bryant bdds solving combinatorial problems suppressed bdds aim represent manipulate sparse sets bit vectors data problem represented bit vectors length subset vectors represented boolean function variables yielding vector variable assignment set bryant forms logic functions express problems involving sum products forms represented sets cubes denoted string symbols instance function displaystyle bar _ land x_ lor bar _ bigoplus x_ illustrated set displaystyle bits denote symbols represent set bit vectors form displaystyle notice set bit vectors sparse number vectors fewer maximum number bit vectors set elements equal case node setting node variable function yield condition bit position implies vector set sparse sets condition common node eliminations minato proved zdds suitable combinatorial problems classical problems level logic minimization knight tour problem fault simulation timing analysis queens problem weak division zdds reduce size representation set bit vectors obdds factor practice optimization statistically definitions define suppressed decision diagram zdd directed acyclic graph terminal node special node true node special node false node nonterminal node satisfies conditions node labelled positive integer label unique node degree outgoing edges named diagrams draw dotted lines edges solid lines edges destination node terminal labelled integer strictly larger omit arrowheads diagrams edge directions inferred form labels edge points node node degree root node root node terminal labelled smallest integer diagram nodes label edges point nodes redundant nodes unreduced zdd edge points node condition fails hold computer programs boolean functions expressed bits node node represented definition represent combination sets efficiently applying rules bdds eliminate nodes edge points terminal node connect edge subgraph directly figure share equivalent graphs original bdds number order input variables fixed suppressed bdd represents boolean function uniquely proved figure bdd represent boolean binary tree representing family sets zdd root node nodes represents ø family nodes represents family set ø unit family denote children v0 node v1 node family represented zdd rooted vi proof induction represents family α α displaystyle f_ cup bigcup _ alpha f_ alpha cup represent branch sets α α α displaystyle f_ alpha alpha notin alpha branch sets α α α displaystyle f_ alpha backslash alpha alpha figure family displaystyle emptyset cup emptyset cup displaystyle e_ elementary family elementary families consist form displaystyle denoted displaystyle e_ figure family displaystyle emptyset cup emptyset cup emptyset figure family displaystyle cup emptyset cup figure family displaystyle cup features feature zdds form depend number input variables long combination sets unnecessary number input variables generating graphs zdds automatically suppress variables objects combination efficiency manipulating sparse combinations advantage zdds number paths graph equal number elements combination set original bdds node elimination breaks property zdds simple bdds represent combination sets original bdds representing ordinary boolean functions figure basic operations basic operations zdds original bdds refer figure examples generated table returns ø set base returns subset1 var returns subset var subset0 var returns subset var change var returns var inverted union returns displaystyle cup intsec returns displaystyle cap diff returns displaystyle count returns displaystyle left vert vert number elements zdds operation essential operation original bdds reason complement set displaystyle bar computed defining universal set displaystyle zdds displaystyle bar computed diff algorithms suppose displaystyle left vert vert left vert p_ vert left vert p_ vert recursively compute number sets zdd enabling th set member family random access fast operation array sets efficiency zdd minato operations zdds executed recursively original bdds algorithms simply define procedure getnode p0 returns node variable subgraphs p0 hash table called uniq table node unique node elimination sharing managed getnode getnode p0 ø return p0 node elimination search node p0 uniq table exist return node sharing generate node p0 append uniq table return getnode represent basic operations subset1 var var return ø var return var return getnode subset1 p0 var subset1 var subset0 var var return ø var return p0 var return getnode subset0 p0 var subset0 var change var var return getnode var ø var return getnode var p0 var return getnode change p0 var change var union ø return ø return return return getnode union p0 return getnode union q0 q1 return getnode union p0 q0 union q1 intsec ø return ø ø return ø return return intsec p0 return intsec q0 return getnode intsec p0 q0 intsec q1 diff ø return ø ø return return ø return getnode diff p0 return diff q0 return getnode diff p0 q0 diff q1 count ø return ø return return count p0 count algorithms exponential time number variables worst case improve performance cache memorizes operations fashion bdds cache prevents duplicate executions equivalent graphs duplicates algorithms operate time proportional size graphs figure application zdds dictionaries zdds represent letter english set size stanford graphbase instance function displaystyle x_ x_ defined numbers displaystyle x_ x_ _ displaystyle x_ x_ _ displaystyle x_ x_ _ encode letters english word displaystyle _ displaystyle _ displaystyle x_ x_ function variables nodes bad representing compared binary trees hash tables zdd complete simple searches efficient retrieving data partially data supposed match key complex queries handled ease zdds involve variables fact zdd represent letter sparse function displaystyle a_ z_ a_ z_ a_ z_ variables variable displaystyle a_ determines letter represent word crazy true displaystyle c_ r_ a_ z_ y_ variables considered family consisting subsets displaystyle w_ h_ i_ c_ h_ variables zdd size fact knuth equivalent size bdd larger spite theories algorithms zdds outperform bdds problem large margin zdds perform queries onerous bdds complex families subset constructed elementary families search pattern family algebra zdds compute displaystyle sqcup pattern displaystyle a_ sqcup h_ sqcup e_ zdds represent simple paths zdds represent simple paths undirected graph ways upper left corner grid figure lower corner visiting point paths represented zdd figure zdd path branches node node node node89 zdd branches simply zdd figure advantages zdd obvious grid larger grid number simple paths corner corner turns knuth paths illustrated nodes zdd real simple paths proposed randal bryant suppose wanted driving tour continental visiting state capitols passing state route minimize total distance figure undirected graph roadmap numbers indicating shortest distances neighboring capital cities problem choose subset edges form hamiltonian path smallest total length hamiltonian path graph start augusta maine suppose starts zdd characterizes paths knuth zdd turns nodes effectively simple paths number edges generating function displaystyle z z z z z longest paths hamiltonian size zdds case efficient simple paths hamiltonian paths queens problem define input variables represent squares chess board variable denotes presence absence queen square column variable row variable diagonal variable solve problem constructing obdds efficient zdds constructing zdd queens problem requires steps s1 s8 step defined s1 represents choices putting queen row represents choices putting queen row violate queen s3 represents choices putting queen row violate previous queens s8 represents choices putting queen eighth row violate previous queens zdd s8 consists potential solutions queens problem problem caching improve performance algorithm cache avoid duplicates improve queens problems times faster basic operations defined figure knight tour problem knight tour problem historical significance knight graph vertices depict squares chessboard edges illustrate legal moves knight knight visit square board olaf schröer löbbing ingo wegener approached problem board assigning boolean variables edge graph total variables designate edges solution problem expressed bit combination vector minato construction zdd solutions large solve directly easier divide conquer dividing problems parts board constructing zdds subspaces solve knight tour problem solution edges graph sparse advantage zdds obvious fault simulation takahashi suggested fault simulation method multiple faults obdds deductive method transmits fault sets primary inputs primary outputs captures faults primary outputs method involves unate cube set expressions zdds efficient optimizations zdds unate cube set calculations zdds developing vlsi cad systems myriad applications packages cudd bdd package written implements bdds zbdds university colorado boulder jdd library implements common bdd zbdd operations graphillion zdd software implementation based python cweb zdd implementation donald knuth