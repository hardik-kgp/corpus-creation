adjacency list graph theory computer science adjacency list collection unordered lists represent finite graph list describes set neighbors vertex graph commonly representations graphs computer programs implementation details adjacency list representation graph associates vertex graph collection neighboring vertices edges variations basic idea differing details implement association vertices collections implement collections include vertices edges vertices class objects kinds objects represent vertices edges implementation suggested guido van rossum hash table associate vertex graph array adjacent vertices representation vertex represented hashable object explicit representation edges objects cormen implementation vertices represented numbers representation array indexed vertex number array cell vertex points singly linked list neighboring vertices vertex representation nodes singly linked list interpreted edge objects store edge store endpoints edge undirected graphs linked list nodes edge lists endpoints edge object oriented incidence list structure suggested goodrich tamassia special classes vertex objects edge objects vertex object instance variable pointing collection object lists neighboring edge objects turn edge object points vertex objects endpoints version adjacency list memory version adjacent vertices listed directly existence explicit edge objects extra flexibility storing additional edges operations main operation performed adjacency list data structure report list neighbors vertex implementations detailed performed constant time neighbor total time report neighbors vertex proportional degree efficient adjacency lists test edge exists exist vertices adjacency list neighbors vertex unsorted testing existence edge performed time proportional minimum degree vertices sequential search neighbors vertex neighbors represented sorted array binary search time proportional logarithm degree trade offs main alternative adjacency list adjacency matrix matrix rows columns indexed vertices cells boolean edge vertices row column cell sparse graph pairs vertices connected edges adjacency list space efficient adjacency matrix stored array space usage adjacency list proportional number edges vertices graph adjacency matrix stored space proportional square number vertices store adjacency matrices space efficiently matching linear space usage adjacency list hash table indexed pairs vertices array difference adjacency lists adjacency matrices efficiency operations perform adjacency list neighbors vertex listed efficiently time proportional degree vertex adjacency matrix operation takes time proportional number vertices graph higher degree hand adjacency matrix testing vertices adjacent constant time adjacency list slower support operation data structures data structure main alternative adjacency list adjacency matrix entry adjacency matrix requires bit represented compact occupying   bytes contiguous space number vertices graph avoiding wasted space compactness encourages locality reference sparse graph adjacency lists require space waste space represent edges na√Øve array implementation  bit computer adjacency list undirected graph requires     bytes space number edges graph noting undirected simple graph    edges allowing loops  denote density graph       adjacency list representation occupies space adjacency matrix representation   graph sparse justify adjacency list representation space trade data structures facilitate operations finding vertices adjacent vertex adjacency list simple reading list adjacency matrix entire row scanned takes time edge vertices determined adjacency matrix requiring time proportional minimum degree vertices adjacency list