directed acyclic graphs mathematics graph theory computer science directed acyclic graph dag listen finite directed graph directed cycles consists finitely vertices edges called arcs edge directed vertex start vertex follow consistently directed sequence edges eventually loops equivalently dag directed graph topological ordering sequence vertices edge directed earlier sequence dags model kinds spreadsheet modeled dag vertex cell edge formula cell topological ordering dag update cell values spreadsheet changed topological orderings dags order compilation operations makefile program evaluation review technique pert dags model milestones activities large human projects schedule projects total time combinational logic blocks electronic circuit design operations dataflow programming languages involve acyclic networks processing elements dags represent collections events influence probabilistic structure bayesian network record historical data family trees version histories distributed revision control systems dags compact representation sequence data directed acyclic word graph representation collection strings binary decision diagram representation sequences binary choices abstractly reachability relation dag forms partial order finite partial order represented dag reachability polynomial time computational problems dags include topological sorting computing topological ordering construction transitive closure transitive reduction largest smallest dags reachability relation sets closure problem goal minimum weight subset vertices edges connecting rest graph transforming directed graph cycles dag deleting vertices edges feedback vertex set feedback edge set problem np hard problem directed graph dag condensation contracting connected component single supervertex problems finding shortest paths longest paths solved dags linear time contrast arbitrary graphs shortest path algorithms slower longest path problems np hard concept undirected graphs forest undirected graph cycles choosing orientation forest produces special kind directed acyclic graph called polytree kinds directed acyclic graph formed orienting edges undirected acyclic graph undirected graph acyclic orientation assignment direction edges directed acyclic graph emphasize dags thing directed versions undirected acyclic graphs authors acyclic directed graphs acyclic digraphs definitions graph formed collection vertices edges vertices structureless objects connected pairs edges case directed graph edge orientation vertex vertex path directed graph sequence edges property vertex edge sequence starting vertex edge sequence path forms cycle starting vertex edge equals vertex edge directed acyclic graph directed graph cycles vertex directed graph reachable vertex exists path starts ends special case vertex considered reachable path edges vertex reach nontrivial path path edges path cycle define directed acyclic graphs graphs vertex reach nontrivial path topological ordering directed graph ordering vertices sequence edge start vertex edge occurs earlier sequence vertex edge graph topological ordering cycles edge earliest vertex cycle oriented wrong graph topological ordering acyclic conversely directed acyclic graph topological ordering property alternative definition directed acyclic graphs graphs topological orderings mathematical properties reachability transitive closure transitive reduction reachability relationship directed acyclic graph formalized partial order vertices dag partial order vertices ordered exists directed path dag reachable dags rise reachability relation partial order dag edges reachability relation graph edges dags produce partial order vertices ordered dag transitive closure graph edges represents reachability relation edge reach edge pair distinct elements reachability relation thought direct translation reachability relation graph theoretic terms method translating partial orders dags works generally finite partially ordered set graph vertex member edge pair elements automatically transitively closed dag reachability relation finite partially ordered set represented reachability relation dag transitive reduction dag graph fewest edges represents reachability relation subgraph formed discarding edges longer path connecting vertices transitive closure transitive reduction uniquely defined dags contrast directed graph acyclic minimal subgraph reachability relation dag reachability relation partial order transitive reduction subgraph edge pair covering relation transitive reductions visualizing partial orders represent fewer edges graphs representing orders lead simpler graph drawings hasse diagram partial order drawing transitive reduction orientation edge placing starting vertex edge lower position vertex topological ordering directed acyclic graph topological ordering ordering vertices starting endpoint edge occurs earlier ordering endpoint edge existence ordering characterize dags directed graph dag topological ordering general ordering unique dag unique topological ordering directed path vertices case ordering order vertices path family topological orderings dag family linear extensions reachability relation dag graphs representing partial order set topological orders combinatorial enumeration graph enumeration problem counting directed acyclic graphs studied robinson number dags labeled vertices restrictions order numbers topological ordering dag sequence a003024 oeis numbers computed recurrence relation displaystyle a_ sum _ choose a_ eric weisstein conjectured mckay proved numbers count matrices eigenvalues positive real numbers proof bijective matrix adjacency matrix dag matrix eigenvalues positive denotes identity matrix dag loops adjacency matrix diagonal adding preserves property matrix coefficients families graphs polytree directed graph formed orienting edges free tree polytree dag true arborescences formed directing edges outwards roots tree multitree called unambiguous graph mangrove directed graph directed path direction vertices equivalently dag vertex subgraph reachable forms tree computational problems topological sorting recognition topological sorting algorithmic problem finding topological ordering dag solved linear time kahn algorithm topological sorting builds vertex ordering directly maintains list vertices incoming edges vertices included partially constructed topological ordering initially list consists vertices incoming edges repeatedly adds vertex list partially constructed topological ordering checks neighbors list algorithm terminates vertices processed alternatively topological ordering constructed reversing postorder numbering depth search graph traversal check directed graph dag linear time attempting topological ordering testing edge ordering valid alternatively topological sorting algorithms verifying algorithm orders vertices meeting error condition construction cyclic graphs undirected graph dag choosing total order vertices directing edge earlier endpoint order endpoint orientation edges called acyclic orientation total orders lead acyclic orientation vertex graph fewer acyclic orientations number acyclic orientations equal χ χ chromatic polynomial graph directed graph dag removing feedback vertex set feedback arc set set vertices edges touches cycles smallest set np hard arbitrary directed graph transformed dag called condensation contracting connected components single supervertex graph acyclic smallest feedback vertex sets feedback arc sets condensation graph transitive closure transitive reduction transitive closure dag vertices edges constructed time breadth search depth search test reachability vertex alternatively solved time ω ω exponent fast matrix multiplication algorithms theoretical improvement bound dense graphs transitive closure algorithms distinguish pairs vertices reachable path length pairs connected length path transitive reduction consists edges form length paths paths connecting endpoints transitive reduction constructed asymptotic time bounds transitive closure closure problem closure problem takes input directed acyclic graph weights vertices seeks minimum maximum weight closure set vertices outgoing edges problem formulated directed graphs assumption acyclicity greater generality case equivalent problem condensation graph solved polynomial time reduction maximum flow problem path algorithms algorithms simpler dags general graphs based principle topological ordering shortest paths longest paths starting vertex dags linear time processing vertices topological order calculating path length vertex minimum maximum length incoming edges contrast arbitrary graphs shortest path require slower algorithms dijkstra algorithm bellman ford algorithm longest paths arbitrary graphs np hard applications scheduling directed acyclic graphs representations partial orderings applications scheduling systems tasks ordering constraints class problems type concern collections objects updated cells spreadsheet cells changed object files piece computer software source code changed context dependency graph graph vertex object updated edge connecting objects updated earlier cycle graph called circular dependency generally allowed consistently schedule tasks involved cycle dependency graphs circular dependencies form dags instance cell spreadsheet recalculate values cells depend directly indirectly changed cell problem tasks scheduled recalculations values individual cells spreadsheet dependencies expression cell cell case recalculated earlier expression topologically ordering dependency graph topological order schedule cell updates spreadsheet updated single evaluation cell problems task ordering makefiles program compilation instruction scheduling low level computer program optimization dag based formulation scheduling constraints program evaluation review technique pert method management large human projects applications dags method vertices dag represent milestones project specific tasks performed task activity represented edge dag connecting milestones mark completion task edge labeled estimate time team workers perform task longest path dag represents critical path project controls total time project individual milestones scheduled lengths longest paths vertices data processing networks directed acyclic graph represent network processing elements representation data enters processing element incoming edges leaves element outgoing edges instance electronic circuit design static combinational logic blocks represented acyclic logic gates computes function input input output function represented individual bits general output blocks input captured register state element maintains acyclic properties electronic circuit schematics paper database form directed acyclic graphs instances components form directed reference lower level component electronic circuits acyclic directed dataflow programming languages systems operations data streams connections outputs operations inputs languages convenient describing repetitive data processing tasks acyclically connected collection operations applied data items executed parallel algorithm operation performed parallel process set inputs compilers straight code sequences statements loops conditional branches represented dag describing inputs outputs arithmetic operations performed code representation compiler perform common subexpression elimination efficiently higher level code organization acyclic dependencies principle states dependencies modules components large software form directed acyclic graph causal structures graphs vertices represent events occurring definite time edges point early time vertex late time vertex edge directed acyclic lack cycle time vertex increases follow path graph return vertex path reflects natural intuition causality events affect future affect causal loops type directed acyclic graph encountered causal set approach quantum gravity case graphs considered transitively complete version history version software unique time typically time version saved committed released citation graphs documents published time refer older documents events specific physical time provided pairs events purely causal relationship edges represent causal relations events directed acyclic graph instance bayesian network represents probabilistic events vertices directed acyclic graph likelihood event calculated likelihoods predecessors dag context moral graph dag undirected graph created adding undirected edge parents vertex called marrying replacing directed edges undirected edges type graph causal structure influence diagram vertices represent decisions unknown edges represent causal influences vertex epidemiology instance diagrams estimate expected choices intervention converse true application represented directed acyclic graph causal structure explicit order time order derived graph structure directed acyclic graphs topological ordering vertices order edges point direction order genealogy version history family trees directed acyclic graphs vertex family member edge parent child relationship graphs trees possibility marriages relatives child common ancestor mother father causing pedigree collapse graphs matrilineal descent mother relationships women patrilineal descent father relationships men trees graph ancestor family trees acyclic reason version history distributed revision control generally structure directed acyclic graph vertex revision edge connecting pairs revisions directly derived trees general merges randomized algorithms computational geometry algorithm maintains history dag representing version history geometric structure sequence structure instance randomized incremental algorithm delaunay triangulation triangulation replacing triangle smaller triangles point flip operations replace pairs triangles pair triangles history dag algorithm vertex triangle constructed algorithm edges triangle triangles replace structure point location queries answered efficiently location query point delaunay triangulation follow path history dag step moving replacement triangle final triangle reached path delaunay triangle citation graphs citation graph vertices documents single publication edges represent citations bibliography document earlier documents classic citations academic papers pointed article networks scientific papers derek solla price case citation count paper degree vertex citation network measure citation analysis court judgements provide judges support conclusions case recalling earlier decisions previous cases final provided patents refer earlier prior art earlier patents relevant current patent claim special properties directed acyclic graphs account analyse graphs techniques analysing general graphs considered studies network analysis instance transitive reduction insights citation distributions applications highlighting clear differences mechanisms creating citations networks contexts technique main path analysis traces citation links suggests citation chains citation graph data compression directed acyclic graphs compact representation collection sequences type application finds dag paths form sequences sequences share subsequences shared subsequences represented shared dag allowing representation space list sequences separately directed acyclic word graph data structure computer science formed directed acyclic graph single source edges labeled letters symbols paths source sinks graph represent set strings english set sequences represented paths tree forming tree vertex prefix sequence making parent vertices represent sequence fewer element tree formed set strings called trie directed acyclic word graph saves space trie allowing paths diverge rejoin set suffixes represented single tree vertex idea dag represent family paths occurs binary decision diagram dag based data structure representing binary functions binary decision diagram sink vertex labeled binary variable sink edge labeled function truth assignment variables sink path starting single source vertex sink vertex outgoing edge labeled vertex variable directed acyclic word graphs viewed compressed form binary decision diagrams viewed compressed forms decision trees save space allowing paths rejoin agree remaining decisions