iterative deepening depth search computer science iterative deepening search iterative deepening depth search ids iddfs state space graph search strategy depth limited version depth search repeatedly increasing depth limits goal iddfs optimal breadth search memory iteration visits nodes search tree order depth search cumulative order nodes visited effectively breadth algorithm directed graphs pseudocode iddfs implemented terms recursive depth limited dfs called dls directed graphs implementation iddfs account visited nodes work undirected graphs function iddfs root depth remaining dls root depth null return remaining return null function dls node depth depth node goal return node true return null true children depth any_remaining false foreach child node remaining dls child depth null return true remaining any_remaining true node depth iddfs deepen return null any_remaining goal node dls unwinds recursion returning iterations node exists level depth remaining flag iddfs continue tuples return signal iddfs continue deepening case tree depth goal membership unknown priori solution sentinel values represent remaining level properties iddfs combines depth search space efficiency breadth search completeness branching factor finite solution exists solution path fewest arcs iterative deepening visits states multiple times wasteful turns costly tree nodes level matter upper levels visited multiple times main advantage iddfs game tree searching earlier searches tend improve commonly heuristics killer heuristic alpha beta pruning accurate estimate score nodes final depth search occur search completes order alpha beta pruning efficient searches moves advantage responsiveness algorithm early iterations small values displaystyle execute extremely algorithm supply early indications result refinements displaystyle increases interactive setting chess playing program facility program play time current search completed phrased depth search recursively producing approximation solution work step recursive traditional depth search produce intermediate asymptotic analysis time complexity time complexity iddfs balanced tree works breadth search displaystyle displaystyle branching factor displaystyle depth goal proof iterative deepening search nodes depth displaystyle expanded depth displaystyle expanded root search tree expanded displaystyle times total number expansions iterative deepening search displaystyle b cdots db sum _ displaystyle number expansions depth displaystyle displaystyle b number expansions depth displaystyle factoring displaystyle displaystyle b cdots db displaystyle frac displaystyle x x cdots infinite series displaystyle x x x cdots left sum _ infty nx converges displaystyle frac displaystyle abs displaystyle x x cdots leq displaystyle abs displaystyle displaystyle left frac constant independent displaystyle depth displaystyle branching factor greater running time depth iterative deepening search displaystyle displaystyle displaystyle number displaystyle sum _ iterative deepening search depth displaystyle depth displaystyle expands displaystyle nodes single breadth depth limited search depth displaystyle displaystyle higher branching factor lower overhead repeatedly expanded states branching factor iterative deepening search takes long complete breadth search time complexity iterative deepening displaystyle space complexity space complexity iddfs displaystyle displaystyle depth goal proof iddfs point engaged depth search store stack nodes represents branch tree expanding finds solution optimal length maximum depth stack displaystyle maximum space displaystyle general iterative deepening preferred search method large search space depth solution graph depth search starting assuming left edges graph chosen edges assuming search remembers visited nodes repeat small graph visit nodes order edges traversed search form trémaux tree structure applications graph theory performing search remembering visited nodes visiting nodes order forever caught cycle reaching iterative deepening prevents loop reach nodes depths assuming proceeds left iterative deepening conventional depth search sees sees path loops graph depth cycles abfe aefb simply longer algorithm branch algorithms iterative deepening search strategy called iterative lengthening search works increasing path cost limits depth limits expands nodes order increasing path cost goal encounters cheapest path cost iterative lengthening incurs substantial overhead iterative deepening iterative deepening search performs iterative deepening based values computed algorithm bidirectional iddfs iddfs bidirectional counterpart alternates searches starting source node moving directed arcs starting target node proceeding directed arcs opposite direction arc head node arc tail node search process checks source node target node returns trivial path consisting single source target node forward search process expands child nodes source node set displaystyle backward search process expands parent nodes target node set displaystyle checked displaystyle displaystyle intersect shortest path search depth incremented computation takes place limitation algorithm shortest path consisting odd number arcs detected suppose shortest path displaystyle langle rangle depth reach hops arcs forward search proceed displaystyle displaystyle backward search proceed displaystyle displaystyle pictorially search frontiers suboptimal path consisting number arcs returned illustrated diagrams space complexity algorithm colors deepest nodes forward search process order detect existing middle node search processes meet additional difficulty applying bidirectional iddfs source target nodes connected components displaystyle arc leaving displaystyle entering displaystyle search terminate time space complexities running time bidirectional iddfs displaystyle sum _ space complexity displaystyle displaystyle number nodes shortest displaystyle path running time complexity iterative deepening depth search displaystyle sum _ speedup roughly θ θ displaystyle frac sum _ sum _ frac frac frac frac frac approx frac b theta theta sqrt pseudocode function build path μ π shortest path μ recursively compute path relay node remove node π return π displaystyle circ append backward search stack function depth limited search forward δ δ displaystyle cup mark node return foreach child depth limited search forward child δ function depth limited search backward δ prepend δ return reached marked node relay node remove node return null foreach parent μ depth limited search backward parent δ μ displaystyle neq null return μ remove node return null function shortest path return δ forever depth limited search forward δ foreach δ δ δ μ depth limited search backward δ μ displaystyle neq null return build path μ relay node δ δ