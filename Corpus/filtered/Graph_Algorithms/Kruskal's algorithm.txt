kruskal algorithm kruskal algorithm minimum spanning tree algorithm finds edge weight connects trees forest greedy algorithm graph theory finds minimum spanning tree connected weighted graph adding increasing cost arcs step finds subset edges forms tree includes vertex total weight edges tree minimized graph connected finds minimum spanning forest minimum spanning tree connected component algorithm appeared proceedings american mathematical society    written joseph kruskal algorithms problem include prim algorithm reverse delete algorithm borůvka algorithm algorithm create forest set trees vertex graph separate tree create set edges graph nonempty spanning remove edge minimum weight removed edge connects trees add forest combining trees single tree termination algorithm forest forms minimum spanning forest graph graph connected forest single component forms minimum spanning tree pseudocode code implemented disjoint set data structure kruskal   foreach  set  foreach ordered weight increasing  set set   union set set  return complexity kruskal algorithm log time equivalently log time number edges graph number vertices simple data structures running times equivalent  displaystyle  log   log displaystyle log   log log displaystyle log isolated vertex separate component minimum spanning forest ignore isolated vertices  log log displaystyle log achieve bound sort edges weight comparison sort log time step remove edge minimum weight operate constant time disjoint set data structure track vertices components perform operations iteration connect vertex spanning tree operations union edge simple disjoint set data structure disjoint set forests union rank perform operations log time total time log log provided edges sorted sorted linear time counting sort radix sort algorithm sophisticated disjoint set data structure α time α extremely slowly growing inverse single valued ackermann function proof correctness proof consists parts proved algorithm produces spanning tree proved constructed spanning tree minimal weight spanning tree displaystyle connected weighted graph displaystyle subgraph displaystyle produced algorithm displaystyle cycle subtree trees displaystyle disconnected encountered edge joins components displaystyle algorithm displaystyle spanning tree displaystyle minimality proposition true induction set edges chosen stage algorithm minimum spanning tree true minimum spanning tree exists weighted connected graph minimum spanning tree assume true final edge set minimum spanning tree chosen edge true cycle cycle edges belong form cycle edge displaystyle cup note belongs considered algorithm weight large tree weight minimum spanning tree holds principle induction holds spanning tree minimum spanning tree parallel algorithm kruskal algorithm inherently sequential hard parallelize perform initial sorting edges parallel alternatively parallel implementation binary heap extract minimum weight edge iteration parallel sorting time displaystyle log displaystyle log processors runtime kruskal algorithm reduced α α inverse single valued ackermann function variant kruskal algorithm named filter kruskal osipov suited parallelization basic idea filter kruskal partition edges quicksort filter edges connect vertices tree reduce cost sorting pseudocode demonstrates filter kruskal  kruskalthreshhold  return kruskal  pivot choose random  displaystyle e_ displaystyle e_ partition pivot  filter kruskal displaystyle e_  displaystyle e_ filter displaystyle e_  filter kruskal displaystyle e_  return partition pivot  displaystyle e_ displaystyle e_  foreach  weight pivot  displaystyle e_ displaystyle e_   displaystyle e_ displaystyle e_  return displaystyle e_ displaystyle e_ filter  displaystyle e_ filtered  foreach  set set  displaystyle e_ filtered displaystyle e_ filtered  return displaystyle e_ filtered filter kruskal lends parallelization sorting filtering partitioning easily performed parallel distributing edges processors finally variants parallel implementation kruskal algorithm explored examples include scheme helper threads remove edges mst background variant runs sequential algorithm subgraphs merges subgraphs final mst remains