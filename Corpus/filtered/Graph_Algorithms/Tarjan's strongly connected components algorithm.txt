tarjan connected components algorithm tarjan algorithm algorithm graph theory finding connected components directed graph runs linear time matching time bound alternative methods including kosaraju algorithm path based strong component algorithm tarjan algorithm named inventor robert tarjan overview algorithm takes directed graph input produces partition graph vertices graph connected components vertex graph appears connected components vertex directed cycle forms connected component vertex degree degree vertex acyclic graph basic idea algorithm depth search arbitrary start node subsequent depth searches conducted nodes usual depth search search visits node graph declining revisit node visited collection search trees spanning forest graph connected components recovered subtrees forest roots subtrees called roots connected components node connected component serve root node component discovered search stack invariant nodes stack order visited depth search recursively visits node descendants nodes popped stack recursive returns crucial invariant property node remains stack visited exists path input graph node earlier stack visits descendants path node earlier stack returns leaving stack preserve invariant root connected component consists nodes stack nodes paths earlier node paths earlier nodes paths earlier nodes false connected component rooted popped stack returned preserving invariant bookkeeping node assigned unique integer numbers nodes consecutively order discovered maintains lowlink represents smallest node reachable dfs subtree including left stack lowlink removed root connected component lowlink lowlink computed depth search finds nodes reachable algorithm pseudocode algorithm tarjan input graph output set connected components sets vertices stack undefined strongconnect function strongconnect set depth smallest unused lowlink push onstack true successors undefined successor visited recurse strongconnect lowlink min lowlink lowlink onstack successor stack current scc stack cross edge dfs tree note odd correct lowlink deliberate original paper lowlink min lowlink root node pop stack generate scc lowlink start connected component repeat pop onstack false add current connected component output current connected component function variable depth search node number counter node stack starts stores history nodes explored committed connected component note normal depth search stack nodes popped search returns tree popped entire connected component outermost loop searches node visited ensuring nodes reachable node eventually traversed function strongconnect performs single depth search graph finding successors node reporting connected components subgraph node finishes recursing lowlink set root node connected component formed nodes stack algorithm pops stack including current node presents nodes connected component note lowlink min lowlink correct update lowlink stack stack edge dfs tree subtree lowlink takes account nodes reachable nodes subtree lowlink complexity time complexity tarjan procedure called node forall statement considers edge algorithm running time linear number edges nodes displaystyle order achieve complexity test stack constant time storing flag node stack performing test examining flag space complexity tarjan procedure requires supplementary data vertex lowlink fields bit onstack determining undefined addition word required stack frame hold current position edge list finally worst case size stack displaystyle graph giant component final analysis displaystyle cdot w displaystyle machine word size variation nuutila soisalon soininen reduced displaystyle cdot w subsequently pearce requires displaystyle cdot w additional remarks special order nodes connected component property algorithm connected component identified successors order connected components identified constitutes reverse topological sort dag formed connected components donald knuth tarjan algorithm favorite implementations book stanford graphbase wrote data structures devised problem fit amazingly beautiful quantities exploring directed graph magically fingertips algorithm topological sorting byproduct