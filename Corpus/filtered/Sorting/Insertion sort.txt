insertion sort insertion sort simple sorting algorithm builds final sorted array list item time efficient large lists advanced algorithms quicksort heapsort merge sort insertion sort advantages simple implementation jon bentley version optimized version efficient small data sets quadratic sorting algorithms efficient practice simple quadratic algorithms selection sort bubble sort adaptive efficient data sets sorted time complexity kn element input places sorted position stable change relative order elements equal keys place requires constant additional memory space online sort list receives people manually sort cards bridge hand method insertion sort algorithm insertion sort iterates consuming input element repetition growing sorted output list iteration insertion sort removes element input data finds location belongs sorted list inserts repeats input elements remain sorting typically place iterating array growing sorted list array position checks largest sorted list previous array position checked larger leaves element place moves smaller finds correct position sorted list shifts larger values space inserts correct position array iterations property entries sorted entry skipped iteration remaining entry input removed inserted result correct position extending result element greater copied compared relation sorting algorithms insertion sort selection sort selection sort passes array elements sorted order fundamental difference algorithms selection sort smallest elements unsorted input insertion sort simply elements input primary advantage insertion sort selection sort selection sort scan remaining elements absolute smallest element unsorted portion list insertion sort requires single comparison element greater element frequently true input array sorted partially sorted insertion sort distinctly efficient compared selection sort average assuming rank element rank random insertion sort require comparing shifting half previous elements meaning insertion sort perform half comparisons selection sort average worst case insertion sort input array reverse sorted insertion sort performs comparisons selection sort disadvantage insertion sort selection sort requires writes fact iteration inserting element sorted portion array requires element swaps shift elements single swap required iteration selection sort general insertion sort write array times selection sort write times reason selection sort preferable cases writing memory expensive reading eeprom flash memory divide conquer algorithms quicksort mergesort outperform insertion sort larger arrays recursive sorting algorithms insertion sort selection sort generally faster small arrays exact size varies environment implementation typically elements optimization implementation algorithms hybrid approach simpler algorithm array divided small size variants shell substantial improvements algorithm modified version called shell sort sorting algorithm compares elements separated distance decreases pass shell sort distinctly improved running times practical work simple variants requiring running time cost comparisons exceeds cost swaps case string keys stored reference human interaction choosing pair displayed binary insertion sort yield performance binary insertion sort employs binary search determine correct location insert elements performs log comparisons worst case log algorithm running time average series swaps required insertion number swaps reduced calculating position multiple elements moving target position elements calculated moved proper position number swaps reduced random data extreme case variant works merge sort variant named binary merge sort binary insertion sort sort groups elements final sort merge sort combines speed insertion sort small data sets speed merge sort large data sets avoid series swaps insertion input stored linked list elements spliced list constant time position list searching linked list requires sequentially links desired position linked list random access faster method binary search running time required searching time sorting sophisticated data structure heap binary tree time required searching insertion reduced essence heap sort binary tree sort bender martin farach colton mosteiro published variant insertion sort called library sort gapped insertion sort leaves small number unused spaces gaps spread array benefit insertions shift elements gap reached authors sorting algorithm runs high probability log time skip list insertion time brought log swaps needed skip list implemented linked list structure final running time insertion log list insertion sort variant insertion sort reduces number movements list insertion sort code items stored linked list list sorted additional space algorithm starts initially trivially sorted list input items list time inserted proper place sorted list input list sorted list desired result algorithm trailing pointer insertion sorted list simpler recursive method rebuilds list time splicing stack space