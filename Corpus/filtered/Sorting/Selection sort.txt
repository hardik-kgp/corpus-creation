selection sort computer science selection sort sorting algorithm place comparison sort  time complexity making inefficient large lists generally performs worse insertion sort selection sort simplicity performance advantages complicated algorithms situations auxiliary memory limited algorithm divides input list parts sublist items sorted built left left list sublist items remaining sorted occupy rest list initially sorted sublist unsorted sublist entire input list algorithm proceeds finding smallest largest depending sorting order element unsorted sublist exchanging swapping leftmost unsorted element putting sorted order moving sublist boundaries element time efficiency selection sort quadratic number sorting techniques time complexity selection sort selection sort  swaps worst case time efficiency selection sort respect swapping linear distinguishes selection sort sorting algorithms comparison sorting algorithms quadratic sorting algorithms sorting algorithms simple average case θ  selection sort outperforms bubble sort gnome sort insertion sort iteration elements array sorted order insertion sort advantage scans elements order place st element selection sort scan remaining elements st element simple calculation insertion sort perform half comparisons selection sort perform fewer depending order array prior sorting advantage real time applications selection sort perform identically order array insertion sort running time vary considerably advantage insertion sort runs efficiently array sorted close sorted selection sort preferable insertion sort terms number writes θ swaps versus ο  swaps exceeds beats number writes cycle sort cycle sort theoretically optimal number writes writes expensive reads eeprom flash memory write lessens lifespan memory finally selection sort greatly outperformed larger arrays θ log divide conquer algorithms mergesort insertion sort selection sort typically faster small arrays fewer   elements optimization practice recursive algorithms switch insertion sort selection sort small sublists variants heapsort greatly improves basic algorithm implicit heap data structure speed finding removing lowest datum implemented correctly heap finding lowest element θ log time θ loop normal selection sort reducing total running time θ log bidirectional variant selection sort called cocktail sort algorithm finds minimum maximum values list pass reduces number scans list factor  eliminating loop overhead decreasing number comparisons swaps note cocktail sort refers bidirectional variant bubble sort double selection sort selection sort implemented stable sort swapping step  minimum inserted position intervening items moved algorithm stable modification requires data structure supports efficient insertions deletions linked list leads performing θ  writes bingo sort variant items ordered repeatedly remaining items greatest moving items final location counting sort efficient variant duplicate values selection sort pass remaining items item moved bingo sort pass item initial pass biggest passes item final location finding pseudocode arrays based loop includes limits pascal average items bingo sort expected faster executes loop fewer times selection sort