ukkonens suffix tree algorithm plain english https stackoverflow questions  ukkonens suffix tree algorithm plain english feel bit thick point spent days fully wrap head suffix tree construction mathematical background explanations elude start excessive mathematical symbology closest good explanation fast string searching suffix trees glosses points aspects algorithm remain unclear step step explanation algorithm stack overflow invaluable reference ukkonen paper algorithm helsinki ukkonen suffixt1withfigs pdf basic understanding iterate prefix string iterate suffix prefix add tree add suffix tree iterate character iterations consisting walking existing branch starts set characters splitting edge descendent nodes reach differing character suffix matching edge walk matching edge walk leaf edge created basic algorithm appears  pointed explanations step prefixes step suffixes prefix ukkonen algorithm unique suffix pointer technique trouble understanding trouble understanding active point assigned changed canonization aspect algorithm implementations bounding variables completed source code works correctly supports automatic canonization renders nicer text graph output source code sample output https gist github  update    years suffix trees implemented algorithm gist bug free dump file location node colourful output stripped version gist debugging code https gist github axefrog c347bf0f5e0723cbd09b1aaed6ec6fc6 attempt ukkonen algorithm showing string simple repeated characters extending algorithm preliminary statements building basically search trie root node edges leading nodes edges search trie edge labels single characters edge labeled pair integers pointers text sense edge carries string label arbitrary length takes  space pointers basic principle demonstrate create suffix tree simple string string repeated characters algorithm works steps left step character string step involve individual operation final observations total number operations start left insert single character creating edge root node left leaf labeling edge represents substring starting position  current symbol current position  initial tree progress position  goal step insert suffixes current position expanding existing edge inserting edge representation observe things edge representation initial tree meaning automatically changed updated current position   edge consumes  space consists pointers text characters represents increment position update tree appending existing edge inserting edge suffix representation observe tree correct suffix tree current position step steps characters text work step  existing edges updated automatically incrementing inserting edge final character  time string length time required extension simple repetitions works nicely string repetitions realistic string starts previous repeated repeated steps    steps tree previous step  position  implicitly updates existing edges insert final suffix current step root introduce variables addition time active point triple integer indicating suffixes insert exact meaning clear simple active point root node null character edge inserted step inserted root node freshly created edge triple represent set  step meaning number suffixes actively insert step  final character change insert current final character root notice outgoing edge starting case insert fresh edge root node simply notice suffix tree ends middle longer edge bothered leave things set active point active point middle outgoing edge root node starts position  edge notice edge simply character suffices edge starting character confirm true reading entire description increment step  observation final suffix insert exist tree tree changed update active point tree accurate representation suffix tree current position suffixes final suffix contained implicitly updating variables fixed length  work step step  update current position  automatically updates tree  insert final suffixes current position basically suffix previous step properly inserted remained progressed step grown insert final edge practice active point points edge insert current final character turns edge change tree simply update active point node edge point increment  properly inserted final edge previous step insert current final edge clear insert current step updated active point attempt insert tree suffix including tree implicitly built tree proceed step  incrementing tree automatically updated  insert active point tells ends jump insert split edge insert internal node edge representations pointers text splitting inserting internal node  time dealt decrement  insert remaining suffix update active point rule splitting inserting edge called rule  applies root learn rule  cases rule  insertion root remains root set character suffix insert reduced  active point triple insert edge  character identify insertion point  time check current step leave insert splitting edge  time update  active point rule  states thing rule  split edge insert node node created current step connect inserted node node special pointer suffix link suffix link represented dotted edge insert final suffix current step component active node fallen  final insert root directly outgoing edge root node starting insert edge current step remaining inserts proceed step  setting  automatically appends character leaf edges attempt insert final character active point root current step inserting update active point step   append update active point increment notice  time active point edge reflect setting refer internal node edge ends step  insert understand final trick extension suffix links update appends automatically leaf edges active point insert turns exists edge set active point increment step   insert remains  steps ago inserting active point attempting insert active point edge split  time split initiated marked red final rule rule  splitting edge root node follow suffix link node reset node points suffix link set root remain unchanged active point marked red insertion complete decrement  remaining suffix current step rule  set active point node edge inserting simply inserting final character active point edge split rule  create suffix link inserted node observe suffix links enable reset active point remaining insert  effort graph confirm node label linked node suffix node linked current step finished  follow rule  reset active point current red suffix link reset root active point insert occurs outgoing edge root node label starts character split involves creation internal node follow rule  set suffix link created internal node graphviz dot graphs suffix link caused dot arrange existing edges check carefully confirm thing inserted suffix link set  root rule  update active point final insert current step insert single root final step number final observations step forward  position automatically updates leaf nodes  time deal suffixes remaining previous steps final character current step tells additional inserts inserts correspond final suffixes string ends current position insert insert  time active point tells add single character active point characters contained implicitly active point insert decrement follow suffix link root rule  root modify active point rule  case takes  time inserts character insert current step  reason inserts remain suffixes implicit current tree fact  deal remaining suffixes algorithm  case text substring occurred case append extra character string occurred literature dollar sign symbol matter completed suffix tree search suffixes accept matches leaf lot spurious matches strings implicitly contained tree actual suffixes main string forcing  essentially ensure suffixes leaf node tree search general substrings suffixes main string final step required suggested comment complexity entire algorithm text characters length steps  add dollar sign step updating variables inserts  time times previous steps decremented insert total number times  total complexity small thing properly explain happen follow suffix link update active point component work situation dashed lines rest tree dotted suffix link active point points place edge assume updates follow suffix link update active point rule  active point edge green node  characters order correct active point follow edge blue node reset bad case large large happen correct active point jump internal node worst case algorithm hidden  complexity step generally post adjustments active node suffix link reason adjust active point green blue brings node suffix link reduced follow chain suffix links remaining inserts decrease number active point adjustments larger time larger single step total sum increments entire process number active point adjustments bounded implement suffix tree approach jogojapan answer work cases wording rules mentioned managed implement absolutely correct suffix tree approach write overview jogojapan answer modifications rules case forget create suffix links additional variables active point triple active_node active_edge active_length showing start inserting suffix remainder number suffixes add explicitly instance word abcaabca remainder  process  suffixes bca concept internal node nodes root leafs internal nodes observation  final suffix insert exist tree tree changed update observation  point greater equal length current edge strictly greater redefine rules rule  insertion active node root active length greater  active node changed active length decremented active edge shifted character suffix insert rule  create internal node inserter internal node internal node current step link previous node suffix link definition jogojapan account newly created internal nodes internal nodes insertion rule  insert active node root node follow suffix link set active node node points suffix link set active node root node active edge active length stay unchanged definition inserts leaf nodes split nodes finally observation  symbol add tree edge update leaving tree unchanged internal node marked needing suffix link connect node current suffix link suffix tree cdddcdc add suffix link case connect nodes suffix link adding letter adding letter connect nodes suffix link adding letter adding letter difference case suffix links suffix links correct blue node red approach active point problem suffix link add letters tree omit adding nodes tree suffix link root adding letter tree red node existed insert blue node edge labled insert blue node mark needing suffix link relying active point approach set red node insert red node letter edge blue node left suffix link connect blue node red suffix link correct active point approach guarantees place place process insert shorter suffix finally implementations suffix tree hope overview combined jogojapan detailed answer implement suffix tree explained tutorial jogojapan implemented algorithm python couple minor problems mentioned jogojapan turns sophisticated expected treated carefully cost days implementation robust suppose problems solutions listed turns situation happen unfolding step entire algorithm leave remainder actnode actedge actlength unchanged current unfolding step start step folding unfolding depending char original string current path leap nodes follow suffix link update active point active_length component work active_node forward place split insert leaf process straightforward moving actlength actedge changing root node actedge actlength wrong moves additional variable problems pointed managonov split degenerate split edge split operation node case add leaf node standard edge split operation suffix links maintained correspondingly hidden suffix links special case incurred problem  problem  hop nodes point split surpass point comparing remainder string path labels case suffix link neglected unintentionally avoided remembering point moving forward suffix link maintained split node exists problem  unfolding step finally implementation python python tips includes naive tree printing function code debugging saved lot time convenient locating special cases jogojapan brought awesome explanation visualisation makagonov mentioned missing rules setting suffix links visible nice step step brenden github ukkonen animation word aabaaabb step  step  suffix link node  node  active point suddenly moves makagonov live follow implementation grasp building workflow hard combining edges nodes pointers references breaks statements continue statements ended implementation hope reflects steps clearer reduce learning time people apologies answer redundant implemented ukkonen algorithm struggling days read multiple papers subject understand core aspects algorithm rules approach previous answers unhelpful understanding underlying reasons written focusing solely pragmatics struggled explanations supplemental explanation click published implementation https github baratgabor suffixtree note expert subject sections inaccuracies worse encounter feel free edit prerequisites starting point explanation assumes familiar content suffix trees characteristics ukkonen algorithm extending suffix tree character character start basically assume read explanations add basic narrative flow feel redundant interesting explanation difference suffix links rescanning root lot bugs headaches implementation open ended leaf nodes limitations fundamental trick realize leave suffixes open referencing current length string setting static add additional characters characters implicitly suffix labels visit update open suffixes obvious reasons works nodes represent string leaf nodes tree structure branching operations execute tree addition branch nodes leaf nodes propagate automatically elementary require mention repeated substrings explicitly tree tree virtue repetitions repetitive substring ends encountering repeating character create branching point represent divergence point onwards case string abcxabcy branching suffixes abc valid suffix tree substrings string matching characters root emphasize operation execute suffix tree reflected consecutive suffixes abc simply cease valid suffixes accept manual updates suffixes updated add repeated character rest repeated characters succession idea split suffix branches split ascertained encounter repeating character case exists tree match longest repeated string count suffixes update remainder stands concept remainder rescanning variable tells repeated characters implicitly branching suffixes visit repeat branching operation character match essentially equals characters deep tree root staying previous string abcxabcy match repeated abc implicitly incrementing time remainder  encounter repeating character split abcx abc abc decrement   care abc branching repeat operation matching  characters root reach point split split bcx decrement  repeat operation  lastly add current character root operation consecutive suffixes root simply reach point operation called rescanning ukkonen algorithm typically expensive algorithm imagine longer string rescan long substrings dozens nodes discuss thousands times solution introduce suffix links concept suffix links suffix links basically point positions rescan expensive rescan operation simply jump linked position work jump linked position repeat positions update big question add links existing answer add links insert branch nodes utilizing fact extension tree branch nodes naturally created exact order link link created branch node longest suffix created cache create link create cache newly created consequence suffix links follow branch node created cases fall aforementioned rescanning root insertion instructed suffix link jump root alternatively storing parent pointers nodes follow parents check link rarely mentioned suffix link usage set stones multiple approaches understand underlying mechanism implement fits concept active point discussed multiple efficient tools building tree vaguely referred traversing multiple edges nodes explored consequences complexities explained concept remainder keeping track tree realize store firstly reside specific edge node store edge active edge adding edge identify position farther tree directly connected root node store node active node lastly notice remainder inadequate identify position edge directly connected root remainder length entire route bother remembering subtracting length previous edges representation essentially remainder current edge active length leads active point package variables maintain position tree observe image matched route abcabd consists  characters edge root  characters edge cabdabcabd node  remainder  characters current position identified active node  active edge active length  role active point abstraction layer algorithm meaning parts algorithm work active point irrespective active point root easy implement suffix links algorithm clean straight forward differences rescanning suffix links tricky experience plenty bugs headaches explained sources difference processing suffix link cases rescan cases string aaaabaaaabaac observe remainder  corresponds total sum characters root active length  corresponds sum matched characters active edge active node executing branching operation active point active node suffix link suffix link process active length portion remainder irrelevant node jump suffix link encodes correct remainder implicitly simply virtue tree suffix link rescan root processing suffix remainder basis rescanning comparison processing suffix link step compare achieve result moving suffix process suffix link suffix link notice suffix link automatically place strictly true fact active length incompatible position case active length  working suffix abaa starting linked node  finding edge corresponds character suffix notice active length overflows edge  characters jump edge node decrement active length characters consumed jump edge decremented suffix baa finally note edge length larger remaining active length  place note operation referred rescanning direct equivalent rescanning shortened length root starting point rescan notice traditional rescan operation pretending suffix link start tree root work place entire length current suffix length suffix remainder discussed consume entirety remainder reaches include jumping multiple nodes jump decreasing remainder length edge jumped finally reach edge longer remaining remainder set active edge edge set active length remaining remainder note actual remainder variable preserved decremented node insertion assumed separate variable initialized remainder notes suffix links rescans  notice methods lead result suffix link jumping faster cases rationale suffix links  actual algorithmic implementations differ mentioned case suffix link active length compatible linked position branch tree additional branching essentially active length remainder execute rescanning logic edge shorter remaining suffix length  remark pertaining performance check character rescanning valid suffix tree built safely assume characters match counting lengths character equivalence checking arises jump edge edges identified character unique context node rescanning logic string matching logic searching substring tree  original suffix linking approaches larsson names approach node oriented compares node oriented edge oriented varieties approaches typical worst case performances requirements limitations generally edge oriented approaches improvement original intuition iterations main loop constructed suffix tree suffixes complete string start characters start suffix tree single root node represents entire string suffix starts  len string iterations suffix tree suffixes loop key active point guess represents deepest point suffix tree corresponds proper suffix characters string proper suffix entire string suppose characters abcabc active point represent point tree suffix abc active point represented origin point tree starting node origin feeding characters string add character active point existing tree add node suffix tree active point fallback shortest match check note  suffix pointers link shortest match node note  add node fallback add suffix pointer node destination suffix pointer node shortened active point node exist created iteration fallback loop note  canonization simply saves time checking active point suppose origin  changed check active point follow suffix tree time intermediate nodes sense cache result path recording distance node code bounding variables health warning algorithm hard understand realise intuition incorrect details implement explained implementation ruby check work fine difference implementation edge object symbols https gist github suchitpuri 