algorithms compute directions point point map questions algorithms compute directions point point map map providers google yahoo maps directions real data form including distances things driving speeds presence sidewalks train schedules suppose data simpler format large directed graph edge weights reflecting distances compute directions arbitrary point points close city cross country graph algorithms dijkstra algorithm work graph enormous luckily heuristic algorithms work data structured kind tiered approach work store precomputed directions key points local directions directions points involve local directions key points global directions key point local directions algorithms practice question motivated finding quirks online mapping directions contrary triangle inequality google maps thinks takes longer farther intermediate point walking directions optimize parameter pps violation triangle inequality suggests kind tiered approach versus prominent boulevard sebastopol edit examples work time original post speaking spent months working mapping company included working routing algorithm dijkstra work couple modifications dijkstra source dest start expand sides meet middle eliminates roughly half work avoid exploring alleys city source destination layers map data highways layer highways secondary layer secondary streets explore smaller sections detailed layers expanding description leaves lot idea modifications lines cross country routing reasonable timeframe question active area years main idea preprocessing graph speed queries additional itineraries computed fast dijkstra algorithm basis optimisations arachnid usage bidirectional search edge pruning based hierarchical speedup techniques work algorithms outperform techniques current algorithms shortest paths computed considerable time millisecond continental road network fast implementation unmodified algorithm dijkstra seconds article engineering fast route planning algorithms overview progress field references paper fastest algorithms hierarchical status road data highway local road compute preprocessing step hierarchy optimised speed route planning precomputation prune search start destination slow roads considered dijkstra algorithm benefits good performance correctness guarantee result optimised route planning algorithms dealt static road networks edge graph fixed cost true practice dynamic traffic jams vehicle dependent restrictrions account latest algorithms deal issues problems solve shortest path distances compute solution tsp interested matrices distances sources destinations computing shortest paths highway hierarchies note improved newer approaches years addressing triangle inequality violations extra factor optimising common sense shortest fastest route lead chaos destruction directions prefer major routes truck friendly cope sat nav driver discard triangle inequality narrow residential street shortcut user explicitly asks stick major roads bit takes bit longer braess paradox shortest fastest route congestion fastest route stray graph theory game theory fact hope distances produced distance function mathematical sense dies roads lose symmetry requirement losing triangle inequality rubbing salt wound fastest routing algorithms compared proven correctness algo2 iti uka schultes hwy schultes_diss pdf google tech talk subject youtube watch erpe8tqbw implementation highway hierarchies algorithm discussed schultes berlin writing interface mobile version developed tom mapsforge org worked google microsoft yahoo maps work architect custom supply chain optimization energy company included scheduling routing application fleet trucks criteria routing business specific construction traffic slows lane closures employed technique called aco ant colony optimization schedule route trucks technique ai technique applied traveling salesman problem solve routing problems trick aco build error calculation based facts routing graph solving model quit error small google aco tsp technique open source ai tools heard swarm pretty comprehensive graph algorithms dijkstra algorithm work graph enormous argument hold dijkstra complete graph small subset interconnected graph smaller subset dijkstra perform behaved graphs hand careful parametrization perform good perform data interested hear peoples experiences prominent examples google map search interesting imagine directed nearest neighbour heuristic current state art terms query times static road networks hub labelling algorithm proposed abraham link springer chapter _20 excellently written survey field published microsoft technical report microsoft pubs msr pdf short version hub labelling algorithm fastest queries static road networks requires large ram gib transit node routing slower requires gib memory quicker preprocessing time contraction hierarchies provide nice trade quick preprocessing times low space requirements gib fast query times algorithm completely dominate google tech talk peter sanders youtube watch erpe8tqbw talk andrew goldberg youtube watch wprkc78xlhw open source implementation contraction hierarchies peter sanders group website kit algo2 iti kit english routeplanning easily accessible blog post written microsoft usage crp algorithm blogs bing maps bing maps routing engine suprised floyd warshall algorithm mentioned algorithm work dijkstra nice feature compute long continue allowing intermediate vertices naturally routes interstates highways fairly lot times methods depending size geographical map haversine function heuristic solution straight distance heuristic function sort coordinates point intersection vertex map weightings heuristic function constant greater answer pre computed routes major locations layered maps understanding games speed map coarse macro navigation fine grained map navigation boundary macro directions small paths calculate search space smaller simply single path destination business lot lot data pre computed search search pre computed data search path pure speculation suppose influence map data structure overlaying directed map order narrow search domain search algorithm direct path major routes desired trip long google app reasonable suppose lot magic extensive caching surprised caching common google map route requests allowed large chunk requests answered simple thoughts remember maps represent physical organization store latitude longitude intersection check points lie direction target blocked store overlay superior connections limit final destination divide bunch zones defined limited connectivity define connectivity points zones zones source target start zone route location connection point zones simply map connection points suspect lot pre calculated note zones smaller metropolitan area city terrain features divide river multiple zones curious heuristics routes starting location santa rosa campgrounds yosemite national park destinations produced routes fact routes converged miles diverging miles repeatable routes miles miles distances times pretty close expect alas reproduce algorithms changed curious algorithm speculate directional pruning happened exquisitely sensitive tiny angular difference destinations precomputed segments selected choice final destination speaking graphhopper fast open source route planner based openstreetmap read bit literature implemented methods simplest solution dijkstra simple improvement bidirectional dijkstra explores roughly half nodes bidirctional dijkstra route entire germany takes sec car mode s created animated gif real path search bidirectional dijkstra ideas dijkstra faster goal oriented dijkstra create gif animation lot faster problem path search nodes locations explored costly germany millions additional pain point dijkstra searches lots ram heuristic solutions exact solutions organzize graph road network hierarchical layers pro cons solve speed ram problem listed answer graphhopper decided contraction hierarchies relative easy implement ages preparation graph fast response times test online instance graphhopper maps south africa east china km distance days driving time car s server worked routing years burst activity prompted clients easily fast optimisations complex algorithms routing enormous graph problem speed depends entire routing network directed graph arcs nodes representing route segments junctions memory main time overhead time create network rough figures based ordinary laptop running windows routing spain time create network seconds time calculate route short measure thing network routing calculations algorithm marked nodes record route total cost current node arc reset clear hundreds thousands nodes easier generation number mark node generation number data increment generation number calculate route node older generation number stale maps route intermediate point route backwards road straight algorithm backtrack shorter route pairs shortest path algorithm compute shortest paths vertices graph paths pre computed requiring path calculated time shortest path source destination floyd warshall algorithm pairs shortest path algorithm maps consideration map guess location load place landmarks place search destination load map graph places apply shortest path algorithms technique dynamic programming suspect calculation shortest paths refer