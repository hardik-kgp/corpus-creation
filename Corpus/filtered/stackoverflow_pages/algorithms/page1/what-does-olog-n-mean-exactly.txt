olog https stackoverflow questions  olog learning big notation running times amortized times understand notion linear time meaning size input growth algorithm proportionally quadratic time  algorithms permutation generators times grow factorials function algorithm grows proportion input nested loop time  log height complete binary tree log great logarithm sense log    understand identify function logarithmic time understand identify function log time common attributes logarithmic running time function choice element perform action possibilities chosen elements action performed digits people phone book log check person phone book simply divide conquer based alphabetically explore subset eventually phone number bigger phone book longer time grow proportional increase additional size expand phone book compare kinds operations running time assume phone book businesses yellow unique names people white unique names phone number assigned person business assume takes constant time flip specific running times operations perform phone book worst  case business business phone number  average case person phone number log person phone number picking random point halfway book searched checking person point repeat process halfway book person lies binary search person people phone numbers digit  phone number person business number log mix printer office phone book inserted random order ordering correct putting spot phone book examples printer office phone books waiting mailed resident business sticker phone book identifying mailed person business phone book log personalize phone book person business designated copy circle book write short note patronage  mistake occurred office entry phone books extra  phone number white remove ready load phonebooks shipping dock robot supposed load books haywire putting books truck random order worse loads books truck checks order unloads starts dreaded bogo sort robot loading things correctly day workers plays prank wires loading dock robot automated printing systems time robot load original book factory printer duplicate phonebooks fortunately robot bug detection systems sophisticated robot printing copies encounters duplicate book loading load original duplicate book printed mathematical explanation checkout time complexity arrives https hackernoon time complexity log f94bb5bfbf good answers posted question missing illustrated answer height complete binary tree log drawing depicts binary tree notice level double number nodes compared level binary binary search complexity nodes level tree figure  represents items sorted collection binary search divide conquer algorithm drawing  comparisons record searching  item dataset assume dataset  elements continue drawing  comparisons searching tree grown level deeper multiplied data result complexity algorithm logarithmic order plotting plain piece paper result graph rise curve decelerates increases basically time linearly exponentially takes compute elements seconds compute elements seconds compute elements divide conquer type algorithms binary search quick sort time divide array parts time takes time pivot element explanation case fully balanced binary tree understand logarithmic time complexity binary tree case problem size divided problem size  reach problem size  log work tree reach solution common algorithm log time complexity binary search recursive relation   subsequent level tree divide problem half constant additional work overview good diagram examples tree diagrams simple code examples addition explanation provide algorithms simple print statements illustrate complexity algorithm categories general idea logarithm https wikipedia org wiki logarithm natural science natural log engineering disciples log_10 log base  computer scientists log_2 log base  lot computers binary based abbreviations natural log engineers leave _10 log_2 abbreviated types logarithms grow fashion share category code examples recommend   good included clean examples variations demonstrate subtle result categorization  logn classes categories growth categories time categories ordering algorithm performance grown faster input grows table demonstrates growth numerically table log ceiling log_2 simple code examples big categories  constant time examples algorithm  algorithm  prints depend constant time algorithm  algorithm  prints  times depend input size grows algorithm print  times  constant algorithm log logarithmic examples algorithm  acts log_2 algorithm  demonstrates algorithm runs log_2 notice post operation loop multiples current        algorithm  acts log_3 algorithm  demonstrates log_3 notice     algorithm  acts log_1  algorithm  helps long number greater  result repeatedly multiplied logarithmic algorithm linear time examples algorithm  algorithm simple prints times algorithm  algorithm variation print  times    ignore   constant algorithm log nlog examples algorithm  combination nesting loops algorithm  algorithm  algorithm  loops allowed variations result final result  squared examples algorithm  easily nesting standard loops algorithm  algorithm  variations  cubed examples algorithm  algorithm   loops  algorithm  algorithm  variations yield summary straight forward examples variations demonstrate subtle introduced change analysis insight function takes takes log  time big notation loosely speaking relationship true large constant factors smaller terms logarithmic running time essentially running time grows proportion logarithm input size  items takes time  items takes   items takes time complexity logarithm fully understand logarithm imagine rope tied horse rope directly tied horse force horse pull man directly  imagine rope looped round pole horse pull times harder times depend roughness rope size pole assume multiply strength  rope complete turn rope looped horse pull  times harder human decides difficult horse loop rope round pole increasing strength additional  times loop increase strength  times loop increases  number turns required number called logarithm number  posts multiple strength  times  posts multiply strength     logarithm    logarithm    base  log growth rate log additional loop force rope handle  times base  fortunately base log insignificant talk big notation imagine guess number    guesses relationship items guess additional guess graph binary search guess number    attempts  numbers guess number  attemps  numbers takes  attempts relations logarithms  guesses  range  guesses  range  logarithm   logarithm  base  notice bolded big notation refers worse case lucky guess number attempt case  story guess data set shrinking good rule thumb identify algorithm logarithmtic time data set shrinks order iteration log eventually linerarithmic time log algorithm rule thumb applies time logarithmic function times reducing size list times occurs algorithms mergesort easily identify algorithmic time log outer loop iterates list loop loop cutting reducing data set iteration loop log algorithm log disclaimer rope logarithm grabbed excellent mathematician delight book sawyer log intuitively time proportional number digits operation performs constant time work digit bit input operation time proportional number digits bits input magnitude input log operation series constant time decisions halves reduces factor    size input considered time proportional log base  base  base  base  size input mentally visualize algorithm runs log increase problem size multiplicative multiply size  work increased additive applying binary tree question good application double number nodes binary tree height increases  additive double increased  assuming stays balanced doubling work problem size multiplied work log algorithms awesome recommend read book algorithms th edition functions expected complexities numbers indicating statement execution frequencies big complexity chart bigocheatsheet lastly simple showcase calculated anatomy program statement execution frequencies analyzing running time program log number times cut log length repeatedly equal parts reaching size  divide conquer algorithms component running time repeated halving input case binary search iteration throw half input big notation log log base  edit log base matter deriving big performance algorithm log factor halving base  log height complete binary tree log rephrase height complete binary tree log figuring height complete binary tree log traversing step step understand identify function logarithmic time logarithm essentially inverse exponentiation step function eliminating factor elements original item set logarithmic time algorithm tree easily stepping level nodes cuts exponential number elements continue traversing popular sorted phone book essentially equivalent traversing binary search tree middle root element deduce step left  cases log time log bit misleading precisely log  logarithm base  height balanced binary tree log  node note log  child nodes tree nodes height log  binary search running time log  step divide search space  refers function algorithm step algorithm working time proportional logarithm base  cases event insignificant big notation size input logarithmic function inverse exponential function input grows exponentially linearly function grows linearly running times common sort divide conquer application ideally cutting work half time division conquer steps constant time work work constant time time growing slowly entire function fairly common step require linear time input total time complexity running time complexity binary search binary search ignoring half input step dividing array half focusing half step step constant time binary search compare element key order figure irregardless big array point log log  steps running time complexity merge sort dividing array half step total log log  steps step perform merge operations elements merge operation sublists  elements merge operations sublists  elements irrelevant adds elements step total complexity remember big notation definition constants matter change base rule logarithms difference logarithms bases constant factor simply time needed task grows log s  s  read wikipedia articles binary search algorithm big notation precisions simply step algorithm cut work half asymptotically equivalent fourth plot logarithmic function graphical calculator rises slowly slowly linear function algorithms logarithmic time complexity highly sought big   perform acceptably log precisely constant scaling factor divided usual mathematical meaning analysis pick arbitrarily small constant values greater lay terms equation time components constant startup time components pale insignificance large values log dominating term large note equation time log squared matter values constants term dominate large bit notation order dominant term large add interesting read book kormen long time ago imagine problem solution problem space problem space finite prove iteration algorithm cut fraction space limit algorithm running logn time point talking relative fraction limit absolute binary search classical step throw   problem space binary search suppose proved step throw   problem space program running logn time slower binary search good hint analyzing recursive algorithms proved step recursion variants leads cutoff fraction problem space loop grasped concept simpler understand contexts loop step grows exponentially complexity notation program log loop hand   excluding     iterations place step loop grows exponentially takes  iterations reach termination logarithm base reverse function logarithm inverse exponential exponential grows fast logarithm grows inversely slow difference log huge difference constant list elements create binary tree list divide conquer algorithm dividing  reach lists size  leaves step divide   lists   divide   lists   divide  lists   list size  equation lg lg log base  time write algorithm code analyze asymptotic complexity time complexity asymptotic complexity behavior execution time algorithm time complexity actual execution time people terms interchangeably time complexity depends parameters  physical  programming language  coding style  actual execution time good measure analysis input size parameter code input execution time function input size linear time algorithm linear search input elements search element array comparisons matter programming language coding style prefer execute worst case scenario requires comparisons execution time linearly proportional input size search work increment compare operation function input size algorithm log execution time log times input size input size increases work execution time increases proportionality input size increased work increased independent machine units work dependent parameters change systems inverse ary tree depth size traversing tree walking single path tree log base technology ant notation mathematics article quote knuth big omicron big omega big theta  basis issues discussed propose members sigact editors computer science mathematics journals adopt notations defined alternative today  today mathematical analysis mathematical analysis symbol meaning  university symbol intoduced german mathematician landau   complete binary search searching  yields  hits    log2   good apporximate hits needed intuition based answer interpretations imagine high hill broad base reach hill ways dedicated pathway spirally hill reaching small terrace carvings cut provide staircase reaching linear time log imagine algorithm accepts integer input completes time proportional theta runs time proportion algorithm runs log theta log time algorithms divide conquer paradigm complexity logn calculate power function geeksforgeeks org write program calculate powxn