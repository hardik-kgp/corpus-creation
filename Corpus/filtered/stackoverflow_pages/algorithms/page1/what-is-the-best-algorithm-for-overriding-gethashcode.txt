algorithm overriding gethashcode algorithm overriding gethashcode net method lot places net base class libraries implementing properly items collection determining equality standard algorithm practice implement custom classes degrade performance implementation josh bloch fabulous effective fast creates pretty good hash collisions pick prime numbers comments pick large prime multiply good examples small numbers tend primes algorithms prime numbers fnv numbers work initial prime multiplication constant prime common practice ing hashcodes main reasons suppose type fields earlier algorithm compiler anonymous types options cases good incredibly easy remember fnv alternative simple constants combining operation code normal fnv algorithm operates individual bytes require modifying perform iteration byte bit hash fnv designed variable lengths data number field values comments answer code work sample case tested addition approach note thing aware ideally prevent equality sensitive hashcode sensitive state changing adding collection depends hash code documentation override gethashcode immutable reference types general mutable reference types override gethashcode compute hash code fields mutable ensure hash code mutable object change object contained collection relies hash code anonymous type microsoft good generic hashcode generator copy property field values anonymous type hash work number properties boxing algorithm implemented framework anonymous types valuetuple update cactuaroid mentions comments tuple saves keystrokes importantly executes purely stack garbage note original technique anonymous types create object heap garbage anonymous types implemented classes optimized compiler interesting benchmark options tuple option superior hashcode helper advantage generic type arguments boxing extension method provide fluent interface hashing class helper library purpose simply assess performance feedback welcomed helper class jon skeet implementation usage avoid writing extension method int32 generic avoids heap allocation update martin comment caused boxing switched default comparer answer default comparer performance question discussion hash codes null values edit getter jit intrinsic pull request mentioned stephen toub blog post cases equals compares multiple fields matter gethash hashes field calculating hash cheap allocations fast heavy computations database connections good distribution heavy lifting equals method hash cheap operation enable calling equals items final rely gethashcode stable multiple aplication runs net types guarantee hash codes stay restart gethashcode memory data structures answer close jon skeet started project power hash tables hash tables size internal table good reason favouring prime number sizes advantages power sizes pretty sucked bit experimentation started hashing hashes power hash table suck disturbed work precisely work original poor mixing hashcode improve great hashcode introduce collisions mixing hash code improve terrible hash code change large number collisions large number mixing hash code improve hash code fairly avoiding absolute collisions range values badly avoiding collisions modulo actual hash table simpler modulo power table apparent negative common prime number tables obvious extra work rehashing outweigh benefit benefit edit open addressing increased sensitivity collision fact power disturbing implementations net study improved order tests running times faster fewer collisions disturbing hash codes improved gethashcode implementations coded basis answers site worse throught time good wanted project pet project started produce good distributed hash code net settled porting spookyhash net code fast path version spookyhash produce bit output bit input spookyhash nice quick remember piece code port hand inlined lot speed code reuse project original project produced question produce hash code project produced question produce net memcpy produced lot overloads easily feed native types hash code fast bob jenkins deserves credit original code ported faster bit machines algorithm optimised code bitbucket org jonhanna spookilysharp src code simplified version written easily takes seed values deal untrusted input protect hash dos attacks set seed based uptime unpredictable attackers big surprise hand inlining rotation method returned improved things jitter inlined profiling native net perspective problem treats precision valid choices mixed implementing version choose comparison string spookyhash bits considerably faster bits faster bits considerably faster spookyhash bits fast reasonable choice net core net core hashcode struct methods hashcode combine method create hash code objects hashcode add method helps deal collections gethashcode easy read blog post gethashcode easy details comments usage implementation good github dotnet coreclr pull generate hash codes super simple write generate quality hash code worry implementation details fluent implementation algorithm posted jon skeet includes allocations boxing operations usage compiler ensure called class generic type constraint compiler support adding generic argument adds boxing operation simplistic approach classic builder pattern typesafe boxing unboxing compatbile net extension methods acutal builder class resharper users generate gethashcode equals properties alternative struct appears solid implementation simply net core current implementation english left rotate circular shift h1 positions add result h1 xor result start performing operation static random seed h1 item perform operation previous result item nice properties rol hash code algorithm regrettably deferring fast expect comment discussion illustrates directly calling performant flip internal copy code sacrificing gained responsible remembering random seed consequences skip step work database connectivity classes unique identifier database database generate hashcode pretty nightcoder solution easier raise primes times puke mouth knowing refactored method default slower close eyes forget issue floats decimals implementation selected answer test fails floats hash switched values negative test passes ints changed implementation gethashcode primitive types work static helper class implements josh bloch implementation explicit overloads prevent boxing implement hash long primitives pass string comparison matches equals implementation hash output int chain hash calls microsoft lead hashing guess multiple big int multi type converted int values xor result hash hash unique hash naturally limited number digits bytes hashing algorithm md5 turn multiple values hashed identifier day component