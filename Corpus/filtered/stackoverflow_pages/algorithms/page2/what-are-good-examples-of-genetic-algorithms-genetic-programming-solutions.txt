good examples algorithms programming solutions https stackoverflow questions  good examples algorithms programming solutions stands question good fit format expect answers supported facts references expertise question solicit debate arguments polling extended discussion feel question improved reopened visit center guidance closed  years ago algorithms programming gp interesting areas specific problems solved gp libraries frameworks roll questions problems gp solve libraries frameworks hand experiences answer homework job professional programmer  writing algorithm based automated trading p500 futures application written visual basic  idea vb3 classes application started population randomly generated fixed length strings gene corresponded specific shape minute minute price data p500 futures specific order buy sell loss profit amounts string gene profit performance evaluated  years historical data shape matched historical data assumed buy sell order evaluated trade result caveat gene started fixed money broke removed gene pool evaluation population survivors cross bred randomly mixing bits parents likelihood gene selected parent proportional profit produced possibility point mutations spice things bit generations ended population genes turn  average  chance death brokeness historical data chance live boss lost close    months trading traditional lost willingness continue project retrospect huge profits population genes produced happened biased buy orders opposed sell orders   ratio   hindsight market bit  critters lived neural network brain received inputs output vector movement actions brains genes program started random population critters random brains inputs output neurons static environment contained food dangers food increased energy energy mate dangers reduce energy energy  died eventually creatures evolved food avoid dangers decided experiment creature brains output neuron called mouth input neuron called ear started surprised evolved maximize space respective creature stay respective food randomly learned cooperate exceptions interesting dead creatures food guess happened types creatures evolved attacked swarms high avoidance lesson communication cooperation introduce element hurting gain cooperation destroyed reflects free markets capitalism businesses hurt competition clear power hurt competition edit wrote frameworks wrote neural net code eric plausible people powers limitations obvious played simple simplistic doubters neural nets proven simulate function layer pretty simple navigate solution space finding local global minimum combine neural nets pretty good functions approximate solutions generic problems neural nets optimizing function inputs inputs function demo code survival mempko darcs neural demos eaters build instructions install darcs libboost liballegro gcc cmake january  contacted philips display technologies creating electronics commercial ink sony librie released japan years amazon kindle hit market europe philips engineers major problem months product supposed hit market ghosting screen changing problem  drivers creating electrostatic field drivers voltage set  mv changed change optimizing driver voltage individually question number combination values billions  minute special camera evaluate single combination engineers standard optimization techniques close head engineer contacted released programming library open source community asked gp involved month worked writing tuning library synthetic data integrating weekend live real thing monday glowing emails hardware designer amazing year product hit market paid cent bragging rights budget knew deal started working great story applications gas optimize seating assignments wedding reception  guests  tables evaluation function based keeping people dates putting people common keeping people extreme opposite views separate tables times time good tables odd balls wife seating assignments traveling salesman optimizer mapping chromosome itinerary trivial breed mutate chromosomes risk generating invalid tours update couple people asked start array guests cities arbitrary consistent ordering alphabetized reference solution guest seat number encode ordering directly chromosome encode instructions transforming reference solution solution treat chromosomes lists indexes array swap decode chromosome start reference solution apply swaps chromosome swapping entries array valid solution guest city appears chromosomes randomly generated mutated crossed produce valid solution algorithms techniques determine settings risk management gold farmers stolen credit cards pay mmos transactions values fraud figure combination settings properly identify fraudulent transactions false positives data dozen boolean characteristics transaction totalled total higher threshold transaction fraud create large number random sets values evaluate corpus data select scored fraud detection limiting number false positives cross breed generation produce generation candidates number generations scoring set values deemed winner creating corpus data test achilles heel waited chargebacks months respond fraudsters manually review large numbers transactions build corpus data wait long ended identifying vast majority fraud  fraud prone items  incoming transactions fraud pretty perl software fairly linux box   hours  minutes load data wan link rest time spent crunching size generation limited ram slight parameters good result set avoided gaffes manually tweak relative values dozens fraud indicators consistently solutions create hand afaik  years wrote football tipping built predict week week outcome games afl aussie rules football years ago bored standard work football pool online picks pundit press figured hard beat bunch broadcast journalism majors thought massey ratings reveal season strategy winning fame glory reasons discovered massey track afl cynic believes outcome afl game basically random chance complaints rule belong forum basically considered offensive strength defensive strength field advantage week week improvement lack velocity created set polynomial equations team season winner score match computed goal set coefficients closely matched outcome games set predict upcoming weeks game practice solutions accurately predicted  game outcomes pick   games upcoming week week training set result middle pack major cash prize beat vegas fun built scratch framework common problems travelling salesman variation roger alsing mona lisa program written evolutionary sudoku solver required bit original thought implementing idea reliable algorithms solving sudokus evolutionary approach works fairly days playing evolutionary program cold decks poker article reddit satisfactory moment improve framework evolutionary algorithms developed brew laser surface profile company developed freight industry  relied  dimensional triangulation custom laser scanner x512 camera custom capture hw distance camera laser precise focal point cameras   position expected nightmare work calibration parameters standard geometry simulated annealing style equation solving algorithm whipped evening created calibration cube test knew cube dimensions high accuracy idea evolve set custom triangulation parameters scanning unit overcome production variations trick worked treat flabbergasted  generations virtual cube generated raw scan recreated calibration parameters looked cube  generations calibration needed difficult exact color combination planning paint house color mind colors vendor yesterday prof researcher mentioned true story germany references requests guy color guy door door people exact color code rgb closet customer mind color guy carry software program start  colors coded coded chromosome decoded rgb consumer picks   colors closest mind program assign maximum fitness individual generation mutation crossover steps repeated till consumer exact color color guy rgb combination assigning maximum fitness color closes consumer mind color guy program increasing chances converge color consumer mind pretty fun  planning  pls elucidate reason undergraduate compsci degree assigned problem finding optimal jvm flags jikes virtual machine evaluated dicappo benchmark suite returns time console wrote distributed gentic alogirthm switched flags improve runtime benchmark suite days compensate hardware jitter problem properly learn compiler theory intent assignment seeded initial population exisiting default flags interesting algorithm configuration o3 optimisation level faster tests edit wrote algorithm framework python assignment popen commands benchmarks assessed assignment looked pyevolve programming jonathan koza amazon pretty book evolutionary algorithm programming techniques examples highly checking algorithm grown algorithm evolve swarm algorithm object collection destruction scenario practical purpose clearing minefield link paper interesting multi staged fitness function necessity simple fitness functions provide algorithm differentiate members population couple weeks ago suggested solution algorithms solve problem graph layout constrained optimization problem area machine learning implemented based classification rules framework scratch sample project training artificial neural networks ann opposed famous backpropagation algorithm addition graduate training hidden markov models additional approach based baum welch algorithm team investigating evolutionary computation automatically bugs existing programs repaired number real bugs real software projects project homepage applications repair technique code reproduction project evolves abstract syntax trees parsed existing programs implemented ocaml custom engine code reproduction project personal contribution project evolves x86 assembly byte code compiled programs written number programming languages application implemented clojure custom built engine nice aspect evolutionary computation simplicity technique write custom implementations difficulty good freely introductory text programming field guide programming coworker working solution loading freight trucks criteria company requires working algorithm solution branch bound aggressive pruning process implementing solution good years ago optimize asr automatic speech recognition grammars recognition rates started fairly simple lists choices testing combinations terms slot worked open complex grammars fitness determined measuring separation terms sequences kind phonetic distance function experimented making weakly equivalent variations grammar compiled compact representation direct algorithm drastically increased size language applications default hypothesis test quality solutions generated algorithms involved categorization kinds fitting problems create rule explains set choices reviewers dataset complete framework named galab solve problems locating gsm ants bts decrease overlap blank locations resource constraint project scheduling evolutionary picture creation evopic travelling salesman problem queen color problems knight tour knapsack problems magic square sudoku puzzles string compression based superstring problem d packaging problem tiny artificial life app rubik puzzle optimize hash function memory addresses addresses k k sizes predictability bit pattern address bits middle bits incrementing regularly original hash function chunky tended cluster hits hash bucket improved algorithm perfect distribution homework counts studies rolled program solve traveling salesman problem idea comparison criteria difficulty map problem performance techniques simulated annealing worked pretty understand reproduction phase correctly modeling problem hand suitable programming struck hardest interesting dabbled neural networks kind programming production code built simple extracting patterns frequency spectrum music played output drive graphical effects winamp plugin input fft frames imagine d array floats output single float weighted sum inputs thresholded     genes input weights fitness function combination duty cycle pulse width bpm range gas tuned parts spectrum bpm limits tend converge pattern outputs  population rendering engine interesting average fitness population good indicator music generally   seconds figure thesis wrote generic framework multi objective optimisation algorithm mpoems multiobjective prototype optimization evolved improvement steps evolutionary concepts generic problem independent parts separated problem dependent parts interface povided framework adding problem dependent parts algorithm facilitates work lot code solutions algorithm compared scientific work state art algorithms spea  nsga proven algorithm performes comparable depending metrics measure performance depending optimization problem thesis proof work applied framework project selection problem portfolio management selecting projects add company support strategy company support arbitrary goal selection number projects specific category maximization project synergies thesis applies framework project selection problem ub tuwien dipl  ac05038968 pdf worked portfolio management department fortune  commercial software applied project selection problem portfolio optimization resources documentation framework thomaskremmel mpoems mpoems_in_java_documentation pdf mpoems presentation paper portal acm org citation cfm   bit enthusiasm easily adapt code generic framework arbitrary multi objective optimisation problem work problem tasks dsps assign tasks dsps defined minimizing load loaded dsp types tasks task types performance ramifications depending assigned encoded set job dsp assignments dna string algorithm breed assignment string worked fairly previous method evaluate combination trivial problem sizes years complete problem optimal solution reached decide current effort good longer competition codechef great site monthly programming competitions supposed solve unsolveable sudoku close wrong collumns rows generate perfect sudoku override fields pretty good basis programming improve solution deterministic approach case sudoku x300 search long simple algorithm optimize signal noise ratio wave represented binary string flipping bits ways generations produce transform higher signal noise ratio wave algorithm simulated annealing case core algorithms simple simple case framework generation creation selection random seed signal noise ratio function hand seminar school develop application generate music based musical mode program build output midi file song distincts aproachs generate music program explore compositions undergrad nero combination neural network algorithm teach game robots intelligent decisions pretty cool developed multithreaded swing based simulation robot navigation set randomized grid terrain food sources mines developed algorithm based strategy exploring optimization robotic behavior survival fittest genes robotic chromosome charting mapping iteration cycle developed game behavior application built algorithm solving traveling sales man problem route finding account start goal states multiple connection points delays cancellations construction works rush hour public strikes consideration fastest cheapest routes providing balanced recommendation route day generally strategy pojo based representaton genes apply specific interface implementations selection mutation crossover strategies criteria point fitness function basically complex based strategy criteria apply heuristic measure looked applying algorithm automated testing code systematic mutation cycles algorithm understands logic ascertain bug report recommendations code fixes basically optimize code provide recommendations improvement automating discovery programmatic code apply algorithms music production applications generally evolutionary strategies metaheuristic global optimization strategies slow learn start pick solutions closer closer goal state long fitness function heuristics aligned produce convergence search space computer player game exclusively based programming program treated evaluation function sequence moves programs produced good diminuitive x4 board perl coded things differently today reading blind watchmaker interested pascal program dawkins developed create models organisms evolve time interested write swarm fancy critter graphics chromosomes controlled traits organisms ability survive lived simple slug environment organisms lived died partly chance based effectively adapted local environments consumed nutrients reproduced fun proof wife geek ago rolled evolve image processing kernels remove cosmic ray traces hubble space telescope hst images standard approach multiple exposures hubble stuff images hst time valuable astronomy buff attended congress evolutionary computation thought clean single exposures individuals form trees x3 pixel area input performed calculations produced decision modify center pixel fitness judged comparing output image cleaned traditional stacking exposures sort worked warrant foregoing original approach time constrained thesis expanded parts bin algorithm pretty improved libraries recall correctly iraf cfitsio astronomical image data processing experimented youth wrote simulator python worked genes encoded weights neural network neural network inputs antennae detected touches higher values meant close  meant touching outputs wheels wheels forward guy forward wheels opposite directions guy turned strength output determined speed wheel turning simple maze generated simple stupid start screen goal walls wall space randomly path started random guys thought bugs start guy reached goal time limit reached fitness calculated inversely proportional distance goal time paired bred create generation probability chosen bred proportional fitness meant bred repeatedly high relative fitness thought develop left wall hugging behavior follow optimal experiment bugs converged spiral pattern spiral outward touched wall follow gap spiral gap  degree turn left enter gap majority walls goal feature color vector genes track relatedness individuals generations color breeding strategy develop strategy complicated neural net adding memory strategy things separate gene pools recombined  generations push strategy impossible interesting thing graphing fitness time definite patterns maximum fitness evolution book talk possibility