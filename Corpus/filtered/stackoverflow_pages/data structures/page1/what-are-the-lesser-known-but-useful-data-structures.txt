lesser data structures questions lesser data structures locked question answers locked question topic historical significance accepting answers interactions data structures unknown programmers linked lists binary trees hashes skip lists bloom filters data structures common worth knowing rely great ideas enrich programmer tool box interested techniques dancing links clever properties common data structure edit include links describing data structures add couple data structure cool jonas kölker pointed provide data structure answer data structures float based votes prefix trees crit bit trees existed years unknown cool trash dynamic trie hash data structure combines trie hash function bloom filter bit array bits initially set add item hash functions indices array set check item set compute indices check set probability false positives wikipedia number inserted items false negatives removing item impossible implement counting bloom filter represented array ints increment decrement rope string cheap prepends substrings middle insertions appends structure sufficed regular strings arrays prepends expensive needed reversing everthing question skip lists pretty neat wikipedia skip list probabilistic data structure based multiple parallel sorted linked lists efficiency comparable binary search tree order log average time operations alternative balanced trees probalistic balancing strict enforcement balancing easy implement faster red black tree good programmers toolchest depth introduction skip lists link video mit introduction algorithms lecture applet demonstrating skip lists visually spatial indices trees kd trees store spatial data efficiently good geographical map coordinate data vlsi place route algorithms nearest neighbor search bit arrays store individual bits compactly fast bit operations zippers derivatives data structures modify structure natural notion cursor current location guarantee indicies bound xmonad window manager track window focused amazingly derive applying techniques calculus type original data structure suffix kinds string searching wikipedia org wiki suffix_trie functionality suffix arrays fast suffix trees lot smaller splay trees mentioned reason cool threefold small left pointers binary tree node color size stored comparatively easy implement offer optimal amortized complexity host measurement criteria log lookup time wikipedia org wiki splay_tree performance_theorems heap ordered search trees store bunch key prio pairs tree search tree respect keys heap ordered respect priorities tree unique shape fully packed left random priorities expected log search time iirc niche adjacency lists undirected planar graphs neighbour queries data structure organize existing data structure planar graph node degree pick node neighbors neighbor list remove graph recurse graph pair neighbor list neighbor list size algorithm neighbors list list add node missing neighbors node neighbor list store neighbor list fast lookup lock free alternatives standard data structures lock free queue stack list overlooked increasingly relevant concurrency higher priority admirable goal mutexes locks handle concurrent read writes links cam srg netos lock free ibm people michael podc pdf links pdf boyet articles lockfreestack html mike acton provocative blog excellent articles lock free design approaches disjoint set pretty nifty cases divide bunch items distinct sets query membership good implementation union operations result amortized costs effectively constant inverse ackermnan function recall data structures class correctly fibonacci heaps fastest algorithms asymptotically lot graph problems shortest path problem dijkstra algorithm runs log time standard binary heaps fibonacci heaps improves log huge speedup dense graphs high constant factor making impractical practice experience rendering familiar bsp trees generally method structuring scene manageable rendering knowing camera coordinates bearing binary space partitioning bsp method recursively subdividing space convex sets hyperplanes subdivision rise representation scene tree data structure bsp tree method breaking intricately shaped polygons convex sets smaller polygons consisting reflex angles angles smaller general description space partitioning space partitioning originally approach proposed computer graphics increase rendering efficiency applications include performing geometrical operations shapes constructive solid geometry cad collision detection robotics computer games computer applications involve handling complex spatial scenes huffman trees compression finger trees fan mentioned purely functional data structures functional representation persistent sequences supporting access ends amortized constant time concatenation splitting time logarithmic size smaller piece original article functional finger trees instance general design technique troduced okasaki called implicit recursive slowdown trees extension implicit deque structure replacing pairs nodes provide flexibility required efficient concatenation splitting finger tree parameterized monoid monoids result behaviors tree finger trees simulate data structures circular ring buffer streaming things surprised mentioned merkle trees hash trees cases p2p programs digital signatures verify hash file file zvrba van emde boas trees cool general question answer log log dictionaries keys independent keys repeated halving log repeated sqrting log log veb tree splay trees chris okasaki purely functional data structures mind interesting variant hash table called cuckoo hashing multiple hash functions order deal hash collisions collisions resolved removing object location primary hash moving location alternate hash function cuckoo hashing efficient memory space increase load factor hash functions good access time min max heap variation heap implements double ended priority queue achieves simple change heap property tree min max ordered element odd levels greater childrens grand children levels numbered starting internet512 chonbuk kr datastructure heap img heap8 jpg cache oblivious datastructures basic idea lay tree recursively smaller blocks caches sizes advantage blocks convenient fit leads efficient caching l1 cache ram big chunks data read disk needing specifics sizes caching layers left leaning red black trees simplified implementation red black trees robert sedgewick published half lines code implement trouble wrapping head implementation red black tree read variant identical andersson trees work stealing queue lock free data structure dividing work equaly multiple threads implementation work stealing queue bootstrapped skew binomial heaps gerth stølting brodal chris okasaki long provide asymptotically optimal heap operations function setting size union insert minimum deletemin note union takes time heaps commonly covered data structure textbooks leftist heaps fibonacci heaps asymptotics worst case amortized persistently multiple implementations haskell jointly derived brodal okasaki brodal imperative heap asymptotics kd trees spatial data structure real time raytracing downside triangles cross intersect spaces clipped generally bvh faster lightweight mx cif quadtrees store bounding boxes arbitrary point sets combining regular quadtree binary tree edges quads hamt hierarchical hash map access times generally exceed hash maps constants involved inverted search engine circles fast retrieval documents search terms documented nist dictionary algorithms data structures ball trees people giggle ball tree data structure indexes points metric space article building finding nearest neighbors point accelerating data structure optimize dynamically allocated arrays gap buffers emacs kind cool fenwick tree data structure count sum elements vector subindexes trivial solution precalculating sum begining update item work fenwick trees update query log works cool simple explained fenwick original paper freely ubc local reading proceedings spe91 spe vol24 issue3 spe884 pdf father rqm tree cool info minimum element indexes vector works log update query teach rqm fenwick tree van emde boas trees implementation integers nested sets nice representing trees relational databases running queries instance activerecord ruby rails default orm simple nested set plugin working trees trivial pretty domain specific half edge data structure pretty neat iterate polygon meshes faces edges computer graphics computational geometry